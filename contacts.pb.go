// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: contacts.proto

package dialog

import (
	bytes "bytes"
	context "context"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	types "github.com/gogo/protobuf/types"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Phone for import
type PhoneToImport struct {
	/// phone number for import in international format
	PhoneNumber int64 `protobuf:"varint,1,opt,name=phone_number,json=phoneNumber,proto3" json:"phone_number,omitempty"`
	/// optional name for contact
	Name *types.StringValue `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (m *PhoneToImport) Reset()      { *m = PhoneToImport{} }
func (*PhoneToImport) ProtoMessage() {}
func (*PhoneToImport) Descriptor() ([]byte, []int) {
	return fileDescriptor_72e48e1bf84d56b8, []int{0}
}
func (m *PhoneToImport) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PhoneToImport) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PhoneToImport.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PhoneToImport) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PhoneToImport.Merge(m, src)
}
func (m *PhoneToImport) XXX_Size() int {
	return m.Size()
}
func (m *PhoneToImport) XXX_DiscardUnknown() {
	xxx_messageInfo_PhoneToImport.DiscardUnknown(m)
}

var xxx_messageInfo_PhoneToImport proto.InternalMessageInfo

func (m *PhoneToImport) GetPhoneNumber() int64 {
	if m != nil {
		return m.PhoneNumber
	}
	return 0
}

func (m *PhoneToImport) GetName() *types.StringValue {
	if m != nil {
		return m.Name
	}
	return nil
}

// Email for import
type EmailToImport struct {
	/// email for importing
	Email string `protobuf:"bytes,1,opt,name=email,proto3" json:"email,omitempty"`
	/// optional name for contact
	Name *types.StringValue `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (m *EmailToImport) Reset()      { *m = EmailToImport{} }
func (*EmailToImport) ProtoMessage() {}
func (*EmailToImport) Descriptor() ([]byte, []int) {
	return fileDescriptor_72e48e1bf84d56b8, []int{1}
}
func (m *EmailToImport) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EmailToImport) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EmailToImport.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EmailToImport) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EmailToImport.Merge(m, src)
}
func (m *EmailToImport) XXX_Size() int {
	return m.Size()
}
func (m *EmailToImport) XXX_DiscardUnknown() {
	xxx_messageInfo_EmailToImport.DiscardUnknown(m)
}

var xxx_messageInfo_EmailToImport proto.InternalMessageInfo

func (m *EmailToImport) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *EmailToImport) GetName() *types.StringValue {
	if m != nil {
		return m.Name
	}
	return nil
}

// Importing phones and emails for building contact list
// Maximum amount of items for import per method call equals to 100.
type RequestImportContacts struct {
	Phones []*PhoneToImport `protobuf:"bytes,1,rep,name=phones,proto3" json:"phones,omitempty"`
	Emails []*EmailToImport `protobuf:"bytes,2,rep,name=emails,proto3" json:"emails,omitempty"`
	/// Optimizations drops some info from response to decrease traffic and latency
	Optimizations []UpdateOptimization `protobuf:"varint,3,rep,packed,name=optimizations,proto3,enum=dialog.UpdateOptimization" json:"optimizations,omitempty"`
}

func (m *RequestImportContacts) Reset()      { *m = RequestImportContacts{} }
func (*RequestImportContacts) ProtoMessage() {}
func (*RequestImportContacts) Descriptor() ([]byte, []int) {
	return fileDescriptor_72e48e1bf84d56b8, []int{2}
}
func (m *RequestImportContacts) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RequestImportContacts) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RequestImportContacts.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RequestImportContacts) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RequestImportContacts.Merge(m, src)
}
func (m *RequestImportContacts) XXX_Size() int {
	return m.Size()
}
func (m *RequestImportContacts) XXX_DiscardUnknown() {
	xxx_messageInfo_RequestImportContacts.DiscardUnknown(m)
}

var xxx_messageInfo_RequestImportContacts proto.InternalMessageInfo

func (m *RequestImportContacts) GetPhones() []*PhoneToImport {
	if m != nil {
		return m.Phones
	}
	return nil
}

func (m *RequestImportContacts) GetEmails() []*EmailToImport {
	if m != nil {
		return m.Emails
	}
	return nil
}

func (m *RequestImportContacts) GetOptimizations() []UpdateOptimization {
	if m != nil {
		return m.Optimizations
	}
	return nil
}

type ResponseImportContacts struct {
	Seq int32 `protobuf:"varint,2,opt,name=seq,proto3" json:"seq,omitempty"`
	/// Server state related to current client, used by server only
	State []byte `protobuf:"bytes,3,opt,name=state,proto3" json:"state,omitempty"`
	/// Optimizations drops some info from response to decrease traffic and latency
	UserPeers []*UserOutPeer `protobuf:"bytes,4,rep,name=user_peers,json=userPeers,proto3" json:"user_peers,omitempty"`
}

func (m *ResponseImportContacts) Reset()      { *m = ResponseImportContacts{} }
func (*ResponseImportContacts) ProtoMessage() {}
func (*ResponseImportContacts) Descriptor() ([]byte, []int) {
	return fileDescriptor_72e48e1bf84d56b8, []int{3}
}
func (m *ResponseImportContacts) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ResponseImportContacts) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ResponseImportContacts.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ResponseImportContacts) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResponseImportContacts.Merge(m, src)
}
func (m *ResponseImportContacts) XXX_Size() int {
	return m.Size()
}
func (m *ResponseImportContacts) XXX_DiscardUnknown() {
	xxx_messageInfo_ResponseImportContacts.DiscardUnknown(m)
}

var xxx_messageInfo_ResponseImportContacts proto.InternalMessageInfo

func (m *ResponseImportContacts) GetSeq() int32 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *ResponseImportContacts) GetState() []byte {
	if m != nil {
		return m.State
	}
	return nil
}

func (m *ResponseImportContacts) GetUserPeers() []*UserOutPeer {
	if m != nil {
		return m.UserPeers
	}
	return nil
}

// Importing phones and emails for building contact list
// Import evaluated lazily, response does not contain any info
// Maximum amount of items for import per method call equals to 100.
type RequestDeferredImportContacts struct {
	Phones []*PhoneToImport `protobuf:"bytes,1,rep,name=phones,proto3" json:"phones,omitempty"`
	Emails []*EmailToImport `protobuf:"bytes,2,rep,name=emails,proto3" json:"emails,omitempty"`
}

func (m *RequestDeferredImportContacts) Reset()      { *m = RequestDeferredImportContacts{} }
func (*RequestDeferredImportContacts) ProtoMessage() {}
func (*RequestDeferredImportContacts) Descriptor() ([]byte, []int) {
	return fileDescriptor_72e48e1bf84d56b8, []int{4}
}
func (m *RequestDeferredImportContacts) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RequestDeferredImportContacts) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RequestDeferredImportContacts.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RequestDeferredImportContacts) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RequestDeferredImportContacts.Merge(m, src)
}
func (m *RequestDeferredImportContacts) XXX_Size() int {
	return m.Size()
}
func (m *RequestDeferredImportContacts) XXX_DiscardUnknown() {
	xxx_messageInfo_RequestDeferredImportContacts.DiscardUnknown(m)
}

var xxx_messageInfo_RequestDeferredImportContacts proto.InternalMessageInfo

func (m *RequestDeferredImportContacts) GetPhones() []*PhoneToImport {
	if m != nil {
		return m.Phones
	}
	return nil
}

func (m *RequestDeferredImportContacts) GetEmails() []*EmailToImport {
	if m != nil {
		return m.Emails
	}
	return nil
}

type ResponseDeferredImportContacts struct {
	TaskId string `protobuf:"bytes,1,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
}

func (m *ResponseDeferredImportContacts) Reset()      { *m = ResponseDeferredImportContacts{} }
func (*ResponseDeferredImportContacts) ProtoMessage() {}
func (*ResponseDeferredImportContacts) Descriptor() ([]byte, []int) {
	return fileDescriptor_72e48e1bf84d56b8, []int{5}
}
func (m *ResponseDeferredImportContacts) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ResponseDeferredImportContacts) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ResponseDeferredImportContacts.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ResponseDeferredImportContacts) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResponseDeferredImportContacts.Merge(m, src)
}
func (m *ResponseDeferredImportContacts) XXX_Size() int {
	return m.Size()
}
func (m *ResponseDeferredImportContacts) XXX_DiscardUnknown() {
	xxx_messageInfo_ResponseDeferredImportContacts.DiscardUnknown(m)
}

var xxx_messageInfo_ResponseDeferredImportContacts proto.InternalMessageInfo

func (m *ResponseDeferredImportContacts) GetTaskId() string {
	if m != nil {
		return m.TaskId
	}
	return ""
}

// Getting current contact list
// SHA256 hash of list of a comma-separated list of contact UIDs in ascending
// order may be passed in contactsHash parameter.
// If the contact list was not changed, isNotChanged will be true.
type RequestGetContacts struct {
	ContactsHash  string               `protobuf:"bytes,1,opt,name=contacts_hash,json=contactsHash,proto3" json:"contacts_hash,omitempty"`
	Optimizations []UpdateOptimization `protobuf:"varint,2,rep,packed,name=optimizations,proto3,enum=dialog.UpdateOptimization" json:"optimizations,omitempty"`
}

func (m *RequestGetContacts) Reset()      { *m = RequestGetContacts{} }
func (*RequestGetContacts) ProtoMessage() {}
func (*RequestGetContacts) Descriptor() ([]byte, []int) {
	return fileDescriptor_72e48e1bf84d56b8, []int{6}
}
func (m *RequestGetContacts) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RequestGetContacts) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RequestGetContacts.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RequestGetContacts) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RequestGetContacts.Merge(m, src)
}
func (m *RequestGetContacts) XXX_Size() int {
	return m.Size()
}
func (m *RequestGetContacts) XXX_DiscardUnknown() {
	xxx_messageInfo_RequestGetContacts.DiscardUnknown(m)
}

var xxx_messageInfo_RequestGetContacts proto.InternalMessageInfo

func (m *RequestGetContacts) GetContactsHash() string {
	if m != nil {
		return m.ContactsHash
	}
	return ""
}

func (m *RequestGetContacts) GetOptimizations() []UpdateOptimization {
	if m != nil {
		return m.Optimizations
	}
	return nil
}

type ResponseGetContacts struct {
	IsNotChanged bool           `protobuf:"varint,2,opt,name=is_not_changed,json=isNotChanged,proto3" json:"is_not_changed,omitempty"`
	UserPeers    []*UserOutPeer `protobuf:"bytes,3,rep,name=user_peers,json=userPeers,proto3" json:"user_peers,omitempty"`
}

func (m *ResponseGetContacts) Reset()      { *m = ResponseGetContacts{} }
func (*ResponseGetContacts) ProtoMessage() {}
func (*ResponseGetContacts) Descriptor() ([]byte, []int) {
	return fileDescriptor_72e48e1bf84d56b8, []int{7}
}
func (m *ResponseGetContacts) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ResponseGetContacts) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ResponseGetContacts.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ResponseGetContacts) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResponseGetContacts.Merge(m, src)
}
func (m *ResponseGetContacts) XXX_Size() int {
	return m.Size()
}
func (m *ResponseGetContacts) XXX_DiscardUnknown() {
	xxx_messageInfo_ResponseGetContacts.DiscardUnknown(m)
}

var xxx_messageInfo_ResponseGetContacts proto.InternalMessageInfo

func (m *ResponseGetContacts) GetIsNotChanged() bool {
	if m != nil {
		return m.IsNotChanged
	}
	return false
}

func (m *ResponseGetContacts) GetUserPeers() []*UserOutPeer {
	if m != nil {
		return m.UserPeers
	}
	return nil
}

// Removing contact from contact list
type RequestRemoveContact struct {
	Uid        int32 `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`
	AccessHash int64 `protobuf:"varint,2,opt,name=access_hash,json=accessHash,proto3" json:"access_hash,omitempty"`
}

func (m *RequestRemoveContact) Reset()      { *m = RequestRemoveContact{} }
func (*RequestRemoveContact) ProtoMessage() {}
func (*RequestRemoveContact) Descriptor() ([]byte, []int) {
	return fileDescriptor_72e48e1bf84d56b8, []int{8}
}
func (m *RequestRemoveContact) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RequestRemoveContact) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RequestRemoveContact.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RequestRemoveContact) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RequestRemoveContact.Merge(m, src)
}
func (m *RequestRemoveContact) XXX_Size() int {
	return m.Size()
}
func (m *RequestRemoveContact) XXX_DiscardUnknown() {
	xxx_messageInfo_RequestRemoveContact.DiscardUnknown(m)
}

var xxx_messageInfo_RequestRemoveContact proto.InternalMessageInfo

func (m *RequestRemoveContact) GetUid() int32 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func (m *RequestRemoveContact) GetAccessHash() int64 {
	if m != nil {
		return m.AccessHash
	}
	return 0
}

// Adding contact to contact list
type RequestAddContact struct {
	Uid        int32 `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`
	AccessHash int64 `protobuf:"varint,2,opt,name=access_hash,json=accessHash,proto3" json:"access_hash,omitempty"`
}

func (m *RequestAddContact) Reset()      { *m = RequestAddContact{} }
func (*RequestAddContact) ProtoMessage() {}
func (*RequestAddContact) Descriptor() ([]byte, []int) {
	return fileDescriptor_72e48e1bf84d56b8, []int{9}
}
func (m *RequestAddContact) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RequestAddContact) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RequestAddContact.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RequestAddContact) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RequestAddContact.Merge(m, src)
}
func (m *RequestAddContact) XXX_Size() int {
	return m.Size()
}
func (m *RequestAddContact) XXX_DiscardUnknown() {
	xxx_messageInfo_RequestAddContact.DiscardUnknown(m)
}

var xxx_messageInfo_RequestAddContact proto.InternalMessageInfo

func (m *RequestAddContact) GetUid() int32 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func (m *RequestAddContact) GetAccessHash() int64 {
	if m != nil {
		return m.AccessHash
	}
	return 0
}

// Searching contacts by user's query
type RequestSearchContacts struct {
	Request       string               `protobuf:"bytes,1,opt,name=request,proto3" json:"request,omitempty"`
	Optimizations []UpdateOptimization `protobuf:"varint,2,rep,packed,name=optimizations,proto3,enum=dialog.UpdateOptimization" json:"optimizations,omitempty"`
}

func (m *RequestSearchContacts) Reset()      { *m = RequestSearchContacts{} }
func (*RequestSearchContacts) ProtoMessage() {}
func (*RequestSearchContacts) Descriptor() ([]byte, []int) {
	return fileDescriptor_72e48e1bf84d56b8, []int{10}
}
func (m *RequestSearchContacts) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RequestSearchContacts) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RequestSearchContacts.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RequestSearchContacts) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RequestSearchContacts.Merge(m, src)
}
func (m *RequestSearchContacts) XXX_Size() int {
	return m.Size()
}
func (m *RequestSearchContacts) XXX_DiscardUnknown() {
	xxx_messageInfo_RequestSearchContacts.DiscardUnknown(m)
}

var xxx_messageInfo_RequestSearchContacts proto.InternalMessageInfo

func (m *RequestSearchContacts) GetRequest() string {
	if m != nil {
		return m.Request
	}
	return ""
}

func (m *RequestSearchContacts) GetOptimizations() []UpdateOptimization {
	if m != nil {
		return m.Optimizations
	}
	return nil
}

type ResponseSearchContacts struct {
	/// Registered contacts (for old bot sdk compatibility)
	Users     []*User        `protobuf:"bytes,1,rep,name=users,proto3" json:"users,omitempty"`
	UserPeers []*UserOutPeer `protobuf:"bytes,2,rep,name=user_peers,json=userPeers,proto3" json:"user_peers,omitempty"`
}

func (m *ResponseSearchContacts) Reset()      { *m = ResponseSearchContacts{} }
func (*ResponseSearchContacts) ProtoMessage() {}
func (*ResponseSearchContacts) Descriptor() ([]byte, []int) {
	return fileDescriptor_72e48e1bf84d56b8, []int{11}
}
func (m *ResponseSearchContacts) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ResponseSearchContacts) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ResponseSearchContacts.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ResponseSearchContacts) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResponseSearchContacts.Merge(m, src)
}
func (m *ResponseSearchContacts) XXX_Size() int {
	return m.Size()
}
func (m *ResponseSearchContacts) XXX_DiscardUnknown() {
	xxx_messageInfo_ResponseSearchContacts.DiscardUnknown(m)
}

var xxx_messageInfo_ResponseSearchContacts proto.InternalMessageInfo

func (m *ResponseSearchContacts) GetUsers() []*User {
	if m != nil {
		return m.Users
	}
	return nil
}

func (m *ResponseSearchContacts) GetUserPeers() []*UserOutPeer {
	if m != nil {
		return m.UserPeers
	}
	return nil
}

// Update about contact registration
type UpdateContactRegistered struct {
	Uid      int32      `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`
	IsSilent bool       `protobuf:"varint,2,opt,name=is_silent,json=isSilent,proto3" json:"is_silent,omitempty"`
	Date     int64      `protobuf:"varint,3,opt,name=date,proto3" json:"date,omitempty"`
	Mid      *UUIDValue `protobuf:"bytes,5,opt,name=mid,proto3" json:"mid,omitempty"`
}

func (m *UpdateContactRegistered) Reset()      { *m = UpdateContactRegistered{} }
func (*UpdateContactRegistered) ProtoMessage() {}
func (*UpdateContactRegistered) Descriptor() ([]byte, []int) {
	return fileDescriptor_72e48e1bf84d56b8, []int{12}
}
func (m *UpdateContactRegistered) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateContactRegistered) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateContactRegistered.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateContactRegistered) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateContactRegistered.Merge(m, src)
}
func (m *UpdateContactRegistered) XXX_Size() int {
	return m.Size()
}
func (m *UpdateContactRegistered) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateContactRegistered.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateContactRegistered proto.InternalMessageInfo

func (m *UpdateContactRegistered) GetUid() int32 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func (m *UpdateContactRegistered) GetIsSilent() bool {
	if m != nil {
		return m.IsSilent
	}
	return false
}

func (m *UpdateContactRegistered) GetDate() int64 {
	if m != nil {
		return m.Date
	}
	return 0
}

func (m *UpdateContactRegistered) GetMid() *UUIDValue {
	if m != nil {
		return m.Mid
	}
	return nil
}

// Update about contacts added
type UpdateContactsAdded struct {
	/// User ids of the registered contacts
	Uids []int32 `protobuf:"varint,1,rep,packed,name=uids,proto3" json:"uids,omitempty"`
	/// Id of the task that finished
	TaskId *types.StringValue `protobuf:"bytes,4,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
}

func (m *UpdateContactsAdded) Reset()      { *m = UpdateContactsAdded{} }
func (*UpdateContactsAdded) ProtoMessage() {}
func (*UpdateContactsAdded) Descriptor() ([]byte, []int) {
	return fileDescriptor_72e48e1bf84d56b8, []int{13}
}
func (m *UpdateContactsAdded) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateContactsAdded) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateContactsAdded.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateContactsAdded) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateContactsAdded.Merge(m, src)
}
func (m *UpdateContactsAdded) XXX_Size() int {
	return m.Size()
}
func (m *UpdateContactsAdded) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateContactsAdded.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateContactsAdded proto.InternalMessageInfo

func (m *UpdateContactsAdded) GetUids() []int32 {
	if m != nil {
		return m.Uids
	}
	return nil
}

func (m *UpdateContactsAdded) GetTaskId() *types.StringValue {
	if m != nil {
		return m.TaskId
	}
	return nil
}

// Update about suspending task - normally it should be ignored
type UpdateContactsAddTaskSuspended struct {
	TaskId string `protobuf:"bytes,1,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
}

func (m *UpdateContactsAddTaskSuspended) Reset()      { *m = UpdateContactsAddTaskSuspended{} }
func (*UpdateContactsAddTaskSuspended) ProtoMessage() {}
func (*UpdateContactsAddTaskSuspended) Descriptor() ([]byte, []int) {
	return fileDescriptor_72e48e1bf84d56b8, []int{14}
}
func (m *UpdateContactsAddTaskSuspended) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateContactsAddTaskSuspended) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateContactsAddTaskSuspended.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateContactsAddTaskSuspended) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateContactsAddTaskSuspended.Merge(m, src)
}
func (m *UpdateContactsAddTaskSuspended) XXX_Size() int {
	return m.Size()
}
func (m *UpdateContactsAddTaskSuspended) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateContactsAddTaskSuspended.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateContactsAddTaskSuspended proto.InternalMessageInfo

func (m *UpdateContactsAddTaskSuspended) GetTaskId() string {
	if m != nil {
		return m.TaskId
	}
	return ""
}

// Update about contacts removed
type UpdateContactsRemoved struct {
	Uids []int32 `protobuf:"varint,1,rep,packed,name=uids,proto3" json:"uids,omitempty"`
}

func (m *UpdateContactsRemoved) Reset()      { *m = UpdateContactsRemoved{} }
func (*UpdateContactsRemoved) ProtoMessage() {}
func (*UpdateContactsRemoved) Descriptor() ([]byte, []int) {
	return fileDescriptor_72e48e1bf84d56b8, []int{15}
}
func (m *UpdateContactsRemoved) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateContactsRemoved) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateContactsRemoved.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateContactsRemoved) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateContactsRemoved.Merge(m, src)
}
func (m *UpdateContactsRemoved) XXX_Size() int {
	return m.Size()
}
func (m *UpdateContactsRemoved) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateContactsRemoved.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateContactsRemoved proto.InternalMessageInfo

func (m *UpdateContactsRemoved) GetUids() []int32 {
	if m != nil {
		return m.Uids
	}
	return nil
}

func init() {
	proto.RegisterType((*PhoneToImport)(nil), "dialog.PhoneToImport")
	proto.RegisterType((*EmailToImport)(nil), "dialog.EmailToImport")
	proto.RegisterType((*RequestImportContacts)(nil), "dialog.RequestImportContacts")
	proto.RegisterType((*ResponseImportContacts)(nil), "dialog.ResponseImportContacts")
	proto.RegisterType((*RequestDeferredImportContacts)(nil), "dialog.RequestDeferredImportContacts")
	proto.RegisterType((*ResponseDeferredImportContacts)(nil), "dialog.ResponseDeferredImportContacts")
	proto.RegisterType((*RequestGetContacts)(nil), "dialog.RequestGetContacts")
	proto.RegisterType((*ResponseGetContacts)(nil), "dialog.ResponseGetContacts")
	proto.RegisterType((*RequestRemoveContact)(nil), "dialog.RequestRemoveContact")
	proto.RegisterType((*RequestAddContact)(nil), "dialog.RequestAddContact")
	proto.RegisterType((*RequestSearchContacts)(nil), "dialog.RequestSearchContacts")
	proto.RegisterType((*ResponseSearchContacts)(nil), "dialog.ResponseSearchContacts")
	proto.RegisterType((*UpdateContactRegistered)(nil), "dialog.UpdateContactRegistered")
	proto.RegisterType((*UpdateContactsAdded)(nil), "dialog.UpdateContactsAdded")
	proto.RegisterType((*UpdateContactsAddTaskSuspended)(nil), "dialog.UpdateContactsAddTaskSuspended")
	proto.RegisterType((*UpdateContactsRemoved)(nil), "dialog.UpdateContactsRemoved")
}

func init() { proto.RegisterFile("contacts.proto", fileDescriptor_72e48e1bf84d56b8) }

var fileDescriptor_72e48e1bf84d56b8 = []byte{
	// 1106 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x57, 0xcf, 0x6f, 0x1b, 0x45,
	0x14, 0xf6, 0xd8, 0x71, 0x9a, 0x3c, 0xdb, 0x51, 0xb3, 0x49, 0x1a, 0xd7, 0x24, 0x5b, 0x77, 0xe9,
	0x0f, 0x2b, 0xa8, 0x76, 0x70, 0x6f, 0x11, 0x52, 0x68, 0x1b, 0xd4, 0x86, 0x43, 0x53, 0x6d, 0x5a,
	0x84, 0xb8, 0x58, 0xe3, 0xdd, 0x17, 0x7b, 0x54, 0x7b, 0x77, 0xb3, 0xb3, 0x1b, 0x24, 0x54, 0x21,
	0x88, 0x38, 0xf5, 0x02, 0x12, 0x5c, 0x90, 0x38, 0x70, 0xe4, 0x3f, 0x40, 0x1c, 0xb8, 0x73, 0x8c,
	0xc4, 0xa5, 0x47, 0xe2, 0x70, 0x40, 0x3d, 0xa0, 0xfe, 0x09, 0x68, 0x67, 0x77, 0xed, 0xdd, 0xb1,
	0x43, 0x5a, 0x51, 0x04, 0xa7, 0xec, 0xce, 0xf7, 0xde, 0x7c, 0xdf, 0x7b, 0xf3, 0xed, 0x9b, 0x18,
	0xe6, 0x0c, 0xdb, 0xf2, 0xa8, 0xe1, 0xf1, 0xba, 0xe3, 0xda, 0x9e, 0xad, 0x4c, 0x9b, 0x8c, 0xf6,
	0xec, 0x4e, 0x45, 0xed, 0xd8, 0x76, 0xa7, 0x87, 0x0d, 0xb1, 0xda, 0xf6, 0xf7, 0x1a, 0x1f, 0xbb,
	0xd4, 0x71, 0xd0, 0x8d, 0xe2, 0x2a, 0x2b, 0x11, 0x4e, 0x1d, 0xd6, 0xa0, 0x96, 0x65, 0x7b, 0xd4,
	0x63, 0xb6, 0x15, 0xa3, 0xf3, 0x26, 0xee, 0x31, 0x8b, 0x25, 0x97, 0x16, 0xfa, 0x8c, 0x1b, 0xd8,
	0xeb, 0x51, 0x0b, 0x6d, 0x3f, 0x5e, 0x2c, 0x38, 0x38, 0xda, 0xb2, 0xe0, 0xf3, 0xd1, 0xcb, 0x12,
	0x37, 0x68, 0x8f, 0x3a, 0xed, 0x46, 0xf4, 0x37, 0x5c, 0xd6, 0x0e, 0x09, 0x94, 0x1e, 0x74, 0x6d,
	0x0b, 0x1f, 0xda, 0xdb, 0x7d, 0xc7, 0x76, 0x3d, 0x65, 0x1d, 0x8a, 0x4e, 0xb0, 0xd0, 0xb2, 0xfc,
	0x7e, 0x1b, 0xdd, 0x32, 0xa9, 0x92, 0x5a, 0xee, 0x76, 0xe9, 0xe9, 0xf3, 0xf5, 0x59, 0x38, 0x77,
	0xc0, 0x38, 0x6b, 0xf7, 0x50, 0x2f, 0x88, 0x90, 0xfb, 0x22, 0x42, 0xd9, 0x84, 0x29, 0x8b, 0xf6,
	0xb1, 0x9c, 0xad, 0x92, 0x5a, 0xa1, 0xb9, 0x52, 0x0f, 0x2b, 0xa9, 0xc7, 0x95, 0xd6, 0x77, 0x3d,
	0x97, 0x59, 0x9d, 0x0f, 0x68, 0xcf, 0x47, 0x79, 0x1f, 0x91, 0xa8, 0xf9, 0x50, 0x7a, 0xaf, 0x4f,
	0x59, 0x6f, 0xa8, 0xe1, 0x4d, 0xc8, 0x63, 0xb0, 0x20, 0xc8, 0x67, 0xe5, 0xa4, 0x10, 0xfb, 0xe7,
	0xb4, 0x87, 0x59, 0x58, 0xd2, 0x71, 0xdf, 0x47, 0xee, 0x85, 0xbc, 0x77, 0xa2, 0xa3, 0x53, 0xde,
	0x81, 0x69, 0x51, 0x20, 0x2f, 0x93, 0x6a, 0xae, 0x56, 0x68, 0x2e, 0xd5, 0xc3, 0x53, 0xac, 0xa7,
	0x5a, 0x15, 0xef, 0x6a, 0xd8, 0x7d, 0x87, 0x1a, 0x9e, 0x1e, 0xe5, 0x04, 0xd9, 0x42, 0x21, 0x2f,
	0x67, 0xd3, 0xd9, 0xa9, 0x22, 0xc7, 0xb2, 0xc3, 0x1c, 0x65, 0x07, 0x4a, 0xb6, 0xe3, 0xb1, 0x3e,
	0xfb, 0x24, 0x74, 0x40, 0x39, 0x57, 0xcd, 0xd5, 0xe6, 0x9a, 0x95, 0x78, 0x93, 0x47, 0x8e, 0x49,
	0x3d, 0xdc, 0x49, 0x84, 0xc8, 0xd5, 0xa5, 0xf3, 0x37, 0x56, 0x06, 0x9b, 0x17, 0x61, 0x99, 0xf5,
	0xeb, 0x66, 0xaf, 0x53, 0xef, 0xb8, 0x8e, 0x51, 0xbf, 0xeb, 0x3a, 0x46, 0x54, 0xb8, 0xf6, 0x2d,
	0x81, 0x0b, 0x3a, 0x72, 0xc7, 0xb6, 0x38, 0x4a, 0x5d, 0x38, 0x0f, 0x39, 0x8e, 0xfb, 0xa2, 0xbf,
	0x79, 0x3d, 0x78, 0x54, 0x16, 0x21, 0xcf, 0x3d, 0xea, 0x61, 0x39, 0x57, 0x25, 0xb5, 0xa2, 0x1e,
	0xbe, 0x28, 0x4d, 0x80, 0xc0, 0x69, 0x2d, 0xe1, 0xbd, 0xf2, 0x94, 0xa8, 0x79, 0x61, 0x28, 0x97,
	0xa3, 0xbb, 0xe3, 0x7b, 0x0f, 0x10, 0x5d, 0x7d, 0x36, 0x08, 0x0b, 0x9e, 0xf8, 0xc6, 0xea, 0x60,
	0xb3, 0x02, 0xe5, 0x71, 0x51, 0xa1, 0x90, 0xf7, 0xa7, 0x66, 0xc8, 0xf9, 0xac, 0xf6, 0x13, 0x81,
	0xd5, 0x48, 0xe7, 0x16, 0xee, 0xa1, 0xeb, 0xa2, 0xf9, 0xff, 0x39, 0xa8, 0x33, 0xfa, 0xfa, 0x21,
	0xa8, 0x71, 0x35, 0xa7, 0x68, 0x5f, 0x86, 0x73, 0x1e, 0xe5, 0x8f, 0x5b, 0xcc, 0x0c, 0x6d, 0xae,
	0x4f, 0x07, 0xaf, 0xdb, 0xe6, 0x19, 0xbd, 0xd1, 0x7e, 0x24, 0xa0, 0x44, 0x2c, 0x77, 0x71, 0xb4,
	0x5d, 0x13, 0x4a, 0xf1, 0xe8, 0x69, 0x75, 0x29, 0xef, 0x4e, 0xfe, 0x76, 0x8a, 0x71, 0xcc, 0x3d,
	0xca, 0xbb, 0xe3, 0x5e, 0xcb, 0xfe, 0xab, 0x5e, 0xfb, 0x86, 0xc0, 0x42, 0x5c, 0x46, 0x52, 0xfa,
	0x15, 0x98, 0x63, 0xbc, 0x65, 0xd9, 0x5e, 0xcb, 0xe8, 0x52, 0xab, 0x83, 0xa6, 0xf0, 0xdc, 0x8c,
	0x5e, 0x64, 0xfc, 0xbe, 0xed, 0xdd, 0x09, 0xd7, 0x24, 0x9b, 0xe5, 0x5e, 0x9f, 0xcd, 0xbe, 0x20,
	0xb0, 0x18, 0x49, 0xd4, 0xb1, 0x6f, 0x1f, 0x60, 0x24, 0x4c, 0xb9, 0x04, 0x39, 0x3f, 0x3a, 0x9d,
	0xbc, 0x5c, 0x78, 0x80, 0x28, 0x37, 0xa0, 0x40, 0x0d, 0x03, 0x79, 0xd4, 0xf1, 0xac, 0x18, 0x95,
	0xc5, 0xa7, 0xcf, 0xd7, 0x67, 0x60, 0xda, 0x0c, 0x54, 0xbb, 0x3a, 0x84, 0x01, 0x41, 0xbb, 0xcf,
	0xe8, 0xce, 0xe7, 0x04, 0xe6, 0xa3, 0xe7, 0x5b, 0xa6, 0xf9, 0xdf, 0x68, 0xf8, 0x9e, 0x0c, 0x47,
	0xe2, 0x2e, 0x52, 0xd7, 0xe8, 0x0e, 0xcf, 0xe8, 0x3a, 0x9c, 0x73, 0x43, 0x60, 0xb2, 0xb1, 0x62,
	0x54, 0x79, 0xf7, 0x95, 0x3d, 0xf5, 0x6a, 0x26, 0xfa, 0x32, 0x31, 0xb0, 0x24, 0x8d, 0x1a, 0xe4,
	0xc5, 0x95, 0x17, 0x0d, 0x83, 0x62, 0xd2, 0x1c, 0x7a, 0x08, 0x49, 0x2e, 0xca, 0xbe, 0x06, 0x17,
	0x69, 0x3f, 0x13, 0x58, 0x0e, 0xab, 0x8a, 0x94, 0xe8, 0xd8, 0x61, 0xdc, 0x43, 0x17, 0xcd, 0xb3,
	0x8f, 0x6f, 0x0d, 0x66, 0x19, 0x6f, 0x71, 0xd6, 0x43, 0xcb, 0x0b, 0x6d, 0x2f, 0x87, 0xcd, 0x30,
	0xbe, 0x2b, 0x60, 0xe5, 0x32, 0x4c, 0x99, 0xf1, 0xf4, 0x1d, 0xbb, 0x92, 0x05, 0xa4, 0x34, 0x21,
	0xd7, 0x67, 0x66, 0x39, 0x2f, 0xee, 0xc4, 0xf9, 0x61, 0x5d, 0x8f, 0xb6, 0xb7, 0x26, 0x5e, 0x84,
	0x41, 0xb0, 0xf6, 0x29, 0x2c, 0xa4, 0xe4, 0xf3, 0x5b, 0xa6, 0x89, 0x66, 0xc0, 0xe6, 0x33, 0x33,
	0x6c, 0x66, 0x5e, 0x1e, 0x82, 0x02, 0x52, 0xb6, 0x46, 0x23, 0x6c, 0xea, 0xe5, 0x6f, 0xe1, 0xe1,
	0x20, 0x0d, 0xe7, 0x9d, 0x76, 0x0f, 0xd4, 0x31, 0xfe, 0x87, 0x94, 0x3f, 0xde, 0xf5, 0xb9, 0x83,
	0x56, 0x20, 0xe5, 0x9a, 0x34, 0x2a, 0x4f, 0xdb, 0x69, 0x03, 0x96, 0xd2, 0x3b, 0x85, 0xdf, 0xf3,
	0xcb, 0xd4, 0xd2, 0xfc, 0x33, 0x0f, 0x33, 0x43, 0x27, 0x3d, 0x81, 0x39, 0x69, 0x5a, 0xaf, 0xc6,
	0xbd, 0x9c, 0xf8, 0x1f, 0x43, 0x45, 0x1d, 0xc1, 0x93, 0xee, 0x52, 0xed, 0xad, 0xc3, 0x5f, 0x7f,
	0xff, 0x3a, 0x7b, 0x55, 0xab, 0x36, 0x0e, 0xde, 0x6e, 0x04, 0x16, 0x6a, 0xc4, 0x50, 0x23, 0x1d,
	0xb9, 0x41, 0xd6, 0x94, 0xef, 0x08, 0x5c, 0x38, 0xe5, 0xd2, 0xb8, 0x2a, 0xc9, 0x98, 0x1c, 0x56,
	0xb9, 0x26, 0xcb, 0x99, 0x1c, 0xa7, 0xdd, 0x14, 0xb2, 0x6e, 0x68, 0xb5, 0x71, 0x59, 0x93, 0x33,
	0x02, 0x79, 0x0e, 0x14, 0x92, 0xd3, 0xbb, 0x22, 0x49, 0x4a, 0x60, 0x95, 0x37, 0x64, 0x1d, 0x09,
	0x50, 0xab, 0x09, 0x72, 0x4d, 0x5b, 0x1d, 0x27, 0x4f, 0x84, 0x05, 0x8c, 0x16, 0x94, 0xd2, 0x93,
	0x79, 0x45, 0xe2, 0x4c, 0xa1, 0x95, 0x05, 0x99, 0x75, 0x17, 0xf7, 0xb5, 0x35, 0xc1, 0x76, 0x45,
	0xbb, 0x34, 0xce, 0x96, 0xca, 0x0e, 0xf8, 0x10, 0x20, 0x31, 0x82, 0x2f, 0x4a, 0x64, 0x23, 0x68,
	0x32, 0xd3, 0x75, 0xc1, 0x74, 0x59, 0x5b, 0x19, 0x67, 0x1a, 0xa5, 0x06, 0x34, 0x4f, 0x60, 0x4e,
	0x9a, 0x60, 0xb2, 0xcb, 0xd2, 0xf0, 0xb8, 0xcb, 0xd2, 0xf8, 0xdf, 0xb9, 0x2c, 0x1d, 0xb9, 0x41,
	0xd6, 0x6e, 0xeb, 0x47, 0xc7, 0x6a, 0xe6, 0xd9, 0xb1, 0x9a, 0x79, 0x71, 0xac, 0x92, 0xcf, 0x06,
	0x2a, 0xf9, 0x61, 0xa0, 0x92, 0x5f, 0x06, 0x2a, 0x39, 0x1a, 0xa8, 0xe4, 0xb7, 0x81, 0x4a, 0xfe,
	0x18, 0xa8, 0x99, 0x17, 0x03, 0x95, 0x7c, 0x75, 0xa2, 0x66, 0x8e, 0x4e, 0xd4, 0xcc, 0xb3, 0x13,
	0x35, 0x03, 0x8b, 0xc9, 0x31, 0xc8, 0xd1, 0x3d, 0x60, 0x06, 0xf2, 0x8f, 0xa2, 0x5f, 0x39, 0xed,
	0x69, 0xf1, 0xdd, 0xdf, 0xfc, 0x2b, 0x00, 0x00, 0xff, 0xff, 0x51, 0xdd, 0x86, 0x5d, 0x06, 0x0d,
	0x00, 0x00,
}

func (this *PhoneToImport) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PhoneToImport)
	if !ok {
		that2, ok := that.(PhoneToImport)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.PhoneNumber != that1.PhoneNumber {
		return false
	}
	if !this.Name.Equal(that1.Name) {
		return false
	}
	return true
}
func (this *EmailToImport) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*EmailToImport)
	if !ok {
		that2, ok := that.(EmailToImport)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Email != that1.Email {
		return false
	}
	if !this.Name.Equal(that1.Name) {
		return false
	}
	return true
}
func (this *RequestImportContacts) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RequestImportContacts)
	if !ok {
		that2, ok := that.(RequestImportContacts)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Phones) != len(that1.Phones) {
		return false
	}
	for i := range this.Phones {
		if !this.Phones[i].Equal(that1.Phones[i]) {
			return false
		}
	}
	if len(this.Emails) != len(that1.Emails) {
		return false
	}
	for i := range this.Emails {
		if !this.Emails[i].Equal(that1.Emails[i]) {
			return false
		}
	}
	if len(this.Optimizations) != len(that1.Optimizations) {
		return false
	}
	for i := range this.Optimizations {
		if this.Optimizations[i] != that1.Optimizations[i] {
			return false
		}
	}
	return true
}
func (this *ResponseImportContacts) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ResponseImportContacts)
	if !ok {
		that2, ok := that.(ResponseImportContacts)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Seq != that1.Seq {
		return false
	}
	if !bytes.Equal(this.State, that1.State) {
		return false
	}
	if len(this.UserPeers) != len(that1.UserPeers) {
		return false
	}
	for i := range this.UserPeers {
		if !this.UserPeers[i].Equal(that1.UserPeers[i]) {
			return false
		}
	}
	return true
}
func (this *RequestDeferredImportContacts) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RequestDeferredImportContacts)
	if !ok {
		that2, ok := that.(RequestDeferredImportContacts)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Phones) != len(that1.Phones) {
		return false
	}
	for i := range this.Phones {
		if !this.Phones[i].Equal(that1.Phones[i]) {
			return false
		}
	}
	if len(this.Emails) != len(that1.Emails) {
		return false
	}
	for i := range this.Emails {
		if !this.Emails[i].Equal(that1.Emails[i]) {
			return false
		}
	}
	return true
}
func (this *ResponseDeferredImportContacts) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ResponseDeferredImportContacts)
	if !ok {
		that2, ok := that.(ResponseDeferredImportContacts)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.TaskId != that1.TaskId {
		return false
	}
	return true
}
func (this *RequestGetContacts) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RequestGetContacts)
	if !ok {
		that2, ok := that.(RequestGetContacts)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ContactsHash != that1.ContactsHash {
		return false
	}
	if len(this.Optimizations) != len(that1.Optimizations) {
		return false
	}
	for i := range this.Optimizations {
		if this.Optimizations[i] != that1.Optimizations[i] {
			return false
		}
	}
	return true
}
func (this *ResponseGetContacts) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ResponseGetContacts)
	if !ok {
		that2, ok := that.(ResponseGetContacts)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.IsNotChanged != that1.IsNotChanged {
		return false
	}
	if len(this.UserPeers) != len(that1.UserPeers) {
		return false
	}
	for i := range this.UserPeers {
		if !this.UserPeers[i].Equal(that1.UserPeers[i]) {
			return false
		}
	}
	return true
}
func (this *RequestRemoveContact) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RequestRemoveContact)
	if !ok {
		that2, ok := that.(RequestRemoveContact)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Uid != that1.Uid {
		return false
	}
	if this.AccessHash != that1.AccessHash {
		return false
	}
	return true
}
func (this *RequestAddContact) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RequestAddContact)
	if !ok {
		that2, ok := that.(RequestAddContact)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Uid != that1.Uid {
		return false
	}
	if this.AccessHash != that1.AccessHash {
		return false
	}
	return true
}
func (this *RequestSearchContacts) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RequestSearchContacts)
	if !ok {
		that2, ok := that.(RequestSearchContacts)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Request != that1.Request {
		return false
	}
	if len(this.Optimizations) != len(that1.Optimizations) {
		return false
	}
	for i := range this.Optimizations {
		if this.Optimizations[i] != that1.Optimizations[i] {
			return false
		}
	}
	return true
}
func (this *ResponseSearchContacts) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ResponseSearchContacts)
	if !ok {
		that2, ok := that.(ResponseSearchContacts)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Users) != len(that1.Users) {
		return false
	}
	for i := range this.Users {
		if !this.Users[i].Equal(that1.Users[i]) {
			return false
		}
	}
	if len(this.UserPeers) != len(that1.UserPeers) {
		return false
	}
	for i := range this.UserPeers {
		if !this.UserPeers[i].Equal(that1.UserPeers[i]) {
			return false
		}
	}
	return true
}
func (this *UpdateContactRegistered) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpdateContactRegistered)
	if !ok {
		that2, ok := that.(UpdateContactRegistered)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Uid != that1.Uid {
		return false
	}
	if this.IsSilent != that1.IsSilent {
		return false
	}
	if this.Date != that1.Date {
		return false
	}
	if !this.Mid.Equal(that1.Mid) {
		return false
	}
	return true
}
func (this *UpdateContactsAdded) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpdateContactsAdded)
	if !ok {
		that2, ok := that.(UpdateContactsAdded)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Uids) != len(that1.Uids) {
		return false
	}
	for i := range this.Uids {
		if this.Uids[i] != that1.Uids[i] {
			return false
		}
	}
	if !this.TaskId.Equal(that1.TaskId) {
		return false
	}
	return true
}
func (this *UpdateContactsAddTaskSuspended) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpdateContactsAddTaskSuspended)
	if !ok {
		that2, ok := that.(UpdateContactsAddTaskSuspended)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.TaskId != that1.TaskId {
		return false
	}
	return true
}
func (this *UpdateContactsRemoved) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpdateContactsRemoved)
	if !ok {
		that2, ok := that.(UpdateContactsRemoved)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Uids) != len(that1.Uids) {
		return false
	}
	for i := range this.Uids {
		if this.Uids[i] != that1.Uids[i] {
			return false
		}
	}
	return true
}
func (this *PhoneToImport) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&dialog.PhoneToImport{")
	s = append(s, "PhoneNumber: "+fmt.Sprintf("%#v", this.PhoneNumber)+",\n")
	if this.Name != nil {
		s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *EmailToImport) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&dialog.EmailToImport{")
	s = append(s, "Email: "+fmt.Sprintf("%#v", this.Email)+",\n")
	if this.Name != nil {
		s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RequestImportContacts) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&dialog.RequestImportContacts{")
	if this.Phones != nil {
		s = append(s, "Phones: "+fmt.Sprintf("%#v", this.Phones)+",\n")
	}
	if this.Emails != nil {
		s = append(s, "Emails: "+fmt.Sprintf("%#v", this.Emails)+",\n")
	}
	s = append(s, "Optimizations: "+fmt.Sprintf("%#v", this.Optimizations)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ResponseImportContacts) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&dialog.ResponseImportContacts{")
	s = append(s, "Seq: "+fmt.Sprintf("%#v", this.Seq)+",\n")
	s = append(s, "State: "+fmt.Sprintf("%#v", this.State)+",\n")
	if this.UserPeers != nil {
		s = append(s, "UserPeers: "+fmt.Sprintf("%#v", this.UserPeers)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RequestDeferredImportContacts) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&dialog.RequestDeferredImportContacts{")
	if this.Phones != nil {
		s = append(s, "Phones: "+fmt.Sprintf("%#v", this.Phones)+",\n")
	}
	if this.Emails != nil {
		s = append(s, "Emails: "+fmt.Sprintf("%#v", this.Emails)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ResponseDeferredImportContacts) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&dialog.ResponseDeferredImportContacts{")
	s = append(s, "TaskId: "+fmt.Sprintf("%#v", this.TaskId)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RequestGetContacts) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&dialog.RequestGetContacts{")
	s = append(s, "ContactsHash: "+fmt.Sprintf("%#v", this.ContactsHash)+",\n")
	s = append(s, "Optimizations: "+fmt.Sprintf("%#v", this.Optimizations)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ResponseGetContacts) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&dialog.ResponseGetContacts{")
	s = append(s, "IsNotChanged: "+fmt.Sprintf("%#v", this.IsNotChanged)+",\n")
	if this.UserPeers != nil {
		s = append(s, "UserPeers: "+fmt.Sprintf("%#v", this.UserPeers)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RequestRemoveContact) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&dialog.RequestRemoveContact{")
	s = append(s, "Uid: "+fmt.Sprintf("%#v", this.Uid)+",\n")
	s = append(s, "AccessHash: "+fmt.Sprintf("%#v", this.AccessHash)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RequestAddContact) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&dialog.RequestAddContact{")
	s = append(s, "Uid: "+fmt.Sprintf("%#v", this.Uid)+",\n")
	s = append(s, "AccessHash: "+fmt.Sprintf("%#v", this.AccessHash)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RequestSearchContacts) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&dialog.RequestSearchContacts{")
	s = append(s, "Request: "+fmt.Sprintf("%#v", this.Request)+",\n")
	s = append(s, "Optimizations: "+fmt.Sprintf("%#v", this.Optimizations)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ResponseSearchContacts) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&dialog.ResponseSearchContacts{")
	if this.Users != nil {
		s = append(s, "Users: "+fmt.Sprintf("%#v", this.Users)+",\n")
	}
	if this.UserPeers != nil {
		s = append(s, "UserPeers: "+fmt.Sprintf("%#v", this.UserPeers)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UpdateContactRegistered) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&dialog.UpdateContactRegistered{")
	s = append(s, "Uid: "+fmt.Sprintf("%#v", this.Uid)+",\n")
	s = append(s, "IsSilent: "+fmt.Sprintf("%#v", this.IsSilent)+",\n")
	s = append(s, "Date: "+fmt.Sprintf("%#v", this.Date)+",\n")
	if this.Mid != nil {
		s = append(s, "Mid: "+fmt.Sprintf("%#v", this.Mid)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UpdateContactsAdded) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&dialog.UpdateContactsAdded{")
	s = append(s, "Uids: "+fmt.Sprintf("%#v", this.Uids)+",\n")
	if this.TaskId != nil {
		s = append(s, "TaskId: "+fmt.Sprintf("%#v", this.TaskId)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UpdateContactsAddTaskSuspended) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&dialog.UpdateContactsAddTaskSuspended{")
	s = append(s, "TaskId: "+fmt.Sprintf("%#v", this.TaskId)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UpdateContactsRemoved) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&dialog.UpdateContactsRemoved{")
	s = append(s, "Uids: "+fmt.Sprintf("%#v", this.Uids)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringContacts(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ContactsClient is the client API for Contacts service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ContactsClient interface {
	/// Import contacts and wait while query is not finished
	ImportContacts(ctx context.Context, in *RequestImportContacts, opts ...grpc.CallOption) (*ResponseImportContacts, error)
	/// Same as above, but without waiting response
	DeferredImportContacts(ctx context.Context, in *RequestDeferredImportContacts, opts ...grpc.CallOption) (*ResponseDeferredImportContacts, error)
	GetContacts(ctx context.Context, in *RequestGetContacts, opts ...grpc.CallOption) (*ResponseGetContacts, error)
	RemoveContact(ctx context.Context, in *RequestRemoveContact, opts ...grpc.CallOption) (*ResponseSeq, error)
	AddContact(ctx context.Context, in *RequestAddContact, opts ...grpc.CallOption) (*ResponseSeq, error)
	/// Search contacts by query string
	SearchContacts(ctx context.Context, in *RequestSearchContacts, opts ...grpc.CallOption) (*ResponseSearchContacts, error)
}

type contactsClient struct {
	cc *grpc.ClientConn
}

func NewContactsClient(cc *grpc.ClientConn) ContactsClient {
	return &contactsClient{cc}
}

func (c *contactsClient) ImportContacts(ctx context.Context, in *RequestImportContacts, opts ...grpc.CallOption) (*ResponseImportContacts, error) {
	out := new(ResponseImportContacts)
	err := c.cc.Invoke(ctx, "/dialog.Contacts/ImportContacts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contactsClient) DeferredImportContacts(ctx context.Context, in *RequestDeferredImportContacts, opts ...grpc.CallOption) (*ResponseDeferredImportContacts, error) {
	out := new(ResponseDeferredImportContacts)
	err := c.cc.Invoke(ctx, "/dialog.Contacts/DeferredImportContacts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contactsClient) GetContacts(ctx context.Context, in *RequestGetContacts, opts ...grpc.CallOption) (*ResponseGetContacts, error) {
	out := new(ResponseGetContacts)
	err := c.cc.Invoke(ctx, "/dialog.Contacts/GetContacts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contactsClient) RemoveContact(ctx context.Context, in *RequestRemoveContact, opts ...grpc.CallOption) (*ResponseSeq, error) {
	out := new(ResponseSeq)
	err := c.cc.Invoke(ctx, "/dialog.Contacts/RemoveContact", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contactsClient) AddContact(ctx context.Context, in *RequestAddContact, opts ...grpc.CallOption) (*ResponseSeq, error) {
	out := new(ResponseSeq)
	err := c.cc.Invoke(ctx, "/dialog.Contacts/AddContact", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contactsClient) SearchContacts(ctx context.Context, in *RequestSearchContacts, opts ...grpc.CallOption) (*ResponseSearchContacts, error) {
	out := new(ResponseSearchContacts)
	err := c.cc.Invoke(ctx, "/dialog.Contacts/SearchContacts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ContactsServer is the server API for Contacts service.
type ContactsServer interface {
	/// Import contacts and wait while query is not finished
	ImportContacts(context.Context, *RequestImportContacts) (*ResponseImportContacts, error)
	/// Same as above, but without waiting response
	DeferredImportContacts(context.Context, *RequestDeferredImportContacts) (*ResponseDeferredImportContacts, error)
	GetContacts(context.Context, *RequestGetContacts) (*ResponseGetContacts, error)
	RemoveContact(context.Context, *RequestRemoveContact) (*ResponseSeq, error)
	AddContact(context.Context, *RequestAddContact) (*ResponseSeq, error)
	/// Search contacts by query string
	SearchContacts(context.Context, *RequestSearchContacts) (*ResponseSearchContacts, error)
}

// UnimplementedContactsServer can be embedded to have forward compatible implementations.
type UnimplementedContactsServer struct {
}

func (*UnimplementedContactsServer) ImportContacts(ctx context.Context, req *RequestImportContacts) (*ResponseImportContacts, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ImportContacts not implemented")
}
func (*UnimplementedContactsServer) DeferredImportContacts(ctx context.Context, req *RequestDeferredImportContacts) (*ResponseDeferredImportContacts, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeferredImportContacts not implemented")
}
func (*UnimplementedContactsServer) GetContacts(ctx context.Context, req *RequestGetContacts) (*ResponseGetContacts, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetContacts not implemented")
}
func (*UnimplementedContactsServer) RemoveContact(ctx context.Context, req *RequestRemoveContact) (*ResponseSeq, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveContact not implemented")
}
func (*UnimplementedContactsServer) AddContact(ctx context.Context, req *RequestAddContact) (*ResponseSeq, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddContact not implemented")
}
func (*UnimplementedContactsServer) SearchContacts(ctx context.Context, req *RequestSearchContacts) (*ResponseSearchContacts, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchContacts not implemented")
}

func RegisterContactsServer(s *grpc.Server, srv ContactsServer) {
	s.RegisterService(&_Contacts_serviceDesc, srv)
}

func _Contacts_ImportContacts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestImportContacts)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContactsServer).ImportContacts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dialog.Contacts/ImportContacts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContactsServer).ImportContacts(ctx, req.(*RequestImportContacts))
	}
	return interceptor(ctx, in, info, handler)
}

func _Contacts_DeferredImportContacts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestDeferredImportContacts)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContactsServer).DeferredImportContacts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dialog.Contacts/DeferredImportContacts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContactsServer).DeferredImportContacts(ctx, req.(*RequestDeferredImportContacts))
	}
	return interceptor(ctx, in, info, handler)
}

func _Contacts_GetContacts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestGetContacts)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContactsServer).GetContacts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dialog.Contacts/GetContacts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContactsServer).GetContacts(ctx, req.(*RequestGetContacts))
	}
	return interceptor(ctx, in, info, handler)
}

func _Contacts_RemoveContact_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestRemoveContact)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContactsServer).RemoveContact(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dialog.Contacts/RemoveContact",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContactsServer).RemoveContact(ctx, req.(*RequestRemoveContact))
	}
	return interceptor(ctx, in, info, handler)
}

func _Contacts_AddContact_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestAddContact)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContactsServer).AddContact(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dialog.Contacts/AddContact",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContactsServer).AddContact(ctx, req.(*RequestAddContact))
	}
	return interceptor(ctx, in, info, handler)
}

func _Contacts_SearchContacts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestSearchContacts)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContactsServer).SearchContacts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dialog.Contacts/SearchContacts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContactsServer).SearchContacts(ctx, req.(*RequestSearchContacts))
	}
	return interceptor(ctx, in, info, handler)
}

var _Contacts_serviceDesc = grpc.ServiceDesc{
	ServiceName: "dialog.Contacts",
	HandlerType: (*ContactsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ImportContacts",
			Handler:    _Contacts_ImportContacts_Handler,
		},
		{
			MethodName: "DeferredImportContacts",
			Handler:    _Contacts_DeferredImportContacts_Handler,
		},
		{
			MethodName: "GetContacts",
			Handler:    _Contacts_GetContacts_Handler,
		},
		{
			MethodName: "RemoveContact",
			Handler:    _Contacts_RemoveContact_Handler,
		},
		{
			MethodName: "AddContact",
			Handler:    _Contacts_AddContact_Handler,
		},
		{
			MethodName: "SearchContacts",
			Handler:    _Contacts_SearchContacts_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "contacts.proto",
}

func (m *PhoneToImport) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PhoneToImport) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PhoneToImport) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Name != nil {
		{
			size, err := m.Name.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintContacts(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.PhoneNumber != 0 {
		i = encodeVarintContacts(dAtA, i, uint64(m.PhoneNumber))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *EmailToImport) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EmailToImport) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EmailToImport) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Name != nil {
		{
			size, err := m.Name.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintContacts(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Email) > 0 {
		i -= len(m.Email)
		copy(dAtA[i:], m.Email)
		i = encodeVarintContacts(dAtA, i, uint64(len(m.Email)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RequestImportContacts) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestImportContacts) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RequestImportContacts) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Optimizations) > 0 {
		dAtA4 := make([]byte, len(m.Optimizations)*10)
		var j3 int
		for _, num := range m.Optimizations {
			for num >= 1<<7 {
				dAtA4[j3] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j3++
			}
			dAtA4[j3] = uint8(num)
			j3++
		}
		i -= j3
		copy(dAtA[i:], dAtA4[:j3])
		i = encodeVarintContacts(dAtA, i, uint64(j3))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Emails) > 0 {
		for iNdEx := len(m.Emails) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Emails[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintContacts(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Phones) > 0 {
		for iNdEx := len(m.Phones) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Phones[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintContacts(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ResponseImportContacts) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResponseImportContacts) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ResponseImportContacts) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.UserPeers) > 0 {
		for iNdEx := len(m.UserPeers) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.UserPeers[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintContacts(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.State) > 0 {
		i -= len(m.State)
		copy(dAtA[i:], m.State)
		i = encodeVarintContacts(dAtA, i, uint64(len(m.State)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Seq != 0 {
		i = encodeVarintContacts(dAtA, i, uint64(m.Seq))
		i--
		dAtA[i] = 0x10
	}
	return len(dAtA) - i, nil
}

func (m *RequestDeferredImportContacts) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestDeferredImportContacts) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RequestDeferredImportContacts) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Emails) > 0 {
		for iNdEx := len(m.Emails) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Emails[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintContacts(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Phones) > 0 {
		for iNdEx := len(m.Phones) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Phones[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintContacts(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ResponseDeferredImportContacts) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResponseDeferredImportContacts) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ResponseDeferredImportContacts) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TaskId) > 0 {
		i -= len(m.TaskId)
		copy(dAtA[i:], m.TaskId)
		i = encodeVarintContacts(dAtA, i, uint64(len(m.TaskId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RequestGetContacts) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestGetContacts) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RequestGetContacts) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Optimizations) > 0 {
		dAtA6 := make([]byte, len(m.Optimizations)*10)
		var j5 int
		for _, num := range m.Optimizations {
			for num >= 1<<7 {
				dAtA6[j5] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j5++
			}
			dAtA6[j5] = uint8(num)
			j5++
		}
		i -= j5
		copy(dAtA[i:], dAtA6[:j5])
		i = encodeVarintContacts(dAtA, i, uint64(j5))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ContactsHash) > 0 {
		i -= len(m.ContactsHash)
		copy(dAtA[i:], m.ContactsHash)
		i = encodeVarintContacts(dAtA, i, uint64(len(m.ContactsHash)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ResponseGetContacts) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResponseGetContacts) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ResponseGetContacts) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.UserPeers) > 0 {
		for iNdEx := len(m.UserPeers) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.UserPeers[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintContacts(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.IsNotChanged {
		i--
		if m.IsNotChanged {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	return len(dAtA) - i, nil
}

func (m *RequestRemoveContact) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestRemoveContact) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RequestRemoveContact) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AccessHash != 0 {
		i = encodeVarintContacts(dAtA, i, uint64(m.AccessHash))
		i--
		dAtA[i] = 0x10
	}
	if m.Uid != 0 {
		i = encodeVarintContacts(dAtA, i, uint64(m.Uid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *RequestAddContact) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestAddContact) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RequestAddContact) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AccessHash != 0 {
		i = encodeVarintContacts(dAtA, i, uint64(m.AccessHash))
		i--
		dAtA[i] = 0x10
	}
	if m.Uid != 0 {
		i = encodeVarintContacts(dAtA, i, uint64(m.Uid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *RequestSearchContacts) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestSearchContacts) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RequestSearchContacts) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Optimizations) > 0 {
		dAtA8 := make([]byte, len(m.Optimizations)*10)
		var j7 int
		for _, num := range m.Optimizations {
			for num >= 1<<7 {
				dAtA8[j7] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j7++
			}
			dAtA8[j7] = uint8(num)
			j7++
		}
		i -= j7
		copy(dAtA[i:], dAtA8[:j7])
		i = encodeVarintContacts(dAtA, i, uint64(j7))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Request) > 0 {
		i -= len(m.Request)
		copy(dAtA[i:], m.Request)
		i = encodeVarintContacts(dAtA, i, uint64(len(m.Request)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ResponseSearchContacts) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResponseSearchContacts) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ResponseSearchContacts) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.UserPeers) > 0 {
		for iNdEx := len(m.UserPeers) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.UserPeers[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintContacts(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Users) > 0 {
		for iNdEx := len(m.Users) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Users[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintContacts(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *UpdateContactRegistered) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateContactRegistered) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateContactRegistered) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Mid != nil {
		{
			size, err := m.Mid.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintContacts(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.Date != 0 {
		i = encodeVarintContacts(dAtA, i, uint64(m.Date))
		i--
		dAtA[i] = 0x18
	}
	if m.IsSilent {
		i--
		if m.IsSilent {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if m.Uid != 0 {
		i = encodeVarintContacts(dAtA, i, uint64(m.Uid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *UpdateContactsAdded) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateContactsAdded) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateContactsAdded) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TaskId != nil {
		{
			size, err := m.TaskId.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintContacts(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if len(m.Uids) > 0 {
		dAtA12 := make([]byte, len(m.Uids)*10)
		var j11 int
		for _, num1 := range m.Uids {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA12[j11] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j11++
			}
			dAtA12[j11] = uint8(num)
			j11++
		}
		i -= j11
		copy(dAtA[i:], dAtA12[:j11])
		i = encodeVarintContacts(dAtA, i, uint64(j11))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UpdateContactsAddTaskSuspended) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateContactsAddTaskSuspended) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateContactsAddTaskSuspended) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TaskId) > 0 {
		i -= len(m.TaskId)
		copy(dAtA[i:], m.TaskId)
		i = encodeVarintContacts(dAtA, i, uint64(len(m.TaskId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UpdateContactsRemoved) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateContactsRemoved) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateContactsRemoved) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Uids) > 0 {
		dAtA14 := make([]byte, len(m.Uids)*10)
		var j13 int
		for _, num1 := range m.Uids {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA14[j13] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j13++
			}
			dAtA14[j13] = uint8(num)
			j13++
		}
		i -= j13
		copy(dAtA[i:], dAtA14[:j13])
		i = encodeVarintContacts(dAtA, i, uint64(j13))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintContacts(dAtA []byte, offset int, v uint64) int {
	offset -= sovContacts(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *PhoneToImport) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PhoneNumber != 0 {
		n += 1 + sovContacts(uint64(m.PhoneNumber))
	}
	if m.Name != nil {
		l = m.Name.Size()
		n += 1 + l + sovContacts(uint64(l))
	}
	return n
}

func (m *EmailToImport) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Email)
	if l > 0 {
		n += 1 + l + sovContacts(uint64(l))
	}
	if m.Name != nil {
		l = m.Name.Size()
		n += 1 + l + sovContacts(uint64(l))
	}
	return n
}

func (m *RequestImportContacts) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Phones) > 0 {
		for _, e := range m.Phones {
			l = e.Size()
			n += 1 + l + sovContacts(uint64(l))
		}
	}
	if len(m.Emails) > 0 {
		for _, e := range m.Emails {
			l = e.Size()
			n += 1 + l + sovContacts(uint64(l))
		}
	}
	if len(m.Optimizations) > 0 {
		l = 0
		for _, e := range m.Optimizations {
			l += sovContacts(uint64(e))
		}
		n += 1 + sovContacts(uint64(l)) + l
	}
	return n
}

func (m *ResponseImportContacts) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Seq != 0 {
		n += 1 + sovContacts(uint64(m.Seq))
	}
	l = len(m.State)
	if l > 0 {
		n += 1 + l + sovContacts(uint64(l))
	}
	if len(m.UserPeers) > 0 {
		for _, e := range m.UserPeers {
			l = e.Size()
			n += 1 + l + sovContacts(uint64(l))
		}
	}
	return n
}

func (m *RequestDeferredImportContacts) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Phones) > 0 {
		for _, e := range m.Phones {
			l = e.Size()
			n += 1 + l + sovContacts(uint64(l))
		}
	}
	if len(m.Emails) > 0 {
		for _, e := range m.Emails {
			l = e.Size()
			n += 1 + l + sovContacts(uint64(l))
		}
	}
	return n
}

func (m *ResponseDeferredImportContacts) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.TaskId)
	if l > 0 {
		n += 1 + l + sovContacts(uint64(l))
	}
	return n
}

func (m *RequestGetContacts) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ContactsHash)
	if l > 0 {
		n += 1 + l + sovContacts(uint64(l))
	}
	if len(m.Optimizations) > 0 {
		l = 0
		for _, e := range m.Optimizations {
			l += sovContacts(uint64(e))
		}
		n += 1 + sovContacts(uint64(l)) + l
	}
	return n
}

func (m *ResponseGetContacts) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IsNotChanged {
		n += 2
	}
	if len(m.UserPeers) > 0 {
		for _, e := range m.UserPeers {
			l = e.Size()
			n += 1 + l + sovContacts(uint64(l))
		}
	}
	return n
}

func (m *RequestRemoveContact) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Uid != 0 {
		n += 1 + sovContacts(uint64(m.Uid))
	}
	if m.AccessHash != 0 {
		n += 1 + sovContacts(uint64(m.AccessHash))
	}
	return n
}

func (m *RequestAddContact) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Uid != 0 {
		n += 1 + sovContacts(uint64(m.Uid))
	}
	if m.AccessHash != 0 {
		n += 1 + sovContacts(uint64(m.AccessHash))
	}
	return n
}

func (m *RequestSearchContacts) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Request)
	if l > 0 {
		n += 1 + l + sovContacts(uint64(l))
	}
	if len(m.Optimizations) > 0 {
		l = 0
		for _, e := range m.Optimizations {
			l += sovContacts(uint64(e))
		}
		n += 1 + sovContacts(uint64(l)) + l
	}
	return n
}

func (m *ResponseSearchContacts) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Users) > 0 {
		for _, e := range m.Users {
			l = e.Size()
			n += 1 + l + sovContacts(uint64(l))
		}
	}
	if len(m.UserPeers) > 0 {
		for _, e := range m.UserPeers {
			l = e.Size()
			n += 1 + l + sovContacts(uint64(l))
		}
	}
	return n
}

func (m *UpdateContactRegistered) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Uid != 0 {
		n += 1 + sovContacts(uint64(m.Uid))
	}
	if m.IsSilent {
		n += 2
	}
	if m.Date != 0 {
		n += 1 + sovContacts(uint64(m.Date))
	}
	if m.Mid != nil {
		l = m.Mid.Size()
		n += 1 + l + sovContacts(uint64(l))
	}
	return n
}

func (m *UpdateContactsAdded) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Uids) > 0 {
		l = 0
		for _, e := range m.Uids {
			l += sovContacts(uint64(e))
		}
		n += 1 + sovContacts(uint64(l)) + l
	}
	if m.TaskId != nil {
		l = m.TaskId.Size()
		n += 1 + l + sovContacts(uint64(l))
	}
	return n
}

func (m *UpdateContactsAddTaskSuspended) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.TaskId)
	if l > 0 {
		n += 1 + l + sovContacts(uint64(l))
	}
	return n
}

func (m *UpdateContactsRemoved) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Uids) > 0 {
		l = 0
		for _, e := range m.Uids {
			l += sovContacts(uint64(e))
		}
		n += 1 + sovContacts(uint64(l)) + l
	}
	return n
}

func sovContacts(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozContacts(x uint64) (n int) {
	return sovContacts(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *PhoneToImport) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PhoneToImport{`,
		`PhoneNumber:` + fmt.Sprintf("%v", this.PhoneNumber) + `,`,
		`Name:` + strings.Replace(fmt.Sprintf("%v", this.Name), "StringValue", "types.StringValue", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *EmailToImport) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&EmailToImport{`,
		`Email:` + fmt.Sprintf("%v", this.Email) + `,`,
		`Name:` + strings.Replace(fmt.Sprintf("%v", this.Name), "StringValue", "types.StringValue", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RequestImportContacts) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForPhones := "[]*PhoneToImport{"
	for _, f := range this.Phones {
		repeatedStringForPhones += strings.Replace(f.String(), "PhoneToImport", "PhoneToImport", 1) + ","
	}
	repeatedStringForPhones += "}"
	repeatedStringForEmails := "[]*EmailToImport{"
	for _, f := range this.Emails {
		repeatedStringForEmails += strings.Replace(f.String(), "EmailToImport", "EmailToImport", 1) + ","
	}
	repeatedStringForEmails += "}"
	s := strings.Join([]string{`&RequestImportContacts{`,
		`Phones:` + repeatedStringForPhones + `,`,
		`Emails:` + repeatedStringForEmails + `,`,
		`Optimizations:` + fmt.Sprintf("%v", this.Optimizations) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ResponseImportContacts) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForUserPeers := "[]*UserOutPeer{"
	for _, f := range this.UserPeers {
		repeatedStringForUserPeers += strings.Replace(fmt.Sprintf("%v", f), "UserOutPeer", "UserOutPeer", 1) + ","
	}
	repeatedStringForUserPeers += "}"
	s := strings.Join([]string{`&ResponseImportContacts{`,
		`Seq:` + fmt.Sprintf("%v", this.Seq) + `,`,
		`State:` + fmt.Sprintf("%v", this.State) + `,`,
		`UserPeers:` + repeatedStringForUserPeers + `,`,
		`}`,
	}, "")
	return s
}
func (this *RequestDeferredImportContacts) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForPhones := "[]*PhoneToImport{"
	for _, f := range this.Phones {
		repeatedStringForPhones += strings.Replace(f.String(), "PhoneToImport", "PhoneToImport", 1) + ","
	}
	repeatedStringForPhones += "}"
	repeatedStringForEmails := "[]*EmailToImport{"
	for _, f := range this.Emails {
		repeatedStringForEmails += strings.Replace(f.String(), "EmailToImport", "EmailToImport", 1) + ","
	}
	repeatedStringForEmails += "}"
	s := strings.Join([]string{`&RequestDeferredImportContacts{`,
		`Phones:` + repeatedStringForPhones + `,`,
		`Emails:` + repeatedStringForEmails + `,`,
		`}`,
	}, "")
	return s
}
func (this *ResponseDeferredImportContacts) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ResponseDeferredImportContacts{`,
		`TaskId:` + fmt.Sprintf("%v", this.TaskId) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RequestGetContacts) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RequestGetContacts{`,
		`ContactsHash:` + fmt.Sprintf("%v", this.ContactsHash) + `,`,
		`Optimizations:` + fmt.Sprintf("%v", this.Optimizations) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ResponseGetContacts) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForUserPeers := "[]*UserOutPeer{"
	for _, f := range this.UserPeers {
		repeatedStringForUserPeers += strings.Replace(fmt.Sprintf("%v", f), "UserOutPeer", "UserOutPeer", 1) + ","
	}
	repeatedStringForUserPeers += "}"
	s := strings.Join([]string{`&ResponseGetContacts{`,
		`IsNotChanged:` + fmt.Sprintf("%v", this.IsNotChanged) + `,`,
		`UserPeers:` + repeatedStringForUserPeers + `,`,
		`}`,
	}, "")
	return s
}
func (this *RequestRemoveContact) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RequestRemoveContact{`,
		`Uid:` + fmt.Sprintf("%v", this.Uid) + `,`,
		`AccessHash:` + fmt.Sprintf("%v", this.AccessHash) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RequestAddContact) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RequestAddContact{`,
		`Uid:` + fmt.Sprintf("%v", this.Uid) + `,`,
		`AccessHash:` + fmt.Sprintf("%v", this.AccessHash) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RequestSearchContacts) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RequestSearchContacts{`,
		`Request:` + fmt.Sprintf("%v", this.Request) + `,`,
		`Optimizations:` + fmt.Sprintf("%v", this.Optimizations) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ResponseSearchContacts) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForUsers := "[]*User{"
	for _, f := range this.Users {
		repeatedStringForUsers += strings.Replace(fmt.Sprintf("%v", f), "User", "User", 1) + ","
	}
	repeatedStringForUsers += "}"
	repeatedStringForUserPeers := "[]*UserOutPeer{"
	for _, f := range this.UserPeers {
		repeatedStringForUserPeers += strings.Replace(fmt.Sprintf("%v", f), "UserOutPeer", "UserOutPeer", 1) + ","
	}
	repeatedStringForUserPeers += "}"
	s := strings.Join([]string{`&ResponseSearchContacts{`,
		`Users:` + repeatedStringForUsers + `,`,
		`UserPeers:` + repeatedStringForUserPeers + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateContactRegistered) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateContactRegistered{`,
		`Uid:` + fmt.Sprintf("%v", this.Uid) + `,`,
		`IsSilent:` + fmt.Sprintf("%v", this.IsSilent) + `,`,
		`Date:` + fmt.Sprintf("%v", this.Date) + `,`,
		`Mid:` + strings.Replace(fmt.Sprintf("%v", this.Mid), "UUIDValue", "UUIDValue", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateContactsAdded) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateContactsAdded{`,
		`Uids:` + fmt.Sprintf("%v", this.Uids) + `,`,
		`TaskId:` + strings.Replace(fmt.Sprintf("%v", this.TaskId), "StringValue", "types.StringValue", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateContactsAddTaskSuspended) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateContactsAddTaskSuspended{`,
		`TaskId:` + fmt.Sprintf("%v", this.TaskId) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateContactsRemoved) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateContactsRemoved{`,
		`Uids:` + fmt.Sprintf("%v", this.Uids) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringContacts(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *PhoneToImport) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowContacts
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PhoneToImport: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PhoneToImport: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PhoneNumber", wireType)
			}
			m.PhoneNumber = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContacts
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PhoneNumber |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContacts
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthContacts
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthContacts
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Name == nil {
				m.Name = &types.StringValue{}
			}
			if err := m.Name.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipContacts(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthContacts
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthContacts
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EmailToImport) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowContacts
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EmailToImport: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EmailToImport: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Email", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContacts
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthContacts
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthContacts
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Email = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContacts
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthContacts
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthContacts
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Name == nil {
				m.Name = &types.StringValue{}
			}
			if err := m.Name.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipContacts(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthContacts
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthContacts
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestImportContacts) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowContacts
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestImportContacts: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestImportContacts: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Phones", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContacts
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthContacts
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthContacts
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Phones = append(m.Phones, &PhoneToImport{})
			if err := m.Phones[len(m.Phones)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Emails", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContacts
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthContacts
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthContacts
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Emails = append(m.Emails, &EmailToImport{})
			if err := m.Emails[len(m.Emails)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType == 0 {
				var v UpdateOptimization
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowContacts
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= UpdateOptimization(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Optimizations = append(m.Optimizations, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowContacts
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthContacts
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthContacts
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				if elementCount != 0 && len(m.Optimizations) == 0 {
					m.Optimizations = make([]UpdateOptimization, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v UpdateOptimization
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowContacts
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= UpdateOptimization(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Optimizations = append(m.Optimizations, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Optimizations", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipContacts(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthContacts
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthContacts
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResponseImportContacts) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowContacts
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResponseImportContacts: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResponseImportContacts: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Seq", wireType)
			}
			m.Seq = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContacts
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Seq |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContacts
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthContacts
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthContacts
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.State = append(m.State[:0], dAtA[iNdEx:postIndex]...)
			if m.State == nil {
				m.State = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserPeers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContacts
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthContacts
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthContacts
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserPeers = append(m.UserPeers, &UserOutPeer{})
			if err := m.UserPeers[len(m.UserPeers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipContacts(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthContacts
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthContacts
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestDeferredImportContacts) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowContacts
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestDeferredImportContacts: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestDeferredImportContacts: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Phones", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContacts
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthContacts
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthContacts
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Phones = append(m.Phones, &PhoneToImport{})
			if err := m.Phones[len(m.Phones)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Emails", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContacts
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthContacts
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthContacts
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Emails = append(m.Emails, &EmailToImport{})
			if err := m.Emails[len(m.Emails)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipContacts(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthContacts
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthContacts
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResponseDeferredImportContacts) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowContacts
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResponseDeferredImportContacts: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResponseDeferredImportContacts: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContacts
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthContacts
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthContacts
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TaskId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipContacts(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthContacts
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthContacts
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestGetContacts) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowContacts
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestGetContacts: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestGetContacts: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContactsHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContacts
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthContacts
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthContacts
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContactsHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType == 0 {
				var v UpdateOptimization
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowContacts
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= UpdateOptimization(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Optimizations = append(m.Optimizations, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowContacts
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthContacts
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthContacts
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				if elementCount != 0 && len(m.Optimizations) == 0 {
					m.Optimizations = make([]UpdateOptimization, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v UpdateOptimization
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowContacts
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= UpdateOptimization(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Optimizations = append(m.Optimizations, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Optimizations", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipContacts(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthContacts
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthContacts
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResponseGetContacts) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowContacts
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResponseGetContacts: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResponseGetContacts: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsNotChanged", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContacts
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsNotChanged = bool(v != 0)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserPeers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContacts
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthContacts
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthContacts
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserPeers = append(m.UserPeers, &UserOutPeer{})
			if err := m.UserPeers[len(m.UserPeers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipContacts(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthContacts
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthContacts
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestRemoveContact) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowContacts
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestRemoveContact: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestRemoveContact: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			m.Uid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContacts
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uid |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccessHash", wireType)
			}
			m.AccessHash = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContacts
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AccessHash |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipContacts(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthContacts
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthContacts
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestAddContact) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowContacts
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestAddContact: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestAddContact: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			m.Uid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContacts
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uid |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccessHash", wireType)
			}
			m.AccessHash = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContacts
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AccessHash |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipContacts(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthContacts
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthContacts
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestSearchContacts) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowContacts
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestSearchContacts: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestSearchContacts: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Request", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContacts
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthContacts
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthContacts
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Request = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType == 0 {
				var v UpdateOptimization
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowContacts
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= UpdateOptimization(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Optimizations = append(m.Optimizations, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowContacts
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthContacts
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthContacts
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				if elementCount != 0 && len(m.Optimizations) == 0 {
					m.Optimizations = make([]UpdateOptimization, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v UpdateOptimization
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowContacts
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= UpdateOptimization(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Optimizations = append(m.Optimizations, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Optimizations", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipContacts(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthContacts
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthContacts
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResponseSearchContacts) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowContacts
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResponseSearchContacts: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResponseSearchContacts: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Users", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContacts
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthContacts
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthContacts
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Users = append(m.Users, &User{})
			if err := m.Users[len(m.Users)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserPeers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContacts
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthContacts
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthContacts
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserPeers = append(m.UserPeers, &UserOutPeer{})
			if err := m.UserPeers[len(m.UserPeers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipContacts(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthContacts
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthContacts
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateContactRegistered) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowContacts
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateContactRegistered: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateContactRegistered: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			m.Uid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContacts
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uid |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsSilent", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContacts
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsSilent = bool(v != 0)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Date", wireType)
			}
			m.Date = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContacts
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Date |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContacts
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthContacts
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthContacts
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Mid == nil {
				m.Mid = &UUIDValue{}
			}
			if err := m.Mid.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipContacts(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthContacts
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthContacts
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateContactsAdded) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowContacts
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateContactsAdded: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateContactsAdded: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowContacts
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Uids = append(m.Uids, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowContacts
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthContacts
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthContacts
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Uids) == 0 {
					m.Uids = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowContacts
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Uids = append(m.Uids, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Uids", wireType)
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContacts
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthContacts
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthContacts
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TaskId == nil {
				m.TaskId = &types.StringValue{}
			}
			if err := m.TaskId.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipContacts(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthContacts
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthContacts
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateContactsAddTaskSuspended) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowContacts
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateContactsAddTaskSuspended: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateContactsAddTaskSuspended: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContacts
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthContacts
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthContacts
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TaskId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipContacts(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthContacts
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthContacts
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateContactsRemoved) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowContacts
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateContactsRemoved: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateContactsRemoved: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowContacts
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Uids = append(m.Uids, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowContacts
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthContacts
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthContacts
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Uids) == 0 {
					m.Uids = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowContacts
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Uids = append(m.Uids, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Uids", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipContacts(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthContacts
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthContacts
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipContacts(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowContacts
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowContacts
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowContacts
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthContacts
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupContacts
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthContacts
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthContacts        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowContacts          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupContacts = fmt.Errorf("proto: unexpected end of group")
)
