// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: push.proto

package dialog

import (
	context "context"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	_ "github.com/gogo/protobuf/types"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Registering push token on server
type RequestRegisterGooglePush struct {
	ProjectId int64  `protobuf:"varint,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	Token     string `protobuf:"bytes,2,opt,name=token,proto3" json:"token,omitempty"`
}

func (m *RequestRegisterGooglePush) Reset()      { *m = RequestRegisterGooglePush{} }
func (*RequestRegisterGooglePush) ProtoMessage() {}
func (*RequestRegisterGooglePush) Descriptor() ([]byte, []int) {
	return fileDescriptor_d1e4bfd2e9d102bb, []int{0}
}
func (m *RequestRegisterGooglePush) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RequestRegisterGooglePush) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RequestRegisterGooglePush.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RequestRegisterGooglePush) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RequestRegisterGooglePush.Merge(m, src)
}
func (m *RequestRegisterGooglePush) XXX_Size() int {
	return m.Size()
}
func (m *RequestRegisterGooglePush) XXX_DiscardUnknown() {
	xxx_messageInfo_RequestRegisterGooglePush.DiscardUnknown(m)
}

var xxx_messageInfo_RequestRegisterGooglePush proto.InternalMessageInfo

func (m *RequestRegisterGooglePush) GetProjectId() int64 {
	if m != nil {
		return m.ProjectId
	}
	return 0
}

func (m *RequestRegisterGooglePush) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

// Unregistering Google Push
type RequestUnregisterGooglePush struct {
	Token string `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
}

func (m *RequestUnregisterGooglePush) Reset()      { *m = RequestUnregisterGooglePush{} }
func (*RequestUnregisterGooglePush) ProtoMessage() {}
func (*RequestUnregisterGooglePush) Descriptor() ([]byte, []int) {
	return fileDescriptor_d1e4bfd2e9d102bb, []int{1}
}
func (m *RequestUnregisterGooglePush) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RequestUnregisterGooglePush) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RequestUnregisterGooglePush.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RequestUnregisterGooglePush) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RequestUnregisterGooglePush.Merge(m, src)
}
func (m *RequestUnregisterGooglePush) XXX_Size() int {
	return m.Size()
}
func (m *RequestUnregisterGooglePush) XXX_DiscardUnknown() {
	xxx_messageInfo_RequestUnregisterGooglePush.DiscardUnknown(m)
}

var xxx_messageInfo_RequestUnregisterGooglePush proto.InternalMessageInfo

func (m *RequestUnregisterGooglePush) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

// Registering apple push on server
type RequestRegisterApplePush struct {
	ApnsKey       int32  `protobuf:"varint,1,opt,name=apns_key,json=apnsKey,proto3" json:"apns_key,omitempty"`
	Token         string `protobuf:"bytes,2,opt,name=token,proto3" json:"token,omitempty"`
	ApnsStringKey string `protobuf:"bytes,3,opt,name=apns_string_key,json=apnsStringKey,proto3" json:"apns_string_key,omitempty"`
}

func (m *RequestRegisterApplePush) Reset()      { *m = RequestRegisterApplePush{} }
func (*RequestRegisterApplePush) ProtoMessage() {}
func (*RequestRegisterApplePush) Descriptor() ([]byte, []int) {
	return fileDescriptor_d1e4bfd2e9d102bb, []int{2}
}
func (m *RequestRegisterApplePush) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RequestRegisterApplePush) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RequestRegisterApplePush.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RequestRegisterApplePush) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RequestRegisterApplePush.Merge(m, src)
}
func (m *RequestRegisterApplePush) XXX_Size() int {
	return m.Size()
}
func (m *RequestRegisterApplePush) XXX_DiscardUnknown() {
	xxx_messageInfo_RequestRegisterApplePush.DiscardUnknown(m)
}

var xxx_messageInfo_RequestRegisterApplePush proto.InternalMessageInfo

func (m *RequestRegisterApplePush) GetApnsKey() int32 {
	if m != nil {
		return m.ApnsKey
	}
	return 0
}

func (m *RequestRegisterApplePush) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func (m *RequestRegisterApplePush) GetApnsStringKey() string {
	if m != nil {
		return m.ApnsStringKey
	}
	return ""
}

// Unregistering Apple Push
type RequestUnregisterApplePush struct {
	Token string `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
}

func (m *RequestUnregisterApplePush) Reset()      { *m = RequestUnregisterApplePush{} }
func (*RequestUnregisterApplePush) ProtoMessage() {}
func (*RequestUnregisterApplePush) Descriptor() ([]byte, []int) {
	return fileDescriptor_d1e4bfd2e9d102bb, []int{3}
}
func (m *RequestUnregisterApplePush) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RequestUnregisterApplePush) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RequestUnregisterApplePush.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RequestUnregisterApplePush) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RequestUnregisterApplePush.Merge(m, src)
}
func (m *RequestUnregisterApplePush) XXX_Size() int {
	return m.Size()
}
func (m *RequestUnregisterApplePush) XXX_DiscardUnknown() {
	xxx_messageInfo_RequestUnregisterApplePush.DiscardUnknown(m)
}

var xxx_messageInfo_RequestUnregisterApplePush proto.InternalMessageInfo

func (m *RequestUnregisterApplePush) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

// Registration of a new Apple's PushKit tokens
type RequestRegisterApplePushKit struct {
	ApnsKey       int32  `protobuf:"varint,1,opt,name=apns_key,json=apnsKey,proto3" json:"apns_key,omitempty"`
	Token         string `protobuf:"bytes,2,opt,name=token,proto3" json:"token,omitempty"`
	ApnsStringKey string `protobuf:"bytes,3,opt,name=apns_string_key,json=apnsStringKey,proto3" json:"apns_string_key,omitempty"`
}

func (m *RequestRegisterApplePushKit) Reset()      { *m = RequestRegisterApplePushKit{} }
func (*RequestRegisterApplePushKit) ProtoMessage() {}
func (*RequestRegisterApplePushKit) Descriptor() ([]byte, []int) {
	return fileDescriptor_d1e4bfd2e9d102bb, []int{4}
}
func (m *RequestRegisterApplePushKit) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RequestRegisterApplePushKit) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RequestRegisterApplePushKit.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RequestRegisterApplePushKit) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RequestRegisterApplePushKit.Merge(m, src)
}
func (m *RequestRegisterApplePushKit) XXX_Size() int {
	return m.Size()
}
func (m *RequestRegisterApplePushKit) XXX_DiscardUnknown() {
	xxx_messageInfo_RequestRegisterApplePushKit.DiscardUnknown(m)
}

var xxx_messageInfo_RequestRegisterApplePushKit proto.InternalMessageInfo

func (m *RequestRegisterApplePushKit) GetApnsKey() int32 {
	if m != nil {
		return m.ApnsKey
	}
	return 0
}

func (m *RequestRegisterApplePushKit) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func (m *RequestRegisterApplePushKit) GetApnsStringKey() string {
	if m != nil {
		return m.ApnsStringKey
	}
	return ""
}

// Unregistering Apple Push Kit token
type RequestUnregisterApplePushKit struct {
	Token string `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
}

func (m *RequestUnregisterApplePushKit) Reset()      { *m = RequestUnregisterApplePushKit{} }
func (*RequestUnregisterApplePushKit) ProtoMessage() {}
func (*RequestUnregisterApplePushKit) Descriptor() ([]byte, []int) {
	return fileDescriptor_d1e4bfd2e9d102bb, []int{5}
}
func (m *RequestUnregisterApplePushKit) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RequestUnregisterApplePushKit) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RequestUnregisterApplePushKit.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RequestUnregisterApplePushKit) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RequestUnregisterApplePushKit.Merge(m, src)
}
func (m *RequestUnregisterApplePushKit) XXX_Size() int {
	return m.Size()
}
func (m *RequestUnregisterApplePushKit) XXX_DiscardUnknown() {
	xxx_messageInfo_RequestUnregisterApplePushKit.DiscardUnknown(m)
}

var xxx_messageInfo_RequestUnregisterApplePushKit proto.InternalMessageInfo

func (m *RequestUnregisterApplePushKit) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

// Registering Apple Push Token
type RequestRegisterApplePushToken struct {
	BundleId string `protobuf:"bytes,1,opt,name=bundle_id,json=bundleId,proto3" json:"bundle_id,omitempty"`
	Token    string `protobuf:"bytes,2,opt,name=token,proto3" json:"token,omitempty"`
}

func (m *RequestRegisterApplePushToken) Reset()      { *m = RequestRegisterApplePushToken{} }
func (*RequestRegisterApplePushToken) ProtoMessage() {}
func (*RequestRegisterApplePushToken) Descriptor() ([]byte, []int) {
	return fileDescriptor_d1e4bfd2e9d102bb, []int{6}
}
func (m *RequestRegisterApplePushToken) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RequestRegisterApplePushToken) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RequestRegisterApplePushToken.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RequestRegisterApplePushToken) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RequestRegisterApplePushToken.Merge(m, src)
}
func (m *RequestRegisterApplePushToken) XXX_Size() int {
	return m.Size()
}
func (m *RequestRegisterApplePushToken) XXX_DiscardUnknown() {
	xxx_messageInfo_RequestRegisterApplePushToken.DiscardUnknown(m)
}

var xxx_messageInfo_RequestRegisterApplePushToken proto.InternalMessageInfo

func (m *RequestRegisterApplePushToken) GetBundleId() string {
	if m != nil {
		return m.BundleId
	}
	return ""
}

func (m *RequestRegisterApplePushToken) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

// Unregister Apple Push token
type RequestUnregisterApplePushToken struct {
	Token string `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
}

func (m *RequestUnregisterApplePushToken) Reset()      { *m = RequestUnregisterApplePushToken{} }
func (*RequestUnregisterApplePushToken) ProtoMessage() {}
func (*RequestUnregisterApplePushToken) Descriptor() ([]byte, []int) {
	return fileDescriptor_d1e4bfd2e9d102bb, []int{7}
}
func (m *RequestUnregisterApplePushToken) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RequestUnregisterApplePushToken) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RequestUnregisterApplePushToken.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RequestUnregisterApplePushToken) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RequestUnregisterApplePushToken.Merge(m, src)
}
func (m *RequestUnregisterApplePushToken) XXX_Size() int {
	return m.Size()
}
func (m *RequestUnregisterApplePushToken) XXX_DiscardUnknown() {
	xxx_messageInfo_RequestUnregisterApplePushToken.DiscardUnknown(m)
}

var xxx_messageInfo_RequestUnregisterApplePushToken proto.InternalMessageInfo

func (m *RequestUnregisterApplePushToken) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func init() {
	proto.RegisterType((*RequestRegisterGooglePush)(nil), "dialog.RequestRegisterGooglePush")
	proto.RegisterType((*RequestUnregisterGooglePush)(nil), "dialog.RequestUnregisterGooglePush")
	proto.RegisterType((*RequestRegisterApplePush)(nil), "dialog.RequestRegisterApplePush")
	proto.RegisterType((*RequestUnregisterApplePush)(nil), "dialog.RequestUnregisterApplePush")
	proto.RegisterType((*RequestRegisterApplePushKit)(nil), "dialog.RequestRegisterApplePushKit")
	proto.RegisterType((*RequestUnregisterApplePushKit)(nil), "dialog.RequestUnregisterApplePushKit")
	proto.RegisterType((*RequestRegisterApplePushToken)(nil), "dialog.RequestRegisterApplePushToken")
	proto.RegisterType((*RequestUnregisterApplePushToken)(nil), "dialog.RequestUnregisterApplePushToken")
}

func init() { proto.RegisterFile("push.proto", fileDescriptor_d1e4bfd2e9d102bb) }

var fileDescriptor_d1e4bfd2e9d102bb = []byte{
	// 673 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xd4, 0x56, 0x4d, 0x4f, 0x13, 0x4f,
	0x18, 0xef, 0xc0, 0x1f, 0x68, 0x9f, 0xfc, 0x89, 0xa1, 0xa0, 0x96, 0x8a, 0x43, 0x59, 0x5e, 0x05,
	0xed, 0x82, 0xc6, 0x0b, 0x17, 0x23, 0x17, 0x62, 0x7a, 0x31, 0xf5, 0xe5, 0xe0, 0x41, 0xb2, 0xdd,
	0x1d, 0x97, 0x91, 0x65, 0x66, 0xdd, 0xd9, 0x62, 0x30, 0x31, 0x21, 0x1e, 0x3c, 0x10, 0x4d, 0x4c,
	0xfc, 0x04, 0xde, 0xfc, 0x12, 0x26, 0x1e, 0x3d, 0x92, 0x78, 0xe1, 0x28, 0x8b, 0x07, 0xc3, 0x89,
	0x8f, 0x60, 0x76, 0x76, 0x29, 0xd0, 0xdd, 0x71, 0xc5, 0x7a, 0xf1, 0xd4, 0x66, 0x9e, 0xdf, 0x3c,
	0xbf, 0x97, 0xf6, 0x79, 0x32, 0x00, 0x6e, 0x53, 0xac, 0x56, 0x5d, 0x8f, 0xfb, 0xbc, 0xd8, 0x6b,
	0x51, 0xc3, 0xe1, 0x76, 0x79, 0xc4, 0xe6, 0xdc, 0x76, 0x88, 0x6e, 0xb8, 0x54, 0x37, 0x18, 0xe3,
	0xbe, 0xe1, 0x53, 0xce, 0x44, 0x84, 0x2a, 0x0f, 0x58, 0xe4, 0x09, 0x65, 0xf4, 0xe4, 0xd1, 0xe0,
	0x3a, 0x15, 0x26, 0x71, 0x1c, 0x83, 0x11, 0xde, 0x3c, 0x3a, 0x3c, 0x2f, 0x4c, 0xc3, 0x31, 0xdc,
	0x86, 0x1e, 0x7f, 0x46, 0xc7, 0xda, 0x36, 0x82, 0xe1, 0x3a, 0x79, 0xd6, 0x24, 0xc2, 0xaf, 0x13,
	0x9b, 0x0a, 0x9f, 0x78, 0xcb, 0x92, 0xee, 0x6e, 0x53, 0xac, 0x16, 0xe7, 0x00, 0x5c, 0x8f, 0x3f,
	0x25, 0xa6, 0xbf, 0x42, 0xad, 0x12, 0xaa, 0xa0, 0x99, 0xee, 0xa5, 0xff, 0xb7, 0x0f, 0xe6, 0xf3,
	0xd0, 0xbb, 0x4a, 0x2d, 0x8b, 0xb0, 0x7a, 0x21, 0xae, 0xdf, 0xb1, 0x8a, 0x1a, 0xf4, 0xf8, 0x7c,
	0x8d, 0xb0, 0x52, 0x57, 0x05, 0xcd, 0x14, 0xda, 0x70, 0x51, 0x69, 0x71, 0x24, 0xb8, 0x35, 0x0c,
	0x17, 0xe9, 0x7a, 0xd5, 0x72, 0xec, 0xaa, 0xed, 0xb9, 0x66, 0x75, 0xd9, 0x73, 0xcd, 0x58, 0x80,
	0xb6, 0x02, 0x97, 0xe2, 0xaf, 0x0f, 0x98, 0x97, 0x54, 0xd3, 0x22, 0x40, 0x7f, 0x4a, 0xf0, 0x09,
	0x41, 0xa9, 0xcd, 0xed, 0x6d, 0xd7, 0x8d, 0xdb, 0xcf, 0x40, 0xde, 0x70, 0x99, 0x58, 0x59, 0x23,
	0x9b, 0x92, 0xa1, 0x67, 0xa9, 0x7f, 0xfb, 0x60, 0xbe, 0x00, 0x7d, 0x1b, 0x54, 0xd0, 0x86, 0x43,
	0xea, 0x7d, 0x61, 0xb9, 0x46, 0x36, 0x7f, 0xc7, 0x69, 0xf1, 0x26, 0x9c, 0x93, 0xdd, 0x84, 0xef,
	0x51, 0x66, 0xcb, 0xa6, 0xdd, 0x12, 0xdd, 0xd6, 0xb4, 0x3f, 0x44, 0xdd, 0x93, 0xa0, 0x1a, 0xd9,
	0xcc, 0xd0, 0xff, 0x18, 0xca, 0x89, 0x80, 0x8e, 0x0d, 0x74, 0x9e, 0xcf, 0x67, 0xd4, 0xfa, 0x05,
	0x12, 0xf9, 0xd4, 0xa8, 0xff, 0x2f, 0x44, 0x64, 0xc0, 0x65, 0x75, 0x44, 0xa1, 0x87, 0xce, 0x53,
	0x7a, 0x8b, 0x5a, 0x1c, 0x89, 0x94, 0xee, 0x4b, 0x67, 0xb3, 0x50, 0x68, 0x34, 0x99, 0xe5, 0x90,
	0xa3, 0xb1, 0x49, 0x78, 0xca, 0x47, 0xf5, 0xbf, 0x32, 0x36, 0x26, 0x8c, 0xaa, 0x2d, 0x47, 0x82,
	0x3a, 0x36, 0x7d, 0xfd, 0x43, 0x1e, 0xfe, 0x93, 0xff, 0xb2, 0x17, 0x50, 0x4c, 0xd9, 0x14, 0x63,
	0xd5, 0x68, 0x5b, 0x55, 0x95, 0xcb, 0xa4, 0x3c, 0x74, 0x0c, 0x11, 0x2e, 0x67, 0x82, 0x3c, 0xe4,
	0xd4, 0xd2, 0xe6, 0x5e, 0x7d, 0xfd, 0xfe, 0xbe, 0x6b, 0x52, 0xab, 0xe8, 0x1b, 0x0b, 0x7a, 0xc8,
	0xaa, 0x87, 0x60, 0x3d, 0x79, 0x7f, 0x11, 0xcd, 0x16, 0xb7, 0x10, 0x0c, 0xa5, 0xae, 0x86, 0xf1,
	0x36, 0xfa, 0x34, 0x90, 0x42, 0xc0, 0x35, 0x29, 0x60, 0x5a, 0xd3, 0x4e, 0x0b, 0x48, 0xeb, 0x10,
	0x4a, 0x78, 0x0e, 0x03, 0xc9, 0xd5, 0x51, 0x51, 0xb8, 0x6f, 0x21, 0x14, 0xdc, 0xb3, 0x92, 0x7b,
	0x42, 0x1b, 0x4d, 0x37, 0xdf, 0xba, 0x1e, 0x12, 0xbf, 0x84, 0xc1, 0xd4, 0xa1, 0x57, 0x3a, 0xcf,
	0x22, 0xbf, 0x2a, 0xc9, 0xa7, 0xb4, 0x31, 0x95, 0xf1, 0x53, 0xf4, 0x61, 0xf4, 0xa9, 0x3b, 0x61,
	0x3c, 0xcb, 0x7b, 0x8d, 0xfa, 0x67, 0x8b, 0x3e, 0xad, 0x43, 0x28, 0xe1, 0x35, 0x82, 0x0b, 0x8a,
	0xa1, 0x9e, 0xcc, 0x4e, 0x41, 0x2d, 0x43, 0x97, 0x32, 0xae, 0x68, 0x13, 0x99, 0x41, 0x9c, 0x10,
	0xa2, 0x98, 0xfc, 0xc9, 0xac, 0x34, 0x24, 0xec, 0x6c, 0x42, 0xd2, 0x7b, 0x84, 0x42, 0xde, 0x20,
	0x28, 0x29, 0x67, 0x7e, 0x3a, 0x3b, 0x93, 0x5f, 0x89, 0x59, 0x90, 0x62, 0xe6, 0xb4, 0xa9, 0xcc,
	0x54, 0x8e, 0xe4, 0x2c, 0xd5, 0x77, 0xf6, 0x70, 0x6e, 0x77, 0x0f, 0xe7, 0x0e, 0xf7, 0x30, 0xda,
	0x0a, 0x30, 0xfa, 0x18, 0x60, 0xf4, 0x25, 0xc0, 0x68, 0x27, 0xc0, 0xe8, 0x5b, 0x80, 0xd1, 0x8f,
	0x00, 0xe7, 0x0e, 0x03, 0x8c, 0xde, 0xed, 0xe3, 0xdc, 0xce, 0x3e, 0xce, 0xed, 0xee, 0xe3, 0x1c,
	0x0c, 0x9d, 0x5c, 0x39, 0x82, 0x78, 0x1b, 0xd4, 0x24, 0xe2, 0x51, 0xfc, 0xfa, 0x69, 0xf4, 0xca,
	0x77, 0xca, 0x8d, 0x9f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x77, 0x7b, 0x52, 0x93, 0x1a, 0x09, 0x00,
	0x00,
}

func (this *RequestRegisterGooglePush) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RequestRegisterGooglePush)
	if !ok {
		that2, ok := that.(RequestRegisterGooglePush)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ProjectId != that1.ProjectId {
		return false
	}
	if this.Token != that1.Token {
		return false
	}
	return true
}
func (this *RequestUnregisterGooglePush) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RequestUnregisterGooglePush)
	if !ok {
		that2, ok := that.(RequestUnregisterGooglePush)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Token != that1.Token {
		return false
	}
	return true
}
func (this *RequestRegisterApplePush) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RequestRegisterApplePush)
	if !ok {
		that2, ok := that.(RequestRegisterApplePush)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ApnsKey != that1.ApnsKey {
		return false
	}
	if this.Token != that1.Token {
		return false
	}
	if this.ApnsStringKey != that1.ApnsStringKey {
		return false
	}
	return true
}
func (this *RequestUnregisterApplePush) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RequestUnregisterApplePush)
	if !ok {
		that2, ok := that.(RequestUnregisterApplePush)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Token != that1.Token {
		return false
	}
	return true
}
func (this *RequestRegisterApplePushKit) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RequestRegisterApplePushKit)
	if !ok {
		that2, ok := that.(RequestRegisterApplePushKit)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ApnsKey != that1.ApnsKey {
		return false
	}
	if this.Token != that1.Token {
		return false
	}
	if this.ApnsStringKey != that1.ApnsStringKey {
		return false
	}
	return true
}
func (this *RequestUnregisterApplePushKit) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RequestUnregisterApplePushKit)
	if !ok {
		that2, ok := that.(RequestUnregisterApplePushKit)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Token != that1.Token {
		return false
	}
	return true
}
func (this *RequestRegisterApplePushToken) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RequestRegisterApplePushToken)
	if !ok {
		that2, ok := that.(RequestRegisterApplePushToken)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.BundleId != that1.BundleId {
		return false
	}
	if this.Token != that1.Token {
		return false
	}
	return true
}
func (this *RequestUnregisterApplePushToken) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RequestUnregisterApplePushToken)
	if !ok {
		that2, ok := that.(RequestUnregisterApplePushToken)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Token != that1.Token {
		return false
	}
	return true
}
func (this *RequestRegisterGooglePush) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&dialog.RequestRegisterGooglePush{")
	s = append(s, "ProjectId: "+fmt.Sprintf("%#v", this.ProjectId)+",\n")
	s = append(s, "Token: "+fmt.Sprintf("%#v", this.Token)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RequestUnregisterGooglePush) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&dialog.RequestUnregisterGooglePush{")
	s = append(s, "Token: "+fmt.Sprintf("%#v", this.Token)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RequestRegisterApplePush) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&dialog.RequestRegisterApplePush{")
	s = append(s, "ApnsKey: "+fmt.Sprintf("%#v", this.ApnsKey)+",\n")
	s = append(s, "Token: "+fmt.Sprintf("%#v", this.Token)+",\n")
	s = append(s, "ApnsStringKey: "+fmt.Sprintf("%#v", this.ApnsStringKey)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RequestUnregisterApplePush) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&dialog.RequestUnregisterApplePush{")
	s = append(s, "Token: "+fmt.Sprintf("%#v", this.Token)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RequestRegisterApplePushKit) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&dialog.RequestRegisterApplePushKit{")
	s = append(s, "ApnsKey: "+fmt.Sprintf("%#v", this.ApnsKey)+",\n")
	s = append(s, "Token: "+fmt.Sprintf("%#v", this.Token)+",\n")
	s = append(s, "ApnsStringKey: "+fmt.Sprintf("%#v", this.ApnsStringKey)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RequestUnregisterApplePushKit) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&dialog.RequestUnregisterApplePushKit{")
	s = append(s, "Token: "+fmt.Sprintf("%#v", this.Token)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RequestRegisterApplePushToken) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&dialog.RequestRegisterApplePushToken{")
	s = append(s, "BundleId: "+fmt.Sprintf("%#v", this.BundleId)+",\n")
	s = append(s, "Token: "+fmt.Sprintf("%#v", this.Token)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RequestUnregisterApplePushToken) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&dialog.RequestUnregisterApplePushToken{")
	s = append(s, "Token: "+fmt.Sprintf("%#v", this.Token)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringPush(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// PushClient is the client API for Push service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type PushClient interface {
	RegisterGooglePush(ctx context.Context, in *RequestRegisterGooglePush, opts ...grpc.CallOption) (*ResponseVoid, error)
	UnregisterGooglePush(ctx context.Context, in *RequestUnregisterGooglePush, opts ...grpc.CallOption) (*ResponseVoid, error)
	RegisterApplePush(ctx context.Context, in *RequestRegisterApplePush, opts ...grpc.CallOption) (*ResponseVoid, error)
	UnregisterApplePush(ctx context.Context, in *RequestUnregisterApplePush, opts ...grpc.CallOption) (*ResponseVoid, error)
	RegisterApplePushKit(ctx context.Context, in *RequestRegisterApplePushKit, opts ...grpc.CallOption) (*ResponseVoid, error)
	UnregisterApplePushKit(ctx context.Context, in *RequestUnregisterApplePushKit, opts ...grpc.CallOption) (*ResponseVoid, error)
	RegisterApplePushToken(ctx context.Context, in *RequestRegisterApplePushToken, opts ...grpc.CallOption) (*ResponseVoid, error)
	UnregisterApplePushToken(ctx context.Context, in *RequestUnregisterApplePushToken, opts ...grpc.CallOption) (*ResponseVoid, error)
}

type pushClient struct {
	cc *grpc.ClientConn
}

func NewPushClient(cc *grpc.ClientConn) PushClient {
	return &pushClient{cc}
}

func (c *pushClient) RegisterGooglePush(ctx context.Context, in *RequestRegisterGooglePush, opts ...grpc.CallOption) (*ResponseVoid, error) {
	out := new(ResponseVoid)
	err := c.cc.Invoke(ctx, "/dialog.Push/RegisterGooglePush", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pushClient) UnregisterGooglePush(ctx context.Context, in *RequestUnregisterGooglePush, opts ...grpc.CallOption) (*ResponseVoid, error) {
	out := new(ResponseVoid)
	err := c.cc.Invoke(ctx, "/dialog.Push/UnregisterGooglePush", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pushClient) RegisterApplePush(ctx context.Context, in *RequestRegisterApplePush, opts ...grpc.CallOption) (*ResponseVoid, error) {
	out := new(ResponseVoid)
	err := c.cc.Invoke(ctx, "/dialog.Push/RegisterApplePush", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pushClient) UnregisterApplePush(ctx context.Context, in *RequestUnregisterApplePush, opts ...grpc.CallOption) (*ResponseVoid, error) {
	out := new(ResponseVoid)
	err := c.cc.Invoke(ctx, "/dialog.Push/UnregisterApplePush", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pushClient) RegisterApplePushKit(ctx context.Context, in *RequestRegisterApplePushKit, opts ...grpc.CallOption) (*ResponseVoid, error) {
	out := new(ResponseVoid)
	err := c.cc.Invoke(ctx, "/dialog.Push/RegisterApplePushKit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pushClient) UnregisterApplePushKit(ctx context.Context, in *RequestUnregisterApplePushKit, opts ...grpc.CallOption) (*ResponseVoid, error) {
	out := new(ResponseVoid)
	err := c.cc.Invoke(ctx, "/dialog.Push/UnregisterApplePushKit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pushClient) RegisterApplePushToken(ctx context.Context, in *RequestRegisterApplePushToken, opts ...grpc.CallOption) (*ResponseVoid, error) {
	out := new(ResponseVoid)
	err := c.cc.Invoke(ctx, "/dialog.Push/RegisterApplePushToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pushClient) UnregisterApplePushToken(ctx context.Context, in *RequestUnregisterApplePushToken, opts ...grpc.CallOption) (*ResponseVoid, error) {
	out := new(ResponseVoid)
	err := c.cc.Invoke(ctx, "/dialog.Push/UnregisterApplePushToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PushServer is the server API for Push service.
type PushServer interface {
	RegisterGooglePush(context.Context, *RequestRegisterGooglePush) (*ResponseVoid, error)
	UnregisterGooglePush(context.Context, *RequestUnregisterGooglePush) (*ResponseVoid, error)
	RegisterApplePush(context.Context, *RequestRegisterApplePush) (*ResponseVoid, error)
	UnregisterApplePush(context.Context, *RequestUnregisterApplePush) (*ResponseVoid, error)
	RegisterApplePushKit(context.Context, *RequestRegisterApplePushKit) (*ResponseVoid, error)
	UnregisterApplePushKit(context.Context, *RequestUnregisterApplePushKit) (*ResponseVoid, error)
	RegisterApplePushToken(context.Context, *RequestRegisterApplePushToken) (*ResponseVoid, error)
	UnregisterApplePushToken(context.Context, *RequestUnregisterApplePushToken) (*ResponseVoid, error)
}

// UnimplementedPushServer can be embedded to have forward compatible implementations.
type UnimplementedPushServer struct {
}

func (*UnimplementedPushServer) RegisterGooglePush(ctx context.Context, req *RequestRegisterGooglePush) (*ResponseVoid, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterGooglePush not implemented")
}
func (*UnimplementedPushServer) UnregisterGooglePush(ctx context.Context, req *RequestUnregisterGooglePush) (*ResponseVoid, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnregisterGooglePush not implemented")
}
func (*UnimplementedPushServer) RegisterApplePush(ctx context.Context, req *RequestRegisterApplePush) (*ResponseVoid, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterApplePush not implemented")
}
func (*UnimplementedPushServer) UnregisterApplePush(ctx context.Context, req *RequestUnregisterApplePush) (*ResponseVoid, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnregisterApplePush not implemented")
}
func (*UnimplementedPushServer) RegisterApplePushKit(ctx context.Context, req *RequestRegisterApplePushKit) (*ResponseVoid, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterApplePushKit not implemented")
}
func (*UnimplementedPushServer) UnregisterApplePushKit(ctx context.Context, req *RequestUnregisterApplePushKit) (*ResponseVoid, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnregisterApplePushKit not implemented")
}
func (*UnimplementedPushServer) RegisterApplePushToken(ctx context.Context, req *RequestRegisterApplePushToken) (*ResponseVoid, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterApplePushToken not implemented")
}
func (*UnimplementedPushServer) UnregisterApplePushToken(ctx context.Context, req *RequestUnregisterApplePushToken) (*ResponseVoid, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnregisterApplePushToken not implemented")
}

func RegisterPushServer(s *grpc.Server, srv PushServer) {
	s.RegisterService(&_Push_serviceDesc, srv)
}

func _Push_RegisterGooglePush_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestRegisterGooglePush)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PushServer).RegisterGooglePush(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dialog.Push/RegisterGooglePush",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PushServer).RegisterGooglePush(ctx, req.(*RequestRegisterGooglePush))
	}
	return interceptor(ctx, in, info, handler)
}

func _Push_UnregisterGooglePush_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestUnregisterGooglePush)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PushServer).UnregisterGooglePush(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dialog.Push/UnregisterGooglePush",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PushServer).UnregisterGooglePush(ctx, req.(*RequestUnregisterGooglePush))
	}
	return interceptor(ctx, in, info, handler)
}

func _Push_RegisterApplePush_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestRegisterApplePush)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PushServer).RegisterApplePush(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dialog.Push/RegisterApplePush",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PushServer).RegisterApplePush(ctx, req.(*RequestRegisterApplePush))
	}
	return interceptor(ctx, in, info, handler)
}

func _Push_UnregisterApplePush_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestUnregisterApplePush)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PushServer).UnregisterApplePush(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dialog.Push/UnregisterApplePush",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PushServer).UnregisterApplePush(ctx, req.(*RequestUnregisterApplePush))
	}
	return interceptor(ctx, in, info, handler)
}

func _Push_RegisterApplePushKit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestRegisterApplePushKit)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PushServer).RegisterApplePushKit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dialog.Push/RegisterApplePushKit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PushServer).RegisterApplePushKit(ctx, req.(*RequestRegisterApplePushKit))
	}
	return interceptor(ctx, in, info, handler)
}

func _Push_UnregisterApplePushKit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestUnregisterApplePushKit)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PushServer).UnregisterApplePushKit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dialog.Push/UnregisterApplePushKit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PushServer).UnregisterApplePushKit(ctx, req.(*RequestUnregisterApplePushKit))
	}
	return interceptor(ctx, in, info, handler)
}

func _Push_RegisterApplePushToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestRegisterApplePushToken)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PushServer).RegisterApplePushToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dialog.Push/RegisterApplePushToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PushServer).RegisterApplePushToken(ctx, req.(*RequestRegisterApplePushToken))
	}
	return interceptor(ctx, in, info, handler)
}

func _Push_UnregisterApplePushToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestUnregisterApplePushToken)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PushServer).UnregisterApplePushToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dialog.Push/UnregisterApplePushToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PushServer).UnregisterApplePushToken(ctx, req.(*RequestUnregisterApplePushToken))
	}
	return interceptor(ctx, in, info, handler)
}

var _Push_serviceDesc = grpc.ServiceDesc{
	ServiceName: "dialog.Push",
	HandlerType: (*PushServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterGooglePush",
			Handler:    _Push_RegisterGooglePush_Handler,
		},
		{
			MethodName: "UnregisterGooglePush",
			Handler:    _Push_UnregisterGooglePush_Handler,
		},
		{
			MethodName: "RegisterApplePush",
			Handler:    _Push_RegisterApplePush_Handler,
		},
		{
			MethodName: "UnregisterApplePush",
			Handler:    _Push_UnregisterApplePush_Handler,
		},
		{
			MethodName: "RegisterApplePushKit",
			Handler:    _Push_RegisterApplePushKit_Handler,
		},
		{
			MethodName: "UnregisterApplePushKit",
			Handler:    _Push_UnregisterApplePushKit_Handler,
		},
		{
			MethodName: "RegisterApplePushToken",
			Handler:    _Push_RegisterApplePushToken_Handler,
		},
		{
			MethodName: "UnregisterApplePushToken",
			Handler:    _Push_UnregisterApplePushToken_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "push.proto",
}

func (m *RequestRegisterGooglePush) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestRegisterGooglePush) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RequestRegisterGooglePush) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Token) > 0 {
		i -= len(m.Token)
		copy(dAtA[i:], m.Token)
		i = encodeVarintPush(dAtA, i, uint64(len(m.Token)))
		i--
		dAtA[i] = 0x12
	}
	if m.ProjectId != 0 {
		i = encodeVarintPush(dAtA, i, uint64(m.ProjectId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *RequestUnregisterGooglePush) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestUnregisterGooglePush) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RequestUnregisterGooglePush) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Token) > 0 {
		i -= len(m.Token)
		copy(dAtA[i:], m.Token)
		i = encodeVarintPush(dAtA, i, uint64(len(m.Token)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RequestRegisterApplePush) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestRegisterApplePush) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RequestRegisterApplePush) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ApnsStringKey) > 0 {
		i -= len(m.ApnsStringKey)
		copy(dAtA[i:], m.ApnsStringKey)
		i = encodeVarintPush(dAtA, i, uint64(len(m.ApnsStringKey)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Token) > 0 {
		i -= len(m.Token)
		copy(dAtA[i:], m.Token)
		i = encodeVarintPush(dAtA, i, uint64(len(m.Token)))
		i--
		dAtA[i] = 0x12
	}
	if m.ApnsKey != 0 {
		i = encodeVarintPush(dAtA, i, uint64(m.ApnsKey))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *RequestUnregisterApplePush) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestUnregisterApplePush) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RequestUnregisterApplePush) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Token) > 0 {
		i -= len(m.Token)
		copy(dAtA[i:], m.Token)
		i = encodeVarintPush(dAtA, i, uint64(len(m.Token)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RequestRegisterApplePushKit) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestRegisterApplePushKit) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RequestRegisterApplePushKit) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ApnsStringKey) > 0 {
		i -= len(m.ApnsStringKey)
		copy(dAtA[i:], m.ApnsStringKey)
		i = encodeVarintPush(dAtA, i, uint64(len(m.ApnsStringKey)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Token) > 0 {
		i -= len(m.Token)
		copy(dAtA[i:], m.Token)
		i = encodeVarintPush(dAtA, i, uint64(len(m.Token)))
		i--
		dAtA[i] = 0x12
	}
	if m.ApnsKey != 0 {
		i = encodeVarintPush(dAtA, i, uint64(m.ApnsKey))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *RequestUnregisterApplePushKit) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestUnregisterApplePushKit) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RequestUnregisterApplePushKit) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Token) > 0 {
		i -= len(m.Token)
		copy(dAtA[i:], m.Token)
		i = encodeVarintPush(dAtA, i, uint64(len(m.Token)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RequestRegisterApplePushToken) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestRegisterApplePushToken) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RequestRegisterApplePushToken) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Token) > 0 {
		i -= len(m.Token)
		copy(dAtA[i:], m.Token)
		i = encodeVarintPush(dAtA, i, uint64(len(m.Token)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.BundleId) > 0 {
		i -= len(m.BundleId)
		copy(dAtA[i:], m.BundleId)
		i = encodeVarintPush(dAtA, i, uint64(len(m.BundleId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RequestUnregisterApplePushToken) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestUnregisterApplePushToken) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RequestUnregisterApplePushToken) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Token) > 0 {
		i -= len(m.Token)
		copy(dAtA[i:], m.Token)
		i = encodeVarintPush(dAtA, i, uint64(len(m.Token)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintPush(dAtA []byte, offset int, v uint64) int {
	offset -= sovPush(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *RequestRegisterGooglePush) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ProjectId != 0 {
		n += 1 + sovPush(uint64(m.ProjectId))
	}
	l = len(m.Token)
	if l > 0 {
		n += 1 + l + sovPush(uint64(l))
	}
	return n
}

func (m *RequestUnregisterGooglePush) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Token)
	if l > 0 {
		n += 1 + l + sovPush(uint64(l))
	}
	return n
}

func (m *RequestRegisterApplePush) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ApnsKey != 0 {
		n += 1 + sovPush(uint64(m.ApnsKey))
	}
	l = len(m.Token)
	if l > 0 {
		n += 1 + l + sovPush(uint64(l))
	}
	l = len(m.ApnsStringKey)
	if l > 0 {
		n += 1 + l + sovPush(uint64(l))
	}
	return n
}

func (m *RequestUnregisterApplePush) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Token)
	if l > 0 {
		n += 1 + l + sovPush(uint64(l))
	}
	return n
}

func (m *RequestRegisterApplePushKit) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ApnsKey != 0 {
		n += 1 + sovPush(uint64(m.ApnsKey))
	}
	l = len(m.Token)
	if l > 0 {
		n += 1 + l + sovPush(uint64(l))
	}
	l = len(m.ApnsStringKey)
	if l > 0 {
		n += 1 + l + sovPush(uint64(l))
	}
	return n
}

func (m *RequestUnregisterApplePushKit) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Token)
	if l > 0 {
		n += 1 + l + sovPush(uint64(l))
	}
	return n
}

func (m *RequestRegisterApplePushToken) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.BundleId)
	if l > 0 {
		n += 1 + l + sovPush(uint64(l))
	}
	l = len(m.Token)
	if l > 0 {
		n += 1 + l + sovPush(uint64(l))
	}
	return n
}

func (m *RequestUnregisterApplePushToken) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Token)
	if l > 0 {
		n += 1 + l + sovPush(uint64(l))
	}
	return n
}

func sovPush(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozPush(x uint64) (n int) {
	return sovPush(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *RequestRegisterGooglePush) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RequestRegisterGooglePush{`,
		`ProjectId:` + fmt.Sprintf("%v", this.ProjectId) + `,`,
		`Token:` + fmt.Sprintf("%v", this.Token) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RequestUnregisterGooglePush) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RequestUnregisterGooglePush{`,
		`Token:` + fmt.Sprintf("%v", this.Token) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RequestRegisterApplePush) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RequestRegisterApplePush{`,
		`ApnsKey:` + fmt.Sprintf("%v", this.ApnsKey) + `,`,
		`Token:` + fmt.Sprintf("%v", this.Token) + `,`,
		`ApnsStringKey:` + fmt.Sprintf("%v", this.ApnsStringKey) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RequestUnregisterApplePush) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RequestUnregisterApplePush{`,
		`Token:` + fmt.Sprintf("%v", this.Token) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RequestRegisterApplePushKit) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RequestRegisterApplePushKit{`,
		`ApnsKey:` + fmt.Sprintf("%v", this.ApnsKey) + `,`,
		`Token:` + fmt.Sprintf("%v", this.Token) + `,`,
		`ApnsStringKey:` + fmt.Sprintf("%v", this.ApnsStringKey) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RequestUnregisterApplePushKit) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RequestUnregisterApplePushKit{`,
		`Token:` + fmt.Sprintf("%v", this.Token) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RequestRegisterApplePushToken) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RequestRegisterApplePushToken{`,
		`BundleId:` + fmt.Sprintf("%v", this.BundleId) + `,`,
		`Token:` + fmt.Sprintf("%v", this.Token) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RequestUnregisterApplePushToken) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RequestUnregisterApplePushToken{`,
		`Token:` + fmt.Sprintf("%v", this.Token) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringPush(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *RequestRegisterGooglePush) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPush
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestRegisterGooglePush: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestRegisterGooglePush: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProjectId", wireType)
			}
			m.ProjectId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPush
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ProjectId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPush
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPush
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPush
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Token = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPush(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPush
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPush
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestUnregisterGooglePush) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPush
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestUnregisterGooglePush: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestUnregisterGooglePush: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPush
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPush
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPush
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Token = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPush(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPush
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPush
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestRegisterApplePush) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPush
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestRegisterApplePush: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestRegisterApplePush: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApnsKey", wireType)
			}
			m.ApnsKey = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPush
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ApnsKey |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPush
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPush
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPush
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Token = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApnsStringKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPush
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPush
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPush
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ApnsStringKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPush(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPush
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPush
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestUnregisterApplePush) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPush
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestUnregisterApplePush: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestUnregisterApplePush: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPush
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPush
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPush
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Token = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPush(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPush
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPush
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestRegisterApplePushKit) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPush
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestRegisterApplePushKit: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestRegisterApplePushKit: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApnsKey", wireType)
			}
			m.ApnsKey = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPush
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ApnsKey |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPush
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPush
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPush
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Token = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApnsStringKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPush
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPush
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPush
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ApnsStringKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPush(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPush
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPush
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestUnregisterApplePushKit) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPush
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestUnregisterApplePushKit: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestUnregisterApplePushKit: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPush
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPush
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPush
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Token = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPush(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPush
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPush
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestRegisterApplePushToken) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPush
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestRegisterApplePushToken: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestRegisterApplePushToken: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BundleId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPush
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPush
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPush
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BundleId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPush
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPush
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPush
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Token = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPush(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPush
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPush
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestUnregisterApplePushToken) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPush
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestUnregisterApplePushToken: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestUnregisterApplePushToken: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPush
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPush
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPush
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Token = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPush(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPush
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPush
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPush(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPush
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPush
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPush
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthPush
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupPush
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthPush
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthPush        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPush          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupPush = fmt.Errorf("proto: unexpected end of group")
)
