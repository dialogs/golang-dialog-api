// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: gateway_service.proto

package dialog

import (
	bytes "bytes"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	types "github.com/gogo/protobuf/types"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type GetDifferenceCommand struct {
	Seq        *types.Int32Value `protobuf:"bytes,1,opt,name=seq,proto3" json:"seq,omitempty"`
	State      []byte            `protobuf:"bytes,2,opt,name=state,proto3" json:"state,omitempty"`
	ConfigHash int64             `protobuf:"varint,3,opt,name=configHash,proto3" json:"configHash,omitempty"`
}

func (m *GetDifferenceCommand) Reset()      { *m = GetDifferenceCommand{} }
func (*GetDifferenceCommand) ProtoMessage() {}
func (*GetDifferenceCommand) Descriptor() ([]byte, []int) {
	return fileDescriptor_37594582a294f34d, []int{0}
}
func (m *GetDifferenceCommand) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetDifferenceCommand) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetDifferenceCommand.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetDifferenceCommand) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetDifferenceCommand.Merge(m, src)
}
func (m *GetDifferenceCommand) XXX_Size() int {
	return m.Size()
}
func (m *GetDifferenceCommand) XXX_DiscardUnknown() {
	xxx_messageInfo_GetDifferenceCommand.DiscardUnknown(m)
}

var xxx_messageInfo_GetDifferenceCommand proto.InternalMessageInfo

func (m *GetDifferenceCommand) GetSeq() *types.Int32Value {
	if m != nil {
		return m.Seq
	}
	return nil
}

func (m *GetDifferenceCommand) GetState() []byte {
	if m != nil {
		return m.State
	}
	return nil
}

func (m *GetDifferenceCommand) GetConfigHash() int64 {
	if m != nil {
		return m.ConfigHash
	}
	return 0
}

type ServiceUpdate struct {
	// Types that are valid to be assigned to Update:
	//	*ServiceUpdate_ObsoleteUpdate
	Update isServiceUpdate_Update `protobuf_oneof:"update"`
}

func (m *ServiceUpdate) Reset()      { *m = ServiceUpdate{} }
func (*ServiceUpdate) ProtoMessage() {}
func (*ServiceUpdate) Descriptor() ([]byte, []int) {
	return fileDescriptor_37594582a294f34d, []int{1}
}
func (m *ServiceUpdate) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ServiceUpdate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ServiceUpdate.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ServiceUpdate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ServiceUpdate.Merge(m, src)
}
func (m *ServiceUpdate) XXX_Size() int {
	return m.Size()
}
func (m *ServiceUpdate) XXX_DiscardUnknown() {
	xxx_messageInfo_ServiceUpdate.DiscardUnknown(m)
}

var xxx_messageInfo_ServiceUpdate proto.InternalMessageInfo

type isServiceUpdate_Update interface {
	isServiceUpdate_Update()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type ServiceUpdate_ObsoleteUpdate struct {
	ObsoleteUpdate *types.BytesValue `protobuf:"bytes,1,opt,name=obsoleteUpdate,proto3,oneof" json:"obsoleteUpdate,omitempty"`
}

func (*ServiceUpdate_ObsoleteUpdate) isServiceUpdate_Update() {}

func (m *ServiceUpdate) GetUpdate() isServiceUpdate_Update {
	if m != nil {
		return m.Update
	}
	return nil
}

func (m *ServiceUpdate) GetObsoleteUpdate() *types.BytesValue {
	if x, ok := m.GetUpdate().(*ServiceUpdate_ObsoleteUpdate); ok {
		return x.ObsoleteUpdate
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*ServiceUpdate) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*ServiceUpdate_ObsoleteUpdate)(nil),
	}
}

func init() {
	proto.RegisterType((*GetDifferenceCommand)(nil), "dialog.GetDifferenceCommand")
	proto.RegisterType((*ServiceUpdate)(nil), "dialog.ServiceUpdate")
}

func init() { proto.RegisterFile("gateway_service.proto", fileDescriptor_37594582a294f34d) }

var fileDescriptor_37594582a294f34d = []byte{
	// 316 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x90, 0x3f, 0x4a, 0x03, 0x41,
	0x18, 0xc5, 0x67, 0xb2, 0x18, 0x64, 0xfc, 0x53, 0x2c, 0x11, 0x82, 0xc2, 0x47, 0x48, 0x95, 0xc6,
	0x09, 0x24, 0x27, 0x30, 0x2a, 0x26, 0x9d, 0xac, 0x68, 0x61, 0xa1, 0x4e, 0x76, 0xbf, 0x1d, 0x17,
	0x36, 0x3b, 0xeb, 0xce, 0xc4, 0x10, 0x6c, 0x3c, 0x82, 0x67, 0xb0, 0xf2, 0x0c, 0x9e, 0xc0, 0x32,
	0x65, 0x4a, 0x33, 0x69, 0x2c, 0x73, 0x04, 0xc9, 0xee, 0x0a, 0x22, 0xd8, 0x0c, 0xf3, 0x3d, 0xde,
	0x7b, 0xfc, 0x78, 0x6c, 0x4f, 0x0a, 0x83, 0x13, 0x31, 0xbd, 0xd5, 0x98, 0x3d, 0x46, 0x3e, 0xf2,
	0x34, 0x53, 0x46, 0xb9, 0xd5, 0x20, 0x12, 0xb1, 0x92, 0xfb, 0x20, 0x95, 0x92, 0x31, 0xb6, 0x73,
	0x75, 0x38, 0x0e, 0xdb, 0x93, 0x4c, 0xa4, 0x29, 0x66, 0xba, 0xf0, 0x35, 0x9f, 0x58, 0xed, 0x0c,
	0xcd, 0x49, 0x14, 0x86, 0x98, 0x61, 0xe2, 0xe3, 0xb1, 0x1a, 0x8d, 0x44, 0x12, 0xb8, 0x87, 0xcc,
	0xd1, 0xf8, 0x50, 0xa7, 0x0d, 0xda, 0xda, 0xea, 0x1c, 0xf0, 0xa2, 0x85, 0xff, 0xb4, 0xf0, 0x41,
	0x62, 0xba, 0x9d, 0x2b, 0x11, 0x8f, 0xd1, 0x5b, 0xfb, 0xdc, 0x1a, 0xdb, 0xd0, 0x46, 0x18, 0xac,
	0x57, 0x1a, 0xb4, 0xb5, 0xed, 0x15, 0x87, 0x0b, 0x8c, 0xf9, 0x2a, 0x09, 0x23, 0xd9, 0x17, 0xfa,
	0xbe, 0xee, 0x34, 0x68, 0xcb, 0xf1, 0x7e, 0x29, 0xcd, 0x3b, 0xb6, 0x73, 0x51, 0x50, 0x5f, 0xa6,
	0xc1, 0x3a, 0x70, 0xca, 0x76, 0xd5, 0x50, 0xab, 0x18, 0x4d, 0xa9, 0xfc, 0x0b, 0xd0, 0x9b, 0x1a,
	0xd4, 0x39, 0x40, 0x9f, 0x78, 0x7f, 0x42, 0xbd, 0x4d, 0x56, 0x1d, 0x17, 0xbf, 0x9b, 0xd9, 0x02,
	0xc8, 0x7c, 0x01, 0x64, 0xb5, 0x00, 0xfa, 0x6c, 0x81, 0xbe, 0x59, 0xa0, 0x1f, 0x16, 0xe8, 0xcc,
	0x02, 0xfd, 0xb4, 0x40, 0xbf, 0x2c, 0x90, 0x95, 0x05, 0xfa, 0xb2, 0x04, 0x32, 0x5b, 0x02, 0x99,
	0x2f, 0x81, 0xb0, 0x5a, 0x34, 0xe2, 0x41, 0x2c, 0xb9, 0xcc, 0x52, 0x9f, 0x97, 0xbb, 0xea, 0xeb,
	0x72, 0xd2, 0xd7, 0x8a, 0x73, 0x74, 0x3e, 0x78, 0xcf, 0xdf, 0x61, 0x35, 0x07, 0xea, 0x7e, 0x07,
	0x00, 0x00, 0xff, 0xff, 0x5f, 0x38, 0xd0, 0xc0, 0x86, 0x01, 0x00, 0x00,
}

func (this *GetDifferenceCommand) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetDifferenceCommand)
	if !ok {
		that2, ok := that.(GetDifferenceCommand)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Seq.Equal(that1.Seq) {
		return false
	}
	if !bytes.Equal(this.State, that1.State) {
		return false
	}
	if this.ConfigHash != that1.ConfigHash {
		return false
	}
	return true
}
func (this *ServiceUpdate) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ServiceUpdate)
	if !ok {
		that2, ok := that.(ServiceUpdate)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.Update == nil {
		if this.Update != nil {
			return false
		}
	} else if this.Update == nil {
		return false
	} else if !this.Update.Equal(that1.Update) {
		return false
	}
	return true
}
func (this *ServiceUpdate_ObsoleteUpdate) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ServiceUpdate_ObsoleteUpdate)
	if !ok {
		that2, ok := that.(ServiceUpdate_ObsoleteUpdate)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ObsoleteUpdate.Equal(that1.ObsoleteUpdate) {
		return false
	}
	return true
}
func (this *GetDifferenceCommand) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&dialog.GetDifferenceCommand{")
	if this.Seq != nil {
		s = append(s, "Seq: "+fmt.Sprintf("%#v", this.Seq)+",\n")
	}
	s = append(s, "State: "+fmt.Sprintf("%#v", this.State)+",\n")
	s = append(s, "ConfigHash: "+fmt.Sprintf("%#v", this.ConfigHash)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ServiceUpdate) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&dialog.ServiceUpdate{")
	if this.Update != nil {
		s = append(s, "Update: "+fmt.Sprintf("%#v", this.Update)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ServiceUpdate_ObsoleteUpdate) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dialog.ServiceUpdate_ObsoleteUpdate{` +
		`ObsoleteUpdate:` + fmt.Sprintf("%#v", this.ObsoleteUpdate) + `}`}, ", ")
	return s
}
func valueToGoStringGatewayService(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *GetDifferenceCommand) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetDifferenceCommand) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetDifferenceCommand) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ConfigHash != 0 {
		i = encodeVarintGatewayService(dAtA, i, uint64(m.ConfigHash))
		i--
		dAtA[i] = 0x18
	}
	if len(m.State) > 0 {
		i -= len(m.State)
		copy(dAtA[i:], m.State)
		i = encodeVarintGatewayService(dAtA, i, uint64(len(m.State)))
		i--
		dAtA[i] = 0x12
	}
	if m.Seq != nil {
		{
			size, err := m.Seq.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGatewayService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ServiceUpdate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ServiceUpdate) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ServiceUpdate) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Update != nil {
		{
			size := m.Update.Size()
			i -= size
			if _, err := m.Update.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *ServiceUpdate_ObsoleteUpdate) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ServiceUpdate_ObsoleteUpdate) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ObsoleteUpdate != nil {
		{
			size, err := m.ObsoleteUpdate.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGatewayService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}
func encodeVarintGatewayService(dAtA []byte, offset int, v uint64) int {
	offset -= sovGatewayService(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *GetDifferenceCommand) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Seq != nil {
		l = m.Seq.Size()
		n += 1 + l + sovGatewayService(uint64(l))
	}
	l = len(m.State)
	if l > 0 {
		n += 1 + l + sovGatewayService(uint64(l))
	}
	if m.ConfigHash != 0 {
		n += 1 + sovGatewayService(uint64(m.ConfigHash))
	}
	return n
}

func (m *ServiceUpdate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Update != nil {
		n += m.Update.Size()
	}
	return n
}

func (m *ServiceUpdate_ObsoleteUpdate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ObsoleteUpdate != nil {
		l = m.ObsoleteUpdate.Size()
		n += 1 + l + sovGatewayService(uint64(l))
	}
	return n
}

func sovGatewayService(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozGatewayService(x uint64) (n int) {
	return sovGatewayService(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *GetDifferenceCommand) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetDifferenceCommand{`,
		`Seq:` + strings.Replace(fmt.Sprintf("%v", this.Seq), "Int32Value", "types.Int32Value", 1) + `,`,
		`State:` + fmt.Sprintf("%v", this.State) + `,`,
		`ConfigHash:` + fmt.Sprintf("%v", this.ConfigHash) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ServiceUpdate) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ServiceUpdate{`,
		`Update:` + fmt.Sprintf("%v", this.Update) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ServiceUpdate_ObsoleteUpdate) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ServiceUpdate_ObsoleteUpdate{`,
		`ObsoleteUpdate:` + strings.Replace(fmt.Sprintf("%v", this.ObsoleteUpdate), "BytesValue", "types.BytesValue", 1) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringGatewayService(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *GetDifferenceCommand) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGatewayService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetDifferenceCommand: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetDifferenceCommand: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Seq", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGatewayService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGatewayService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGatewayService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Seq == nil {
				m.Seq = &types.Int32Value{}
			}
			if err := m.Seq.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGatewayService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthGatewayService
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthGatewayService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.State = append(m.State[:0], dAtA[iNdEx:postIndex]...)
			if m.State == nil {
				m.State = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConfigHash", wireType)
			}
			m.ConfigHash = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGatewayService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ConfigHash |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGatewayService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGatewayService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthGatewayService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ServiceUpdate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGatewayService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ServiceUpdate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ServiceUpdate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObsoleteUpdate", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGatewayService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGatewayService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGatewayService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &types.BytesValue{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Update = &ServiceUpdate_ObsoleteUpdate{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGatewayService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGatewayService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthGatewayService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipGatewayService(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowGatewayService
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGatewayService
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGatewayService
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthGatewayService
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupGatewayService
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthGatewayService
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthGatewayService        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowGatewayService          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupGatewayService = fmt.Errorf("proto: unexpected end of group")
)
