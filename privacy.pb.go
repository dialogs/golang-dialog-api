// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: privacy.proto

package dialog

import (
	context "context"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	_ "github.com/gogo/protobuf/types"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Block User
type RequestBlockUser struct {
	Peer *UserOutPeer `protobuf:"bytes,1,opt,name=peer,proto3" json:"peer,omitempty"`
}

func (m *RequestBlockUser) Reset()      { *m = RequestBlockUser{} }
func (*RequestBlockUser) ProtoMessage() {}
func (*RequestBlockUser) Descriptor() ([]byte, []int) {
	return fileDescriptor_dde03d4df7a6e99a, []int{0}
}
func (m *RequestBlockUser) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RequestBlockUser) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RequestBlockUser.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RequestBlockUser) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RequestBlockUser.Merge(m, src)
}
func (m *RequestBlockUser) XXX_Size() int {
	return m.Size()
}
func (m *RequestBlockUser) XXX_DiscardUnknown() {
	xxx_messageInfo_RequestBlockUser.DiscardUnknown(m)
}

var xxx_messageInfo_RequestBlockUser proto.InternalMessageInfo

func (m *RequestBlockUser) GetPeer() *UserOutPeer {
	if m != nil {
		return m.Peer
	}
	return nil
}

// Unblock User
type RequestUnblockUser struct {
	Peer *UserOutPeer `protobuf:"bytes,1,opt,name=peer,proto3" json:"peer,omitempty"`
}

func (m *RequestUnblockUser) Reset()      { *m = RequestUnblockUser{} }
func (*RequestUnblockUser) ProtoMessage() {}
func (*RequestUnblockUser) Descriptor() ([]byte, []int) {
	return fileDescriptor_dde03d4df7a6e99a, []int{1}
}
func (m *RequestUnblockUser) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RequestUnblockUser) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RequestUnblockUser.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RequestUnblockUser) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RequestUnblockUser.Merge(m, src)
}
func (m *RequestUnblockUser) XXX_Size() int {
	return m.Size()
}
func (m *RequestUnblockUser) XXX_DiscardUnknown() {
	xxx_messageInfo_RequestUnblockUser.DiscardUnknown(m)
}

var xxx_messageInfo_RequestUnblockUser proto.InternalMessageInfo

func (m *RequestUnblockUser) GetPeer() *UserOutPeer {
	if m != nil {
		return m.Peer
	}
	return nil
}

// Load Blocked Users
type RequestLoadBlockedUsers struct {
}

func (m *RequestLoadBlockedUsers) Reset()      { *m = RequestLoadBlockedUsers{} }
func (*RequestLoadBlockedUsers) ProtoMessage() {}
func (*RequestLoadBlockedUsers) Descriptor() ([]byte, []int) {
	return fileDescriptor_dde03d4df7a6e99a, []int{2}
}
func (m *RequestLoadBlockedUsers) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RequestLoadBlockedUsers) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RequestLoadBlockedUsers.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RequestLoadBlockedUsers) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RequestLoadBlockedUsers.Merge(m, src)
}
func (m *RequestLoadBlockedUsers) XXX_Size() int {
	return m.Size()
}
func (m *RequestLoadBlockedUsers) XXX_DiscardUnknown() {
	xxx_messageInfo_RequestLoadBlockedUsers.DiscardUnknown(m)
}

var xxx_messageInfo_RequestLoadBlockedUsers proto.InternalMessageInfo

type ResponseLoadBlockedUsers struct {
	UserPeers []*UserOutPeer `protobuf:"bytes,1,rep,name=user_peers,json=userPeers,proto3" json:"user_peers,omitempty"`
}

func (m *ResponseLoadBlockedUsers) Reset()      { *m = ResponseLoadBlockedUsers{} }
func (*ResponseLoadBlockedUsers) ProtoMessage() {}
func (*ResponseLoadBlockedUsers) Descriptor() ([]byte, []int) {
	return fileDescriptor_dde03d4df7a6e99a, []int{3}
}
func (m *ResponseLoadBlockedUsers) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ResponseLoadBlockedUsers) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ResponseLoadBlockedUsers.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ResponseLoadBlockedUsers) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResponseLoadBlockedUsers.Merge(m, src)
}
func (m *ResponseLoadBlockedUsers) XXX_Size() int {
	return m.Size()
}
func (m *ResponseLoadBlockedUsers) XXX_DiscardUnknown() {
	xxx_messageInfo_ResponseLoadBlockedUsers.DiscardUnknown(m)
}

var xxx_messageInfo_ResponseLoadBlockedUsers proto.InternalMessageInfo

func (m *ResponseLoadBlockedUsers) GetUserPeers() []*UserOutPeer {
	if m != nil {
		return m.UserPeers
	}
	return nil
}

// Update about User Blocked
type UpdateUserBlocked struct {
	Uid int32 `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`
}

func (m *UpdateUserBlocked) Reset()      { *m = UpdateUserBlocked{} }
func (*UpdateUserBlocked) ProtoMessage() {}
func (*UpdateUserBlocked) Descriptor() ([]byte, []int) {
	return fileDescriptor_dde03d4df7a6e99a, []int{4}
}
func (m *UpdateUserBlocked) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateUserBlocked) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateUserBlocked.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateUserBlocked) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateUserBlocked.Merge(m, src)
}
func (m *UpdateUserBlocked) XXX_Size() int {
	return m.Size()
}
func (m *UpdateUserBlocked) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateUserBlocked.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateUserBlocked proto.InternalMessageInfo

func (m *UpdateUserBlocked) GetUid() int32 {
	if m != nil {
		return m.Uid
	}
	return 0
}

// Update about User Unblocked
type UpdateUserUnblocked struct {
	Uid int32 `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`
}

func (m *UpdateUserUnblocked) Reset()      { *m = UpdateUserUnblocked{} }
func (*UpdateUserUnblocked) ProtoMessage() {}
func (*UpdateUserUnblocked) Descriptor() ([]byte, []int) {
	return fileDescriptor_dde03d4df7a6e99a, []int{5}
}
func (m *UpdateUserUnblocked) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateUserUnblocked) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateUserUnblocked.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateUserUnblocked) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateUserUnblocked.Merge(m, src)
}
func (m *UpdateUserUnblocked) XXX_Size() int {
	return m.Size()
}
func (m *UpdateUserUnblocked) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateUserUnblocked.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateUserUnblocked proto.InternalMessageInfo

func (m *UpdateUserUnblocked) GetUid() int32 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func init() {
	proto.RegisterType((*RequestBlockUser)(nil), "dialog.RequestBlockUser")
	proto.RegisterType((*RequestUnblockUser)(nil), "dialog.RequestUnblockUser")
	proto.RegisterType((*RequestLoadBlockedUsers)(nil), "dialog.RequestLoadBlockedUsers")
	proto.RegisterType((*ResponseLoadBlockedUsers)(nil), "dialog.ResponseLoadBlockedUsers")
	proto.RegisterType((*UpdateUserBlocked)(nil), "dialog.UpdateUserBlocked")
	proto.RegisterType((*UpdateUserUnblocked)(nil), "dialog.UpdateUserUnblocked")
}

func init() { proto.RegisterFile("privacy.proto", fileDescriptor_dde03d4df7a6e99a) }

var fileDescriptor_dde03d4df7a6e99a = []byte{
	// 510 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x54, 0xcf, 0x8b, 0xd3, 0x50,
	0x10, 0xce, 0xdb, 0xd5, 0x5d, 0x3a, 0x65, 0x61, 0x37, 0x55, 0x36, 0x86, 0xfa, 0xda, 0x0d, 0xf8,
	0x83, 0x45, 0x12, 0xad, 0xb2, 0x60, 0x2f, 0x0b, 0xbd, 0x78, 0x11, 0x5c, 0xaa, 0xbd, 0x78, 0x91,
	0xd7, 0x64, 0x8c, 0x4f, 0xd3, 0xbc, 0x6c, 0x5e, 0x52, 0xf0, 0x26, 0x7a, 0xf3, 0x24, 0xf8, 0x4f,
	0xf8, 0xa7, 0x78, 0x2c, 0x78, 0x59, 0xf0, 0x62, 0x53, 0x0f, 0xe2, 0x69, 0xff, 0x04, 0xc9, 0x8f,
	0xda, 0x90, 0x68, 0xf1, 0xe2, 0xa9, 0xd3, 0x99, 0xef, 0x9b, 0x6f, 0x66, 0xf2, 0x25, 0xb0, 0x13,
	0x84, 0x7c, 0xca, 0xec, 0xd7, 0x66, 0x10, 0x8a, 0x48, 0xa8, 0x5b, 0x0e, 0x67, 0x9e, 0x70, 0xf5,
	0xb6, 0x2b, 0x84, 0xeb, 0xa1, 0xc5, 0x02, 0x6e, 0x31, 0xdf, 0x17, 0x11, 0x8b, 0xb8, 0xf0, 0x65,
	0x8e, 0xd2, 0xf7, 0x1c, 0x7c, 0xce, 0x7d, 0x5e, 0x4e, 0xb5, 0x26, 0x5c, 0xda, 0xe8, 0x79, 0xcc,
	0x47, 0x11, 0x2f, 0x93, 0xcd, 0x00, 0x31, 0x5c, 0xfe, 0xb9, 0x2c, 0x6d, 0xe6, 0xb1, 0x60, 0x6c,
	0x15, 0xbf, 0x79, 0xda, 0x78, 0x01, 0xbb, 0x43, 0x3c, 0x8d, 0x51, 0x46, 0x03, 0x4f, 0xd8, 0xaf,
	0x46, 0x12, 0x43, 0xf5, 0x08, 0x2e, 0xa4, 0x4c, 0x8d, 0x74, 0xc9, 0xcd, 0x66, 0xaf, 0x65, 0xe6,
	0x43, 0x99, 0x69, 0xed, 0x51, 0x1c, 0x9d, 0x20, 0x86, 0x83, 0x9d, 0xf7, 0x3f, 0x6f, 0x37, 0x60,
	0x7b, 0xca, 0x25, 0x1f, 0x7b, 0x38, 0xcc, 0xf0, 0xfd, 0x76, 0x72, 0x7c, 0x05, 0xf6, 0xf9, 0xc4,
	0x74, 0x3c, 0xd7, 0x74, 0xc3, 0xc0, 0x36, 0x1f, 0x84, 0x81, 0x5d, 0xb4, 0x37, 0x5e, 0x82, 0x5a,
	0x84, 0x23, 0x7f, 0xfc, 0x9f, 0xb5, 0x9e, 0xc0, 0x7e, 0x11, 0x3e, 0x14, 0xcc, 0xc9, 0x36, 0x43,
	0x27, 0xed, 0x29, 0xfb, 0xf7, 0xd7, 0x11, 0x93, 0x63, 0x1d, 0xb4, 0x7a, 0x4d, 0x06, 0xc2, 0x97,
	0x68, 0x4c, 0x40, 0x5b, 0xc6, 0xd5, 0xb6, 0x6a, 0x0f, 0x20, 0x96, 0x18, 0x3e, 0xcb, 0x4e, 0xae,
	0x91, 0xee, 0xe6, 0x5f, 0xb6, 0x19, 0x36, 0x52, 0x58, 0x1a, 0xc9, 0xfe, 0xd5, 0xf5, 0x72, 0xf7,
	0x60, 0x6f, 0x14, 0x38, 0x2c, 0xc2, 0x94, 0x5e, 0x88, 0xa9, 0x1d, 0xd8, 0x8c, 0xb9, 0x93, 0x9d,
	0xeb, 0x62, 0xf5, 0x32, 0x69, 0xc5, 0x38, 0x82, 0xd6, 0x8a, 0x55, 0x5c, 0xfa, 0x1f, 0x78, 0xbd,
	0xaf, 0x1b, 0xb0, 0x7d, 0x92, 0x9b, 0x51, 0x65, 0xd0, 0x58, 0xb9, 0x41, 0x5b, 0x6e, 0x51, 0xf5,
	0x89, 0xde, 0x5a, 0x55, 0xf2, 0x91, 0x1f, 0xe3, 0xa9, 0x71, 0xed, 0xed, 0x97, 0xef, 0x1f, 0x37,
	0x3a, 0x86, 0x6e, 0x4d, 0xef, 0x58, 0xe9, 0x52, 0x56, 0xd1, 0xd5, 0xfa, 0x4d, 0xec, 0x93, 0x43,
	0xd5, 0x85, 0x66, 0xd9, 0x06, 0x7a, 0x45, 0xa4, 0x54, 0xfb, 0xb3, 0xcc, 0x8d, 0x4c, 0xe6, 0xc0,
	0x68, 0xd7, 0x64, 0x4a, 0xd4, 0x54, 0xe8, 0x1d, 0x81, 0xdd, 0xda, 0xd3, 0xea, 0x54, 0xe4, 0xaa,
	0x00, 0xbd, 0x5b, 0xd5, 0xac, 0x22, 0x8c, 0x5b, 0xd9, 0x00, 0xd7, 0x8d, 0x83, 0xda, 0x00, 0x35,
	0xcb, 0x91, 0xc3, 0xc1, 0x70, 0x36, 0xa7, 0xca, 0xd9, 0x9c, 0x2a, 0xe7, 0x73, 0x4a, 0xde, 0x24,
	0x94, 0x7c, 0x4a, 0x28, 0xf9, 0x9c, 0x50, 0x32, 0x4b, 0x28, 0xf9, 0x96, 0x50, 0xf2, 0x23, 0xa1,
	0xca, 0x79, 0x42, 0xc9, 0x87, 0x05, 0x55, 0x66, 0x0b, 0xaa, 0x9c, 0x2d, 0xa8, 0x02, 0x97, 0xca,
	0xde, 0x90, 0x18, 0x4e, 0xb9, 0x8d, 0xf2, 0x69, 0xf1, 0x91, 0x18, 0x6f, 0x65, 0x6f, 0xf0, 0xdd,
	0x5f, 0x01, 0x00, 0x00, 0xff, 0xff, 0xc7, 0x3d, 0x2c, 0xd5, 0x44, 0x04, 0x00, 0x00,
}

func (this *RequestBlockUser) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RequestBlockUser)
	if !ok {
		that2, ok := that.(RequestBlockUser)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Peer.Equal(that1.Peer) {
		return false
	}
	return true
}
func (this *RequestUnblockUser) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RequestUnblockUser)
	if !ok {
		that2, ok := that.(RequestUnblockUser)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Peer.Equal(that1.Peer) {
		return false
	}
	return true
}
func (this *RequestLoadBlockedUsers) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RequestLoadBlockedUsers)
	if !ok {
		that2, ok := that.(RequestLoadBlockedUsers)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *ResponseLoadBlockedUsers) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ResponseLoadBlockedUsers)
	if !ok {
		that2, ok := that.(ResponseLoadBlockedUsers)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.UserPeers) != len(that1.UserPeers) {
		return false
	}
	for i := range this.UserPeers {
		if !this.UserPeers[i].Equal(that1.UserPeers[i]) {
			return false
		}
	}
	return true
}
func (this *UpdateUserBlocked) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpdateUserBlocked)
	if !ok {
		that2, ok := that.(UpdateUserBlocked)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Uid != that1.Uid {
		return false
	}
	return true
}
func (this *UpdateUserUnblocked) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpdateUserUnblocked)
	if !ok {
		that2, ok := that.(UpdateUserUnblocked)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Uid != that1.Uid {
		return false
	}
	return true
}
func (this *RequestBlockUser) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&dialog.RequestBlockUser{")
	if this.Peer != nil {
		s = append(s, "Peer: "+fmt.Sprintf("%#v", this.Peer)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RequestUnblockUser) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&dialog.RequestUnblockUser{")
	if this.Peer != nil {
		s = append(s, "Peer: "+fmt.Sprintf("%#v", this.Peer)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RequestLoadBlockedUsers) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&dialog.RequestLoadBlockedUsers{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ResponseLoadBlockedUsers) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&dialog.ResponseLoadBlockedUsers{")
	if this.UserPeers != nil {
		s = append(s, "UserPeers: "+fmt.Sprintf("%#v", this.UserPeers)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UpdateUserBlocked) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&dialog.UpdateUserBlocked{")
	s = append(s, "Uid: "+fmt.Sprintf("%#v", this.Uid)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UpdateUserUnblocked) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&dialog.UpdateUserUnblocked{")
	s = append(s, "Uid: "+fmt.Sprintf("%#v", this.Uid)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringPrivacy(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// PrivacyClient is the client API for Privacy service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type PrivacyClient interface {
	BlockUser(ctx context.Context, in *RequestBlockUser, opts ...grpc.CallOption) (*ResponseSeq, error)
	UnblockUser(ctx context.Context, in *RequestUnblockUser, opts ...grpc.CallOption) (*ResponseSeq, error)
	LoadBlockedUsers(ctx context.Context, in *RequestLoadBlockedUsers, opts ...grpc.CallOption) (*ResponseLoadBlockedUsers, error)
}

type privacyClient struct {
	cc *grpc.ClientConn
}

func NewPrivacyClient(cc *grpc.ClientConn) PrivacyClient {
	return &privacyClient{cc}
}

func (c *privacyClient) BlockUser(ctx context.Context, in *RequestBlockUser, opts ...grpc.CallOption) (*ResponseSeq, error) {
	out := new(ResponseSeq)
	err := c.cc.Invoke(ctx, "/dialog.Privacy/BlockUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *privacyClient) UnblockUser(ctx context.Context, in *RequestUnblockUser, opts ...grpc.CallOption) (*ResponseSeq, error) {
	out := new(ResponseSeq)
	err := c.cc.Invoke(ctx, "/dialog.Privacy/UnblockUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *privacyClient) LoadBlockedUsers(ctx context.Context, in *RequestLoadBlockedUsers, opts ...grpc.CallOption) (*ResponseLoadBlockedUsers, error) {
	out := new(ResponseLoadBlockedUsers)
	err := c.cc.Invoke(ctx, "/dialog.Privacy/LoadBlockedUsers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PrivacyServer is the server API for Privacy service.
type PrivacyServer interface {
	BlockUser(context.Context, *RequestBlockUser) (*ResponseSeq, error)
	UnblockUser(context.Context, *RequestUnblockUser) (*ResponseSeq, error)
	LoadBlockedUsers(context.Context, *RequestLoadBlockedUsers) (*ResponseLoadBlockedUsers, error)
}

// UnimplementedPrivacyServer can be embedded to have forward compatible implementations.
type UnimplementedPrivacyServer struct {
}

func (*UnimplementedPrivacyServer) BlockUser(ctx context.Context, req *RequestBlockUser) (*ResponseSeq, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BlockUser not implemented")
}
func (*UnimplementedPrivacyServer) UnblockUser(ctx context.Context, req *RequestUnblockUser) (*ResponseSeq, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnblockUser not implemented")
}
func (*UnimplementedPrivacyServer) LoadBlockedUsers(ctx context.Context, req *RequestLoadBlockedUsers) (*ResponseLoadBlockedUsers, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoadBlockedUsers not implemented")
}

func RegisterPrivacyServer(s *grpc.Server, srv PrivacyServer) {
	s.RegisterService(&_Privacy_serviceDesc, srv)
}

func _Privacy_BlockUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestBlockUser)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PrivacyServer).BlockUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dialog.Privacy/BlockUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PrivacyServer).BlockUser(ctx, req.(*RequestBlockUser))
	}
	return interceptor(ctx, in, info, handler)
}

func _Privacy_UnblockUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestUnblockUser)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PrivacyServer).UnblockUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dialog.Privacy/UnblockUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PrivacyServer).UnblockUser(ctx, req.(*RequestUnblockUser))
	}
	return interceptor(ctx, in, info, handler)
}

func _Privacy_LoadBlockedUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestLoadBlockedUsers)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PrivacyServer).LoadBlockedUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dialog.Privacy/LoadBlockedUsers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PrivacyServer).LoadBlockedUsers(ctx, req.(*RequestLoadBlockedUsers))
	}
	return interceptor(ctx, in, info, handler)
}

var _Privacy_serviceDesc = grpc.ServiceDesc{
	ServiceName: "dialog.Privacy",
	HandlerType: (*PrivacyServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "BlockUser",
			Handler:    _Privacy_BlockUser_Handler,
		},
		{
			MethodName: "UnblockUser",
			Handler:    _Privacy_UnblockUser_Handler,
		},
		{
			MethodName: "LoadBlockedUsers",
			Handler:    _Privacy_LoadBlockedUsers_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "privacy.proto",
}

func (m *RequestBlockUser) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestBlockUser) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RequestBlockUser) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Peer != nil {
		{
			size, err := m.Peer.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPrivacy(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RequestUnblockUser) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestUnblockUser) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RequestUnblockUser) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Peer != nil {
		{
			size, err := m.Peer.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPrivacy(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RequestLoadBlockedUsers) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestLoadBlockedUsers) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RequestLoadBlockedUsers) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *ResponseLoadBlockedUsers) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResponseLoadBlockedUsers) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ResponseLoadBlockedUsers) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.UserPeers) > 0 {
		for iNdEx := len(m.UserPeers) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.UserPeers[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPrivacy(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *UpdateUserBlocked) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateUserBlocked) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateUserBlocked) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Uid != 0 {
		i = encodeVarintPrivacy(dAtA, i, uint64(m.Uid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *UpdateUserUnblocked) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateUserUnblocked) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateUserUnblocked) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Uid != 0 {
		i = encodeVarintPrivacy(dAtA, i, uint64(m.Uid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintPrivacy(dAtA []byte, offset int, v uint64) int {
	offset -= sovPrivacy(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *RequestBlockUser) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Peer != nil {
		l = m.Peer.Size()
		n += 1 + l + sovPrivacy(uint64(l))
	}
	return n
}

func (m *RequestUnblockUser) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Peer != nil {
		l = m.Peer.Size()
		n += 1 + l + sovPrivacy(uint64(l))
	}
	return n
}

func (m *RequestLoadBlockedUsers) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *ResponseLoadBlockedUsers) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.UserPeers) > 0 {
		for _, e := range m.UserPeers {
			l = e.Size()
			n += 1 + l + sovPrivacy(uint64(l))
		}
	}
	return n
}

func (m *UpdateUserBlocked) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Uid != 0 {
		n += 1 + sovPrivacy(uint64(m.Uid))
	}
	return n
}

func (m *UpdateUserUnblocked) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Uid != 0 {
		n += 1 + sovPrivacy(uint64(m.Uid))
	}
	return n
}

func sovPrivacy(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozPrivacy(x uint64) (n int) {
	return sovPrivacy(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *RequestBlockUser) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RequestBlockUser{`,
		`Peer:` + strings.Replace(fmt.Sprintf("%v", this.Peer), "UserOutPeer", "UserOutPeer", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RequestUnblockUser) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RequestUnblockUser{`,
		`Peer:` + strings.Replace(fmt.Sprintf("%v", this.Peer), "UserOutPeer", "UserOutPeer", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RequestLoadBlockedUsers) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RequestLoadBlockedUsers{`,
		`}`,
	}, "")
	return s
}
func (this *ResponseLoadBlockedUsers) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForUserPeers := "[]*UserOutPeer{"
	for _, f := range this.UserPeers {
		repeatedStringForUserPeers += strings.Replace(fmt.Sprintf("%v", f), "UserOutPeer", "UserOutPeer", 1) + ","
	}
	repeatedStringForUserPeers += "}"
	s := strings.Join([]string{`&ResponseLoadBlockedUsers{`,
		`UserPeers:` + repeatedStringForUserPeers + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateUserBlocked) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateUserBlocked{`,
		`Uid:` + fmt.Sprintf("%v", this.Uid) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateUserUnblocked) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateUserUnblocked{`,
		`Uid:` + fmt.Sprintf("%v", this.Uid) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringPrivacy(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *RequestBlockUser) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPrivacy
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestBlockUser: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestBlockUser: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Peer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPrivacy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPrivacy
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPrivacy
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Peer == nil {
				m.Peer = &UserOutPeer{}
			}
			if err := m.Peer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPrivacy(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPrivacy
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPrivacy
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestUnblockUser) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPrivacy
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestUnblockUser: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestUnblockUser: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Peer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPrivacy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPrivacy
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPrivacy
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Peer == nil {
				m.Peer = &UserOutPeer{}
			}
			if err := m.Peer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPrivacy(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPrivacy
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPrivacy
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestLoadBlockedUsers) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPrivacy
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestLoadBlockedUsers: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestLoadBlockedUsers: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipPrivacy(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPrivacy
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPrivacy
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResponseLoadBlockedUsers) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPrivacy
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResponseLoadBlockedUsers: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResponseLoadBlockedUsers: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserPeers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPrivacy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPrivacy
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPrivacy
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserPeers = append(m.UserPeers, &UserOutPeer{})
			if err := m.UserPeers[len(m.UserPeers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPrivacy(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPrivacy
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPrivacy
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateUserBlocked) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPrivacy
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateUserBlocked: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateUserBlocked: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			m.Uid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPrivacy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uid |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPrivacy(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPrivacy
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPrivacy
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateUserUnblocked) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPrivacy
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateUserUnblocked: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateUserUnblocked: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			m.Uid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPrivacy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uid |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPrivacy(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPrivacy
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPrivacy
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPrivacy(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPrivacy
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPrivacy
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPrivacy
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthPrivacy
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupPrivacy
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthPrivacy
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthPrivacy        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPrivacy          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupPrivacy = fmt.Errorf("proto: unexpected end of group")
)
