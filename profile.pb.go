// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: profile.proto

package dialog

import (
	bytes "bytes"
	context "context"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	types "github.com/gogo/protobuf/types"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Changing account's name
type RequestEditName struct {
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (m *RequestEditName) Reset()      { *m = RequestEditName{} }
func (*RequestEditName) ProtoMessage() {}
func (*RequestEditName) Descriptor() ([]byte, []int) {
	return fileDescriptor_744bf7a47b381504, []int{0}
}
func (m *RequestEditName) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RequestEditName) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RequestEditName.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RequestEditName) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RequestEditName.Merge(m, src)
}
func (m *RequestEditName) XXX_Size() int {
	return m.Size()
}
func (m *RequestEditName) XXX_DiscardUnknown() {
	xxx_messageInfo_RequestEditName.DiscardUnknown(m)
}

var xxx_messageInfo_RequestEditName proto.InternalMessageInfo

func (m *RequestEditName) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

// Changing account's nickname
type RequestEditNickName struct {
	Nickname *types.StringValue `protobuf:"bytes,1,opt,name=nickname,proto3" json:"nickname,omitempty"`
}

func (m *RequestEditNickName) Reset()      { *m = RequestEditNickName{} }
func (*RequestEditNickName) ProtoMessage() {}
func (*RequestEditNickName) Descriptor() ([]byte, []int) {
	return fileDescriptor_744bf7a47b381504, []int{1}
}
func (m *RequestEditNickName) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RequestEditNickName) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RequestEditNickName.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RequestEditNickName) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RequestEditNickName.Merge(m, src)
}
func (m *RequestEditNickName) XXX_Size() int {
	return m.Size()
}
func (m *RequestEditNickName) XXX_DiscardUnknown() {
	xxx_messageInfo_RequestEditNickName.DiscardUnknown(m)
}

var xxx_messageInfo_RequestEditNickName proto.InternalMessageInfo

func (m *RequestEditNickName) GetNickname() *types.StringValue {
	if m != nil {
		return m.Nickname
	}
	return nil
}

// Checking availability of nickname
type RequestCheckNickName struct {
	Nickname string `protobuf:"bytes,1,opt,name=nickname,proto3" json:"nickname,omitempty"`
}

func (m *RequestCheckNickName) Reset()      { *m = RequestCheckNickName{} }
func (*RequestCheckNickName) ProtoMessage() {}
func (*RequestCheckNickName) Descriptor() ([]byte, []int) {
	return fileDescriptor_744bf7a47b381504, []int{2}
}
func (m *RequestCheckNickName) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RequestCheckNickName) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RequestCheckNickName.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RequestCheckNickName) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RequestCheckNickName.Merge(m, src)
}
func (m *RequestCheckNickName) XXX_Size() int {
	return m.Size()
}
func (m *RequestCheckNickName) XXX_DiscardUnknown() {
	xxx_messageInfo_RequestCheckNickName.DiscardUnknown(m)
}

var xxx_messageInfo_RequestCheckNickName proto.InternalMessageInfo

func (m *RequestCheckNickName) GetNickname() string {
	if m != nil {
		return m.Nickname
	}
	return ""
}

// Changing about information
type RequestEditAbout struct {
	About *types.StringValue `protobuf:"bytes,1,opt,name=about,proto3" json:"about,omitempty"`
}

func (m *RequestEditAbout) Reset()      { *m = RequestEditAbout{} }
func (*RequestEditAbout) ProtoMessage() {}
func (*RequestEditAbout) Descriptor() ([]byte, []int) {
	return fileDescriptor_744bf7a47b381504, []int{3}
}
func (m *RequestEditAbout) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RequestEditAbout) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RequestEditAbout.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RequestEditAbout) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RequestEditAbout.Merge(m, src)
}
func (m *RequestEditAbout) XXX_Size() int {
	return m.Size()
}
func (m *RequestEditAbout) XXX_DiscardUnknown() {
	xxx_messageInfo_RequestEditAbout.DiscardUnknown(m)
}

var xxx_messageInfo_RequestEditAbout proto.InternalMessageInfo

func (m *RequestEditAbout) GetAbout() *types.StringValue {
	if m != nil {
		return m.About
	}
	return nil
}

// Changing account's avatar
type RequestEditAvatar struct {
	FileLocation *FileLocation `protobuf:"bytes,1,opt,name=file_location,json=fileLocation,proto3" json:"file_location,omitempty"`
}

func (m *RequestEditAvatar) Reset()      { *m = RequestEditAvatar{} }
func (*RequestEditAvatar) ProtoMessage() {}
func (*RequestEditAvatar) Descriptor() ([]byte, []int) {
	return fileDescriptor_744bf7a47b381504, []int{4}
}
func (m *RequestEditAvatar) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RequestEditAvatar) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RequestEditAvatar.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RequestEditAvatar) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RequestEditAvatar.Merge(m, src)
}
func (m *RequestEditAvatar) XXX_Size() int {
	return m.Size()
}
func (m *RequestEditAvatar) XXX_DiscardUnknown() {
	xxx_messageInfo_RequestEditAvatar.DiscardUnknown(m)
}

var xxx_messageInfo_RequestEditAvatar proto.InternalMessageInfo

func (m *RequestEditAvatar) GetFileLocation() *FileLocation {
	if m != nil {
		return m.FileLocation
	}
	return nil
}

type ResponseEditAvatar struct {
	Avatar *Avatar `protobuf:"bytes,1,opt,name=avatar,proto3" json:"avatar,omitempty"`
	Seq    int32   `protobuf:"varint,2,opt,name=seq,proto3" json:"seq,omitempty"`
	State  []byte  `protobuf:"bytes,3,opt,name=state,proto3" json:"state,omitempty"`
}

func (m *ResponseEditAvatar) Reset()      { *m = ResponseEditAvatar{} }
func (*ResponseEditAvatar) ProtoMessage() {}
func (*ResponseEditAvatar) Descriptor() ([]byte, []int) {
	return fileDescriptor_744bf7a47b381504, []int{5}
}
func (m *ResponseEditAvatar) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ResponseEditAvatar) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ResponseEditAvatar.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ResponseEditAvatar) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResponseEditAvatar.Merge(m, src)
}
func (m *ResponseEditAvatar) XXX_Size() int {
	return m.Size()
}
func (m *ResponseEditAvatar) XXX_DiscardUnknown() {
	xxx_messageInfo_ResponseEditAvatar.DiscardUnknown(m)
}

var xxx_messageInfo_ResponseEditAvatar proto.InternalMessageInfo

func (m *ResponseEditAvatar) GetAvatar() *Avatar {
	if m != nil {
		return m.Avatar
	}
	return nil
}

func (m *ResponseEditAvatar) GetSeq() int32 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *ResponseEditAvatar) GetState() []byte {
	if m != nil {
		return m.State
	}
	return nil
}

// Removing account's avatar
type RequestRemoveAvatar struct {
}

func (m *RequestRemoveAvatar) Reset()      { *m = RequestRemoveAvatar{} }
func (*RequestRemoveAvatar) ProtoMessage() {}
func (*RequestRemoveAvatar) Descriptor() ([]byte, []int) {
	return fileDescriptor_744bf7a47b381504, []int{6}
}
func (m *RequestRemoveAvatar) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RequestRemoveAvatar) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RequestRemoveAvatar.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RequestRemoveAvatar) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RequestRemoveAvatar.Merge(m, src)
}
func (m *RequestRemoveAvatar) XXX_Size() int {
	return m.Size()
}
func (m *RequestRemoveAvatar) XXX_DiscardUnknown() {
	xxx_messageInfo_RequestRemoveAvatar.DiscardUnknown(m)
}

var xxx_messageInfo_RequestRemoveAvatar proto.InternalMessageInfo

// Updating user's time zone
type RequestEditMyTimeZone struct {
	Tz string `protobuf:"bytes,1,opt,name=tz,proto3" json:"tz,omitempty"`
}

func (m *RequestEditMyTimeZone) Reset()      { *m = RequestEditMyTimeZone{} }
func (*RequestEditMyTimeZone) ProtoMessage() {}
func (*RequestEditMyTimeZone) Descriptor() ([]byte, []int) {
	return fileDescriptor_744bf7a47b381504, []int{7}
}
func (m *RequestEditMyTimeZone) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RequestEditMyTimeZone) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RequestEditMyTimeZone.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RequestEditMyTimeZone) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RequestEditMyTimeZone.Merge(m, src)
}
func (m *RequestEditMyTimeZone) XXX_Size() int {
	return m.Size()
}
func (m *RequestEditMyTimeZone) XXX_DiscardUnknown() {
	xxx_messageInfo_RequestEditMyTimeZone.DiscardUnknown(m)
}

var xxx_messageInfo_RequestEditMyTimeZone proto.InternalMessageInfo

func (m *RequestEditMyTimeZone) GetTz() string {
	if m != nil {
		return m.Tz
	}
	return ""
}

// Changing preffered languages
type RequestEditMyPreferredLanguages struct {
	PreferredLanguages []string `protobuf:"bytes,1,rep,name=preferred_languages,json=preferredLanguages,proto3" json:"preferred_languages,omitempty"`
}

func (m *RequestEditMyPreferredLanguages) Reset()      { *m = RequestEditMyPreferredLanguages{} }
func (*RequestEditMyPreferredLanguages) ProtoMessage() {}
func (*RequestEditMyPreferredLanguages) Descriptor() ([]byte, []int) {
	return fileDescriptor_744bf7a47b381504, []int{8}
}
func (m *RequestEditMyPreferredLanguages) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RequestEditMyPreferredLanguages) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RequestEditMyPreferredLanguages.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RequestEditMyPreferredLanguages) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RequestEditMyPreferredLanguages.Merge(m, src)
}
func (m *RequestEditMyPreferredLanguages) XXX_Size() int {
	return m.Size()
}
func (m *RequestEditMyPreferredLanguages) XXX_DiscardUnknown() {
	xxx_messageInfo_RequestEditMyPreferredLanguages.DiscardUnknown(m)
}

var xxx_messageInfo_RequestEditMyPreferredLanguages proto.InternalMessageInfo

func (m *RequestEditMyPreferredLanguages) GetPreferredLanguages() []string {
	if m != nil {
		return m.PreferredLanguages
	}
	return nil
}

// Changing user's sex
type RequestEditSex struct {
	Sex Sex `protobuf:"varint,1,opt,name=sex,proto3,enum=dialog.Sex" json:"sex,omitempty"`
}

func (m *RequestEditSex) Reset()      { *m = RequestEditSex{} }
func (*RequestEditSex) ProtoMessage() {}
func (*RequestEditSex) Descriptor() ([]byte, []int) {
	return fileDescriptor_744bf7a47b381504, []int{9}
}
func (m *RequestEditSex) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RequestEditSex) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RequestEditSex.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RequestEditSex) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RequestEditSex.Merge(m, src)
}
func (m *RequestEditSex) XXX_Size() int {
	return m.Size()
}
func (m *RequestEditSex) XXX_DiscardUnknown() {
	xxx_messageInfo_RequestEditSex.DiscardUnknown(m)
}

var xxx_messageInfo_RequestEditSex proto.InternalMessageInfo

func (m *RequestEditSex) GetSex() Sex {
	if m != nil {
		return m.Sex
	}
	return SEX_UNKNOWN
}

// Chaning user custom profile based on scheme
type RequestEditCustomProfile struct {
	CustomProfile string `protobuf:"bytes,1,opt,name=custom_profile,json=customProfile,proto3" json:"custom_profile,omitempty"`
}

func (m *RequestEditCustomProfile) Reset()      { *m = RequestEditCustomProfile{} }
func (*RequestEditCustomProfile) ProtoMessage() {}
func (*RequestEditCustomProfile) Descriptor() ([]byte, []int) {
	return fileDescriptor_744bf7a47b381504, []int{10}
}
func (m *RequestEditCustomProfile) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RequestEditCustomProfile) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RequestEditCustomProfile.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RequestEditCustomProfile) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RequestEditCustomProfile.Merge(m, src)
}
func (m *RequestEditCustomProfile) XXX_Size() int {
	return m.Size()
}
func (m *RequestEditCustomProfile) XXX_DiscardUnknown() {
	xxx_messageInfo_RequestEditCustomProfile.DiscardUnknown(m)
}

var xxx_messageInfo_RequestEditCustomProfile proto.InternalMessageInfo

func (m *RequestEditCustomProfile) GetCustomProfile() string {
	if m != nil {
		return m.CustomProfile
	}
	return ""
}

// Changing user's status
type RequestChangeUserStatus struct {
	Status *UserStatus `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
}

func (m *RequestChangeUserStatus) Reset()      { *m = RequestChangeUserStatus{} }
func (*RequestChangeUserStatus) ProtoMessage() {}
func (*RequestChangeUserStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_744bf7a47b381504, []int{11}
}
func (m *RequestChangeUserStatus) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RequestChangeUserStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RequestChangeUserStatus.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RequestChangeUserStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RequestChangeUserStatus.Merge(m, src)
}
func (m *RequestChangeUserStatus) XXX_Size() int {
	return m.Size()
}
func (m *RequestChangeUserStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_RequestChangeUserStatus.DiscardUnknown(m)
}

var xxx_messageInfo_RequestChangeUserStatus proto.InternalMessageInfo

func (m *RequestChangeUserStatus) GetStatus() *UserStatus {
	if m != nil {
		return m.Status
	}
	return nil
}

func init() {
	proto.RegisterType((*RequestEditName)(nil), "dialog.RequestEditName")
	proto.RegisterType((*RequestEditNickName)(nil), "dialog.RequestEditNickName")
	proto.RegisterType((*RequestCheckNickName)(nil), "dialog.RequestCheckNickName")
	proto.RegisterType((*RequestEditAbout)(nil), "dialog.RequestEditAbout")
	proto.RegisterType((*RequestEditAvatar)(nil), "dialog.RequestEditAvatar")
	proto.RegisterType((*ResponseEditAvatar)(nil), "dialog.ResponseEditAvatar")
	proto.RegisterType((*RequestRemoveAvatar)(nil), "dialog.RequestRemoveAvatar")
	proto.RegisterType((*RequestEditMyTimeZone)(nil), "dialog.RequestEditMyTimeZone")
	proto.RegisterType((*RequestEditMyPreferredLanguages)(nil), "dialog.RequestEditMyPreferredLanguages")
	proto.RegisterType((*RequestEditSex)(nil), "dialog.RequestEditSex")
	proto.RegisterType((*RequestEditCustomProfile)(nil), "dialog.RequestEditCustomProfile")
	proto.RegisterType((*RequestChangeUserStatus)(nil), "dialog.RequestChangeUserStatus")
}

func init() { proto.RegisterFile("profile.proto", fileDescriptor_744bf7a47b381504) }

var fileDescriptor_744bf7a47b381504 = []byte{
	// 988 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x96, 0xcf, 0x73, 0xdb, 0x44,
	0x14, 0xc7, 0xad, 0x84, 0x38, 0xf1, 0x4b, 0x6c, 0x12, 0xc5, 0x69, 0x1c, 0x37, 0x51, 0x8c, 0x5a,
	0xd2, 0x24, 0x80, 0x5c, 0xd2, 0x5e, 0xc8, 0x81, 0x40, 0x3a, 0x50, 0x0e, 0x85, 0x29, 0x76, 0xcb,
	0xa1, 0x9d, 0xc1, 0xb3, 0x96, 0x9f, 0xdd, 0x25, 0xb2, 0x56, 0xd1, 0x0f, 0xe3, 0x16, 0x66, 0x60,
	0xe0, 0xd6, 0x03, 0xc3, 0x0c, 0xff, 0x04, 0x7f, 0x0a, 0xc7, 0xcc, 0xc0, 0xa1, 0x47, 0xa2, 0x70,
	0x60, 0x7a, 0xea, 0x9f, 0xc0, 0x68, 0x25, 0xd9, 0x92, 0xb5, 0xc5, 0xd0, 0x53, 0x36, 0xef, 0xbb,
	0xef, 0x7d, 0xde, 0xdb, 0x5d, 0x7d, 0xc7, 0x50, 0xb4, 0x6c, 0xd6, 0xa5, 0x06, 0x6a, 0x96, 0xcd,
	0x5c, 0x26, 0xe7, 0x3b, 0x94, 0x18, 0xac, 0x57, 0x55, 0x7a, 0x8c, 0xf5, 0x0c, 0xac, 0xf3, 0x68,
	0xdb, 0xeb, 0xd6, 0xbf, 0xb6, 0x89, 0x65, 0xa1, 0xed, 0x84, 0xfb, 0xaa, 0x9b, 0x91, 0x4e, 0x2c,
	0x5a, 0x27, 0xa6, 0xc9, 0x5c, 0xe2, 0x52, 0x66, 0xc6, 0xea, 0x4a, 0x07, 0xbb, 0xd4, 0xa4, 0xc9,
	0xd0, 0x6a, 0x9f, 0x3a, 0x3a, 0x1a, 0x06, 0x31, 0x91, 0x79, 0x71, 0x70, 0xad, 0x8f, 0x1d, 0x4a,
	0x5a, 0xc4, 0xec, 0xb4, 0x82, 0x1e, 0xe2, 0xf0, 0xa2, 0xe7, 0x8c, 0x49, 0x6b, 0x8e, 0x4e, 0x0c,
	0x62, 0xb5, 0xeb, 0xd1, 0xdf, 0x30, 0xac, 0x7e, 0x0e, 0xaf, 0x37, 0xf0, 0xd4, 0x43, 0xc7, 0xfd,
	0xa8, 0x43, 0xdd, 0xcf, 0x48, 0x1f, 0xe5, 0x1a, 0xbc, 0x66, 0x92, 0x3e, 0x56, 0xa4, 0x9a, 0xb4,
	0x5b, 0x38, 0x5e, 0x7a, 0xfa, 0xfc, 0xfa, 0x02, 0xe4, 0x1f, 0xd1, 0x4e, 0x07, 0xcd, 0x06, 0x57,
	0x0e, 0x37, 0xfd, 0xa3, 0x0d, 0x58, 0xa7, 0x7d, 0xad, 0x63, 0xf4, 0xb4, 0x9e, 0x6d, 0xe9, 0xda,
	0x6d, 0xdb, 0xd2, 0xa3, 0x3a, 0xea, 0xb7, 0xb0, 0x9a, 0x2c, 0x49, 0xf5, 0x13, 0x5e, 0xf6, 0x36,
	0x2c, 0x98, 0x54, 0x3f, 0x19, 0x95, 0x5e, 0x3c, 0xd8, 0xd4, 0xc2, 0xe9, 0xb5, 0xf8, 0x74, 0xb4,
	0xa6, 0x6b, 0x53, 0xb3, 0xf7, 0x05, 0x31, 0x3c, 0x3c, 0x2e, 0x3e, 0x7d, 0x7e, 0xbd, 0x00, 0xf3,
	0x03, 0xea, 0xd0, 0xb6, 0x81, 0x8d, 0x51, 0xf2, 0x14, 0x7a, 0x0b, 0xca, 0xd1, 0xf2, 0xd6, 0x23,
	0xd4, 0x4f, 0x46, 0xf8, 0xbd, 0x09, 0x7c, 0xe1, 0x55, 0x01, 0x36, 0x2c, 0x27, 0xc6, 0xfb, 0xb0,
	0xcd, 0x3c, 0x57, 0xfe, 0x00, 0xe6, 0x48, 0xb0, 0xf8, 0x4f, 0x83, 0xa5, 0x4f, 0x34, 0x4c, 0x9c,
	0xc2, 0xfc, 0x06, 0x56, 0x92, 0xcc, 0x01, 0x71, 0x89, 0x2d, 0x7f, 0x02, 0xc5, 0xe0, 0xb6, 0x5b,
	0x06, 0xd3, 0xf9, 0xab, 0x89, 0xe0, 0x65, 0x2d, 0x7c, 0x7b, 0xda, 0xc7, 0xd4, 0xc0, 0x3b, 0x91,
	0x16, 0x0f, 0xab, 0xb3, 0xbe, 0x45, 0x74, 0xb7, 0xb1, 0xd4, 0x4d, 0x88, 0x53, 0xe0, 0x3f, 0x4a,
	0x20, 0x37, 0xd0, 0xb1, 0x98, 0xe9, 0x60, 0x02, 0xbf, 0x03, 0x79, 0xc2, 0x57, 0x11, 0xb7, 0x14,
	0x73, 0x43, 0xbd, 0x11, 0xa9, 0xf2, 0x32, 0xcc, 0x3a, 0x78, 0x5a, 0x99, 0xa9, 0x49, 0xbb, 0x73,
	0x8d, 0x60, 0x29, 0x97, 0x61, 0xce, 0x71, 0x89, 0x8b, 0x95, 0xd9, 0x9a, 0xb4, 0xbb, 0xd4, 0x08,
	0xff, 0x39, 0xdc, 0xf2, 0x8f, 0xaa, 0x50, 0xc9, 0x36, 0x11, 0x82, 0xd5, 0x1b, 0xa3, 0x57, 0xd5,
	0xc0, 0x3e, 0x1b, 0x60, 0x48, 0x99, 0xd2, 0xfa, 0x3d, 0x58, 0x4b, 0x9c, 0xdb, 0xa7, 0x8f, 0xef,
	0xd1, 0x3e, 0x3e, 0x60, 0x26, 0xca, 0x5b, 0x30, 0xe3, 0x3e, 0x11, 0xbf, 0x83, 0x19, 0xf7, 0xc9,
	0x94, 0xaa, 0xdf, 0xc1, 0x76, 0xaa, 0xea, 0x5d, 0x1b, 0xbb, 0x68, 0xdb, 0xd8, 0xb9, 0x43, 0xcc,
	0x9e, 0x47, 0x7a, 0xe8, 0xc8, 0xef, 0xc3, 0xaa, 0x15, 0x47, 0x5b, 0x46, 0x1c, 0xae, 0x48, 0xb5,
	0xd9, 0x2c, 0x50, 0xb6, 0x32, 0xf9, 0x53, 0x1a, 0x78, 0x08, 0xa5, 0x44, 0x03, 0x4d, 0x1c, 0xca,
	0x6f, 0x05, 0x87, 0x3c, 0xe4, 0x03, 0x95, 0x0e, 0x16, 0xe3, 0x9b, 0x68, 0xe2, 0x70, 0xe2, 0xb5,
	0x05, 0xbb, 0xa6, 0x14, 0x37, 0xa1, 0x92, 0x28, 0x7e, 0xcb, 0x73, 0x5c, 0xd6, 0xbf, 0x1b, 0x9a,
	0x9b, 0x7c, 0x13, 0x4a, 0x3a, 0x0f, 0xb4, 0x22, 0xbb, 0x13, 0x1f, 0x61, 0x51, 0x4f, 0x66, 0x4d,
	0xfd, 0x9e, 0xd6, 0x47, 0x1f, 0x2c, 0x31, 0x7b, 0x78, 0xdf, 0x41, 0xbb, 0xe9, 0x12, 0xd7, 0x73,
	0xe4, 0xf7, 0x20, 0xef, 0xf0, 0x55, 0xf4, 0xc4, 0xe4, 0x78, 0xb0, 0xf1, 0x9e, 0x49, 0x74, 0x94,
	0xf0, 0xef, 0xcc, 0x83, 0x3f, 0x0a, 0x30, 0x1f, 0xcf, 0xf4, 0x25, 0x2c, 0x8c, 0xac, 0x6f, 0x3d,
	0x06, 0x4c, 0x78, 0x62, 0x75, 0x75, 0x2c, 0x84, 0xef, 0xb1, 0x89, 0xa7, 0xea, 0xd5, 0x1f, 0x7e,
	0xff, 0xeb, 0x97, 0x19, 0x45, 0xdd, 0xa8, 0x0f, 0xde, 0xad, 0x07, 0x8c, 0x7a, 0x54, 0xb3, 0x1e,
	0xe7, 0x1d, 0x4a, 0xfb, 0xf2, 0x57, 0xb0, 0x94, 0xf2, 0xc1, 0xcb, 0x22, 0x46, 0x24, 0x8a, 0x39,
	0xbb, 0x9c, 0xa3, 0xaa, 0x5b, 0x62, 0x4e, 0x94, 0x1b, 0xb0, 0x4c, 0x28, 0xa6, 0x5d, 0x6f, 0x73,
	0x02, 0x96, 0x52, 0xab, 0xe5, 0x49, 0xda, 0x31, 0x63, 0x86, 0xba, 0xc7, 0x71, 0x57, 0x54, 0x25,
	0x83, 0x4b, 0x65, 0x07, 0x3c, 0x02, 0x85, 0xb1, 0x09, 0x56, 0x04, 0x83, 0x71, 0x45, 0x3c, 0xd5,
	0x9b, 0x1c, 0xb3, 0xad, 0x56, 0x85, 0x53, 0xf1, 0xc4, 0x00, 0x71, 0x02, 0x90, 0x30, 0x9d, 0x0d,
	0x11, 0x83, 0x4b, 0xd5, 0xea, 0x24, 0x64, 0xac, 0xa9, 0x3b, 0x9c, 0x55, 0x53, 0x2f, 0x8b, 0x59,
	0xa1, 0x95, 0x84, 0x77, 0x95, 0x74, 0x97, 0xcc, 0x5d, 0x25, 0xc5, 0xff, 0x7b, 0x57, 0x29, 0xdb,
	0x92, 0xf6, 0x65, 0x0b, 0x4a, 0x93, 0xa6, 0x24, 0x18, 0x6e, 0x2c, 0x8b, 0x79, 0xfb, 0x9c, 0x77,
	0x55, 0xdd, 0x16, 0x4e, 0x36, 0xce, 0x0e, 0x88, 0x3f, 0x49, 0x50, 0x79, 0xa9, 0x63, 0x5d, 0x13,
	0xc2, 0xb3, 0x1b, 0xc5, 0x6d, 0xdc, 0xe4, 0x6d, 0x68, 0xea, 0xde, 0x4b, 0xda, 0xc8, 0xd6, 0x09,
	0x1a, 0x7a, 0x08, 0xf3, 0xb1, 0x81, 0x5d, 0x12, 0xe0, 0x9b, 0x38, 0x14, 0xd3, 0xae, 0x70, 0xda,
	0x96, 0x5a, 0x11, 0xd2, 0x9a, 0x38, 0x0c, 0x8a, 0x3f, 0x86, 0x95, 0xac, 0x81, 0xd5, 0x04, 0x98,
	0xd4, 0x0e, 0x31, 0xf0, 0x1d, 0x0e, 0xbc, 0xa6, 0xaa, 0x42, 0x60, 0xaa, 0x40, 0x80, 0x1e, 0xc0,
	0x72, 0xc6, 0xcb, 0xb6, 0x33, 0x5f, 0x62, 0x7a, 0x83, 0x18, 0xfc, 0x36, 0x07, 0xef, 0xa8, 0x6f,
	0x08, 0xbe, 0xc5, 0x74, 0xfe, 0xa1, 0xb4, 0x7f, 0x7c, 0xdf, 0x3f, 0xba, 0x04, 0xe5, 0xa4, 0xe9,
	0x39, 0x68, 0x0f, 0xa8, 0x8e, 0xce, 0xd9, 0xb9, 0x92, 0x7b, 0x76, 0xae, 0xe4, 0x5e, 0x9c, 0x2b,
	0xd2, 0xf7, 0xbe, 0x22, 0xfd, 0xea, 0x2b, 0xd2, 0x6f, 0xbe, 0x22, 0x9d, 0xf9, 0x8a, 0xf4, 0xa7,
	0xaf, 0x48, 0x7f, 0xfb, 0x4a, 0xee, 0x85, 0xaf, 0x48, 0x3f, 0x5f, 0x28, 0xb9, 0xb3, 0x0b, 0x25,
	0xf7, 0xec, 0x42, 0xc9, 0x3d, 0x88, 0x7e, 0xc4, 0xb6, 0xf3, 0xfc, 0x67, 0xcc, 0x8d, 0x7f, 0x02,
	0x00, 0x00, 0xff, 0xff, 0xad, 0xcf, 0xf8, 0x84, 0xe4, 0x0a, 0x00, 0x00,
}

func (this *RequestEditName) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RequestEditName)
	if !ok {
		that2, ok := that.(RequestEditName)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	return true
}
func (this *RequestEditNickName) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RequestEditNickName)
	if !ok {
		that2, ok := that.(RequestEditNickName)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Nickname.Equal(that1.Nickname) {
		return false
	}
	return true
}
func (this *RequestCheckNickName) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RequestCheckNickName)
	if !ok {
		that2, ok := that.(RequestCheckNickName)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Nickname != that1.Nickname {
		return false
	}
	return true
}
func (this *RequestEditAbout) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RequestEditAbout)
	if !ok {
		that2, ok := that.(RequestEditAbout)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.About.Equal(that1.About) {
		return false
	}
	return true
}
func (this *RequestEditAvatar) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RequestEditAvatar)
	if !ok {
		that2, ok := that.(RequestEditAvatar)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.FileLocation.Equal(that1.FileLocation) {
		return false
	}
	return true
}
func (this *ResponseEditAvatar) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ResponseEditAvatar)
	if !ok {
		that2, ok := that.(ResponseEditAvatar)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Avatar.Equal(that1.Avatar) {
		return false
	}
	if this.Seq != that1.Seq {
		return false
	}
	if !bytes.Equal(this.State, that1.State) {
		return false
	}
	return true
}
func (this *RequestRemoveAvatar) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RequestRemoveAvatar)
	if !ok {
		that2, ok := that.(RequestRemoveAvatar)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *RequestEditMyTimeZone) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RequestEditMyTimeZone)
	if !ok {
		that2, ok := that.(RequestEditMyTimeZone)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Tz != that1.Tz {
		return false
	}
	return true
}
func (this *RequestEditMyPreferredLanguages) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RequestEditMyPreferredLanguages)
	if !ok {
		that2, ok := that.(RequestEditMyPreferredLanguages)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.PreferredLanguages) != len(that1.PreferredLanguages) {
		return false
	}
	for i := range this.PreferredLanguages {
		if this.PreferredLanguages[i] != that1.PreferredLanguages[i] {
			return false
		}
	}
	return true
}
func (this *RequestEditSex) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RequestEditSex)
	if !ok {
		that2, ok := that.(RequestEditSex)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Sex != that1.Sex {
		return false
	}
	return true
}
func (this *RequestEditCustomProfile) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RequestEditCustomProfile)
	if !ok {
		that2, ok := that.(RequestEditCustomProfile)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.CustomProfile != that1.CustomProfile {
		return false
	}
	return true
}
func (this *RequestChangeUserStatus) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RequestChangeUserStatus)
	if !ok {
		that2, ok := that.(RequestChangeUserStatus)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Status.Equal(that1.Status) {
		return false
	}
	return true
}
func (this *RequestEditName) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&dialog.RequestEditName{")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RequestEditNickName) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&dialog.RequestEditNickName{")
	if this.Nickname != nil {
		s = append(s, "Nickname: "+fmt.Sprintf("%#v", this.Nickname)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RequestCheckNickName) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&dialog.RequestCheckNickName{")
	s = append(s, "Nickname: "+fmt.Sprintf("%#v", this.Nickname)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RequestEditAbout) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&dialog.RequestEditAbout{")
	if this.About != nil {
		s = append(s, "About: "+fmt.Sprintf("%#v", this.About)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RequestEditAvatar) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&dialog.RequestEditAvatar{")
	if this.FileLocation != nil {
		s = append(s, "FileLocation: "+fmt.Sprintf("%#v", this.FileLocation)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ResponseEditAvatar) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&dialog.ResponseEditAvatar{")
	if this.Avatar != nil {
		s = append(s, "Avatar: "+fmt.Sprintf("%#v", this.Avatar)+",\n")
	}
	s = append(s, "Seq: "+fmt.Sprintf("%#v", this.Seq)+",\n")
	s = append(s, "State: "+fmt.Sprintf("%#v", this.State)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RequestRemoveAvatar) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&dialog.RequestRemoveAvatar{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RequestEditMyTimeZone) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&dialog.RequestEditMyTimeZone{")
	s = append(s, "Tz: "+fmt.Sprintf("%#v", this.Tz)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RequestEditMyPreferredLanguages) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&dialog.RequestEditMyPreferredLanguages{")
	s = append(s, "PreferredLanguages: "+fmt.Sprintf("%#v", this.PreferredLanguages)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RequestEditSex) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&dialog.RequestEditSex{")
	s = append(s, "Sex: "+fmt.Sprintf("%#v", this.Sex)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RequestEditCustomProfile) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&dialog.RequestEditCustomProfile{")
	s = append(s, "CustomProfile: "+fmt.Sprintf("%#v", this.CustomProfile)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RequestChangeUserStatus) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&dialog.RequestChangeUserStatus{")
	if this.Status != nil {
		s = append(s, "Status: "+fmt.Sprintf("%#v", this.Status)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringProfile(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ProfileClient is the client API for Profile service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ProfileClient interface {
	EditName(ctx context.Context, in *RequestEditName, opts ...grpc.CallOption) (*ResponseSeq, error)
	EditNickName(ctx context.Context, in *RequestEditNickName, opts ...grpc.CallOption) (*ResponseSeq, error)
	CheckNickName(ctx context.Context, in *RequestCheckNickName, opts ...grpc.CallOption) (*ResponseBool, error)
	EditAbout(ctx context.Context, in *RequestEditAbout, opts ...grpc.CallOption) (*ResponseSeq, error)
	EditAvatar(ctx context.Context, in *RequestEditAvatar, opts ...grpc.CallOption) (*ResponseEditAvatar, error)
	RemoveAvatar(ctx context.Context, in *RequestRemoveAvatar, opts ...grpc.CallOption) (*ResponseSeq, error)
	EditMyTimeZone(ctx context.Context, in *RequestEditMyTimeZone, opts ...grpc.CallOption) (*ResponseSeq, error)
	EditMyPreferredLanguages(ctx context.Context, in *RequestEditMyPreferredLanguages, opts ...grpc.CallOption) (*ResponseSeq, error)
	EditSex(ctx context.Context, in *RequestEditSex, opts ...grpc.CallOption) (*ResponseSeq, error)
	EditCustomProfile(ctx context.Context, in *RequestEditCustomProfile, opts ...grpc.CallOption) (*ResponseSeq, error)
	ChangeUserStatus(ctx context.Context, in *RequestChangeUserStatus, opts ...grpc.CallOption) (*ResponseSeq, error)
}

type profileClient struct {
	cc *grpc.ClientConn
}

func NewProfileClient(cc *grpc.ClientConn) ProfileClient {
	return &profileClient{cc}
}

func (c *profileClient) EditName(ctx context.Context, in *RequestEditName, opts ...grpc.CallOption) (*ResponseSeq, error) {
	out := new(ResponseSeq)
	err := c.cc.Invoke(ctx, "/dialog.Profile/EditName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *profileClient) EditNickName(ctx context.Context, in *RequestEditNickName, opts ...grpc.CallOption) (*ResponseSeq, error) {
	out := new(ResponseSeq)
	err := c.cc.Invoke(ctx, "/dialog.Profile/EditNickName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *profileClient) CheckNickName(ctx context.Context, in *RequestCheckNickName, opts ...grpc.CallOption) (*ResponseBool, error) {
	out := new(ResponseBool)
	err := c.cc.Invoke(ctx, "/dialog.Profile/CheckNickName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *profileClient) EditAbout(ctx context.Context, in *RequestEditAbout, opts ...grpc.CallOption) (*ResponseSeq, error) {
	out := new(ResponseSeq)
	err := c.cc.Invoke(ctx, "/dialog.Profile/EditAbout", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *profileClient) EditAvatar(ctx context.Context, in *RequestEditAvatar, opts ...grpc.CallOption) (*ResponseEditAvatar, error) {
	out := new(ResponseEditAvatar)
	err := c.cc.Invoke(ctx, "/dialog.Profile/EditAvatar", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *profileClient) RemoveAvatar(ctx context.Context, in *RequestRemoveAvatar, opts ...grpc.CallOption) (*ResponseSeq, error) {
	out := new(ResponseSeq)
	err := c.cc.Invoke(ctx, "/dialog.Profile/RemoveAvatar", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *profileClient) EditMyTimeZone(ctx context.Context, in *RequestEditMyTimeZone, opts ...grpc.CallOption) (*ResponseSeq, error) {
	out := new(ResponseSeq)
	err := c.cc.Invoke(ctx, "/dialog.Profile/EditMyTimeZone", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *profileClient) EditMyPreferredLanguages(ctx context.Context, in *RequestEditMyPreferredLanguages, opts ...grpc.CallOption) (*ResponseSeq, error) {
	out := new(ResponseSeq)
	err := c.cc.Invoke(ctx, "/dialog.Profile/EditMyPreferredLanguages", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *profileClient) EditSex(ctx context.Context, in *RequestEditSex, opts ...grpc.CallOption) (*ResponseSeq, error) {
	out := new(ResponseSeq)
	err := c.cc.Invoke(ctx, "/dialog.Profile/EditSex", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *profileClient) EditCustomProfile(ctx context.Context, in *RequestEditCustomProfile, opts ...grpc.CallOption) (*ResponseSeq, error) {
	out := new(ResponseSeq)
	err := c.cc.Invoke(ctx, "/dialog.Profile/EditCustomProfile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *profileClient) ChangeUserStatus(ctx context.Context, in *RequestChangeUserStatus, opts ...grpc.CallOption) (*ResponseSeq, error) {
	out := new(ResponseSeq)
	err := c.cc.Invoke(ctx, "/dialog.Profile/ChangeUserStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProfileServer is the server API for Profile service.
type ProfileServer interface {
	EditName(context.Context, *RequestEditName) (*ResponseSeq, error)
	EditNickName(context.Context, *RequestEditNickName) (*ResponseSeq, error)
	CheckNickName(context.Context, *RequestCheckNickName) (*ResponseBool, error)
	EditAbout(context.Context, *RequestEditAbout) (*ResponseSeq, error)
	EditAvatar(context.Context, *RequestEditAvatar) (*ResponseEditAvatar, error)
	RemoveAvatar(context.Context, *RequestRemoveAvatar) (*ResponseSeq, error)
	EditMyTimeZone(context.Context, *RequestEditMyTimeZone) (*ResponseSeq, error)
	EditMyPreferredLanguages(context.Context, *RequestEditMyPreferredLanguages) (*ResponseSeq, error)
	EditSex(context.Context, *RequestEditSex) (*ResponseSeq, error)
	EditCustomProfile(context.Context, *RequestEditCustomProfile) (*ResponseSeq, error)
	ChangeUserStatus(context.Context, *RequestChangeUserStatus) (*ResponseSeq, error)
}

// UnimplementedProfileServer can be embedded to have forward compatible implementations.
type UnimplementedProfileServer struct {
}

func (*UnimplementedProfileServer) EditName(ctx context.Context, req *RequestEditName) (*ResponseSeq, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EditName not implemented")
}
func (*UnimplementedProfileServer) EditNickName(ctx context.Context, req *RequestEditNickName) (*ResponseSeq, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EditNickName not implemented")
}
func (*UnimplementedProfileServer) CheckNickName(ctx context.Context, req *RequestCheckNickName) (*ResponseBool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckNickName not implemented")
}
func (*UnimplementedProfileServer) EditAbout(ctx context.Context, req *RequestEditAbout) (*ResponseSeq, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EditAbout not implemented")
}
func (*UnimplementedProfileServer) EditAvatar(ctx context.Context, req *RequestEditAvatar) (*ResponseEditAvatar, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EditAvatar not implemented")
}
func (*UnimplementedProfileServer) RemoveAvatar(ctx context.Context, req *RequestRemoveAvatar) (*ResponseSeq, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveAvatar not implemented")
}
func (*UnimplementedProfileServer) EditMyTimeZone(ctx context.Context, req *RequestEditMyTimeZone) (*ResponseSeq, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EditMyTimeZone not implemented")
}
func (*UnimplementedProfileServer) EditMyPreferredLanguages(ctx context.Context, req *RequestEditMyPreferredLanguages) (*ResponseSeq, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EditMyPreferredLanguages not implemented")
}
func (*UnimplementedProfileServer) EditSex(ctx context.Context, req *RequestEditSex) (*ResponseSeq, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EditSex not implemented")
}
func (*UnimplementedProfileServer) EditCustomProfile(ctx context.Context, req *RequestEditCustomProfile) (*ResponseSeq, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EditCustomProfile not implemented")
}
func (*UnimplementedProfileServer) ChangeUserStatus(ctx context.Context, req *RequestChangeUserStatus) (*ResponseSeq, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeUserStatus not implemented")
}

func RegisterProfileServer(s *grpc.Server, srv ProfileServer) {
	s.RegisterService(&_Profile_serviceDesc, srv)
}

func _Profile_EditName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestEditName)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfileServer).EditName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dialog.Profile/EditName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfileServer).EditName(ctx, req.(*RequestEditName))
	}
	return interceptor(ctx, in, info, handler)
}

func _Profile_EditNickName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestEditNickName)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfileServer).EditNickName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dialog.Profile/EditNickName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfileServer).EditNickName(ctx, req.(*RequestEditNickName))
	}
	return interceptor(ctx, in, info, handler)
}

func _Profile_CheckNickName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestCheckNickName)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfileServer).CheckNickName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dialog.Profile/CheckNickName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfileServer).CheckNickName(ctx, req.(*RequestCheckNickName))
	}
	return interceptor(ctx, in, info, handler)
}

func _Profile_EditAbout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestEditAbout)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfileServer).EditAbout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dialog.Profile/EditAbout",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfileServer).EditAbout(ctx, req.(*RequestEditAbout))
	}
	return interceptor(ctx, in, info, handler)
}

func _Profile_EditAvatar_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestEditAvatar)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfileServer).EditAvatar(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dialog.Profile/EditAvatar",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfileServer).EditAvatar(ctx, req.(*RequestEditAvatar))
	}
	return interceptor(ctx, in, info, handler)
}

func _Profile_RemoveAvatar_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestRemoveAvatar)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfileServer).RemoveAvatar(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dialog.Profile/RemoveAvatar",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfileServer).RemoveAvatar(ctx, req.(*RequestRemoveAvatar))
	}
	return interceptor(ctx, in, info, handler)
}

func _Profile_EditMyTimeZone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestEditMyTimeZone)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfileServer).EditMyTimeZone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dialog.Profile/EditMyTimeZone",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfileServer).EditMyTimeZone(ctx, req.(*RequestEditMyTimeZone))
	}
	return interceptor(ctx, in, info, handler)
}

func _Profile_EditMyPreferredLanguages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestEditMyPreferredLanguages)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfileServer).EditMyPreferredLanguages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dialog.Profile/EditMyPreferredLanguages",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfileServer).EditMyPreferredLanguages(ctx, req.(*RequestEditMyPreferredLanguages))
	}
	return interceptor(ctx, in, info, handler)
}

func _Profile_EditSex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestEditSex)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfileServer).EditSex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dialog.Profile/EditSex",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfileServer).EditSex(ctx, req.(*RequestEditSex))
	}
	return interceptor(ctx, in, info, handler)
}

func _Profile_EditCustomProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestEditCustomProfile)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfileServer).EditCustomProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dialog.Profile/EditCustomProfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfileServer).EditCustomProfile(ctx, req.(*RequestEditCustomProfile))
	}
	return interceptor(ctx, in, info, handler)
}

func _Profile_ChangeUserStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestChangeUserStatus)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfileServer).ChangeUserStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dialog.Profile/ChangeUserStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfileServer).ChangeUserStatus(ctx, req.(*RequestChangeUserStatus))
	}
	return interceptor(ctx, in, info, handler)
}

var _Profile_serviceDesc = grpc.ServiceDesc{
	ServiceName: "dialog.Profile",
	HandlerType: (*ProfileServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "EditName",
			Handler:    _Profile_EditName_Handler,
		},
		{
			MethodName: "EditNickName",
			Handler:    _Profile_EditNickName_Handler,
		},
		{
			MethodName: "CheckNickName",
			Handler:    _Profile_CheckNickName_Handler,
		},
		{
			MethodName: "EditAbout",
			Handler:    _Profile_EditAbout_Handler,
		},
		{
			MethodName: "EditAvatar",
			Handler:    _Profile_EditAvatar_Handler,
		},
		{
			MethodName: "RemoveAvatar",
			Handler:    _Profile_RemoveAvatar_Handler,
		},
		{
			MethodName: "EditMyTimeZone",
			Handler:    _Profile_EditMyTimeZone_Handler,
		},
		{
			MethodName: "EditMyPreferredLanguages",
			Handler:    _Profile_EditMyPreferredLanguages_Handler,
		},
		{
			MethodName: "EditSex",
			Handler:    _Profile_EditSex_Handler,
		},
		{
			MethodName: "EditCustomProfile",
			Handler:    _Profile_EditCustomProfile_Handler,
		},
		{
			MethodName: "ChangeUserStatus",
			Handler:    _Profile_ChangeUserStatus_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "profile.proto",
}

func (m *RequestEditName) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestEditName) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RequestEditName) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintProfile(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RequestEditNickName) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestEditNickName) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RequestEditNickName) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Nickname != nil {
		{
			size, err := m.Nickname.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintProfile(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RequestCheckNickName) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestCheckNickName) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RequestCheckNickName) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Nickname) > 0 {
		i -= len(m.Nickname)
		copy(dAtA[i:], m.Nickname)
		i = encodeVarintProfile(dAtA, i, uint64(len(m.Nickname)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RequestEditAbout) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestEditAbout) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RequestEditAbout) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.About != nil {
		{
			size, err := m.About.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintProfile(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RequestEditAvatar) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestEditAvatar) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RequestEditAvatar) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.FileLocation != nil {
		{
			size, err := m.FileLocation.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintProfile(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ResponseEditAvatar) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResponseEditAvatar) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ResponseEditAvatar) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.State) > 0 {
		i -= len(m.State)
		copy(dAtA[i:], m.State)
		i = encodeVarintProfile(dAtA, i, uint64(len(m.State)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Seq != 0 {
		i = encodeVarintProfile(dAtA, i, uint64(m.Seq))
		i--
		dAtA[i] = 0x10
	}
	if m.Avatar != nil {
		{
			size, err := m.Avatar.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintProfile(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RequestRemoveAvatar) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestRemoveAvatar) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RequestRemoveAvatar) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *RequestEditMyTimeZone) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestEditMyTimeZone) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RequestEditMyTimeZone) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Tz) > 0 {
		i -= len(m.Tz)
		copy(dAtA[i:], m.Tz)
		i = encodeVarintProfile(dAtA, i, uint64(len(m.Tz)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RequestEditMyPreferredLanguages) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestEditMyPreferredLanguages) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RequestEditMyPreferredLanguages) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PreferredLanguages) > 0 {
		for iNdEx := len(m.PreferredLanguages) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.PreferredLanguages[iNdEx])
			copy(dAtA[i:], m.PreferredLanguages[iNdEx])
			i = encodeVarintProfile(dAtA, i, uint64(len(m.PreferredLanguages[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *RequestEditSex) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestEditSex) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RequestEditSex) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Sex != 0 {
		i = encodeVarintProfile(dAtA, i, uint64(m.Sex))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *RequestEditCustomProfile) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestEditCustomProfile) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RequestEditCustomProfile) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.CustomProfile) > 0 {
		i -= len(m.CustomProfile)
		copy(dAtA[i:], m.CustomProfile)
		i = encodeVarintProfile(dAtA, i, uint64(len(m.CustomProfile)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RequestChangeUserStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestChangeUserStatus) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RequestChangeUserStatus) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Status != nil {
		{
			size, err := m.Status.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintProfile(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintProfile(dAtA []byte, offset int, v uint64) int {
	offset -= sovProfile(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *RequestEditName) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovProfile(uint64(l))
	}
	return n
}

func (m *RequestEditNickName) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Nickname != nil {
		l = m.Nickname.Size()
		n += 1 + l + sovProfile(uint64(l))
	}
	return n
}

func (m *RequestCheckNickName) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Nickname)
	if l > 0 {
		n += 1 + l + sovProfile(uint64(l))
	}
	return n
}

func (m *RequestEditAbout) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.About != nil {
		l = m.About.Size()
		n += 1 + l + sovProfile(uint64(l))
	}
	return n
}

func (m *RequestEditAvatar) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.FileLocation != nil {
		l = m.FileLocation.Size()
		n += 1 + l + sovProfile(uint64(l))
	}
	return n
}

func (m *ResponseEditAvatar) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Avatar != nil {
		l = m.Avatar.Size()
		n += 1 + l + sovProfile(uint64(l))
	}
	if m.Seq != 0 {
		n += 1 + sovProfile(uint64(m.Seq))
	}
	l = len(m.State)
	if l > 0 {
		n += 1 + l + sovProfile(uint64(l))
	}
	return n
}

func (m *RequestRemoveAvatar) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *RequestEditMyTimeZone) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Tz)
	if l > 0 {
		n += 1 + l + sovProfile(uint64(l))
	}
	return n
}

func (m *RequestEditMyPreferredLanguages) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.PreferredLanguages) > 0 {
		for _, s := range m.PreferredLanguages {
			l = len(s)
			n += 1 + l + sovProfile(uint64(l))
		}
	}
	return n
}

func (m *RequestEditSex) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Sex != 0 {
		n += 1 + sovProfile(uint64(m.Sex))
	}
	return n
}

func (m *RequestEditCustomProfile) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.CustomProfile)
	if l > 0 {
		n += 1 + l + sovProfile(uint64(l))
	}
	return n
}

func (m *RequestChangeUserStatus) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Status != nil {
		l = m.Status.Size()
		n += 1 + l + sovProfile(uint64(l))
	}
	return n
}

func sovProfile(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozProfile(x uint64) (n int) {
	return sovProfile(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *RequestEditName) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RequestEditName{`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RequestEditNickName) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RequestEditNickName{`,
		`Nickname:` + strings.Replace(fmt.Sprintf("%v", this.Nickname), "StringValue", "types.StringValue", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RequestCheckNickName) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RequestCheckNickName{`,
		`Nickname:` + fmt.Sprintf("%v", this.Nickname) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RequestEditAbout) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RequestEditAbout{`,
		`About:` + strings.Replace(fmt.Sprintf("%v", this.About), "StringValue", "types.StringValue", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RequestEditAvatar) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RequestEditAvatar{`,
		`FileLocation:` + strings.Replace(fmt.Sprintf("%v", this.FileLocation), "FileLocation", "FileLocation", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ResponseEditAvatar) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ResponseEditAvatar{`,
		`Avatar:` + strings.Replace(fmt.Sprintf("%v", this.Avatar), "Avatar", "Avatar", 1) + `,`,
		`Seq:` + fmt.Sprintf("%v", this.Seq) + `,`,
		`State:` + fmt.Sprintf("%v", this.State) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RequestRemoveAvatar) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RequestRemoveAvatar{`,
		`}`,
	}, "")
	return s
}
func (this *RequestEditMyTimeZone) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RequestEditMyTimeZone{`,
		`Tz:` + fmt.Sprintf("%v", this.Tz) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RequestEditMyPreferredLanguages) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RequestEditMyPreferredLanguages{`,
		`PreferredLanguages:` + fmt.Sprintf("%v", this.PreferredLanguages) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RequestEditSex) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RequestEditSex{`,
		`Sex:` + fmt.Sprintf("%v", this.Sex) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RequestEditCustomProfile) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RequestEditCustomProfile{`,
		`CustomProfile:` + fmt.Sprintf("%v", this.CustomProfile) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RequestChangeUserStatus) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RequestChangeUserStatus{`,
		`Status:` + strings.Replace(fmt.Sprintf("%v", this.Status), "UserStatus", "UserStatus", 1) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringProfile(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *RequestEditName) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProfile
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestEditName: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestEditName: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProfile
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProfile
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProfile
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProfile(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProfile
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthProfile
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestEditNickName) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProfile
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestEditNickName: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestEditNickName: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nickname", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProfile
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProfile
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProfile
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Nickname == nil {
				m.Nickname = &types.StringValue{}
			}
			if err := m.Nickname.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProfile(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProfile
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthProfile
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestCheckNickName) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProfile
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestCheckNickName: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestCheckNickName: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nickname", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProfile
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProfile
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProfile
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Nickname = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProfile(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProfile
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthProfile
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestEditAbout) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProfile
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestEditAbout: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestEditAbout: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field About", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProfile
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProfile
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProfile
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.About == nil {
				m.About = &types.StringValue{}
			}
			if err := m.About.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProfile(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProfile
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthProfile
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestEditAvatar) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProfile
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestEditAvatar: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestEditAvatar: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FileLocation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProfile
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProfile
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProfile
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FileLocation == nil {
				m.FileLocation = &FileLocation{}
			}
			if err := m.FileLocation.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProfile(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProfile
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthProfile
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResponseEditAvatar) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProfile
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResponseEditAvatar: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResponseEditAvatar: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Avatar", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProfile
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProfile
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProfile
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Avatar == nil {
				m.Avatar = &Avatar{}
			}
			if err := m.Avatar.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Seq", wireType)
			}
			m.Seq = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProfile
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Seq |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProfile
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthProfile
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthProfile
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.State = append(m.State[:0], dAtA[iNdEx:postIndex]...)
			if m.State == nil {
				m.State = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProfile(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProfile
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthProfile
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestRemoveAvatar) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProfile
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestRemoveAvatar: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestRemoveAvatar: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipProfile(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProfile
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthProfile
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestEditMyTimeZone) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProfile
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestEditMyTimeZone: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestEditMyTimeZone: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tz", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProfile
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProfile
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProfile
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tz = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProfile(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProfile
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthProfile
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestEditMyPreferredLanguages) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProfile
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestEditMyPreferredLanguages: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestEditMyPreferredLanguages: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PreferredLanguages", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProfile
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProfile
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProfile
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PreferredLanguages = append(m.PreferredLanguages, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProfile(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProfile
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthProfile
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestEditSex) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProfile
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestEditSex: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestEditSex: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sex", wireType)
			}
			m.Sex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProfile
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Sex |= Sex(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipProfile(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProfile
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthProfile
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestEditCustomProfile) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProfile
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestEditCustomProfile: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestEditCustomProfile: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CustomProfile", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProfile
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProfile
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProfile
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CustomProfile = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProfile(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProfile
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthProfile
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestChangeUserStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProfile
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestChangeUserStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestChangeUserStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProfile
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProfile
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProfile
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Status == nil {
				m.Status = &UserStatus{}
			}
			if err := m.Status.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProfile(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProfile
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthProfile
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipProfile(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowProfile
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowProfile
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowProfile
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthProfile
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupProfile
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthProfile
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthProfile        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowProfile          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupProfile = fmt.Errorf("proto: unexpected end of group")
)
