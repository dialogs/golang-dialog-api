// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: push_content.proto

package dialog

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strconv "strconv"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type PushPeerType int32

const (
	PUSH_PEER_TYPE_PRIVATE PushPeerType = 0
	PUSH_PEER_TYPE_GROUP   PushPeerType = 1
	PUSH_PEER_TYPE_SIP     PushPeerType = 2
)

var PushPeerType_name = map[int32]string{
	0: "PUSH_PEER_TYPE_PRIVATE",
	1: "PUSH_PEER_TYPE_GROUP",
	2: "PUSH_PEER_TYPE_SIP",
}

var PushPeerType_value = map[string]int32{
	"PUSH_PEER_TYPE_PRIVATE": 0,
	"PUSH_PEER_TYPE_GROUP":   1,
	"PUSH_PEER_TYPE_SIP":     2,
}

func (PushPeerType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_58f9858109eb5f7d, []int{0}
}

type PushEventType int32

const (
	CREATE PushEventType = 0
	UPDATE PushEventType = 1
	DELETE PushEventType = 2
)

var PushEventType_name = map[int32]string{
	0: "CREATE",
	1: "UPDATE",
	2: "DELETE",
}

var PushEventType_value = map[string]int32{
	"CREATE": 0,
	"UPDATE": 1,
	"DELETE": 2,
}

func (PushEventType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_58f9858109eb5f7d, []int{1}
}

type LocalizableString struct {
	LocKey  string   `protobuf:"bytes,1,opt,name=loc_key,json=locKey,proto3" json:"loc_key,omitempty"`
	LocArgs []string `protobuf:"bytes,2,rep,name=loc_args,json=locArgs,proto3" json:"loc_args,omitempty"`
}

func (m *LocalizableString) Reset()      { *m = LocalizableString{} }
func (*LocalizableString) ProtoMessage() {}
func (*LocalizableString) Descriptor() ([]byte, []int) {
	return fileDescriptor_58f9858109eb5f7d, []int{0}
}
func (m *LocalizableString) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LocalizableString) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LocalizableString.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LocalizableString) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LocalizableString.Merge(m, src)
}
func (m *LocalizableString) XXX_Size() int {
	return m.Size()
}
func (m *LocalizableString) XXX_DiscardUnknown() {
	xxx_messageInfo_LocalizableString.DiscardUnknown(m)
}

var xxx_messageInfo_LocalizableString proto.InternalMessageInfo

func (m *LocalizableString) GetLocKey() string {
	if m != nil {
		return m.LocKey
	}
	return ""
}

func (m *LocalizableString) GetLocArgs() []string {
	if m != nil {
		return m.LocArgs
	}
	return nil
}

type PushPeer struct {
	Type  PushPeerType `protobuf:"varint,1,opt,name=type,proto3,enum=dialog.PushPeerType" json:"type,omitempty"`
	Id    int32        `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
	StrId string       `protobuf:"bytes,3,opt,name=str_id,json=strId,proto3" json:"str_id,omitempty"`
}

func (m *PushPeer) Reset()      { *m = PushPeer{} }
func (*PushPeer) ProtoMessage() {}
func (*PushPeer) Descriptor() ([]byte, []int) {
	return fileDescriptor_58f9858109eb5f7d, []int{1}
}
func (m *PushPeer) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PushPeer) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PushPeer.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PushPeer) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PushPeer.Merge(m, src)
}
func (m *PushPeer) XXX_Size() int {
	return m.Size()
}
func (m *PushPeer) XXX_DiscardUnknown() {
	xxx_messageInfo_PushPeer.DiscardUnknown(m)
}

var xxx_messageInfo_PushPeer proto.InternalMessageInfo

func (m *PushPeer) GetType() PushPeerType {
	if m != nil {
		return m.Type
	}
	return PUSH_PEER_TYPE_PRIVATE
}

func (m *PushPeer) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *PushPeer) GetStrId() string {
	if m != nil {
		return m.StrId
	}
	return ""
}

// The structure of encrypted push content
type EncryptedPushContent struct {
	// message
	//
	// Types that are valid to be assigned to AlertBody:
	//	*EncryptedPushContent_LocAlertBody
	//	*EncryptedPushContent_SimpleAlertBody
	AlertBody isEncryptedPushContent_AlertBody `protobuf_oneof:"alert_body"`
	// title
	//
	// Types that are valid to be assigned to AlertTitle:
	//	*EncryptedPushContent_LocAlertTitle
	//	*EncryptedPushContent_SimpleAlertTitle
	AlertTitle           isEncryptedPushContent_AlertTitle `protobuf_oneof:"alert_title"`
	Sound                string                            `protobuf:"bytes,5,opt,name=sound,proto3" json:"sound,omitempty"`
	UnreadMessageCounter int32                             `protobuf:"varint,6,opt,name=unread_message_counter,json=unreadMessageCounter,proto3" json:"unread_message_counter,omitempty"`
	Peer                 *PushPeer                         `protobuf:"bytes,7,opt,name=peer,proto3" json:"peer,omitempty"`
	MessageId            *UUIDValue                        `protobuf:"bytes,10,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"`
	IsRespondable        bool                              `protobuf:"varint,11,opt,name=isRespondable,proto3" json:"isRespondable,omitempty"`
	SenderUserId         int32                             `protobuf:"varint,12,opt,name=sender_user_id,json=senderUserId,proto3" json:"sender_user_id,omitempty"`
	Date                 int64                             `protobuf:"varint,13,opt,name=date,proto3" json:"date,omitempty"`
	EventType            PushEventType                     `protobuf:"varint,14,opt,name=event_type,json=eventType,proto3,enum=dialog.PushEventType" json:"event_type,omitempty"`
}

func (m *EncryptedPushContent) Reset()      { *m = EncryptedPushContent{} }
func (*EncryptedPushContent) ProtoMessage() {}
func (*EncryptedPushContent) Descriptor() ([]byte, []int) {
	return fileDescriptor_58f9858109eb5f7d, []int{2}
}
func (m *EncryptedPushContent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EncryptedPushContent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EncryptedPushContent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EncryptedPushContent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EncryptedPushContent.Merge(m, src)
}
func (m *EncryptedPushContent) XXX_Size() int {
	return m.Size()
}
func (m *EncryptedPushContent) XXX_DiscardUnknown() {
	xxx_messageInfo_EncryptedPushContent.DiscardUnknown(m)
}

var xxx_messageInfo_EncryptedPushContent proto.InternalMessageInfo

type isEncryptedPushContent_AlertBody interface {
	isEncryptedPushContent_AlertBody()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}
type isEncryptedPushContent_AlertTitle interface {
	isEncryptedPushContent_AlertTitle()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type EncryptedPushContent_LocAlertBody struct {
	LocAlertBody *LocalizableString `protobuf:"bytes,1,opt,name=loc_alert_body,json=locAlertBody,proto3,oneof" json:"loc_alert_body,omitempty"`
}
type EncryptedPushContent_SimpleAlertBody struct {
	SimpleAlertBody string `protobuf:"bytes,2,opt,name=simple_alert_body,json=simpleAlertBody,proto3,oneof" json:"simple_alert_body,omitempty"`
}
type EncryptedPushContent_LocAlertTitle struct {
	LocAlertTitle *LocalizableString `protobuf:"bytes,3,opt,name=loc_alert_title,json=locAlertTitle,proto3,oneof" json:"loc_alert_title,omitempty"`
}
type EncryptedPushContent_SimpleAlertTitle struct {
	SimpleAlertTitle string `protobuf:"bytes,4,opt,name=simple_alert_title,json=simpleAlertTitle,proto3,oneof" json:"simple_alert_title,omitempty"`
}

func (*EncryptedPushContent_LocAlertBody) isEncryptedPushContent_AlertBody()      {}
func (*EncryptedPushContent_SimpleAlertBody) isEncryptedPushContent_AlertBody()   {}
func (*EncryptedPushContent_LocAlertTitle) isEncryptedPushContent_AlertTitle()    {}
func (*EncryptedPushContent_SimpleAlertTitle) isEncryptedPushContent_AlertTitle() {}

func (m *EncryptedPushContent) GetAlertBody() isEncryptedPushContent_AlertBody {
	if m != nil {
		return m.AlertBody
	}
	return nil
}
func (m *EncryptedPushContent) GetAlertTitle() isEncryptedPushContent_AlertTitle {
	if m != nil {
		return m.AlertTitle
	}
	return nil
}

func (m *EncryptedPushContent) GetLocAlertBody() *LocalizableString {
	if x, ok := m.GetAlertBody().(*EncryptedPushContent_LocAlertBody); ok {
		return x.LocAlertBody
	}
	return nil
}

func (m *EncryptedPushContent) GetSimpleAlertBody() string {
	if x, ok := m.GetAlertBody().(*EncryptedPushContent_SimpleAlertBody); ok {
		return x.SimpleAlertBody
	}
	return ""
}

func (m *EncryptedPushContent) GetLocAlertTitle() *LocalizableString {
	if x, ok := m.GetAlertTitle().(*EncryptedPushContent_LocAlertTitle); ok {
		return x.LocAlertTitle
	}
	return nil
}

func (m *EncryptedPushContent) GetSimpleAlertTitle() string {
	if x, ok := m.GetAlertTitle().(*EncryptedPushContent_SimpleAlertTitle); ok {
		return x.SimpleAlertTitle
	}
	return ""
}

func (m *EncryptedPushContent) GetSound() string {
	if m != nil {
		return m.Sound
	}
	return ""
}

func (m *EncryptedPushContent) GetUnreadMessageCounter() int32 {
	if m != nil {
		return m.UnreadMessageCounter
	}
	return 0
}

func (m *EncryptedPushContent) GetPeer() *PushPeer {
	if m != nil {
		return m.Peer
	}
	return nil
}

func (m *EncryptedPushContent) GetMessageId() *UUIDValue {
	if m != nil {
		return m.MessageId
	}
	return nil
}

func (m *EncryptedPushContent) GetIsRespondable() bool {
	if m != nil {
		return m.IsRespondable
	}
	return false
}

func (m *EncryptedPushContent) GetSenderUserId() int32 {
	if m != nil {
		return m.SenderUserId
	}
	return 0
}

func (m *EncryptedPushContent) GetDate() int64 {
	if m != nil {
		return m.Date
	}
	return 0
}

func (m *EncryptedPushContent) GetEventType() PushEventType {
	if m != nil {
		return m.EventType
	}
	return CREATE
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*EncryptedPushContent) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*EncryptedPushContent_LocAlertBody)(nil),
		(*EncryptedPushContent_SimpleAlertBody)(nil),
		(*EncryptedPushContent_LocAlertTitle)(nil),
		(*EncryptedPushContent_SimpleAlertTitle)(nil),
	}
}

func init() {
	proto.RegisterEnum("dialog.PushPeerType", PushPeerType_name, PushPeerType_value)
	proto.RegisterEnum("dialog.PushEventType", PushEventType_name, PushEventType_value)
	proto.RegisterType((*LocalizableString)(nil), "dialog.LocalizableString")
	proto.RegisterType((*PushPeer)(nil), "dialog.PushPeer")
	proto.RegisterType((*EncryptedPushContent)(nil), "dialog.EncryptedPushContent")
}

func init() { proto.RegisterFile("push_content.proto", fileDescriptor_58f9858109eb5f7d) }

var fileDescriptor_58f9858109eb5f7d = []byte{
	// 665 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x53, 0x4d, 0x4f, 0xe3, 0x48,
	0x10, 0x75, 0x87, 0x24, 0xc4, 0x45, 0x12, 0x9c, 0x56, 0x60, 0x0d, 0x07, 0x2b, 0x42, 0x1c, 0x22,
	0xb4, 0x8a, 0x56, 0xc0, 0x71, 0xa5, 0x15, 0x09, 0x16, 0x84, 0x65, 0xb5, 0x56, 0x93, 0x20, 0xed,
	0x87, 0x64, 0x39, 0xe9, 0xda, 0xd0, 0x5a, 0x63, 0x5b, 0xee, 0x0e, 0x52, 0xe6, 0x34, 0xe7, 0x39,
	0xcd, 0xcf, 0x98, 0x9f, 0x32, 0x47, 0x8e, 0x1c, 0x87, 0x70, 0x19, 0xcd, 0x61, 0xc4, 0x4f, 0x18,
	0xb9, 0x4d, 0x44, 0x60, 0xa4, 0xb9, 0x95, 0xfd, 0x5e, 0xd5, 0x7b, 0xf5, 0xd1, 0x40, 0x93, 0xa9,
	0xbc, 0xf2, 0xc7, 0x71, 0xa4, 0x30, 0x52, 0x9d, 0x24, 0x8d, 0x55, 0x4c, 0xcb, 0x5c, 0x04, 0x61,
	0x3c, 0xd9, 0x6e, 0x70, 0xfc, 0x4f, 0x44, 0x42, 0x89, 0x38, 0x92, 0x39, 0xb4, 0x73, 0x02, 0x8d,
	0xf3, 0x78, 0x1c, 0x84, 0xe2, 0x4d, 0x30, 0x0a, 0xf1, 0x42, 0xa5, 0x22, 0x9a, 0xd0, 0x9f, 0x60,
	0x35, 0x8c, 0xc7, 0xfe, 0xff, 0x38, 0xb3, 0x49, 0x8b, 0xb4, 0x4d, 0x56, 0x0e, 0xe3, 0xf1, 0xef,
	0x38, 0xa3, 0x5b, 0x50, 0xc9, 0x80, 0x20, 0x9d, 0x48, 0xbb, 0xd0, 0x5a, 0x69, 0x9b, 0x2c, 0x23,
	0x1e, 0xa5, 0x13, 0xb9, 0xf3, 0x0f, 0x54, 0xbc, 0xa9, 0xbc, 0xf2, 0x10, 0x53, 0xda, 0x86, 0xa2,
	0x9a, 0x25, 0xa8, 0x93, 0xeb, 0xfb, 0xcd, 0x4e, 0x2e, 0xdf, 0x59, 0xe0, 0x83, 0x59, 0x82, 0x4c,
	0x33, 0x68, 0x1d, 0x0a, 0x82, 0xdb, 0x85, 0x16, 0x69, 0x97, 0x58, 0x41, 0x70, 0xba, 0x01, 0x65,
	0xa9, 0x52, 0x5f, 0x70, 0x7b, 0x45, 0x0b, 0x97, 0xa4, 0x4a, 0xfb, 0x7c, 0xe7, 0x6b, 0x11, 0x9a,
	0x6e, 0x34, 0x4e, 0x67, 0x89, 0x42, 0x9e, 0x95, 0xe9, 0xe5, 0xfd, 0xd1, 0x23, 0xa8, 0x6b, 0x43,
	0x21, 0xa6, 0xca, 0x1f, 0xc5, 0x3c, 0x37, 0xbc, 0xb6, 0xbf, 0xb5, 0xd0, 0xfc, 0xae, 0xb9, 0x53,
	0x83, 0x55, 0x33, 0xcf, 0x59, 0x46, 0x37, 0xe6, 0x33, 0xfa, 0x33, 0x34, 0xa4, 0xb8, 0x4e, 0x42,
	0x5c, 0xae, 0x92, 0x39, 0x32, 0x4f, 0x0d, 0xb6, 0x9e, 0x43, 0xcf, 0xec, 0x1e, 0xac, 0x3f, 0x0b,
	0x2a, 0xa1, 0x42, 0xd4, 0x4e, 0x7f, 0xa8, 0x48, 0x58, 0x6d, 0xa1, 0x38, 0xc8, 0x32, 0x68, 0x07,
	0xe8, 0x0b, 0xc9, 0xbc, 0x4e, 0x51, 0x6b, 0x12, 0x66, 0x2d, 0x69, 0xe6, 0xfc, 0x26, 0x94, 0x64,
	0x3c, 0x8d, 0xb8, 0x5d, 0x7a, 0x1a, 0x4a, 0xf6, 0x41, 0x0f, 0x61, 0x73, 0x1a, 0xa5, 0x18, 0x70,
	0xff, 0x1a, 0xa5, 0x0c, 0x26, 0xe8, 0x8f, 0xe3, 0x69, 0xa4, 0x30, 0xb5, 0xcb, 0x7a, 0x9e, 0xcd,
	0x1c, 0xfd, 0x23, 0x07, 0x7b, 0x39, 0x46, 0x77, 0xa1, 0x98, 0x20, 0xa6, 0xf6, 0xaa, 0x76, 0x6d,
	0xbd, 0xde, 0x0d, 0xd3, 0x28, 0xfd, 0x0d, 0x60, 0x51, 0x54, 0x70, 0x1b, 0x34, 0xb7, 0xb1, 0xe0,
	0x0e, 0x87, 0xfd, 0xe3, 0xcb, 0x20, 0x9c, 0x62, 0xb7, 0xf6, 0xee, 0xcb, 0x2f, 0x26, 0xac, 0xde,
	0x08, 0x29, 0x46, 0x21, 0x32, 0xf3, 0x29, 0xa7, 0xcf, 0xe9, 0x2e, 0xd4, 0x84, 0x64, 0x28, 0x93,
	0x38, 0xe2, 0xd9, 0x28, 0xec, 0xb5, 0x16, 0x69, 0x57, 0xd8, 0xcb, 0x9f, 0x74, 0x17, 0xea, 0x12,
	0x23, 0x8e, 0xa9, 0x3f, 0x95, 0xa8, 0xd7, 0x5e, 0xd5, 0xd6, 0xab, 0xf9, 0xdf, 0xa1, 0xc4, 0xb4,
	0xcf, 0x29, 0x85, 0x22, 0x0f, 0x14, 0xda, 0xb5, 0x16, 0x69, 0xaf, 0x30, 0x1d, 0xd3, 0x43, 0x00,
	0xbc, 0xc1, 0x48, 0xf9, 0xfa, 0xd0, 0xea, 0xfa, 0xd0, 0x36, 0x96, 0x9b, 0x71, 0x33, 0x54, 0x5f,
	0x9a, 0x89, 0x8b, 0xb0, 0x5b, 0x05, 0x78, 0x5e, 0x72, 0xb7, 0x06, 0x6b, 0x4b, 0xf3, 0x3f, 0x2b,
	0x56, 0x2a, 0x96, 0x79, 0x56, 0xac, 0x98, 0x16, 0xec, 0xfd, 0x0b, 0xd5, 0xe5, 0x6b, 0xa5, 0xdb,
	0xb0, 0xe9, 0x0d, 0x2f, 0x4e, 0x7d, 0xcf, 0x75, 0x99, 0x3f, 0xf8, 0xcb, 0x73, 0x7d, 0x8f, 0xf5,
	0x2f, 0x8f, 0x06, 0xae, 0x65, 0x50, 0x1b, 0x9a, 0xaf, 0xb0, 0x13, 0xf6, 0xe7, 0xd0, 0xb3, 0x08,
	0xdd, 0x04, 0xfa, 0x0a, 0xb9, 0xe8, 0x7b, 0x56, 0x61, 0xef, 0x00, 0x6a, 0x2f, 0x2c, 0x52, 0x80,
	0x72, 0x8f, 0xb9, 0x79, 0x39, 0x80, 0xf2, 0xd0, 0x3b, 0xce, 0x62, 0x92, 0xc5, 0xc7, 0xee, 0xb9,
	0x3b, 0x70, 0xad, 0x42, 0xf7, 0xd7, 0xdb, 0x7b, 0xc7, 0xb8, 0xbb, 0x77, 0x8c, 0xc7, 0x7b, 0x87,
	0xbc, 0x9d, 0x3b, 0xe4, 0xc3, 0xdc, 0x21, 0x1f, 0xe7, 0x0e, 0xb9, 0x9d, 0x3b, 0xe4, 0xd3, 0xdc,
	0x21, 0x9f, 0xe7, 0x8e, 0xf1, 0x38, 0x77, 0xc8, 0xfb, 0x07, 0xc7, 0xb8, 0x7d, 0x70, 0x8c, 0xbb,
	0x07, 0xc7, 0xf8, 0xfb, 0xe9, 0xe9, 0x8f, 0xca, 0xfa, 0xb9, 0x1f, 0x7c, 0x0b, 0x00, 0x00, 0xff,
	0xff, 0x71, 0x23, 0xae, 0x57, 0x1f, 0x04, 0x00, 0x00,
}

func (x PushPeerType) String() string {
	s, ok := PushPeerType_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x PushEventType) String() string {
	s, ok := PushEventType_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *LocalizableString) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*LocalizableString)
	if !ok {
		that2, ok := that.(LocalizableString)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.LocKey != that1.LocKey {
		return false
	}
	if len(this.LocArgs) != len(that1.LocArgs) {
		return false
	}
	for i := range this.LocArgs {
		if this.LocArgs[i] != that1.LocArgs[i] {
			return false
		}
	}
	return true
}
func (this *PushPeer) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PushPeer)
	if !ok {
		that2, ok := that.(PushPeer)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Type != that1.Type {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if this.StrId != that1.StrId {
		return false
	}
	return true
}
func (this *EncryptedPushContent) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*EncryptedPushContent)
	if !ok {
		that2, ok := that.(EncryptedPushContent)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.AlertBody == nil {
		if this.AlertBody != nil {
			return false
		}
	} else if this.AlertBody == nil {
		return false
	} else if !this.AlertBody.Equal(that1.AlertBody) {
		return false
	}
	if that1.AlertTitle == nil {
		if this.AlertTitle != nil {
			return false
		}
	} else if this.AlertTitle == nil {
		return false
	} else if !this.AlertTitle.Equal(that1.AlertTitle) {
		return false
	}
	if this.Sound != that1.Sound {
		return false
	}
	if this.UnreadMessageCounter != that1.UnreadMessageCounter {
		return false
	}
	if !this.Peer.Equal(that1.Peer) {
		return false
	}
	if !this.MessageId.Equal(that1.MessageId) {
		return false
	}
	if this.IsRespondable != that1.IsRespondable {
		return false
	}
	if this.SenderUserId != that1.SenderUserId {
		return false
	}
	if this.Date != that1.Date {
		return false
	}
	if this.EventType != that1.EventType {
		return false
	}
	return true
}
func (this *EncryptedPushContent_LocAlertBody) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*EncryptedPushContent_LocAlertBody)
	if !ok {
		that2, ok := that.(EncryptedPushContent_LocAlertBody)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.LocAlertBody.Equal(that1.LocAlertBody) {
		return false
	}
	return true
}
func (this *EncryptedPushContent_SimpleAlertBody) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*EncryptedPushContent_SimpleAlertBody)
	if !ok {
		that2, ok := that.(EncryptedPushContent_SimpleAlertBody)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.SimpleAlertBody != that1.SimpleAlertBody {
		return false
	}
	return true
}
func (this *EncryptedPushContent_LocAlertTitle) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*EncryptedPushContent_LocAlertTitle)
	if !ok {
		that2, ok := that.(EncryptedPushContent_LocAlertTitle)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.LocAlertTitle.Equal(that1.LocAlertTitle) {
		return false
	}
	return true
}
func (this *EncryptedPushContent_SimpleAlertTitle) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*EncryptedPushContent_SimpleAlertTitle)
	if !ok {
		that2, ok := that.(EncryptedPushContent_SimpleAlertTitle)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.SimpleAlertTitle != that1.SimpleAlertTitle {
		return false
	}
	return true
}
func (this *LocalizableString) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&dialog.LocalizableString{")
	s = append(s, "LocKey: "+fmt.Sprintf("%#v", this.LocKey)+",\n")
	s = append(s, "LocArgs: "+fmt.Sprintf("%#v", this.LocArgs)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *PushPeer) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&dialog.PushPeer{")
	s = append(s, "Type: "+fmt.Sprintf("%#v", this.Type)+",\n")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	s = append(s, "StrId: "+fmt.Sprintf("%#v", this.StrId)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *EncryptedPushContent) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 16)
	s = append(s, "&dialog.EncryptedPushContent{")
	if this.AlertBody != nil {
		s = append(s, "AlertBody: "+fmt.Sprintf("%#v", this.AlertBody)+",\n")
	}
	if this.AlertTitle != nil {
		s = append(s, "AlertTitle: "+fmt.Sprintf("%#v", this.AlertTitle)+",\n")
	}
	s = append(s, "Sound: "+fmt.Sprintf("%#v", this.Sound)+",\n")
	s = append(s, "UnreadMessageCounter: "+fmt.Sprintf("%#v", this.UnreadMessageCounter)+",\n")
	if this.Peer != nil {
		s = append(s, "Peer: "+fmt.Sprintf("%#v", this.Peer)+",\n")
	}
	if this.MessageId != nil {
		s = append(s, "MessageId: "+fmt.Sprintf("%#v", this.MessageId)+",\n")
	}
	s = append(s, "IsRespondable: "+fmt.Sprintf("%#v", this.IsRespondable)+",\n")
	s = append(s, "SenderUserId: "+fmt.Sprintf("%#v", this.SenderUserId)+",\n")
	s = append(s, "Date: "+fmt.Sprintf("%#v", this.Date)+",\n")
	s = append(s, "EventType: "+fmt.Sprintf("%#v", this.EventType)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *EncryptedPushContent_LocAlertBody) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dialog.EncryptedPushContent_LocAlertBody{` +
		`LocAlertBody:` + fmt.Sprintf("%#v", this.LocAlertBody) + `}`}, ", ")
	return s
}
func (this *EncryptedPushContent_SimpleAlertBody) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dialog.EncryptedPushContent_SimpleAlertBody{` +
		`SimpleAlertBody:` + fmt.Sprintf("%#v", this.SimpleAlertBody) + `}`}, ", ")
	return s
}
func (this *EncryptedPushContent_LocAlertTitle) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dialog.EncryptedPushContent_LocAlertTitle{` +
		`LocAlertTitle:` + fmt.Sprintf("%#v", this.LocAlertTitle) + `}`}, ", ")
	return s
}
func (this *EncryptedPushContent_SimpleAlertTitle) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dialog.EncryptedPushContent_SimpleAlertTitle{` +
		`SimpleAlertTitle:` + fmt.Sprintf("%#v", this.SimpleAlertTitle) + `}`}, ", ")
	return s
}
func valueToGoStringPushContent(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *LocalizableString) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LocalizableString) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LocalizableString) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.LocArgs) > 0 {
		for iNdEx := len(m.LocArgs) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.LocArgs[iNdEx])
			copy(dAtA[i:], m.LocArgs[iNdEx])
			i = encodeVarintPushContent(dAtA, i, uint64(len(m.LocArgs[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.LocKey) > 0 {
		i -= len(m.LocKey)
		copy(dAtA[i:], m.LocKey)
		i = encodeVarintPushContent(dAtA, i, uint64(len(m.LocKey)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PushPeer) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PushPeer) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PushPeer) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.StrId) > 0 {
		i -= len(m.StrId)
		copy(dAtA[i:], m.StrId)
		i = encodeVarintPushContent(dAtA, i, uint64(len(m.StrId)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Id != 0 {
		i = encodeVarintPushContent(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x10
	}
	if m.Type != 0 {
		i = encodeVarintPushContent(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *EncryptedPushContent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EncryptedPushContent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EncryptedPushContent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.EventType != 0 {
		i = encodeVarintPushContent(dAtA, i, uint64(m.EventType))
		i--
		dAtA[i] = 0x70
	}
	if m.Date != 0 {
		i = encodeVarintPushContent(dAtA, i, uint64(m.Date))
		i--
		dAtA[i] = 0x68
	}
	if m.SenderUserId != 0 {
		i = encodeVarintPushContent(dAtA, i, uint64(m.SenderUserId))
		i--
		dAtA[i] = 0x60
	}
	if m.IsRespondable {
		i--
		if m.IsRespondable {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x58
	}
	if m.MessageId != nil {
		{
			size, err := m.MessageId.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPushContent(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x52
	}
	if m.Peer != nil {
		{
			size, err := m.Peer.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPushContent(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if m.UnreadMessageCounter != 0 {
		i = encodeVarintPushContent(dAtA, i, uint64(m.UnreadMessageCounter))
		i--
		dAtA[i] = 0x30
	}
	if len(m.Sound) > 0 {
		i -= len(m.Sound)
		copy(dAtA[i:], m.Sound)
		i = encodeVarintPushContent(dAtA, i, uint64(len(m.Sound)))
		i--
		dAtA[i] = 0x2a
	}
	if m.AlertTitle != nil {
		{
			size := m.AlertTitle.Size()
			i -= size
			if _, err := m.AlertTitle.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.AlertBody != nil {
		{
			size := m.AlertBody.Size()
			i -= size
			if _, err := m.AlertBody.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *EncryptedPushContent_LocAlertBody) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EncryptedPushContent_LocAlertBody) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.LocAlertBody != nil {
		{
			size, err := m.LocAlertBody.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPushContent(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}
func (m *EncryptedPushContent_SimpleAlertBody) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EncryptedPushContent_SimpleAlertBody) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= len(m.SimpleAlertBody)
	copy(dAtA[i:], m.SimpleAlertBody)
	i = encodeVarintPushContent(dAtA, i, uint64(len(m.SimpleAlertBody)))
	i--
	dAtA[i] = 0x12
	return len(dAtA) - i, nil
}
func (m *EncryptedPushContent_LocAlertTitle) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EncryptedPushContent_LocAlertTitle) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.LocAlertTitle != nil {
		{
			size, err := m.LocAlertTitle.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPushContent(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *EncryptedPushContent_SimpleAlertTitle) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EncryptedPushContent_SimpleAlertTitle) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= len(m.SimpleAlertTitle)
	copy(dAtA[i:], m.SimpleAlertTitle)
	i = encodeVarintPushContent(dAtA, i, uint64(len(m.SimpleAlertTitle)))
	i--
	dAtA[i] = 0x22
	return len(dAtA) - i, nil
}
func encodeVarintPushContent(dAtA []byte, offset int, v uint64) int {
	offset -= sovPushContent(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *LocalizableString) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.LocKey)
	if l > 0 {
		n += 1 + l + sovPushContent(uint64(l))
	}
	if len(m.LocArgs) > 0 {
		for _, s := range m.LocArgs {
			l = len(s)
			n += 1 + l + sovPushContent(uint64(l))
		}
	}
	return n
}

func (m *PushPeer) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovPushContent(uint64(m.Type))
	}
	if m.Id != 0 {
		n += 1 + sovPushContent(uint64(m.Id))
	}
	l = len(m.StrId)
	if l > 0 {
		n += 1 + l + sovPushContent(uint64(l))
	}
	return n
}

func (m *EncryptedPushContent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AlertBody != nil {
		n += m.AlertBody.Size()
	}
	if m.AlertTitle != nil {
		n += m.AlertTitle.Size()
	}
	l = len(m.Sound)
	if l > 0 {
		n += 1 + l + sovPushContent(uint64(l))
	}
	if m.UnreadMessageCounter != 0 {
		n += 1 + sovPushContent(uint64(m.UnreadMessageCounter))
	}
	if m.Peer != nil {
		l = m.Peer.Size()
		n += 1 + l + sovPushContent(uint64(l))
	}
	if m.MessageId != nil {
		l = m.MessageId.Size()
		n += 1 + l + sovPushContent(uint64(l))
	}
	if m.IsRespondable {
		n += 2
	}
	if m.SenderUserId != 0 {
		n += 1 + sovPushContent(uint64(m.SenderUserId))
	}
	if m.Date != 0 {
		n += 1 + sovPushContent(uint64(m.Date))
	}
	if m.EventType != 0 {
		n += 1 + sovPushContent(uint64(m.EventType))
	}
	return n
}

func (m *EncryptedPushContent_LocAlertBody) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.LocAlertBody != nil {
		l = m.LocAlertBody.Size()
		n += 1 + l + sovPushContent(uint64(l))
	}
	return n
}
func (m *EncryptedPushContent_SimpleAlertBody) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SimpleAlertBody)
	n += 1 + l + sovPushContent(uint64(l))
	return n
}
func (m *EncryptedPushContent_LocAlertTitle) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.LocAlertTitle != nil {
		l = m.LocAlertTitle.Size()
		n += 1 + l + sovPushContent(uint64(l))
	}
	return n
}
func (m *EncryptedPushContent_SimpleAlertTitle) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SimpleAlertTitle)
	n += 1 + l + sovPushContent(uint64(l))
	return n
}

func sovPushContent(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozPushContent(x uint64) (n int) {
	return sovPushContent(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *LocalizableString) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&LocalizableString{`,
		`LocKey:` + fmt.Sprintf("%v", this.LocKey) + `,`,
		`LocArgs:` + fmt.Sprintf("%v", this.LocArgs) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PushPeer) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PushPeer{`,
		`Type:` + fmt.Sprintf("%v", this.Type) + `,`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`StrId:` + fmt.Sprintf("%v", this.StrId) + `,`,
		`}`,
	}, "")
	return s
}
func (this *EncryptedPushContent) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&EncryptedPushContent{`,
		`AlertBody:` + fmt.Sprintf("%v", this.AlertBody) + `,`,
		`AlertTitle:` + fmt.Sprintf("%v", this.AlertTitle) + `,`,
		`Sound:` + fmt.Sprintf("%v", this.Sound) + `,`,
		`UnreadMessageCounter:` + fmt.Sprintf("%v", this.UnreadMessageCounter) + `,`,
		`Peer:` + strings.Replace(this.Peer.String(), "PushPeer", "PushPeer", 1) + `,`,
		`MessageId:` + strings.Replace(fmt.Sprintf("%v", this.MessageId), "UUIDValue", "UUIDValue", 1) + `,`,
		`IsRespondable:` + fmt.Sprintf("%v", this.IsRespondable) + `,`,
		`SenderUserId:` + fmt.Sprintf("%v", this.SenderUserId) + `,`,
		`Date:` + fmt.Sprintf("%v", this.Date) + `,`,
		`EventType:` + fmt.Sprintf("%v", this.EventType) + `,`,
		`}`,
	}, "")
	return s
}
func (this *EncryptedPushContent_LocAlertBody) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&EncryptedPushContent_LocAlertBody{`,
		`LocAlertBody:` + strings.Replace(fmt.Sprintf("%v", this.LocAlertBody), "LocalizableString", "LocalizableString", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *EncryptedPushContent_SimpleAlertBody) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&EncryptedPushContent_SimpleAlertBody{`,
		`SimpleAlertBody:` + fmt.Sprintf("%v", this.SimpleAlertBody) + `,`,
		`}`,
	}, "")
	return s
}
func (this *EncryptedPushContent_LocAlertTitle) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&EncryptedPushContent_LocAlertTitle{`,
		`LocAlertTitle:` + strings.Replace(fmt.Sprintf("%v", this.LocAlertTitle), "LocalizableString", "LocalizableString", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *EncryptedPushContent_SimpleAlertTitle) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&EncryptedPushContent_SimpleAlertTitle{`,
		`SimpleAlertTitle:` + fmt.Sprintf("%v", this.SimpleAlertTitle) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringPushContent(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *LocalizableString) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPushContent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LocalizableString: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LocalizableString: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LocKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPushContent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPushContent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPushContent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LocKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LocArgs", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPushContent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPushContent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPushContent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LocArgs = append(m.LocArgs, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPushContent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPushContent
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPushContent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PushPeer) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPushContent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PushPeer: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PushPeer: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPushContent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= PushPeerType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPushContent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StrId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPushContent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPushContent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPushContent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StrId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPushContent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPushContent
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPushContent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EncryptedPushContent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPushContent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EncryptedPushContent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EncryptedPushContent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LocAlertBody", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPushContent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPushContent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPushContent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &LocalizableString{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.AlertBody = &EncryptedPushContent_LocAlertBody{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SimpleAlertBody", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPushContent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPushContent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPushContent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AlertBody = &EncryptedPushContent_SimpleAlertBody{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LocAlertTitle", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPushContent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPushContent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPushContent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &LocalizableString{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.AlertTitle = &EncryptedPushContent_LocAlertTitle{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SimpleAlertTitle", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPushContent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPushContent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPushContent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AlertTitle = &EncryptedPushContent_SimpleAlertTitle{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sound", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPushContent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPushContent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPushContent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sound = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnreadMessageCounter", wireType)
			}
			m.UnreadMessageCounter = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPushContent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UnreadMessageCounter |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Peer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPushContent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPushContent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPushContent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Peer == nil {
				m.Peer = &PushPeer{}
			}
			if err := m.Peer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MessageId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPushContent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPushContent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPushContent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MessageId == nil {
				m.MessageId = &UUIDValue{}
			}
			if err := m.MessageId.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsRespondable", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPushContent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsRespondable = bool(v != 0)
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SenderUserId", wireType)
			}
			m.SenderUserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPushContent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SenderUserId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Date", wireType)
			}
			m.Date = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPushContent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Date |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventType", wireType)
			}
			m.EventType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPushContent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EventType |= PushEventType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPushContent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPushContent
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPushContent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPushContent(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPushContent
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPushContent
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPushContent
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthPushContent
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupPushContent
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthPushContent
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthPushContent        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPushContent          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupPushContent = fmt.Errorf("proto: unexpected end of group")
)
