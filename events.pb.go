// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: events.proto

package dialog

import (
	context "context"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_sortkeys "github.com/gogo/protobuf/sortkeys"
	_ "github.com/gogo/protobuf/types"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strconv "strconv"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type LoadMode int32

const (
	LOADMODE_UNKNOWN  LoadMode = 0
	LOADMODE_FORWARD  LoadMode = 1
	LOADMODE_BACKWARD LoadMode = 2
)

var LoadMode_name = map[int32]string{
	0: "LOADMODE_UNKNOWN",
	1: "LOADMODE_FORWARD",
	2: "LOADMODE_BACKWARD",
}

var LoadMode_value = map[string]int32{
	"LOADMODE_UNKNOWN":  0,
	"LOADMODE_FORWARD":  1,
	"LOADMODE_BACKWARD": 2,
}

func (LoadMode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_8f22242cb04491f9, []int{0}
}

type Event struct {
	Clock int64      `protobuf:"varint,1,opt,name=clock,proto3" json:"clock,omitempty"`
	Id    *UUIDValue `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	// Types that are valid to be assigned to Event:
	//	*Event_Mention_
	//	*Event_Reactions_
	Event isEvent_Event `protobuf_oneof:"event"`
}

func (m *Event) Reset()      { *m = Event{} }
func (*Event) ProtoMessage() {}
func (*Event) Descriptor() ([]byte, []int) {
	return fileDescriptor_8f22242cb04491f9, []int{0}
}
func (m *Event) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Event) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Event.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Event) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Event.Merge(m, src)
}
func (m *Event) XXX_Size() int {
	return m.Size()
}
func (m *Event) XXX_DiscardUnknown() {
	xxx_messageInfo_Event.DiscardUnknown(m)
}

var xxx_messageInfo_Event proto.InternalMessageInfo

type isEvent_Event interface {
	isEvent_Event()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type Event_Mention_ struct {
	Mention *Event_Mention `protobuf:"bytes,3,opt,name=mention,proto3,oneof" json:"mention,omitempty"`
}
type Event_Reactions_ struct {
	Reactions *Event_Reactions `protobuf:"bytes,4,opt,name=reactions,proto3,oneof" json:"reactions,omitempty"`
}

func (*Event_Mention_) isEvent_Event()   {}
func (*Event_Reactions_) isEvent_Event() {}

func (m *Event) GetEvent() isEvent_Event {
	if m != nil {
		return m.Event
	}
	return nil
}

func (m *Event) GetClock() int64 {
	if m != nil {
		return m.Clock
	}
	return 0
}

func (m *Event) GetId() *UUIDValue {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *Event) GetMention() *Event_Mention {
	if x, ok := m.GetEvent().(*Event_Mention_); ok {
		return x.Mention
	}
	return nil
}

func (m *Event) GetReactions() *Event_Reactions {
	if x, ok := m.GetEvent().(*Event_Reactions_); ok {
		return x.Reactions
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*Event) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*Event_Mention_)(nil),
		(*Event_Reactions_)(nil),
	}
}

type Event_Mention struct {
	Peer *Peer      `protobuf:"bytes,1,opt,name=peer,proto3" json:"peer,omitempty"`
	Mid  *UUIDValue `protobuf:"bytes,2,opt,name=mid,proto3" json:"mid,omitempty"`
	User int32      `protobuf:"varint,3,opt,name=user,proto3" json:"user,omitempty"`
}

func (m *Event_Mention) Reset()      { *m = Event_Mention{} }
func (*Event_Mention) ProtoMessage() {}
func (*Event_Mention) Descriptor() ([]byte, []int) {
	return fileDescriptor_8f22242cb04491f9, []int{0, 0}
}
func (m *Event_Mention) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Event_Mention) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Event_Mention.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Event_Mention) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Event_Mention.Merge(m, src)
}
func (m *Event_Mention) XXX_Size() int {
	return m.Size()
}
func (m *Event_Mention) XXX_DiscardUnknown() {
	xxx_messageInfo_Event_Mention.DiscardUnknown(m)
}

var xxx_messageInfo_Event_Mention proto.InternalMessageInfo

func (m *Event_Mention) GetPeer() *Peer {
	if m != nil {
		return m.Peer
	}
	return nil
}

func (m *Event_Mention) GetMid() *UUIDValue {
	if m != nil {
		return m.Mid
	}
	return nil
}

func (m *Event_Mention) GetUser() int32 {
	if m != nil {
		return m.User
	}
	return 0
}

type Event_Reactions struct {
	Peer      *Peer                       `protobuf:"bytes,1,opt,name=peer,proto3" json:"peer,omitempty"`
	Mid       *UUIDValue                  `protobuf:"bytes,2,opt,name=mid,proto3" json:"mid,omitempty"`
	Reactions []*Event_Reactions_Reaction `protobuf:"bytes,3,rep,name=reactions,proto3" json:"reactions,omitempty"`
}

func (m *Event_Reactions) Reset()      { *m = Event_Reactions{} }
func (*Event_Reactions) ProtoMessage() {}
func (*Event_Reactions) Descriptor() ([]byte, []int) {
	return fileDescriptor_8f22242cb04491f9, []int{0, 1}
}
func (m *Event_Reactions) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Event_Reactions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Event_Reactions.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Event_Reactions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Event_Reactions.Merge(m, src)
}
func (m *Event_Reactions) XXX_Size() int {
	return m.Size()
}
func (m *Event_Reactions) XXX_DiscardUnknown() {
	xxx_messageInfo_Event_Reactions.DiscardUnknown(m)
}

var xxx_messageInfo_Event_Reactions proto.InternalMessageInfo

func (m *Event_Reactions) GetPeer() *Peer {
	if m != nil {
		return m.Peer
	}
	return nil
}

func (m *Event_Reactions) GetMid() *UUIDValue {
	if m != nil {
		return m.Mid
	}
	return nil
}

func (m *Event_Reactions) GetReactions() []*Event_Reactions_Reaction {
	if m != nil {
		return m.Reactions
	}
	return nil
}

type Event_Reactions_Reaction struct {
	Code  string          `protobuf:"bytes,1,opt,name=code,proto3" json:"code,omitempty"`
	Users map[int32]int64 `protobuf:"bytes,2,rep,name=users,proto3" json:"users,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (m *Event_Reactions_Reaction) Reset()      { *m = Event_Reactions_Reaction{} }
func (*Event_Reactions_Reaction) ProtoMessage() {}
func (*Event_Reactions_Reaction) Descriptor() ([]byte, []int) {
	return fileDescriptor_8f22242cb04491f9, []int{0, 1, 0}
}
func (m *Event_Reactions_Reaction) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Event_Reactions_Reaction) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Event_Reactions_Reaction.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Event_Reactions_Reaction) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Event_Reactions_Reaction.Merge(m, src)
}
func (m *Event_Reactions_Reaction) XXX_Size() int {
	return m.Size()
}
func (m *Event_Reactions_Reaction) XXX_DiscardUnknown() {
	xxx_messageInfo_Event_Reactions_Reaction.DiscardUnknown(m)
}

var xxx_messageInfo_Event_Reactions_Reaction proto.InternalMessageInfo

func (m *Event_Reactions_Reaction) GetCode() string {
	if m != nil {
		return m.Code
	}
	return ""
}

func (m *Event_Reactions_Reaction) GetUsers() map[int32]int64 {
	if m != nil {
		return m.Users
	}
	return nil
}

type UpdateEvent struct {
	Event     *Event `protobuf:"bytes,1,opt,name=event,proto3" json:"event,omitempty"`
	PrevClock int64  `protobuf:"varint,2,opt,name=prev_clock,json=prevClock,proto3" json:"prev_clock,omitempty"`
}

func (m *UpdateEvent) Reset()      { *m = UpdateEvent{} }
func (*UpdateEvent) ProtoMessage() {}
func (*UpdateEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_8f22242cb04491f9, []int{1}
}
func (m *UpdateEvent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateEvent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateEvent.Merge(m, src)
}
func (m *UpdateEvent) XXX_Size() int {
	return m.Size()
}
func (m *UpdateEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateEvent.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateEvent proto.InternalMessageInfo

func (m *UpdateEvent) GetEvent() *Event {
	if m != nil {
		return m.Event
	}
	return nil
}

func (m *UpdateEvent) GetPrevClock() int64 {
	if m != nil {
		return m.PrevClock
	}
	return 0
}

type LoadEventsRequest struct {
	FromClock int64    `protobuf:"varint,1,opt,name=from_clock,json=fromClock,proto3" json:"from_clock,omitempty"`
	LoadMode  LoadMode `protobuf:"varint,2,opt,name=load_mode,json=loadMode,proto3,enum=dialog.events.LoadMode" json:"load_mode,omitempty"`
}

func (m *LoadEventsRequest) Reset()      { *m = LoadEventsRequest{} }
func (*LoadEventsRequest) ProtoMessage() {}
func (*LoadEventsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_8f22242cb04491f9, []int{2}
}
func (m *LoadEventsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LoadEventsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LoadEventsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LoadEventsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LoadEventsRequest.Merge(m, src)
}
func (m *LoadEventsRequest) XXX_Size() int {
	return m.Size()
}
func (m *LoadEventsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_LoadEventsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_LoadEventsRequest proto.InternalMessageInfo

func (m *LoadEventsRequest) GetFromClock() int64 {
	if m != nil {
		return m.FromClock
	}
	return 0
}

func (m *LoadEventsRequest) GetLoadMode() LoadMode {
	if m != nil {
		return m.LoadMode
	}
	return LOADMODE_UNKNOWN
}

type LoadEventsResponse struct {
	Events        []*Event `protobuf:"bytes,1,rep,name=events,proto3" json:"events,omitempty"`
	Clock         int64    `protobuf:"varint,2,opt,name=clock,proto3" json:"clock,omitempty"`
	NextAvailable bool     `protobuf:"varint,3,opt,name=next_available,json=nextAvailable,proto3" json:"next_available,omitempty"`
}

func (m *LoadEventsResponse) Reset()      { *m = LoadEventsResponse{} }
func (*LoadEventsResponse) ProtoMessage() {}
func (*LoadEventsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8f22242cb04491f9, []int{3}
}
func (m *LoadEventsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LoadEventsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LoadEventsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LoadEventsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LoadEventsResponse.Merge(m, src)
}
func (m *LoadEventsResponse) XXX_Size() int {
	return m.Size()
}
func (m *LoadEventsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_LoadEventsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_LoadEventsResponse proto.InternalMessageInfo

func (m *LoadEventsResponse) GetEvents() []*Event {
	if m != nil {
		return m.Events
	}
	return nil
}

func (m *LoadEventsResponse) GetClock() int64 {
	if m != nil {
		return m.Clock
	}
	return 0
}

func (m *LoadEventsResponse) GetNextAvailable() bool {
	if m != nil {
		return m.NextAvailable
	}
	return false
}

func init() {
	proto.RegisterEnum("dialog.events.LoadMode", LoadMode_name, LoadMode_value)
	proto.RegisterType((*Event)(nil), "dialog.events.Event")
	proto.RegisterType((*Event_Mention)(nil), "dialog.events.Event.Mention")
	proto.RegisterType((*Event_Reactions)(nil), "dialog.events.Event.Reactions")
	proto.RegisterType((*Event_Reactions_Reaction)(nil), "dialog.events.Event.Reactions.Reaction")
	proto.RegisterMapType((map[int32]int64)(nil), "dialog.events.Event.Reactions.Reaction.UsersEntry")
	proto.RegisterType((*UpdateEvent)(nil), "dialog.events.UpdateEvent")
	proto.RegisterType((*LoadEventsRequest)(nil), "dialog.events.LoadEventsRequest")
	proto.RegisterType((*LoadEventsResponse)(nil), "dialog.events.LoadEventsResponse")
}

func init() { proto.RegisterFile("events.proto", fileDescriptor_8f22242cb04491f9) }

var fileDescriptor_8f22242cb04491f9 = []byte{
	// 711 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x54, 0x4d, 0x4f, 0xdb, 0x4a,
	0x14, 0xf5, 0x38, 0x1f, 0x24, 0x37, 0x80, 0x92, 0x51, 0xd0, 0x8b, 0x2c, 0xf0, 0x0b, 0x79, 0x42,
	0x0f, 0xa1, 0xca, 0x51, 0xd3, 0x2e, 0x10, 0x8b, 0x56, 0x81, 0xa4, 0xa5, 0x82, 0x90, 0x6a, 0xa4,
	0x94, 0xaa, 0x9b, 0xc8, 0xd8, 0x43, 0x6a, 0xe1, 0xd8, 0xae, 0x1d, 0x22, 0xd8, 0x55, 0xfc, 0x82,
	0x4a, 0xdd, 0x77, 0xd1, 0x55, 0x7f, 0x45, 0xd7, 0x5d, 0x22, 0x75, 0xc3, 0xb2, 0x98, 0x2e, 0xaa,
	0xae, 0xf8, 0x09, 0xd5, 0xcc, 0xd8, 0xc4, 0x54, 0x11, 0xea, 0xa2, 0x2b, 0xdf, 0x39, 0x73, 0xee,
	0xbd, 0xe7, 0x5c, 0xdd, 0x31, 0xcc, 0xd2, 0x31, 0x75, 0x46, 0x81, 0xe6, 0xf9, 0xee, 0xc8, 0xc5,
	0x73, 0xa6, 0xa5, 0xdb, 0xee, 0x40, 0x13, 0xa0, 0xb2, 0x38, 0x70, 0xdd, 0x81, 0x4d, 0xeb, 0xba,
	0x67, 0xd5, 0x75, 0xc7, 0x71, 0x47, 0xfa, 0xc8, 0x72, 0x9d, 0x88, 0xac, 0x14, 0x3c, 0x4a, 0xfd,
	0xf8, 0x50, 0x32, 0xe9, 0xa1, 0xe5, 0x58, 0xc9, 0xfb, 0x85, 0xc0, 0xd0, 0x6d, 0xdd, 0x3b, 0xa8,
	0x47, 0x5f, 0x01, 0xd7, 0x7e, 0xa6, 0x21, 0xd3, 0x66, 0xf5, 0x71, 0x19, 0x32, 0x86, 0xed, 0x1a,
	0x47, 0x15, 0x54, 0x45, 0xab, 0x29, 0x22, 0x0e, 0x78, 0x19, 0x64, 0xcb, 0xac, 0xc8, 0x55, 0xb4,
	0x5a, 0x68, 0x94, 0xb4, 0x48, 0x50, 0xaf, 0xf7, 0xac, 0xf5, 0x42, 0xb7, 0x8f, 0x29, 0x91, 0x2d,
	0x13, 0xaf, 0xc3, 0xcc, 0x90, 0x3a, 0xac, 0x57, 0x25, 0xc5, 0x79, 0x8b, 0xda, 0x2d, 0xe1, 0x1a,
	0xaf, 0xaf, 0x75, 0x04, 0x67, 0x5b, 0x22, 0x31, 0x1d, 0x3f, 0x82, 0xbc, 0x4f, 0x75, 0x83, 0xcb,
	0xac, 0xa4, 0x79, 0xae, 0x3a, 0x35, 0x97, 0xc4, 0xac, 0x6d, 0x89, 0x4c, 0x52, 0x14, 0x13, 0x66,
	0xa2, 0xaa, 0xb8, 0x0a, 0x69, 0x36, 0x00, 0x2e, 0xbe, 0xd0, 0x98, 0x8d, 0xab, 0x3c, 0xa7, 0xd4,
	0x27, 0xfc, 0x06, 0xff, 0x07, 0xa9, 0xe1, 0x5d, 0x56, 0xd8, 0x2d, 0xc6, 0x90, 0x3e, 0x0e, 0xa8,
	0xcf, 0x8d, 0x64, 0x08, 0x8f, 0x95, 0xcf, 0x32, 0xe4, 0x6f, 0x04, 0xfc, 0xad, 0x46, 0xed, 0xa4,
	0xf5, 0x54, 0x35, 0xb5, 0x5a, 0x68, 0xfc, 0x7f, 0xb7, 0xf5, 0x9b, 0x28, 0x39, 0x81, 0x8f, 0x08,
	0x72, 0x31, 0xce, 0xc4, 0x1b, 0xae, 0x49, 0xb9, 0xb4, 0x3c, 0xe1, 0x31, 0xde, 0x86, 0x0c, 0x33,
	0x11, 0x54, 0x64, 0xde, 0xa3, 0xf1, 0x87, 0x3d, 0xb4, 0x1e, 0x4b, 0x6a, 0x3b, 0x23, 0xff, 0x94,
	0x88, 0x02, 0xca, 0x3a, 0xc0, 0x04, 0xc4, 0x45, 0x48, 0x1d, 0xd1, 0x53, 0xde, 0x2a, 0x43, 0x58,
	0xc8, 0xf6, 0x67, 0xcc, 0xfc, 0x71, 0xe3, 0x29, 0x22, 0x0e, 0x1b, 0xf2, 0x3a, 0xda, 0x9c, 0x81,
	0x0c, 0x6f, 0x57, 0x7b, 0x09, 0x85, 0x9e, 0x67, 0xea, 0x23, 0x2a, 0x36, 0x6e, 0x2d, 0xc2, 0xa3,
	0x59, 0x96, 0xa7, 0x69, 0x23, 0x82, 0x82, 0x97, 0x00, 0x3c, 0x9f, 0x8e, 0xfb, 0x62, 0x45, 0x45,
	0x8b, 0x3c, 0x43, 0xb6, 0x18, 0x50, 0x7b, 0x0d, 0xa5, 0x5d, 0x57, 0x37, 0x79, 0x4a, 0x40, 0xe8,
	0x9b, 0x63, 0x1a, 0xf0, 0x9c, 0x43, 0xdf, 0x1d, 0xf6, 0x93, 0x6b, 0x9d, 0x67, 0x08, 0xcf, 0xc1,
	0x0f, 0x21, 0x6f, 0xbb, 0xba, 0xd9, 0x1f, 0xb2, 0x99, 0xb1, 0x8a, 0xf3, 0x8d, 0x7f, 0x7e, 0x93,
	0xc0, 0x6a, 0x76, 0x5c, 0x93, 0x92, 0x9c, 0x1d, 0x45, 0xb5, 0x0f, 0x08, 0x70, 0xb2, 0x55, 0xe0,
	0xb9, 0x4e, 0x40, 0xf1, 0x3d, 0xc8, 0x8a, 0x9c, 0x0a, 0xe2, 0x83, 0x9e, 0x6e, 0x26, 0xe2, 0x4c,
	0xde, 0x9a, 0x9c, 0x7c, 0x6b, 0x2b, 0x30, 0xef, 0xd0, 0x93, 0x51, 0x5f, 0x1f, 0xeb, 0x96, 0xad,
	0x1f, 0xd8, 0x94, 0xaf, 0x61, 0x8e, 0xcc, 0x31, 0xb4, 0x19, 0x83, 0x1b, 0x4b, 0xe1, 0x63, 0x05,
	0x2a, 0xd6, 0x50, 0x33, 0xed, 0x81, 0x36, 0xf0, 0x3d, 0x43, 0x7b, 0xea, 0x7b, 0x46, 0xac, 0x64,
	0xad, 0x03, 0xb9, 0x58, 0x36, 0x2e, 0x43, 0x71, 0xb7, 0xdb, 0x6c, 0x75, 0xba, 0xad, 0x76, 0xbf,
	0xb7, 0xb7, 0xb3, 0xd7, 0xdd, 0xdf, 0x2b, 0x4a, 0xb7, 0xd0, 0x27, 0x5d, 0xb2, 0xdf, 0x24, 0xad,
	0x22, 0xc2, 0x0b, 0x50, 0xba, 0x41, 0x37, 0x9b, 0x5b, 0x3b, 0x1c, 0x96, 0x1b, 0x67, 0x08, 0xb2,
	0xc2, 0x2b, 0x3e, 0x01, 0x98, 0x38, 0xc7, 0xd5, 0x29, 0xb3, 0xba, 0x35, 0x7f, 0x65, 0xf9, 0x0e,
	0x86, 0x10, 0x5b, 0x5b, 0x39, 0xfb, 0xfa, 0xfd, 0xbd, 0xfc, 0x6f, 0x4d, 0xa9, 0x8f, 0xef, 0xd7,
	0x99, 0x97, 0xba, 0x20, 0xd4, 0x27, 0xdc, 0x0d, 0xb4, 0xb6, 0x49, 0xce, 0x2f, 0x55, 0xe9, 0xe2,
	0x52, 0x95, 0xae, 0x2f, 0x55, 0xf4, 0x36, 0x54, 0xd1, 0xa7, 0x50, 0x45, 0x5f, 0x42, 0x15, 0x9d,
	0x87, 0x2a, 0xfa, 0x16, 0xaa, 0xe8, 0x47, 0xa8, 0x4a, 0xd7, 0xa1, 0x8a, 0xde, 0x5d, 0xa9, 0xd2,
	0xf9, 0x95, 0x2a, 0x5d, 0x5c, 0xa9, 0x12, 0x94, 0x93, 0x33, 0x0a, 0xa8, 0x3f, 0xb6, 0x0c, 0x1a,
	0xbc, 0xca, 0x0a, 0x51, 0x07, 0x59, 0xfe, 0x03, 0x7c, 0xf0, 0x2b, 0x00, 0x00, 0xff, 0xff, 0xed,
	0xbe, 0xd1, 0x47, 0x74, 0x05, 0x00, 0x00,
}

func (x LoadMode) String() string {
	s, ok := LoadMode_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *Event) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Event)
	if !ok {
		that2, ok := that.(Event)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Clock != that1.Clock {
		return false
	}
	if !this.Id.Equal(that1.Id) {
		return false
	}
	if that1.Event == nil {
		if this.Event != nil {
			return false
		}
	} else if this.Event == nil {
		return false
	} else if !this.Event.Equal(that1.Event) {
		return false
	}
	return true
}
func (this *Event_Mention_) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Event_Mention_)
	if !ok {
		that2, ok := that.(Event_Mention_)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Mention.Equal(that1.Mention) {
		return false
	}
	return true
}
func (this *Event_Reactions_) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Event_Reactions_)
	if !ok {
		that2, ok := that.(Event_Reactions_)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Reactions.Equal(that1.Reactions) {
		return false
	}
	return true
}
func (this *Event_Mention) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Event_Mention)
	if !ok {
		that2, ok := that.(Event_Mention)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Peer.Equal(that1.Peer) {
		return false
	}
	if !this.Mid.Equal(that1.Mid) {
		return false
	}
	if this.User != that1.User {
		return false
	}
	return true
}
func (this *Event_Reactions) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Event_Reactions)
	if !ok {
		that2, ok := that.(Event_Reactions)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Peer.Equal(that1.Peer) {
		return false
	}
	if !this.Mid.Equal(that1.Mid) {
		return false
	}
	if len(this.Reactions) != len(that1.Reactions) {
		return false
	}
	for i := range this.Reactions {
		if !this.Reactions[i].Equal(that1.Reactions[i]) {
			return false
		}
	}
	return true
}
func (this *Event_Reactions_Reaction) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Event_Reactions_Reaction)
	if !ok {
		that2, ok := that.(Event_Reactions_Reaction)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Code != that1.Code {
		return false
	}
	if len(this.Users) != len(that1.Users) {
		return false
	}
	for i := range this.Users {
		if this.Users[i] != that1.Users[i] {
			return false
		}
	}
	return true
}
func (this *UpdateEvent) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpdateEvent)
	if !ok {
		that2, ok := that.(UpdateEvent)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Event.Equal(that1.Event) {
		return false
	}
	if this.PrevClock != that1.PrevClock {
		return false
	}
	return true
}
func (this *LoadEventsRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*LoadEventsRequest)
	if !ok {
		that2, ok := that.(LoadEventsRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.FromClock != that1.FromClock {
		return false
	}
	if this.LoadMode != that1.LoadMode {
		return false
	}
	return true
}
func (this *LoadEventsResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*LoadEventsResponse)
	if !ok {
		that2, ok := that.(LoadEventsResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Events) != len(that1.Events) {
		return false
	}
	for i := range this.Events {
		if !this.Events[i].Equal(that1.Events[i]) {
			return false
		}
	}
	if this.Clock != that1.Clock {
		return false
	}
	if this.NextAvailable != that1.NextAvailable {
		return false
	}
	return true
}
func (this *Event) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&dialog.Event{")
	s = append(s, "Clock: "+fmt.Sprintf("%#v", this.Clock)+",\n")
	if this.Id != nil {
		s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	}
	if this.Event != nil {
		s = append(s, "Event: "+fmt.Sprintf("%#v", this.Event)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Event_Mention_) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dialog.Event_Mention_{` +
		`Mention:` + fmt.Sprintf("%#v", this.Mention) + `}`}, ", ")
	return s
}
func (this *Event_Reactions_) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dialog.Event_Reactions_{` +
		`Reactions:` + fmt.Sprintf("%#v", this.Reactions) + `}`}, ", ")
	return s
}
func (this *Event_Mention) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&dialog.Event_Mention{")
	if this.Peer != nil {
		s = append(s, "Peer: "+fmt.Sprintf("%#v", this.Peer)+",\n")
	}
	if this.Mid != nil {
		s = append(s, "Mid: "+fmt.Sprintf("%#v", this.Mid)+",\n")
	}
	s = append(s, "User: "+fmt.Sprintf("%#v", this.User)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Event_Reactions) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&dialog.Event_Reactions{")
	if this.Peer != nil {
		s = append(s, "Peer: "+fmt.Sprintf("%#v", this.Peer)+",\n")
	}
	if this.Mid != nil {
		s = append(s, "Mid: "+fmt.Sprintf("%#v", this.Mid)+",\n")
	}
	if this.Reactions != nil {
		s = append(s, "Reactions: "+fmt.Sprintf("%#v", this.Reactions)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Event_Reactions_Reaction) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&dialog.Event_Reactions_Reaction{")
	s = append(s, "Code: "+fmt.Sprintf("%#v", this.Code)+",\n")
	keysForUsers := make([]int32, 0, len(this.Users))
	for k, _ := range this.Users {
		keysForUsers = append(keysForUsers, k)
	}
	github_com_gogo_protobuf_sortkeys.Int32s(keysForUsers)
	mapStringForUsers := "map[int32]int64{"
	for _, k := range keysForUsers {
		mapStringForUsers += fmt.Sprintf("%#v: %#v,", k, this.Users[k])
	}
	mapStringForUsers += "}"
	if this.Users != nil {
		s = append(s, "Users: "+mapStringForUsers+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UpdateEvent) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&dialog.UpdateEvent{")
	if this.Event != nil {
		s = append(s, "Event: "+fmt.Sprintf("%#v", this.Event)+",\n")
	}
	s = append(s, "PrevClock: "+fmt.Sprintf("%#v", this.PrevClock)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *LoadEventsRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&dialog.LoadEventsRequest{")
	s = append(s, "FromClock: "+fmt.Sprintf("%#v", this.FromClock)+",\n")
	s = append(s, "LoadMode: "+fmt.Sprintf("%#v", this.LoadMode)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *LoadEventsResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&dialog.LoadEventsResponse{")
	if this.Events != nil {
		s = append(s, "Events: "+fmt.Sprintf("%#v", this.Events)+",\n")
	}
	s = append(s, "Clock: "+fmt.Sprintf("%#v", this.Clock)+",\n")
	s = append(s, "NextAvailable: "+fmt.Sprintf("%#v", this.NextAvailable)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringEvents(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// EventsClient is the client API for Events service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type EventsClient interface {
	LoadEvents(ctx context.Context, in *LoadEventsRequest, opts ...grpc.CallOption) (*LoadEventsResponse, error)
}

type eventsClient struct {
	cc *grpc.ClientConn
}

func NewEventsClient(cc *grpc.ClientConn) EventsClient {
	return &eventsClient{cc}
}

func (c *eventsClient) LoadEvents(ctx context.Context, in *LoadEventsRequest, opts ...grpc.CallOption) (*LoadEventsResponse, error) {
	out := new(LoadEventsResponse)
	err := c.cc.Invoke(ctx, "/dialog.events.Events/LoadEvents", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EventsServer is the server API for Events service.
type EventsServer interface {
	LoadEvents(context.Context, *LoadEventsRequest) (*LoadEventsResponse, error)
}

// UnimplementedEventsServer can be embedded to have forward compatible implementations.
type UnimplementedEventsServer struct {
}

func (*UnimplementedEventsServer) LoadEvents(ctx context.Context, req *LoadEventsRequest) (*LoadEventsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoadEvents not implemented")
}

func RegisterEventsServer(s *grpc.Server, srv EventsServer) {
	s.RegisterService(&_Events_serviceDesc, srv)
}

func _Events_LoadEvents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoadEventsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventsServer).LoadEvents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dialog.events.Events/LoadEvents",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventsServer).LoadEvents(ctx, req.(*LoadEventsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Events_serviceDesc = grpc.ServiceDesc{
	ServiceName: "dialog.events.Events",
	HandlerType: (*EventsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "LoadEvents",
			Handler:    _Events_LoadEvents_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "events.proto",
}

func (m *Event) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Event) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Event) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Event != nil {
		{
			size := m.Event.Size()
			i -= size
			if _, err := m.Event.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.Id != nil {
		{
			size, err := m.Id.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEvents(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Clock != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.Clock))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Event_Mention_) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Event_Mention_) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Mention != nil {
		{
			size, err := m.Mention.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEvents(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *Event_Reactions_) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Event_Reactions_) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Reactions != nil {
		{
			size, err := m.Reactions.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEvents(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *Event_Mention) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Event_Mention) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Event_Mention) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.User != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.User))
		i--
		dAtA[i] = 0x18
	}
	if m.Mid != nil {
		{
			size, err := m.Mid.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEvents(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Peer != nil {
		{
			size, err := m.Peer.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEvents(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Event_Reactions) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Event_Reactions) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Event_Reactions) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Reactions) > 0 {
		for iNdEx := len(m.Reactions) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Reactions[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintEvents(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.Mid != nil {
		{
			size, err := m.Mid.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEvents(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Peer != nil {
		{
			size, err := m.Peer.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEvents(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Event_Reactions_Reaction) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Event_Reactions_Reaction) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Event_Reactions_Reaction) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Users) > 0 {
		for k := range m.Users {
			v := m.Users[k]
			baseI := i
			i = encodeVarintEvents(dAtA, i, uint64(v))
			i--
			dAtA[i] = 0x10
			i = encodeVarintEvents(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintEvents(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Code) > 0 {
		i -= len(m.Code)
		copy(dAtA[i:], m.Code)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Code)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UpdateEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateEvent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateEvent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.PrevClock != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.PrevClock))
		i--
		dAtA[i] = 0x10
	}
	if m.Event != nil {
		{
			size, err := m.Event.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEvents(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *LoadEventsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LoadEventsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LoadEventsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.LoadMode != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.LoadMode))
		i--
		dAtA[i] = 0x10
	}
	if m.FromClock != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.FromClock))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *LoadEventsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LoadEventsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LoadEventsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.NextAvailable {
		i--
		if m.NextAvailable {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.Clock != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.Clock))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Events) > 0 {
		for iNdEx := len(m.Events) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Events[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintEvents(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintEvents(dAtA []byte, offset int, v uint64) int {
	offset -= sovEvents(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Event) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Clock != 0 {
		n += 1 + sovEvents(uint64(m.Clock))
	}
	if m.Id != nil {
		l = m.Id.Size()
		n += 1 + l + sovEvents(uint64(l))
	}
	if m.Event != nil {
		n += m.Event.Size()
	}
	return n
}

func (m *Event_Mention_) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Mention != nil {
		l = m.Mention.Size()
		n += 1 + l + sovEvents(uint64(l))
	}
	return n
}
func (m *Event_Reactions_) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Reactions != nil {
		l = m.Reactions.Size()
		n += 1 + l + sovEvents(uint64(l))
	}
	return n
}
func (m *Event_Mention) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Peer != nil {
		l = m.Peer.Size()
		n += 1 + l + sovEvents(uint64(l))
	}
	if m.Mid != nil {
		l = m.Mid.Size()
		n += 1 + l + sovEvents(uint64(l))
	}
	if m.User != 0 {
		n += 1 + sovEvents(uint64(m.User))
	}
	return n
}

func (m *Event_Reactions) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Peer != nil {
		l = m.Peer.Size()
		n += 1 + l + sovEvents(uint64(l))
	}
	if m.Mid != nil {
		l = m.Mid.Size()
		n += 1 + l + sovEvents(uint64(l))
	}
	if len(m.Reactions) > 0 {
		for _, e := range m.Reactions {
			l = e.Size()
			n += 1 + l + sovEvents(uint64(l))
		}
	}
	return n
}

func (m *Event_Reactions_Reaction) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Code)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	if len(m.Users) > 0 {
		for k, v := range m.Users {
			_ = k
			_ = v
			mapEntrySize := 1 + sovEvents(uint64(k)) + 1 + sovEvents(uint64(v))
			n += mapEntrySize + 1 + sovEvents(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *UpdateEvent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Event != nil {
		l = m.Event.Size()
		n += 1 + l + sovEvents(uint64(l))
	}
	if m.PrevClock != 0 {
		n += 1 + sovEvents(uint64(m.PrevClock))
	}
	return n
}

func (m *LoadEventsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.FromClock != 0 {
		n += 1 + sovEvents(uint64(m.FromClock))
	}
	if m.LoadMode != 0 {
		n += 1 + sovEvents(uint64(m.LoadMode))
	}
	return n
}

func (m *LoadEventsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Events) > 0 {
		for _, e := range m.Events {
			l = e.Size()
			n += 1 + l + sovEvents(uint64(l))
		}
	}
	if m.Clock != 0 {
		n += 1 + sovEvents(uint64(m.Clock))
	}
	if m.NextAvailable {
		n += 2
	}
	return n
}

func sovEvents(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozEvents(x uint64) (n int) {
	return sovEvents(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *Event) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Event{`,
		`Clock:` + fmt.Sprintf("%v", this.Clock) + `,`,
		`Id:` + strings.Replace(fmt.Sprintf("%v", this.Id), "UUIDValue", "UUIDValue", 1) + `,`,
		`Event:` + fmt.Sprintf("%v", this.Event) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Event_Mention_) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Event_Mention_{`,
		`Mention:` + strings.Replace(fmt.Sprintf("%v", this.Mention), "Event_Mention", "Event_Mention", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Event_Reactions_) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Event_Reactions_{`,
		`Reactions:` + strings.Replace(fmt.Sprintf("%v", this.Reactions), "Event_Reactions", "Event_Reactions", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Event_Mention) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Event_Mention{`,
		`Peer:` + strings.Replace(fmt.Sprintf("%v", this.Peer), "Peer", "Peer", 1) + `,`,
		`Mid:` + strings.Replace(fmt.Sprintf("%v", this.Mid), "UUIDValue", "UUIDValue", 1) + `,`,
		`User:` + fmt.Sprintf("%v", this.User) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Event_Reactions) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForReactions := "[]*Event_Reactions_Reaction{"
	for _, f := range this.Reactions {
		repeatedStringForReactions += strings.Replace(fmt.Sprintf("%v", f), "Event_Reactions_Reaction", "Event_Reactions_Reaction", 1) + ","
	}
	repeatedStringForReactions += "}"
	s := strings.Join([]string{`&Event_Reactions{`,
		`Peer:` + strings.Replace(fmt.Sprintf("%v", this.Peer), "Peer", "Peer", 1) + `,`,
		`Mid:` + strings.Replace(fmt.Sprintf("%v", this.Mid), "UUIDValue", "UUIDValue", 1) + `,`,
		`Reactions:` + repeatedStringForReactions + `,`,
		`}`,
	}, "")
	return s
}
func (this *Event_Reactions_Reaction) String() string {
	if this == nil {
		return "nil"
	}
	keysForUsers := make([]int32, 0, len(this.Users))
	for k, _ := range this.Users {
		keysForUsers = append(keysForUsers, k)
	}
	github_com_gogo_protobuf_sortkeys.Int32s(keysForUsers)
	mapStringForUsers := "map[int32]int64{"
	for _, k := range keysForUsers {
		mapStringForUsers += fmt.Sprintf("%v: %v,", k, this.Users[k])
	}
	mapStringForUsers += "}"
	s := strings.Join([]string{`&Event_Reactions_Reaction{`,
		`Code:` + fmt.Sprintf("%v", this.Code) + `,`,
		`Users:` + mapStringForUsers + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateEvent) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateEvent{`,
		`Event:` + strings.Replace(this.Event.String(), "Event", "Event", 1) + `,`,
		`PrevClock:` + fmt.Sprintf("%v", this.PrevClock) + `,`,
		`}`,
	}, "")
	return s
}
func (this *LoadEventsRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&LoadEventsRequest{`,
		`FromClock:` + fmt.Sprintf("%v", this.FromClock) + `,`,
		`LoadMode:` + fmt.Sprintf("%v", this.LoadMode) + `,`,
		`}`,
	}, "")
	return s
}
func (this *LoadEventsResponse) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForEvents := "[]*Event{"
	for _, f := range this.Events {
		repeatedStringForEvents += strings.Replace(f.String(), "Event", "Event", 1) + ","
	}
	repeatedStringForEvents += "}"
	s := strings.Join([]string{`&LoadEventsResponse{`,
		`Events:` + repeatedStringForEvents + `,`,
		`Clock:` + fmt.Sprintf("%v", this.Clock) + `,`,
		`NextAvailable:` + fmt.Sprintf("%v", this.NextAvailable) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringEvents(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *Event) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Event: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Event: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Clock", wireType)
			}
			m.Clock = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Clock |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Id == nil {
				m.Id = &UUIDValue{}
			}
			if err := m.Id.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mention", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &Event_Mention{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Event = &Event_Mention_{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reactions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &Event_Reactions{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Event = &Event_Reactions_{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Event_Mention) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Mention: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Mention: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Peer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Peer == nil {
				m.Peer = &Peer{}
			}
			if err := m.Peer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Mid == nil {
				m.Mid = &UUIDValue{}
			}
			if err := m.Mid.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field User", wireType)
			}
			m.User = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.User |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Event_Reactions) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Reactions: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Reactions: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Peer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Peer == nil {
				m.Peer = &Peer{}
			}
			if err := m.Peer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Mid == nil {
				m.Mid = &UUIDValue{}
			}
			if err := m.Mid.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reactions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reactions = append(m.Reactions, &Event_Reactions_Reaction{})
			if err := m.Reactions[len(m.Reactions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Event_Reactions_Reaction) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Reaction: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Reaction: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Code = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Users", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Users == nil {
				m.Users = make(map[int32]int64)
			}
			var mapkey int32
			var mapvalue int64
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowEvents
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowEvents
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowEvents
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapvalue |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipEvents(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthEvents
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Users[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Event", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Event == nil {
				m.Event = &Event{}
			}
			if err := m.Event.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrevClock", wireType)
			}
			m.PrevClock = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PrevClock |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LoadEventsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LoadEventsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LoadEventsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromClock", wireType)
			}
			m.FromClock = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FromClock |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LoadMode", wireType)
			}
			m.LoadMode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LoadMode |= LoadMode(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LoadEventsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LoadEventsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LoadEventsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Events", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Events = append(m.Events, &Event{})
			if err := m.Events[len(m.Events)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Clock", wireType)
			}
			m.Clock = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Clock |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NextAvailable", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.NextAvailable = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipEvents(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthEvents
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupEvents
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthEvents
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthEvents        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowEvents          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupEvents = fmt.Errorf("proto: unexpected end of group")
)
