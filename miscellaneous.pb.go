// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: miscellaneous.proto

package dialog

import (
	bytes "bytes"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	types "github.com/gogo/protobuf/types"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strconv "strconv"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type SupportedServerMethodsType int32

const (
	NONE_SUPPORTED_METHODS SupportedServerMethodsType = 0
	CHANGE_PASSWORD        SupportedServerMethodsType = 1
)

var SupportedServerMethodsType_name = map[int32]string{
	0: "NONE_SUPPORTED_METHODS",
	1: "CHANGE_PASSWORD",
}

var SupportedServerMethodsType_value = map[string]int32{
	"NONE_SUPPORTED_METHODS": 0,
	"CHANGE_PASSWORD":        1,
}

func (SupportedServerMethodsType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_61e9adc6ddde3e19, []int{0}
}

type RtcpMuxPolicy int32

const (
	RTCPMUXPOLICY_UNKNOWN   RtcpMuxPolicy = 0
	RTCPMUXPOLICY_NEGOTIATE RtcpMuxPolicy = 1
	RTCPMUXPOLICY_REQUIRE   RtcpMuxPolicy = 2
)

var RtcpMuxPolicy_name = map[int32]string{
	0: "RTCPMUXPOLICY_UNKNOWN",
	1: "RTCPMUXPOLICY_NEGOTIATE",
	2: "RTCPMUXPOLICY_REQUIRE",
}

var RtcpMuxPolicy_value = map[string]int32{
	"RTCPMUXPOLICY_UNKNOWN":   0,
	"RTCPMUXPOLICY_NEGOTIATE": 1,
	"RTCPMUXPOLICY_REQUIRE":   2,
}

func (RtcpMuxPolicy) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_61e9adc6ddde3e19, []int{1}
}

type UpdateOptimization int32

const (
	UPDATEOPTIMIZATION_UNKNOWN UpdateOptimization = 0
	// For old bot sdk compatibility
	UPDATEOPTIMIZATION_STRIP_ENTITIES UpdateOptimization = 2
)

var UpdateOptimization_name = map[int32]string{
	0: "UPDATEOPTIMIZATION_UNKNOWN",
	2: "UPDATEOPTIMIZATION_STRIP_ENTITIES",
}

var UpdateOptimization_value = map[string]int32{
	"UPDATEOPTIMIZATION_UNKNOWN":        0,
	"UPDATEOPTIMIZATION_STRIP_ENTITIES": 2,
}

func (UpdateOptimization) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_61e9adc6ddde3e19, []int{2}
}

// Empty response
type ResponseVoid struct {
}

func (m *ResponseVoid) Reset()      { *m = ResponseVoid{} }
func (*ResponseVoid) ProtoMessage() {}
func (*ResponseVoid) Descriptor() ([]byte, []int) {
	return fileDescriptor_61e9adc6ddde3e19, []int{0}
}
func (m *ResponseVoid) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ResponseVoid) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ResponseVoid.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ResponseVoid) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResponseVoid.Merge(m, src)
}
func (m *ResponseVoid) XXX_Size() int {
	return m.Size()
}
func (m *ResponseVoid) XXX_DiscardUnknown() {
	xxx_messageInfo_ResponseVoid.DiscardUnknown(m)
}

var xxx_messageInfo_ResponseVoid proto.InternalMessageInfo

// Sequence response. Methods that return this value must process response in particular order
type ResponseSeq struct {
	Seq   int32  `protobuf:"varint,1,opt,name=seq,proto3" json:"seq,omitempty"`
	State []byte `protobuf:"bytes,2,opt,name=state,proto3" json:"state,omitempty"`
	Date  int64  `protobuf:"varint,3,opt,name=date,proto3" json:"date,omitempty"`
}

func (m *ResponseSeq) Reset()      { *m = ResponseSeq{} }
func (*ResponseSeq) ProtoMessage() {}
func (*ResponseSeq) Descriptor() ([]byte, []int) {
	return fileDescriptor_61e9adc6ddde3e19, []int{1}
}
func (m *ResponseSeq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ResponseSeq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ResponseSeq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ResponseSeq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResponseSeq.Merge(m, src)
}
func (m *ResponseSeq) XXX_Size() int {
	return m.Size()
}
func (m *ResponseSeq) XXX_DiscardUnknown() {
	xxx_messageInfo_ResponseSeq.DiscardUnknown(m)
}

var xxx_messageInfo_ResponseSeq proto.InternalMessageInfo

func (m *ResponseSeq) GetSeq() int32 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *ResponseSeq) GetState() []byte {
	if m != nil {
		return m.State
	}
	return nil
}

func (m *ResponseSeq) GetDate() int64 {
	if m != nil {
		return m.Date
	}
	return 0
}

// Sequence response with date. Methods that return this value must process response in particular order
type ResponseSeqDate struct {
	Seq   int32      `protobuf:"varint,1,opt,name=seq,proto3" json:"seq,omitempty"`
	State []byte     `protobuf:"bytes,2,opt,name=state,proto3" json:"state,omitempty"`
	Date  int64      `protobuf:"varint,3,opt,name=date,proto3" json:"date,omitempty"`
	Mid   *UUIDValue `protobuf:"bytes,4,opt,name=mid,proto3" json:"mid,omitempty"`
}

func (m *ResponseSeqDate) Reset()      { *m = ResponseSeqDate{} }
func (*ResponseSeqDate) ProtoMessage() {}
func (*ResponseSeqDate) Descriptor() ([]byte, []int) {
	return fileDescriptor_61e9adc6ddde3e19, []int{2}
}
func (m *ResponseSeqDate) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ResponseSeqDate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ResponseSeqDate.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ResponseSeqDate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResponseSeqDate.Merge(m, src)
}
func (m *ResponseSeqDate) XXX_Size() int {
	return m.Size()
}
func (m *ResponseSeqDate) XXX_DiscardUnknown() {
	xxx_messageInfo_ResponseSeqDate.DiscardUnknown(m)
}

var xxx_messageInfo_ResponseSeqDate proto.InternalMessageInfo

func (m *ResponseSeqDate) GetSeq() int32 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *ResponseSeqDate) GetState() []byte {
	if m != nil {
		return m.State
	}
	return nil
}

func (m *ResponseSeqDate) GetDate() int64 {
	if m != nil {
		return m.Date
	}
	return 0
}

func (m *ResponseSeqDate) GetMid() *UUIDValue {
	if m != nil {
		return m.Mid
	}
	return nil
}

// Response with seq, date and messageId
type ResponseSeqDateMid struct {
	Seq   int32      `protobuf:"varint,1,opt,name=seq,proto3" json:"seq,omitempty"`
	State []byte     `protobuf:"bytes,2,opt,name=state,proto3" json:"state,omitempty"`
	Date  int64      `protobuf:"varint,3,opt,name=date,proto3" json:"date,omitempty"`
	Mid   *UUIDValue `protobuf:"bytes,4,opt,name=mid,proto3" json:"mid,omitempty"`
}

func (m *ResponseSeqDateMid) Reset()      { *m = ResponseSeqDateMid{} }
func (*ResponseSeqDateMid) ProtoMessage() {}
func (*ResponseSeqDateMid) Descriptor() ([]byte, []int) {
	return fileDescriptor_61e9adc6ddde3e19, []int{3}
}
func (m *ResponseSeqDateMid) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ResponseSeqDateMid) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ResponseSeqDateMid.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ResponseSeqDateMid) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResponseSeqDateMid.Merge(m, src)
}
func (m *ResponseSeqDateMid) XXX_Size() int {
	return m.Size()
}
func (m *ResponseSeqDateMid) XXX_DiscardUnknown() {
	xxx_messageInfo_ResponseSeqDateMid.DiscardUnknown(m)
}

var xxx_messageInfo_ResponseSeqDateMid proto.InternalMessageInfo

func (m *ResponseSeqDateMid) GetSeq() int32 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *ResponseSeqDateMid) GetState() []byte {
	if m != nil {
		return m.State
	}
	return nil
}

func (m *ResponseSeqDateMid) GetDate() int64 {
	if m != nil {
		return m.Date
	}
	return 0
}

func (m *ResponseSeqDateMid) GetMid() *UUIDValue {
	if m != nil {
		return m.Mid
	}
	return nil
}

// Boolean response
type ResponseBool struct {
	Value bool `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *ResponseBool) Reset()      { *m = ResponseBool{} }
func (*ResponseBool) ProtoMessage() {}
func (*ResponseBool) Descriptor() ([]byte, []int) {
	return fileDescriptor_61e9adc6ddde3e19, []int{4}
}
func (m *ResponseBool) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ResponseBool) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ResponseBool.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ResponseBool) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResponseBool.Merge(m, src)
}
func (m *ResponseBool) XXX_Size() int {
	return m.Size()
}
func (m *ResponseBool) XXX_DiscardUnknown() {
	xxx_messageInfo_ResponseBool.DiscardUnknown(m)
}

var xxx_messageInfo_ResponseBool proto.InternalMessageInfo

func (m *ResponseBool) GetValue() bool {
	if m != nil {
		return m.Value
	}
	return false
}

// Configuration of system
// maxGroupSize Current maximum group size
// discover Discover configuration
// shareEndpoint Share endpoint
// callsConfig Calls configuration
// groupInviteConfig Group invite configuration
// serverMetaInfo Server meta information (version, etc.)
// customProfileSchema Custom profile JSON Schema
// servicePeers Service peers supported interpreted by the client
type Config struct {
	MaxGroupSize        int32                        `protobuf:"varint,1,opt,name=max_group_size,json=maxGroupSize,proto3" json:"max_group_size,omitempty"`
	Discover            *Discover                    `protobuf:"bytes,2,opt,name=discover,proto3" json:"discover,omitempty"`
	ShareEndpoint       *types.StringValue           `protobuf:"bytes,4,opt,name=share_endpoint,json=shareEndpoint,proto3" json:"share_endpoint,omitempty"`
	CallsConfig         *CallsConfig                 `protobuf:"bytes,5,opt,name=calls_config,json=callsConfig,proto3" json:"calls_config,omitempty"`
	GroupInviteConfig   *InvitesConfig               `protobuf:"bytes,6,opt,name=group_invite_config,json=groupInviteConfig,proto3" json:"group_invite_config,omitempty"`
	ServerMetaInfo      *ServerMetaInfo              `protobuf:"bytes,7,opt,name=server_meta_info,json=serverMetaInfo,proto3" json:"server_meta_info,omitempty"`
	CustomProfileSchema string                       `protobuf:"bytes,8,opt,name=custom_profile_schema,json=customProfileSchema,proto3" json:"custom_profile_schema,omitempty"`
	ServicePeers        *ServicePeers                `protobuf:"bytes,9,opt,name=service_peers,json=servicePeers,proto3" json:"service_peers,omitempty"`
	Extensions          []*Any                       `protobuf:"bytes,3,rep,name=extensions,proto3" json:"extensions,omitempty"`
	ClientKeepAlive     int64                        `protobuf:"varint,10,opt,name=client_keep_alive,json=clientKeepAlive,proto3" json:"client_keep_alive,omitempty"`
	SupportedMethods    []SupportedServerMethodsType `protobuf:"varint,11,rep,packed,name=supported_methods,json=supportedMethods,proto3,enum=dialog.SupportedServerMethodsType" json:"supported_methods,omitempty"`
	MaxChannelSize      int32                        `protobuf:"varint,12,opt,name=max_channel_size,json=maxChannelSize,proto3" json:"max_channel_size,omitempty"`
}

func (m *Config) Reset()      { *m = Config{} }
func (*Config) ProtoMessage() {}
func (*Config) Descriptor() ([]byte, []int) {
	return fileDescriptor_61e9adc6ddde3e19, []int{5}
}
func (m *Config) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Config) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Config.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Config) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Config.Merge(m, src)
}
func (m *Config) XXX_Size() int {
	return m.Size()
}
func (m *Config) XXX_DiscardUnknown() {
	xxx_messageInfo_Config.DiscardUnknown(m)
}

var xxx_messageInfo_Config proto.InternalMessageInfo

func (m *Config) GetMaxGroupSize() int32 {
	if m != nil {
		return m.MaxGroupSize
	}
	return 0
}

func (m *Config) GetDiscover() *Discover {
	if m != nil {
		return m.Discover
	}
	return nil
}

func (m *Config) GetShareEndpoint() *types.StringValue {
	if m != nil {
		return m.ShareEndpoint
	}
	return nil
}

func (m *Config) GetCallsConfig() *CallsConfig {
	if m != nil {
		return m.CallsConfig
	}
	return nil
}

func (m *Config) GetGroupInviteConfig() *InvitesConfig {
	if m != nil {
		return m.GroupInviteConfig
	}
	return nil
}

func (m *Config) GetServerMetaInfo() *ServerMetaInfo {
	if m != nil {
		return m.ServerMetaInfo
	}
	return nil
}

func (m *Config) GetCustomProfileSchema() string {
	if m != nil {
		return m.CustomProfileSchema
	}
	return ""
}

func (m *Config) GetServicePeers() *ServicePeers {
	if m != nil {
		return m.ServicePeers
	}
	return nil
}

func (m *Config) GetExtensions() []*Any {
	if m != nil {
		return m.Extensions
	}
	return nil
}

func (m *Config) GetClientKeepAlive() int64 {
	if m != nil {
		return m.ClientKeepAlive
	}
	return 0
}

func (m *Config) GetSupportedMethods() []SupportedServerMethodsType {
	if m != nil {
		return m.SupportedMethods
	}
	return nil
}

func (m *Config) GetMaxChannelSize() int32 {
	if m != nil {
		return m.MaxChannelSize
	}
	return 0
}

// Service peers
type ServicePeers struct {
	Security *OutPeer `protobuf:"bytes,1,opt,name=security,proto3" json:"security,omitempty"`
	Support  *OutPeer `protobuf:"bytes,2,opt,name=support,proto3" json:"support,omitempty"`
	Stash    *OutPeer `protobuf:"bytes,3,opt,name=stash,proto3" json:"stash,omitempty"`
}

func (m *ServicePeers) Reset()      { *m = ServicePeers{} }
func (*ServicePeers) ProtoMessage() {}
func (*ServicePeers) Descriptor() ([]byte, []int) {
	return fileDescriptor_61e9adc6ddde3e19, []int{6}
}
func (m *ServicePeers) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ServicePeers) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ServicePeers.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ServicePeers) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ServicePeers.Merge(m, src)
}
func (m *ServicePeers) XXX_Size() int {
	return m.Size()
}
func (m *ServicePeers) XXX_DiscardUnknown() {
	xxx_messageInfo_ServicePeers.DiscardUnknown(m)
}

var xxx_messageInfo_ServicePeers proto.InternalMessageInfo

func (m *ServicePeers) GetSecurity() *OutPeer {
	if m != nil {
		return m.Security
	}
	return nil
}

func (m *ServicePeers) GetSupport() *OutPeer {
	if m != nil {
		return m.Support
	}
	return nil
}

func (m *ServicePeers) GetStash() *OutPeer {
	if m != nil {
		return m.Stash
	}
	return nil
}

// Some info about the servr
// releaseDate Server release date in milliseconds
// apiVersion Server api version
type ServerMetaInfo struct {
	ReleaseDate int64             `protobuf:"varint,1,opt,name=release_date,json=releaseDate,proto3" json:"release_date,omitempty"`
	ApiVersion  *types.Int64Value `protobuf:"bytes,2,opt,name=api_version,json=apiVersion,proto3" json:"api_version,omitempty"`
}

func (m *ServerMetaInfo) Reset()      { *m = ServerMetaInfo{} }
func (*ServerMetaInfo) ProtoMessage() {}
func (*ServerMetaInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_61e9adc6ddde3e19, []int{7}
}
func (m *ServerMetaInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ServerMetaInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ServerMetaInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ServerMetaInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ServerMetaInfo.Merge(m, src)
}
func (m *ServerMetaInfo) XXX_Size() int {
	return m.Size()
}
func (m *ServerMetaInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_ServerMetaInfo.DiscardUnknown(m)
}

var xxx_messageInfo_ServerMetaInfo proto.InternalMessageInfo

func (m *ServerMetaInfo) GetReleaseDate() int64 {
	if m != nil {
		return m.ReleaseDate
	}
	return 0
}

func (m *ServerMetaInfo) GetApiVersion() *types.Int64Value {
	if m != nil {
		return m.ApiVersion
	}
	return nil
}

// Calls configuration
// callsEnabled If true then client should enable calls
// videoCallsEnabled If true then client should enable video calls
// groupCallsEnabled If true then client should enable group calls
// groupCallsMaxMembers Determines how many members may participate in call
// rtcpMuxPolicy The RTCP mux policy to use when gathering ICE candidates
// emojiSecurityEnabled If true then client should send and render emoji security
// screenSharingEnabled If true then client should enable screen sharing
type CallsConfig struct {
	CallsEnabled         *types.BoolValue  `protobuf:"bytes,1,opt,name=calls_enabled,json=callsEnabled,proto3" json:"calls_enabled,omitempty"`
	VideoCallsEnabled    *types.BoolValue  `protobuf:"bytes,2,opt,name=video_calls_enabled,json=videoCallsEnabled,proto3" json:"video_calls_enabled,omitempty"`
	GroupCallsEnabled    *types.BoolValue  `protobuf:"bytes,3,opt,name=group_calls_enabled,json=groupCallsEnabled,proto3" json:"group_calls_enabled,omitempty"`
	GroupCallsMaxMembers *types.Int32Value `protobuf:"bytes,4,opt,name=group_calls_max_members,json=groupCallsMaxMembers,proto3" json:"group_calls_max_members,omitempty"`
	RtcpMuxPolicy        RtcpMuxPolicy     `protobuf:"varint,5,opt,name=rtcp_mux_policy,json=rtcpMuxPolicy,proto3,enum=dialog.RtcpMuxPolicy" json:"rtcp_mux_policy,omitempty"`
	EmojiSecurityEnabled *types.BoolValue  `protobuf:"bytes,6,opt,name=emoji_security_enabled,json=emojiSecurityEnabled,proto3" json:"emoji_security_enabled,omitempty"`
	ScreenSharingEnabled *types.BoolValue  `protobuf:"bytes,7,opt,name=screen_sharing_enabled,json=screenSharingEnabled,proto3" json:"screen_sharing_enabled,omitempty"`
}

func (m *CallsConfig) Reset()      { *m = CallsConfig{} }
func (*CallsConfig) ProtoMessage() {}
func (*CallsConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_61e9adc6ddde3e19, []int{8}
}
func (m *CallsConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CallsConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CallsConfig.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CallsConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CallsConfig.Merge(m, src)
}
func (m *CallsConfig) XXX_Size() int {
	return m.Size()
}
func (m *CallsConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_CallsConfig.DiscardUnknown(m)
}

var xxx_messageInfo_CallsConfig proto.InternalMessageInfo

func (m *CallsConfig) GetCallsEnabled() *types.BoolValue {
	if m != nil {
		return m.CallsEnabled
	}
	return nil
}

func (m *CallsConfig) GetVideoCallsEnabled() *types.BoolValue {
	if m != nil {
		return m.VideoCallsEnabled
	}
	return nil
}

func (m *CallsConfig) GetGroupCallsEnabled() *types.BoolValue {
	if m != nil {
		return m.GroupCallsEnabled
	}
	return nil
}

func (m *CallsConfig) GetGroupCallsMaxMembers() *types.Int32Value {
	if m != nil {
		return m.GroupCallsMaxMembers
	}
	return nil
}

func (m *CallsConfig) GetRtcpMuxPolicy() RtcpMuxPolicy {
	if m != nil {
		return m.RtcpMuxPolicy
	}
	return RTCPMUXPOLICY_UNKNOWN
}

func (m *CallsConfig) GetEmojiSecurityEnabled() *types.BoolValue {
	if m != nil {
		return m.EmojiSecurityEnabled
	}
	return nil
}

func (m *CallsConfig) GetScreenSharingEnabled() *types.BoolValue {
	if m != nil {
		return m.ScreenSharingEnabled
	}
	return nil
}

// Group invites configuration
// baseUrl Base URL part
// groupInviteUrlPrefix Prefix for private group invite detection
// resolveUrlPrefix Prefix for public groups and users link detection
// shareInviteUrl Independent URL for external app sharing
type InvitesConfig struct {
	BaseUrl              *types.StringValue `protobuf:"bytes,1,opt,name=base_url,json=baseUrl,proto3" json:"base_url,omitempty"`
	GroupInviteUrlPrefix *types.StringValue `protobuf:"bytes,2,opt,name=group_invite_url_prefix,json=groupInviteUrlPrefix,proto3" json:"group_invite_url_prefix,omitempty"`
	ResolveUrlPrefix     *types.StringValue `protobuf:"bytes,3,opt,name=resolve_url_prefix,json=resolveUrlPrefix,proto3" json:"resolve_url_prefix,omitempty"`
	ShareInviteUrl       *types.StringValue `protobuf:"bytes,4,opt,name=share_invite_url,json=shareInviteUrl,proto3" json:"share_invite_url,omitempty"`
}

func (m *InvitesConfig) Reset()      { *m = InvitesConfig{} }
func (*InvitesConfig) ProtoMessage() {}
func (*InvitesConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_61e9adc6ddde3e19, []int{9}
}
func (m *InvitesConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InvitesConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InvitesConfig.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InvitesConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InvitesConfig.Merge(m, src)
}
func (m *InvitesConfig) XXX_Size() int {
	return m.Size()
}
func (m *InvitesConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_InvitesConfig.DiscardUnknown(m)
}

var xxx_messageInfo_InvitesConfig proto.InternalMessageInfo

func (m *InvitesConfig) GetBaseUrl() *types.StringValue {
	if m != nil {
		return m.BaseUrl
	}
	return nil
}

func (m *InvitesConfig) GetGroupInviteUrlPrefix() *types.StringValue {
	if m != nil {
		return m.GroupInviteUrlPrefix
	}
	return nil
}

func (m *InvitesConfig) GetResolveUrlPrefix() *types.StringValue {
	if m != nil {
		return m.ResolveUrlPrefix
	}
	return nil
}

func (m *InvitesConfig) GetShareInviteUrl() *types.StringValue {
	if m != nil {
		return m.ShareInviteUrl
	}
	return nil
}

// Discover description
// peers peers
type Discover struct {
	Peers []*OutPeer `protobuf:"bytes,1,rep,name=peers,proto3" json:"peers,omitempty"`
}

func (m *Discover) Reset()      { *m = Discover{} }
func (*Discover) ProtoMessage() {}
func (*Discover) Descriptor() ([]byte, []int) {
	return fileDescriptor_61e9adc6ddde3e19, []int{10}
}
func (m *Discover) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Discover) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Discover.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Discover) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Discover.Merge(m, src)
}
func (m *Discover) XXX_Size() int {
	return m.Size()
}
func (m *Discover) XXX_DiscardUnknown() {
	xxx_messageInfo_Discover.DiscardUnknown(m)
}

var xxx_messageInfo_Discover proto.InternalMessageInfo

func (m *Discover) GetPeers() []*OutPeer {
	if m != nil {
		return m.Peers
	}
	return nil
}

// Extention
// id Extension id
// data Extension data
type Extension struct {
	Id   int32  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Data []byte `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *Extension) Reset()      { *m = Extension{} }
func (*Extension) ProtoMessage() {}
func (*Extension) Descriptor() ([]byte, []int) {
	return fileDescriptor_61e9adc6ddde3e19, []int{11}
}
func (m *Extension) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Extension) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Extension.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Extension) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Extension.Merge(m, src)
}
func (m *Extension) XXX_Size() int {
	return m.Size()
}
func (m *Extension) XXX_DiscardUnknown() {
	xxx_messageInfo_Extension.DiscardUnknown(m)
}

var xxx_messageInfo_Extension proto.InternalMessageInfo

func (m *Extension) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Extension) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

// Any
// typeUrl type url
// data data
type Any struct {
	TypeUrl string `protobuf:"bytes,1,opt,name=type_url,json=typeUrl,proto3" json:"type_url,omitempty"`
	Data    []byte `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *Any) Reset()      { *m = Any{} }
func (*Any) ProtoMessage() {}
func (*Any) Descriptor() ([]byte, []int) {
	return fileDescriptor_61e9adc6ddde3e19, []int{12}
}
func (m *Any) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Any) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Any.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Any) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Any.Merge(m, src)
}
func (m *Any) XXX_Size() int {
	return m.Size()
}
func (m *Any) XXX_DiscardUnknown() {
	xxx_messageInfo_Any.DiscardUnknown(m)
}

var xxx_messageInfo_Any proto.InternalMessageInfo

func (m *Any) GetTypeUrl() string {
	if m != nil {
		return m.TypeUrl
	}
	return ""
}

func (m *Any) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

// Update about config change
type UpdateConfig struct {
	Config     *Config           `protobuf:"bytes,1,opt,name=config,proto3" json:"config,omitempty"`
	ConfigHash *types.Int64Value `protobuf:"bytes,2,opt,name=config_hash,json=configHash,proto3" json:"config_hash,omitempty"`
}

func (m *UpdateConfig) Reset()      { *m = UpdateConfig{} }
func (*UpdateConfig) ProtoMessage() {}
func (*UpdateConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_61e9adc6ddde3e19, []int{13}
}
func (m *UpdateConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateConfig.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateConfig.Merge(m, src)
}
func (m *UpdateConfig) XXX_Size() int {
	return m.Size()
}
func (m *UpdateConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateConfig.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateConfig proto.InternalMessageInfo

func (m *UpdateConfig) GetConfig() *Config {
	if m != nil {
		return m.Config
	}
	return nil
}

func (m *UpdateConfig) GetConfigHash() *types.Int64Value {
	if m != nil {
		return m.ConfigHash
	}
	return nil
}

type RecursiveMapValue struct {
	Items []*RecursiveMapValue_Item `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
}

func (m *RecursiveMapValue) Reset()      { *m = RecursiveMapValue{} }
func (*RecursiveMapValue) ProtoMessage() {}
func (*RecursiveMapValue) Descriptor() ([]byte, []int) {
	return fileDescriptor_61e9adc6ddde3e19, []int{14}
}
func (m *RecursiveMapValue) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RecursiveMapValue) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RecursiveMapValue.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RecursiveMapValue) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RecursiveMapValue.Merge(m, src)
}
func (m *RecursiveMapValue) XXX_Size() int {
	return m.Size()
}
func (m *RecursiveMapValue) XXX_DiscardUnknown() {
	xxx_messageInfo_RecursiveMapValue.DiscardUnknown(m)
}

var xxx_messageInfo_RecursiveMapValue proto.InternalMessageInfo

func (m *RecursiveMapValue) GetItems() []*RecursiveMapValue_Item {
	if m != nil {
		return m.Items
	}
	return nil
}

type RecursiveMapValue_Value struct {
	// Types that are valid to be assigned to Value:
	//	*RecursiveMapValue_Value_D
	//	*RecursiveMapValue_Value_I32
	//	*RecursiveMapValue_Value_I64
	//	*RecursiveMapValue_Value_Str
	//	*RecursiveMapValue_Value_Rec
	//	*RecursiveMapValue_Value_ArrayRec
	Value isRecursiveMapValue_Value_Value `protobuf_oneof:"value"`
}

func (m *RecursiveMapValue_Value) Reset()      { *m = RecursiveMapValue_Value{} }
func (*RecursiveMapValue_Value) ProtoMessage() {}
func (*RecursiveMapValue_Value) Descriptor() ([]byte, []int) {
	return fileDescriptor_61e9adc6ddde3e19, []int{14, 0}
}
func (m *RecursiveMapValue_Value) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RecursiveMapValue_Value) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RecursiveMapValue_Value.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RecursiveMapValue_Value) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RecursiveMapValue_Value.Merge(m, src)
}
func (m *RecursiveMapValue_Value) XXX_Size() int {
	return m.Size()
}
func (m *RecursiveMapValue_Value) XXX_DiscardUnknown() {
	xxx_messageInfo_RecursiveMapValue_Value.DiscardUnknown(m)
}

var xxx_messageInfo_RecursiveMapValue_Value proto.InternalMessageInfo

type isRecursiveMapValue_Value_Value interface {
	isRecursiveMapValue_Value_Value()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type RecursiveMapValue_Value_D struct {
	D *types.DoubleValue `protobuf:"bytes,2,opt,name=d,proto3,oneof" json:"d,omitempty"`
}
type RecursiveMapValue_Value_I32 struct {
	I32 *types.Int32Value `protobuf:"bytes,3,opt,name=i32,proto3,oneof" json:"i32,omitempty"`
}
type RecursiveMapValue_Value_I64 struct {
	I64 *types.Int64Value `protobuf:"bytes,4,opt,name=i64,proto3,oneof" json:"i64,omitempty"`
}
type RecursiveMapValue_Value_Str struct {
	Str *types.StringValue `protobuf:"bytes,5,opt,name=str,proto3,oneof" json:"str,omitempty"`
}
type RecursiveMapValue_Value_Rec struct {
	Rec *RecursiveMapValue `protobuf:"bytes,6,opt,name=rec,proto3,oneof" json:"rec,omitempty"`
}
type RecursiveMapValue_Value_ArrayRec struct {
	ArrayRec *RecursiveMapValue_Array `protobuf:"bytes,7,opt,name=array_rec,json=arrayRec,proto3,oneof" json:"array_rec,omitempty"`
}

func (*RecursiveMapValue_Value_D) isRecursiveMapValue_Value_Value()        {}
func (*RecursiveMapValue_Value_I32) isRecursiveMapValue_Value_Value()      {}
func (*RecursiveMapValue_Value_I64) isRecursiveMapValue_Value_Value()      {}
func (*RecursiveMapValue_Value_Str) isRecursiveMapValue_Value_Value()      {}
func (*RecursiveMapValue_Value_Rec) isRecursiveMapValue_Value_Value()      {}
func (*RecursiveMapValue_Value_ArrayRec) isRecursiveMapValue_Value_Value() {}

func (m *RecursiveMapValue_Value) GetValue() isRecursiveMapValue_Value_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *RecursiveMapValue_Value) GetD() *types.DoubleValue {
	if x, ok := m.GetValue().(*RecursiveMapValue_Value_D); ok {
		return x.D
	}
	return nil
}

func (m *RecursiveMapValue_Value) GetI32() *types.Int32Value {
	if x, ok := m.GetValue().(*RecursiveMapValue_Value_I32); ok {
		return x.I32
	}
	return nil
}

func (m *RecursiveMapValue_Value) GetI64() *types.Int64Value {
	if x, ok := m.GetValue().(*RecursiveMapValue_Value_I64); ok {
		return x.I64
	}
	return nil
}

func (m *RecursiveMapValue_Value) GetStr() *types.StringValue {
	if x, ok := m.GetValue().(*RecursiveMapValue_Value_Str); ok {
		return x.Str
	}
	return nil
}

func (m *RecursiveMapValue_Value) GetRec() *RecursiveMapValue {
	if x, ok := m.GetValue().(*RecursiveMapValue_Value_Rec); ok {
		return x.Rec
	}
	return nil
}

func (m *RecursiveMapValue_Value) GetArrayRec() *RecursiveMapValue_Array {
	if x, ok := m.GetValue().(*RecursiveMapValue_Value_ArrayRec); ok {
		return x.ArrayRec
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*RecursiveMapValue_Value) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*RecursiveMapValue_Value_D)(nil),
		(*RecursiveMapValue_Value_I32)(nil),
		(*RecursiveMapValue_Value_I64)(nil),
		(*RecursiveMapValue_Value_Str)(nil),
		(*RecursiveMapValue_Value_Rec)(nil),
		(*RecursiveMapValue_Value_ArrayRec)(nil),
	}
}

type RecursiveMapValue_Array struct {
	Values []*RecursiveMapValue_Value `protobuf:"bytes,1,rep,name=values,proto3" json:"values,omitempty"`
}

func (m *RecursiveMapValue_Array) Reset()      { *m = RecursiveMapValue_Array{} }
func (*RecursiveMapValue_Array) ProtoMessage() {}
func (*RecursiveMapValue_Array) Descriptor() ([]byte, []int) {
	return fileDescriptor_61e9adc6ddde3e19, []int{14, 1}
}
func (m *RecursiveMapValue_Array) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RecursiveMapValue_Array) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RecursiveMapValue_Array.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RecursiveMapValue_Array) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RecursiveMapValue_Array.Merge(m, src)
}
func (m *RecursiveMapValue_Array) XXX_Size() int {
	return m.Size()
}
func (m *RecursiveMapValue_Array) XXX_DiscardUnknown() {
	xxx_messageInfo_RecursiveMapValue_Array.DiscardUnknown(m)
}

var xxx_messageInfo_RecursiveMapValue_Array proto.InternalMessageInfo

func (m *RecursiveMapValue_Array) GetValues() []*RecursiveMapValue_Value {
	if m != nil {
		return m.Values
	}
	return nil
}

type RecursiveMapValue_Item struct {
	Key   string                   `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value *RecursiveMapValue_Value `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *RecursiveMapValue_Item) Reset()      { *m = RecursiveMapValue_Item{} }
func (*RecursiveMapValue_Item) ProtoMessage() {}
func (*RecursiveMapValue_Item) Descriptor() ([]byte, []int) {
	return fileDescriptor_61e9adc6ddde3e19, []int{14, 2}
}
func (m *RecursiveMapValue_Item) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RecursiveMapValue_Item) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RecursiveMapValue_Item.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RecursiveMapValue_Item) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RecursiveMapValue_Item.Merge(m, src)
}
func (m *RecursiveMapValue_Item) XXX_Size() int {
	return m.Size()
}
func (m *RecursiveMapValue_Item) XXX_DiscardUnknown() {
	xxx_messageInfo_RecursiveMapValue_Item.DiscardUnknown(m)
}

var xxx_messageInfo_RecursiveMapValue_Item proto.InternalMessageInfo

func (m *RecursiveMapValue_Item) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *RecursiveMapValue_Item) GetValue() *RecursiveMapValue_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func init() {
	proto.RegisterEnum("dialog.SupportedServerMethodsType", SupportedServerMethodsType_name, SupportedServerMethodsType_value)
	proto.RegisterEnum("dialog.RtcpMuxPolicy", RtcpMuxPolicy_name, RtcpMuxPolicy_value)
	proto.RegisterEnum("dialog.UpdateOptimization", UpdateOptimization_name, UpdateOptimization_value)
	proto.RegisterType((*ResponseVoid)(nil), "dialog.ResponseVoid")
	proto.RegisterType((*ResponseSeq)(nil), "dialog.ResponseSeq")
	proto.RegisterType((*ResponseSeqDate)(nil), "dialog.ResponseSeqDate")
	proto.RegisterType((*ResponseSeqDateMid)(nil), "dialog.ResponseSeqDateMid")
	proto.RegisterType((*ResponseBool)(nil), "dialog.ResponseBool")
	proto.RegisterType((*Config)(nil), "dialog.Config")
	proto.RegisterType((*ServicePeers)(nil), "dialog.ServicePeers")
	proto.RegisterType((*ServerMetaInfo)(nil), "dialog.ServerMetaInfo")
	proto.RegisterType((*CallsConfig)(nil), "dialog.CallsConfig")
	proto.RegisterType((*InvitesConfig)(nil), "dialog.InvitesConfig")
	proto.RegisterType((*Discover)(nil), "dialog.Discover")
	proto.RegisterType((*Extension)(nil), "dialog.Extension")
	proto.RegisterType((*Any)(nil), "dialog.Any")
	proto.RegisterType((*UpdateConfig)(nil), "dialog.UpdateConfig")
	proto.RegisterType((*RecursiveMapValue)(nil), "dialog.RecursiveMapValue")
	proto.RegisterType((*RecursiveMapValue_Value)(nil), "dialog.RecursiveMapValue.Value")
	proto.RegisterType((*RecursiveMapValue_Array)(nil), "dialog.RecursiveMapValue.Array")
	proto.RegisterType((*RecursiveMapValue_Item)(nil), "dialog.RecursiveMapValue.Item")
}

func init() { proto.RegisterFile("miscellaneous.proto", fileDescriptor_61e9adc6ddde3e19) }

var fileDescriptor_61e9adc6ddde3e19 = []byte{
	// 1617 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xd4, 0x98, 0x4d, 0x6f, 0x1b, 0x5d,
	0x15, 0xc7, 0x3d, 0x76, 0xec, 0x38, 0xc7, 0x4e, 0xe2, 0xdc, 0xbc, 0x3c, 0x7e, 0xfc, 0xf0, 0x4c,
	0x5d, 0xa3, 0x4a, 0xa6, 0x50, 0x27, 0x72, 0x42, 0x11, 0x20, 0x51, 0x1c, 0xdb, 0x4d, 0xac, 0xd6,
	0x2f, 0x1d, 0xdb, 0x2d, 0x2d, 0x12, 0xa3, 0xf1, 0xcc, 0x8d, 0x73, 0xe9, 0xbc, 0x75, 0x66, 0x6c,
	0xe2, 0xae, 0x58, 0xb1, 0xa8, 0x84, 0x40, 0x48, 0x7c, 0x07, 0xbe, 0x06, 0x3b, 0x84, 0x84, 0x94,
	0x65, 0x17, 0x2c, 0xa8, 0xbb, 0x41, 0x95, 0x90, 0xfa, 0x11, 0xd0, 0xbd, 0x33, 0xe3, 0xd7, 0x49,
	0xa2, 0x74, 0x81, 0xc4, 0x2a, 0xc9, 0x9c, 0xff, 0xf9, 0xcd, 0xb9, 0xe7, 0x9e, 0x73, 0xee, 0x9d,
	0xc0, 0xb6, 0x46, 0x6c, 0x19, 0xab, 0xaa, 0xa4, 0x63, 0x63, 0x60, 0x17, 0x4c, 0xcb, 0x70, 0x0c,
	0x14, 0x53, 0x88, 0xa4, 0x1a, 0xfd, 0x0c, 0xdf, 0x37, 0x8c, 0xbe, 0x8a, 0xf7, 0xd9, 0xd3, 0xde,
	0xe0, 0x6c, 0xff, 0x37, 0x96, 0x64, 0x9a, 0xd8, 0xf2, 0x74, 0x99, 0x2d, 0x05, 0x9f, 0x11, 0x9d,
	0x38, 0xc4, 0xd0, 0xfd, 0x47, 0x09, 0x13, 0x4f, 0xed, 0xbb, 0xb6, 0x2c, 0xa9, 0x92, 0xd9, 0xdb,
	0xf7, 0x7e, 0xba, 0x8f, 0x73, 0x0f, 0x20, 0x29, 0x60, 0xdb, 0x34, 0x74, 0x1b, 0x3f, 0x37, 0x88,
	0xf2, 0x93, 0x6f, 0xc7, 0x8f, 0x32, 0x90, 0x26, 0x5a, 0x41, 0x51, 0xfb, 0x85, 0xbe, 0x65, 0xca,
	0x85, 0x13, 0xcb, 0x94, 0x7d, 0x49, 0xee, 0xcf, 0x1c, 0x24, 0xfc, 0x3f, 0xda, 0xf8, 0x0d, 0xba,
	0x03, 0x11, 0x1b, 0xbf, 0x49, 0x73, 0x59, 0x2e, 0x1f, 0x3d, 0x5e, 0x7f, 0xf7, 0xe9, 0x60, 0x0d,
	0x56, 0x87, 0xc4, 0x26, 0x3d, 0x15, 0x0b, 0xd4, 0x82, 0xbe, 0x0b, 0x51, 0xdb, 0x91, 0x1c, 0x9c,
	0x0e, 0x67, 0xb9, 0x7c, 0x72, 0x51, 0xe2, 0xda, 0xd0, 0x5d, 0x58, 0x51, 0xa8, 0x26, 0x92, 0xe5,
	0xf2, 0x91, 0x45, 0x0d, 0x33, 0xdd, 0x14, 0xd7, 0x3f, 0x38, 0xd8, 0x9c, 0x89, 0xab, 0x42, 0xa9,
	0xff, 0xab, 0xd8, 0x50, 0x11, 0x22, 0x1a, 0x51, 0xd2, 0x2b, 0x59, 0x2e, 0x9f, 0x28, 0x6e, 0x15,
	0xdc, 0x0d, 0x2b, 0x74, 0xbb, 0xb5, 0xca, 0x73, 0x49, 0x1d, 0xe0, 0xa5, 0x77, 0x6b, 0x37, 0xe7,
	0xf9, 0x92, 0x03, 0xb4, 0xb0, 0x9e, 0x3a, 0x51, 0xfe, 0xaf, 0x97, 0x24, 0x4c, 0x2b, 0xed, 0xd8,
	0x30, 0x54, 0x1a, 0xea, 0x90, 0xb2, 0xd8, 0x6a, 0xe2, 0x4b, 0xa1, 0x32, 0xdb, 0x4d, 0xcc, 0xbf,
	0xc7, 0x20, 0x56, 0x36, 0xf4, 0x33, 0xd2, 0x47, 0x87, 0xb0, 0xa1, 0x49, 0x17, 0x62, 0xdf, 0x32,
	0x06, 0xa6, 0x68, 0x93, 0xb7, 0x38, 0x38, 0x4b, 0x49, 0x4d, 0xba, 0x38, 0xa1, 0x9a, 0x36, 0x79,
	0x8b, 0xd1, 0x4f, 0x21, 0xae, 0x10, 0x5b, 0x36, 0x86, 0xd8, 0x62, 0x19, 0x4b, 0x14, 0x53, 0xfe,
	0x5a, 0x2b, 0xde, 0xf3, 0x45, 0xc0, 0xc4, 0x01, 0x09, 0xb0, 0x61, 0x9f, 0x4b, 0x16, 0x16, 0xb1,
	0xae, 0x98, 0x06, 0xd1, 0x1d, 0x2f, 0x5d, 0xdf, 0x29, 0xb8, 0xad, 0x5a, 0xf0, 0x5b, 0xb5, 0xd0,
	0x76, 0x2c, 0xa2, 0xf7, 0x03, 0x33, 0xb7, 0xce, 0x10, 0x55, 0x8f, 0x80, 0xaa, 0x90, 0x94, 0x25,
	0x55, 0xb5, 0x45, 0x99, 0xad, 0x2a, 0x1d, 0x65, 0xc4, 0x6d, 0x3f, 0xa8, 0x32, 0xb5, 0xb9, 0x0b,
	0x5e, 0x04, 0x25, 0xe4, 0xa9, 0x0d, 0x75, 0x60, 0xdb, 0x4d, 0x04, 0xd1, 0x87, 0xc4, 0xc1, 0x3e,
	0x2d, 0xc6, 0x68, 0xbb, 0x3e, 0xad, 0xc6, 0x8c, 0x57, 0xf0, 0xb6, 0x18, 0xc0, 0x95, 0x78, 0xd4,
	0x26, 0xa4, 0x6c, 0x6c, 0x0d, 0xb1, 0x25, 0x6a, 0xd8, 0x91, 0x44, 0xa2, 0x9f, 0x19, 0xe9, 0x55,
	0x86, 0xdc, 0xf3, 0x91, 0x6d, 0x66, 0xaf, 0x63, 0x47, 0xaa, 0xe9, 0x67, 0xc6, 0x22, 0x73, 0xc3,
	0x9e, 0x33, 0xa3, 0x12, 0xec, 0xca, 0x03, 0xdb, 0x31, 0x34, 0xd1, 0xb4, 0x8c, 0x33, 0xa2, 0x62,
	0xd1, 0x96, 0xcf, 0xb1, 0x26, 0xa5, 0xe3, 0x59, 0x2e, 0xbf, 0xb6, 0xe8, 0xbd, 0xed, 0x6a, 0x5b,
	0xae, 0xb4, 0xcd, 0x94, 0xe8, 0x14, 0xd6, 0x29, 0x94, 0xc8, 0x58, 0x64, 0xd3, 0x2e, 0xbd, 0xc6,
	0x02, 0xda, 0x99, 0x0d, 0x88, 0xc8, 0xb8, 0x45, 0x6d, 0x4b, 0xb5, 0x60, 0xcf, 0x18, 0xd1, 0xf7,
	0x01, 0xf0, 0x85, 0x83, 0x75, 0x9b, 0x4e, 0xd0, 0x74, 0x24, 0x1b, 0xc9, 0x27, 0x8a, 0x09, 0x1f,
	0x53, 0xd2, 0x47, 0xc2, 0x8c, 0x19, 0xfd, 0x18, 0xb6, 0x64, 0x95, 0x60, 0xdd, 0x11, 0x5f, 0x63,
	0x6c, 0x8a, 0x92, 0x4a, 0x86, 0x38, 0x0d, 0x41, 0xfd, 0xb4, 0xe9, 0xea, 0x9e, 0x60, 0x6c, 0x96,
	0xa8, 0x0a, 0xfd, 0x0a, 0xb6, 0xec, 0x81, 0x69, 0x1a, 0x96, 0x83, 0x15, 0x9a, 0xc8, 0x73, 0x43,
	0xb1, 0xd3, 0x89, 0x6c, 0x24, 0xbf, 0x51, 0xcc, 0x4d, 0xa2, 0xf6, 0x05, 0x93, 0x7c, 0x52, 0x55,
	0x67, 0x64, 0x2e, 0xd5, 0x4f, 0x6a, 0xc2, 0xf2, 0x44, 0xe8, 0x47, 0x90, 0xa2, 0x8d, 0x20, 0x9f,
	0x4b, 0xba, 0x8e, 0x55, 0xb7, 0x15, 0x92, 0x41, 0xad, 0x40, 0xfb, 0xa5, 0xec, 0xaa, 0x68, 0x33,
	0xe4, 0x7e, 0xcf, 0x41, 0xb2, 0x3d, 0x9f, 0x91, 0xb8, 0x8d, 0xe5, 0x81, 0x45, 0x9c, 0x11, 0x6b,
	0xa6, 0x44, 0x71, 0xd3, 0x0f, 0xb0, 0x39, 0x70, 0xa8, 0x46, 0x98, 0x08, 0xd0, 0xf7, 0x60, 0xd5,
	0x0b, 0xc5, 0xeb, 0xa4, 0x25, 0xad, 0x6f, 0x47, 0xf7, 0xd8, 0x90, 0xb2, 0xcf, 0xd9, 0x00, 0x0a,
	0x10, 0xba, 0xd6, 0xdc, 0x1f, 0x38, 0xd8, 0x98, 0xaf, 0x27, 0x74, 0x00, 0x49, 0x0b, 0xab, 0x58,
	0xb2, 0xb1, 0xc8, 0x26, 0x18, 0x17, 0x94, 0xf1, 0x84, 0x27, 0x61, 0x87, 0xc0, 0x13, 0x48, 0x48,
	0x26, 0x11, 0x87, 0xd8, 0xa2, 0x1b, 0xe7, 0x85, 0xf6, 0xcd, 0x52, 0x87, 0xd6, 0x74, 0xe7, 0xe1,
	0x51, 0x60, 0x83, 0x82, 0x64, 0x92, 0xe7, 0xae, 0x77, 0xee, 0x77, 0x51, 0x48, 0xcc, 0xb4, 0x20,
	0x6a, 0xc0, 0xba, 0xdb, 0xad, 0x58, 0x97, 0x7a, 0x2a, 0x56, 0xbc, 0x2c, 0x65, 0x96, 0xf0, 0x74,
	0xe0, 0x05, 0xd2, 0xdd, 0x6e, 0xaf, 0xba, 0xee, 0xe8, 0x25, 0x6c, 0x0f, 0x89, 0x82, 0x0d, 0x71,
	0x9e, 0x1a, 0xbe, 0x2d, 0x75, 0x8b, 0x51, 0xca, 0x0b, 0x68, 0x77, 0x22, 0xcc, 0xa3, 0x23, 0xb7,
	0x46, 0x33, 0xca, 0x1c, 0x5a, 0x82, 0xaf, 0x66, 0xd1, 0xb4, 0xf8, 0x34, 0xac, 0xf5, 0x68, 0x33,
	0xae, 0x5c, 0x9d, 0xee, 0xc3, 0x62, 0x20, 0x7f, 0x67, 0xca, 0xaf, 0x4b, 0x17, 0x75, 0x97, 0x83,
	0x9e, 0xc2, 0xa6, 0xe5, 0xc8, 0xa6, 0xa8, 0x0d, 0x2e, 0x44, 0xd3, 0x50, 0x89, 0x3c, 0x62, 0x93,
	0x71, 0x63, 0x3a, 0xcb, 0x04, 0x47, 0x36, 0xeb, 0x83, 0x8b, 0x16, 0x33, 0x2e, 0x0d, 0x59, 0x6b,
	0xd6, 0x8a, 0x44, 0xd8, 0xc3, 0x9a, 0xf1, 0x6b, 0x22, 0xfa, 0xc5, 0x3b, 0x49, 0x47, 0xec, 0xb6,
	0xe9, 0xd8, 0x61, 0xa0, 0xb6, 0xc7, 0xf1, 0x33, 0x22, 0xc2, 0x9e, 0x2d, 0x5b, 0x18, 0xeb, 0x22,
	0x9d, 0xee, 0x44, 0xef, 0x4f, 0x5e, 0xb0, 0x7a, 0xeb, 0x17, 0xb8, 0xa0, 0xb6, 0xcb, 0xf1, 0x5e,
	0x90, 0xfb, 0x4f, 0x18, 0xd6, 0xe7, 0xa6, 0x37, 0x7a, 0x0c, 0xf1, 0x1e, 0x6d, 0x8b, 0x81, 0xa5,
	0x7a, 0x55, 0x78, 0xab, 0x63, 0x68, 0x95, 0x3a, 0x77, 0x2d, 0x15, 0xf5, 0xfc, 0xcd, 0xf4, 0x4e,
	0x8e, 0x81, 0xa5, 0x8a, 0xa6, 0x85, 0xcf, 0xc8, 0x85, 0x57, 0x86, 0xb7, 0xc2, 0xee, 0xcc, 0x1c,
	0x22, 0x5d, 0x4b, 0x6d, 0x31, 0x10, 0x7a, 0x09, 0xc8, 0xc2, 0xb6, 0xa1, 0x0e, 0xe7, 0xf0, 0x91,
	0xdb, 0xe3, 0x53, 0x1e, 0x66, 0x8a, 0xee, 0x42, 0xca, 0x3d, 0x93, 0xa7, 0xe1, 0x7f, 0xc9, 0xa9,
	0xec, 0x1e, 0xec, 0x93, 0xb8, 0x73, 0x3f, 0x87, 0xb8, 0x7f, 0x1f, 0x40, 0x47, 0x10, 0x75, 0x4f,
	0x1a, 0x8e, 0x1d, 0x11, 0x8b, 0xd3, 0x6b, 0xe9, 0x22, 0xc3, 0xc4, 0xb9, 0x3a, 0xac, 0x55, 0xfd,
	0xe3, 0x03, 0x7d, 0x0b, 0x61, 0xa2, 0x04, 0xdf, 0x4f, 0xc2, 0x44, 0xf1, 0xee, 0x67, 0x52, 0xf0,
	0x1d, 0x8e, 0x99, 0x72, 0xcf, 0x20, 0x52, 0xd2, 0x47, 0x28, 0x0f, 0x71, 0x67, 0x64, 0x4e, 0x77,
	0x7d, 0xe9, 0xcc, 0x5c, 0xa5, 0x66, 0xba, 0xaf, 0xd9, 0x39, 0x66, 0xf2, 0xdd, 0xa7, 0x83, 0x38,
	0xc4, 0xce, 0x89, 0xa2, 0x60, 0xdd, 0x43, 0xfe, 0x89, 0x83, 0x64, 0xd7, 0xa4, 0x63, 0xd5, 0x2b,
	0xa9, 0x1f, 0x42, 0xcc, 0xbb, 0x37, 0xb8, 0x05, 0xb5, 0x31, 0xb9, 0x85, 0x04, 0x5e, 0x18, 0x3c,
	0x31, 0x9d, 0xb8, 0xee, 0x6f, 0xe2, 0x39, 0x9d, 0xf1, 0x5f, 0x30, 0x71, 0x5d, 0xf7, 0x53, 0x7a,
	0x06, 0xfc, 0x73, 0x05, 0xb6, 0x04, 0xda, 0x5d, 0x36, 0x19, 0xe2, 0xba, 0x64, 0x32, 0x07, 0x54,
	0x86, 0x28, 0x71, 0xb0, 0xe6, 0x6f, 0x01, 0x3f, 0x19, 0x02, 0x8b, 0xca, 0x42, 0xcd, 0xc1, 0xda,
	0xd2, 0x8e, 0x30, 0xdf, 0xcc, 0x5f, 0xc3, 0x10, 0x75, 0x71, 0x3f, 0x00, 0x4e, 0xb9, 0xb2, 0xba,
	0x2b, 0xc6, 0xa0, 0xa7, 0x62, 0x26, 0x3c, 0x0d, 0x09, 0x9c, 0x82, 0xf6, 0x21, 0x42, 0x0e, 0x8b,
	0x5e, 0xb9, 0x5e, 0x37, 0xda, 0x4e, 0x43, 0x02, 0x55, 0x32, 0x87, 0x87, 0x47, 0xd7, 0xcd, 0x42,
	0x2f, 0x11, 0xcc, 0xe1, 0xe1, 0x11, 0x3a, 0x80, 0x88, 0xed, 0x58, 0xde, 0xdd, 0xef, 0xda, 0xba,
	0xa5, 0x1e, 0xb6, 0x63, 0xa1, 0x07, 0x10, 0xb1, 0xb0, 0xec, 0x8d, 0xaf, 0xaf, 0xaf, 0x4c, 0x07,
	0x95, 0x5b, 0x58, 0x46, 0x3f, 0x83, 0x35, 0xc9, 0xb2, 0xa4, 0x91, 0x48, 0x9d, 0xdc, 0x91, 0x74,
	0xe7, 0xea, 0x1c, 0x96, 0xa8, 0xf4, 0x34, 0x24, 0xc4, 0x99, 0x8f, 0x80, 0xe5, 0xe3, 0x55, 0xef,
	0xea, 0x9e, 0x69, 0x42, 0x94, 0x59, 0xd1, 0x63, 0x88, 0xb1, 0x27, 0xfe, 0x96, 0x5c, 0x83, 0x0b,
	0xdc, 0x73, 0xcf, 0x3b, 0xa3, 0xc1, 0x0a, 0xdd, 0x32, 0xfa, 0xa1, 0xf3, 0x1a, 0x8f, 0x82, 0x6b,
	0x9a, 0x5a, 0x50, 0xc5, 0xff, 0x7a, 0x08, 0xdf, 0x14, 0x7e, 0xe0, 0xfb, 0x5c, 0xe7, 0xfb, 0x75,
	0xc8, 0x5c, 0x7d, 0xd5, 0x42, 0x19, 0xd8, 0x6b, 0x34, 0x1b, 0x55, 0xb1, 0xdd, 0x6d, 0xb5, 0x9a,
	0x42, 0xa7, 0x5a, 0x11, 0xeb, 0xd5, 0xce, 0x69, 0xb3, 0xd2, 0x4e, 0x85, 0xd0, 0x36, 0x6c, 0x96,
	0x4f, 0x4b, 0x8d, 0x93, 0xaa, 0xd8, 0x2a, 0xb5, 0xdb, 0x2f, 0x9a, 0x42, 0x25, 0xc5, 0xdd, 0xef,
	0xc1, 0xfa, 0xdc, 0x39, 0x84, 0xbe, 0x86, 0x5d, 0xa1, 0x53, 0x6e, 0xd5, 0xbb, 0xbf, 0x68, 0x35,
	0x9f, 0xd6, 0xca, 0x2f, 0xc5, 0x6e, 0xe3, 0x49, 0xa3, 0xf9, 0xa2, 0x91, 0x0a, 0xa1, 0x6f, 0xe0,
	0xab, 0x79, 0x53, 0xa3, 0x7a, 0xd2, 0xec, 0xd4, 0x4a, 0x9d, 0x6a, 0x8a, 0x5b, 0xf6, 0x13, 0xaa,
	0xcf, 0xba, 0x35, 0xa1, 0x9a, 0x0a, 0xdf, 0xff, 0x25, 0x20, 0xb7, 0x4b, 0x9b, 0xa6, 0x43, 0x34,
	0xf2, 0x56, 0xa2, 0x5f, 0xfc, 0x88, 0x87, 0x4c, 0xb7, 0x55, 0x29, 0x75, 0xaa, 0xcd, 0x56, 0xa7,
	0x56, 0xaf, 0xbd, 0x2a, 0x75, 0x6a, 0xcd, 0xc6, 0xcc, 0xdb, 0xee, 0xc1, 0xdd, 0x00, 0x7b, 0xbb,
	0x23, 0xd4, 0x5a, 0x62, 0xb5, 0xd1, 0xa9, 0x75, 0x6a, 0xd5, 0x76, 0x2a, 0x7c, 0xdc, 0x1d, 0x3f,
	0xda, 0x83, 0x9d, 0xd9, 0xcf, 0x2d, 0xef, 0x8a, 0x6c, 0x5f, 0x7e, 0xe0, 0x43, 0xef, 0x3f, 0xf0,
	0xa1, 0xcf, 0x1f, 0x78, 0xee, 0xb7, 0x63, 0x9e, 0xfb, 0xcb, 0x98, 0xe7, 0xfe, 0x36, 0xe6, 0xb9,
	0xcb, 0x31, 0xcf, 0xfd, 0x6b, 0xcc, 0x73, 0xff, 0x1e, 0xf3, 0xa1, 0xcf, 0x63, 0x9e, 0xfb, 0xe3,
	0x47, 0x3e, 0x74, 0xf9, 0x91, 0x0f, 0xbd, 0xff, 0xc8, 0x87, 0x5e, 0x79, 0xff, 0xbb, 0xe8, 0xc5,
	0x58, 0xed, 0x1e, 0xfe, 0x37, 0x00, 0x00, 0xff, 0xff, 0x40, 0x0b, 0x59, 0xd4, 0xe1, 0x10, 0x00,
	0x00,
}

func (x SupportedServerMethodsType) String() string {
	s, ok := SupportedServerMethodsType_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x RtcpMuxPolicy) String() string {
	s, ok := RtcpMuxPolicy_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x UpdateOptimization) String() string {
	s, ok := UpdateOptimization_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *ResponseVoid) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ResponseVoid)
	if !ok {
		that2, ok := that.(ResponseVoid)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *ResponseSeq) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ResponseSeq)
	if !ok {
		that2, ok := that.(ResponseSeq)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Seq != that1.Seq {
		return false
	}
	if !bytes.Equal(this.State, that1.State) {
		return false
	}
	if this.Date != that1.Date {
		return false
	}
	return true
}
func (this *ResponseSeqDate) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ResponseSeqDate)
	if !ok {
		that2, ok := that.(ResponseSeqDate)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Seq != that1.Seq {
		return false
	}
	if !bytes.Equal(this.State, that1.State) {
		return false
	}
	if this.Date != that1.Date {
		return false
	}
	if !this.Mid.Equal(that1.Mid) {
		return false
	}
	return true
}
func (this *ResponseSeqDateMid) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ResponseSeqDateMid)
	if !ok {
		that2, ok := that.(ResponseSeqDateMid)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Seq != that1.Seq {
		return false
	}
	if !bytes.Equal(this.State, that1.State) {
		return false
	}
	if this.Date != that1.Date {
		return false
	}
	if !this.Mid.Equal(that1.Mid) {
		return false
	}
	return true
}
func (this *ResponseBool) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ResponseBool)
	if !ok {
		that2, ok := that.(ResponseBool)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Value != that1.Value {
		return false
	}
	return true
}
func (this *Config) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Config)
	if !ok {
		that2, ok := that.(Config)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.MaxGroupSize != that1.MaxGroupSize {
		return false
	}
	if !this.Discover.Equal(that1.Discover) {
		return false
	}
	if !this.ShareEndpoint.Equal(that1.ShareEndpoint) {
		return false
	}
	if !this.CallsConfig.Equal(that1.CallsConfig) {
		return false
	}
	if !this.GroupInviteConfig.Equal(that1.GroupInviteConfig) {
		return false
	}
	if !this.ServerMetaInfo.Equal(that1.ServerMetaInfo) {
		return false
	}
	if this.CustomProfileSchema != that1.CustomProfileSchema {
		return false
	}
	if !this.ServicePeers.Equal(that1.ServicePeers) {
		return false
	}
	if len(this.Extensions) != len(that1.Extensions) {
		return false
	}
	for i := range this.Extensions {
		if !this.Extensions[i].Equal(that1.Extensions[i]) {
			return false
		}
	}
	if this.ClientKeepAlive != that1.ClientKeepAlive {
		return false
	}
	if len(this.SupportedMethods) != len(that1.SupportedMethods) {
		return false
	}
	for i := range this.SupportedMethods {
		if this.SupportedMethods[i] != that1.SupportedMethods[i] {
			return false
		}
	}
	if this.MaxChannelSize != that1.MaxChannelSize {
		return false
	}
	return true
}
func (this *ServicePeers) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ServicePeers)
	if !ok {
		that2, ok := that.(ServicePeers)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Security.Equal(that1.Security) {
		return false
	}
	if !this.Support.Equal(that1.Support) {
		return false
	}
	if !this.Stash.Equal(that1.Stash) {
		return false
	}
	return true
}
func (this *ServerMetaInfo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ServerMetaInfo)
	if !ok {
		that2, ok := that.(ServerMetaInfo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ReleaseDate != that1.ReleaseDate {
		return false
	}
	if !this.ApiVersion.Equal(that1.ApiVersion) {
		return false
	}
	return true
}
func (this *CallsConfig) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CallsConfig)
	if !ok {
		that2, ok := that.(CallsConfig)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.CallsEnabled.Equal(that1.CallsEnabled) {
		return false
	}
	if !this.VideoCallsEnabled.Equal(that1.VideoCallsEnabled) {
		return false
	}
	if !this.GroupCallsEnabled.Equal(that1.GroupCallsEnabled) {
		return false
	}
	if !this.GroupCallsMaxMembers.Equal(that1.GroupCallsMaxMembers) {
		return false
	}
	if this.RtcpMuxPolicy != that1.RtcpMuxPolicy {
		return false
	}
	if !this.EmojiSecurityEnabled.Equal(that1.EmojiSecurityEnabled) {
		return false
	}
	if !this.ScreenSharingEnabled.Equal(that1.ScreenSharingEnabled) {
		return false
	}
	return true
}
func (this *InvitesConfig) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*InvitesConfig)
	if !ok {
		that2, ok := that.(InvitesConfig)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.BaseUrl.Equal(that1.BaseUrl) {
		return false
	}
	if !this.GroupInviteUrlPrefix.Equal(that1.GroupInviteUrlPrefix) {
		return false
	}
	if !this.ResolveUrlPrefix.Equal(that1.ResolveUrlPrefix) {
		return false
	}
	if !this.ShareInviteUrl.Equal(that1.ShareInviteUrl) {
		return false
	}
	return true
}
func (this *Discover) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Discover)
	if !ok {
		that2, ok := that.(Discover)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Peers) != len(that1.Peers) {
		return false
	}
	for i := range this.Peers {
		if !this.Peers[i].Equal(that1.Peers[i]) {
			return false
		}
	}
	return true
}
func (this *Extension) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Extension)
	if !ok {
		that2, ok := that.(Extension)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if !bytes.Equal(this.Data, that1.Data) {
		return false
	}
	return true
}
func (this *Any) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Any)
	if !ok {
		that2, ok := that.(Any)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.TypeUrl != that1.TypeUrl {
		return false
	}
	if !bytes.Equal(this.Data, that1.Data) {
		return false
	}
	return true
}
func (this *UpdateConfig) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpdateConfig)
	if !ok {
		that2, ok := that.(UpdateConfig)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Config.Equal(that1.Config) {
		return false
	}
	if !this.ConfigHash.Equal(that1.ConfigHash) {
		return false
	}
	return true
}
func (this *RecursiveMapValue) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RecursiveMapValue)
	if !ok {
		that2, ok := that.(RecursiveMapValue)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Items) != len(that1.Items) {
		return false
	}
	for i := range this.Items {
		if !this.Items[i].Equal(that1.Items[i]) {
			return false
		}
	}
	return true
}
func (this *RecursiveMapValue_Value) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RecursiveMapValue_Value)
	if !ok {
		that2, ok := that.(RecursiveMapValue_Value)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.Value == nil {
		if this.Value != nil {
			return false
		}
	} else if this.Value == nil {
		return false
	} else if !this.Value.Equal(that1.Value) {
		return false
	}
	return true
}
func (this *RecursiveMapValue_Value_D) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RecursiveMapValue_Value_D)
	if !ok {
		that2, ok := that.(RecursiveMapValue_Value_D)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.D.Equal(that1.D) {
		return false
	}
	return true
}
func (this *RecursiveMapValue_Value_I32) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RecursiveMapValue_Value_I32)
	if !ok {
		that2, ok := that.(RecursiveMapValue_Value_I32)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.I32.Equal(that1.I32) {
		return false
	}
	return true
}
func (this *RecursiveMapValue_Value_I64) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RecursiveMapValue_Value_I64)
	if !ok {
		that2, ok := that.(RecursiveMapValue_Value_I64)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.I64.Equal(that1.I64) {
		return false
	}
	return true
}
func (this *RecursiveMapValue_Value_Str) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RecursiveMapValue_Value_Str)
	if !ok {
		that2, ok := that.(RecursiveMapValue_Value_Str)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Str.Equal(that1.Str) {
		return false
	}
	return true
}
func (this *RecursiveMapValue_Value_Rec) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RecursiveMapValue_Value_Rec)
	if !ok {
		that2, ok := that.(RecursiveMapValue_Value_Rec)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Rec.Equal(that1.Rec) {
		return false
	}
	return true
}
func (this *RecursiveMapValue_Value_ArrayRec) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RecursiveMapValue_Value_ArrayRec)
	if !ok {
		that2, ok := that.(RecursiveMapValue_Value_ArrayRec)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ArrayRec.Equal(that1.ArrayRec) {
		return false
	}
	return true
}
func (this *RecursiveMapValue_Array) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RecursiveMapValue_Array)
	if !ok {
		that2, ok := that.(RecursiveMapValue_Array)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Values) != len(that1.Values) {
		return false
	}
	for i := range this.Values {
		if !this.Values[i].Equal(that1.Values[i]) {
			return false
		}
	}
	return true
}
func (this *RecursiveMapValue_Item) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RecursiveMapValue_Item)
	if !ok {
		that2, ok := that.(RecursiveMapValue_Item)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Key != that1.Key {
		return false
	}
	if !this.Value.Equal(that1.Value) {
		return false
	}
	return true
}
func (this *ResponseVoid) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&dialog.ResponseVoid{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ResponseSeq) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&dialog.ResponseSeq{")
	s = append(s, "Seq: "+fmt.Sprintf("%#v", this.Seq)+",\n")
	s = append(s, "State: "+fmt.Sprintf("%#v", this.State)+",\n")
	s = append(s, "Date: "+fmt.Sprintf("%#v", this.Date)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ResponseSeqDate) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&dialog.ResponseSeqDate{")
	s = append(s, "Seq: "+fmt.Sprintf("%#v", this.Seq)+",\n")
	s = append(s, "State: "+fmt.Sprintf("%#v", this.State)+",\n")
	s = append(s, "Date: "+fmt.Sprintf("%#v", this.Date)+",\n")
	if this.Mid != nil {
		s = append(s, "Mid: "+fmt.Sprintf("%#v", this.Mid)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ResponseSeqDateMid) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&dialog.ResponseSeqDateMid{")
	s = append(s, "Seq: "+fmt.Sprintf("%#v", this.Seq)+",\n")
	s = append(s, "State: "+fmt.Sprintf("%#v", this.State)+",\n")
	s = append(s, "Date: "+fmt.Sprintf("%#v", this.Date)+",\n")
	if this.Mid != nil {
		s = append(s, "Mid: "+fmt.Sprintf("%#v", this.Mid)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ResponseBool) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&dialog.ResponseBool{")
	s = append(s, "Value: "+fmt.Sprintf("%#v", this.Value)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Config) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 16)
	s = append(s, "&dialog.Config{")
	s = append(s, "MaxGroupSize: "+fmt.Sprintf("%#v", this.MaxGroupSize)+",\n")
	if this.Discover != nil {
		s = append(s, "Discover: "+fmt.Sprintf("%#v", this.Discover)+",\n")
	}
	if this.ShareEndpoint != nil {
		s = append(s, "ShareEndpoint: "+fmt.Sprintf("%#v", this.ShareEndpoint)+",\n")
	}
	if this.CallsConfig != nil {
		s = append(s, "CallsConfig: "+fmt.Sprintf("%#v", this.CallsConfig)+",\n")
	}
	if this.GroupInviteConfig != nil {
		s = append(s, "GroupInviteConfig: "+fmt.Sprintf("%#v", this.GroupInviteConfig)+",\n")
	}
	if this.ServerMetaInfo != nil {
		s = append(s, "ServerMetaInfo: "+fmt.Sprintf("%#v", this.ServerMetaInfo)+",\n")
	}
	s = append(s, "CustomProfileSchema: "+fmt.Sprintf("%#v", this.CustomProfileSchema)+",\n")
	if this.ServicePeers != nil {
		s = append(s, "ServicePeers: "+fmt.Sprintf("%#v", this.ServicePeers)+",\n")
	}
	if this.Extensions != nil {
		s = append(s, "Extensions: "+fmt.Sprintf("%#v", this.Extensions)+",\n")
	}
	s = append(s, "ClientKeepAlive: "+fmt.Sprintf("%#v", this.ClientKeepAlive)+",\n")
	s = append(s, "SupportedMethods: "+fmt.Sprintf("%#v", this.SupportedMethods)+",\n")
	s = append(s, "MaxChannelSize: "+fmt.Sprintf("%#v", this.MaxChannelSize)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ServicePeers) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&dialog.ServicePeers{")
	if this.Security != nil {
		s = append(s, "Security: "+fmt.Sprintf("%#v", this.Security)+",\n")
	}
	if this.Support != nil {
		s = append(s, "Support: "+fmt.Sprintf("%#v", this.Support)+",\n")
	}
	if this.Stash != nil {
		s = append(s, "Stash: "+fmt.Sprintf("%#v", this.Stash)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ServerMetaInfo) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&dialog.ServerMetaInfo{")
	s = append(s, "ReleaseDate: "+fmt.Sprintf("%#v", this.ReleaseDate)+",\n")
	if this.ApiVersion != nil {
		s = append(s, "ApiVersion: "+fmt.Sprintf("%#v", this.ApiVersion)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CallsConfig) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 11)
	s = append(s, "&dialog.CallsConfig{")
	if this.CallsEnabled != nil {
		s = append(s, "CallsEnabled: "+fmt.Sprintf("%#v", this.CallsEnabled)+",\n")
	}
	if this.VideoCallsEnabled != nil {
		s = append(s, "VideoCallsEnabled: "+fmt.Sprintf("%#v", this.VideoCallsEnabled)+",\n")
	}
	if this.GroupCallsEnabled != nil {
		s = append(s, "GroupCallsEnabled: "+fmt.Sprintf("%#v", this.GroupCallsEnabled)+",\n")
	}
	if this.GroupCallsMaxMembers != nil {
		s = append(s, "GroupCallsMaxMembers: "+fmt.Sprintf("%#v", this.GroupCallsMaxMembers)+",\n")
	}
	s = append(s, "RtcpMuxPolicy: "+fmt.Sprintf("%#v", this.RtcpMuxPolicy)+",\n")
	if this.EmojiSecurityEnabled != nil {
		s = append(s, "EmojiSecurityEnabled: "+fmt.Sprintf("%#v", this.EmojiSecurityEnabled)+",\n")
	}
	if this.ScreenSharingEnabled != nil {
		s = append(s, "ScreenSharingEnabled: "+fmt.Sprintf("%#v", this.ScreenSharingEnabled)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *InvitesConfig) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&dialog.InvitesConfig{")
	if this.BaseUrl != nil {
		s = append(s, "BaseUrl: "+fmt.Sprintf("%#v", this.BaseUrl)+",\n")
	}
	if this.GroupInviteUrlPrefix != nil {
		s = append(s, "GroupInviteUrlPrefix: "+fmt.Sprintf("%#v", this.GroupInviteUrlPrefix)+",\n")
	}
	if this.ResolveUrlPrefix != nil {
		s = append(s, "ResolveUrlPrefix: "+fmt.Sprintf("%#v", this.ResolveUrlPrefix)+",\n")
	}
	if this.ShareInviteUrl != nil {
		s = append(s, "ShareInviteUrl: "+fmt.Sprintf("%#v", this.ShareInviteUrl)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Discover) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&dialog.Discover{")
	if this.Peers != nil {
		s = append(s, "Peers: "+fmt.Sprintf("%#v", this.Peers)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Extension) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&dialog.Extension{")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	s = append(s, "Data: "+fmt.Sprintf("%#v", this.Data)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Any) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&dialog.Any{")
	s = append(s, "TypeUrl: "+fmt.Sprintf("%#v", this.TypeUrl)+",\n")
	s = append(s, "Data: "+fmt.Sprintf("%#v", this.Data)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UpdateConfig) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&dialog.UpdateConfig{")
	if this.Config != nil {
		s = append(s, "Config: "+fmt.Sprintf("%#v", this.Config)+",\n")
	}
	if this.ConfigHash != nil {
		s = append(s, "ConfigHash: "+fmt.Sprintf("%#v", this.ConfigHash)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RecursiveMapValue) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&dialog.RecursiveMapValue{")
	if this.Items != nil {
		s = append(s, "Items: "+fmt.Sprintf("%#v", this.Items)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RecursiveMapValue_Value) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 10)
	s = append(s, "&dialog.RecursiveMapValue_Value{")
	if this.Value != nil {
		s = append(s, "Value: "+fmt.Sprintf("%#v", this.Value)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RecursiveMapValue_Value_D) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dialog.RecursiveMapValue_Value_D{` +
		`D:` + fmt.Sprintf("%#v", this.D) + `}`}, ", ")
	return s
}
func (this *RecursiveMapValue_Value_I32) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dialog.RecursiveMapValue_Value_I32{` +
		`I32:` + fmt.Sprintf("%#v", this.I32) + `}`}, ", ")
	return s
}
func (this *RecursiveMapValue_Value_I64) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dialog.RecursiveMapValue_Value_I64{` +
		`I64:` + fmt.Sprintf("%#v", this.I64) + `}`}, ", ")
	return s
}
func (this *RecursiveMapValue_Value_Str) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dialog.RecursiveMapValue_Value_Str{` +
		`Str:` + fmt.Sprintf("%#v", this.Str) + `}`}, ", ")
	return s
}
func (this *RecursiveMapValue_Value_Rec) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dialog.RecursiveMapValue_Value_Rec{` +
		`Rec:` + fmt.Sprintf("%#v", this.Rec) + `}`}, ", ")
	return s
}
func (this *RecursiveMapValue_Value_ArrayRec) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dialog.RecursiveMapValue_Value_ArrayRec{` +
		`ArrayRec:` + fmt.Sprintf("%#v", this.ArrayRec) + `}`}, ", ")
	return s
}
func (this *RecursiveMapValue_Array) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&dialog.RecursiveMapValue_Array{")
	if this.Values != nil {
		s = append(s, "Values: "+fmt.Sprintf("%#v", this.Values)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RecursiveMapValue_Item) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&dialog.RecursiveMapValue_Item{")
	s = append(s, "Key: "+fmt.Sprintf("%#v", this.Key)+",\n")
	if this.Value != nil {
		s = append(s, "Value: "+fmt.Sprintf("%#v", this.Value)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringMiscellaneous(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *ResponseVoid) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResponseVoid) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ResponseVoid) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *ResponseSeq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResponseSeq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ResponseSeq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Date != 0 {
		i = encodeVarintMiscellaneous(dAtA, i, uint64(m.Date))
		i--
		dAtA[i] = 0x18
	}
	if len(m.State) > 0 {
		i -= len(m.State)
		copy(dAtA[i:], m.State)
		i = encodeVarintMiscellaneous(dAtA, i, uint64(len(m.State)))
		i--
		dAtA[i] = 0x12
	}
	if m.Seq != 0 {
		i = encodeVarintMiscellaneous(dAtA, i, uint64(m.Seq))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ResponseSeqDate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResponseSeqDate) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ResponseSeqDate) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Mid != nil {
		{
			size, err := m.Mid.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMiscellaneous(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.Date != 0 {
		i = encodeVarintMiscellaneous(dAtA, i, uint64(m.Date))
		i--
		dAtA[i] = 0x18
	}
	if len(m.State) > 0 {
		i -= len(m.State)
		copy(dAtA[i:], m.State)
		i = encodeVarintMiscellaneous(dAtA, i, uint64(len(m.State)))
		i--
		dAtA[i] = 0x12
	}
	if m.Seq != 0 {
		i = encodeVarintMiscellaneous(dAtA, i, uint64(m.Seq))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ResponseSeqDateMid) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResponseSeqDateMid) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ResponseSeqDateMid) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Mid != nil {
		{
			size, err := m.Mid.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMiscellaneous(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.Date != 0 {
		i = encodeVarintMiscellaneous(dAtA, i, uint64(m.Date))
		i--
		dAtA[i] = 0x18
	}
	if len(m.State) > 0 {
		i -= len(m.State)
		copy(dAtA[i:], m.State)
		i = encodeVarintMiscellaneous(dAtA, i, uint64(len(m.State)))
		i--
		dAtA[i] = 0x12
	}
	if m.Seq != 0 {
		i = encodeVarintMiscellaneous(dAtA, i, uint64(m.Seq))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ResponseBool) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResponseBool) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ResponseBool) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Value {
		i--
		if m.Value {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Config) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Config) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Config) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.MaxChannelSize != 0 {
		i = encodeVarintMiscellaneous(dAtA, i, uint64(m.MaxChannelSize))
		i--
		dAtA[i] = 0x60
	}
	if len(m.SupportedMethods) > 0 {
		dAtA4 := make([]byte, len(m.SupportedMethods)*10)
		var j3 int
		for _, num := range m.SupportedMethods {
			for num >= 1<<7 {
				dAtA4[j3] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j3++
			}
			dAtA4[j3] = uint8(num)
			j3++
		}
		i -= j3
		copy(dAtA[i:], dAtA4[:j3])
		i = encodeVarintMiscellaneous(dAtA, i, uint64(j3))
		i--
		dAtA[i] = 0x5a
	}
	if m.ClientKeepAlive != 0 {
		i = encodeVarintMiscellaneous(dAtA, i, uint64(m.ClientKeepAlive))
		i--
		dAtA[i] = 0x50
	}
	if m.ServicePeers != nil {
		{
			size, err := m.ServicePeers.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMiscellaneous(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	if len(m.CustomProfileSchema) > 0 {
		i -= len(m.CustomProfileSchema)
		copy(dAtA[i:], m.CustomProfileSchema)
		i = encodeVarintMiscellaneous(dAtA, i, uint64(len(m.CustomProfileSchema)))
		i--
		dAtA[i] = 0x42
	}
	if m.ServerMetaInfo != nil {
		{
			size, err := m.ServerMetaInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMiscellaneous(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if m.GroupInviteConfig != nil {
		{
			size, err := m.GroupInviteConfig.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMiscellaneous(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if m.CallsConfig != nil {
		{
			size, err := m.CallsConfig.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMiscellaneous(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.ShareEndpoint != nil {
		{
			size, err := m.ShareEndpoint.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMiscellaneous(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if len(m.Extensions) > 0 {
		for iNdEx := len(m.Extensions) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Extensions[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMiscellaneous(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.Discover != nil {
		{
			size, err := m.Discover.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMiscellaneous(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.MaxGroupSize != 0 {
		i = encodeVarintMiscellaneous(dAtA, i, uint64(m.MaxGroupSize))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ServicePeers) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ServicePeers) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ServicePeers) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Stash != nil {
		{
			size, err := m.Stash.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMiscellaneous(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Support != nil {
		{
			size, err := m.Support.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMiscellaneous(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Security != nil {
		{
			size, err := m.Security.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMiscellaneous(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ServerMetaInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ServerMetaInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ServerMetaInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ApiVersion != nil {
		{
			size, err := m.ApiVersion.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMiscellaneous(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.ReleaseDate != 0 {
		i = encodeVarintMiscellaneous(dAtA, i, uint64(m.ReleaseDate))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CallsConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CallsConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CallsConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ScreenSharingEnabled != nil {
		{
			size, err := m.ScreenSharingEnabled.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMiscellaneous(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if m.EmojiSecurityEnabled != nil {
		{
			size, err := m.EmojiSecurityEnabled.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMiscellaneous(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if m.RtcpMuxPolicy != 0 {
		i = encodeVarintMiscellaneous(dAtA, i, uint64(m.RtcpMuxPolicy))
		i--
		dAtA[i] = 0x28
	}
	if m.GroupCallsMaxMembers != nil {
		{
			size, err := m.GroupCallsMaxMembers.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMiscellaneous(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.GroupCallsEnabled != nil {
		{
			size, err := m.GroupCallsEnabled.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMiscellaneous(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.VideoCallsEnabled != nil {
		{
			size, err := m.VideoCallsEnabled.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMiscellaneous(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.CallsEnabled != nil {
		{
			size, err := m.CallsEnabled.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMiscellaneous(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *InvitesConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InvitesConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InvitesConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ShareInviteUrl != nil {
		{
			size, err := m.ShareInviteUrl.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMiscellaneous(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.ResolveUrlPrefix != nil {
		{
			size, err := m.ResolveUrlPrefix.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMiscellaneous(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.GroupInviteUrlPrefix != nil {
		{
			size, err := m.GroupInviteUrlPrefix.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMiscellaneous(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.BaseUrl != nil {
		{
			size, err := m.BaseUrl.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMiscellaneous(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Discover) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Discover) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Discover) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Peers) > 0 {
		for iNdEx := len(m.Peers) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Peers[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMiscellaneous(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *Extension) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Extension) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Extension) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Data) > 0 {
		i -= len(m.Data)
		copy(dAtA[i:], m.Data)
		i = encodeVarintMiscellaneous(dAtA, i, uint64(len(m.Data)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintMiscellaneous(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Any) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Any) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Any) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Data) > 0 {
		i -= len(m.Data)
		copy(dAtA[i:], m.Data)
		i = encodeVarintMiscellaneous(dAtA, i, uint64(len(m.Data)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.TypeUrl) > 0 {
		i -= len(m.TypeUrl)
		copy(dAtA[i:], m.TypeUrl)
		i = encodeVarintMiscellaneous(dAtA, i, uint64(len(m.TypeUrl)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UpdateConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ConfigHash != nil {
		{
			size, err := m.ConfigHash.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMiscellaneous(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Config != nil {
		{
			size, err := m.Config.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMiscellaneous(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RecursiveMapValue) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RecursiveMapValue) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RecursiveMapValue) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Items) > 0 {
		for iNdEx := len(m.Items) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Items[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMiscellaneous(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *RecursiveMapValue_Value) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RecursiveMapValue_Value) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RecursiveMapValue_Value) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Value != nil {
		{
			size := m.Value.Size()
			i -= size
			if _, err := m.Value.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *RecursiveMapValue_Value_D) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RecursiveMapValue_Value_D) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.D != nil {
		{
			size, err := m.D.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMiscellaneous(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *RecursiveMapValue_Value_I32) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RecursiveMapValue_Value_I32) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.I32 != nil {
		{
			size, err := m.I32.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMiscellaneous(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *RecursiveMapValue_Value_I64) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RecursiveMapValue_Value_I64) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.I64 != nil {
		{
			size, err := m.I64.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMiscellaneous(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *RecursiveMapValue_Value_Str) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RecursiveMapValue_Value_Str) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Str != nil {
		{
			size, err := m.Str.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMiscellaneous(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	return len(dAtA) - i, nil
}
func (m *RecursiveMapValue_Value_Rec) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RecursiveMapValue_Value_Rec) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Rec != nil {
		{
			size, err := m.Rec.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMiscellaneous(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	return len(dAtA) - i, nil
}
func (m *RecursiveMapValue_Value_ArrayRec) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RecursiveMapValue_Value_ArrayRec) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ArrayRec != nil {
		{
			size, err := m.ArrayRec.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMiscellaneous(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	return len(dAtA) - i, nil
}
func (m *RecursiveMapValue_Array) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RecursiveMapValue_Array) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RecursiveMapValue_Array) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Values) > 0 {
		for iNdEx := len(m.Values) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Values[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMiscellaneous(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *RecursiveMapValue_Item) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RecursiveMapValue_Item) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RecursiveMapValue_Item) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Value != nil {
		{
			size, err := m.Value.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMiscellaneous(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Key) > 0 {
		i -= len(m.Key)
		copy(dAtA[i:], m.Key)
		i = encodeVarintMiscellaneous(dAtA, i, uint64(len(m.Key)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintMiscellaneous(dAtA []byte, offset int, v uint64) int {
	offset -= sovMiscellaneous(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ResponseVoid) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *ResponseSeq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Seq != 0 {
		n += 1 + sovMiscellaneous(uint64(m.Seq))
	}
	l = len(m.State)
	if l > 0 {
		n += 1 + l + sovMiscellaneous(uint64(l))
	}
	if m.Date != 0 {
		n += 1 + sovMiscellaneous(uint64(m.Date))
	}
	return n
}

func (m *ResponseSeqDate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Seq != 0 {
		n += 1 + sovMiscellaneous(uint64(m.Seq))
	}
	l = len(m.State)
	if l > 0 {
		n += 1 + l + sovMiscellaneous(uint64(l))
	}
	if m.Date != 0 {
		n += 1 + sovMiscellaneous(uint64(m.Date))
	}
	if m.Mid != nil {
		l = m.Mid.Size()
		n += 1 + l + sovMiscellaneous(uint64(l))
	}
	return n
}

func (m *ResponseSeqDateMid) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Seq != 0 {
		n += 1 + sovMiscellaneous(uint64(m.Seq))
	}
	l = len(m.State)
	if l > 0 {
		n += 1 + l + sovMiscellaneous(uint64(l))
	}
	if m.Date != 0 {
		n += 1 + sovMiscellaneous(uint64(m.Date))
	}
	if m.Mid != nil {
		l = m.Mid.Size()
		n += 1 + l + sovMiscellaneous(uint64(l))
	}
	return n
}

func (m *ResponseBool) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Value {
		n += 2
	}
	return n
}

func (m *Config) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MaxGroupSize != 0 {
		n += 1 + sovMiscellaneous(uint64(m.MaxGroupSize))
	}
	if m.Discover != nil {
		l = m.Discover.Size()
		n += 1 + l + sovMiscellaneous(uint64(l))
	}
	if len(m.Extensions) > 0 {
		for _, e := range m.Extensions {
			l = e.Size()
			n += 1 + l + sovMiscellaneous(uint64(l))
		}
	}
	if m.ShareEndpoint != nil {
		l = m.ShareEndpoint.Size()
		n += 1 + l + sovMiscellaneous(uint64(l))
	}
	if m.CallsConfig != nil {
		l = m.CallsConfig.Size()
		n += 1 + l + sovMiscellaneous(uint64(l))
	}
	if m.GroupInviteConfig != nil {
		l = m.GroupInviteConfig.Size()
		n += 1 + l + sovMiscellaneous(uint64(l))
	}
	if m.ServerMetaInfo != nil {
		l = m.ServerMetaInfo.Size()
		n += 1 + l + sovMiscellaneous(uint64(l))
	}
	l = len(m.CustomProfileSchema)
	if l > 0 {
		n += 1 + l + sovMiscellaneous(uint64(l))
	}
	if m.ServicePeers != nil {
		l = m.ServicePeers.Size()
		n += 1 + l + sovMiscellaneous(uint64(l))
	}
	if m.ClientKeepAlive != 0 {
		n += 1 + sovMiscellaneous(uint64(m.ClientKeepAlive))
	}
	if len(m.SupportedMethods) > 0 {
		l = 0
		for _, e := range m.SupportedMethods {
			l += sovMiscellaneous(uint64(e))
		}
		n += 1 + sovMiscellaneous(uint64(l)) + l
	}
	if m.MaxChannelSize != 0 {
		n += 1 + sovMiscellaneous(uint64(m.MaxChannelSize))
	}
	return n
}

func (m *ServicePeers) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Security != nil {
		l = m.Security.Size()
		n += 1 + l + sovMiscellaneous(uint64(l))
	}
	if m.Support != nil {
		l = m.Support.Size()
		n += 1 + l + sovMiscellaneous(uint64(l))
	}
	if m.Stash != nil {
		l = m.Stash.Size()
		n += 1 + l + sovMiscellaneous(uint64(l))
	}
	return n
}

func (m *ServerMetaInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ReleaseDate != 0 {
		n += 1 + sovMiscellaneous(uint64(m.ReleaseDate))
	}
	if m.ApiVersion != nil {
		l = m.ApiVersion.Size()
		n += 1 + l + sovMiscellaneous(uint64(l))
	}
	return n
}

func (m *CallsConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CallsEnabled != nil {
		l = m.CallsEnabled.Size()
		n += 1 + l + sovMiscellaneous(uint64(l))
	}
	if m.VideoCallsEnabled != nil {
		l = m.VideoCallsEnabled.Size()
		n += 1 + l + sovMiscellaneous(uint64(l))
	}
	if m.GroupCallsEnabled != nil {
		l = m.GroupCallsEnabled.Size()
		n += 1 + l + sovMiscellaneous(uint64(l))
	}
	if m.GroupCallsMaxMembers != nil {
		l = m.GroupCallsMaxMembers.Size()
		n += 1 + l + sovMiscellaneous(uint64(l))
	}
	if m.RtcpMuxPolicy != 0 {
		n += 1 + sovMiscellaneous(uint64(m.RtcpMuxPolicy))
	}
	if m.EmojiSecurityEnabled != nil {
		l = m.EmojiSecurityEnabled.Size()
		n += 1 + l + sovMiscellaneous(uint64(l))
	}
	if m.ScreenSharingEnabled != nil {
		l = m.ScreenSharingEnabled.Size()
		n += 1 + l + sovMiscellaneous(uint64(l))
	}
	return n
}

func (m *InvitesConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BaseUrl != nil {
		l = m.BaseUrl.Size()
		n += 1 + l + sovMiscellaneous(uint64(l))
	}
	if m.GroupInviteUrlPrefix != nil {
		l = m.GroupInviteUrlPrefix.Size()
		n += 1 + l + sovMiscellaneous(uint64(l))
	}
	if m.ResolveUrlPrefix != nil {
		l = m.ResolveUrlPrefix.Size()
		n += 1 + l + sovMiscellaneous(uint64(l))
	}
	if m.ShareInviteUrl != nil {
		l = m.ShareInviteUrl.Size()
		n += 1 + l + sovMiscellaneous(uint64(l))
	}
	return n
}

func (m *Discover) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Peers) > 0 {
		for _, e := range m.Peers {
			l = e.Size()
			n += 1 + l + sovMiscellaneous(uint64(l))
		}
	}
	return n
}

func (m *Extension) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovMiscellaneous(uint64(m.Id))
	}
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovMiscellaneous(uint64(l))
	}
	return n
}

func (m *Any) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.TypeUrl)
	if l > 0 {
		n += 1 + l + sovMiscellaneous(uint64(l))
	}
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovMiscellaneous(uint64(l))
	}
	return n
}

func (m *UpdateConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Config != nil {
		l = m.Config.Size()
		n += 1 + l + sovMiscellaneous(uint64(l))
	}
	if m.ConfigHash != nil {
		l = m.ConfigHash.Size()
		n += 1 + l + sovMiscellaneous(uint64(l))
	}
	return n
}

func (m *RecursiveMapValue) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovMiscellaneous(uint64(l))
		}
	}
	return n
}

func (m *RecursiveMapValue_Value) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Value != nil {
		n += m.Value.Size()
	}
	return n
}

func (m *RecursiveMapValue_Value_D) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.D != nil {
		l = m.D.Size()
		n += 1 + l + sovMiscellaneous(uint64(l))
	}
	return n
}
func (m *RecursiveMapValue_Value_I32) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.I32 != nil {
		l = m.I32.Size()
		n += 1 + l + sovMiscellaneous(uint64(l))
	}
	return n
}
func (m *RecursiveMapValue_Value_I64) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.I64 != nil {
		l = m.I64.Size()
		n += 1 + l + sovMiscellaneous(uint64(l))
	}
	return n
}
func (m *RecursiveMapValue_Value_Str) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Str != nil {
		l = m.Str.Size()
		n += 1 + l + sovMiscellaneous(uint64(l))
	}
	return n
}
func (m *RecursiveMapValue_Value_Rec) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Rec != nil {
		l = m.Rec.Size()
		n += 1 + l + sovMiscellaneous(uint64(l))
	}
	return n
}
func (m *RecursiveMapValue_Value_ArrayRec) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ArrayRec != nil {
		l = m.ArrayRec.Size()
		n += 1 + l + sovMiscellaneous(uint64(l))
	}
	return n
}
func (m *RecursiveMapValue_Array) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Values) > 0 {
		for _, e := range m.Values {
			l = e.Size()
			n += 1 + l + sovMiscellaneous(uint64(l))
		}
	}
	return n
}

func (m *RecursiveMapValue_Item) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovMiscellaneous(uint64(l))
	}
	if m.Value != nil {
		l = m.Value.Size()
		n += 1 + l + sovMiscellaneous(uint64(l))
	}
	return n
}

func sovMiscellaneous(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozMiscellaneous(x uint64) (n int) {
	return sovMiscellaneous(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *ResponseVoid) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ResponseVoid{`,
		`}`,
	}, "")
	return s
}
func (this *ResponseSeq) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ResponseSeq{`,
		`Seq:` + fmt.Sprintf("%v", this.Seq) + `,`,
		`State:` + fmt.Sprintf("%v", this.State) + `,`,
		`Date:` + fmt.Sprintf("%v", this.Date) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ResponseSeqDate) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ResponseSeqDate{`,
		`Seq:` + fmt.Sprintf("%v", this.Seq) + `,`,
		`State:` + fmt.Sprintf("%v", this.State) + `,`,
		`Date:` + fmt.Sprintf("%v", this.Date) + `,`,
		`Mid:` + strings.Replace(fmt.Sprintf("%v", this.Mid), "UUIDValue", "UUIDValue", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ResponseSeqDateMid) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ResponseSeqDateMid{`,
		`Seq:` + fmt.Sprintf("%v", this.Seq) + `,`,
		`State:` + fmt.Sprintf("%v", this.State) + `,`,
		`Date:` + fmt.Sprintf("%v", this.Date) + `,`,
		`Mid:` + strings.Replace(fmt.Sprintf("%v", this.Mid), "UUIDValue", "UUIDValue", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ResponseBool) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ResponseBool{`,
		`Value:` + fmt.Sprintf("%v", this.Value) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Config) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForExtensions := "[]*Any{"
	for _, f := range this.Extensions {
		repeatedStringForExtensions += strings.Replace(f.String(), "Any", "Any", 1) + ","
	}
	repeatedStringForExtensions += "}"
	s := strings.Join([]string{`&Config{`,
		`MaxGroupSize:` + fmt.Sprintf("%v", this.MaxGroupSize) + `,`,
		`Discover:` + strings.Replace(this.Discover.String(), "Discover", "Discover", 1) + `,`,
		`Extensions:` + repeatedStringForExtensions + `,`,
		`ShareEndpoint:` + strings.Replace(fmt.Sprintf("%v", this.ShareEndpoint), "StringValue", "types.StringValue", 1) + `,`,
		`CallsConfig:` + strings.Replace(this.CallsConfig.String(), "CallsConfig", "CallsConfig", 1) + `,`,
		`GroupInviteConfig:` + strings.Replace(this.GroupInviteConfig.String(), "InvitesConfig", "InvitesConfig", 1) + `,`,
		`ServerMetaInfo:` + strings.Replace(this.ServerMetaInfo.String(), "ServerMetaInfo", "ServerMetaInfo", 1) + `,`,
		`CustomProfileSchema:` + fmt.Sprintf("%v", this.CustomProfileSchema) + `,`,
		`ServicePeers:` + strings.Replace(this.ServicePeers.String(), "ServicePeers", "ServicePeers", 1) + `,`,
		`ClientKeepAlive:` + fmt.Sprintf("%v", this.ClientKeepAlive) + `,`,
		`SupportedMethods:` + fmt.Sprintf("%v", this.SupportedMethods) + `,`,
		`MaxChannelSize:` + fmt.Sprintf("%v", this.MaxChannelSize) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ServicePeers) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ServicePeers{`,
		`Security:` + strings.Replace(fmt.Sprintf("%v", this.Security), "OutPeer", "OutPeer", 1) + `,`,
		`Support:` + strings.Replace(fmt.Sprintf("%v", this.Support), "OutPeer", "OutPeer", 1) + `,`,
		`Stash:` + strings.Replace(fmt.Sprintf("%v", this.Stash), "OutPeer", "OutPeer", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ServerMetaInfo) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ServerMetaInfo{`,
		`ReleaseDate:` + fmt.Sprintf("%v", this.ReleaseDate) + `,`,
		`ApiVersion:` + strings.Replace(fmt.Sprintf("%v", this.ApiVersion), "Int64Value", "types.Int64Value", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CallsConfig) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CallsConfig{`,
		`CallsEnabled:` + strings.Replace(fmt.Sprintf("%v", this.CallsEnabled), "BoolValue", "types.BoolValue", 1) + `,`,
		`VideoCallsEnabled:` + strings.Replace(fmt.Sprintf("%v", this.VideoCallsEnabled), "BoolValue", "types.BoolValue", 1) + `,`,
		`GroupCallsEnabled:` + strings.Replace(fmt.Sprintf("%v", this.GroupCallsEnabled), "BoolValue", "types.BoolValue", 1) + `,`,
		`GroupCallsMaxMembers:` + strings.Replace(fmt.Sprintf("%v", this.GroupCallsMaxMembers), "Int32Value", "types.Int32Value", 1) + `,`,
		`RtcpMuxPolicy:` + fmt.Sprintf("%v", this.RtcpMuxPolicy) + `,`,
		`EmojiSecurityEnabled:` + strings.Replace(fmt.Sprintf("%v", this.EmojiSecurityEnabled), "BoolValue", "types.BoolValue", 1) + `,`,
		`ScreenSharingEnabled:` + strings.Replace(fmt.Sprintf("%v", this.ScreenSharingEnabled), "BoolValue", "types.BoolValue", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *InvitesConfig) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&InvitesConfig{`,
		`BaseUrl:` + strings.Replace(fmt.Sprintf("%v", this.BaseUrl), "StringValue", "types.StringValue", 1) + `,`,
		`GroupInviteUrlPrefix:` + strings.Replace(fmt.Sprintf("%v", this.GroupInviteUrlPrefix), "StringValue", "types.StringValue", 1) + `,`,
		`ResolveUrlPrefix:` + strings.Replace(fmt.Sprintf("%v", this.ResolveUrlPrefix), "StringValue", "types.StringValue", 1) + `,`,
		`ShareInviteUrl:` + strings.Replace(fmt.Sprintf("%v", this.ShareInviteUrl), "StringValue", "types.StringValue", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Discover) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForPeers := "[]*OutPeer{"
	for _, f := range this.Peers {
		repeatedStringForPeers += strings.Replace(fmt.Sprintf("%v", f), "OutPeer", "OutPeer", 1) + ","
	}
	repeatedStringForPeers += "}"
	s := strings.Join([]string{`&Discover{`,
		`Peers:` + repeatedStringForPeers + `,`,
		`}`,
	}, "")
	return s
}
func (this *Extension) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Extension{`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`Data:` + fmt.Sprintf("%v", this.Data) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Any) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Any{`,
		`TypeUrl:` + fmt.Sprintf("%v", this.TypeUrl) + `,`,
		`Data:` + fmt.Sprintf("%v", this.Data) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateConfig) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateConfig{`,
		`Config:` + strings.Replace(this.Config.String(), "Config", "Config", 1) + `,`,
		`ConfigHash:` + strings.Replace(fmt.Sprintf("%v", this.ConfigHash), "Int64Value", "types.Int64Value", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RecursiveMapValue) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForItems := "[]*RecursiveMapValue_Item{"
	for _, f := range this.Items {
		repeatedStringForItems += strings.Replace(fmt.Sprintf("%v", f), "RecursiveMapValue_Item", "RecursiveMapValue_Item", 1) + ","
	}
	repeatedStringForItems += "}"
	s := strings.Join([]string{`&RecursiveMapValue{`,
		`Items:` + repeatedStringForItems + `,`,
		`}`,
	}, "")
	return s
}
func (this *RecursiveMapValue_Value) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RecursiveMapValue_Value{`,
		`Value:` + fmt.Sprintf("%v", this.Value) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RecursiveMapValue_Value_D) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RecursiveMapValue_Value_D{`,
		`D:` + strings.Replace(fmt.Sprintf("%v", this.D), "DoubleValue", "types.DoubleValue", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RecursiveMapValue_Value_I32) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RecursiveMapValue_Value_I32{`,
		`I32:` + strings.Replace(fmt.Sprintf("%v", this.I32), "Int32Value", "types.Int32Value", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RecursiveMapValue_Value_I64) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RecursiveMapValue_Value_I64{`,
		`I64:` + strings.Replace(fmt.Sprintf("%v", this.I64), "Int64Value", "types.Int64Value", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RecursiveMapValue_Value_Str) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RecursiveMapValue_Value_Str{`,
		`Str:` + strings.Replace(fmt.Sprintf("%v", this.Str), "StringValue", "types.StringValue", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RecursiveMapValue_Value_Rec) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RecursiveMapValue_Value_Rec{`,
		`Rec:` + strings.Replace(fmt.Sprintf("%v", this.Rec), "RecursiveMapValue", "RecursiveMapValue", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RecursiveMapValue_Value_ArrayRec) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RecursiveMapValue_Value_ArrayRec{`,
		`ArrayRec:` + strings.Replace(fmt.Sprintf("%v", this.ArrayRec), "RecursiveMapValue_Array", "RecursiveMapValue_Array", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RecursiveMapValue_Array) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForValues := "[]*RecursiveMapValue_Value{"
	for _, f := range this.Values {
		repeatedStringForValues += strings.Replace(fmt.Sprintf("%v", f), "RecursiveMapValue_Value", "RecursiveMapValue_Value", 1) + ","
	}
	repeatedStringForValues += "}"
	s := strings.Join([]string{`&RecursiveMapValue_Array{`,
		`Values:` + repeatedStringForValues + `,`,
		`}`,
	}, "")
	return s
}
func (this *RecursiveMapValue_Item) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RecursiveMapValue_Item{`,
		`Key:` + fmt.Sprintf("%v", this.Key) + `,`,
		`Value:` + strings.Replace(fmt.Sprintf("%v", this.Value), "RecursiveMapValue_Value", "RecursiveMapValue_Value", 1) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringMiscellaneous(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *ResponseVoid) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMiscellaneous
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResponseVoid: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResponseVoid: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMiscellaneous(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMiscellaneous
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMiscellaneous
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResponseSeq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMiscellaneous
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResponseSeq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResponseSeq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Seq", wireType)
			}
			m.Seq = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMiscellaneous
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Seq |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMiscellaneous
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMiscellaneous
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMiscellaneous
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.State = append(m.State[:0], dAtA[iNdEx:postIndex]...)
			if m.State == nil {
				m.State = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Date", wireType)
			}
			m.Date = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMiscellaneous
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Date |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMiscellaneous(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMiscellaneous
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMiscellaneous
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResponseSeqDate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMiscellaneous
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResponseSeqDate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResponseSeqDate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Seq", wireType)
			}
			m.Seq = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMiscellaneous
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Seq |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMiscellaneous
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMiscellaneous
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMiscellaneous
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.State = append(m.State[:0], dAtA[iNdEx:postIndex]...)
			if m.State == nil {
				m.State = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Date", wireType)
			}
			m.Date = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMiscellaneous
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Date |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMiscellaneous
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMiscellaneous
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMiscellaneous
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Mid == nil {
				m.Mid = &UUIDValue{}
			}
			if err := m.Mid.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMiscellaneous(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMiscellaneous
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMiscellaneous
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResponseSeqDateMid) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMiscellaneous
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResponseSeqDateMid: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResponseSeqDateMid: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Seq", wireType)
			}
			m.Seq = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMiscellaneous
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Seq |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMiscellaneous
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMiscellaneous
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMiscellaneous
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.State = append(m.State[:0], dAtA[iNdEx:postIndex]...)
			if m.State == nil {
				m.State = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Date", wireType)
			}
			m.Date = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMiscellaneous
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Date |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMiscellaneous
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMiscellaneous
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMiscellaneous
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Mid == nil {
				m.Mid = &UUIDValue{}
			}
			if err := m.Mid.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMiscellaneous(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMiscellaneous
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMiscellaneous
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResponseBool) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMiscellaneous
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResponseBool: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResponseBool: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMiscellaneous
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Value = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipMiscellaneous(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMiscellaneous
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMiscellaneous
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Config) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMiscellaneous
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Config: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Config: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxGroupSize", wireType)
			}
			m.MaxGroupSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMiscellaneous
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxGroupSize |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Discover", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMiscellaneous
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMiscellaneous
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMiscellaneous
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Discover == nil {
				m.Discover = &Discover{}
			}
			if err := m.Discover.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Extensions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMiscellaneous
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMiscellaneous
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMiscellaneous
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Extensions = append(m.Extensions, &Any{})
			if err := m.Extensions[len(m.Extensions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShareEndpoint", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMiscellaneous
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMiscellaneous
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMiscellaneous
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ShareEndpoint == nil {
				m.ShareEndpoint = &types.StringValue{}
			}
			if err := m.ShareEndpoint.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CallsConfig", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMiscellaneous
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMiscellaneous
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMiscellaneous
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CallsConfig == nil {
				m.CallsConfig = &CallsConfig{}
			}
			if err := m.CallsConfig.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupInviteConfig", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMiscellaneous
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMiscellaneous
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMiscellaneous
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.GroupInviteConfig == nil {
				m.GroupInviteConfig = &InvitesConfig{}
			}
			if err := m.GroupInviteConfig.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerMetaInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMiscellaneous
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMiscellaneous
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMiscellaneous
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ServerMetaInfo == nil {
				m.ServerMetaInfo = &ServerMetaInfo{}
			}
			if err := m.ServerMetaInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CustomProfileSchema", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMiscellaneous
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMiscellaneous
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMiscellaneous
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CustomProfileSchema = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServicePeers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMiscellaneous
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMiscellaneous
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMiscellaneous
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ServicePeers == nil {
				m.ServicePeers = &ServicePeers{}
			}
			if err := m.ServicePeers.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientKeepAlive", wireType)
			}
			m.ClientKeepAlive = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMiscellaneous
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ClientKeepAlive |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType == 0 {
				var v SupportedServerMethodsType
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMiscellaneous
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= SupportedServerMethodsType(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.SupportedMethods = append(m.SupportedMethods, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMiscellaneous
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthMiscellaneous
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthMiscellaneous
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				if elementCount != 0 && len(m.SupportedMethods) == 0 {
					m.SupportedMethods = make([]SupportedServerMethodsType, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v SupportedServerMethodsType
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMiscellaneous
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= SupportedServerMethodsType(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.SupportedMethods = append(m.SupportedMethods, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field SupportedMethods", wireType)
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxChannelSize", wireType)
			}
			m.MaxChannelSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMiscellaneous
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxChannelSize |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMiscellaneous(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMiscellaneous
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMiscellaneous
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ServicePeers) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMiscellaneous
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ServicePeers: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ServicePeers: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Security", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMiscellaneous
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMiscellaneous
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMiscellaneous
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Security == nil {
				m.Security = &OutPeer{}
			}
			if err := m.Security.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Support", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMiscellaneous
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMiscellaneous
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMiscellaneous
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Support == nil {
				m.Support = &OutPeer{}
			}
			if err := m.Support.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stash", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMiscellaneous
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMiscellaneous
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMiscellaneous
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Stash == nil {
				m.Stash = &OutPeer{}
			}
			if err := m.Stash.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMiscellaneous(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMiscellaneous
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMiscellaneous
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ServerMetaInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMiscellaneous
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ServerMetaInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ServerMetaInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReleaseDate", wireType)
			}
			m.ReleaseDate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMiscellaneous
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReleaseDate |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiVersion", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMiscellaneous
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMiscellaneous
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMiscellaneous
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ApiVersion == nil {
				m.ApiVersion = &types.Int64Value{}
			}
			if err := m.ApiVersion.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMiscellaneous(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMiscellaneous
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMiscellaneous
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CallsConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMiscellaneous
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CallsConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CallsConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CallsEnabled", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMiscellaneous
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMiscellaneous
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMiscellaneous
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CallsEnabled == nil {
				m.CallsEnabled = &types.BoolValue{}
			}
			if err := m.CallsEnabled.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VideoCallsEnabled", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMiscellaneous
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMiscellaneous
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMiscellaneous
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.VideoCallsEnabled == nil {
				m.VideoCallsEnabled = &types.BoolValue{}
			}
			if err := m.VideoCallsEnabled.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupCallsEnabled", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMiscellaneous
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMiscellaneous
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMiscellaneous
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.GroupCallsEnabled == nil {
				m.GroupCallsEnabled = &types.BoolValue{}
			}
			if err := m.GroupCallsEnabled.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupCallsMaxMembers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMiscellaneous
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMiscellaneous
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMiscellaneous
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.GroupCallsMaxMembers == nil {
				m.GroupCallsMaxMembers = &types.Int32Value{}
			}
			if err := m.GroupCallsMaxMembers.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RtcpMuxPolicy", wireType)
			}
			m.RtcpMuxPolicy = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMiscellaneous
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RtcpMuxPolicy |= RtcpMuxPolicy(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EmojiSecurityEnabled", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMiscellaneous
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMiscellaneous
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMiscellaneous
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.EmojiSecurityEnabled == nil {
				m.EmojiSecurityEnabled = &types.BoolValue{}
			}
			if err := m.EmojiSecurityEnabled.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScreenSharingEnabled", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMiscellaneous
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMiscellaneous
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMiscellaneous
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ScreenSharingEnabled == nil {
				m.ScreenSharingEnabled = &types.BoolValue{}
			}
			if err := m.ScreenSharingEnabled.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMiscellaneous(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMiscellaneous
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMiscellaneous
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InvitesConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMiscellaneous
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InvitesConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InvitesConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BaseUrl", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMiscellaneous
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMiscellaneous
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMiscellaneous
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BaseUrl == nil {
				m.BaseUrl = &types.StringValue{}
			}
			if err := m.BaseUrl.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupInviteUrlPrefix", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMiscellaneous
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMiscellaneous
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMiscellaneous
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.GroupInviteUrlPrefix == nil {
				m.GroupInviteUrlPrefix = &types.StringValue{}
			}
			if err := m.GroupInviteUrlPrefix.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResolveUrlPrefix", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMiscellaneous
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMiscellaneous
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMiscellaneous
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ResolveUrlPrefix == nil {
				m.ResolveUrlPrefix = &types.StringValue{}
			}
			if err := m.ResolveUrlPrefix.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShareInviteUrl", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMiscellaneous
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMiscellaneous
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMiscellaneous
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ShareInviteUrl == nil {
				m.ShareInviteUrl = &types.StringValue{}
			}
			if err := m.ShareInviteUrl.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMiscellaneous(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMiscellaneous
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMiscellaneous
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Discover) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMiscellaneous
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Discover: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Discover: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Peers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMiscellaneous
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMiscellaneous
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMiscellaneous
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Peers = append(m.Peers, &OutPeer{})
			if err := m.Peers[len(m.Peers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMiscellaneous(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMiscellaneous
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMiscellaneous
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Extension) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMiscellaneous
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Extension: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Extension: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMiscellaneous
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMiscellaneous
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMiscellaneous
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMiscellaneous
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMiscellaneous(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMiscellaneous
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMiscellaneous
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Any) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMiscellaneous
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Any: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Any: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TypeUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMiscellaneous
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMiscellaneous
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMiscellaneous
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TypeUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMiscellaneous
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMiscellaneous
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMiscellaneous
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMiscellaneous(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMiscellaneous
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMiscellaneous
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMiscellaneous
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Config", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMiscellaneous
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMiscellaneous
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMiscellaneous
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Config == nil {
				m.Config = &Config{}
			}
			if err := m.Config.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConfigHash", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMiscellaneous
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMiscellaneous
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMiscellaneous
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ConfigHash == nil {
				m.ConfigHash = &types.Int64Value{}
			}
			if err := m.ConfigHash.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMiscellaneous(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMiscellaneous
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMiscellaneous
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RecursiveMapValue) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMiscellaneous
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RecursiveMapValue: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RecursiveMapValue: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMiscellaneous
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMiscellaneous
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMiscellaneous
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, &RecursiveMapValue_Item{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMiscellaneous(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMiscellaneous
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMiscellaneous
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RecursiveMapValue_Value) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMiscellaneous
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Value: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Value: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field D", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMiscellaneous
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMiscellaneous
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMiscellaneous
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &types.DoubleValue{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Value = &RecursiveMapValue_Value_D{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field I32", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMiscellaneous
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMiscellaneous
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMiscellaneous
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &types.Int32Value{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Value = &RecursiveMapValue_Value_I32{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field I64", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMiscellaneous
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMiscellaneous
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMiscellaneous
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &types.Int64Value{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Value = &RecursiveMapValue_Value_I64{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Str", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMiscellaneous
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMiscellaneous
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMiscellaneous
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &types.StringValue{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Value = &RecursiveMapValue_Value_Str{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMiscellaneous
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMiscellaneous
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMiscellaneous
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &RecursiveMapValue{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Value = &RecursiveMapValue_Value_Rec{v}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ArrayRec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMiscellaneous
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMiscellaneous
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMiscellaneous
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &RecursiveMapValue_Array{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Value = &RecursiveMapValue_Value_ArrayRec{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMiscellaneous(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMiscellaneous
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMiscellaneous
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RecursiveMapValue_Array) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMiscellaneous
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Array: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Array: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Values", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMiscellaneous
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMiscellaneous
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMiscellaneous
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Values = append(m.Values, &RecursiveMapValue_Value{})
			if err := m.Values[len(m.Values)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMiscellaneous(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMiscellaneous
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMiscellaneous
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RecursiveMapValue_Item) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMiscellaneous
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Item: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Item: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMiscellaneous
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMiscellaneous
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMiscellaneous
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMiscellaneous
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMiscellaneous
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMiscellaneous
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Value == nil {
				m.Value = &RecursiveMapValue_Value{}
			}
			if err := m.Value.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMiscellaneous(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMiscellaneous
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMiscellaneous
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMiscellaneous(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMiscellaneous
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMiscellaneous
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMiscellaneous
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthMiscellaneous
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupMiscellaneous
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthMiscellaneous
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthMiscellaneous        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMiscellaneous          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupMiscellaneous = fmt.Errorf("proto: unexpected end of group")
)
