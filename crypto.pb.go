// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: crypto.proto

package dialog

import (
	context "context"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	types "github.com/gogo/protobuf/types"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Exchange public keys
type RequestKeyExchange struct {
	ClientKey *types.BytesValue `protobuf:"bytes,1,opt,name=client_key,json=clientKey,proto3" json:"client_key,omitempty"`
}

func (m *RequestKeyExchange) Reset()      { *m = RequestKeyExchange{} }
func (*RequestKeyExchange) ProtoMessage() {}
func (*RequestKeyExchange) Descriptor() ([]byte, []int) {
	return fileDescriptor_527278fb02d03321, []int{0}
}
func (m *RequestKeyExchange) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RequestKeyExchange) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RequestKeyExchange.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RequestKeyExchange) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RequestKeyExchange.Merge(m, src)
}
func (m *RequestKeyExchange) XXX_Size() int {
	return m.Size()
}
func (m *RequestKeyExchange) XXX_DiscardUnknown() {
	xxx_messageInfo_RequestKeyExchange.DiscardUnknown(m)
}

var xxx_messageInfo_RequestKeyExchange proto.InternalMessageInfo

func (m *RequestKeyExchange) GetClientKey() *types.BytesValue {
	if m != nil {
		return m.ClientKey
	}
	return nil
}

type ResponseKeyExchange struct {
	ServerKey *types.BytesValue `protobuf:"bytes,1,opt,name=server_key,json=serverKey,proto3" json:"server_key,omitempty"`
}

func (m *ResponseKeyExchange) Reset()      { *m = ResponseKeyExchange{} }
func (*ResponseKeyExchange) ProtoMessage() {}
func (*ResponseKeyExchange) Descriptor() ([]byte, []int) {
	return fileDescriptor_527278fb02d03321, []int{1}
}
func (m *ResponseKeyExchange) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ResponseKeyExchange) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ResponseKeyExchange.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ResponseKeyExchange) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResponseKeyExchange.Merge(m, src)
}
func (m *ResponseKeyExchange) XXX_Size() int {
	return m.Size()
}
func (m *ResponseKeyExchange) XXX_DiscardUnknown() {
	xxx_messageInfo_ResponseKeyExchange.DiscardUnknown(m)
}

var xxx_messageInfo_ResponseKeyExchange proto.InternalMessageInfo

func (m *ResponseKeyExchange) GetServerKey() *types.BytesValue {
	if m != nil {
		return m.ServerKey
	}
	return nil
}

func init() {
	proto.RegisterType((*RequestKeyExchange)(nil), "dialog.RequestKeyExchange")
	proto.RegisterType((*ResponseKeyExchange)(nil), "dialog.ResponseKeyExchange")
}

func init() { proto.RegisterFile("crypto.proto", fileDescriptor_527278fb02d03321) }

var fileDescriptor_527278fb02d03321 = []byte{
	// 384 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x92, 0xb1, 0xcb, 0x13, 0x31,
	0x18, 0xc6, 0x2f, 0x0e, 0x95, 0xe6, 0xd3, 0xc1, 0x53, 0xf1, 0xf3, 0xfa, 0x19, 0x3e, 0x6e, 0x10,
	0x71, 0x48, 0xf4, 0x73, 0xeb, 0xf2, 0x41, 0x45, 0x44, 0xba, 0xdd, 0xe0, 0xe0, 0x22, 0x69, 0xfa,
	0xf6, 0x0c, 0x5e, 0x93, 0x98, 0xa4, 0xb5, 0x37, 0x08, 0xe2, 0xe8, 0x24, 0xf8, 0x4f, 0xf8, 0xa7,
	0x38, 0x16, 0x5c, 0x3a, 0xda, 0xd4, 0x41, 0x9c, 0xfa, 0x27, 0x48, 0x9b, 0x2b, 0x1e, 0x74, 0x71,
	0x0a, 0x3c, 0xcf, 0x13, 0x7e, 0xef, 0xfb, 0xf0, 0xe2, 0x6b, 0xc2, 0xd6, 0xc6, 0x6b, 0x6a, 0xac,
	0xf6, 0x3a, 0xed, 0x8c, 0x25, 0xaf, 0x74, 0x99, 0x91, 0x52, 0xeb, 0xb2, 0x02, 0xb6, 0x57, 0x47,
	0xb3, 0x09, 0x7b, 0x6f, 0xb9, 0x31, 0x60, 0x5d, 0xcc, 0x65, 0x67, 0x8d, 0xcf, 0x8d, 0x64, 0x5c,
	0x29, 0xed, 0xb9, 0x97, 0x5a, 0x1d, 0xdc, 0x1b, 0x63, 0x98, 0x48, 0x25, 0xdb, 0xd2, 0x6d, 0x27,
	0x78, 0xc5, 0xcd, 0x88, 0x35, 0x6f, 0x94, 0xf3, 0x0f, 0x38, 0x2d, 0xe0, 0xdd, 0x0c, 0x9c, 0x1f,
	0x42, 0xfd, 0x6c, 0x21, 0xde, 0x70, 0x55, 0x42, 0xfa, 0x02, 0x63, 0x51, 0x49, 0x50, 0xfe, 0xf5,
	0x5b, 0xa8, 0x4f, 0xd1, 0x39, 0x7a, 0x70, 0x72, 0xd1, 0xa3, 0x11, 0x49, 0x0f, 0x23, 0xd1, 0x41,
	0xed, 0xc1, 0xbd, 0xe4, 0xd5, 0x0c, 0x06, 0xd7, 0x3f, 0xff, 0x79, 0xd4, 0xc5, 0x57, 0x85, 0x9e,
	0x1a, 0x2e, 0x7c, 0xd1, 0x8d, 0xbf, 0x87, 0x50, 0xf7, 0xcf, 0xc2, 0xe5, 0x5d, 0x7c, 0x47, 0x4e,
	0xe9, 0xb8, 0x2a, 0x69, 0x69, 0x8d, 0xa0, 0xcf, 0xad, 0x11, 0x0d, 0x33, 0x37, 0xf8, 0x66, 0x01,
	0xce, 0x68, 0xe5, 0xa0, 0xcd, 0xef, 0x63, 0xec, 0xc0, 0xce, 0xc1, 0xfe, 0x27, 0xbf, 0xe8, 0xc6,
	0xf8, 0x0e, 0x78, 0x2f, 0x5c, 0x66, 0xf8, 0xf4, 0x18, 0x18, 0x29, 0x17, 0x0b, 0xdc, 0x79, 0xba,
	0x2f, 0x3c, 0x55, 0xf8, 0xa4, 0xcd, 0xcc, 0x68, 0xac, 0x9e, 0x1e, 0xf7, 0x91, 0xf5, 0xfe, 0x79,
	0x47, 0xc3, 0xe6, 0xf7, 0x3f, 0xfd, 0xf8, 0xf5, 0xf5, 0xca, 0x79, 0xde, 0x63, 0xf3, 0xc7, 0x6c,
	0x07, 0x64, 0x11, 0xc0, 0x5a, 0xa1, 0x3e, 0x7a, 0x38, 0x28, 0x96, 0x6b, 0x92, 0xac, 0xd6, 0x24,
	0xd9, 0xae, 0x09, 0xfa, 0x18, 0x08, 0xfa, 0x16, 0x08, 0xfa, 0x1e, 0x08, 0x5a, 0x06, 0x82, 0x7e,
	0x06, 0x82, 0x7e, 0x07, 0x92, 0x6c, 0x03, 0x41, 0x5f, 0x36, 0x24, 0x59, 0x6e, 0x48, 0xb2, 0xda,
	0x90, 0x04, 0xdf, 0x6a, 0x6f, 0xb2, 0xdb, 0x52, 0x0a, 0x70, 0xaf, 0x9a, 0x33, 0x19, 0x75, 0xf6,
	0x65, 0x3c, 0xf9, 0x1b, 0x00, 0x00, 0xff, 0xff, 0xa7, 0xe5, 0x9c, 0x12, 0x45, 0x02, 0x00, 0x00,
}

func (this *RequestKeyExchange) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RequestKeyExchange)
	if !ok {
		that2, ok := that.(RequestKeyExchange)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ClientKey.Equal(that1.ClientKey) {
		return false
	}
	return true
}
func (this *ResponseKeyExchange) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ResponseKeyExchange)
	if !ok {
		that2, ok := that.(ResponseKeyExchange)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ServerKey.Equal(that1.ServerKey) {
		return false
	}
	return true
}
func (this *RequestKeyExchange) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&dialog.RequestKeyExchange{")
	if this.ClientKey != nil {
		s = append(s, "ClientKey: "+fmt.Sprintf("%#v", this.ClientKey)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ResponseKeyExchange) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&dialog.ResponseKeyExchange{")
	if this.ServerKey != nil {
		s = append(s, "ServerKey: "+fmt.Sprintf("%#v", this.ServerKey)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringCrypto(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// CryptoClient is the client API for Crypto service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CryptoClient interface {
	KeyExchange(ctx context.Context, in *RequestKeyExchange, opts ...grpc.CallOption) (*ResponseKeyExchange, error)
}

type cryptoClient struct {
	cc *grpc.ClientConn
}

func NewCryptoClient(cc *grpc.ClientConn) CryptoClient {
	return &cryptoClient{cc}
}

func (c *cryptoClient) KeyExchange(ctx context.Context, in *RequestKeyExchange, opts ...grpc.CallOption) (*ResponseKeyExchange, error) {
	out := new(ResponseKeyExchange)
	err := c.cc.Invoke(ctx, "/dialog.Crypto/KeyExchange", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CryptoServer is the server API for Crypto service.
type CryptoServer interface {
	KeyExchange(context.Context, *RequestKeyExchange) (*ResponseKeyExchange, error)
}

// UnimplementedCryptoServer can be embedded to have forward compatible implementations.
type UnimplementedCryptoServer struct {
}

func (*UnimplementedCryptoServer) KeyExchange(ctx context.Context, req *RequestKeyExchange) (*ResponseKeyExchange, error) {
	return nil, status.Errorf(codes.Unimplemented, "method KeyExchange not implemented")
}

func RegisterCryptoServer(s *grpc.Server, srv CryptoServer) {
	s.RegisterService(&_Crypto_serviceDesc, srv)
}

func _Crypto_KeyExchange_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestKeyExchange)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CryptoServer).KeyExchange(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dialog.Crypto/KeyExchange",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CryptoServer).KeyExchange(ctx, req.(*RequestKeyExchange))
	}
	return interceptor(ctx, in, info, handler)
}

var _Crypto_serviceDesc = grpc.ServiceDesc{
	ServiceName: "dialog.Crypto",
	HandlerType: (*CryptoServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "KeyExchange",
			Handler:    _Crypto_KeyExchange_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "crypto.proto",
}

func (m *RequestKeyExchange) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestKeyExchange) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RequestKeyExchange) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ClientKey != nil {
		{
			size, err := m.ClientKey.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCrypto(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ResponseKeyExchange) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResponseKeyExchange) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ResponseKeyExchange) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ServerKey != nil {
		{
			size, err := m.ServerKey.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCrypto(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintCrypto(dAtA []byte, offset int, v uint64) int {
	offset -= sovCrypto(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *RequestKeyExchange) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ClientKey != nil {
		l = m.ClientKey.Size()
		n += 1 + l + sovCrypto(uint64(l))
	}
	return n
}

func (m *ResponseKeyExchange) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ServerKey != nil {
		l = m.ServerKey.Size()
		n += 1 + l + sovCrypto(uint64(l))
	}
	return n
}

func sovCrypto(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozCrypto(x uint64) (n int) {
	return sovCrypto(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *RequestKeyExchange) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RequestKeyExchange{`,
		`ClientKey:` + strings.Replace(fmt.Sprintf("%v", this.ClientKey), "BytesValue", "types.BytesValue", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ResponseKeyExchange) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ResponseKeyExchange{`,
		`ServerKey:` + strings.Replace(fmt.Sprintf("%v", this.ServerKey), "BytesValue", "types.BytesValue", 1) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringCrypto(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *RequestKeyExchange) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCrypto
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestKeyExchange: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestKeyExchange: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientKey", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrypto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCrypto
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCrypto
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ClientKey == nil {
				m.ClientKey = &types.BytesValue{}
			}
			if err := m.ClientKey.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCrypto(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCrypto
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCrypto
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResponseKeyExchange) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCrypto
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResponseKeyExchange: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResponseKeyExchange: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerKey", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrypto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCrypto
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCrypto
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ServerKey == nil {
				m.ServerKey = &types.BytesValue{}
			}
			if err := m.ServerKey.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCrypto(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCrypto
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCrypto
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCrypto(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCrypto
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCrypto
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCrypto
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthCrypto
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupCrypto
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthCrypto
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthCrypto        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCrypto          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupCrypto = fmt.Errorf("proto: unexpected end of group")
)
