// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: threads.proto

package dialog

import (
	context "context"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	types "github.com/gogo/protobuf/types"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strconv "strconv"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type RequestCreateThread_JoinPolicy int32

const (
	INVITE_ONLY    RequestCreateThread_JoinPolicy = 0
	THREAD_MEMBERS RequestCreateThread_JoinPolicy = 1
)

var RequestCreateThread_JoinPolicy_name = map[int32]string{
	0: "INVITE_ONLY",
	1: "THREAD_MEMBERS",
}

var RequestCreateThread_JoinPolicy_value = map[string]int32{
	"INVITE_ONLY":    0,
	"THREAD_MEMBERS": 1,
}

func (RequestCreateThread_JoinPolicy) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_f2ba358bb2150022, []int{1, 0}
}

type ThreadReference struct {
	MessageId *UUIDValue `protobuf:"bytes,1,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"`
	Peer      *OutPeer   `protobuf:"bytes,2,opt,name=peer,proto3" json:"peer,omitempty"`
}

func (m *ThreadReference) Reset()      { *m = ThreadReference{} }
func (*ThreadReference) ProtoMessage() {}
func (*ThreadReference) Descriptor() ([]byte, []int) {
	return fileDescriptor_f2ba358bb2150022, []int{0}
}
func (m *ThreadReference) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ThreadReference) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ThreadReference.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ThreadReference) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ThreadReference.Merge(m, src)
}
func (m *ThreadReference) XXX_Size() int {
	return m.Size()
}
func (m *ThreadReference) XXX_DiscardUnknown() {
	xxx_messageInfo_ThreadReference.DiscardUnknown(m)
}

var xxx_messageInfo_ThreadReference proto.InternalMessageInfo

func (m *ThreadReference) GetMessageId() *UUIDValue {
	if m != nil {
		return m.MessageId
	}
	return nil
}

func (m *ThreadReference) GetPeer() *OutPeer {
	if m != nil {
		return m.Peer
	}
	return nil
}

// Create a threaded conversation inside a group
type RequestCreateThread struct {
	RandomId        int64                          `protobuf:"varint,1,opt,name=random_id,json=randomId,proto3" json:"random_id,omitempty"`
	ParentGroupPeer *GroupOutPeer                  `protobuf:"bytes,2,opt,name=parent_group_peer,json=parentGroupPeer,proto3" json:"parent_group_peer,omitempty"`
	StartMessageId  *UUIDValue                     `protobuf:"bytes,3,opt,name=start_message_id,json=startMessageId,proto3" json:"start_message_id,omitempty"`
	Title           string                         `protobuf:"bytes,4,opt,name=title,proto3" json:"title,omitempty"`
	JoinPolicy      RequestCreateThread_JoinPolicy `protobuf:"varint,5,opt,name=join_policy,json=joinPolicy,proto3,enum=dialog.RequestCreateThread_JoinPolicy" json:"join_policy,omitempty"`
	Members         []*UserOutPeer                 `protobuf:"bytes,6,rep,name=members,proto3" json:"members,omitempty"`
}

func (m *RequestCreateThread) Reset()      { *m = RequestCreateThread{} }
func (*RequestCreateThread) ProtoMessage() {}
func (*RequestCreateThread) Descriptor() ([]byte, []int) {
	return fileDescriptor_f2ba358bb2150022, []int{1}
}
func (m *RequestCreateThread) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RequestCreateThread) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RequestCreateThread.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RequestCreateThread) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RequestCreateThread.Merge(m, src)
}
func (m *RequestCreateThread) XXX_Size() int {
	return m.Size()
}
func (m *RequestCreateThread) XXX_DiscardUnknown() {
	xxx_messageInfo_RequestCreateThread.DiscardUnknown(m)
}

var xxx_messageInfo_RequestCreateThread proto.InternalMessageInfo

func (m *RequestCreateThread) GetRandomId() int64 {
	if m != nil {
		return m.RandomId
	}
	return 0
}

func (m *RequestCreateThread) GetParentGroupPeer() *GroupOutPeer {
	if m != nil {
		return m.ParentGroupPeer
	}
	return nil
}

func (m *RequestCreateThread) GetStartMessageId() *UUIDValue {
	if m != nil {
		return m.StartMessageId
	}
	return nil
}

func (m *RequestCreateThread) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *RequestCreateThread) GetJoinPolicy() RequestCreateThread_JoinPolicy {
	if m != nil {
		return m.JoinPolicy
	}
	return INVITE_ONLY
}

func (m *RequestCreateThread) GetMembers() []*UserOutPeer {
	if m != nil {
		return m.Members
	}
	return nil
}

// Thread creation response
type ResponseCreateThread struct {
	ThreadGroup *Group         `protobuf:"bytes,1,opt,name=thread_group,json=threadGroup,proto3" json:"thread_group,omitempty"`
	UserPeers   []*UserOutPeer `protobuf:"bytes,3,rep,name=user_peers,json=userPeers,proto3" json:"user_peers,omitempty"`
}

func (m *ResponseCreateThread) Reset()      { *m = ResponseCreateThread{} }
func (*ResponseCreateThread) ProtoMessage() {}
func (*ResponseCreateThread) Descriptor() ([]byte, []int) {
	return fileDescriptor_f2ba358bb2150022, []int{2}
}
func (m *ResponseCreateThread) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ResponseCreateThread) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ResponseCreateThread.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ResponseCreateThread) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResponseCreateThread.Merge(m, src)
}
func (m *ResponseCreateThread) XXX_Size() int {
	return m.Size()
}
func (m *ResponseCreateThread) XXX_DiscardUnknown() {
	xxx_messageInfo_ResponseCreateThread.DiscardUnknown(m)
}

var xxx_messageInfo_ResponseCreateThread proto.InternalMessageInfo

func (m *ResponseCreateThread) GetThreadGroup() *Group {
	if m != nil {
		return m.ThreadGroup
	}
	return nil
}

func (m *ResponseCreateThread) GetUserPeers() []*UserOutPeer {
	if m != nil {
		return m.UserPeers
	}
	return nil
}

// Converts thread into a group
type RequestLiftThread struct {
	RandomId        int64              `protobuf:"varint,1,opt,name=random_id,json=randomId,proto3" json:"random_id,omitempty"`
	ParentGroupPeer *GroupOutPeer      `protobuf:"bytes,2,opt,name=parent_group_peer,json=parentGroupPeer,proto3" json:"parent_group_peer,omitempty"`
	ThreadGroupPeer *GroupOutPeer      `protobuf:"bytes,3,opt,name=thread_group_peer,json=threadGroupPeer,proto3" json:"thread_group_peer,omitempty"`
	Title           *types.StringValue `protobuf:"bytes,4,opt,name=title,proto3" json:"title,omitempty"`
}

func (m *RequestLiftThread) Reset()      { *m = RequestLiftThread{} }
func (*RequestLiftThread) ProtoMessage() {}
func (*RequestLiftThread) Descriptor() ([]byte, []int) {
	return fileDescriptor_f2ba358bb2150022, []int{3}
}
func (m *RequestLiftThread) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RequestLiftThread) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RequestLiftThread.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RequestLiftThread) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RequestLiftThread.Merge(m, src)
}
func (m *RequestLiftThread) XXX_Size() int {
	return m.Size()
}
func (m *RequestLiftThread) XXX_DiscardUnknown() {
	xxx_messageInfo_RequestLiftThread.DiscardUnknown(m)
}

var xxx_messageInfo_RequestLiftThread proto.InternalMessageInfo

func (m *RequestLiftThread) GetRandomId() int64 {
	if m != nil {
		return m.RandomId
	}
	return 0
}

func (m *RequestLiftThread) GetParentGroupPeer() *GroupOutPeer {
	if m != nil {
		return m.ParentGroupPeer
	}
	return nil
}

func (m *RequestLiftThread) GetThreadGroupPeer() *GroupOutPeer {
	if m != nil {
		return m.ThreadGroupPeer
	}
	return nil
}

func (m *RequestLiftThread) GetTitle() *types.StringValue {
	if m != nil {
		return m.Title
	}
	return nil
}

// Thread lift response
type ResponseLiftThread struct {
	Group *Group `protobuf:"bytes,1,opt,name=group,proto3" json:"group,omitempty"`
}

func (m *ResponseLiftThread) Reset()      { *m = ResponseLiftThread{} }
func (*ResponseLiftThread) ProtoMessage() {}
func (*ResponseLiftThread) Descriptor() ([]byte, []int) {
	return fileDescriptor_f2ba358bb2150022, []int{4}
}
func (m *ResponseLiftThread) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ResponseLiftThread) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ResponseLiftThread.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ResponseLiftThread) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResponseLiftThread.Merge(m, src)
}
func (m *ResponseLiftThread) XXX_Size() int {
	return m.Size()
}
func (m *ResponseLiftThread) XXX_DiscardUnknown() {
	xxx_messageInfo_ResponseLiftThread.DiscardUnknown(m)
}

var xxx_messageInfo_ResponseLiftThread proto.InternalMessageInfo

func (m *ResponseLiftThread) GetGroup() *Group {
	if m != nil {
		return m.Group
	}
	return nil
}

// Load group threads available for user
type RequestLoadGroupThreads struct {
	Group *GroupOutPeer `protobuf:"bytes,1,opt,name=group,proto3" json:"group,omitempty"`
}

func (m *RequestLoadGroupThreads) Reset()      { *m = RequestLoadGroupThreads{} }
func (*RequestLoadGroupThreads) ProtoMessage() {}
func (*RequestLoadGroupThreads) Descriptor() ([]byte, []int) {
	return fileDescriptor_f2ba358bb2150022, []int{5}
}
func (m *RequestLoadGroupThreads) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RequestLoadGroupThreads) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RequestLoadGroupThreads.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RequestLoadGroupThreads) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RequestLoadGroupThreads.Merge(m, src)
}
func (m *RequestLoadGroupThreads) XXX_Size() int {
	return m.Size()
}
func (m *RequestLoadGroupThreads) XXX_DiscardUnknown() {
	xxx_messageInfo_RequestLoadGroupThreads.DiscardUnknown(m)
}

var xxx_messageInfo_RequestLoadGroupThreads proto.InternalMessageInfo

func (m *RequestLoadGroupThreads) GetGroup() *GroupOutPeer {
	if m != nil {
		return m.Group
	}
	return nil
}

type ResponseLoadGroupThreads struct {
	Threads []*ThreadReference `protobuf:"bytes,1,rep,name=threads,proto3" json:"threads,omitempty"`
}

func (m *ResponseLoadGroupThreads) Reset()      { *m = ResponseLoadGroupThreads{} }
func (*ResponseLoadGroupThreads) ProtoMessage() {}
func (*ResponseLoadGroupThreads) Descriptor() ([]byte, []int) {
	return fileDescriptor_f2ba358bb2150022, []int{6}
}
func (m *ResponseLoadGroupThreads) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ResponseLoadGroupThreads) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ResponseLoadGroupThreads.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ResponseLoadGroupThreads) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResponseLoadGroupThreads.Merge(m, src)
}
func (m *ResponseLoadGroupThreads) XXX_Size() int {
	return m.Size()
}
func (m *ResponseLoadGroupThreads) XXX_DiscardUnknown() {
	xxx_messageInfo_ResponseLoadGroupThreads.DiscardUnknown(m)
}

var xxx_messageInfo_ResponseLoadGroupThreads proto.InternalMessageInfo

func (m *ResponseLoadGroupThreads) GetThreads() []*ThreadReference {
	if m != nil {
		return m.Threads
	}
	return nil
}

// Join public thread
type RequestJoinThread struct {
	ParentGroupPeer *GroupOutPeer `protobuf:"bytes,2,opt,name=parent_group_peer,json=parentGroupPeer,proto3" json:"parent_group_peer,omitempty"`
	ThreadGroupPeer *GroupOutPeer `protobuf:"bytes,3,opt,name=thread_group_peer,json=threadGroupPeer,proto3" json:"thread_group_peer,omitempty"`
}

func (m *RequestJoinThread) Reset()      { *m = RequestJoinThread{} }
func (*RequestJoinThread) ProtoMessage() {}
func (*RequestJoinThread) Descriptor() ([]byte, []int) {
	return fileDescriptor_f2ba358bb2150022, []int{7}
}
func (m *RequestJoinThread) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RequestJoinThread) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RequestJoinThread.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RequestJoinThread) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RequestJoinThread.Merge(m, src)
}
func (m *RequestJoinThread) XXX_Size() int {
	return m.Size()
}
func (m *RequestJoinThread) XXX_DiscardUnknown() {
	xxx_messageInfo_RequestJoinThread.DiscardUnknown(m)
}

var xxx_messageInfo_RequestJoinThread proto.InternalMessageInfo

func (m *RequestJoinThread) GetParentGroupPeer() *GroupOutPeer {
	if m != nil {
		return m.ParentGroupPeer
	}
	return nil
}

func (m *RequestJoinThread) GetThreadGroupPeer() *GroupOutPeer {
	if m != nil {
		return m.ThreadGroupPeer
	}
	return nil
}

func init() {
	proto.RegisterEnum("dialog.RequestCreateThread_JoinPolicy", RequestCreateThread_JoinPolicy_name, RequestCreateThread_JoinPolicy_value)
	proto.RegisterType((*ThreadReference)(nil), "dialog.ThreadReference")
	proto.RegisterType((*RequestCreateThread)(nil), "dialog.RequestCreateThread")
	proto.RegisterType((*ResponseCreateThread)(nil), "dialog.ResponseCreateThread")
	proto.RegisterType((*RequestLiftThread)(nil), "dialog.RequestLiftThread")
	proto.RegisterType((*ResponseLiftThread)(nil), "dialog.ResponseLiftThread")
	proto.RegisterType((*RequestLoadGroupThreads)(nil), "dialog.RequestLoadGroupThreads")
	proto.RegisterType((*ResponseLoadGroupThreads)(nil), "dialog.ResponseLoadGroupThreads")
	proto.RegisterType((*RequestJoinThread)(nil), "dialog.RequestJoinThread")
}

func init() { proto.RegisterFile("threads.proto", fileDescriptor_f2ba358bb2150022) }

var fileDescriptor_f2ba358bb2150022 = []byte{
	// 883 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x56, 0x4d, 0x6f, 0xe3, 0x54,
	0x14, 0xcd, 0x6b, 0xfa, 0x31, 0xb9, 0xe9, 0x47, 0xe2, 0x06, 0xd5, 0x93, 0xe9, 0x98, 0x60, 0xa4,
	0x2a, 0xaa, 0x90, 0x33, 0x13, 0x56, 0x54, 0x48, 0x85, 0x32, 0x55, 0x49, 0x35, 0x9d, 0x8e, 0x3c,
	0x9d, 0x4a, 0xb0, 0x20, 0x72, 0x9c, 0xdb, 0xf0, 0x06, 0xc7, 0xcf, 0xbc, 0xe7, 0x14, 0x21, 0x36,
	0x08, 0x24, 0x16, 0xac, 0x90, 0xf8, 0x05, 0xec, 0xd8, 0xf3, 0x27, 0x58, 0xb0, 0xa8, 0x34, 0x9b,
	0x2e, 0xa9, 0xcb, 0x02, 0xb1, 0x9a, 0x9f, 0x80, 0x6c, 0x3f, 0xc7, 0xae, 0x43, 0x32, 0xc3, 0x6e,
	0x56, 0xb1, 0xdf, 0xbd, 0xf7, 0x9d, 0x73, 0xcf, 0x3d, 0xbe, 0x0a, 0xac, 0xf8, 0x9f, 0x73, 0xb4,
	0xfa, 0xc2, 0xf0, 0x38, 0xf3, 0x99, 0xb2, 0xd8, 0xa7, 0x96, 0xc3, 0x06, 0x75, 0x6d, 0xc0, 0xd8,
	0xc0, 0xc1, 0x56, 0x74, 0xda, 0x1b, 0x9d, 0xb5, 0xbe, 0xe2, 0x96, 0xe7, 0x21, 0x97, 0x79, 0xf5,
	0x4d, 0x19, 0xb7, 0x3c, 0xda, 0xb2, 0x5c, 0x97, 0xf9, 0x96, 0x4f, 0x99, 0x9b, 0x44, 0xab, 0x7d,
	0x3c, 0xa3, 0x2e, 0xcd, 0x1e, 0xad, 0x0f, 0xa9, 0xb0, 0xd1, 0x71, 0x2c, 0x17, 0xd9, 0x28, 0x39,
	0x7c, 0x43, 0xd8, 0x96, 0x63, 0x79, 0xbd, 0x96, 0xfc, 0x95, 0xc7, 0x65, 0x0f, 0x53, 0xa4, 0xe5,
	0x01, 0x67, 0x23, 0x4f, 0xbe, 0xe9, 0x3f, 0x10, 0x58, 0x3b, 0x89, 0x18, 0x9b, 0x78, 0x86, 0x1c,
	0x5d, 0x1b, 0x95, 0x5d, 0x80, 0x21, 0x0a, 0x61, 0x0d, 0xb0, 0x4b, 0xfb, 0x2a, 0x69, 0x90, 0x66,
	0xb9, 0x5d, 0x35, 0xe2, 0x46, 0x8c, 0xa7, 0x4f, 0x3b, 0x0f, 0x4e, 0x2d, 0x67, 0x84, 0x7b, 0x2b,
	0x3f, 0xfe, 0x73, 0xaf, 0x04, 0x4b, 0xe7, 0x54, 0xd0, 0x9e, 0x83, 0x66, 0x49, 0xd6, 0x74, 0xfa,
	0x4a, 0x1b, 0xe6, 0x43, 0x44, 0x75, 0x2e, 0x2a, 0x5d, 0x4b, 0x4a, 0x8f, 0x47, 0xfe, 0x63, 0x44,
	0x9e, 0x2f, 0x8c, 0x72, 0xf5, 0x3f, 0x8a, 0xb0, 0x6e, 0xe2, 0x97, 0x23, 0x14, 0xfe, 0x47, 0x1c,
	0x2d, 0x1f, 0x63, 0x56, 0xca, 0x36, 0x94, 0xb8, 0xe5, 0xf6, 0xd9, 0x30, 0xe1, 0x52, 0xcc, 0xd7,
	0xdf, 0x8a, 0xe3, 0x9d, 0xbe, 0x72, 0x0c, 0x55, 0xcf, 0xe2, 0xe8, 0xfa, 0xdd, 0xa8, 0xc7, 0x6e,
	0x86, 0x44, 0x2d, 0x21, 0x71, 0x10, 0x46, 0xa6, 0x30, 0x59, 0x8b, 0xab, 0xa3, 0x94, 0x30, 0xae,
	0x1c, 0x42, 0x45, 0xf8, 0x16, 0xf7, 0xbb, 0x19, 0x3d, 0x8a, 0xaf, 0xa8, 0xc7, 0x6a, 0x54, 0x79,
	0x34, 0x16, 0xa5, 0x06, 0x0b, 0x3e, 0xf5, 0x1d, 0x54, 0xe7, 0x1b, 0xa4, 0x59, 0x32, 0xe3, 0x17,
	0xe5, 0x00, 0xca, 0xcf, 0x18, 0x75, 0xbb, 0x1e, 0x73, 0xa8, 0xfd, 0xb5, 0xba, 0xd0, 0x20, 0xcd,
	0xd5, 0xf6, 0x56, 0x72, 0xf9, 0x7f, 0x08, 0x62, 0x1c, 0x32, 0xea, 0x3e, 0x8e, 0xb2, 0x4d, 0x78,
	0x36, 0x7e, 0x56, 0xde, 0x87, 0xa5, 0x21, 0x0e, 0x7b, 0xc8, 0x85, 0xba, 0xd8, 0x28, 0x36, 0xcb,
	0xed, 0xf5, 0x31, 0x43, 0x81, 0x7c, 0x4a, 0xc3, 0x49, 0x89, 0x7e, 0x1f, 0x20, 0xbd, 0x57, 0x59,
	0x83, 0x72, 0xe7, 0xd1, 0x69, 0xe7, 0x64, 0xbf, 0x7b, 0xfc, 0xe8, 0xe1, 0x27, 0x95, 0x82, 0xa2,
	0xc0, 0xea, 0xc9, 0xc7, 0xe6, 0xfe, 0x87, 0x0f, 0xba, 0x47, 0xfb, 0x47, 0x7b, 0xfb, 0xe6, 0x93,
	0x0a, 0xd9, 0xd9, 0x0c, 0x76, 0x6f, 0xc3, 0x06, 0x1d, 0x1a, 0x7d, 0x67, 0x60, 0x0c, 0xb8, 0x67,
	0x1b, 0x07, 0xdc, 0xb3, 0x25, 0x63, 0xfd, 0x17, 0x02, 0x35, 0x13, 0x85, 0xc7, 0x5c, 0x81, 0x37,
	0xe6, 0x79, 0x0f, 0x96, 0xe3, 0x2f, 0x24, 0x9e, 0x91, 0xb4, 0xd7, 0xca, 0x8d, 0xf1, 0x98, 0xe5,
	0x38, 0x25, 0x7a, 0x51, 0xda, 0x00, 0x23, 0x81, 0x3c, 0x9a, 0xa6, 0x50, 0x8b, 0x53, 0x9b, 0x33,
	0x4b, 0x61, 0x5a, 0xf8, 0x24, 0x76, 0xee, 0x06, 0xbb, 0x75, 0x50, 0x27, 0xc9, 0xc5, 0x84, 0x0e,
	0xe7, 0x6f, 0xcd, 0x55, 0x8a, 0xfa, 0x6f, 0x73, 0x50, 0x95, 0x7c, 0x1f, 0xd2, 0x33, 0xff, 0x75,
	0x30, 0xdc, 0x31, 0x54, 0xb3, 0xea, 0xc4, 0x17, 0x16, 0xff, 0xc7, 0x85, 0x19, 0xe1, 0xa2, 0x0b,
	0xdb, 0x59, 0xd7, 0x95, 0xdb, 0x9b, 0x46, 0xbc, 0x67, 0x8c, 0x64, 0x0f, 0x19, 0x4f, 0x7c, 0x4e,
	0xdd, 0x41, 0xe4, 0x60, 0xe9, 0xc9, 0x97, 0x4c, 0xf6, 0x33, 0x50, 0x12, 0x1d, 0x33, 0xaa, 0xbd,
	0x0d, 0x0b, 0x33, 0xe6, 0x19, 0xc7, 0x5e, 0x6d, 0x2a, 0x1c, 0x36, 0x92, 0xa1, 0x30, 0xd9, 0x49,
	0x8c, 0x21, 0x94, 0xf7, 0x6e, 0x82, 0xcc, 0x54, 0xc4, 0x66, 0x43, 0xcf, 0xb2, 0xfd, 0x04, 0x7a,
	0x76, 0x4f, 0xdf, 0x80, 0x3a, 0xee, 0x29, 0x0f, 0xfa, 0x01, 0x2c, 0xc9, 0x95, 0xae, 0x92, 0xc8,
	0x7b, 0x1b, 0x09, 0x6c, 0x6e, 0x6f, 0x4e, 0x7c, 0x5c, 0xb2, 0xec, 0x25, 0x6d, 0xeb, 0xcf, 0xc9,
	0xd8, 0x86, 0xe1, 0x37, 0x28, 0x05, 0x7d, 0xed, 0xad, 0x35, 0x5b, 0xd2, 0xf6, 0x65, 0x11, 0x96,
	0x12, 0x09, 0x05, 0x2c, 0xdf, 0xd8, 0x01, 0x77, 0x66, 0xec, 0xb7, 0xfa, 0x66, 0x1a, 0x9c, 0x5c,
	0x1f, 0x7a, 0xf3, 0xbb, 0xe7, 0x7f, 0xfd, 0x3c, 0xa7, 0xeb, 0x77, 0x5b, 0xe7, 0xf7, 0x5b, 0x21,
	0x68, 0x4b, 0x82, 0xb4, 0xb2, 0x69, 0x3b, 0x64, 0x5b, 0xf9, 0x02, 0x20, 0xe3, 0xcf, 0xdb, 0x39,
	0xc8, 0x34, 0x54, 0xaf, 0xe7, 0x01, 0xd3, 0x98, 0xbe, 0x15, 0xc1, 0x35, 0xf4, 0x3b, 0x13, 0x70,
	0x69, 0x52, 0x08, 0xf6, 0x3d, 0x81, 0xca, 0x84, 0x73, 0xde, 0xcc, 0x63, 0xe6, 0x12, 0xea, 0x8d,
	0x09, 0xe4, 0x5c, 0x86, 0xfe, 0x4e, 0x84, 0xbf, 0xa5, 0xbf, 0x35, 0x89, 0x9f, 0x4b, 0x0d, 0x59,
	0x60, 0xbc, 0xc5, 0xa7, 0xb4, 0x9c, 0x86, 0xea, 0xb5, 0x3c, 0xf0, 0x29, 0xa3, 0xb3, 0x9a, 0x4d,
	0x4b, 0x77, 0xc8, 0xf6, 0x9e, 0x79, 0x71, 0xa5, 0x15, 0x2e, 0xaf, 0xb4, 0xc2, 0x8b, 0x2b, 0x8d,
	0x7c, 0x1b, 0x68, 0xe4, 0xd7, 0x40, 0x23, 0xbf, 0x07, 0x1a, 0xb9, 0x08, 0x34, 0xf2, 0x67, 0xa0,
	0x91, 0xbf, 0x03, 0xad, 0xf0, 0x22, 0xd0, 0xc8, 0x4f, 0xd7, 0x5a, 0xe1, 0xe2, 0x5a, 0x2b, 0x5c,
	0x5e, 0x6b, 0x05, 0xa8, 0x65, 0x9d, 0x22, 0x90, 0x9f, 0x53, 0x1b, 0xc5, 0xa7, 0xf2, 0xff, 0x51,
	0x6f, 0x31, 0x5a, 0x48, 0xef, 0xfe, 0x1b, 0x00, 0x00, 0xff, 0xff, 0xa8, 0xea, 0x29, 0x4f, 0x3f,
	0x09, 0x00, 0x00,
}

func (x RequestCreateThread_JoinPolicy) String() string {
	s, ok := RequestCreateThread_JoinPolicy_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *ThreadReference) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ThreadReference)
	if !ok {
		that2, ok := that.(ThreadReference)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.MessageId.Equal(that1.MessageId) {
		return false
	}
	if !this.Peer.Equal(that1.Peer) {
		return false
	}
	return true
}
func (this *RequestCreateThread) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RequestCreateThread)
	if !ok {
		that2, ok := that.(RequestCreateThread)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.RandomId != that1.RandomId {
		return false
	}
	if !this.ParentGroupPeer.Equal(that1.ParentGroupPeer) {
		return false
	}
	if !this.StartMessageId.Equal(that1.StartMessageId) {
		return false
	}
	if this.Title != that1.Title {
		return false
	}
	if this.JoinPolicy != that1.JoinPolicy {
		return false
	}
	if len(this.Members) != len(that1.Members) {
		return false
	}
	for i := range this.Members {
		if !this.Members[i].Equal(that1.Members[i]) {
			return false
		}
	}
	return true
}
func (this *ResponseCreateThread) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ResponseCreateThread)
	if !ok {
		that2, ok := that.(ResponseCreateThread)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ThreadGroup.Equal(that1.ThreadGroup) {
		return false
	}
	if len(this.UserPeers) != len(that1.UserPeers) {
		return false
	}
	for i := range this.UserPeers {
		if !this.UserPeers[i].Equal(that1.UserPeers[i]) {
			return false
		}
	}
	return true
}
func (this *RequestLiftThread) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RequestLiftThread)
	if !ok {
		that2, ok := that.(RequestLiftThread)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.RandomId != that1.RandomId {
		return false
	}
	if !this.ParentGroupPeer.Equal(that1.ParentGroupPeer) {
		return false
	}
	if !this.ThreadGroupPeer.Equal(that1.ThreadGroupPeer) {
		return false
	}
	if !this.Title.Equal(that1.Title) {
		return false
	}
	return true
}
func (this *ResponseLiftThread) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ResponseLiftThread)
	if !ok {
		that2, ok := that.(ResponseLiftThread)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Group.Equal(that1.Group) {
		return false
	}
	return true
}
func (this *RequestLoadGroupThreads) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RequestLoadGroupThreads)
	if !ok {
		that2, ok := that.(RequestLoadGroupThreads)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Group.Equal(that1.Group) {
		return false
	}
	return true
}
func (this *ResponseLoadGroupThreads) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ResponseLoadGroupThreads)
	if !ok {
		that2, ok := that.(ResponseLoadGroupThreads)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Threads) != len(that1.Threads) {
		return false
	}
	for i := range this.Threads {
		if !this.Threads[i].Equal(that1.Threads[i]) {
			return false
		}
	}
	return true
}
func (this *RequestJoinThread) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RequestJoinThread)
	if !ok {
		that2, ok := that.(RequestJoinThread)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ParentGroupPeer.Equal(that1.ParentGroupPeer) {
		return false
	}
	if !this.ThreadGroupPeer.Equal(that1.ThreadGroupPeer) {
		return false
	}
	return true
}
func (this *ThreadReference) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&dialog.ThreadReference{")
	if this.MessageId != nil {
		s = append(s, "MessageId: "+fmt.Sprintf("%#v", this.MessageId)+",\n")
	}
	if this.Peer != nil {
		s = append(s, "Peer: "+fmt.Sprintf("%#v", this.Peer)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RequestCreateThread) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 10)
	s = append(s, "&dialog.RequestCreateThread{")
	s = append(s, "RandomId: "+fmt.Sprintf("%#v", this.RandomId)+",\n")
	if this.ParentGroupPeer != nil {
		s = append(s, "ParentGroupPeer: "+fmt.Sprintf("%#v", this.ParentGroupPeer)+",\n")
	}
	if this.StartMessageId != nil {
		s = append(s, "StartMessageId: "+fmt.Sprintf("%#v", this.StartMessageId)+",\n")
	}
	s = append(s, "Title: "+fmt.Sprintf("%#v", this.Title)+",\n")
	s = append(s, "JoinPolicy: "+fmt.Sprintf("%#v", this.JoinPolicy)+",\n")
	if this.Members != nil {
		s = append(s, "Members: "+fmt.Sprintf("%#v", this.Members)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ResponseCreateThread) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&dialog.ResponseCreateThread{")
	if this.ThreadGroup != nil {
		s = append(s, "ThreadGroup: "+fmt.Sprintf("%#v", this.ThreadGroup)+",\n")
	}
	if this.UserPeers != nil {
		s = append(s, "UserPeers: "+fmt.Sprintf("%#v", this.UserPeers)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RequestLiftThread) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&dialog.RequestLiftThread{")
	s = append(s, "RandomId: "+fmt.Sprintf("%#v", this.RandomId)+",\n")
	if this.ParentGroupPeer != nil {
		s = append(s, "ParentGroupPeer: "+fmt.Sprintf("%#v", this.ParentGroupPeer)+",\n")
	}
	if this.ThreadGroupPeer != nil {
		s = append(s, "ThreadGroupPeer: "+fmt.Sprintf("%#v", this.ThreadGroupPeer)+",\n")
	}
	if this.Title != nil {
		s = append(s, "Title: "+fmt.Sprintf("%#v", this.Title)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ResponseLiftThread) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&dialog.ResponseLiftThread{")
	if this.Group != nil {
		s = append(s, "Group: "+fmt.Sprintf("%#v", this.Group)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RequestLoadGroupThreads) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&dialog.RequestLoadGroupThreads{")
	if this.Group != nil {
		s = append(s, "Group: "+fmt.Sprintf("%#v", this.Group)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ResponseLoadGroupThreads) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&dialog.ResponseLoadGroupThreads{")
	if this.Threads != nil {
		s = append(s, "Threads: "+fmt.Sprintf("%#v", this.Threads)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RequestJoinThread) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&dialog.RequestJoinThread{")
	if this.ParentGroupPeer != nil {
		s = append(s, "ParentGroupPeer: "+fmt.Sprintf("%#v", this.ParentGroupPeer)+",\n")
	}
	if this.ThreadGroupPeer != nil {
		s = append(s, "ThreadGroupPeer: "+fmt.Sprintf("%#v", this.ThreadGroupPeer)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringThreads(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ThreadsClient is the client API for Threads service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ThreadsClient interface {
	CreateThread(ctx context.Context, in *RequestCreateThread, opts ...grpc.CallOption) (*ResponseCreateThread, error)
	LiftThread(ctx context.Context, in *RequestLiftThread, opts ...grpc.CallOption) (*ResponseLiftThread, error)
	LoadGroupThreads(ctx context.Context, in *RequestLoadGroupThreads, opts ...grpc.CallOption) (*ResponseLoadGroupThreads, error)
	JoinThread(ctx context.Context, in *RequestJoinThread, opts ...grpc.CallOption) (*ResponseVoid, error)
}

type threadsClient struct {
	cc *grpc.ClientConn
}

func NewThreadsClient(cc *grpc.ClientConn) ThreadsClient {
	return &threadsClient{cc}
}

func (c *threadsClient) CreateThread(ctx context.Context, in *RequestCreateThread, opts ...grpc.CallOption) (*ResponseCreateThread, error) {
	out := new(ResponseCreateThread)
	err := c.cc.Invoke(ctx, "/dialog.Threads/CreateThread", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *threadsClient) LiftThread(ctx context.Context, in *RequestLiftThread, opts ...grpc.CallOption) (*ResponseLiftThread, error) {
	out := new(ResponseLiftThread)
	err := c.cc.Invoke(ctx, "/dialog.Threads/LiftThread", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *threadsClient) LoadGroupThreads(ctx context.Context, in *RequestLoadGroupThreads, opts ...grpc.CallOption) (*ResponseLoadGroupThreads, error) {
	out := new(ResponseLoadGroupThreads)
	err := c.cc.Invoke(ctx, "/dialog.Threads/LoadGroupThreads", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *threadsClient) JoinThread(ctx context.Context, in *RequestJoinThread, opts ...grpc.CallOption) (*ResponseVoid, error) {
	out := new(ResponseVoid)
	err := c.cc.Invoke(ctx, "/dialog.Threads/JoinThread", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ThreadsServer is the server API for Threads service.
type ThreadsServer interface {
	CreateThread(context.Context, *RequestCreateThread) (*ResponseCreateThread, error)
	LiftThread(context.Context, *RequestLiftThread) (*ResponseLiftThread, error)
	LoadGroupThreads(context.Context, *RequestLoadGroupThreads) (*ResponseLoadGroupThreads, error)
	JoinThread(context.Context, *RequestJoinThread) (*ResponseVoid, error)
}

// UnimplementedThreadsServer can be embedded to have forward compatible implementations.
type UnimplementedThreadsServer struct {
}

func (*UnimplementedThreadsServer) CreateThread(ctx context.Context, req *RequestCreateThread) (*ResponseCreateThread, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateThread not implemented")
}
func (*UnimplementedThreadsServer) LiftThread(ctx context.Context, req *RequestLiftThread) (*ResponseLiftThread, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LiftThread not implemented")
}
func (*UnimplementedThreadsServer) LoadGroupThreads(ctx context.Context, req *RequestLoadGroupThreads) (*ResponseLoadGroupThreads, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoadGroupThreads not implemented")
}
func (*UnimplementedThreadsServer) JoinThread(ctx context.Context, req *RequestJoinThread) (*ResponseVoid, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JoinThread not implemented")
}

func RegisterThreadsServer(s *grpc.Server, srv ThreadsServer) {
	s.RegisterService(&_Threads_serviceDesc, srv)
}

func _Threads_CreateThread_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestCreateThread)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ThreadsServer).CreateThread(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dialog.Threads/CreateThread",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ThreadsServer).CreateThread(ctx, req.(*RequestCreateThread))
	}
	return interceptor(ctx, in, info, handler)
}

func _Threads_LiftThread_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestLiftThread)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ThreadsServer).LiftThread(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dialog.Threads/LiftThread",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ThreadsServer).LiftThread(ctx, req.(*RequestLiftThread))
	}
	return interceptor(ctx, in, info, handler)
}

func _Threads_LoadGroupThreads_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestLoadGroupThreads)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ThreadsServer).LoadGroupThreads(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dialog.Threads/LoadGroupThreads",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ThreadsServer).LoadGroupThreads(ctx, req.(*RequestLoadGroupThreads))
	}
	return interceptor(ctx, in, info, handler)
}

func _Threads_JoinThread_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestJoinThread)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ThreadsServer).JoinThread(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dialog.Threads/JoinThread",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ThreadsServer).JoinThread(ctx, req.(*RequestJoinThread))
	}
	return interceptor(ctx, in, info, handler)
}

var _Threads_serviceDesc = grpc.ServiceDesc{
	ServiceName: "dialog.Threads",
	HandlerType: (*ThreadsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateThread",
			Handler:    _Threads_CreateThread_Handler,
		},
		{
			MethodName: "LiftThread",
			Handler:    _Threads_LiftThread_Handler,
		},
		{
			MethodName: "LoadGroupThreads",
			Handler:    _Threads_LoadGroupThreads_Handler,
		},
		{
			MethodName: "JoinThread",
			Handler:    _Threads_JoinThread_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "threads.proto",
}

func (m *ThreadReference) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ThreadReference) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ThreadReference) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Peer != nil {
		{
			size, err := m.Peer.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintThreads(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.MessageId != nil {
		{
			size, err := m.MessageId.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintThreads(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RequestCreateThread) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestCreateThread) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RequestCreateThread) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Members) > 0 {
		for iNdEx := len(m.Members) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Members[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintThreads(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	if m.JoinPolicy != 0 {
		i = encodeVarintThreads(dAtA, i, uint64(m.JoinPolicy))
		i--
		dAtA[i] = 0x28
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintThreads(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0x22
	}
	if m.StartMessageId != nil {
		{
			size, err := m.StartMessageId.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintThreads(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.ParentGroupPeer != nil {
		{
			size, err := m.ParentGroupPeer.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintThreads(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.RandomId != 0 {
		i = encodeVarintThreads(dAtA, i, uint64(m.RandomId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ResponseCreateThread) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResponseCreateThread) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ResponseCreateThread) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.UserPeers) > 0 {
		for iNdEx := len(m.UserPeers) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.UserPeers[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintThreads(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.ThreadGroup != nil {
		{
			size, err := m.ThreadGroup.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintThreads(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RequestLiftThread) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestLiftThread) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RequestLiftThread) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Title != nil {
		{
			size, err := m.Title.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintThreads(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.ThreadGroupPeer != nil {
		{
			size, err := m.ThreadGroupPeer.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintThreads(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.ParentGroupPeer != nil {
		{
			size, err := m.ParentGroupPeer.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintThreads(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.RandomId != 0 {
		i = encodeVarintThreads(dAtA, i, uint64(m.RandomId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ResponseLiftThread) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResponseLiftThread) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ResponseLiftThread) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Group != nil {
		{
			size, err := m.Group.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintThreads(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RequestLoadGroupThreads) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestLoadGroupThreads) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RequestLoadGroupThreads) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Group != nil {
		{
			size, err := m.Group.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintThreads(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ResponseLoadGroupThreads) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResponseLoadGroupThreads) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ResponseLoadGroupThreads) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Threads) > 0 {
		for iNdEx := len(m.Threads) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Threads[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintThreads(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *RequestJoinThread) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestJoinThread) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RequestJoinThread) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ThreadGroupPeer != nil {
		{
			size, err := m.ThreadGroupPeer.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintThreads(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.ParentGroupPeer != nil {
		{
			size, err := m.ParentGroupPeer.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintThreads(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}

func encodeVarintThreads(dAtA []byte, offset int, v uint64) int {
	offset -= sovThreads(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ThreadReference) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MessageId != nil {
		l = m.MessageId.Size()
		n += 1 + l + sovThreads(uint64(l))
	}
	if m.Peer != nil {
		l = m.Peer.Size()
		n += 1 + l + sovThreads(uint64(l))
	}
	return n
}

func (m *RequestCreateThread) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RandomId != 0 {
		n += 1 + sovThreads(uint64(m.RandomId))
	}
	if m.ParentGroupPeer != nil {
		l = m.ParentGroupPeer.Size()
		n += 1 + l + sovThreads(uint64(l))
	}
	if m.StartMessageId != nil {
		l = m.StartMessageId.Size()
		n += 1 + l + sovThreads(uint64(l))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovThreads(uint64(l))
	}
	if m.JoinPolicy != 0 {
		n += 1 + sovThreads(uint64(m.JoinPolicy))
	}
	if len(m.Members) > 0 {
		for _, e := range m.Members {
			l = e.Size()
			n += 1 + l + sovThreads(uint64(l))
		}
	}
	return n
}

func (m *ResponseCreateThread) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ThreadGroup != nil {
		l = m.ThreadGroup.Size()
		n += 1 + l + sovThreads(uint64(l))
	}
	if len(m.UserPeers) > 0 {
		for _, e := range m.UserPeers {
			l = e.Size()
			n += 1 + l + sovThreads(uint64(l))
		}
	}
	return n
}

func (m *RequestLiftThread) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RandomId != 0 {
		n += 1 + sovThreads(uint64(m.RandomId))
	}
	if m.ParentGroupPeer != nil {
		l = m.ParentGroupPeer.Size()
		n += 1 + l + sovThreads(uint64(l))
	}
	if m.ThreadGroupPeer != nil {
		l = m.ThreadGroupPeer.Size()
		n += 1 + l + sovThreads(uint64(l))
	}
	if m.Title != nil {
		l = m.Title.Size()
		n += 1 + l + sovThreads(uint64(l))
	}
	return n
}

func (m *ResponseLiftThread) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Group != nil {
		l = m.Group.Size()
		n += 1 + l + sovThreads(uint64(l))
	}
	return n
}

func (m *RequestLoadGroupThreads) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Group != nil {
		l = m.Group.Size()
		n += 1 + l + sovThreads(uint64(l))
	}
	return n
}

func (m *ResponseLoadGroupThreads) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Threads) > 0 {
		for _, e := range m.Threads {
			l = e.Size()
			n += 1 + l + sovThreads(uint64(l))
		}
	}
	return n
}

func (m *RequestJoinThread) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ParentGroupPeer != nil {
		l = m.ParentGroupPeer.Size()
		n += 1 + l + sovThreads(uint64(l))
	}
	if m.ThreadGroupPeer != nil {
		l = m.ThreadGroupPeer.Size()
		n += 1 + l + sovThreads(uint64(l))
	}
	return n
}

func sovThreads(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozThreads(x uint64) (n int) {
	return sovThreads(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *ThreadReference) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ThreadReference{`,
		`MessageId:` + strings.Replace(fmt.Sprintf("%v", this.MessageId), "UUIDValue", "UUIDValue", 1) + `,`,
		`Peer:` + strings.Replace(fmt.Sprintf("%v", this.Peer), "OutPeer", "OutPeer", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RequestCreateThread) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForMembers := "[]*UserOutPeer{"
	for _, f := range this.Members {
		repeatedStringForMembers += strings.Replace(fmt.Sprintf("%v", f), "UserOutPeer", "UserOutPeer", 1) + ","
	}
	repeatedStringForMembers += "}"
	s := strings.Join([]string{`&RequestCreateThread{`,
		`RandomId:` + fmt.Sprintf("%v", this.RandomId) + `,`,
		`ParentGroupPeer:` + strings.Replace(fmt.Sprintf("%v", this.ParentGroupPeer), "GroupOutPeer", "GroupOutPeer", 1) + `,`,
		`StartMessageId:` + strings.Replace(fmt.Sprintf("%v", this.StartMessageId), "UUIDValue", "UUIDValue", 1) + `,`,
		`Title:` + fmt.Sprintf("%v", this.Title) + `,`,
		`JoinPolicy:` + fmt.Sprintf("%v", this.JoinPolicy) + `,`,
		`Members:` + repeatedStringForMembers + `,`,
		`}`,
	}, "")
	return s
}
func (this *ResponseCreateThread) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForUserPeers := "[]*UserOutPeer{"
	for _, f := range this.UserPeers {
		repeatedStringForUserPeers += strings.Replace(fmt.Sprintf("%v", f), "UserOutPeer", "UserOutPeer", 1) + ","
	}
	repeatedStringForUserPeers += "}"
	s := strings.Join([]string{`&ResponseCreateThread{`,
		`ThreadGroup:` + strings.Replace(fmt.Sprintf("%v", this.ThreadGroup), "Group", "Group", 1) + `,`,
		`UserPeers:` + repeatedStringForUserPeers + `,`,
		`}`,
	}, "")
	return s
}
func (this *RequestLiftThread) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RequestLiftThread{`,
		`RandomId:` + fmt.Sprintf("%v", this.RandomId) + `,`,
		`ParentGroupPeer:` + strings.Replace(fmt.Sprintf("%v", this.ParentGroupPeer), "GroupOutPeer", "GroupOutPeer", 1) + `,`,
		`ThreadGroupPeer:` + strings.Replace(fmt.Sprintf("%v", this.ThreadGroupPeer), "GroupOutPeer", "GroupOutPeer", 1) + `,`,
		`Title:` + strings.Replace(fmt.Sprintf("%v", this.Title), "StringValue", "types.StringValue", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ResponseLiftThread) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ResponseLiftThread{`,
		`Group:` + strings.Replace(fmt.Sprintf("%v", this.Group), "Group", "Group", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RequestLoadGroupThreads) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RequestLoadGroupThreads{`,
		`Group:` + strings.Replace(fmt.Sprintf("%v", this.Group), "GroupOutPeer", "GroupOutPeer", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ResponseLoadGroupThreads) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForThreads := "[]*ThreadReference{"
	for _, f := range this.Threads {
		repeatedStringForThreads += strings.Replace(f.String(), "ThreadReference", "ThreadReference", 1) + ","
	}
	repeatedStringForThreads += "}"
	s := strings.Join([]string{`&ResponseLoadGroupThreads{`,
		`Threads:` + repeatedStringForThreads + `,`,
		`}`,
	}, "")
	return s
}
func (this *RequestJoinThread) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RequestJoinThread{`,
		`ParentGroupPeer:` + strings.Replace(fmt.Sprintf("%v", this.ParentGroupPeer), "GroupOutPeer", "GroupOutPeer", 1) + `,`,
		`ThreadGroupPeer:` + strings.Replace(fmt.Sprintf("%v", this.ThreadGroupPeer), "GroupOutPeer", "GroupOutPeer", 1) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringThreads(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *ThreadReference) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowThreads
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ThreadReference: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ThreadReference: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MessageId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowThreads
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthThreads
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthThreads
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MessageId == nil {
				m.MessageId = &UUIDValue{}
			}
			if err := m.MessageId.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Peer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowThreads
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthThreads
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthThreads
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Peer == nil {
				m.Peer = &OutPeer{}
			}
			if err := m.Peer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipThreads(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthThreads
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthThreads
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestCreateThread) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowThreads
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestCreateThread: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestCreateThread: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RandomId", wireType)
			}
			m.RandomId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowThreads
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RandomId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ParentGroupPeer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowThreads
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthThreads
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthThreads
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ParentGroupPeer == nil {
				m.ParentGroupPeer = &GroupOutPeer{}
			}
			if err := m.ParentGroupPeer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartMessageId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowThreads
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthThreads
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthThreads
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.StartMessageId == nil {
				m.StartMessageId = &UUIDValue{}
			}
			if err := m.StartMessageId.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowThreads
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthThreads
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthThreads
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field JoinPolicy", wireType)
			}
			m.JoinPolicy = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowThreads
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.JoinPolicy |= RequestCreateThread_JoinPolicy(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Members", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowThreads
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthThreads
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthThreads
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Members = append(m.Members, &UserOutPeer{})
			if err := m.Members[len(m.Members)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipThreads(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthThreads
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthThreads
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResponseCreateThread) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowThreads
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResponseCreateThread: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResponseCreateThread: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ThreadGroup", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowThreads
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthThreads
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthThreads
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ThreadGroup == nil {
				m.ThreadGroup = &Group{}
			}
			if err := m.ThreadGroup.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserPeers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowThreads
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthThreads
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthThreads
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserPeers = append(m.UserPeers, &UserOutPeer{})
			if err := m.UserPeers[len(m.UserPeers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipThreads(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthThreads
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthThreads
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestLiftThread) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowThreads
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestLiftThread: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestLiftThread: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RandomId", wireType)
			}
			m.RandomId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowThreads
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RandomId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ParentGroupPeer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowThreads
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthThreads
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthThreads
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ParentGroupPeer == nil {
				m.ParentGroupPeer = &GroupOutPeer{}
			}
			if err := m.ParentGroupPeer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ThreadGroupPeer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowThreads
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthThreads
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthThreads
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ThreadGroupPeer == nil {
				m.ThreadGroupPeer = &GroupOutPeer{}
			}
			if err := m.ThreadGroupPeer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowThreads
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthThreads
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthThreads
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Title == nil {
				m.Title = &types.StringValue{}
			}
			if err := m.Title.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipThreads(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthThreads
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthThreads
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResponseLiftThread) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowThreads
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResponseLiftThread: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResponseLiftThread: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Group", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowThreads
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthThreads
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthThreads
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Group == nil {
				m.Group = &Group{}
			}
			if err := m.Group.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipThreads(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthThreads
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthThreads
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestLoadGroupThreads) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowThreads
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestLoadGroupThreads: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestLoadGroupThreads: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Group", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowThreads
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthThreads
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthThreads
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Group == nil {
				m.Group = &GroupOutPeer{}
			}
			if err := m.Group.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipThreads(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthThreads
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthThreads
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResponseLoadGroupThreads) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowThreads
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResponseLoadGroupThreads: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResponseLoadGroupThreads: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Threads", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowThreads
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthThreads
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthThreads
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Threads = append(m.Threads, &ThreadReference{})
			if err := m.Threads[len(m.Threads)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipThreads(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthThreads
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthThreads
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestJoinThread) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowThreads
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestJoinThread: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestJoinThread: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ParentGroupPeer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowThreads
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthThreads
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthThreads
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ParentGroupPeer == nil {
				m.ParentGroupPeer = &GroupOutPeer{}
			}
			if err := m.ParentGroupPeer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ThreadGroupPeer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowThreads
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthThreads
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthThreads
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ThreadGroupPeer == nil {
				m.ThreadGroupPeer = &GroupOutPeer{}
			}
			if err := m.ThreadGroupPeer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipThreads(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthThreads
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthThreads
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipThreads(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowThreads
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowThreads
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowThreads
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthThreads
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupThreads
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthThreads
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthThreads        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowThreads          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupThreads = fmt.Errorf("proto: unexpected end of group")
)
