// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: web_rtc.proto

package dialog

import (
	context "context"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	types "github.com/gogo/protobuf/types"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strconv "strconv"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type CallDisposedReason int32

const (
	CALLDISPOSEDREASON_UNKNOWN        CallDisposedReason = 0
	CALLDISPOSEDREASON_REJECTED       CallDisposedReason = 1
	CALLDISPOSEDREASON_BUSY           CallDisposedReason = 2
	CALLDISPOSEDREASON_ENDED          CallDisposedReason = 3
	CALLDISPOSEDREASON_ANSWER_TIMEOUT CallDisposedReason = 4
)

var CallDisposedReason_name = map[int32]string{
	0: "CALLDISPOSEDREASON_UNKNOWN",
	1: "CALLDISPOSEDREASON_REJECTED",
	2: "CALLDISPOSEDREASON_BUSY",
	3: "CALLDISPOSEDREASON_ENDED",
	4: "CALLDISPOSEDREASON_ANSWER_TIMEOUT",
}

var CallDisposedReason_value = map[string]int32{
	"CALLDISPOSEDREASON_UNKNOWN":        0,
	"CALLDISPOSEDREASON_REJECTED":       1,
	"CALLDISPOSEDREASON_BUSY":           2,
	"CALLDISPOSEDREASON_ENDED":          3,
	"CALLDISPOSEDREASON_ANSWER_TIMEOUT": 4,
}

func (CallDisposedReason) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_36dc76573d9e3aea, []int{0}
}

type RejectCallReason int32

const (
	REJECTCALLREASON_UNKNOWN RejectCallReason = 0
	REJECTCALLREASON_DECLINE RejectCallReason = 1
	REJECTCALLREASON_BUSY    RejectCallReason = 2
)

var RejectCallReason_name = map[int32]string{
	0: "REJECTCALLREASON_UNKNOWN",
	1: "REJECTCALLREASON_DECLINE",
	2: "REJECTCALLREASON_BUSY",
}

var RejectCallReason_value = map[string]int32{
	"REJECTCALLREASON_UNKNOWN": 0,
	"REJECTCALLREASON_DECLINE": 1,
	"REJECTCALLREASON_BUSY":    2,
}

func (RejectCallReason) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_36dc76573d9e3aea, []int{1}
}

type DTMFCode int32

const (
	DTMFCODE_UNKNOWN  DTMFCode = 0
	DTMFCODE_ZERO     DTMFCode = 1
	DTMFCODE_ONE      DTMFCode = 2
	DTMFCODE_TWO      DTMFCode = 3
	DTMFCODE_THREE    DTMFCode = 4
	DTMFCODE_FOUR     DTMFCode = 5
	DTMFCODE_FIVE     DTMFCode = 6
	DTMFCODE_SIX      DTMFCode = 7
	DTMFCODE_SEVEN    DTMFCode = 8
	DTMFCODE_EIGHT    DTMFCode = 9
	DTMFCODE_NINE     DTMFCode = 10
	DTMFCODE_ASTERISK DTMFCode = 11
	DTMFCODE_POUND    DTMFCode = 12
	DTMFCODE_A        DTMFCode = 13
	DTMFCODE_B        DTMFCode = 14
	DTMFCODE_C        DTMFCode = 15
	DTMFCODE_D        DTMFCode = 16
)

var DTMFCode_name = map[int32]string{
	0:  "DTMFCODE_UNKNOWN",
	1:  "DTMFCODE_ZERO",
	2:  "DTMFCODE_ONE",
	3:  "DTMFCODE_TWO",
	4:  "DTMFCODE_THREE",
	5:  "DTMFCODE_FOUR",
	6:  "DTMFCODE_FIVE",
	7:  "DTMFCODE_SIX",
	8:  "DTMFCODE_SEVEN",
	9:  "DTMFCODE_EIGHT",
	10: "DTMFCODE_NINE",
	11: "DTMFCODE_ASTERISK",
	12: "DTMFCODE_POUND",
	13: "DTMFCODE_A",
	14: "DTMFCODE_B",
	15: "DTMFCODE_C",
	16: "DTMFCODE_D",
}

var DTMFCode_value = map[string]int32{
	"DTMFCODE_UNKNOWN":  0,
	"DTMFCODE_ZERO":     1,
	"DTMFCODE_ONE":      2,
	"DTMFCODE_TWO":      3,
	"DTMFCODE_THREE":    4,
	"DTMFCODE_FOUR":     5,
	"DTMFCODE_FIVE":     6,
	"DTMFCODE_SIX":      7,
	"DTMFCODE_SEVEN":    8,
	"DTMFCODE_EIGHT":    9,
	"DTMFCODE_NINE":     10,
	"DTMFCODE_ASTERISK": 11,
	"DTMFCODE_POUND":    12,
	"DTMFCODE_A":        13,
	"DTMFCODE_B":        14,
	"DTMFCODE_C":        15,
	"DTMFCODE_D":        16,
}

func (DTMFCode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_36dc76573d9e3aea, []int{2}
}

type CallStatsType int32

const (
	CALLSTATSTYPE_UNKNOWN                                       CallStatsType = 0
	CALLSTATSTYPE_TURN_SERVER_ROUND_TRIP_TIME                   CallStatsType = 1
	CALLSTATSTYPE_ICE_CONNECTION_FAILED                         CallStatsType = 2
	CALLSTATSTYPE_ICE_CONNECTION_CONNECTED                      CallStatsType = 3
	CALLSTATSTYPE_ICE_CONNECTION_DID_NOT_CONNECT                CallStatsType = 4
	CALLSTATSTYPE_ICE_CONNECTION_CONNECTED_TIME                 CallStatsType = 5
	CALLSTATSTYPE_PEER_CONNECTION_CREATE_ANSWER_FAILED          CallStatsType = 6
	CALLSTATSTYPE_PEER_CONNECTION_CREATE_OFFER_FAILED           CallStatsType = 7
	CALLSTATSTYPE_PEER_CONNECTION_SET_REMOTE_DESCRIPTION_FAILED CallStatsType = 8
	CALLSTATSTYPE_PEER_CONNECTION_SET_LOCAL_DESCRIPTION_FAILED  CallStatsType = 9
)

var CallStatsType_name = map[int32]string{
	0: "CALLSTATSTYPE_UNKNOWN",
	1: "CALLSTATSTYPE_TURN_SERVER_ROUND_TRIP_TIME",
	2: "CALLSTATSTYPE_ICE_CONNECTION_FAILED",
	3: "CALLSTATSTYPE_ICE_CONNECTION_CONNECTED",
	4: "CALLSTATSTYPE_ICE_CONNECTION_DID_NOT_CONNECT",
	5: "CALLSTATSTYPE_ICE_CONNECTION_CONNECTED_TIME",
	6: "CALLSTATSTYPE_PEER_CONNECTION_CREATE_ANSWER_FAILED",
	7: "CALLSTATSTYPE_PEER_CONNECTION_CREATE_OFFER_FAILED",
	8: "CALLSTATSTYPE_PEER_CONNECTION_SET_REMOTE_DESCRIPTION_FAILED",
	9: "CALLSTATSTYPE_PEER_CONNECTION_SET_LOCAL_DESCRIPTION_FAILED",
}

var CallStatsType_value = map[string]int32{
	"CALLSTATSTYPE_UNKNOWN":                                       0,
	"CALLSTATSTYPE_TURN_SERVER_ROUND_TRIP_TIME":                   1,
	"CALLSTATSTYPE_ICE_CONNECTION_FAILED":                         2,
	"CALLSTATSTYPE_ICE_CONNECTION_CONNECTED":                      3,
	"CALLSTATSTYPE_ICE_CONNECTION_DID_NOT_CONNECT":                4,
	"CALLSTATSTYPE_ICE_CONNECTION_CONNECTED_TIME":                 5,
	"CALLSTATSTYPE_PEER_CONNECTION_CREATE_ANSWER_FAILED":          6,
	"CALLSTATSTYPE_PEER_CONNECTION_CREATE_OFFER_FAILED":           7,
	"CALLSTATSTYPE_PEER_CONNECTION_SET_REMOTE_DESCRIPTION_FAILED": 8,
	"CALLSTATSTYPE_PEER_CONNECTION_SET_LOCAL_DESCRIPTION_FAILED":  9,
}

func (CallStatsType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_36dc76573d9e3aea, []int{3}
}

type CallMemberState int32

const (
	CALLMEMBERSTATE_UNKNOWN         CallMemberState = 0
	CALLMEMBERSTATE_RINGING         CallMemberState = 1
	CALLMEMBERSTATE_RINGING_REACHED CallMemberState = 4
	CALLMEMBERSTATE_CONNECTING      CallMemberState = 2
	CALLMEMBERSTATE_CONNECTED       CallMemberState = 3
	CALLMEMBERSTATE_ENDED           CallMemberState = 5
)

var CallMemberState_name = map[int32]string{
	0: "CALLMEMBERSTATE_UNKNOWN",
	1: "CALLMEMBERSTATE_RINGING",
	4: "CALLMEMBERSTATE_RINGING_REACHED",
	2: "CALLMEMBERSTATE_CONNECTING",
	3: "CALLMEMBERSTATE_CONNECTED",
	5: "CALLMEMBERSTATE_ENDED",
}

var CallMemberState_value = map[string]int32{
	"CALLMEMBERSTATE_UNKNOWN":         0,
	"CALLMEMBERSTATE_RINGING":         1,
	"CALLMEMBERSTATE_RINGING_REACHED": 4,
	"CALLMEMBERSTATE_CONNECTING":      2,
	"CALLMEMBERSTATE_CONNECTED":       3,
	"CALLMEMBERSTATE_ENDED":           5,
}

func (CallMemberState) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_36dc76573d9e3aea, []int{4}
}

// Update about incoming call (Sent every 10 seconds)
type UpdateIncomingCallDeprecated struct {
	CallId       int64             `protobuf:"varint,1,opt,name=call_id,json=callId,proto3" json:"call_id,omitempty"`
	AttemptIndex *types.Int32Value `protobuf:"bytes,2,opt,name=attempt_index,json=attemptIndex,proto3" json:"attempt_index,omitempty"`
}

func (m *UpdateIncomingCallDeprecated) Reset()      { *m = UpdateIncomingCallDeprecated{} }
func (*UpdateIncomingCallDeprecated) ProtoMessage() {}
func (*UpdateIncomingCallDeprecated) Descriptor() ([]byte, []int) {
	return fileDescriptor_36dc76573d9e3aea, []int{0}
}
func (m *UpdateIncomingCallDeprecated) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateIncomingCallDeprecated) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateIncomingCallDeprecated.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateIncomingCallDeprecated) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateIncomingCallDeprecated.Merge(m, src)
}
func (m *UpdateIncomingCallDeprecated) XXX_Size() int {
	return m.Size()
}
func (m *UpdateIncomingCallDeprecated) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateIncomingCallDeprecated.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateIncomingCallDeprecated proto.InternalMessageInfo

func (m *UpdateIncomingCallDeprecated) GetCallId() int64 {
	if m != nil {
		return m.CallId
	}
	return 0
}

func (m *UpdateIncomingCallDeprecated) GetAttemptIndex() *types.Int32Value {
	if m != nil {
		return m.AttemptIndex
	}
	return nil
}

// A new update about incoming call
type UpdateIncomingCall struct {
	CallId     int64  `protobuf:"varint,1,opt,name=call_id,json=callId,proto3" json:"call_id,omitempty"`
	EventBusId string `protobuf:"bytes,2,opt,name=event_bus_id,json=eventBusId,proto3" json:"event_bus_id,omitempty"`
	Peer       *Peer  `protobuf:"bytes,3,opt,name=peer,proto3" json:"peer,omitempty"`
	/// Call visual name
	DisplayName  *types.StringValue `protobuf:"bytes,4,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	AttemptIndex *types.Int32Value  `protobuf:"bytes,5,opt,name=attempt_index,json=attemptIndex,proto3" json:"attempt_index,omitempty"`
	OutPeer      *OutPeer           `protobuf:"bytes,6,opt,name=out_peer,json=outPeer,proto3" json:"out_peer,omitempty"`
	Video        bool               `protobuf:"varint,7,opt,name=video,proto3" json:"video,omitempty"`
}

func (m *UpdateIncomingCall) Reset()      { *m = UpdateIncomingCall{} }
func (*UpdateIncomingCall) ProtoMessage() {}
func (*UpdateIncomingCall) Descriptor() ([]byte, []int) {
	return fileDescriptor_36dc76573d9e3aea, []int{1}
}
func (m *UpdateIncomingCall) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateIncomingCall) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateIncomingCall.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateIncomingCall) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateIncomingCall.Merge(m, src)
}
func (m *UpdateIncomingCall) XXX_Size() int {
	return m.Size()
}
func (m *UpdateIncomingCall) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateIncomingCall.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateIncomingCall proto.InternalMessageInfo

func (m *UpdateIncomingCall) GetCallId() int64 {
	if m != nil {
		return m.CallId
	}
	return 0
}

func (m *UpdateIncomingCall) GetEventBusId() string {
	if m != nil {
		return m.EventBusId
	}
	return ""
}

func (m *UpdateIncomingCall) GetPeer() *Peer {
	if m != nil {
		return m.Peer
	}
	return nil
}

func (m *UpdateIncomingCall) GetDisplayName() *types.StringValue {
	if m != nil {
		return m.DisplayName
	}
	return nil
}

func (m *UpdateIncomingCall) GetAttemptIndex() *types.Int32Value {
	if m != nil {
		return m.AttemptIndex
	}
	return nil
}

func (m *UpdateIncomingCall) GetOutPeer() *OutPeer {
	if m != nil {
		return m.OutPeer
	}
	return nil
}

func (m *UpdateIncomingCall) GetVideo() bool {
	if m != nil {
		return m.Video
	}
	return false
}

// Update about incoming call handled
type UpdateCallHandled struct {
	CallId       int64             `protobuf:"varint,1,opt,name=call_id,json=callId,proto3" json:"call_id,omitempty"`
	AttemptIndex *types.Int32Value `protobuf:"bytes,2,opt,name=attempt_index,json=attemptIndex,proto3" json:"attempt_index,omitempty"`
}

func (m *UpdateCallHandled) Reset()      { *m = UpdateCallHandled{} }
func (*UpdateCallHandled) ProtoMessage() {}
func (*UpdateCallHandled) Descriptor() ([]byte, []int) {
	return fileDescriptor_36dc76573d9e3aea, []int{2}
}
func (m *UpdateCallHandled) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateCallHandled) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateCallHandled.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateCallHandled) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateCallHandled.Merge(m, src)
}
func (m *UpdateCallHandled) XXX_Size() int {
	return m.Size()
}
func (m *UpdateCallHandled) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateCallHandled.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateCallHandled proto.InternalMessageInfo

func (m *UpdateCallHandled) GetCallId() int64 {
	if m != nil {
		return m.CallId
	}
	return 0
}

func (m *UpdateCallHandled) GetAttemptIndex() *types.Int32Value {
	if m != nil {
		return m.AttemptIndex
	}
	return nil
}

// Update about the call ending (all participants have left)
type UpdateCallDisposed struct {
	CallId       int64              `protobuf:"varint,1,opt,name=call_id,json=callId,proto3" json:"call_id,omitempty"`
	AttemptIndex *types.Int32Value  `protobuf:"bytes,2,opt,name=attempt_index,json=attemptIndex,proto3" json:"attempt_index,omitempty"`
	Reason       CallDisposedReason `protobuf:"varint,3,opt,name=reason,proto3,enum=dialog.CallDisposedReason" json:"reason,omitempty"`
}

func (m *UpdateCallDisposed) Reset()      { *m = UpdateCallDisposed{} }
func (*UpdateCallDisposed) ProtoMessage() {}
func (*UpdateCallDisposed) Descriptor() ([]byte, []int) {
	return fileDescriptor_36dc76573d9e3aea, []int{3}
}
func (m *UpdateCallDisposed) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateCallDisposed) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateCallDisposed.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateCallDisposed) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateCallDisposed.Merge(m, src)
}
func (m *UpdateCallDisposed) XXX_Size() int {
	return m.Size()
}
func (m *UpdateCallDisposed) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateCallDisposed.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateCallDisposed proto.InternalMessageInfo

func (m *UpdateCallDisposed) GetCallId() int64 {
	if m != nil {
		return m.CallId
	}
	return 0
}

func (m *UpdateCallDisposed) GetAttemptIndex() *types.Int32Value {
	if m != nil {
		return m.AttemptIndex
	}
	return nil
}

func (m *UpdateCallDisposed) GetReason() CallDisposedReason {
	if m != nil {
		return m.Reason
	}
	return CALLDISPOSEDREASON_UNKNOWN
}

// Getting Call Information
type RequestGetCallInfo struct {
	CallId int64 `protobuf:"varint,1,opt,name=call_id,json=callId,proto3" json:"call_id,omitempty"`
}

func (m *RequestGetCallInfo) Reset()      { *m = RequestGetCallInfo{} }
func (*RequestGetCallInfo) ProtoMessage() {}
func (*RequestGetCallInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_36dc76573d9e3aea, []int{4}
}
func (m *RequestGetCallInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RequestGetCallInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RequestGetCallInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RequestGetCallInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RequestGetCallInfo.Merge(m, src)
}
func (m *RequestGetCallInfo) XXX_Size() int {
	return m.Size()
}
func (m *RequestGetCallInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_RequestGetCallInfo.DiscardUnknown(m)
}

var xxx_messageInfo_RequestGetCallInfo proto.InternalMessageInfo

func (m *RequestGetCallInfo) GetCallId() int64 {
	if m != nil {
		return m.CallId
	}
	return 0
}

type ResponseGetCallInfo struct {
	Peer        *Peer              `protobuf:"bytes,1,opt,name=peer,proto3" json:"peer,omitempty"`
	Groups      []*GroupOutPeer    `protobuf:"bytes,2,rep,name=groups,proto3" json:"groups,omitempty"`
	Users       []*UserOutPeer     `protobuf:"bytes,3,rep,name=users,proto3" json:"users,omitempty"`
	EventBusId  string             `protobuf:"bytes,4,opt,name=event_bus_id,json=eventBusId,proto3" json:"event_bus_id,omitempty"`
	DisplayName *types.StringValue `protobuf:"bytes,5,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
}

func (m *ResponseGetCallInfo) Reset()      { *m = ResponseGetCallInfo{} }
func (*ResponseGetCallInfo) ProtoMessage() {}
func (*ResponseGetCallInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_36dc76573d9e3aea, []int{5}
}
func (m *ResponseGetCallInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ResponseGetCallInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ResponseGetCallInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ResponseGetCallInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResponseGetCallInfo.Merge(m, src)
}
func (m *ResponseGetCallInfo) XXX_Size() int {
	return m.Size()
}
func (m *ResponseGetCallInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_ResponseGetCallInfo.DiscardUnknown(m)
}

var xxx_messageInfo_ResponseGetCallInfo proto.InternalMessageInfo

func (m *ResponseGetCallInfo) GetPeer() *Peer {
	if m != nil {
		return m.Peer
	}
	return nil
}

func (m *ResponseGetCallInfo) GetGroups() []*GroupOutPeer {
	if m != nil {
		return m.Groups
	}
	return nil
}

func (m *ResponseGetCallInfo) GetUsers() []*UserOutPeer {
	if m != nil {
		return m.Users
	}
	return nil
}

func (m *ResponseGetCallInfo) GetEventBusId() string {
	if m != nil {
		return m.EventBusId
	}
	return ""
}

func (m *ResponseGetCallInfo) GetDisplayName() *types.StringValue {
	if m != nil {
		return m.DisplayName
	}
	return nil
}

// This struct represents a call from the history
type CallLogEntry struct {
	Id        int64             `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	CallDate  int64             `protobuf:"varint,2,opt,name=call_date,json=callDate,proto3" json:"call_date,omitempty"`
	Initiator *OutPeer          `protobuf:"bytes,3,opt,name=initiator,proto3" json:"initiator,omitempty"`
	Recipient *OutPeer          `protobuf:"bytes,4,opt,name=recipient,proto3" json:"recipient,omitempty"`
	Duration  *types.Int64Value `protobuf:"bytes,5,opt,name=duration,proto3" json:"duration,omitempty"`
	/// was the call answered by anybody
	Answered *types.BoolValue `protobuf:"bytes,6,opt,name=answered,proto3" json:"answered,omitempty"`
	Finished *types.BoolValue `protobuf:"bytes,7,opt,name=finished,proto3" json:"finished,omitempty"`
	/// optional display name for this call
	DisplayName *types.StringValue `protobuf:"bytes,8,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	Rejected    *types.BoolValue   `protobuf:"bytes,9,opt,name=rejected,proto3" json:"rejected,omitempty"`
}

func (m *CallLogEntry) Reset()      { *m = CallLogEntry{} }
func (*CallLogEntry) ProtoMessage() {}
func (*CallLogEntry) Descriptor() ([]byte, []int) {
	return fileDescriptor_36dc76573d9e3aea, []int{6}
}
func (m *CallLogEntry) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CallLogEntry) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CallLogEntry.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CallLogEntry) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CallLogEntry.Merge(m, src)
}
func (m *CallLogEntry) XXX_Size() int {
	return m.Size()
}
func (m *CallLogEntry) XXX_DiscardUnknown() {
	xxx_messageInfo_CallLogEntry.DiscardUnknown(m)
}

var xxx_messageInfo_CallLogEntry proto.InternalMessageInfo

func (m *CallLogEntry) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *CallLogEntry) GetCallDate() int64 {
	if m != nil {
		return m.CallDate
	}
	return 0
}

func (m *CallLogEntry) GetInitiator() *OutPeer {
	if m != nil {
		return m.Initiator
	}
	return nil
}

func (m *CallLogEntry) GetRecipient() *OutPeer {
	if m != nil {
		return m.Recipient
	}
	return nil
}

func (m *CallLogEntry) GetDuration() *types.Int64Value {
	if m != nil {
		return m.Duration
	}
	return nil
}

func (m *CallLogEntry) GetAnswered() *types.BoolValue {
	if m != nil {
		return m.Answered
	}
	return nil
}

func (m *CallLogEntry) GetFinished() *types.BoolValue {
	if m != nil {
		return m.Finished
	}
	return nil
}

func (m *CallLogEntry) GetDisplayName() *types.StringValue {
	if m != nil {
		return m.DisplayName
	}
	return nil
}

func (m *CallLogEntry) GetRejected() *types.BoolValue {
	if m != nil {
		return m.Rejected
	}
	return nil
}

// Call this function to load call history
type RequestLoadCalls struct {
	/// Cursor
	NextOffset *types.BytesValue `protobuf:"bytes,1,opt,name=next_offset,json=nextOffset,proto3" json:"next_offset,omitempty"`
	Limit      int32             `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
}

func (m *RequestLoadCalls) Reset()      { *m = RequestLoadCalls{} }
func (*RequestLoadCalls) ProtoMessage() {}
func (*RequestLoadCalls) Descriptor() ([]byte, []int) {
	return fileDescriptor_36dc76573d9e3aea, []int{7}
}
func (m *RequestLoadCalls) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RequestLoadCalls) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RequestLoadCalls.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RequestLoadCalls) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RequestLoadCalls.Merge(m, src)
}
func (m *RequestLoadCalls) XXX_Size() int {
	return m.Size()
}
func (m *RequestLoadCalls) XXX_DiscardUnknown() {
	xxx_messageInfo_RequestLoadCalls.DiscardUnknown(m)
}

var xxx_messageInfo_RequestLoadCalls proto.InternalMessageInfo

func (m *RequestLoadCalls) GetNextOffset() *types.BytesValue {
	if m != nil {
		return m.NextOffset
	}
	return nil
}

func (m *RequestLoadCalls) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

/// Calls + related peers
type ResponseLoadCalls struct {
	Calls      []*CallLogEntry   `protobuf:"bytes,1,rep,name=calls,proto3" json:"calls,omitempty"`
	Users      []*UserOutPeer    `protobuf:"bytes,2,rep,name=users,proto3" json:"users,omitempty"`
	Groups     []*GroupOutPeer   `protobuf:"bytes,3,rep,name=groups,proto3" json:"groups,omitempty"`
	NextOffset *types.BytesValue `protobuf:"bytes,4,opt,name=next_offset,json=nextOffset,proto3" json:"next_offset,omitempty"`
}

func (m *ResponseLoadCalls) Reset()      { *m = ResponseLoadCalls{} }
func (*ResponseLoadCalls) ProtoMessage() {}
func (*ResponseLoadCalls) Descriptor() ([]byte, []int) {
	return fileDescriptor_36dc76573d9e3aea, []int{8}
}
func (m *ResponseLoadCalls) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ResponseLoadCalls) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ResponseLoadCalls.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ResponseLoadCalls) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResponseLoadCalls.Merge(m, src)
}
func (m *ResponseLoadCalls) XXX_Size() int {
	return m.Size()
}
func (m *ResponseLoadCalls) XXX_DiscardUnknown() {
	xxx_messageInfo_ResponseLoadCalls.DiscardUnknown(m)
}

var xxx_messageInfo_ResponseLoadCalls proto.InternalMessageInfo

func (m *ResponseLoadCalls) GetCalls() []*CallLogEntry {
	if m != nil {
		return m.Calls
	}
	return nil
}

func (m *ResponseLoadCalls) GetUsers() []*UserOutPeer {
	if m != nil {
		return m.Users
	}
	return nil
}

func (m *ResponseLoadCalls) GetGroups() []*GroupOutPeer {
	if m != nil {
		return m.Groups
	}
	return nil
}

func (m *ResponseLoadCalls) GetNextOffset() *types.BytesValue {
	if m != nil {
		return m.NextOffset
	}
	return nil
}

// Do Call. Right after a call client need to start sending CallInProgress
type RequestDoCall struct {
	Peer    *OutPeer `protobuf:"bytes,1,opt,name=peer,proto3" json:"peer,omitempty"`
	Timeout int64    `protobuf:"varint,2,opt,name=timeout,proto3" json:"timeout,omitempty"`
}

func (m *RequestDoCall) Reset()      { *m = RequestDoCall{} }
func (*RequestDoCall) ProtoMessage() {}
func (*RequestDoCall) Descriptor() ([]byte, []int) {
	return fileDescriptor_36dc76573d9e3aea, []int{9}
}
func (m *RequestDoCall) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RequestDoCall) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RequestDoCall.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RequestDoCall) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RequestDoCall.Merge(m, src)
}
func (m *RequestDoCall) XXX_Size() int {
	return m.Size()
}
func (m *RequestDoCall) XXX_DiscardUnknown() {
	xxx_messageInfo_RequestDoCall.DiscardUnknown(m)
}

var xxx_messageInfo_RequestDoCall proto.InternalMessageInfo

func (m *RequestDoCall) GetPeer() *OutPeer {
	if m != nil {
		return m.Peer
	}
	return nil
}

func (m *RequestDoCall) GetTimeout() int64 {
	if m != nil {
		return m.Timeout
	}
	return 0
}

type ResponseDoCall struct {
	CallId     int64  `protobuf:"varint,1,opt,name=call_id,json=callId,proto3" json:"call_id,omitempty"`
	EventBusId string `protobuf:"bytes,2,opt,name=event_bus_id,json=eventBusId,proto3" json:"event_bus_id,omitempty"`
	DeviceId   int64  `protobuf:"varint,3,opt,name=device_id,json=deviceId,proto3" json:"device_id,omitempty"`
}

func (m *ResponseDoCall) Reset()      { *m = ResponseDoCall{} }
func (*ResponseDoCall) ProtoMessage() {}
func (*ResponseDoCall) Descriptor() ([]byte, []int) {
	return fileDescriptor_36dc76573d9e3aea, []int{10}
}
func (m *ResponseDoCall) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ResponseDoCall) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ResponseDoCall.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ResponseDoCall) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResponseDoCall.Merge(m, src)
}
func (m *ResponseDoCall) XXX_Size() int {
	return m.Size()
}
func (m *ResponseDoCall) XXX_DiscardUnknown() {
	xxx_messageInfo_ResponseDoCall.DiscardUnknown(m)
}

var xxx_messageInfo_ResponseDoCall proto.InternalMessageInfo

func (m *ResponseDoCall) GetCallId() int64 {
	if m != nil {
		return m.CallId
	}
	return 0
}

func (m *ResponseDoCall) GetEventBusId() string {
	if m != nil {
		return m.EventBusId
	}
	return ""
}

func (m *ResponseDoCall) GetDeviceId() int64 {
	if m != nil {
		return m.DeviceId
	}
	return 0
}

// Joining Call
type RequestJoinCall struct {
	CallId int64 `protobuf:"varint,1,opt,name=call_id,json=callId,proto3" json:"call_id,omitempty"`
}

func (m *RequestJoinCall) Reset()      { *m = RequestJoinCall{} }
func (*RequestJoinCall) ProtoMessage() {}
func (*RequestJoinCall) Descriptor() ([]byte, []int) {
	return fileDescriptor_36dc76573d9e3aea, []int{11}
}
func (m *RequestJoinCall) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RequestJoinCall) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RequestJoinCall.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RequestJoinCall) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RequestJoinCall.Merge(m, src)
}
func (m *RequestJoinCall) XXX_Size() int {
	return m.Size()
}
func (m *RequestJoinCall) XXX_DiscardUnknown() {
	xxx_messageInfo_RequestJoinCall.DiscardUnknown(m)
}

var xxx_messageInfo_RequestJoinCall proto.InternalMessageInfo

func (m *RequestJoinCall) GetCallId() int64 {
	if m != nil {
		return m.CallId
	}
	return 0
}

// Rejecting Call
type RequestRejectCall struct {
	CallId int64            `protobuf:"varint,1,opt,name=call_id,json=callId,proto3" json:"call_id,omitempty"`
	Reason RejectCallReason `protobuf:"varint,2,opt,name=reason,proto3,enum=dialog.RejectCallReason" json:"reason,omitempty"`
}

func (m *RequestRejectCall) Reset()      { *m = RequestRejectCall{} }
func (*RequestRejectCall) ProtoMessage() {}
func (*RequestRejectCall) Descriptor() ([]byte, []int) {
	return fileDescriptor_36dc76573d9e3aea, []int{12}
}
func (m *RequestRejectCall) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RequestRejectCall) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RequestRejectCall.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RequestRejectCall) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RequestRejectCall.Merge(m, src)
}
func (m *RequestRejectCall) XXX_Size() int {
	return m.Size()
}
func (m *RequestRejectCall) XXX_DiscardUnknown() {
	xxx_messageInfo_RequestRejectCall.DiscardUnknown(m)
}

var xxx_messageInfo_RequestRejectCall proto.InternalMessageInfo

func (m *RequestRejectCall) GetCallId() int64 {
	if m != nil {
		return m.CallId
	}
	return 0
}

func (m *RequestRejectCall) GetReason() RejectCallReason {
	if m != nil {
		return m.Reason
	}
	return REJECTCALLREASON_UNKNOWN
}

type RequestDeleteCall struct {
	CallId int64 `protobuf:"varint,1,opt,name=call_id,json=callId,proto3" json:"call_id,omitempty"`
}

func (m *RequestDeleteCall) Reset()      { *m = RequestDeleteCall{} }
func (*RequestDeleteCall) ProtoMessage() {}
func (*RequestDeleteCall) Descriptor() ([]byte, []int) {
	return fileDescriptor_36dc76573d9e3aea, []int{13}
}
func (m *RequestDeleteCall) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RequestDeleteCall) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RequestDeleteCall.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RequestDeleteCall) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RequestDeleteCall.Merge(m, src)
}
func (m *RequestDeleteCall) XXX_Size() int {
	return m.Size()
}
func (m *RequestDeleteCall) XXX_DiscardUnknown() {
	xxx_messageInfo_RequestDeleteCall.DiscardUnknown(m)
}

var xxx_messageInfo_RequestDeleteCall proto.InternalMessageInfo

func (m *RequestDeleteCall) GetCallId() int64 {
	if m != nil {
		return m.CallId
	}
	return 0
}

// Changes the call display name
type RequestChangeCallDisplayName struct {
	CallId      int64              `protobuf:"varint,1,opt,name=call_id,json=callId,proto3" json:"call_id,omitempty"`
	DisplayName *types.StringValue `protobuf:"bytes,2,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
}

func (m *RequestChangeCallDisplayName) Reset()      { *m = RequestChangeCallDisplayName{} }
func (*RequestChangeCallDisplayName) ProtoMessage() {}
func (*RequestChangeCallDisplayName) Descriptor() ([]byte, []int) {
	return fileDescriptor_36dc76573d9e3aea, []int{14}
}
func (m *RequestChangeCallDisplayName) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RequestChangeCallDisplayName) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RequestChangeCallDisplayName.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RequestChangeCallDisplayName) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RequestChangeCallDisplayName.Merge(m, src)
}
func (m *RequestChangeCallDisplayName) XXX_Size() int {
	return m.Size()
}
func (m *RequestChangeCallDisplayName) XXX_DiscardUnknown() {
	xxx_messageInfo_RequestChangeCallDisplayName.DiscardUnknown(m)
}

var xxx_messageInfo_RequestChangeCallDisplayName proto.InternalMessageInfo

func (m *RequestChangeCallDisplayName) GetCallId() int64 {
	if m != nil {
		return m.CallId
	}
	return 0
}

func (m *RequestChangeCallDisplayName) GetDisplayName() *types.StringValue {
	if m != nil {
		return m.DisplayName
	}
	return nil
}

// ICE Server description
type ICEServer struct {
	/// Url to server
	Url string `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
	/// Optional username
	Username *types.StringValue `protobuf:"bytes,2,opt,name=username,proto3" json:"username,omitempty"`
	/// Optional credential
	Credential *types.StringValue `protobuf:"bytes,3,opt,name=credential,proto3" json:"credential,omitempty"`
}

func (m *ICEServer) Reset()      { *m = ICEServer{} }
func (*ICEServer) ProtoMessage() {}
func (*ICEServer) Descriptor() ([]byte, []int) {
	return fileDescriptor_36dc76573d9e3aea, []int{15}
}
func (m *ICEServer) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ICEServer) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ICEServer.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ICEServer) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ICEServer.Merge(m, src)
}
func (m *ICEServer) XXX_Size() int {
	return m.Size()
}
func (m *ICEServer) XXX_DiscardUnknown() {
	xxx_messageInfo_ICEServer.DiscardUnknown(m)
}

var xxx_messageInfo_ICEServer proto.InternalMessageInfo

func (m *ICEServer) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func (m *ICEServer) GetUsername() *types.StringValue {
	if m != nil {
		return m.Username
	}
	return nil
}

func (m *ICEServer) GetCredential() *types.StringValue {
	if m != nil {
		return m.Credential
	}
	return nil
}

// Structure representing an ICE candidate
type ICECandidate struct {
	SdpMLineIndex int32  `protobuf:"varint,1,opt,name=sdp_m_line_index,json=sdpMLineIndex,proto3" json:"sdp_m_line_index,omitempty"`
	SdpMid        string `protobuf:"bytes,2,opt,name=sdp_mid,json=sdpMid,proto3" json:"sdp_mid,omitempty"`
	Sdp           string `protobuf:"bytes,3,opt,name=sdp,proto3" json:"sdp,omitempty"`
}

func (m *ICECandidate) Reset()      { *m = ICECandidate{} }
func (*ICECandidate) ProtoMessage() {}
func (*ICECandidate) Descriptor() ([]byte, []int) {
	return fileDescriptor_36dc76573d9e3aea, []int{16}
}
func (m *ICECandidate) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ICECandidate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ICECandidate.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ICECandidate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ICECandidate.Merge(m, src)
}
func (m *ICECandidate) XXX_Size() int {
	return m.Size()
}
func (m *ICECandidate) XXX_DiscardUnknown() {
	xxx_messageInfo_ICECandidate.DiscardUnknown(m)
}

var xxx_messageInfo_ICECandidate proto.InternalMessageInfo

func (m *ICECandidate) GetSdpMLineIndex() int32 {
	if m != nil {
		return m.SdpMLineIndex
	}
	return 0
}

func (m *ICECandidate) GetSdpMid() string {
	if m != nil {
		return m.SdpMid
	}
	return ""
}

func (m *ICECandidate) GetSdp() string {
	if m != nil {
		return m.Sdp
	}
	return ""
}

type WebRTCSignaling struct {
	// Types that are valid to be assigned to Body:
	//	*WebRTCSignaling_AdvertiseSelf
	//	*WebRTCSignaling_AdvertiseMaster
	//	*WebRTCSignaling_AdvertisePeer
	//	*WebRTCSignaling_Candidate
	//	*WebRTCSignaling_GotICECandidate
	//	*WebRTCSignaling_RemovedICECandidates
	//	*WebRTCSignaling_Offer
	//	*WebRTCSignaling_Answer
	//	*WebRTCSignaling_NeedOffer
	//	*WebRTCSignaling_NegotinationSuccessful
	//	*WebRTCSignaling_EnableConnection
	//	*WebRTCSignaling_OnRenegotiationNeeded
	//	*WebRTCSignaling_CloseSession
	//	*WebRTCSignaling_NeedDisconnect
	//	*WebRTCSignaling_DTMF
	//	*WebRTCSignaling_CallStats
	//	*WebRTCSignaling_CallNameChanged
	Body isWebRTCSignaling_Body `protobuf_oneof:"body"`
}

func (m *WebRTCSignaling) Reset()      { *m = WebRTCSignaling{} }
func (*WebRTCSignaling) ProtoMessage() {}
func (*WebRTCSignaling) Descriptor() ([]byte, []int) {
	return fileDescriptor_36dc76573d9e3aea, []int{17}
}
func (m *WebRTCSignaling) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WebRTCSignaling) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WebRTCSignaling.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WebRTCSignaling) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WebRTCSignaling.Merge(m, src)
}
func (m *WebRTCSignaling) XXX_Size() int {
	return m.Size()
}
func (m *WebRTCSignaling) XXX_DiscardUnknown() {
	xxx_messageInfo_WebRTCSignaling.DiscardUnknown(m)
}

var xxx_messageInfo_WebRTCSignaling proto.InternalMessageInfo

type isWebRTCSignaling_Body interface {
	isWebRTCSignaling_Body()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type WebRTCSignaling_AdvertiseSelf struct {
	AdvertiseSelf *AdvertiseSelf `protobuf:"bytes,1,opt,name=advertiseSelf,proto3,oneof" json:"advertiseSelf,omitempty"`
}
type WebRTCSignaling_AdvertiseMaster struct {
	AdvertiseMaster *AdvertiseMaster `protobuf:"bytes,2,opt,name=advertiseMaster,proto3,oneof" json:"advertiseMaster,omitempty"`
}
type WebRTCSignaling_AdvertisePeer struct {
	AdvertisePeer *AdvertisePeer `protobuf:"bytes,3,opt,name=advertisePeer,proto3,oneof" json:"advertisePeer,omitempty"`
}
type WebRTCSignaling_Candidate struct {
	Candidate *Candidate `protobuf:"bytes,4,opt,name=candidate,proto3,oneof" json:"candidate,omitempty"`
}
type WebRTCSignaling_GotICECandidate struct {
	GotICECandidate *GotICECandidate `protobuf:"bytes,5,opt,name=gotICECandidate,proto3,oneof" json:"gotICECandidate,omitempty"`
}
type WebRTCSignaling_RemovedICECandidates struct {
	RemovedICECandidates *RemovedICECandidates `protobuf:"bytes,6,opt,name=removedICECandidates,proto3,oneof" json:"removedICECandidates,omitempty"`
}
type WebRTCSignaling_Offer struct {
	Offer *Offer `protobuf:"bytes,7,opt,name=offer,proto3,oneof" json:"offer,omitempty"`
}
type WebRTCSignaling_Answer struct {
	Answer *Answer `protobuf:"bytes,8,opt,name=answer,proto3,oneof" json:"answer,omitempty"`
}
type WebRTCSignaling_NeedOffer struct {
	NeedOffer *NeedOffer `protobuf:"bytes,9,opt,name=needOffer,proto3,oneof" json:"needOffer,omitempty"`
}
type WebRTCSignaling_NegotinationSuccessful struct {
	NegotinationSuccessful *NegotinationSuccessful `protobuf:"bytes,10,opt,name=negotinationSuccessful,proto3,oneof" json:"negotinationSuccessful,omitempty"`
}
type WebRTCSignaling_EnableConnection struct {
	EnableConnection *EnableConnection `protobuf:"bytes,11,opt,name=enableConnection,proto3,oneof" json:"enableConnection,omitempty"`
}
type WebRTCSignaling_OnRenegotiationNeeded struct {
	OnRenegotiationNeeded *OnRenegotiationNeeded `protobuf:"bytes,12,opt,name=onRenegotiationNeeded,proto3,oneof" json:"onRenegotiationNeeded,omitempty"`
}
type WebRTCSignaling_CloseSession struct {
	CloseSession *CloseSession `protobuf:"bytes,13,opt,name=closeSession,proto3,oneof" json:"closeSession,omitempty"`
}
type WebRTCSignaling_NeedDisconnect struct {
	NeedDisconnect *NeedDisconnect `protobuf:"bytes,14,opt,name=needDisconnect,proto3,oneof" json:"needDisconnect,omitempty"`
}
type WebRTCSignaling_DTMF struct {
	DTMF *DTMF `protobuf:"bytes,15,opt,name=dTMF,proto3,oneof" json:"dTMF,omitempty"`
}
type WebRTCSignaling_CallStats struct {
	CallStats *CallStats `protobuf:"bytes,16,opt,name=callStats,proto3,oneof" json:"callStats,omitempty"`
}
type WebRTCSignaling_CallNameChanged struct {
	CallNameChanged *CallNameChanged `protobuf:"bytes,17,opt,name=callNameChanged,proto3,oneof" json:"callNameChanged,omitempty"`
}

func (*WebRTCSignaling_AdvertiseSelf) isWebRTCSignaling_Body()          {}
func (*WebRTCSignaling_AdvertiseMaster) isWebRTCSignaling_Body()        {}
func (*WebRTCSignaling_AdvertisePeer) isWebRTCSignaling_Body()          {}
func (*WebRTCSignaling_Candidate) isWebRTCSignaling_Body()              {}
func (*WebRTCSignaling_GotICECandidate) isWebRTCSignaling_Body()        {}
func (*WebRTCSignaling_RemovedICECandidates) isWebRTCSignaling_Body()   {}
func (*WebRTCSignaling_Offer) isWebRTCSignaling_Body()                  {}
func (*WebRTCSignaling_Answer) isWebRTCSignaling_Body()                 {}
func (*WebRTCSignaling_NeedOffer) isWebRTCSignaling_Body()              {}
func (*WebRTCSignaling_NegotinationSuccessful) isWebRTCSignaling_Body() {}
func (*WebRTCSignaling_EnableConnection) isWebRTCSignaling_Body()       {}
func (*WebRTCSignaling_OnRenegotiationNeeded) isWebRTCSignaling_Body()  {}
func (*WebRTCSignaling_CloseSession) isWebRTCSignaling_Body()           {}
func (*WebRTCSignaling_NeedDisconnect) isWebRTCSignaling_Body()         {}
func (*WebRTCSignaling_DTMF) isWebRTCSignaling_Body()                   {}
func (*WebRTCSignaling_CallStats) isWebRTCSignaling_Body()              {}
func (*WebRTCSignaling_CallNameChanged) isWebRTCSignaling_Body()        {}

func (m *WebRTCSignaling) GetBody() isWebRTCSignaling_Body {
	if m != nil {
		return m.Body
	}
	return nil
}

func (m *WebRTCSignaling) GetAdvertiseSelf() *AdvertiseSelf {
	if x, ok := m.GetBody().(*WebRTCSignaling_AdvertiseSelf); ok {
		return x.AdvertiseSelf
	}
	return nil
}

func (m *WebRTCSignaling) GetAdvertiseMaster() *AdvertiseMaster {
	if x, ok := m.GetBody().(*WebRTCSignaling_AdvertiseMaster); ok {
		return x.AdvertiseMaster
	}
	return nil
}

func (m *WebRTCSignaling) GetAdvertisePeer() *AdvertisePeer {
	if x, ok := m.GetBody().(*WebRTCSignaling_AdvertisePeer); ok {
		return x.AdvertisePeer
	}
	return nil
}

func (m *WebRTCSignaling) GetCandidate() *Candidate {
	if x, ok := m.GetBody().(*WebRTCSignaling_Candidate); ok {
		return x.Candidate
	}
	return nil
}

func (m *WebRTCSignaling) GetGotICECandidate() *GotICECandidate {
	if x, ok := m.GetBody().(*WebRTCSignaling_GotICECandidate); ok {
		return x.GotICECandidate
	}
	return nil
}

func (m *WebRTCSignaling) GetRemovedICECandidates() *RemovedICECandidates {
	if x, ok := m.GetBody().(*WebRTCSignaling_RemovedICECandidates); ok {
		return x.RemovedICECandidates
	}
	return nil
}

func (m *WebRTCSignaling) GetOffer() *Offer {
	if x, ok := m.GetBody().(*WebRTCSignaling_Offer); ok {
		return x.Offer
	}
	return nil
}

func (m *WebRTCSignaling) GetAnswer() *Answer {
	if x, ok := m.GetBody().(*WebRTCSignaling_Answer); ok {
		return x.Answer
	}
	return nil
}

func (m *WebRTCSignaling) GetNeedOffer() *NeedOffer {
	if x, ok := m.GetBody().(*WebRTCSignaling_NeedOffer); ok {
		return x.NeedOffer
	}
	return nil
}

func (m *WebRTCSignaling) GetNegotinationSuccessful() *NegotinationSuccessful {
	if x, ok := m.GetBody().(*WebRTCSignaling_NegotinationSuccessful); ok {
		return x.NegotinationSuccessful
	}
	return nil
}

func (m *WebRTCSignaling) GetEnableConnection() *EnableConnection {
	if x, ok := m.GetBody().(*WebRTCSignaling_EnableConnection); ok {
		return x.EnableConnection
	}
	return nil
}

func (m *WebRTCSignaling) GetOnRenegotiationNeeded() *OnRenegotiationNeeded {
	if x, ok := m.GetBody().(*WebRTCSignaling_OnRenegotiationNeeded); ok {
		return x.OnRenegotiationNeeded
	}
	return nil
}

func (m *WebRTCSignaling) GetCloseSession() *CloseSession {
	if x, ok := m.GetBody().(*WebRTCSignaling_CloseSession); ok {
		return x.CloseSession
	}
	return nil
}

func (m *WebRTCSignaling) GetNeedDisconnect() *NeedDisconnect {
	if x, ok := m.GetBody().(*WebRTCSignaling_NeedDisconnect); ok {
		return x.NeedDisconnect
	}
	return nil
}

func (m *WebRTCSignaling) GetDTMF() *DTMF {
	if x, ok := m.GetBody().(*WebRTCSignaling_DTMF); ok {
		return x.DTMF
	}
	return nil
}

func (m *WebRTCSignaling) GetCallStats() *CallStats {
	if x, ok := m.GetBody().(*WebRTCSignaling_CallStats); ok {
		return x.CallStats
	}
	return nil
}

func (m *WebRTCSignaling) GetCallNameChanged() *CallNameChanged {
	if x, ok := m.GetBody().(*WebRTCSignaling_CallNameChanged); ok {
		return x.CallNameChanged
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*WebRTCSignaling) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*WebRTCSignaling_AdvertiseSelf)(nil),
		(*WebRTCSignaling_AdvertiseMaster)(nil),
		(*WebRTCSignaling_AdvertisePeer)(nil),
		(*WebRTCSignaling_Candidate)(nil),
		(*WebRTCSignaling_GotICECandidate)(nil),
		(*WebRTCSignaling_RemovedICECandidates)(nil),
		(*WebRTCSignaling_Offer)(nil),
		(*WebRTCSignaling_Answer)(nil),
		(*WebRTCSignaling_NeedOffer)(nil),
		(*WebRTCSignaling_NegotinationSuccessful)(nil),
		(*WebRTCSignaling_EnableConnection)(nil),
		(*WebRTCSignaling_OnRenegotiationNeeded)(nil),
		(*WebRTCSignaling_CloseSession)(nil),
		(*WebRTCSignaling_NeedDisconnect)(nil),
		(*WebRTCSignaling_DTMF)(nil),
		(*WebRTCSignaling_CallStats)(nil),
		(*WebRTCSignaling_CallNameChanged)(nil),
	}
}

// Advertizing self to a master mode
type AdvertiseSelf struct {
	/// Optional peer Settings
	PeerSettings *PeerSettings `protobuf:"bytes,1,opt,name=peer_settings,json=peerSettings,proto3" json:"peer_settings,omitempty"`
}

func (m *AdvertiseSelf) Reset()      { *m = AdvertiseSelf{} }
func (*AdvertiseSelf) ProtoMessage() {}
func (*AdvertiseSelf) Descriptor() ([]byte, []int) {
	return fileDescriptor_36dc76573d9e3aea, []int{18}
}
func (m *AdvertiseSelf) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AdvertiseSelf) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AdvertiseSelf.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AdvertiseSelf) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AdvertiseSelf.Merge(m, src)
}
func (m *AdvertiseSelf) XXX_Size() int {
	return m.Size()
}
func (m *AdvertiseSelf) XXX_DiscardUnknown() {
	xxx_messageInfo_AdvertiseSelf.DiscardUnknown(m)
}

var xxx_messageInfo_AdvertiseSelf proto.InternalMessageInfo

func (m *AdvertiseSelf) GetPeerSettings() *PeerSettings {
	if m != nil {
		return m.PeerSettings
	}
	return nil
}

// Sent by master
type AdvertiseMaster struct {
	/// a list of ICE servers
	Server []*ICEServer `protobuf:"bytes,1,rep,name=server,proto3" json:"server,omitempty"`
	/// a verison of the call signaling
	CallApiVersion *types.Int32Value  `protobuf:"bytes,2,opt,name=call_api_version,json=callApiVersion,proto3" json:"call_api_version,omitempty"`
	CallName       *types.StringValue `protobuf:"bytes,3,opt,name=call_name,json=callName,proto3" json:"call_name,omitempty"`
}

func (m *AdvertiseMaster) Reset()      { *m = AdvertiseMaster{} }
func (*AdvertiseMaster) ProtoMessage() {}
func (*AdvertiseMaster) Descriptor() ([]byte, []int) {
	return fileDescriptor_36dc76573d9e3aea, []int{19}
}
func (m *AdvertiseMaster) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AdvertiseMaster) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AdvertiseMaster.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AdvertiseMaster) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AdvertiseMaster.Merge(m, src)
}
func (m *AdvertiseMaster) XXX_Size() int {
	return m.Size()
}
func (m *AdvertiseMaster) XXX_DiscardUnknown() {
	xxx_messageInfo_AdvertiseMaster.DiscardUnknown(m)
}

var xxx_messageInfo_AdvertiseMaster proto.InternalMessageInfo

func (m *AdvertiseMaster) GetServer() []*ICEServer {
	if m != nil {
		return m.Server
	}
	return nil
}

func (m *AdvertiseMaster) GetCallApiVersion() *types.Int32Value {
	if m != nil {
		return m.CallApiVersion
	}
	return nil
}

func (m *AdvertiseMaster) GetCallName() *types.StringValue {
	if m != nil {
		return m.CallName
	}
	return nil
}

// Peer advertisement
type AdvertisePeer struct {
	/// device id of the peer
	DeviceId int64 `protobuf:"varint,1,opt,name=device_id,json=deviceId,proto3" json:"device_id,omitempty"`
	/// settings for the peer
	PeerSettings *PeerSettings `protobuf:"bytes,2,opt,name=peer_settings,json=peerSettings,proto3" json:"peer_settings,omitempty"`
	/// ice servers for the peer
	IceServers []*ICEServer `protobuf:"bytes,3,rep,name=ice_servers,json=iceServers,proto3" json:"ice_servers,omitempty"`
}

func (m *AdvertisePeer) Reset()      { *m = AdvertisePeer{} }
func (*AdvertisePeer) ProtoMessage() {}
func (*AdvertisePeer) Descriptor() ([]byte, []int) {
	return fileDescriptor_36dc76573d9e3aea, []int{20}
}
func (m *AdvertisePeer) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AdvertisePeer) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AdvertisePeer.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AdvertisePeer) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AdvertisePeer.Merge(m, src)
}
func (m *AdvertisePeer) XXX_Size() int {
	return m.Size()
}
func (m *AdvertisePeer) XXX_DiscardUnknown() {
	xxx_messageInfo_AdvertisePeer.DiscardUnknown(m)
}

var xxx_messageInfo_AdvertisePeer proto.InternalMessageInfo

func (m *AdvertisePeer) GetDeviceId() int64 {
	if m != nil {
		return m.DeviceId
	}
	return 0
}

func (m *AdvertisePeer) GetPeerSettings() *PeerSettings {
	if m != nil {
		return m.PeerSettings
	}
	return nil
}

func (m *AdvertisePeer) GetIceServers() []*ICEServer {
	if m != nil {
		return m.IceServers
	}
	return nil
}

// Candidate signal
type Candidate struct {
	/// Session Id of candidate
	SessionId int64 `protobuf:"varint,1,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	/// Index of candidate
	Index int32 `protobuf:"varint,2,opt,name=index,proto3" json:"index,omitempty"`
	/// Id of candidate
	Id string `protobuf:"bytes,3,opt,name=id,proto3" json:"id,omitempty"`
	/// SDP of candidate
	Sdp string `protobuf:"bytes,4,opt,name=sdp,proto3" json:"sdp,omitempty"`
}

func (m *Candidate) Reset()      { *m = Candidate{} }
func (*Candidate) ProtoMessage() {}
func (*Candidate) Descriptor() ([]byte, []int) {
	return fileDescriptor_36dc76573d9e3aea, []int{21}
}
func (m *Candidate) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Candidate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Candidate.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Candidate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Candidate.Merge(m, src)
}
func (m *Candidate) XXX_Size() int {
	return m.Size()
}
func (m *Candidate) XXX_DiscardUnknown() {
	xxx_messageInfo_Candidate.DiscardUnknown(m)
}

var xxx_messageInfo_Candidate proto.InternalMessageInfo

func (m *Candidate) GetSessionId() int64 {
	if m != nil {
		return m.SessionId
	}
	return 0
}

func (m *Candidate) GetIndex() int32 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *Candidate) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Candidate) GetSdp() string {
	if m != nil {
		return m.Sdp
	}
	return ""
}

// WebRTC IceCandidate add signal.
// Used to let the other party know about new ICE candidate, usually from onIceCandidate callback of WebRTC
type GotICECandidate struct {
	SessionId int64         `protobuf:"varint,1,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	Candidate *ICECandidate `protobuf:"bytes,2,opt,name=candidate,proto3" json:"candidate,omitempty"`
}

func (m *GotICECandidate) Reset()      { *m = GotICECandidate{} }
func (*GotICECandidate) ProtoMessage() {}
func (*GotICECandidate) Descriptor() ([]byte, []int) {
	return fileDescriptor_36dc76573d9e3aea, []int{22}
}
func (m *GotICECandidate) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GotICECandidate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GotICECandidate.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GotICECandidate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GotICECandidate.Merge(m, src)
}
func (m *GotICECandidate) XXX_Size() int {
	return m.Size()
}
func (m *GotICECandidate) XXX_DiscardUnknown() {
	xxx_messageInfo_GotICECandidate.DiscardUnknown(m)
}

var xxx_messageInfo_GotICECandidate proto.InternalMessageInfo

func (m *GotICECandidate) GetSessionId() int64 {
	if m != nil {
		return m.SessionId
	}
	return 0
}

func (m *GotICECandidate) GetCandidate() *ICECandidate {
	if m != nil {
		return m.Candidate
	}
	return nil
}

// WebRTC IceCandidate remove signal
// Used to let the other party know about ICE candidate list change, usually from onIceCandidatesRemoved callback
type RemovedICECandidates struct {
	SessionId int64           `protobuf:"varint,1,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	Candidate []*ICECandidate `protobuf:"bytes,2,rep,name=candidate,proto3" json:"candidate,omitempty"`
}

func (m *RemovedICECandidates) Reset()      { *m = RemovedICECandidates{} }
func (*RemovedICECandidates) ProtoMessage() {}
func (*RemovedICECandidates) Descriptor() ([]byte, []int) {
	return fileDescriptor_36dc76573d9e3aea, []int{23}
}
func (m *RemovedICECandidates) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RemovedICECandidates) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RemovedICECandidates.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RemovedICECandidates) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RemovedICECandidates.Merge(m, src)
}
func (m *RemovedICECandidates) XXX_Size() int {
	return m.Size()
}
func (m *RemovedICECandidates) XXX_DiscardUnknown() {
	xxx_messageInfo_RemovedICECandidates.DiscardUnknown(m)
}

var xxx_messageInfo_RemovedICECandidates proto.InternalMessageInfo

func (m *RemovedICECandidates) GetSessionId() int64 {
	if m != nil {
		return m.SessionId
	}
	return 0
}

func (m *RemovedICECandidates) GetCandidate() []*ICECandidate {
	if m != nil {
		return m.Candidate
	}
	return nil
}

// Offer signal
type Offer struct {
	/// Session Id of offer
	SessionId int64 `protobuf:"varint,1,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	/// Offer SDP
	Sdp string `protobuf:"bytes,2,opt,name=sdp,proto3" json:"sdp,omitempty"`
	/// Deprecated Own Peer settings
	PeerSettings *PeerSettings `protobuf:"bytes,3,opt,name=peer_settings,json=peerSettings,proto3" json:"peer_settings,omitempty"`
}

func (m *Offer) Reset()      { *m = Offer{} }
func (*Offer) ProtoMessage() {}
func (*Offer) Descriptor() ([]byte, []int) {
	return fileDescriptor_36dc76573d9e3aea, []int{24}
}
func (m *Offer) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Offer) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Offer.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Offer) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Offer.Merge(m, src)
}
func (m *Offer) XXX_Size() int {
	return m.Size()
}
func (m *Offer) XXX_DiscardUnknown() {
	xxx_messageInfo_Offer.DiscardUnknown(m)
}

var xxx_messageInfo_Offer proto.InternalMessageInfo

func (m *Offer) GetSessionId() int64 {
	if m != nil {
		return m.SessionId
	}
	return 0
}

func (m *Offer) GetSdp() string {
	if m != nil {
		return m.Sdp
	}
	return ""
}

func (m *Offer) GetPeerSettings() *PeerSettings {
	if m != nil {
		return m.PeerSettings
	}
	return nil
}

// Answer signal
type Answer struct {
	/// Session Id of answer
	SessionId int64 `protobuf:"varint,1,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	/// Answer SDP
	Sdp string `protobuf:"bytes,2,opt,name=sdp,proto3" json:"sdp,omitempty"`
}

func (m *Answer) Reset()      { *m = Answer{} }
func (*Answer) ProtoMessage() {}
func (*Answer) Descriptor() ([]byte, []int) {
	return fileDescriptor_36dc76573d9e3aea, []int{25}
}
func (m *Answer) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Answer) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Answer.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Answer) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Answer.Merge(m, src)
}
func (m *Answer) XXX_Size() int {
	return m.Size()
}
func (m *Answer) XXX_DiscardUnknown() {
	xxx_messageInfo_Answer.DiscardUnknown(m)
}

var xxx_messageInfo_Answer proto.InternalMessageInfo

func (m *Answer) GetSessionId() int64 {
	if m != nil {
		return m.SessionId
	}
	return 0
}

func (m *Answer) GetSdp() string {
	if m != nil {
		return m.Sdp
	}
	return ""
}

// Notification from master that offer is required
type NeedOffer struct {
	/// Destination Device Id
	Device int64 `protobuf:"varint,1,opt,name=device,proto3" json:"device,omitempty"`
	/// Session Id
	SessionId int64 `protobuf:"varint,2,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	/// Deprecated peer settings
	PeerSettings *PeerSettings `protobuf:"bytes,3,opt,name=peer_settings,json=peerSettings,proto3" json:"peer_settings,omitempty"`
}

func (m *NeedOffer) Reset()      { *m = NeedOffer{} }
func (*NeedOffer) ProtoMessage() {}
func (*NeedOffer) Descriptor() ([]byte, []int) {
	return fileDescriptor_36dc76573d9e3aea, []int{26}
}
func (m *NeedOffer) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NeedOffer) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NeedOffer.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NeedOffer) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NeedOffer.Merge(m, src)
}
func (m *NeedOffer) XXX_Size() int {
	return m.Size()
}
func (m *NeedOffer) XXX_DiscardUnknown() {
	xxx_messageInfo_NeedOffer.DiscardUnknown(m)
}

var xxx_messageInfo_NeedOffer proto.InternalMessageInfo

func (m *NeedOffer) GetDevice() int64 {
	if m != nil {
		return m.Device
	}
	return 0
}

func (m *NeedOffer) GetSessionId() int64 {
	if m != nil {
		return m.SessionId
	}
	return 0
}

func (m *NeedOffer) GetPeerSettings() *PeerSettings {
	if m != nil {
		return m.PeerSettings
	}
	return nil
}

// Notification about on negotiation is successful
type NegotinationSuccessful struct {
	/// Device Id
	Device int64 `protobuf:"varint,1,opt,name=device,proto3" json:"device,omitempty"`
	/// Session Id
	SessionId int64 `protobuf:"varint,2,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
}

func (m *NegotinationSuccessful) Reset()      { *m = NegotinationSuccessful{} }
func (*NegotinationSuccessful) ProtoMessage() {}
func (*NegotinationSuccessful) Descriptor() ([]byte, []int) {
	return fileDescriptor_36dc76573d9e3aea, []int{27}
}
func (m *NegotinationSuccessful) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NegotinationSuccessful) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NegotinationSuccessful.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NegotinationSuccessful) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NegotinationSuccessful.Merge(m, src)
}
func (m *NegotinationSuccessful) XXX_Size() int {
	return m.Size()
}
func (m *NegotinationSuccessful) XXX_DiscardUnknown() {
	xxx_messageInfo_NegotinationSuccessful.DiscardUnknown(m)
}

var xxx_messageInfo_NegotinationSuccessful proto.InternalMessageInfo

func (m *NegotinationSuccessful) GetDevice() int64 {
	if m != nil {
		return m.Device
	}
	return 0
}

func (m *NegotinationSuccessful) GetSessionId() int64 {
	if m != nil {
		return m.SessionId
	}
	return 0
}

// Notification about enabling connection to peer
type EnableConnection struct {
	/// Device Id
	Device int64 `protobuf:"varint,1,opt,name=device,proto3" json:"device,omitempty"`
	/// Session Id
	SessionId int64 `protobuf:"varint,2,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
}

func (m *EnableConnection) Reset()      { *m = EnableConnection{} }
func (*EnableConnection) ProtoMessage() {}
func (*EnableConnection) Descriptor() ([]byte, []int) {
	return fileDescriptor_36dc76573d9e3aea, []int{28}
}
func (m *EnableConnection) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EnableConnection) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EnableConnection.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EnableConnection) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EnableConnection.Merge(m, src)
}
func (m *EnableConnection) XXX_Size() int {
	return m.Size()
}
func (m *EnableConnection) XXX_DiscardUnknown() {
	xxx_messageInfo_EnableConnection.DiscardUnknown(m)
}

var xxx_messageInfo_EnableConnection proto.InternalMessageInfo

func (m *EnableConnection) GetDevice() int64 {
	if m != nil {
		return m.Device
	}
	return 0
}

func (m *EnableConnection) GetSessionId() int64 {
	if m != nil {
		return m.SessionId
	}
	return 0
}

// Need renegotiate session. For example when streams are changed.
type OnRenegotiationNeeded struct {
	/// Device Id
	Device int64 `protobuf:"varint,1,opt,name=device,proto3" json:"device,omitempty"`
	/// Session Id
	SessionId int64 `protobuf:"varint,2,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
}

func (m *OnRenegotiationNeeded) Reset()      { *m = OnRenegotiationNeeded{} }
func (*OnRenegotiationNeeded) ProtoMessage() {}
func (*OnRenegotiationNeeded) Descriptor() ([]byte, []int) {
	return fileDescriptor_36dc76573d9e3aea, []int{29}
}
func (m *OnRenegotiationNeeded) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OnRenegotiationNeeded) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OnRenegotiationNeeded.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OnRenegotiationNeeded) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OnRenegotiationNeeded.Merge(m, src)
}
func (m *OnRenegotiationNeeded) XXX_Size() int {
	return m.Size()
}
func (m *OnRenegotiationNeeded) XXX_DiscardUnknown() {
	xxx_messageInfo_OnRenegotiationNeeded.DiscardUnknown(m)
}

var xxx_messageInfo_OnRenegotiationNeeded proto.InternalMessageInfo

func (m *OnRenegotiationNeeded) GetDevice() int64 {
	if m != nil {
		return m.Device
	}
	return 0
}

func (m *OnRenegotiationNeeded) GetSessionId() int64 {
	if m != nil {
		return m.SessionId
	}
	return 0
}

// Close this session and be ready to
type CloseSession struct {
	/// Device Id
	Device int64 `protobuf:"varint,1,opt,name=device,proto3" json:"device,omitempty"`
	/// Session Id for renegotiation
	SessionId int64 `protobuf:"varint,2,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
}

func (m *CloseSession) Reset()      { *m = CloseSession{} }
func (*CloseSession) ProtoMessage() {}
func (*CloseSession) Descriptor() ([]byte, []int) {
	return fileDescriptor_36dc76573d9e3aea, []int{30}
}
func (m *CloseSession) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CloseSession) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CloseSession.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CloseSession) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CloseSession.Merge(m, src)
}
func (m *CloseSession) XXX_Size() int {
	return m.Size()
}
func (m *CloseSession) XXX_DiscardUnknown() {
	xxx_messageInfo_CloseSession.DiscardUnknown(m)
}

var xxx_messageInfo_CloseSession proto.InternalMessageInfo

func (m *CloseSession) GetDevice() int64 {
	if m != nil {
		return m.Device
	}
	return 0
}

func (m *CloseSession) GetSessionId() int64 {
	if m != nil {
		return m.SessionId
	}
	return 0
}

// Notification about requirement about required disconnection from peer
type NeedDisconnect struct {
	Device int64 `protobuf:"varint,1,opt,name=device,proto3" json:"device,omitempty"`
}

func (m *NeedDisconnect) Reset()      { *m = NeedDisconnect{} }
func (*NeedDisconnect) ProtoMessage() {}
func (*NeedDisconnect) Descriptor() ([]byte, []int) {
	return fileDescriptor_36dc76573d9e3aea, []int{31}
}
func (m *NeedDisconnect) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NeedDisconnect) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NeedDisconnect.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NeedDisconnect) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NeedDisconnect.Merge(m, src)
}
func (m *NeedDisconnect) XXX_Size() int {
	return m.Size()
}
func (m *NeedDisconnect) XXX_DiscardUnknown() {
	xxx_messageInfo_NeedDisconnect.DiscardUnknown(m)
}

var xxx_messageInfo_NeedDisconnect proto.InternalMessageInfo

func (m *NeedDisconnect) GetDevice() int64 {
	if m != nil {
		return m.Device
	}
	return 0
}

// Emulates DTMF key press
type DTMF struct {
	Code     DTMFCode `protobuf:"varint,1,opt,name=code,proto3,enum=dialog.DTMFCode" json:"code,omitempty"`
	Duration int64    `protobuf:"varint,2,opt,name=duration,proto3" json:"duration,omitempty"`
}

func (m *DTMF) Reset()      { *m = DTMF{} }
func (*DTMF) ProtoMessage() {}
func (*DTMF) Descriptor() ([]byte, []int) {
	return fileDescriptor_36dc76573d9e3aea, []int{32}
}
func (m *DTMF) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DTMF) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DTMF.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DTMF) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DTMF.Merge(m, src)
}
func (m *DTMF) XXX_Size() int {
	return m.Size()
}
func (m *DTMF) XXX_DiscardUnknown() {
	xxx_messageInfo_DTMF.DiscardUnknown(m)
}

var xxx_messageInfo_DTMF proto.InternalMessageInfo

func (m *DTMF) GetCode() DTMFCode {
	if m != nil {
		return m.Code
	}
	return DTMFCODE_UNKNOWN
}

func (m *DTMF) GetDuration() int64 {
	if m != nil {
		return m.Duration
	}
	return 0
}

// Used to send call statistics to the server
type CallStats struct {
	/// the type of the event
	Type CallStatsType `protobuf:"varint,1,opt,name=type,proto3,enum=dialog.CallStatsType" json:"type,omitempty"`
	/// the value of the event
	Value string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *CallStats) Reset()      { *m = CallStats{} }
func (*CallStats) ProtoMessage() {}
func (*CallStats) Descriptor() ([]byte, []int) {
	return fileDescriptor_36dc76573d9e3aea, []int{33}
}
func (m *CallStats) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CallStats) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CallStats.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CallStats) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CallStats.Merge(m, src)
}
func (m *CallStats) XXX_Size() int {
	return m.Size()
}
func (m *CallStats) XXX_DiscardUnknown() {
	xxx_messageInfo_CallStats.DiscardUnknown(m)
}

var xxx_messageInfo_CallStats proto.InternalMessageInfo

func (m *CallStats) GetType() CallStatsType {
	if m != nil {
		return m.Type
	}
	return CALLSTATSTYPE_UNKNOWN
}

func (m *CallStats) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

// Used to notify participants about call name changes
type CallNameChanged struct {
	CallName *types.StringValue `protobuf:"bytes,1,opt,name=call_name,json=callName,proto3" json:"call_name,omitempty"`
}

func (m *CallNameChanged) Reset()      { *m = CallNameChanged{} }
func (*CallNameChanged) ProtoMessage() {}
func (*CallNameChanged) Descriptor() ([]byte, []int) {
	return fileDescriptor_36dc76573d9e3aea, []int{34}
}
func (m *CallNameChanged) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CallNameChanged) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CallNameChanged.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CallNameChanged) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CallNameChanged.Merge(m, src)
}
func (m *CallNameChanged) XXX_Size() int {
	return m.Size()
}
func (m *CallNameChanged) XXX_DiscardUnknown() {
	xxx_messageInfo_CallNameChanged.DiscardUnknown(m)
}

var xxx_messageInfo_CallNameChanged proto.InternalMessageInfo

func (m *CallNameChanged) GetCallName() *types.StringValue {
	if m != nil {
		return m.CallName
	}
	return nil
}

// Active Calls. Used in broadcasting states of current calls.
type ActiveCall struct {
	CallId int64 `protobuf:"varint,1,opt,name=call_id,json=callId,proto3" json:"call_id,omitempty"`
	Peer   *Peer `protobuf:"bytes,2,opt,name=peer,proto3" json:"peer,omitempty"`
	/// Call Members
	CallMembers []*CallMember `protobuf:"bytes,3,rep,name=call_members,json=callMembers,proto3" json:"call_members,omitempty"`
}

func (m *ActiveCall) Reset()      { *m = ActiveCall{} }
func (*ActiveCall) ProtoMessage() {}
func (*ActiveCall) Descriptor() ([]byte, []int) {
	return fileDescriptor_36dc76573d9e3aea, []int{35}
}
func (m *ActiveCall) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ActiveCall) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ActiveCall.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ActiveCall) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ActiveCall.Merge(m, src)
}
func (m *ActiveCall) XXX_Size() int {
	return m.Size()
}
func (m *ActiveCall) XXX_DiscardUnknown() {
	xxx_messageInfo_ActiveCall.DiscardUnknown(m)
}

var xxx_messageInfo_ActiveCall proto.InternalMessageInfo

func (m *ActiveCall) GetCallId() int64 {
	if m != nil {
		return m.CallId
	}
	return 0
}

func (m *ActiveCall) GetPeer() *Peer {
	if m != nil {
		return m.Peer
	}
	return nil
}

func (m *ActiveCall) GetCallMembers() []*CallMember {
	if m != nil {
		return m.CallMembers
	}
	return nil
}

// Call Member state holder
type CallMemberStateHolder struct {
	/// State Value
	State CallMemberState `protobuf:"varint,1,opt,name=state,proto3,enum=dialog.CallMemberState" json:"state,omitempty"`
	/// Fallback flag for future compatibility of state
	FallbackIsRinging *types.BoolValue `protobuf:"bytes,2,opt,name=fallback_is_ringing,json=fallbackIsRinging,proto3" json:"fallback_is_ringing,omitempty"`
	/// Fallback flag for future compatibility of state
	FallbackIsConnected *types.BoolValue `protobuf:"bytes,3,opt,name=fallback_is_connected,json=fallbackIsConnected,proto3" json:"fallback_is_connected,omitempty"`
	/// Fallback flag for future compatibility of state
	FallbackIsConnecting *types.BoolValue `protobuf:"bytes,4,opt,name=fallback_is_connecting,json=fallbackIsConnecting,proto3" json:"fallback_is_connecting,omitempty"`
	/// Fallback flag for future compatibility of state
	FallbackIsRingingReached *types.BoolValue `protobuf:"bytes,5,opt,name=fallback_is_ringing_reached,json=fallbackIsRingingReached,proto3" json:"fallback_is_ringing_reached,omitempty"`
	/// Fallback flag for future compatibility of state
	FallbackIsEnded *types.BoolValue `protobuf:"bytes,6,opt,name=fallback_is_ended,json=fallbackIsEnded,proto3" json:"fallback_is_ended,omitempty"`
}

func (m *CallMemberStateHolder) Reset()      { *m = CallMemberStateHolder{} }
func (*CallMemberStateHolder) ProtoMessage() {}
func (*CallMemberStateHolder) Descriptor() ([]byte, []int) {
	return fileDescriptor_36dc76573d9e3aea, []int{36}
}
func (m *CallMemberStateHolder) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CallMemberStateHolder) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CallMemberStateHolder.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CallMemberStateHolder) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CallMemberStateHolder.Merge(m, src)
}
func (m *CallMemberStateHolder) XXX_Size() int {
	return m.Size()
}
func (m *CallMemberStateHolder) XXX_DiscardUnknown() {
	xxx_messageInfo_CallMemberStateHolder.DiscardUnknown(m)
}

var xxx_messageInfo_CallMemberStateHolder proto.InternalMessageInfo

func (m *CallMemberStateHolder) GetState() CallMemberState {
	if m != nil {
		return m.State
	}
	return CALLMEMBERSTATE_UNKNOWN
}

func (m *CallMemberStateHolder) GetFallbackIsRinging() *types.BoolValue {
	if m != nil {
		return m.FallbackIsRinging
	}
	return nil
}

func (m *CallMemberStateHolder) GetFallbackIsConnected() *types.BoolValue {
	if m != nil {
		return m.FallbackIsConnected
	}
	return nil
}

func (m *CallMemberStateHolder) GetFallbackIsConnecting() *types.BoolValue {
	if m != nil {
		return m.FallbackIsConnecting
	}
	return nil
}

func (m *CallMemberStateHolder) GetFallbackIsRingingReached() *types.BoolValue {
	if m != nil {
		return m.FallbackIsRingingReached
	}
	return nil
}

func (m *CallMemberStateHolder) GetFallbackIsEnded() *types.BoolValue {
	if m != nil {
		return m.FallbackIsEnded
	}
	return nil
}

// Call Member
type CallMember struct {
	UserId int32                  `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	State  *CallMemberStateHolder `protobuf:"bytes,3,opt,name=state,proto3" json:"state,omitempty"`
}

func (m *CallMember) Reset()      { *m = CallMember{} }
func (*CallMember) ProtoMessage() {}
func (*CallMember) Descriptor() ([]byte, []int) {
	return fileDescriptor_36dc76573d9e3aea, []int{37}
}
func (m *CallMember) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CallMember) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CallMember.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CallMember) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CallMember.Merge(m, src)
}
func (m *CallMember) XXX_Size() int {
	return m.Size()
}
func (m *CallMember) XXX_DiscardUnknown() {
	xxx_messageInfo_CallMember.DiscardUnknown(m)
}

var xxx_messageInfo_CallMember proto.InternalMessageInfo

func (m *CallMember) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *CallMember) GetState() *CallMemberStateHolder {
	if m != nil {
		return m.State
	}
	return nil
}

// Peer Settings
type PeerSettings struct {
	/// If peer can preconnect before answer
	CanPreConnect *types.BoolValue `protobuf:"bytes,4,opt,name=can_pre_connect,json=canPreConnect,proto3" json:"can_pre_connect,omitempty"`
	/// The peer already has an offer. The server should request offer from this peer.
	SendsOffer *types.BoolValue `protobuf:"bytes,5,opt,name=sends_offer,json=sendsOffer,proto3" json:"sends_offer,omitempty"`
	/// Peer prefers to receive an offer/answer with ICE candidates collected
	WaitForCandidates *types.BoolValue `protobuf:"bytes,6,opt,name=wait_for_candidates,json=waitForCandidates,proto3" json:"wait_for_candidates,omitempty"`
	/// Description of this peer. Version, browser, OS, type, etc.
	ClientInfo *ClientInfo `protobuf:"bytes,7,opt,name=client_info,json=clientInfo,proto3" json:"client_info,omitempty"`
}

func (m *PeerSettings) Reset()      { *m = PeerSettings{} }
func (*PeerSettings) ProtoMessage() {}
func (*PeerSettings) Descriptor() ([]byte, []int) {
	return fileDescriptor_36dc76573d9e3aea, []int{38}
}
func (m *PeerSettings) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PeerSettings) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PeerSettings.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PeerSettings) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PeerSettings.Merge(m, src)
}
func (m *PeerSettings) XXX_Size() int {
	return m.Size()
}
func (m *PeerSettings) XXX_DiscardUnknown() {
	xxx_messageInfo_PeerSettings.DiscardUnknown(m)
}

var xxx_messageInfo_PeerSettings proto.InternalMessageInfo

func (m *PeerSettings) GetCanPreConnect() *types.BoolValue {
	if m != nil {
		return m.CanPreConnect
	}
	return nil
}

func (m *PeerSettings) GetSendsOffer() *types.BoolValue {
	if m != nil {
		return m.SendsOffer
	}
	return nil
}

func (m *PeerSettings) GetWaitForCandidates() *types.BoolValue {
	if m != nil {
		return m.WaitForCandidates
	}
	return nil
}

func (m *PeerSettings) GetClientInfo() *ClientInfo {
	if m != nil {
		return m.ClientInfo
	}
	return nil
}

func init() {
	proto.RegisterEnum("dialog.CallDisposedReason", CallDisposedReason_name, CallDisposedReason_value)
	proto.RegisterEnum("dialog.RejectCallReason", RejectCallReason_name, RejectCallReason_value)
	proto.RegisterEnum("dialog.DTMFCode", DTMFCode_name, DTMFCode_value)
	proto.RegisterEnum("dialog.CallStatsType", CallStatsType_name, CallStatsType_value)
	proto.RegisterEnum("dialog.CallMemberState", CallMemberState_name, CallMemberState_value)
	proto.RegisterType((*UpdateIncomingCallDeprecated)(nil), "dialog.UpdateIncomingCallDeprecated")
	proto.RegisterType((*UpdateIncomingCall)(nil), "dialog.UpdateIncomingCall")
	proto.RegisterType((*UpdateCallHandled)(nil), "dialog.UpdateCallHandled")
	proto.RegisterType((*UpdateCallDisposed)(nil), "dialog.UpdateCallDisposed")
	proto.RegisterType((*RequestGetCallInfo)(nil), "dialog.RequestGetCallInfo")
	proto.RegisterType((*ResponseGetCallInfo)(nil), "dialog.ResponseGetCallInfo")
	proto.RegisterType((*CallLogEntry)(nil), "dialog.CallLogEntry")
	proto.RegisterType((*RequestLoadCalls)(nil), "dialog.RequestLoadCalls")
	proto.RegisterType((*ResponseLoadCalls)(nil), "dialog.ResponseLoadCalls")
	proto.RegisterType((*RequestDoCall)(nil), "dialog.RequestDoCall")
	proto.RegisterType((*ResponseDoCall)(nil), "dialog.ResponseDoCall")
	proto.RegisterType((*RequestJoinCall)(nil), "dialog.RequestJoinCall")
	proto.RegisterType((*RequestRejectCall)(nil), "dialog.RequestRejectCall")
	proto.RegisterType((*RequestDeleteCall)(nil), "dialog.RequestDeleteCall")
	proto.RegisterType((*RequestChangeCallDisplayName)(nil), "dialog.RequestChangeCallDisplayName")
	proto.RegisterType((*ICEServer)(nil), "dialog.ICEServer")
	proto.RegisterType((*ICECandidate)(nil), "dialog.ICECandidate")
	proto.RegisterType((*WebRTCSignaling)(nil), "dialog.WebRTCSignaling")
	proto.RegisterType((*AdvertiseSelf)(nil), "dialog.AdvertiseSelf")
	proto.RegisterType((*AdvertiseMaster)(nil), "dialog.AdvertiseMaster")
	proto.RegisterType((*AdvertisePeer)(nil), "dialog.AdvertisePeer")
	proto.RegisterType((*Candidate)(nil), "dialog.Candidate")
	proto.RegisterType((*GotICECandidate)(nil), "dialog.GotICECandidate")
	proto.RegisterType((*RemovedICECandidates)(nil), "dialog.RemovedICECandidates")
	proto.RegisterType((*Offer)(nil), "dialog.Offer")
	proto.RegisterType((*Answer)(nil), "dialog.Answer")
	proto.RegisterType((*NeedOffer)(nil), "dialog.NeedOffer")
	proto.RegisterType((*NegotinationSuccessful)(nil), "dialog.NegotinationSuccessful")
	proto.RegisterType((*EnableConnection)(nil), "dialog.EnableConnection")
	proto.RegisterType((*OnRenegotiationNeeded)(nil), "dialog.OnRenegotiationNeeded")
	proto.RegisterType((*CloseSession)(nil), "dialog.CloseSession")
	proto.RegisterType((*NeedDisconnect)(nil), "dialog.NeedDisconnect")
	proto.RegisterType((*DTMF)(nil), "dialog.DTMF")
	proto.RegisterType((*CallStats)(nil), "dialog.CallStats")
	proto.RegisterType((*CallNameChanged)(nil), "dialog.CallNameChanged")
	proto.RegisterType((*ActiveCall)(nil), "dialog.ActiveCall")
	proto.RegisterType((*CallMemberStateHolder)(nil), "dialog.CallMemberStateHolder")
	proto.RegisterType((*CallMember)(nil), "dialog.CallMember")
	proto.RegisterType((*PeerSettings)(nil), "dialog.PeerSettings")
}

func init() { proto.RegisterFile("web_rtc.proto", fileDescriptor_36dc76573d9e3aea) }

var fileDescriptor_36dc76573d9e3aea = []byte{
	// 3006 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x5a, 0x4b, 0x6c, 0x1b, 0xd7,
	0xb9, 0xe6, 0x90, 0x14, 0x45, 0xfe, 0x7a, 0x8d, 0x8e, 0x25, 0x9b, 0x96, 0x64, 0x5a, 0x19, 0xc7,
	0x89, 0xa3, 0x9b, 0x2b, 0x39, 0xca, 0xbd, 0x46, 0xe2, 0x9b, 0x5b, 0x57, 0x22, 0x47, 0xe2, 0x38,
	0x12, 0xa9, 0x0e, 0x29, 0x3b, 0x36, 0xd0, 0x0e, 0x46, 0x33, 0x87, 0xf4, 0xa4, 0xa3, 0x19, 0x76,
	0x66, 0x28, 0xc7, 0xe8, 0xa6, 0x2d, 0x50, 0x14, 0x48, 0x0b, 0xb4, 0x68, 0x17, 0xdd, 0x15, 0x45,
	0xbb, 0x29, 0xda, 0x55, 0xd1, 0x45, 0x97, 0x6d, 0x77, 0x69, 0xd1, 0x45, 0x80, 0x6e, 0xb2, 0xe8,
	0xa2, 0x51, 0xba, 0x28, 0xb2, 0xca, 0xa6, 0xfb, 0xe2, 0x9c, 0x79, 0x3f, 0x64, 0x8a, 0x49, 0x8c,
	0xac, 0xc4, 0x39, 0xdf, 0xff, 0x3a, 0xff, 0xfc, 0xaf, 0x33, 0x47, 0x30, 0xf3, 0x18, 0x1f, 0x49,
	0x96, 0xa3, 0xac, 0x0f, 0x2c, 0xd3, 0x31, 0x51, 0x49, 0xd5, 0x64, 0xdd, 0xec, 0x2f, 0xd5, 0xfa,
	0xa6, 0xd9, 0xd7, 0xf1, 0x06, 0x5d, 0x3d, 0x1a, 0xf6, 0x36, 0x1e, 0x5b, 0xf2, 0x60, 0x80, 0x2d,
	0xdb, 0xa5, 0x5b, 0x5a, 0xf1, 0x70, 0x79, 0xa0, 0x6d, 0xc8, 0x86, 0x61, 0x3a, 0xb2, 0xa3, 0x99,
	0x86, 0x8f, 0xce, 0xab, 0xb8, 0xa7, 0x19, 0x5a, 0x74, 0xe9, 0xc2, 0xb1, 0x66, 0x2b, 0x58, 0xd7,
	0x65, 0x03, 0x9b, 0x43, 0x7f, 0x71, 0x6a, 0x80, 0x43, 0x91, 0xf3, 0x2a, 0x3e, 0xd1, 0x14, 0x2c,
	0x69, 0x46, 0xcf, 0xf4, 0x96, 0x16, 0x6d, 0x45, 0xd6, 0xe5, 0xc1, 0xd1, 0x86, 0xf7, 0xd7, 0x5d,
	0xe6, 0x7e, 0xca, 0xc0, 0xca, 0xe1, 0x40, 0x95, 0x1d, 0x2c, 0x18, 0x8a, 0x79, 0xac, 0x19, 0xfd,
	0xba, 0xac, 0xeb, 0x0d, 0x3c, 0xb0, 0xb0, 0x22, 0x3b, 0x58, 0x45, 0x2f, 0xc0, 0xa4, 0x22, 0xeb,
	0xba, 0xa4, 0xa9, 0x55, 0x66, 0x95, 0xb9, 0x51, 0xd8, 0x9e, 0x79, 0xf7, 0xe3, 0x9b, 0x15, 0x98,
	0x3c, 0xd1, 0x6c, 0xed, 0x48, 0xc7, 0x62, 0x89, 0xa0, 0x82, 0x8a, 0xda, 0x30, 0x23, 0x3b, 0x0e,
	0x3e, 0x1e, 0x38, 0x92, 0x66, 0xa8, 0xf8, 0x9d, 0x6a, 0x7e, 0x95, 0xb9, 0x31, 0xb5, 0xb9, 0xbc,
	0xee, 0xee, 0x6e, 0xdd, 0xdf, 0xfd, 0xba, 0x60, 0x38, 0xaf, 0x6e, 0xde, 0x93, 0xf5, 0x21, 0x4e,
	0x8a, 0x9a, 0xf6, 0x04, 0x08, 0x84, 0x9f, 0xfb, 0x61, 0x01, 0x50, 0xda, 0xb2, 0x73, 0xdb, 0xb3,
	0x01, 0xd3, 0xf8, 0x04, 0x1b, 0x8e, 0x74, 0x34, 0xb4, 0x09, 0x31, 0x31, 0xa7, 0x92, 0x24, 0x06,
	0x4a, 0xb2, 0x3d, 0xb4, 0x05, 0x15, 0xad, 0x42, 0x91, 0xb8, 0xb0, 0x5a, 0xa0, 0x76, 0x4f, 0xaf,
	0xbb, 0x6f, 0x6f, 0xfd, 0x00, 0x63, 0x4b, 0xa4, 0x08, 0xda, 0x87, 0x69, 0x55, 0xb3, 0x07, 0xba,
	0xfc, 0x44, 0x32, 0xe4, 0x63, 0x5c, 0x2d, 0x52, 0xca, 0x95, 0xd4, 0x0e, 0x3b, 0x8e, 0xa5, 0x19,
	0x7d, 0x77, 0x8b, 0xd3, 0xef, 0x7e, 0x7c, 0xb3, 0x0c, 0xa5, 0x47, 0x9a, 0xaa, 0x62, 0x43, 0x9c,
	0xf2, 0xf8, 0x5b, 0xf2, 0x31, 0x4e, 0x7b, 0x6c, 0xe2, 0xb3, 0x79, 0x0c, 0xbd, 0x0e, 0x65, 0x73,
	0xe8, 0x48, 0x74, 0x17, 0x25, 0x2a, 0x6b, 0xce, 0xdf, 0x45, 0x7b, 0xe8, 0x90, 0x8d, 0x24, 0xf9,
	0x27, 0x4d, 0x77, 0x1d, 0x5d, 0x83, 0x89, 0x13, 0x4d, 0xc5, 0x66, 0x75, 0x72, 0x95, 0xb9, 0x51,
	0x4e, 0x92, 0xb9, 0x18, 0xf7, 0x03, 0x06, 0xe6, 0xdd, 0x37, 0x42, 0xde, 0x44, 0x53, 0x36, 0x54,
	0xfd, 0x8b, 0x0c, 0x90, 0x3f, 0x31, 0x7e, 0x80, 0xd0, 0x90, 0xd5, 0xec, 0x81, 0x69, 0x7f, 0x81,
	0xf6, 0xa0, 0x4d, 0x28, 0x59, 0x58, 0xb6, 0x4d, 0x83, 0x86, 0xd0, 0xec, 0xe6, 0x92, 0xef, 0xfc,
	0xa8, 0x79, 0x22, 0xa5, 0x10, 0x3d, 0x4a, 0xee, 0x21, 0x20, 0x11, 0x7f, 0x63, 0x88, 0x6d, 0x67,
	0x17, 0x3b, 0x84, 0x4e, 0x30, 0x7a, 0xe6, 0x79, 0xb7, 0x70, 0x7b, 0xe5, 0xf4, 0xce, 0x65, 0xb8,
	0xa4, 0x1d, 0xaf, 0xab, 0x7a, 0x7f, 0xbd, 0x6f, 0x0d, 0x94, 0xf5, 0x5d, 0x6b, 0xa0, 0x78, 0x02,
	0xb9, 0x1f, 0xe7, 0xe1, 0x82, 0x88, 0xed, 0x81, 0x69, 0xd8, 0x38, 0x2a, 0xdd, 0x0f, 0x74, 0xe6,
	0xcc, 0x40, 0x7f, 0x19, 0x4a, 0x7d, 0xcb, 0x1c, 0x0e, 0xec, 0x6a, 0x7e, 0xb5, 0x70, 0x63, 0x6a,
	0x73, 0xc1, 0xa7, 0xd9, 0x25, 0xab, 0x5e, 0x2c, 0x89, 0x1e, 0x0d, 0x7a, 0x09, 0x26, 0x86, 0x36,
	0xb6, 0xec, 0x6a, 0x81, 0x12, 0x5f, 0xf0, 0x89, 0x0f, 0x6d, 0x6c, 0xf9, 0xb4, 0x2e, 0x05, 0x5a,
	0x4d, 0x24, 0x25, 0xc9, 0xa0, 0x4a, 0x2c, 0x0b, 0xef, 0x24, 0x72, 0x6c, 0x62, 0x74, 0x8e, 0xc5,
	0xb2, 0xea, 0xf6, 0x95, 0xd3, 0x3b, 0x4b, 0x50, 0x4d, 0xfb, 0xc4, 0xf5, 0x03, 0xf7, 0xcb, 0x22,
	0x4c, 0x13, 0x4f, 0xec, 0x99, 0x7d, 0xde, 0x70, 0xac, 0x27, 0xe8, 0x0a, 0xe4, 0xcf, 0x72, 0x73,
	0x5e, 0x53, 0xd1, 0x1a, 0x54, 0xe8, 0xab, 0x20, 0x61, 0x46, 0x23, 0x24, 0x45, 0x55, 0x26, 0x78,
	0x43, 0x76, 0x30, 0x7a, 0x03, 0x2a, 0xb4, 0x52, 0xcb, 0x8e, 0xe9, 0x97, 0x91, 0x51, 0x09, 0x18,
	0x32, 0x10, 0x6e, 0x0b, 0x2b, 0xda, 0x40, 0xc3, 0x86, 0xe3, 0x95, 0x96, 0x91, 0xdc, 0x01, 0x03,
	0xda, 0x81, 0xb2, 0x3a, 0xb4, 0x68, 0xe7, 0x78, 0x5a, 0x1d, 0xb9, 0xf5, 0x3f, 0x99, 0x81, 0x1c,
	0xf0, 0x22, 0x1e, 0xca, 0xb2, 0x61, 0x3f, 0xc6, 0x16, 0x56, 0xbd, 0x1a, 0xb2, 0x94, 0x92, 0xb3,
	0x6d, 0x9a, 0x7a, 0xb6, 0x18, 0x9f, 0x15, 0xdd, 0x82, 0x32, 0xe9, 0x5a, 0xf6, 0x23, 0xac, 0xd2,
	0x92, 0xf2, 0x54, 0x31, 0x62, 0x40, 0x9b, 0x2a, 0xb1, 0xe5, 0xcf, 0x56, 0x62, 0x6f, 0x41, 0xd9,
	0xc2, 0x6f, 0x63, 0xc5, 0xc1, 0x6a, 0xb5, 0x32, 0xda, 0x0c, 0x9f, 0x96, 0xfb, 0x05, 0x03, 0xac,
	0x97, 0x46, 0x7b, 0xa6, 0xac, 0x92, 0x80, 0xb1, 0xd1, 0x9b, 0x30, 0x65, 0xe0, 0x77, 0x1c, 0xc9,
	0xec, 0xf5, 0x6c, 0xec, 0x78, 0xe9, 0x93, 0xf6, 0xf2, 0xf6, 0x13, 0x07, 0xdb, 0x99, 0xee, 0x01,
	0xc2, 0xde, 0xa6, 0xdc, 0xa4, 0xe0, 0xea, 0xda, 0xb1, 0xe6, 0xd0, 0x98, 0x9a, 0x48, 0x15, 0x5c,
	0x8a, 0x8d, 0xc8, 0xef, 0x7f, 0x33, 0x30, 0xef, 0xc7, 0x75, 0x68, 0xe5, 0x1a, 0x4c, 0x90, 0x80,
	0xb4, 0xab, 0x4c, 0x3c, 0x75, 0xa3, 0x41, 0x2f, 0xba, 0x24, 0x61, 0xe6, 0xe6, 0x47, 0x66, 0x6e,
	0x58, 0x12, 0x0a, 0xe7, 0x28, 0x09, 0x6f, 0xc4, 0x5d, 0x55, 0x1c, 0xe9, 0xaa, 0xa8, 0x6f, 0x46,
	0xa5, 0xf0, 0x37, 0x61, 0xc6, 0x73, 0x41, 0xc3, 0xa4, 0x23, 0xc1, 0x66, 0xac, 0xa0, 0x8d, 0x4a,
	0x1a, 0xb7, 0xc4, 0x55, 0x61, 0xd2, 0xd1, 0x8e, 0xb1, 0x39, 0x74, 0xdf, 0x40, 0x41, 0xf4, 0x1f,
	0x47, 0x38, 0xfd, 0x7b, 0x0c, 0xcc, 0xfa, 0x96, 0x78, 0xea, 0x2f, 0x25, 0xaa, 0x75, 0xd0, 0x61,
	0x56, 0xb3, 0x46, 0x90, 0x58, 0xb5, 0x5b, 0x86, 0x8a, 0x3f, 0xa9, 0xa9, 0xb4, 0x62, 0x14, 0xc4,
	0xb2, 0xbb, 0x20, 0xa8, 0xa3, 0xdc, 0x70, 0x1f, 0xe6, 0x3c, 0xa3, 0xee, 0x9a, 0x9a, 0x31, 0xce,
	0x6c, 0x34, 0x62, 0x8b, 0xdf, 0xa7, 0x71, 0x45, 0x7f, 0x8b, 0x34, 0x21, 0xc6, 0x9a, 0xbb, 0x6e,
	0x06, 0x5d, 0x30, 0x4f, 0xbb, 0x60, 0xd5, 0x7f, 0x1d, 0xa1, 0xac, 0x78, 0x0f, 0x1c, 0x61, 0xcd,
	0x83, 0xc0, 0x98, 0x06, 0xd6, 0xb1, 0xdb, 0xeb, 0x3f, 0xa7, 0x8d, 0xfe, 0x8e, 0x81, 0x15, 0xef,
	0x77, 0xfd, 0x91, 0x6c, 0xf4, 0x83, 0x39, 0xc2, 0x2f, 0x1f, 0xe7, 0xdd, 0x73, 0xb2, 0x6a, 0xe5,
	0x3f, 0x53, 0xd5, 0x1a, 0x61, 0xf5, 0x1f, 0x19, 0xa8, 0x08, 0x75, 0xbe, 0x83, 0xad, 0x13, 0x6c,
	0xa1, 0xab, 0x50, 0x18, 0x5a, 0x3a, 0x35, 0x2f, 0x35, 0xdd, 0x12, 0x84, 0x34, 0x06, 0x92, 0xc1,
	0xe3, 0xda, 0xa5, 0x12, 0x7f, 0x58, 0x62, 0xc0, 0x8b, 0xee, 0x02, 0x28, 0x16, 0x56, 0xb1, 0xe1,
	0x68, 0xb2, 0xee, 0x75, 0xb7, 0x71, 0x24, 0x45, 0xb8, 0xb9, 0x23, 0x98, 0x16, 0xea, 0x7c, 0x5d,
	0x36, 0x54, 0x8d, 0xf4, 0x55, 0xf4, 0x22, 0xb0, 0xb6, 0x3a, 0x90, 0x8e, 0x25, 0x5d, 0x33, 0xb0,
	0x37, 0x8d, 0x91, 0x1d, 0x4d, 0x88, 0x33, 0xb6, 0x3a, 0xd8, 0xdf, 0xd3, 0x0c, 0xec, 0x8e, 0x58,
	0x97, 0x60, 0x92, 0x12, 0x06, 0xc9, 0x54, 0x22, 0xb8, 0xa6, 0x22, 0x16, 0x0a, 0xb6, 0x3a, 0xa0,
	0x66, 0x55, 0x44, 0xf2, 0x93, 0xfb, 0x43, 0x19, 0xe6, 0xee, 0xe3, 0x23, 0xb1, 0x5b, 0xef, 0x68,
	0x7d, 0x43, 0xd6, 0x35, 0xa3, 0x8f, 0xfe, 0x1f, 0x66, 0x64, 0xf5, 0x04, 0x5b, 0x8e, 0x66, 0xe3,
	0x0e, 0xd6, 0x7b, 0x5e, 0xc5, 0x58, 0xf4, 0x43, 0x74, 0x2b, 0x0a, 0x36, 0x73, 0x62, 0x9c, 0x1a,
	0xd5, 0x61, 0x2e, 0x58, 0xd8, 0x97, 0x6d, 0x07, 0x5b, 0x9e, 0x47, 0x2f, 0xa5, 0x04, 0xb8, 0x70,
	0x33, 0x27, 0x26, 0x39, 0x62, 0x36, 0x1c, 0x84, 0xe7, 0x8d, 0xb4, 0x0d, 0x04, 0x8c, 0xd9, 0x40,
	0x07, 0xf5, 0x57, 0xc8, 0x3c, 0xe2, 0xf9, 0xcd, 0xab, 0xab, 0xf3, 0x61, 0x89, 0xf7, 0x80, 0x66,
	0x4e, 0x0c, 0xa9, 0x88, 0xd9, 0x7d, 0xd3, 0x89, 0x3a, 0xdc, 0x9b, 0x10, 0x02, 0xb3, 0x77, 0xe3,
	0x30, 0x31, 0x3b, 0xc1, 0x81, 0x44, 0x58, 0xb0, 0xf0, 0xb1, 0x79, 0x82, 0xd5, 0xe8, 0xb2, 0xed,
	0xcd, 0x08, 0x2b, 0x61, 0x92, 0xa7, 0x69, 0x9a, 0x39, 0x31, 0x93, 0x17, 0x5d, 0x87, 0x09, 0xb3,
	0xd7, 0xc3, 0x96, 0x37, 0x21, 0xcc, 0x04, 0x85, 0x9b, 0x2c, 0x36, 0x73, 0xa2, 0x8b, 0xa2, 0x1b,
	0x50, 0x72, 0xe7, 0x0a, 0x6f, 0x1a, 0x98, 0x0d, 0x5c, 0x45, 0x57, 0x9b, 0x39, 0xd1, 0xc3, 0x89,
	0x73, 0x0c, 0x8c, 0x55, 0xca, 0xef, 0xf5, 0xfb, 0xc0, 0x39, 0x2d, 0x1f, 0x20, 0xce, 0x09, 0xa8,
	0xd0, 0x5b, 0x70, 0xd1, 0xc0, 0x7d, 0xd3, 0xd1, 0x0c, 0x3a, 0xff, 0x74, 0x86, 0x8a, 0x82, 0x6d,
	0xbb, 0x37, 0xd4, 0xab, 0x40, 0xf9, 0x6b, 0x21, 0x7f, 0x16, 0x55, 0x33, 0x27, 0x9e, 0xc1, 0x8f,
	0x76, 0x80, 0xc5, 0x86, 0x7c, 0xa4, 0xe3, 0xba, 0x69, 0x18, 0x58, 0xa1, 0x93, 0xd9, 0x14, 0x95,
	0x19, 0x94, 0x44, 0x3e, 0x81, 0x37, 0x73, 0x62, 0x8a, 0x07, 0x1d, 0xc2, 0xa2, 0x69, 0x88, 0xd8,
	0xd5, 0x42, 0x95, 0x90, 0xad, 0x60, 0xb5, 0x3a, 0x4d, 0x85, 0x5d, 0x09, 0xbc, 0x96, 0x45, 0xd4,
	0xcc, 0x89, 0xd9, 0xdc, 0xe8, 0x36, 0x4c, 0x2b, 0xba, 0x49, 0x22, 0xdb, 0xb6, 0x89, 0x69, 0x33,
	0x54, 0x5a, 0x38, 0x2e, 0x44, 0xb0, 0x66, 0x4e, 0x8c, 0xd1, 0xa2, 0x2f, 0xc3, 0x2c, 0xf1, 0x60,
	0x43, 0xb3, 0x15, 0xd7, 0xce, 0xea, 0x2c, 0xe5, 0xbe, 0x18, 0x75, 0x76, 0x88, 0x36, 0x73, 0x62,
	0x82, 0x1e, 0x71, 0x50, 0x54, 0xbb, 0xfb, 0x3b, 0xd5, 0xb9, 0xf8, 0x19, 0xa4, 0xd1, 0xdd, 0xdf,
	0x69, 0xe6, 0x44, 0x8a, 0xb9, 0xa1, 0xae, 0xeb, 0x1d, 0x47, 0x76, 0xec, 0x2a, 0x9b, 0x0c, 0x75,
	0x0f, 0x70, 0x43, 0xdd, 0x7b, 0x20, 0xa1, 0x4e, 0x1e, 0x48, 0x15, 0x75, 0x2b, 0xba, 0x5a, 0x9d,
	0x8f, 0x87, 0x7a, 0x3d, 0x0e, 0x93, 0x50, 0x4f, 0x70, 0x6c, 0x97, 0xa0, 0x78, 0x64, 0xaa, 0x4f,
	0xb8, 0x07, 0x30, 0x13, 0x2b, 0x08, 0xa8, 0x09, 0x33, 0x64, 0x76, 0x90, 0x6c, 0xec, 0x38, 0x9a,
	0xd1, 0xb7, 0xbd, 0xf2, 0xb1, 0x10, 0x3d, 0x41, 0x75, 0x3c, 0x2c, 0x75, 0x54, 0x1c, 0x44, 0x40,
	0xee, 0xef, 0x0c, 0xcc, 0x25, 0x6a, 0x05, 0x7a, 0x0d, 0x4a, 0x36, 0xad, 0xe9, 0xde, 0xe4, 0x16,
	0xec, 0x35, 0x28, 0xf6, 0xa9, 0xf6, 0xe3, 0xd2, 0xa3, 0x2e, 0xb0, 0xb4, 0x4d, 0xc9, 0x03, 0x4d,
	0x3a, 0xc1, 0x16, 0x7d, 0x9d, 0xe3, 0x1f, 0x66, 0x67, 0x89, 0x8c, 0xad, 0x81, 0x76, 0xcf, 0x95,
	0x80, 0x5e, 0xf7, 0x4e, 0x3e, 0xb4, 0x73, 0x9c, 0xa3, 0xde, 0xbb, 0x07, 0x21, 0xe2, 0x48, 0xee,
	0x3d, 0x26, 0xe2, 0x3a, 0x5a, 0xb6, 0xd6, 0xa2, 0x83, 0x4e, 0x66, 0x2f, 0x0d, 0xe6, 0x9e, 0xb4,
	0x9b, 0xf3, 0x9f, 0xd2, 0xcd, 0x68, 0x0b, 0xa6, 0x88, 0x4a, 0xd7, 0x4d, 0xfe, 0xe4, 0x3a, 0xda,
	0xaf, 0xa0, 0x29, 0xd8, 0x45, 0x6c, 0xee, 0x67, 0x0c, 0x54, 0xc2, 0x2a, 0xf8, 0x32, 0x80, 0xed,
	0xe6, 0xc0, 0x99, 0xfb, 0xa8, 0x78, 0x04, 0x82, 0x4a, 0x66, 0xfc, 0xf0, 0xcb, 0x42, 0x7a, 0xc6,
	0xa7, 0x98, 0x77, 0xfe, 0x2c, 0x64, 0xf5, 0x6f, 0x72, 0xfe, 0xbc, 0xea, 0x36, 0xb6, 0x62, 0x66,
	0x7f, 0x27, 0x7d, 0x4e, 0x85, 0xb9, 0x44, 0xf9, 0x46, 0x57, 0xd2, 0x56, 0x46, 0xcd, 0xda, 0x8c,
	0xb6, 0x90, 0x84, 0x6f, 0xa3, 0x72, 0x22, 0x3d, 0x84, 0xd3, 0x60, 0x21, 0xab, 0xb4, 0x8f, 0xa9,
	0xaa, 0x70, 0x1e, 0x55, 0x3f, 0x67, 0x60, 0xc2, 0xad, 0xcd, 0xe3, 0x79, 0xdb, 0xf3, 0x54, 0xfe,
	0x2c, 0x4f, 0xa5, 0xe3, 0xaa, 0xf0, 0x69, 0xd3, 0xf7, 0x3e, 0x94, 0xdc, 0xde, 0xf3, 0x39, 0x9b,
	0xc8, 0xfd, 0x9a, 0x81, 0x4a, 0xd0, 0xa8, 0xd0, 0x75, 0x28, 0xb9, 0x49, 0x71, 0xc6, 0xf4, 0xe9,
	0x82, 0x09, 0x1b, 0xf2, 0x23, 0x6c, 0xf8, 0xfc, 0xbc, 0x70, 0x0c, 0x17, 0xb3, 0x9b, 0xe2, 0x33,
	0x31, 0x9c, 0xeb, 0x03, 0x9b, 0xec, 0x97, 0xcf, 0x46, 0x91, 0x0e, 0x8b, 0x99, 0xbd, 0xf4, 0xd9,
	0x68, 0x53, 0x60, 0x3a, 0xda, 0x6b, 0x9f, 0x8d, 0x92, 0x5b, 0x30, 0x1b, 0x6f, 0xc9, 0xe8, 0xf9,
	0x84, 0x9a, 0xf8, 0x71, 0xc4, 0xc3, 0xb8, 0x1e, 0x14, 0x49, 0x4b, 0x46, 0xaf, 0x42, 0x51, 0x31,
	0x55, 0x97, 0x76, 0x76, 0x93, 0x8d, 0xb6, 0xeb, 0xba, 0xa9, 0xa6, 0x5a, 0x09, 0x25, 0x46, 0x2f,
	0x45, 0x3e, 0x49, 0x65, 0x7f, 0x39, 0xf3, 0x61, 0xee, 0x6d, 0x52, 0x64, 0xfd, 0x26, 0xfe, 0x1a,
	0x14, 0x9d, 0x27, 0x03, 0x5f, 0xd9, 0x62, 0xaa, 0xe5, 0x77, 0x9f, 0x0c, 0xd2, 0x1a, 0x09, 0x07,
	0xfd, 0x8a, 0x4d, 0x5a, 0x51, 0x76, 0x86, 0xb9, 0x18, 0xb7, 0x07, 0x73, 0x89, 0x21, 0x20, 0xde,
	0xea, 0x98, 0xb1, 0x5a, 0xdd, 0x6f, 0x18, 0x80, 0x2d, 0xc5, 0xd1, 0x4e, 0xf0, 0x98, 0xb7, 0x13,
	0xee, 0x27, 0x8b, 0x7c, 0xfa, 0x1b, 0x6c, 0xf6, 0xf7, 0x8a, 0x06, 0x4c, 0x53, 0xc1, 0xc7, 0xf8,
	0xf8, 0x28, 0xec, 0x65, 0x28, 0xea, 0x9c, 0x7d, 0x0a, 0x25, 0xd9, 0xa7, 0x94, 0x00, 0xb2, 0xb9,
	0xdf, 0x16, 0x61, 0x31, 0x24, 0x25, 0xde, 0xc4, 0x4d, 0x53, 0x57, 0xb1, 0x85, 0xde, 0x80, 0x09,
	0x9b, 0x3c, 0x7a, 0x5e, 0xbf, 0x94, 0x16, 0x4c, 0xa9, 0x53, 0x3e, 0xa5, 0x4c, 0xe8, 0x01, 0x5c,
	0xe8, 0xc9, 0xba, 0x7e, 0x24, 0x2b, 0x5f, 0x97, 0x34, 0x5b, 0x22, 0x8e, 0xd2, 0x8c, 0xbe, 0xb7,
	0xbb, 0x31, 0x3e, 0x20, 0xce, 0xfb, 0x52, 0x04, 0x5b, 0x74, 0x65, 0xa0, 0xaf, 0xc2, 0x62, 0x54,
	0xb4, 0x17, 0xbf, 0x58, 0xf5, 0xea, 0xd6, 0x18, 0xc2, 0x2f, 0x84, 0xc2, 0xeb, 0xbe, 0x14, 0x24,
	0xc1, 0xc5, 0x0c, 0xf1, 0xc4, 0xf8, 0xe2, 0xb8, 0xf2, 0x17, 0x52, 0xf2, 0x89, 0xfd, 0x8f, 0x60,
	0x39, 0xc3, 0x35, 0x92, 0x85, 0x65, 0xe5, 0x11, 0x56, 0xbd, 0x93, 0xd8, 0x18, 0x5a, 0xaa, 0x29,
	0x17, 0x89, 0xae, 0x28, 0x74, 0x08, 0xf3, 0x51, 0x4d, 0xd8, 0x50, 0x3f, 0xcd, 0x37, 0xdc, 0xb9,
	0x50, 0x3e, 0x4f, 0x24, 0x70, 0xef, 0x00, 0x84, 0x41, 0x40, 0x02, 0x7c, 0x68, 0x63, 0xcb, 0x0f,
	0xf0, 0xd4, 0x54, 0x53, 0x22, 0xa8, 0xa0, 0xa2, 0x6d, 0x3f, 0x9e, 0x0a, 0xf1, 0x53, 0x4a, 0x66,
	0xf4, 0x65, 0x47, 0x15, 0xf7, 0xd7, 0x3c, 0x4c, 0x47, 0xdb, 0x11, 0xfa, 0x0a, 0x19, 0xef, 0x0d,
	0x69, 0x60, 0x61, 0xff, 0x45, 0x8d, 0xff, 0x96, 0x66, 0x14, 0xd9, 0x38, 0xb0, 0xfc, 0x26, 0x82,
	0xee, 0xc2, 0x94, 0x8d, 0x0d, 0xd5, 0x96, 0xdc, 0x93, 0xe8, 0xd8, 0xaf, 0x03, 0x28, 0xb7, 0xdb,
	0xaf, 0x1f, 0xc0, 0x85, 0xc7, 0xb2, 0xe6, 0x48, 0x3d, 0xd3, 0x92, 0x94, 0xe4, 0x11, 0x79, 0x9c,
	0x2c, 0x20, 0x52, 0x76, 0x4c, 0x2b, 0x32, 0x67, 0x6d, 0xc3, 0x94, 0xa2, 0x6b, 0xd8, 0x70, 0xe8,
	0x95, 0xae, 0x77, 0x60, 0x0e, 0xb3, 0x9f, 0x42, 0x82, 0xd1, 0x33, 0x53, 0xe6, 0x29, 0x01, 0xb4,
	0xf6, 0x7b, 0x06, 0x50, 0xfa, 0x2a, 0x0a, 0xd5, 0x60, 0xa9, 0xbe, 0xb5, 0xb7, 0xd7, 0x10, 0x3a,
	0x07, 0xed, 0x0e, 0xdf, 0x10, 0xf9, 0xad, 0x4e, 0xbb, 0x25, 0x1d, 0xb6, 0xde, 0x6c, 0xb5, 0xef,
	0xb7, 0xd8, 0x1c, 0xba, 0x0a, 0xcb, 0x19, 0xb8, 0xc8, 0xdf, 0xe5, 0xeb, 0x5d, 0xbe, 0xc1, 0x32,
	0x68, 0x19, 0x2e, 0x65, 0x10, 0x6c, 0x1f, 0x76, 0x1e, 0xb0, 0x79, 0xb4, 0x02, 0xd5, 0x0c, 0x90,
	0x6f, 0x35, 0xf8, 0x06, 0x5b, 0x40, 0xd7, 0xe1, 0xb9, 0x0c, 0x74, 0xab, 0xd5, 0xb9, 0xcf, 0x8b,
	0x52, 0x57, 0xd8, 0xe7, 0xdb, 0x87, 0x5d, 0xb6, 0xb8, 0xa6, 0x01, 0x9b, 0xfc, 0x7a, 0x48, 0x04,
	0xbb, 0x36, 0x10, 0x01, 0x29, 0xa3, 0xb3, 0xd0, 0x06, 0x5f, 0xdf, 0x13, 0x5a, 0x3c, 0xcb, 0xa0,
	0xcb, 0xb0, 0x98, 0x42, 0x5d, 0x7b, 0xd7, 0xfe, 0x9c, 0x87, 0xb2, 0xdf, 0xd6, 0xd0, 0x02, 0xb0,
	0xf4, 0x77, 0xbb, 0xc1, 0x47, 0x64, 0xcf, 0xc3, 0x4c, 0xb0, 0xfa, 0x90, 0x17, 0xdb, 0x2c, 0x83,
	0x58, 0x98, 0x0e, 0x96, 0xda, 0x2d, 0x9e, 0xcd, 0xc7, 0x56, 0xba, 0xf7, 0xdb, 0x6c, 0x01, 0x21,
	0x98, 0x0d, 0x57, 0x9a, 0x22, 0xcf, 0xb3, 0xc5, 0x98, 0xa8, 0x9d, 0xf6, 0xa1, 0xc8, 0x4e, 0xc4,
	0x97, 0x84, 0x7b, 0x3c, 0x5b, 0x8a, 0xc9, 0xea, 0x08, 0x6f, 0xb1, 0x93, 0x31, 0x59, 0x1d, 0xfe,
	0x1e, 0xdf, 0x62, 0xcb, 0xb1, 0x35, 0x5e, 0xd8, 0x6d, 0x76, 0xd9, 0x4a, 0x4c, 0x58, 0x8b, 0xec,
	0x1d, 0xd0, 0x22, 0xcc, 0x07, 0x4b, 0x5b, 0x9d, 0x2e, 0x2f, 0x0a, 0x9d, 0x37, 0xd9, 0xa9, 0x18,
	0xf7, 0x41, 0xfb, 0xb0, 0xd5, 0x60, 0xa7, 0xd1, 0x2c, 0x40, 0x48, 0xca, 0xce, 0xc4, 0x9e, 0xb7,
	0xd9, 0xd9, 0xd8, 0x73, 0x9d, 0x9d, 0x8b, 0x3d, 0x37, 0x58, 0x76, 0xed, 0xdb, 0x45, 0x98, 0x89,
	0x75, 0x6d, 0xe2, 0x78, 0xe2, 0xf2, 0x4e, 0x77, 0xab, 0xdb, 0xe9, 0x3e, 0x38, 0x88, 0x7a, 0xf5,
	0xbf, 0xe1, 0xa5, 0x38, 0xd4, 0x3d, 0x14, 0x5b, 0x52, 0x87, 0x17, 0xef, 0xf1, 0xa2, 0x24, 0x12,
	0x8b, 0xa4, 0xae, 0x28, 0x1c, 0xd0, 0xa8, 0x60, 0x19, 0xf4, 0x22, 0x5c, 0x8b, 0x93, 0x0b, 0x75,
	0x5e, 0xaa, 0xb7, 0x5b, 0x2d, 0xbe, 0xde, 0x15, 0xda, 0x2d, 0x69, 0x67, 0x4b, 0xd8, 0xe3, 0x1b,
	0x6c, 0x1e, 0xad, 0xc1, 0x0b, 0x4f, 0x25, 0xf4, 0x7e, 0xd2, 0x70, 0xbc, 0x09, 0x2f, 0x3f, 0x95,
	0xb6, 0x21, 0x34, 0xa4, 0x56, 0xbb, 0xeb, 0x2f, 0xb1, 0x45, 0xb4, 0x01, 0xff, 0x75, 0x3e, 0xe9,
	0xae, 0xdd, 0x13, 0xe8, 0x16, 0x6c, 0xc6, 0x19, 0x0e, 0x78, 0x5e, 0x8c, 0x71, 0x88, 0xfc, 0x56,
	0x97, 0xf7, 0x73, 0xc0, 0xdb, 0x46, 0x09, 0xfd, 0x2f, 0xbc, 0x72, 0x2e, 0xbe, 0xf6, 0xce, 0x4e,
	0xc8, 0x36, 0x89, 0xee, 0xc0, 0xff, 0x3d, 0x9d, 0xad, 0xc3, 0x77, 0x25, 0x91, 0xdf, 0x6f, 0x77,
	0x79, 0xa9, 0xc1, 0x77, 0xea, 0xa2, 0x70, 0x10, 0x75, 0x5f, 0x19, 0x7d, 0x09, 0x6e, 0x8f, 0x16,
	0xb0, 0xd7, 0xae, 0x6f, 0xed, 0x65, 0xf1, 0x57, 0xd6, 0xfe, 0xc2, 0xb8, 0xe3, 0x56, 0xa4, 0xe6,
	0xfb, 0x05, 0x63, 0x9f, 0xdf, 0xdf, 0xe6, 0x45, 0x22, 0x39, 0x1a, 0x07, 0x19, 0xa0, 0x28, 0xb4,
	0x76, 0x85, 0xd6, 0x2e, 0xcb, 0xa0, 0x6b, 0x70, 0xf5, 0x0c, 0x50, 0x12, 0xf9, 0xad, 0x7a, 0x93,
	0x6f, 0xb0, 0x45, 0xbf, 0xa0, 0x45, 0x89, 0x7c, 0x7b, 0x5b, 0xbb, 0x6c, 0x1e, 0x5d, 0x81, 0xcb,
	0x67, 0xe0, 0x34, 0x08, 0xbc, 0x18, 0x8d, 0xc2, 0x6e, 0xb9, 0x9a, 0xd8, 0xfc, 0x64, 0x02, 0x4a,
	0xee, 0x37, 0x65, 0x64, 0xc0, 0x54, 0xf4, 0x4e, 0x7d, 0x29, 0xfc, 0x00, 0x9a, 0xbc, 0xcd, 0x5f,
	0x5a, 0x0e, 0xb1, 0xd4, 0x65, 0x3c, 0xf7, 0xc2, 0x77, 0xfe, 0xf6, 0xcf, 0x9f, 0xe4, 0x57, 0xb9,
	0xe5, 0x8d, 0x93, 0x57, 0x36, 0xfa, 0xd6, 0x40, 0xd9, 0x70, 0x15, 0x6c, 0x44, 0x88, 0x6e, 0x33,
	0x6b, 0xa8, 0x07, 0x95, 0xf0, 0x8e, 0xaf, 0x9a, 0xd0, 0x16, 0x20, 0x4b, 0x97, 0x93, 0xba, 0x02,
	0x88, 0x7b, 0x9e, 0x6a, 0xaa, 0x71, 0x97, 0x93, 0x9a, 0x02, 0x12, 0xa2, 0xe7, 0x21, 0x94, 0xbc,
	0x6b, 0xad, 0xc5, 0x84, 0x12, 0x77, 0x79, 0xe9, 0x62, 0x52, 0x83, 0xbb, 0xce, 0x3d, 0x47, 0xc5,
	0x2f, 0x73, 0x17, 0x93, 0xe2, 0x5d, 0x9c, 0xc8, 0xfe, 0x1a, 0x94, 0x83, 0xab, 0xaa, 0x4b, 0x09,
	0xe9, 0x3e, 0xb0, 0xb4, 0x90, 0x94, 0x7f, 0xcf, 0xd4, 0x54, 0xee, 0x1a, 0x95, 0x7e, 0x85, 0xab,
	0x26, 0xa5, 0xfb, 0x7c, 0x44, 0xbe, 0x0a, 0x10, 0xb9, 0xb0, 0xba, 0x9c, 0xd0, 0x10, 0x42, 0x67,
	0xe8, 0xb8, 0x4e, 0x75, 0x5c, 0xe5, 0x96, 0x92, 0x3a, 0x42, 0x4e, 0xa2, 0xe5, 0xbb, 0x0c, 0x2c,
	0x66, 0x5f, 0x17, 0x3d, 0x9f, 0xd0, 0x98, 0x49, 0x75, 0x86, 0xf2, 0x9b, 0x54, 0xf9, 0x1a, 0x77,
	0x3d, 0xa9, 0x3c, 0x53, 0x88, 0xb7, 0xdb, 0xc8, 0x8d, 0x58, 0x72, 0xb7, 0x21, 0x34, 0xee, 0x6e,
	0x43, 0xce, 0xdb, 0xcc, 0xda, 0xb6, 0xf8, 0xfe, 0x87, 0xb5, 0xdc, 0x07, 0x1f, 0xd6, 0x72, 0x9f,
	0x7c, 0x58, 0x63, 0xbe, 0x75, 0x5a, 0x63, 0x7e, 0x75, 0x5a, 0x63, 0xde, 0x3b, 0xad, 0x31, 0xef,
	0x9f, 0xd6, 0x98, 0x7f, 0x9c, 0xd6, 0x98, 0x7f, 0x9d, 0xd6, 0x72, 0x9f, 0x9c, 0xd6, 0x98, 0x1f,
	0x7d, 0x54, 0xcb, 0xbd, 0xff, 0x51, 0x2d, 0xf7, 0xc1, 0x47, 0xb5, 0x1c, 0x2c, 0x44, 0x2f, 0xaf,
	0x6c, 0x6c, 0x91, 0xc3, 0xa4, 0xfd, 0xd0, 0xfb, 0x87, 0xb8, 0xa3, 0x12, 0x1d, 0x81, 0x5e, 0xfd,
	0x4f, 0x00, 0x00, 0x00, 0xff, 0xff, 0xac, 0x91, 0xd3, 0x1c, 0x30, 0x27, 0x00, 0x00,
}

func (x CallDisposedReason) String() string {
	s, ok := CallDisposedReason_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x RejectCallReason) String() string {
	s, ok := RejectCallReason_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x DTMFCode) String() string {
	s, ok := DTMFCode_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x CallStatsType) String() string {
	s, ok := CallStatsType_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x CallMemberState) String() string {
	s, ok := CallMemberState_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *UpdateIncomingCallDeprecated) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpdateIncomingCallDeprecated)
	if !ok {
		that2, ok := that.(UpdateIncomingCallDeprecated)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.CallId != that1.CallId {
		return false
	}
	if !this.AttemptIndex.Equal(that1.AttemptIndex) {
		return false
	}
	return true
}
func (this *UpdateIncomingCall) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpdateIncomingCall)
	if !ok {
		that2, ok := that.(UpdateIncomingCall)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.CallId != that1.CallId {
		return false
	}
	if this.EventBusId != that1.EventBusId {
		return false
	}
	if !this.Peer.Equal(that1.Peer) {
		return false
	}
	if !this.DisplayName.Equal(that1.DisplayName) {
		return false
	}
	if !this.AttemptIndex.Equal(that1.AttemptIndex) {
		return false
	}
	if !this.OutPeer.Equal(that1.OutPeer) {
		return false
	}
	if this.Video != that1.Video {
		return false
	}
	return true
}
func (this *UpdateCallHandled) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpdateCallHandled)
	if !ok {
		that2, ok := that.(UpdateCallHandled)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.CallId != that1.CallId {
		return false
	}
	if !this.AttemptIndex.Equal(that1.AttemptIndex) {
		return false
	}
	return true
}
func (this *UpdateCallDisposed) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpdateCallDisposed)
	if !ok {
		that2, ok := that.(UpdateCallDisposed)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.CallId != that1.CallId {
		return false
	}
	if !this.AttemptIndex.Equal(that1.AttemptIndex) {
		return false
	}
	if this.Reason != that1.Reason {
		return false
	}
	return true
}
func (this *RequestGetCallInfo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RequestGetCallInfo)
	if !ok {
		that2, ok := that.(RequestGetCallInfo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.CallId != that1.CallId {
		return false
	}
	return true
}
func (this *ResponseGetCallInfo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ResponseGetCallInfo)
	if !ok {
		that2, ok := that.(ResponseGetCallInfo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Peer.Equal(that1.Peer) {
		return false
	}
	if len(this.Groups) != len(that1.Groups) {
		return false
	}
	for i := range this.Groups {
		if !this.Groups[i].Equal(that1.Groups[i]) {
			return false
		}
	}
	if len(this.Users) != len(that1.Users) {
		return false
	}
	for i := range this.Users {
		if !this.Users[i].Equal(that1.Users[i]) {
			return false
		}
	}
	if this.EventBusId != that1.EventBusId {
		return false
	}
	if !this.DisplayName.Equal(that1.DisplayName) {
		return false
	}
	return true
}
func (this *CallLogEntry) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CallLogEntry)
	if !ok {
		that2, ok := that.(CallLogEntry)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if this.CallDate != that1.CallDate {
		return false
	}
	if !this.Initiator.Equal(that1.Initiator) {
		return false
	}
	if !this.Recipient.Equal(that1.Recipient) {
		return false
	}
	if !this.Duration.Equal(that1.Duration) {
		return false
	}
	if !this.Answered.Equal(that1.Answered) {
		return false
	}
	if !this.Finished.Equal(that1.Finished) {
		return false
	}
	if !this.DisplayName.Equal(that1.DisplayName) {
		return false
	}
	if !this.Rejected.Equal(that1.Rejected) {
		return false
	}
	return true
}
func (this *RequestLoadCalls) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RequestLoadCalls)
	if !ok {
		that2, ok := that.(RequestLoadCalls)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.NextOffset.Equal(that1.NextOffset) {
		return false
	}
	if this.Limit != that1.Limit {
		return false
	}
	return true
}
func (this *ResponseLoadCalls) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ResponseLoadCalls)
	if !ok {
		that2, ok := that.(ResponseLoadCalls)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Calls) != len(that1.Calls) {
		return false
	}
	for i := range this.Calls {
		if !this.Calls[i].Equal(that1.Calls[i]) {
			return false
		}
	}
	if len(this.Users) != len(that1.Users) {
		return false
	}
	for i := range this.Users {
		if !this.Users[i].Equal(that1.Users[i]) {
			return false
		}
	}
	if len(this.Groups) != len(that1.Groups) {
		return false
	}
	for i := range this.Groups {
		if !this.Groups[i].Equal(that1.Groups[i]) {
			return false
		}
	}
	if !this.NextOffset.Equal(that1.NextOffset) {
		return false
	}
	return true
}
func (this *RequestDoCall) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RequestDoCall)
	if !ok {
		that2, ok := that.(RequestDoCall)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Peer.Equal(that1.Peer) {
		return false
	}
	if this.Timeout != that1.Timeout {
		return false
	}
	return true
}
func (this *ResponseDoCall) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ResponseDoCall)
	if !ok {
		that2, ok := that.(ResponseDoCall)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.CallId != that1.CallId {
		return false
	}
	if this.EventBusId != that1.EventBusId {
		return false
	}
	if this.DeviceId != that1.DeviceId {
		return false
	}
	return true
}
func (this *RequestJoinCall) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RequestJoinCall)
	if !ok {
		that2, ok := that.(RequestJoinCall)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.CallId != that1.CallId {
		return false
	}
	return true
}
func (this *RequestRejectCall) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RequestRejectCall)
	if !ok {
		that2, ok := that.(RequestRejectCall)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.CallId != that1.CallId {
		return false
	}
	if this.Reason != that1.Reason {
		return false
	}
	return true
}
func (this *RequestDeleteCall) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RequestDeleteCall)
	if !ok {
		that2, ok := that.(RequestDeleteCall)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.CallId != that1.CallId {
		return false
	}
	return true
}
func (this *RequestChangeCallDisplayName) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RequestChangeCallDisplayName)
	if !ok {
		that2, ok := that.(RequestChangeCallDisplayName)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.CallId != that1.CallId {
		return false
	}
	if !this.DisplayName.Equal(that1.DisplayName) {
		return false
	}
	return true
}
func (this *ICEServer) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ICEServer)
	if !ok {
		that2, ok := that.(ICEServer)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Url != that1.Url {
		return false
	}
	if !this.Username.Equal(that1.Username) {
		return false
	}
	if !this.Credential.Equal(that1.Credential) {
		return false
	}
	return true
}
func (this *ICECandidate) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ICECandidate)
	if !ok {
		that2, ok := that.(ICECandidate)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.SdpMLineIndex != that1.SdpMLineIndex {
		return false
	}
	if this.SdpMid != that1.SdpMid {
		return false
	}
	if this.Sdp != that1.Sdp {
		return false
	}
	return true
}
func (this *WebRTCSignaling) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*WebRTCSignaling)
	if !ok {
		that2, ok := that.(WebRTCSignaling)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.Body == nil {
		if this.Body != nil {
			return false
		}
	} else if this.Body == nil {
		return false
	} else if !this.Body.Equal(that1.Body) {
		return false
	}
	return true
}
func (this *WebRTCSignaling_AdvertiseSelf) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*WebRTCSignaling_AdvertiseSelf)
	if !ok {
		that2, ok := that.(WebRTCSignaling_AdvertiseSelf)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AdvertiseSelf.Equal(that1.AdvertiseSelf) {
		return false
	}
	return true
}
func (this *WebRTCSignaling_AdvertiseMaster) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*WebRTCSignaling_AdvertiseMaster)
	if !ok {
		that2, ok := that.(WebRTCSignaling_AdvertiseMaster)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AdvertiseMaster.Equal(that1.AdvertiseMaster) {
		return false
	}
	return true
}
func (this *WebRTCSignaling_AdvertisePeer) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*WebRTCSignaling_AdvertisePeer)
	if !ok {
		that2, ok := that.(WebRTCSignaling_AdvertisePeer)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AdvertisePeer.Equal(that1.AdvertisePeer) {
		return false
	}
	return true
}
func (this *WebRTCSignaling_Candidate) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*WebRTCSignaling_Candidate)
	if !ok {
		that2, ok := that.(WebRTCSignaling_Candidate)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Candidate.Equal(that1.Candidate) {
		return false
	}
	return true
}
func (this *WebRTCSignaling_GotICECandidate) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*WebRTCSignaling_GotICECandidate)
	if !ok {
		that2, ok := that.(WebRTCSignaling_GotICECandidate)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.GotICECandidate.Equal(that1.GotICECandidate) {
		return false
	}
	return true
}
func (this *WebRTCSignaling_RemovedICECandidates) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*WebRTCSignaling_RemovedICECandidates)
	if !ok {
		that2, ok := that.(WebRTCSignaling_RemovedICECandidates)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.RemovedICECandidates.Equal(that1.RemovedICECandidates) {
		return false
	}
	return true
}
func (this *WebRTCSignaling_Offer) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*WebRTCSignaling_Offer)
	if !ok {
		that2, ok := that.(WebRTCSignaling_Offer)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Offer.Equal(that1.Offer) {
		return false
	}
	return true
}
func (this *WebRTCSignaling_Answer) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*WebRTCSignaling_Answer)
	if !ok {
		that2, ok := that.(WebRTCSignaling_Answer)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Answer.Equal(that1.Answer) {
		return false
	}
	return true
}
func (this *WebRTCSignaling_NeedOffer) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*WebRTCSignaling_NeedOffer)
	if !ok {
		that2, ok := that.(WebRTCSignaling_NeedOffer)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.NeedOffer.Equal(that1.NeedOffer) {
		return false
	}
	return true
}
func (this *WebRTCSignaling_NegotinationSuccessful) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*WebRTCSignaling_NegotinationSuccessful)
	if !ok {
		that2, ok := that.(WebRTCSignaling_NegotinationSuccessful)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.NegotinationSuccessful.Equal(that1.NegotinationSuccessful) {
		return false
	}
	return true
}
func (this *WebRTCSignaling_EnableConnection) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*WebRTCSignaling_EnableConnection)
	if !ok {
		that2, ok := that.(WebRTCSignaling_EnableConnection)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.EnableConnection.Equal(that1.EnableConnection) {
		return false
	}
	return true
}
func (this *WebRTCSignaling_OnRenegotiationNeeded) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*WebRTCSignaling_OnRenegotiationNeeded)
	if !ok {
		that2, ok := that.(WebRTCSignaling_OnRenegotiationNeeded)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.OnRenegotiationNeeded.Equal(that1.OnRenegotiationNeeded) {
		return false
	}
	return true
}
func (this *WebRTCSignaling_CloseSession) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*WebRTCSignaling_CloseSession)
	if !ok {
		that2, ok := that.(WebRTCSignaling_CloseSession)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.CloseSession.Equal(that1.CloseSession) {
		return false
	}
	return true
}
func (this *WebRTCSignaling_NeedDisconnect) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*WebRTCSignaling_NeedDisconnect)
	if !ok {
		that2, ok := that.(WebRTCSignaling_NeedDisconnect)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.NeedDisconnect.Equal(that1.NeedDisconnect) {
		return false
	}
	return true
}
func (this *WebRTCSignaling_DTMF) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*WebRTCSignaling_DTMF)
	if !ok {
		that2, ok := that.(WebRTCSignaling_DTMF)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DTMF.Equal(that1.DTMF) {
		return false
	}
	return true
}
func (this *WebRTCSignaling_CallStats) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*WebRTCSignaling_CallStats)
	if !ok {
		that2, ok := that.(WebRTCSignaling_CallStats)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.CallStats.Equal(that1.CallStats) {
		return false
	}
	return true
}
func (this *WebRTCSignaling_CallNameChanged) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*WebRTCSignaling_CallNameChanged)
	if !ok {
		that2, ok := that.(WebRTCSignaling_CallNameChanged)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.CallNameChanged.Equal(that1.CallNameChanged) {
		return false
	}
	return true
}
func (this *AdvertiseSelf) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AdvertiseSelf)
	if !ok {
		that2, ok := that.(AdvertiseSelf)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.PeerSettings.Equal(that1.PeerSettings) {
		return false
	}
	return true
}
func (this *AdvertiseMaster) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AdvertiseMaster)
	if !ok {
		that2, ok := that.(AdvertiseMaster)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Server) != len(that1.Server) {
		return false
	}
	for i := range this.Server {
		if !this.Server[i].Equal(that1.Server[i]) {
			return false
		}
	}
	if !this.CallApiVersion.Equal(that1.CallApiVersion) {
		return false
	}
	if !this.CallName.Equal(that1.CallName) {
		return false
	}
	return true
}
func (this *AdvertisePeer) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AdvertisePeer)
	if !ok {
		that2, ok := that.(AdvertisePeer)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.DeviceId != that1.DeviceId {
		return false
	}
	if !this.PeerSettings.Equal(that1.PeerSettings) {
		return false
	}
	if len(this.IceServers) != len(that1.IceServers) {
		return false
	}
	for i := range this.IceServers {
		if !this.IceServers[i].Equal(that1.IceServers[i]) {
			return false
		}
	}
	return true
}
func (this *Candidate) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Candidate)
	if !ok {
		that2, ok := that.(Candidate)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.SessionId != that1.SessionId {
		return false
	}
	if this.Index != that1.Index {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if this.Sdp != that1.Sdp {
		return false
	}
	return true
}
func (this *GotICECandidate) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GotICECandidate)
	if !ok {
		that2, ok := that.(GotICECandidate)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.SessionId != that1.SessionId {
		return false
	}
	if !this.Candidate.Equal(that1.Candidate) {
		return false
	}
	return true
}
func (this *RemovedICECandidates) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RemovedICECandidates)
	if !ok {
		that2, ok := that.(RemovedICECandidates)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.SessionId != that1.SessionId {
		return false
	}
	if len(this.Candidate) != len(that1.Candidate) {
		return false
	}
	for i := range this.Candidate {
		if !this.Candidate[i].Equal(that1.Candidate[i]) {
			return false
		}
	}
	return true
}
func (this *Offer) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Offer)
	if !ok {
		that2, ok := that.(Offer)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.SessionId != that1.SessionId {
		return false
	}
	if this.Sdp != that1.Sdp {
		return false
	}
	if !this.PeerSettings.Equal(that1.PeerSettings) {
		return false
	}
	return true
}
func (this *Answer) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Answer)
	if !ok {
		that2, ok := that.(Answer)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.SessionId != that1.SessionId {
		return false
	}
	if this.Sdp != that1.Sdp {
		return false
	}
	return true
}
func (this *NeedOffer) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*NeedOffer)
	if !ok {
		that2, ok := that.(NeedOffer)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Device != that1.Device {
		return false
	}
	if this.SessionId != that1.SessionId {
		return false
	}
	if !this.PeerSettings.Equal(that1.PeerSettings) {
		return false
	}
	return true
}
func (this *NegotinationSuccessful) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*NegotinationSuccessful)
	if !ok {
		that2, ok := that.(NegotinationSuccessful)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Device != that1.Device {
		return false
	}
	if this.SessionId != that1.SessionId {
		return false
	}
	return true
}
func (this *EnableConnection) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*EnableConnection)
	if !ok {
		that2, ok := that.(EnableConnection)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Device != that1.Device {
		return false
	}
	if this.SessionId != that1.SessionId {
		return false
	}
	return true
}
func (this *OnRenegotiationNeeded) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*OnRenegotiationNeeded)
	if !ok {
		that2, ok := that.(OnRenegotiationNeeded)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Device != that1.Device {
		return false
	}
	if this.SessionId != that1.SessionId {
		return false
	}
	return true
}
func (this *CloseSession) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CloseSession)
	if !ok {
		that2, ok := that.(CloseSession)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Device != that1.Device {
		return false
	}
	if this.SessionId != that1.SessionId {
		return false
	}
	return true
}
func (this *NeedDisconnect) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*NeedDisconnect)
	if !ok {
		that2, ok := that.(NeedDisconnect)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Device != that1.Device {
		return false
	}
	return true
}
func (this *DTMF) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DTMF)
	if !ok {
		that2, ok := that.(DTMF)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Code != that1.Code {
		return false
	}
	if this.Duration != that1.Duration {
		return false
	}
	return true
}
func (this *CallStats) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CallStats)
	if !ok {
		that2, ok := that.(CallStats)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Type != that1.Type {
		return false
	}
	if this.Value != that1.Value {
		return false
	}
	return true
}
func (this *CallNameChanged) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CallNameChanged)
	if !ok {
		that2, ok := that.(CallNameChanged)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.CallName.Equal(that1.CallName) {
		return false
	}
	return true
}
func (this *ActiveCall) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ActiveCall)
	if !ok {
		that2, ok := that.(ActiveCall)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.CallId != that1.CallId {
		return false
	}
	if !this.Peer.Equal(that1.Peer) {
		return false
	}
	if len(this.CallMembers) != len(that1.CallMembers) {
		return false
	}
	for i := range this.CallMembers {
		if !this.CallMembers[i].Equal(that1.CallMembers[i]) {
			return false
		}
	}
	return true
}
func (this *CallMemberStateHolder) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CallMemberStateHolder)
	if !ok {
		that2, ok := that.(CallMemberStateHolder)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.State != that1.State {
		return false
	}
	if !this.FallbackIsRinging.Equal(that1.FallbackIsRinging) {
		return false
	}
	if !this.FallbackIsConnected.Equal(that1.FallbackIsConnected) {
		return false
	}
	if !this.FallbackIsConnecting.Equal(that1.FallbackIsConnecting) {
		return false
	}
	if !this.FallbackIsRingingReached.Equal(that1.FallbackIsRingingReached) {
		return false
	}
	if !this.FallbackIsEnded.Equal(that1.FallbackIsEnded) {
		return false
	}
	return true
}
func (this *CallMember) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CallMember)
	if !ok {
		that2, ok := that.(CallMember)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.UserId != that1.UserId {
		return false
	}
	if !this.State.Equal(that1.State) {
		return false
	}
	return true
}
func (this *PeerSettings) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PeerSettings)
	if !ok {
		that2, ok := that.(PeerSettings)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.CanPreConnect.Equal(that1.CanPreConnect) {
		return false
	}
	if !this.SendsOffer.Equal(that1.SendsOffer) {
		return false
	}
	if !this.WaitForCandidates.Equal(that1.WaitForCandidates) {
		return false
	}
	if !this.ClientInfo.Equal(that1.ClientInfo) {
		return false
	}
	return true
}
func (this *UpdateIncomingCallDeprecated) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&dialog.UpdateIncomingCallDeprecated{")
	s = append(s, "CallId: "+fmt.Sprintf("%#v", this.CallId)+",\n")
	if this.AttemptIndex != nil {
		s = append(s, "AttemptIndex: "+fmt.Sprintf("%#v", this.AttemptIndex)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UpdateIncomingCall) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 11)
	s = append(s, "&dialog.UpdateIncomingCall{")
	s = append(s, "CallId: "+fmt.Sprintf("%#v", this.CallId)+",\n")
	s = append(s, "EventBusId: "+fmt.Sprintf("%#v", this.EventBusId)+",\n")
	if this.Peer != nil {
		s = append(s, "Peer: "+fmt.Sprintf("%#v", this.Peer)+",\n")
	}
	if this.DisplayName != nil {
		s = append(s, "DisplayName: "+fmt.Sprintf("%#v", this.DisplayName)+",\n")
	}
	if this.AttemptIndex != nil {
		s = append(s, "AttemptIndex: "+fmt.Sprintf("%#v", this.AttemptIndex)+",\n")
	}
	if this.OutPeer != nil {
		s = append(s, "OutPeer: "+fmt.Sprintf("%#v", this.OutPeer)+",\n")
	}
	s = append(s, "Video: "+fmt.Sprintf("%#v", this.Video)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UpdateCallHandled) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&dialog.UpdateCallHandled{")
	s = append(s, "CallId: "+fmt.Sprintf("%#v", this.CallId)+",\n")
	if this.AttemptIndex != nil {
		s = append(s, "AttemptIndex: "+fmt.Sprintf("%#v", this.AttemptIndex)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UpdateCallDisposed) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&dialog.UpdateCallDisposed{")
	s = append(s, "CallId: "+fmt.Sprintf("%#v", this.CallId)+",\n")
	if this.AttemptIndex != nil {
		s = append(s, "AttemptIndex: "+fmt.Sprintf("%#v", this.AttemptIndex)+",\n")
	}
	s = append(s, "Reason: "+fmt.Sprintf("%#v", this.Reason)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RequestGetCallInfo) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&dialog.RequestGetCallInfo{")
	s = append(s, "CallId: "+fmt.Sprintf("%#v", this.CallId)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ResponseGetCallInfo) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&dialog.ResponseGetCallInfo{")
	if this.Peer != nil {
		s = append(s, "Peer: "+fmt.Sprintf("%#v", this.Peer)+",\n")
	}
	if this.Groups != nil {
		s = append(s, "Groups: "+fmt.Sprintf("%#v", this.Groups)+",\n")
	}
	if this.Users != nil {
		s = append(s, "Users: "+fmt.Sprintf("%#v", this.Users)+",\n")
	}
	s = append(s, "EventBusId: "+fmt.Sprintf("%#v", this.EventBusId)+",\n")
	if this.DisplayName != nil {
		s = append(s, "DisplayName: "+fmt.Sprintf("%#v", this.DisplayName)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CallLogEntry) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 13)
	s = append(s, "&dialog.CallLogEntry{")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	s = append(s, "CallDate: "+fmt.Sprintf("%#v", this.CallDate)+",\n")
	if this.Initiator != nil {
		s = append(s, "Initiator: "+fmt.Sprintf("%#v", this.Initiator)+",\n")
	}
	if this.Recipient != nil {
		s = append(s, "Recipient: "+fmt.Sprintf("%#v", this.Recipient)+",\n")
	}
	if this.Duration != nil {
		s = append(s, "Duration: "+fmt.Sprintf("%#v", this.Duration)+",\n")
	}
	if this.Answered != nil {
		s = append(s, "Answered: "+fmt.Sprintf("%#v", this.Answered)+",\n")
	}
	if this.Finished != nil {
		s = append(s, "Finished: "+fmt.Sprintf("%#v", this.Finished)+",\n")
	}
	if this.DisplayName != nil {
		s = append(s, "DisplayName: "+fmt.Sprintf("%#v", this.DisplayName)+",\n")
	}
	if this.Rejected != nil {
		s = append(s, "Rejected: "+fmt.Sprintf("%#v", this.Rejected)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RequestLoadCalls) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&dialog.RequestLoadCalls{")
	if this.NextOffset != nil {
		s = append(s, "NextOffset: "+fmt.Sprintf("%#v", this.NextOffset)+",\n")
	}
	s = append(s, "Limit: "+fmt.Sprintf("%#v", this.Limit)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ResponseLoadCalls) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&dialog.ResponseLoadCalls{")
	if this.Calls != nil {
		s = append(s, "Calls: "+fmt.Sprintf("%#v", this.Calls)+",\n")
	}
	if this.Users != nil {
		s = append(s, "Users: "+fmt.Sprintf("%#v", this.Users)+",\n")
	}
	if this.Groups != nil {
		s = append(s, "Groups: "+fmt.Sprintf("%#v", this.Groups)+",\n")
	}
	if this.NextOffset != nil {
		s = append(s, "NextOffset: "+fmt.Sprintf("%#v", this.NextOffset)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RequestDoCall) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&dialog.RequestDoCall{")
	if this.Peer != nil {
		s = append(s, "Peer: "+fmt.Sprintf("%#v", this.Peer)+",\n")
	}
	s = append(s, "Timeout: "+fmt.Sprintf("%#v", this.Timeout)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ResponseDoCall) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&dialog.ResponseDoCall{")
	s = append(s, "CallId: "+fmt.Sprintf("%#v", this.CallId)+",\n")
	s = append(s, "EventBusId: "+fmt.Sprintf("%#v", this.EventBusId)+",\n")
	s = append(s, "DeviceId: "+fmt.Sprintf("%#v", this.DeviceId)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RequestJoinCall) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&dialog.RequestJoinCall{")
	s = append(s, "CallId: "+fmt.Sprintf("%#v", this.CallId)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RequestRejectCall) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&dialog.RequestRejectCall{")
	s = append(s, "CallId: "+fmt.Sprintf("%#v", this.CallId)+",\n")
	s = append(s, "Reason: "+fmt.Sprintf("%#v", this.Reason)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RequestDeleteCall) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&dialog.RequestDeleteCall{")
	s = append(s, "CallId: "+fmt.Sprintf("%#v", this.CallId)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RequestChangeCallDisplayName) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&dialog.RequestChangeCallDisplayName{")
	s = append(s, "CallId: "+fmt.Sprintf("%#v", this.CallId)+",\n")
	if this.DisplayName != nil {
		s = append(s, "DisplayName: "+fmt.Sprintf("%#v", this.DisplayName)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ICEServer) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&dialog.ICEServer{")
	s = append(s, "Url: "+fmt.Sprintf("%#v", this.Url)+",\n")
	if this.Username != nil {
		s = append(s, "Username: "+fmt.Sprintf("%#v", this.Username)+",\n")
	}
	if this.Credential != nil {
		s = append(s, "Credential: "+fmt.Sprintf("%#v", this.Credential)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ICECandidate) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&dialog.ICECandidate{")
	s = append(s, "SdpMLineIndex: "+fmt.Sprintf("%#v", this.SdpMLineIndex)+",\n")
	s = append(s, "SdpMid: "+fmt.Sprintf("%#v", this.SdpMid)+",\n")
	s = append(s, "Sdp: "+fmt.Sprintf("%#v", this.Sdp)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *WebRTCSignaling) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 21)
	s = append(s, "&dialog.WebRTCSignaling{")
	if this.Body != nil {
		s = append(s, "Body: "+fmt.Sprintf("%#v", this.Body)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *WebRTCSignaling_AdvertiseSelf) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dialog.WebRTCSignaling_AdvertiseSelf{` +
		`AdvertiseSelf:` + fmt.Sprintf("%#v", this.AdvertiseSelf) + `}`}, ", ")
	return s
}
func (this *WebRTCSignaling_AdvertiseMaster) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dialog.WebRTCSignaling_AdvertiseMaster{` +
		`AdvertiseMaster:` + fmt.Sprintf("%#v", this.AdvertiseMaster) + `}`}, ", ")
	return s
}
func (this *WebRTCSignaling_AdvertisePeer) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dialog.WebRTCSignaling_AdvertisePeer{` +
		`AdvertisePeer:` + fmt.Sprintf("%#v", this.AdvertisePeer) + `}`}, ", ")
	return s
}
func (this *WebRTCSignaling_Candidate) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dialog.WebRTCSignaling_Candidate{` +
		`Candidate:` + fmt.Sprintf("%#v", this.Candidate) + `}`}, ", ")
	return s
}
func (this *WebRTCSignaling_GotICECandidate) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dialog.WebRTCSignaling_GotICECandidate{` +
		`GotICECandidate:` + fmt.Sprintf("%#v", this.GotICECandidate) + `}`}, ", ")
	return s
}
func (this *WebRTCSignaling_RemovedICECandidates) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dialog.WebRTCSignaling_RemovedICECandidates{` +
		`RemovedICECandidates:` + fmt.Sprintf("%#v", this.RemovedICECandidates) + `}`}, ", ")
	return s
}
func (this *WebRTCSignaling_Offer) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dialog.WebRTCSignaling_Offer{` +
		`Offer:` + fmt.Sprintf("%#v", this.Offer) + `}`}, ", ")
	return s
}
func (this *WebRTCSignaling_Answer) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dialog.WebRTCSignaling_Answer{` +
		`Answer:` + fmt.Sprintf("%#v", this.Answer) + `}`}, ", ")
	return s
}
func (this *WebRTCSignaling_NeedOffer) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dialog.WebRTCSignaling_NeedOffer{` +
		`NeedOffer:` + fmt.Sprintf("%#v", this.NeedOffer) + `}`}, ", ")
	return s
}
func (this *WebRTCSignaling_NegotinationSuccessful) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dialog.WebRTCSignaling_NegotinationSuccessful{` +
		`NegotinationSuccessful:` + fmt.Sprintf("%#v", this.NegotinationSuccessful) + `}`}, ", ")
	return s
}
func (this *WebRTCSignaling_EnableConnection) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dialog.WebRTCSignaling_EnableConnection{` +
		`EnableConnection:` + fmt.Sprintf("%#v", this.EnableConnection) + `}`}, ", ")
	return s
}
func (this *WebRTCSignaling_OnRenegotiationNeeded) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dialog.WebRTCSignaling_OnRenegotiationNeeded{` +
		`OnRenegotiationNeeded:` + fmt.Sprintf("%#v", this.OnRenegotiationNeeded) + `}`}, ", ")
	return s
}
func (this *WebRTCSignaling_CloseSession) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dialog.WebRTCSignaling_CloseSession{` +
		`CloseSession:` + fmt.Sprintf("%#v", this.CloseSession) + `}`}, ", ")
	return s
}
func (this *WebRTCSignaling_NeedDisconnect) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dialog.WebRTCSignaling_NeedDisconnect{` +
		`NeedDisconnect:` + fmt.Sprintf("%#v", this.NeedDisconnect) + `}`}, ", ")
	return s
}
func (this *WebRTCSignaling_DTMF) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dialog.WebRTCSignaling_DTMF{` +
		`DTMF:` + fmt.Sprintf("%#v", this.DTMF) + `}`}, ", ")
	return s
}
func (this *WebRTCSignaling_CallStats) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dialog.WebRTCSignaling_CallStats{` +
		`CallStats:` + fmt.Sprintf("%#v", this.CallStats) + `}`}, ", ")
	return s
}
func (this *WebRTCSignaling_CallNameChanged) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dialog.WebRTCSignaling_CallNameChanged{` +
		`CallNameChanged:` + fmt.Sprintf("%#v", this.CallNameChanged) + `}`}, ", ")
	return s
}
func (this *AdvertiseSelf) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&dialog.AdvertiseSelf{")
	if this.PeerSettings != nil {
		s = append(s, "PeerSettings: "+fmt.Sprintf("%#v", this.PeerSettings)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *AdvertiseMaster) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&dialog.AdvertiseMaster{")
	if this.Server != nil {
		s = append(s, "Server: "+fmt.Sprintf("%#v", this.Server)+",\n")
	}
	if this.CallApiVersion != nil {
		s = append(s, "CallApiVersion: "+fmt.Sprintf("%#v", this.CallApiVersion)+",\n")
	}
	if this.CallName != nil {
		s = append(s, "CallName: "+fmt.Sprintf("%#v", this.CallName)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *AdvertisePeer) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&dialog.AdvertisePeer{")
	s = append(s, "DeviceId: "+fmt.Sprintf("%#v", this.DeviceId)+",\n")
	if this.PeerSettings != nil {
		s = append(s, "PeerSettings: "+fmt.Sprintf("%#v", this.PeerSettings)+",\n")
	}
	if this.IceServers != nil {
		s = append(s, "IceServers: "+fmt.Sprintf("%#v", this.IceServers)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Candidate) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&dialog.Candidate{")
	s = append(s, "SessionId: "+fmt.Sprintf("%#v", this.SessionId)+",\n")
	s = append(s, "Index: "+fmt.Sprintf("%#v", this.Index)+",\n")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	s = append(s, "Sdp: "+fmt.Sprintf("%#v", this.Sdp)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GotICECandidate) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&dialog.GotICECandidate{")
	s = append(s, "SessionId: "+fmt.Sprintf("%#v", this.SessionId)+",\n")
	if this.Candidate != nil {
		s = append(s, "Candidate: "+fmt.Sprintf("%#v", this.Candidate)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RemovedICECandidates) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&dialog.RemovedICECandidates{")
	s = append(s, "SessionId: "+fmt.Sprintf("%#v", this.SessionId)+",\n")
	if this.Candidate != nil {
		s = append(s, "Candidate: "+fmt.Sprintf("%#v", this.Candidate)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Offer) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&dialog.Offer{")
	s = append(s, "SessionId: "+fmt.Sprintf("%#v", this.SessionId)+",\n")
	s = append(s, "Sdp: "+fmt.Sprintf("%#v", this.Sdp)+",\n")
	if this.PeerSettings != nil {
		s = append(s, "PeerSettings: "+fmt.Sprintf("%#v", this.PeerSettings)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Answer) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&dialog.Answer{")
	s = append(s, "SessionId: "+fmt.Sprintf("%#v", this.SessionId)+",\n")
	s = append(s, "Sdp: "+fmt.Sprintf("%#v", this.Sdp)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *NeedOffer) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&dialog.NeedOffer{")
	s = append(s, "Device: "+fmt.Sprintf("%#v", this.Device)+",\n")
	s = append(s, "SessionId: "+fmt.Sprintf("%#v", this.SessionId)+",\n")
	if this.PeerSettings != nil {
		s = append(s, "PeerSettings: "+fmt.Sprintf("%#v", this.PeerSettings)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *NegotinationSuccessful) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&dialog.NegotinationSuccessful{")
	s = append(s, "Device: "+fmt.Sprintf("%#v", this.Device)+",\n")
	s = append(s, "SessionId: "+fmt.Sprintf("%#v", this.SessionId)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *EnableConnection) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&dialog.EnableConnection{")
	s = append(s, "Device: "+fmt.Sprintf("%#v", this.Device)+",\n")
	s = append(s, "SessionId: "+fmt.Sprintf("%#v", this.SessionId)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *OnRenegotiationNeeded) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&dialog.OnRenegotiationNeeded{")
	s = append(s, "Device: "+fmt.Sprintf("%#v", this.Device)+",\n")
	s = append(s, "SessionId: "+fmt.Sprintf("%#v", this.SessionId)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CloseSession) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&dialog.CloseSession{")
	s = append(s, "Device: "+fmt.Sprintf("%#v", this.Device)+",\n")
	s = append(s, "SessionId: "+fmt.Sprintf("%#v", this.SessionId)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *NeedDisconnect) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&dialog.NeedDisconnect{")
	s = append(s, "Device: "+fmt.Sprintf("%#v", this.Device)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DTMF) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&dialog.DTMF{")
	s = append(s, "Code: "+fmt.Sprintf("%#v", this.Code)+",\n")
	s = append(s, "Duration: "+fmt.Sprintf("%#v", this.Duration)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CallStats) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&dialog.CallStats{")
	s = append(s, "Type: "+fmt.Sprintf("%#v", this.Type)+",\n")
	s = append(s, "Value: "+fmt.Sprintf("%#v", this.Value)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CallNameChanged) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&dialog.CallNameChanged{")
	if this.CallName != nil {
		s = append(s, "CallName: "+fmt.Sprintf("%#v", this.CallName)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ActiveCall) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&dialog.ActiveCall{")
	s = append(s, "CallId: "+fmt.Sprintf("%#v", this.CallId)+",\n")
	if this.Peer != nil {
		s = append(s, "Peer: "+fmt.Sprintf("%#v", this.Peer)+",\n")
	}
	if this.CallMembers != nil {
		s = append(s, "CallMembers: "+fmt.Sprintf("%#v", this.CallMembers)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CallMemberStateHolder) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 10)
	s = append(s, "&dialog.CallMemberStateHolder{")
	s = append(s, "State: "+fmt.Sprintf("%#v", this.State)+",\n")
	if this.FallbackIsRinging != nil {
		s = append(s, "FallbackIsRinging: "+fmt.Sprintf("%#v", this.FallbackIsRinging)+",\n")
	}
	if this.FallbackIsConnected != nil {
		s = append(s, "FallbackIsConnected: "+fmt.Sprintf("%#v", this.FallbackIsConnected)+",\n")
	}
	if this.FallbackIsConnecting != nil {
		s = append(s, "FallbackIsConnecting: "+fmt.Sprintf("%#v", this.FallbackIsConnecting)+",\n")
	}
	if this.FallbackIsRingingReached != nil {
		s = append(s, "FallbackIsRingingReached: "+fmt.Sprintf("%#v", this.FallbackIsRingingReached)+",\n")
	}
	if this.FallbackIsEnded != nil {
		s = append(s, "FallbackIsEnded: "+fmt.Sprintf("%#v", this.FallbackIsEnded)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CallMember) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&dialog.CallMember{")
	s = append(s, "UserId: "+fmt.Sprintf("%#v", this.UserId)+",\n")
	if this.State != nil {
		s = append(s, "State: "+fmt.Sprintf("%#v", this.State)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *PeerSettings) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&dialog.PeerSettings{")
	if this.CanPreConnect != nil {
		s = append(s, "CanPreConnect: "+fmt.Sprintf("%#v", this.CanPreConnect)+",\n")
	}
	if this.SendsOffer != nil {
		s = append(s, "SendsOffer: "+fmt.Sprintf("%#v", this.SendsOffer)+",\n")
	}
	if this.WaitForCandidates != nil {
		s = append(s, "WaitForCandidates: "+fmt.Sprintf("%#v", this.WaitForCandidates)+",\n")
	}
	if this.ClientInfo != nil {
		s = append(s, "ClientInfo: "+fmt.Sprintf("%#v", this.ClientInfo)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringWebRtc(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// WebRTCClient is the client API for WebRTC service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type WebRTCClient interface {
	GetCallInfo(ctx context.Context, in *RequestGetCallInfo, opts ...grpc.CallOption) (*ResponseGetCallInfo, error)
	LoadCalls(ctx context.Context, in *RequestLoadCalls, opts ...grpc.CallOption) (*ResponseLoadCalls, error)
	DoCall(ctx context.Context, in *RequestDoCall, opts ...grpc.CallOption) (*ResponseDoCall, error)
	JoinCall(ctx context.Context, in *RequestJoinCall, opts ...grpc.CallOption) (*ResponseVoid, error)
	RejectCall(ctx context.Context, in *RequestRejectCall, opts ...grpc.CallOption) (*ResponseVoid, error)
	ChangeCallDisplayName(ctx context.Context, in *RequestChangeCallDisplayName, opts ...grpc.CallOption) (*ResponseVoid, error)
	DeleteCall(ctx context.Context, in *RequestDeleteCall, opts ...grpc.CallOption) (*ResponseVoid, error)
}

type webRTCClient struct {
	cc *grpc.ClientConn
}

func NewWebRTCClient(cc *grpc.ClientConn) WebRTCClient {
	return &webRTCClient{cc}
}

func (c *webRTCClient) GetCallInfo(ctx context.Context, in *RequestGetCallInfo, opts ...grpc.CallOption) (*ResponseGetCallInfo, error) {
	out := new(ResponseGetCallInfo)
	err := c.cc.Invoke(ctx, "/dialog.WebRTC/GetCallInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webRTCClient) LoadCalls(ctx context.Context, in *RequestLoadCalls, opts ...grpc.CallOption) (*ResponseLoadCalls, error) {
	out := new(ResponseLoadCalls)
	err := c.cc.Invoke(ctx, "/dialog.WebRTC/LoadCalls", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webRTCClient) DoCall(ctx context.Context, in *RequestDoCall, opts ...grpc.CallOption) (*ResponseDoCall, error) {
	out := new(ResponseDoCall)
	err := c.cc.Invoke(ctx, "/dialog.WebRTC/DoCall", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webRTCClient) JoinCall(ctx context.Context, in *RequestJoinCall, opts ...grpc.CallOption) (*ResponseVoid, error) {
	out := new(ResponseVoid)
	err := c.cc.Invoke(ctx, "/dialog.WebRTC/JoinCall", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webRTCClient) RejectCall(ctx context.Context, in *RequestRejectCall, opts ...grpc.CallOption) (*ResponseVoid, error) {
	out := new(ResponseVoid)
	err := c.cc.Invoke(ctx, "/dialog.WebRTC/RejectCall", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webRTCClient) ChangeCallDisplayName(ctx context.Context, in *RequestChangeCallDisplayName, opts ...grpc.CallOption) (*ResponseVoid, error) {
	out := new(ResponseVoid)
	err := c.cc.Invoke(ctx, "/dialog.WebRTC/ChangeCallDisplayName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webRTCClient) DeleteCall(ctx context.Context, in *RequestDeleteCall, opts ...grpc.CallOption) (*ResponseVoid, error) {
	out := new(ResponseVoid)
	err := c.cc.Invoke(ctx, "/dialog.WebRTC/DeleteCall", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WebRTCServer is the server API for WebRTC service.
type WebRTCServer interface {
	GetCallInfo(context.Context, *RequestGetCallInfo) (*ResponseGetCallInfo, error)
	LoadCalls(context.Context, *RequestLoadCalls) (*ResponseLoadCalls, error)
	DoCall(context.Context, *RequestDoCall) (*ResponseDoCall, error)
	JoinCall(context.Context, *RequestJoinCall) (*ResponseVoid, error)
	RejectCall(context.Context, *RequestRejectCall) (*ResponseVoid, error)
	ChangeCallDisplayName(context.Context, *RequestChangeCallDisplayName) (*ResponseVoid, error)
	DeleteCall(context.Context, *RequestDeleteCall) (*ResponseVoid, error)
}

// UnimplementedWebRTCServer can be embedded to have forward compatible implementations.
type UnimplementedWebRTCServer struct {
}

func (*UnimplementedWebRTCServer) GetCallInfo(ctx context.Context, req *RequestGetCallInfo) (*ResponseGetCallInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCallInfo not implemented")
}
func (*UnimplementedWebRTCServer) LoadCalls(ctx context.Context, req *RequestLoadCalls) (*ResponseLoadCalls, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoadCalls not implemented")
}
func (*UnimplementedWebRTCServer) DoCall(ctx context.Context, req *RequestDoCall) (*ResponseDoCall, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DoCall not implemented")
}
func (*UnimplementedWebRTCServer) JoinCall(ctx context.Context, req *RequestJoinCall) (*ResponseVoid, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JoinCall not implemented")
}
func (*UnimplementedWebRTCServer) RejectCall(ctx context.Context, req *RequestRejectCall) (*ResponseVoid, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RejectCall not implemented")
}
func (*UnimplementedWebRTCServer) ChangeCallDisplayName(ctx context.Context, req *RequestChangeCallDisplayName) (*ResponseVoid, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeCallDisplayName not implemented")
}
func (*UnimplementedWebRTCServer) DeleteCall(ctx context.Context, req *RequestDeleteCall) (*ResponseVoid, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCall not implemented")
}

func RegisterWebRTCServer(s *grpc.Server, srv WebRTCServer) {
	s.RegisterService(&_WebRTC_serviceDesc, srv)
}

func _WebRTC_GetCallInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestGetCallInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebRTCServer).GetCallInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dialog.WebRTC/GetCallInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebRTCServer).GetCallInfo(ctx, req.(*RequestGetCallInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebRTC_LoadCalls_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestLoadCalls)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebRTCServer).LoadCalls(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dialog.WebRTC/LoadCalls",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebRTCServer).LoadCalls(ctx, req.(*RequestLoadCalls))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebRTC_DoCall_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestDoCall)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebRTCServer).DoCall(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dialog.WebRTC/DoCall",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebRTCServer).DoCall(ctx, req.(*RequestDoCall))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebRTC_JoinCall_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestJoinCall)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebRTCServer).JoinCall(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dialog.WebRTC/JoinCall",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebRTCServer).JoinCall(ctx, req.(*RequestJoinCall))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebRTC_RejectCall_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestRejectCall)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebRTCServer).RejectCall(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dialog.WebRTC/RejectCall",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebRTCServer).RejectCall(ctx, req.(*RequestRejectCall))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebRTC_ChangeCallDisplayName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestChangeCallDisplayName)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebRTCServer).ChangeCallDisplayName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dialog.WebRTC/ChangeCallDisplayName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebRTCServer).ChangeCallDisplayName(ctx, req.(*RequestChangeCallDisplayName))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebRTC_DeleteCall_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestDeleteCall)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebRTCServer).DeleteCall(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dialog.WebRTC/DeleteCall",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebRTCServer).DeleteCall(ctx, req.(*RequestDeleteCall))
	}
	return interceptor(ctx, in, info, handler)
}

var _WebRTC_serviceDesc = grpc.ServiceDesc{
	ServiceName: "dialog.WebRTC",
	HandlerType: (*WebRTCServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetCallInfo",
			Handler:    _WebRTC_GetCallInfo_Handler,
		},
		{
			MethodName: "LoadCalls",
			Handler:    _WebRTC_LoadCalls_Handler,
		},
		{
			MethodName: "DoCall",
			Handler:    _WebRTC_DoCall_Handler,
		},
		{
			MethodName: "JoinCall",
			Handler:    _WebRTC_JoinCall_Handler,
		},
		{
			MethodName: "RejectCall",
			Handler:    _WebRTC_RejectCall_Handler,
		},
		{
			MethodName: "ChangeCallDisplayName",
			Handler:    _WebRTC_ChangeCallDisplayName_Handler,
		},
		{
			MethodName: "DeleteCall",
			Handler:    _WebRTC_DeleteCall_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "web_rtc.proto",
}

func (m *UpdateIncomingCallDeprecated) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateIncomingCallDeprecated) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateIncomingCallDeprecated) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AttemptIndex != nil {
		{
			size, err := m.AttemptIndex.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintWebRtc(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.CallId != 0 {
		i = encodeVarintWebRtc(dAtA, i, uint64(m.CallId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *UpdateIncomingCall) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateIncomingCall) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateIncomingCall) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Video {
		i--
		if m.Video {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x38
	}
	if m.OutPeer != nil {
		{
			size, err := m.OutPeer.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintWebRtc(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if m.AttemptIndex != nil {
		{
			size, err := m.AttemptIndex.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintWebRtc(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.DisplayName != nil {
		{
			size, err := m.DisplayName.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintWebRtc(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.Peer != nil {
		{
			size, err := m.Peer.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintWebRtc(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.EventBusId) > 0 {
		i -= len(m.EventBusId)
		copy(dAtA[i:], m.EventBusId)
		i = encodeVarintWebRtc(dAtA, i, uint64(len(m.EventBusId)))
		i--
		dAtA[i] = 0x12
	}
	if m.CallId != 0 {
		i = encodeVarintWebRtc(dAtA, i, uint64(m.CallId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *UpdateCallHandled) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateCallHandled) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateCallHandled) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AttemptIndex != nil {
		{
			size, err := m.AttemptIndex.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintWebRtc(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.CallId != 0 {
		i = encodeVarintWebRtc(dAtA, i, uint64(m.CallId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *UpdateCallDisposed) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateCallDisposed) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateCallDisposed) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Reason != 0 {
		i = encodeVarintWebRtc(dAtA, i, uint64(m.Reason))
		i--
		dAtA[i] = 0x18
	}
	if m.AttemptIndex != nil {
		{
			size, err := m.AttemptIndex.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintWebRtc(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.CallId != 0 {
		i = encodeVarintWebRtc(dAtA, i, uint64(m.CallId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *RequestGetCallInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestGetCallInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RequestGetCallInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CallId != 0 {
		i = encodeVarintWebRtc(dAtA, i, uint64(m.CallId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ResponseGetCallInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResponseGetCallInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ResponseGetCallInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.DisplayName != nil {
		{
			size, err := m.DisplayName.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintWebRtc(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if len(m.EventBusId) > 0 {
		i -= len(m.EventBusId)
		copy(dAtA[i:], m.EventBusId)
		i = encodeVarintWebRtc(dAtA, i, uint64(len(m.EventBusId)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Users) > 0 {
		for iNdEx := len(m.Users) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Users[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintWebRtc(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Groups) > 0 {
		for iNdEx := len(m.Groups) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Groups[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintWebRtc(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Peer != nil {
		{
			size, err := m.Peer.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintWebRtc(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CallLogEntry) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CallLogEntry) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CallLogEntry) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Rejected != nil {
		{
			size, err := m.Rejected.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintWebRtc(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	if m.DisplayName != nil {
		{
			size, err := m.DisplayName.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintWebRtc(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	if m.Finished != nil {
		{
			size, err := m.Finished.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintWebRtc(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if m.Answered != nil {
		{
			size, err := m.Answered.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintWebRtc(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if m.Duration != nil {
		{
			size, err := m.Duration.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintWebRtc(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.Recipient != nil {
		{
			size, err := m.Recipient.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintWebRtc(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.Initiator != nil {
		{
			size, err := m.Initiator.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintWebRtc(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.CallDate != 0 {
		i = encodeVarintWebRtc(dAtA, i, uint64(m.CallDate))
		i--
		dAtA[i] = 0x10
	}
	if m.Id != 0 {
		i = encodeVarintWebRtc(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *RequestLoadCalls) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestLoadCalls) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RequestLoadCalls) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Limit != 0 {
		i = encodeVarintWebRtc(dAtA, i, uint64(m.Limit))
		i--
		dAtA[i] = 0x10
	}
	if m.NextOffset != nil {
		{
			size, err := m.NextOffset.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintWebRtc(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ResponseLoadCalls) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResponseLoadCalls) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ResponseLoadCalls) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.NextOffset != nil {
		{
			size, err := m.NextOffset.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintWebRtc(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if len(m.Groups) > 0 {
		for iNdEx := len(m.Groups) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Groups[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintWebRtc(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Users) > 0 {
		for iNdEx := len(m.Users) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Users[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintWebRtc(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Calls) > 0 {
		for iNdEx := len(m.Calls) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Calls[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintWebRtc(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *RequestDoCall) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestDoCall) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RequestDoCall) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Timeout != 0 {
		i = encodeVarintWebRtc(dAtA, i, uint64(m.Timeout))
		i--
		dAtA[i] = 0x10
	}
	if m.Peer != nil {
		{
			size, err := m.Peer.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintWebRtc(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ResponseDoCall) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResponseDoCall) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ResponseDoCall) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.DeviceId != 0 {
		i = encodeVarintWebRtc(dAtA, i, uint64(m.DeviceId))
		i--
		dAtA[i] = 0x18
	}
	if len(m.EventBusId) > 0 {
		i -= len(m.EventBusId)
		copy(dAtA[i:], m.EventBusId)
		i = encodeVarintWebRtc(dAtA, i, uint64(len(m.EventBusId)))
		i--
		dAtA[i] = 0x12
	}
	if m.CallId != 0 {
		i = encodeVarintWebRtc(dAtA, i, uint64(m.CallId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *RequestJoinCall) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestJoinCall) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RequestJoinCall) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CallId != 0 {
		i = encodeVarintWebRtc(dAtA, i, uint64(m.CallId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *RequestRejectCall) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestRejectCall) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RequestRejectCall) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Reason != 0 {
		i = encodeVarintWebRtc(dAtA, i, uint64(m.Reason))
		i--
		dAtA[i] = 0x10
	}
	if m.CallId != 0 {
		i = encodeVarintWebRtc(dAtA, i, uint64(m.CallId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *RequestDeleteCall) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestDeleteCall) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RequestDeleteCall) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CallId != 0 {
		i = encodeVarintWebRtc(dAtA, i, uint64(m.CallId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *RequestChangeCallDisplayName) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestChangeCallDisplayName) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RequestChangeCallDisplayName) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.DisplayName != nil {
		{
			size, err := m.DisplayName.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintWebRtc(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.CallId != 0 {
		i = encodeVarintWebRtc(dAtA, i, uint64(m.CallId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ICEServer) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ICEServer) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ICEServer) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Credential != nil {
		{
			size, err := m.Credential.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintWebRtc(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Username != nil {
		{
			size, err := m.Username.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintWebRtc(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Url) > 0 {
		i -= len(m.Url)
		copy(dAtA[i:], m.Url)
		i = encodeVarintWebRtc(dAtA, i, uint64(len(m.Url)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ICECandidate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ICECandidate) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ICECandidate) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Sdp) > 0 {
		i -= len(m.Sdp)
		copy(dAtA[i:], m.Sdp)
		i = encodeVarintWebRtc(dAtA, i, uint64(len(m.Sdp)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.SdpMid) > 0 {
		i -= len(m.SdpMid)
		copy(dAtA[i:], m.SdpMid)
		i = encodeVarintWebRtc(dAtA, i, uint64(len(m.SdpMid)))
		i--
		dAtA[i] = 0x12
	}
	if m.SdpMLineIndex != 0 {
		i = encodeVarintWebRtc(dAtA, i, uint64(m.SdpMLineIndex))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *WebRTCSignaling) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WebRTCSignaling) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WebRTCSignaling) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Body != nil {
		{
			size := m.Body.Size()
			i -= size
			if _, err := m.Body.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *WebRTCSignaling_AdvertiseSelf) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WebRTCSignaling_AdvertiseSelf) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.AdvertiseSelf != nil {
		{
			size, err := m.AdvertiseSelf.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintWebRtc(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}
func (m *WebRTCSignaling_AdvertiseMaster) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WebRTCSignaling_AdvertiseMaster) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.AdvertiseMaster != nil {
		{
			size, err := m.AdvertiseMaster.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintWebRtc(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *WebRTCSignaling_AdvertisePeer) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WebRTCSignaling_AdvertisePeer) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.AdvertisePeer != nil {
		{
			size, err := m.AdvertisePeer.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintWebRtc(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *WebRTCSignaling_Candidate) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WebRTCSignaling_Candidate) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Candidate != nil {
		{
			size, err := m.Candidate.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintWebRtc(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *WebRTCSignaling_GotICECandidate) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WebRTCSignaling_GotICECandidate) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.GotICECandidate != nil {
		{
			size, err := m.GotICECandidate.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintWebRtc(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	return len(dAtA) - i, nil
}
func (m *WebRTCSignaling_RemovedICECandidates) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WebRTCSignaling_RemovedICECandidates) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.RemovedICECandidates != nil {
		{
			size, err := m.RemovedICECandidates.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintWebRtc(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	return len(dAtA) - i, nil
}
func (m *WebRTCSignaling_Offer) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WebRTCSignaling_Offer) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Offer != nil {
		{
			size, err := m.Offer.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintWebRtc(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	return len(dAtA) - i, nil
}
func (m *WebRTCSignaling_Answer) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WebRTCSignaling_Answer) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Answer != nil {
		{
			size, err := m.Answer.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintWebRtc(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	return len(dAtA) - i, nil
}
func (m *WebRTCSignaling_NeedOffer) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WebRTCSignaling_NeedOffer) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.NeedOffer != nil {
		{
			size, err := m.NeedOffer.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintWebRtc(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	return len(dAtA) - i, nil
}
func (m *WebRTCSignaling_NegotinationSuccessful) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WebRTCSignaling_NegotinationSuccessful) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.NegotinationSuccessful != nil {
		{
			size, err := m.NegotinationSuccessful.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintWebRtc(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x52
	}
	return len(dAtA) - i, nil
}
func (m *WebRTCSignaling_EnableConnection) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WebRTCSignaling_EnableConnection) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.EnableConnection != nil {
		{
			size, err := m.EnableConnection.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintWebRtc(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5a
	}
	return len(dAtA) - i, nil
}
func (m *WebRTCSignaling_OnRenegotiationNeeded) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WebRTCSignaling_OnRenegotiationNeeded) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.OnRenegotiationNeeded != nil {
		{
			size, err := m.OnRenegotiationNeeded.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintWebRtc(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x62
	}
	return len(dAtA) - i, nil
}
func (m *WebRTCSignaling_CloseSession) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WebRTCSignaling_CloseSession) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.CloseSession != nil {
		{
			size, err := m.CloseSession.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintWebRtc(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6a
	}
	return len(dAtA) - i, nil
}
func (m *WebRTCSignaling_NeedDisconnect) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WebRTCSignaling_NeedDisconnect) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.NeedDisconnect != nil {
		{
			size, err := m.NeedDisconnect.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintWebRtc(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x72
	}
	return len(dAtA) - i, nil
}
func (m *WebRTCSignaling_DTMF) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WebRTCSignaling_DTMF) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DTMF != nil {
		{
			size, err := m.DTMF.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintWebRtc(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x7a
	}
	return len(dAtA) - i, nil
}
func (m *WebRTCSignaling_CallStats) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WebRTCSignaling_CallStats) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.CallStats != nil {
		{
			size, err := m.CallStats.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintWebRtc(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x82
	}
	return len(dAtA) - i, nil
}
func (m *WebRTCSignaling_CallNameChanged) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WebRTCSignaling_CallNameChanged) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.CallNameChanged != nil {
		{
			size, err := m.CallNameChanged.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintWebRtc(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x8a
	}
	return len(dAtA) - i, nil
}
func (m *AdvertiseSelf) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AdvertiseSelf) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AdvertiseSelf) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.PeerSettings != nil {
		{
			size, err := m.PeerSettings.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintWebRtc(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AdvertiseMaster) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AdvertiseMaster) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AdvertiseMaster) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CallName != nil {
		{
			size, err := m.CallName.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintWebRtc(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.CallApiVersion != nil {
		{
			size, err := m.CallApiVersion.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintWebRtc(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Server) > 0 {
		for iNdEx := len(m.Server) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Server[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintWebRtc(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *AdvertisePeer) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AdvertisePeer) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AdvertisePeer) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.IceServers) > 0 {
		for iNdEx := len(m.IceServers) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.IceServers[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintWebRtc(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.PeerSettings != nil {
		{
			size, err := m.PeerSettings.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintWebRtc(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.DeviceId != 0 {
		i = encodeVarintWebRtc(dAtA, i, uint64(m.DeviceId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Candidate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Candidate) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Candidate) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Sdp) > 0 {
		i -= len(m.Sdp)
		copy(dAtA[i:], m.Sdp)
		i = encodeVarintWebRtc(dAtA, i, uint64(len(m.Sdp)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintWebRtc(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Index != 0 {
		i = encodeVarintWebRtc(dAtA, i, uint64(m.Index))
		i--
		dAtA[i] = 0x10
	}
	if m.SessionId != 0 {
		i = encodeVarintWebRtc(dAtA, i, uint64(m.SessionId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GotICECandidate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GotICECandidate) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GotICECandidate) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Candidate != nil {
		{
			size, err := m.Candidate.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintWebRtc(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.SessionId != 0 {
		i = encodeVarintWebRtc(dAtA, i, uint64(m.SessionId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *RemovedICECandidates) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RemovedICECandidates) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RemovedICECandidates) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Candidate) > 0 {
		for iNdEx := len(m.Candidate) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Candidate[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintWebRtc(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.SessionId != 0 {
		i = encodeVarintWebRtc(dAtA, i, uint64(m.SessionId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Offer) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Offer) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Offer) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.PeerSettings != nil {
		{
			size, err := m.PeerSettings.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintWebRtc(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Sdp) > 0 {
		i -= len(m.Sdp)
		copy(dAtA[i:], m.Sdp)
		i = encodeVarintWebRtc(dAtA, i, uint64(len(m.Sdp)))
		i--
		dAtA[i] = 0x12
	}
	if m.SessionId != 0 {
		i = encodeVarintWebRtc(dAtA, i, uint64(m.SessionId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Answer) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Answer) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Answer) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Sdp) > 0 {
		i -= len(m.Sdp)
		copy(dAtA[i:], m.Sdp)
		i = encodeVarintWebRtc(dAtA, i, uint64(len(m.Sdp)))
		i--
		dAtA[i] = 0x12
	}
	if m.SessionId != 0 {
		i = encodeVarintWebRtc(dAtA, i, uint64(m.SessionId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *NeedOffer) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NeedOffer) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NeedOffer) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.PeerSettings != nil {
		{
			size, err := m.PeerSettings.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintWebRtc(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.SessionId != 0 {
		i = encodeVarintWebRtc(dAtA, i, uint64(m.SessionId))
		i--
		dAtA[i] = 0x10
	}
	if m.Device != 0 {
		i = encodeVarintWebRtc(dAtA, i, uint64(m.Device))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *NegotinationSuccessful) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NegotinationSuccessful) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NegotinationSuccessful) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SessionId != 0 {
		i = encodeVarintWebRtc(dAtA, i, uint64(m.SessionId))
		i--
		dAtA[i] = 0x10
	}
	if m.Device != 0 {
		i = encodeVarintWebRtc(dAtA, i, uint64(m.Device))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *EnableConnection) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EnableConnection) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EnableConnection) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SessionId != 0 {
		i = encodeVarintWebRtc(dAtA, i, uint64(m.SessionId))
		i--
		dAtA[i] = 0x10
	}
	if m.Device != 0 {
		i = encodeVarintWebRtc(dAtA, i, uint64(m.Device))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *OnRenegotiationNeeded) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OnRenegotiationNeeded) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OnRenegotiationNeeded) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SessionId != 0 {
		i = encodeVarintWebRtc(dAtA, i, uint64(m.SessionId))
		i--
		dAtA[i] = 0x10
	}
	if m.Device != 0 {
		i = encodeVarintWebRtc(dAtA, i, uint64(m.Device))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CloseSession) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CloseSession) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CloseSession) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SessionId != 0 {
		i = encodeVarintWebRtc(dAtA, i, uint64(m.SessionId))
		i--
		dAtA[i] = 0x10
	}
	if m.Device != 0 {
		i = encodeVarintWebRtc(dAtA, i, uint64(m.Device))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *NeedDisconnect) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NeedDisconnect) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NeedDisconnect) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Device != 0 {
		i = encodeVarintWebRtc(dAtA, i, uint64(m.Device))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *DTMF) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DTMF) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DTMF) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Duration != 0 {
		i = encodeVarintWebRtc(dAtA, i, uint64(m.Duration))
		i--
		dAtA[i] = 0x10
	}
	if m.Code != 0 {
		i = encodeVarintWebRtc(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CallStats) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CallStats) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CallStats) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Value) > 0 {
		i -= len(m.Value)
		copy(dAtA[i:], m.Value)
		i = encodeVarintWebRtc(dAtA, i, uint64(len(m.Value)))
		i--
		dAtA[i] = 0x12
	}
	if m.Type != 0 {
		i = encodeVarintWebRtc(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CallNameChanged) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CallNameChanged) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CallNameChanged) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CallName != nil {
		{
			size, err := m.CallName.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintWebRtc(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ActiveCall) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ActiveCall) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ActiveCall) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.CallMembers) > 0 {
		for iNdEx := len(m.CallMembers) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.CallMembers[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintWebRtc(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.Peer != nil {
		{
			size, err := m.Peer.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintWebRtc(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.CallId != 0 {
		i = encodeVarintWebRtc(dAtA, i, uint64(m.CallId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CallMemberStateHolder) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CallMemberStateHolder) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CallMemberStateHolder) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.FallbackIsEnded != nil {
		{
			size, err := m.FallbackIsEnded.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintWebRtc(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if m.FallbackIsRingingReached != nil {
		{
			size, err := m.FallbackIsRingingReached.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintWebRtc(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.FallbackIsConnecting != nil {
		{
			size, err := m.FallbackIsConnecting.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintWebRtc(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.FallbackIsConnected != nil {
		{
			size, err := m.FallbackIsConnected.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintWebRtc(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.FallbackIsRinging != nil {
		{
			size, err := m.FallbackIsRinging.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintWebRtc(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.State != 0 {
		i = encodeVarintWebRtc(dAtA, i, uint64(m.State))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CallMember) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CallMember) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CallMember) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.State != nil {
		{
			size, err := m.State.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintWebRtc(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.UserId != 0 {
		i = encodeVarintWebRtc(dAtA, i, uint64(m.UserId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *PeerSettings) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PeerSettings) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PeerSettings) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ClientInfo != nil {
		{
			size, err := m.ClientInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintWebRtc(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if m.WaitForCandidates != nil {
		{
			size, err := m.WaitForCandidates.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintWebRtc(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if m.SendsOffer != nil {
		{
			size, err := m.SendsOffer.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintWebRtc(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.CanPreConnect != nil {
		{
			size, err := m.CanPreConnect.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintWebRtc(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}

func encodeVarintWebRtc(dAtA []byte, offset int, v uint64) int {
	offset -= sovWebRtc(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *UpdateIncomingCallDeprecated) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CallId != 0 {
		n += 1 + sovWebRtc(uint64(m.CallId))
	}
	if m.AttemptIndex != nil {
		l = m.AttemptIndex.Size()
		n += 1 + l + sovWebRtc(uint64(l))
	}
	return n
}

func (m *UpdateIncomingCall) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CallId != 0 {
		n += 1 + sovWebRtc(uint64(m.CallId))
	}
	l = len(m.EventBusId)
	if l > 0 {
		n += 1 + l + sovWebRtc(uint64(l))
	}
	if m.Peer != nil {
		l = m.Peer.Size()
		n += 1 + l + sovWebRtc(uint64(l))
	}
	if m.DisplayName != nil {
		l = m.DisplayName.Size()
		n += 1 + l + sovWebRtc(uint64(l))
	}
	if m.AttemptIndex != nil {
		l = m.AttemptIndex.Size()
		n += 1 + l + sovWebRtc(uint64(l))
	}
	if m.OutPeer != nil {
		l = m.OutPeer.Size()
		n += 1 + l + sovWebRtc(uint64(l))
	}
	if m.Video {
		n += 2
	}
	return n
}

func (m *UpdateCallHandled) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CallId != 0 {
		n += 1 + sovWebRtc(uint64(m.CallId))
	}
	if m.AttemptIndex != nil {
		l = m.AttemptIndex.Size()
		n += 1 + l + sovWebRtc(uint64(l))
	}
	return n
}

func (m *UpdateCallDisposed) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CallId != 0 {
		n += 1 + sovWebRtc(uint64(m.CallId))
	}
	if m.AttemptIndex != nil {
		l = m.AttemptIndex.Size()
		n += 1 + l + sovWebRtc(uint64(l))
	}
	if m.Reason != 0 {
		n += 1 + sovWebRtc(uint64(m.Reason))
	}
	return n
}

func (m *RequestGetCallInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CallId != 0 {
		n += 1 + sovWebRtc(uint64(m.CallId))
	}
	return n
}

func (m *ResponseGetCallInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Peer != nil {
		l = m.Peer.Size()
		n += 1 + l + sovWebRtc(uint64(l))
	}
	if len(m.Groups) > 0 {
		for _, e := range m.Groups {
			l = e.Size()
			n += 1 + l + sovWebRtc(uint64(l))
		}
	}
	if len(m.Users) > 0 {
		for _, e := range m.Users {
			l = e.Size()
			n += 1 + l + sovWebRtc(uint64(l))
		}
	}
	l = len(m.EventBusId)
	if l > 0 {
		n += 1 + l + sovWebRtc(uint64(l))
	}
	if m.DisplayName != nil {
		l = m.DisplayName.Size()
		n += 1 + l + sovWebRtc(uint64(l))
	}
	return n
}

func (m *CallLogEntry) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovWebRtc(uint64(m.Id))
	}
	if m.CallDate != 0 {
		n += 1 + sovWebRtc(uint64(m.CallDate))
	}
	if m.Initiator != nil {
		l = m.Initiator.Size()
		n += 1 + l + sovWebRtc(uint64(l))
	}
	if m.Recipient != nil {
		l = m.Recipient.Size()
		n += 1 + l + sovWebRtc(uint64(l))
	}
	if m.Duration != nil {
		l = m.Duration.Size()
		n += 1 + l + sovWebRtc(uint64(l))
	}
	if m.Answered != nil {
		l = m.Answered.Size()
		n += 1 + l + sovWebRtc(uint64(l))
	}
	if m.Finished != nil {
		l = m.Finished.Size()
		n += 1 + l + sovWebRtc(uint64(l))
	}
	if m.DisplayName != nil {
		l = m.DisplayName.Size()
		n += 1 + l + sovWebRtc(uint64(l))
	}
	if m.Rejected != nil {
		l = m.Rejected.Size()
		n += 1 + l + sovWebRtc(uint64(l))
	}
	return n
}

func (m *RequestLoadCalls) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NextOffset != nil {
		l = m.NextOffset.Size()
		n += 1 + l + sovWebRtc(uint64(l))
	}
	if m.Limit != 0 {
		n += 1 + sovWebRtc(uint64(m.Limit))
	}
	return n
}

func (m *ResponseLoadCalls) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Calls) > 0 {
		for _, e := range m.Calls {
			l = e.Size()
			n += 1 + l + sovWebRtc(uint64(l))
		}
	}
	if len(m.Users) > 0 {
		for _, e := range m.Users {
			l = e.Size()
			n += 1 + l + sovWebRtc(uint64(l))
		}
	}
	if len(m.Groups) > 0 {
		for _, e := range m.Groups {
			l = e.Size()
			n += 1 + l + sovWebRtc(uint64(l))
		}
	}
	if m.NextOffset != nil {
		l = m.NextOffset.Size()
		n += 1 + l + sovWebRtc(uint64(l))
	}
	return n
}

func (m *RequestDoCall) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Peer != nil {
		l = m.Peer.Size()
		n += 1 + l + sovWebRtc(uint64(l))
	}
	if m.Timeout != 0 {
		n += 1 + sovWebRtc(uint64(m.Timeout))
	}
	return n
}

func (m *ResponseDoCall) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CallId != 0 {
		n += 1 + sovWebRtc(uint64(m.CallId))
	}
	l = len(m.EventBusId)
	if l > 0 {
		n += 1 + l + sovWebRtc(uint64(l))
	}
	if m.DeviceId != 0 {
		n += 1 + sovWebRtc(uint64(m.DeviceId))
	}
	return n
}

func (m *RequestJoinCall) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CallId != 0 {
		n += 1 + sovWebRtc(uint64(m.CallId))
	}
	return n
}

func (m *RequestRejectCall) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CallId != 0 {
		n += 1 + sovWebRtc(uint64(m.CallId))
	}
	if m.Reason != 0 {
		n += 1 + sovWebRtc(uint64(m.Reason))
	}
	return n
}

func (m *RequestDeleteCall) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CallId != 0 {
		n += 1 + sovWebRtc(uint64(m.CallId))
	}
	return n
}

func (m *RequestChangeCallDisplayName) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CallId != 0 {
		n += 1 + sovWebRtc(uint64(m.CallId))
	}
	if m.DisplayName != nil {
		l = m.DisplayName.Size()
		n += 1 + l + sovWebRtc(uint64(l))
	}
	return n
}

func (m *ICEServer) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Url)
	if l > 0 {
		n += 1 + l + sovWebRtc(uint64(l))
	}
	if m.Username != nil {
		l = m.Username.Size()
		n += 1 + l + sovWebRtc(uint64(l))
	}
	if m.Credential != nil {
		l = m.Credential.Size()
		n += 1 + l + sovWebRtc(uint64(l))
	}
	return n
}

func (m *ICECandidate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SdpMLineIndex != 0 {
		n += 1 + sovWebRtc(uint64(m.SdpMLineIndex))
	}
	l = len(m.SdpMid)
	if l > 0 {
		n += 1 + l + sovWebRtc(uint64(l))
	}
	l = len(m.Sdp)
	if l > 0 {
		n += 1 + l + sovWebRtc(uint64(l))
	}
	return n
}

func (m *WebRTCSignaling) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Body != nil {
		n += m.Body.Size()
	}
	return n
}

func (m *WebRTCSignaling_AdvertiseSelf) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AdvertiseSelf != nil {
		l = m.AdvertiseSelf.Size()
		n += 1 + l + sovWebRtc(uint64(l))
	}
	return n
}
func (m *WebRTCSignaling_AdvertiseMaster) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AdvertiseMaster != nil {
		l = m.AdvertiseMaster.Size()
		n += 1 + l + sovWebRtc(uint64(l))
	}
	return n
}
func (m *WebRTCSignaling_AdvertisePeer) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AdvertisePeer != nil {
		l = m.AdvertisePeer.Size()
		n += 1 + l + sovWebRtc(uint64(l))
	}
	return n
}
func (m *WebRTCSignaling_Candidate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Candidate != nil {
		l = m.Candidate.Size()
		n += 1 + l + sovWebRtc(uint64(l))
	}
	return n
}
func (m *WebRTCSignaling_GotICECandidate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.GotICECandidate != nil {
		l = m.GotICECandidate.Size()
		n += 1 + l + sovWebRtc(uint64(l))
	}
	return n
}
func (m *WebRTCSignaling_RemovedICECandidates) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RemovedICECandidates != nil {
		l = m.RemovedICECandidates.Size()
		n += 1 + l + sovWebRtc(uint64(l))
	}
	return n
}
func (m *WebRTCSignaling_Offer) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Offer != nil {
		l = m.Offer.Size()
		n += 1 + l + sovWebRtc(uint64(l))
	}
	return n
}
func (m *WebRTCSignaling_Answer) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Answer != nil {
		l = m.Answer.Size()
		n += 1 + l + sovWebRtc(uint64(l))
	}
	return n
}
func (m *WebRTCSignaling_NeedOffer) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NeedOffer != nil {
		l = m.NeedOffer.Size()
		n += 1 + l + sovWebRtc(uint64(l))
	}
	return n
}
func (m *WebRTCSignaling_NegotinationSuccessful) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NegotinationSuccessful != nil {
		l = m.NegotinationSuccessful.Size()
		n += 1 + l + sovWebRtc(uint64(l))
	}
	return n
}
func (m *WebRTCSignaling_EnableConnection) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EnableConnection != nil {
		l = m.EnableConnection.Size()
		n += 1 + l + sovWebRtc(uint64(l))
	}
	return n
}
func (m *WebRTCSignaling_OnRenegotiationNeeded) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.OnRenegotiationNeeded != nil {
		l = m.OnRenegotiationNeeded.Size()
		n += 1 + l + sovWebRtc(uint64(l))
	}
	return n
}
func (m *WebRTCSignaling_CloseSession) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CloseSession != nil {
		l = m.CloseSession.Size()
		n += 1 + l + sovWebRtc(uint64(l))
	}
	return n
}
func (m *WebRTCSignaling_NeedDisconnect) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NeedDisconnect != nil {
		l = m.NeedDisconnect.Size()
		n += 1 + l + sovWebRtc(uint64(l))
	}
	return n
}
func (m *WebRTCSignaling_DTMF) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DTMF != nil {
		l = m.DTMF.Size()
		n += 1 + l + sovWebRtc(uint64(l))
	}
	return n
}
func (m *WebRTCSignaling_CallStats) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CallStats != nil {
		l = m.CallStats.Size()
		n += 2 + l + sovWebRtc(uint64(l))
	}
	return n
}
func (m *WebRTCSignaling_CallNameChanged) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CallNameChanged != nil {
		l = m.CallNameChanged.Size()
		n += 2 + l + sovWebRtc(uint64(l))
	}
	return n
}
func (m *AdvertiseSelf) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PeerSettings != nil {
		l = m.PeerSettings.Size()
		n += 1 + l + sovWebRtc(uint64(l))
	}
	return n
}

func (m *AdvertiseMaster) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Server) > 0 {
		for _, e := range m.Server {
			l = e.Size()
			n += 1 + l + sovWebRtc(uint64(l))
		}
	}
	if m.CallApiVersion != nil {
		l = m.CallApiVersion.Size()
		n += 1 + l + sovWebRtc(uint64(l))
	}
	if m.CallName != nil {
		l = m.CallName.Size()
		n += 1 + l + sovWebRtc(uint64(l))
	}
	return n
}

func (m *AdvertisePeer) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DeviceId != 0 {
		n += 1 + sovWebRtc(uint64(m.DeviceId))
	}
	if m.PeerSettings != nil {
		l = m.PeerSettings.Size()
		n += 1 + l + sovWebRtc(uint64(l))
	}
	if len(m.IceServers) > 0 {
		for _, e := range m.IceServers {
			l = e.Size()
			n += 1 + l + sovWebRtc(uint64(l))
		}
	}
	return n
}

func (m *Candidate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SessionId != 0 {
		n += 1 + sovWebRtc(uint64(m.SessionId))
	}
	if m.Index != 0 {
		n += 1 + sovWebRtc(uint64(m.Index))
	}
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovWebRtc(uint64(l))
	}
	l = len(m.Sdp)
	if l > 0 {
		n += 1 + l + sovWebRtc(uint64(l))
	}
	return n
}

func (m *GotICECandidate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SessionId != 0 {
		n += 1 + sovWebRtc(uint64(m.SessionId))
	}
	if m.Candidate != nil {
		l = m.Candidate.Size()
		n += 1 + l + sovWebRtc(uint64(l))
	}
	return n
}

func (m *RemovedICECandidates) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SessionId != 0 {
		n += 1 + sovWebRtc(uint64(m.SessionId))
	}
	if len(m.Candidate) > 0 {
		for _, e := range m.Candidate {
			l = e.Size()
			n += 1 + l + sovWebRtc(uint64(l))
		}
	}
	return n
}

func (m *Offer) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SessionId != 0 {
		n += 1 + sovWebRtc(uint64(m.SessionId))
	}
	l = len(m.Sdp)
	if l > 0 {
		n += 1 + l + sovWebRtc(uint64(l))
	}
	if m.PeerSettings != nil {
		l = m.PeerSettings.Size()
		n += 1 + l + sovWebRtc(uint64(l))
	}
	return n
}

func (m *Answer) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SessionId != 0 {
		n += 1 + sovWebRtc(uint64(m.SessionId))
	}
	l = len(m.Sdp)
	if l > 0 {
		n += 1 + l + sovWebRtc(uint64(l))
	}
	return n
}

func (m *NeedOffer) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Device != 0 {
		n += 1 + sovWebRtc(uint64(m.Device))
	}
	if m.SessionId != 0 {
		n += 1 + sovWebRtc(uint64(m.SessionId))
	}
	if m.PeerSettings != nil {
		l = m.PeerSettings.Size()
		n += 1 + l + sovWebRtc(uint64(l))
	}
	return n
}

func (m *NegotinationSuccessful) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Device != 0 {
		n += 1 + sovWebRtc(uint64(m.Device))
	}
	if m.SessionId != 0 {
		n += 1 + sovWebRtc(uint64(m.SessionId))
	}
	return n
}

func (m *EnableConnection) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Device != 0 {
		n += 1 + sovWebRtc(uint64(m.Device))
	}
	if m.SessionId != 0 {
		n += 1 + sovWebRtc(uint64(m.SessionId))
	}
	return n
}

func (m *OnRenegotiationNeeded) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Device != 0 {
		n += 1 + sovWebRtc(uint64(m.Device))
	}
	if m.SessionId != 0 {
		n += 1 + sovWebRtc(uint64(m.SessionId))
	}
	return n
}

func (m *CloseSession) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Device != 0 {
		n += 1 + sovWebRtc(uint64(m.Device))
	}
	if m.SessionId != 0 {
		n += 1 + sovWebRtc(uint64(m.SessionId))
	}
	return n
}

func (m *NeedDisconnect) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Device != 0 {
		n += 1 + sovWebRtc(uint64(m.Device))
	}
	return n
}

func (m *DTMF) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovWebRtc(uint64(m.Code))
	}
	if m.Duration != 0 {
		n += 1 + sovWebRtc(uint64(m.Duration))
	}
	return n
}

func (m *CallStats) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovWebRtc(uint64(m.Type))
	}
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovWebRtc(uint64(l))
	}
	return n
}

func (m *CallNameChanged) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CallName != nil {
		l = m.CallName.Size()
		n += 1 + l + sovWebRtc(uint64(l))
	}
	return n
}

func (m *ActiveCall) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CallId != 0 {
		n += 1 + sovWebRtc(uint64(m.CallId))
	}
	if m.Peer != nil {
		l = m.Peer.Size()
		n += 1 + l + sovWebRtc(uint64(l))
	}
	if len(m.CallMembers) > 0 {
		for _, e := range m.CallMembers {
			l = e.Size()
			n += 1 + l + sovWebRtc(uint64(l))
		}
	}
	return n
}

func (m *CallMemberStateHolder) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.State != 0 {
		n += 1 + sovWebRtc(uint64(m.State))
	}
	if m.FallbackIsRinging != nil {
		l = m.FallbackIsRinging.Size()
		n += 1 + l + sovWebRtc(uint64(l))
	}
	if m.FallbackIsConnected != nil {
		l = m.FallbackIsConnected.Size()
		n += 1 + l + sovWebRtc(uint64(l))
	}
	if m.FallbackIsConnecting != nil {
		l = m.FallbackIsConnecting.Size()
		n += 1 + l + sovWebRtc(uint64(l))
	}
	if m.FallbackIsRingingReached != nil {
		l = m.FallbackIsRingingReached.Size()
		n += 1 + l + sovWebRtc(uint64(l))
	}
	if m.FallbackIsEnded != nil {
		l = m.FallbackIsEnded.Size()
		n += 1 + l + sovWebRtc(uint64(l))
	}
	return n
}

func (m *CallMember) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovWebRtc(uint64(m.UserId))
	}
	if m.State != nil {
		l = m.State.Size()
		n += 1 + l + sovWebRtc(uint64(l))
	}
	return n
}

func (m *PeerSettings) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CanPreConnect != nil {
		l = m.CanPreConnect.Size()
		n += 1 + l + sovWebRtc(uint64(l))
	}
	if m.SendsOffer != nil {
		l = m.SendsOffer.Size()
		n += 1 + l + sovWebRtc(uint64(l))
	}
	if m.WaitForCandidates != nil {
		l = m.WaitForCandidates.Size()
		n += 1 + l + sovWebRtc(uint64(l))
	}
	if m.ClientInfo != nil {
		l = m.ClientInfo.Size()
		n += 1 + l + sovWebRtc(uint64(l))
	}
	return n
}

func sovWebRtc(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozWebRtc(x uint64) (n int) {
	return sovWebRtc(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *UpdateIncomingCallDeprecated) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateIncomingCallDeprecated{`,
		`CallId:` + fmt.Sprintf("%v", this.CallId) + `,`,
		`AttemptIndex:` + strings.Replace(fmt.Sprintf("%v", this.AttemptIndex), "Int32Value", "types.Int32Value", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateIncomingCall) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateIncomingCall{`,
		`CallId:` + fmt.Sprintf("%v", this.CallId) + `,`,
		`EventBusId:` + fmt.Sprintf("%v", this.EventBusId) + `,`,
		`Peer:` + strings.Replace(fmt.Sprintf("%v", this.Peer), "Peer", "Peer", 1) + `,`,
		`DisplayName:` + strings.Replace(fmt.Sprintf("%v", this.DisplayName), "StringValue", "types.StringValue", 1) + `,`,
		`AttemptIndex:` + strings.Replace(fmt.Sprintf("%v", this.AttemptIndex), "Int32Value", "types.Int32Value", 1) + `,`,
		`OutPeer:` + strings.Replace(fmt.Sprintf("%v", this.OutPeer), "OutPeer", "OutPeer", 1) + `,`,
		`Video:` + fmt.Sprintf("%v", this.Video) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateCallHandled) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateCallHandled{`,
		`CallId:` + fmt.Sprintf("%v", this.CallId) + `,`,
		`AttemptIndex:` + strings.Replace(fmt.Sprintf("%v", this.AttemptIndex), "Int32Value", "types.Int32Value", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateCallDisposed) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateCallDisposed{`,
		`CallId:` + fmt.Sprintf("%v", this.CallId) + `,`,
		`AttemptIndex:` + strings.Replace(fmt.Sprintf("%v", this.AttemptIndex), "Int32Value", "types.Int32Value", 1) + `,`,
		`Reason:` + fmt.Sprintf("%v", this.Reason) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RequestGetCallInfo) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RequestGetCallInfo{`,
		`CallId:` + fmt.Sprintf("%v", this.CallId) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ResponseGetCallInfo) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForGroups := "[]*GroupOutPeer{"
	for _, f := range this.Groups {
		repeatedStringForGroups += strings.Replace(fmt.Sprintf("%v", f), "GroupOutPeer", "GroupOutPeer", 1) + ","
	}
	repeatedStringForGroups += "}"
	repeatedStringForUsers := "[]*UserOutPeer{"
	for _, f := range this.Users {
		repeatedStringForUsers += strings.Replace(fmt.Sprintf("%v", f), "UserOutPeer", "UserOutPeer", 1) + ","
	}
	repeatedStringForUsers += "}"
	s := strings.Join([]string{`&ResponseGetCallInfo{`,
		`Peer:` + strings.Replace(fmt.Sprintf("%v", this.Peer), "Peer", "Peer", 1) + `,`,
		`Groups:` + repeatedStringForGroups + `,`,
		`Users:` + repeatedStringForUsers + `,`,
		`EventBusId:` + fmt.Sprintf("%v", this.EventBusId) + `,`,
		`DisplayName:` + strings.Replace(fmt.Sprintf("%v", this.DisplayName), "StringValue", "types.StringValue", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CallLogEntry) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CallLogEntry{`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`CallDate:` + fmt.Sprintf("%v", this.CallDate) + `,`,
		`Initiator:` + strings.Replace(fmt.Sprintf("%v", this.Initiator), "OutPeer", "OutPeer", 1) + `,`,
		`Recipient:` + strings.Replace(fmt.Sprintf("%v", this.Recipient), "OutPeer", "OutPeer", 1) + `,`,
		`Duration:` + strings.Replace(fmt.Sprintf("%v", this.Duration), "Int64Value", "types.Int64Value", 1) + `,`,
		`Answered:` + strings.Replace(fmt.Sprintf("%v", this.Answered), "BoolValue", "types.BoolValue", 1) + `,`,
		`Finished:` + strings.Replace(fmt.Sprintf("%v", this.Finished), "BoolValue", "types.BoolValue", 1) + `,`,
		`DisplayName:` + strings.Replace(fmt.Sprintf("%v", this.DisplayName), "StringValue", "types.StringValue", 1) + `,`,
		`Rejected:` + strings.Replace(fmt.Sprintf("%v", this.Rejected), "BoolValue", "types.BoolValue", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RequestLoadCalls) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RequestLoadCalls{`,
		`NextOffset:` + strings.Replace(fmt.Sprintf("%v", this.NextOffset), "BytesValue", "types.BytesValue", 1) + `,`,
		`Limit:` + fmt.Sprintf("%v", this.Limit) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ResponseLoadCalls) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForCalls := "[]*CallLogEntry{"
	for _, f := range this.Calls {
		repeatedStringForCalls += strings.Replace(f.String(), "CallLogEntry", "CallLogEntry", 1) + ","
	}
	repeatedStringForCalls += "}"
	repeatedStringForUsers := "[]*UserOutPeer{"
	for _, f := range this.Users {
		repeatedStringForUsers += strings.Replace(fmt.Sprintf("%v", f), "UserOutPeer", "UserOutPeer", 1) + ","
	}
	repeatedStringForUsers += "}"
	repeatedStringForGroups := "[]*GroupOutPeer{"
	for _, f := range this.Groups {
		repeatedStringForGroups += strings.Replace(fmt.Sprintf("%v", f), "GroupOutPeer", "GroupOutPeer", 1) + ","
	}
	repeatedStringForGroups += "}"
	s := strings.Join([]string{`&ResponseLoadCalls{`,
		`Calls:` + repeatedStringForCalls + `,`,
		`Users:` + repeatedStringForUsers + `,`,
		`Groups:` + repeatedStringForGroups + `,`,
		`NextOffset:` + strings.Replace(fmt.Sprintf("%v", this.NextOffset), "BytesValue", "types.BytesValue", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RequestDoCall) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RequestDoCall{`,
		`Peer:` + strings.Replace(fmt.Sprintf("%v", this.Peer), "OutPeer", "OutPeer", 1) + `,`,
		`Timeout:` + fmt.Sprintf("%v", this.Timeout) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ResponseDoCall) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ResponseDoCall{`,
		`CallId:` + fmt.Sprintf("%v", this.CallId) + `,`,
		`EventBusId:` + fmt.Sprintf("%v", this.EventBusId) + `,`,
		`DeviceId:` + fmt.Sprintf("%v", this.DeviceId) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RequestJoinCall) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RequestJoinCall{`,
		`CallId:` + fmt.Sprintf("%v", this.CallId) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RequestRejectCall) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RequestRejectCall{`,
		`CallId:` + fmt.Sprintf("%v", this.CallId) + `,`,
		`Reason:` + fmt.Sprintf("%v", this.Reason) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RequestDeleteCall) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RequestDeleteCall{`,
		`CallId:` + fmt.Sprintf("%v", this.CallId) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RequestChangeCallDisplayName) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RequestChangeCallDisplayName{`,
		`CallId:` + fmt.Sprintf("%v", this.CallId) + `,`,
		`DisplayName:` + strings.Replace(fmt.Sprintf("%v", this.DisplayName), "StringValue", "types.StringValue", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ICEServer) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ICEServer{`,
		`Url:` + fmt.Sprintf("%v", this.Url) + `,`,
		`Username:` + strings.Replace(fmt.Sprintf("%v", this.Username), "StringValue", "types.StringValue", 1) + `,`,
		`Credential:` + strings.Replace(fmt.Sprintf("%v", this.Credential), "StringValue", "types.StringValue", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ICECandidate) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ICECandidate{`,
		`SdpMLineIndex:` + fmt.Sprintf("%v", this.SdpMLineIndex) + `,`,
		`SdpMid:` + fmt.Sprintf("%v", this.SdpMid) + `,`,
		`Sdp:` + fmt.Sprintf("%v", this.Sdp) + `,`,
		`}`,
	}, "")
	return s
}
func (this *WebRTCSignaling) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&WebRTCSignaling{`,
		`Body:` + fmt.Sprintf("%v", this.Body) + `,`,
		`}`,
	}, "")
	return s
}
func (this *WebRTCSignaling_AdvertiseSelf) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&WebRTCSignaling_AdvertiseSelf{`,
		`AdvertiseSelf:` + strings.Replace(fmt.Sprintf("%v", this.AdvertiseSelf), "AdvertiseSelf", "AdvertiseSelf", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *WebRTCSignaling_AdvertiseMaster) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&WebRTCSignaling_AdvertiseMaster{`,
		`AdvertiseMaster:` + strings.Replace(fmt.Sprintf("%v", this.AdvertiseMaster), "AdvertiseMaster", "AdvertiseMaster", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *WebRTCSignaling_AdvertisePeer) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&WebRTCSignaling_AdvertisePeer{`,
		`AdvertisePeer:` + strings.Replace(fmt.Sprintf("%v", this.AdvertisePeer), "AdvertisePeer", "AdvertisePeer", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *WebRTCSignaling_Candidate) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&WebRTCSignaling_Candidate{`,
		`Candidate:` + strings.Replace(fmt.Sprintf("%v", this.Candidate), "Candidate", "Candidate", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *WebRTCSignaling_GotICECandidate) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&WebRTCSignaling_GotICECandidate{`,
		`GotICECandidate:` + strings.Replace(fmt.Sprintf("%v", this.GotICECandidate), "GotICECandidate", "GotICECandidate", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *WebRTCSignaling_RemovedICECandidates) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&WebRTCSignaling_RemovedICECandidates{`,
		`RemovedICECandidates:` + strings.Replace(fmt.Sprintf("%v", this.RemovedICECandidates), "RemovedICECandidates", "RemovedICECandidates", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *WebRTCSignaling_Offer) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&WebRTCSignaling_Offer{`,
		`Offer:` + strings.Replace(fmt.Sprintf("%v", this.Offer), "Offer", "Offer", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *WebRTCSignaling_Answer) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&WebRTCSignaling_Answer{`,
		`Answer:` + strings.Replace(fmt.Sprintf("%v", this.Answer), "Answer", "Answer", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *WebRTCSignaling_NeedOffer) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&WebRTCSignaling_NeedOffer{`,
		`NeedOffer:` + strings.Replace(fmt.Sprintf("%v", this.NeedOffer), "NeedOffer", "NeedOffer", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *WebRTCSignaling_NegotinationSuccessful) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&WebRTCSignaling_NegotinationSuccessful{`,
		`NegotinationSuccessful:` + strings.Replace(fmt.Sprintf("%v", this.NegotinationSuccessful), "NegotinationSuccessful", "NegotinationSuccessful", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *WebRTCSignaling_EnableConnection) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&WebRTCSignaling_EnableConnection{`,
		`EnableConnection:` + strings.Replace(fmt.Sprintf("%v", this.EnableConnection), "EnableConnection", "EnableConnection", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *WebRTCSignaling_OnRenegotiationNeeded) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&WebRTCSignaling_OnRenegotiationNeeded{`,
		`OnRenegotiationNeeded:` + strings.Replace(fmt.Sprintf("%v", this.OnRenegotiationNeeded), "OnRenegotiationNeeded", "OnRenegotiationNeeded", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *WebRTCSignaling_CloseSession) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&WebRTCSignaling_CloseSession{`,
		`CloseSession:` + strings.Replace(fmt.Sprintf("%v", this.CloseSession), "CloseSession", "CloseSession", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *WebRTCSignaling_NeedDisconnect) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&WebRTCSignaling_NeedDisconnect{`,
		`NeedDisconnect:` + strings.Replace(fmt.Sprintf("%v", this.NeedDisconnect), "NeedDisconnect", "NeedDisconnect", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *WebRTCSignaling_DTMF) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&WebRTCSignaling_DTMF{`,
		`DTMF:` + strings.Replace(fmt.Sprintf("%v", this.DTMF), "DTMF", "DTMF", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *WebRTCSignaling_CallStats) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&WebRTCSignaling_CallStats{`,
		`CallStats:` + strings.Replace(fmt.Sprintf("%v", this.CallStats), "CallStats", "CallStats", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *WebRTCSignaling_CallNameChanged) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&WebRTCSignaling_CallNameChanged{`,
		`CallNameChanged:` + strings.Replace(fmt.Sprintf("%v", this.CallNameChanged), "CallNameChanged", "CallNameChanged", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AdvertiseSelf) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AdvertiseSelf{`,
		`PeerSettings:` + strings.Replace(this.PeerSettings.String(), "PeerSettings", "PeerSettings", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AdvertiseMaster) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForServer := "[]*ICEServer{"
	for _, f := range this.Server {
		repeatedStringForServer += strings.Replace(f.String(), "ICEServer", "ICEServer", 1) + ","
	}
	repeatedStringForServer += "}"
	s := strings.Join([]string{`&AdvertiseMaster{`,
		`Server:` + repeatedStringForServer + `,`,
		`CallApiVersion:` + strings.Replace(fmt.Sprintf("%v", this.CallApiVersion), "Int32Value", "types.Int32Value", 1) + `,`,
		`CallName:` + strings.Replace(fmt.Sprintf("%v", this.CallName), "StringValue", "types.StringValue", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AdvertisePeer) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForIceServers := "[]*ICEServer{"
	for _, f := range this.IceServers {
		repeatedStringForIceServers += strings.Replace(f.String(), "ICEServer", "ICEServer", 1) + ","
	}
	repeatedStringForIceServers += "}"
	s := strings.Join([]string{`&AdvertisePeer{`,
		`DeviceId:` + fmt.Sprintf("%v", this.DeviceId) + `,`,
		`PeerSettings:` + strings.Replace(this.PeerSettings.String(), "PeerSettings", "PeerSettings", 1) + `,`,
		`IceServers:` + repeatedStringForIceServers + `,`,
		`}`,
	}, "")
	return s
}
func (this *Candidate) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Candidate{`,
		`SessionId:` + fmt.Sprintf("%v", this.SessionId) + `,`,
		`Index:` + fmt.Sprintf("%v", this.Index) + `,`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`Sdp:` + fmt.Sprintf("%v", this.Sdp) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GotICECandidate) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GotICECandidate{`,
		`SessionId:` + fmt.Sprintf("%v", this.SessionId) + `,`,
		`Candidate:` + strings.Replace(this.Candidate.String(), "ICECandidate", "ICECandidate", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RemovedICECandidates) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForCandidate := "[]*ICECandidate{"
	for _, f := range this.Candidate {
		repeatedStringForCandidate += strings.Replace(f.String(), "ICECandidate", "ICECandidate", 1) + ","
	}
	repeatedStringForCandidate += "}"
	s := strings.Join([]string{`&RemovedICECandidates{`,
		`SessionId:` + fmt.Sprintf("%v", this.SessionId) + `,`,
		`Candidate:` + repeatedStringForCandidate + `,`,
		`}`,
	}, "")
	return s
}
func (this *Offer) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Offer{`,
		`SessionId:` + fmt.Sprintf("%v", this.SessionId) + `,`,
		`Sdp:` + fmt.Sprintf("%v", this.Sdp) + `,`,
		`PeerSettings:` + strings.Replace(this.PeerSettings.String(), "PeerSettings", "PeerSettings", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Answer) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Answer{`,
		`SessionId:` + fmt.Sprintf("%v", this.SessionId) + `,`,
		`Sdp:` + fmt.Sprintf("%v", this.Sdp) + `,`,
		`}`,
	}, "")
	return s
}
func (this *NeedOffer) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&NeedOffer{`,
		`Device:` + fmt.Sprintf("%v", this.Device) + `,`,
		`SessionId:` + fmt.Sprintf("%v", this.SessionId) + `,`,
		`PeerSettings:` + strings.Replace(this.PeerSettings.String(), "PeerSettings", "PeerSettings", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *NegotinationSuccessful) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&NegotinationSuccessful{`,
		`Device:` + fmt.Sprintf("%v", this.Device) + `,`,
		`SessionId:` + fmt.Sprintf("%v", this.SessionId) + `,`,
		`}`,
	}, "")
	return s
}
func (this *EnableConnection) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&EnableConnection{`,
		`Device:` + fmt.Sprintf("%v", this.Device) + `,`,
		`SessionId:` + fmt.Sprintf("%v", this.SessionId) + `,`,
		`}`,
	}, "")
	return s
}
func (this *OnRenegotiationNeeded) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&OnRenegotiationNeeded{`,
		`Device:` + fmt.Sprintf("%v", this.Device) + `,`,
		`SessionId:` + fmt.Sprintf("%v", this.SessionId) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CloseSession) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CloseSession{`,
		`Device:` + fmt.Sprintf("%v", this.Device) + `,`,
		`SessionId:` + fmt.Sprintf("%v", this.SessionId) + `,`,
		`}`,
	}, "")
	return s
}
func (this *NeedDisconnect) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&NeedDisconnect{`,
		`Device:` + fmt.Sprintf("%v", this.Device) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DTMF) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DTMF{`,
		`Code:` + fmt.Sprintf("%v", this.Code) + `,`,
		`Duration:` + fmt.Sprintf("%v", this.Duration) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CallStats) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CallStats{`,
		`Type:` + fmt.Sprintf("%v", this.Type) + `,`,
		`Value:` + fmt.Sprintf("%v", this.Value) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CallNameChanged) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CallNameChanged{`,
		`CallName:` + strings.Replace(fmt.Sprintf("%v", this.CallName), "StringValue", "types.StringValue", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ActiveCall) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForCallMembers := "[]*CallMember{"
	for _, f := range this.CallMembers {
		repeatedStringForCallMembers += strings.Replace(f.String(), "CallMember", "CallMember", 1) + ","
	}
	repeatedStringForCallMembers += "}"
	s := strings.Join([]string{`&ActiveCall{`,
		`CallId:` + fmt.Sprintf("%v", this.CallId) + `,`,
		`Peer:` + strings.Replace(fmt.Sprintf("%v", this.Peer), "Peer", "Peer", 1) + `,`,
		`CallMembers:` + repeatedStringForCallMembers + `,`,
		`}`,
	}, "")
	return s
}
func (this *CallMemberStateHolder) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CallMemberStateHolder{`,
		`State:` + fmt.Sprintf("%v", this.State) + `,`,
		`FallbackIsRinging:` + strings.Replace(fmt.Sprintf("%v", this.FallbackIsRinging), "BoolValue", "types.BoolValue", 1) + `,`,
		`FallbackIsConnected:` + strings.Replace(fmt.Sprintf("%v", this.FallbackIsConnected), "BoolValue", "types.BoolValue", 1) + `,`,
		`FallbackIsConnecting:` + strings.Replace(fmt.Sprintf("%v", this.FallbackIsConnecting), "BoolValue", "types.BoolValue", 1) + `,`,
		`FallbackIsRingingReached:` + strings.Replace(fmt.Sprintf("%v", this.FallbackIsRingingReached), "BoolValue", "types.BoolValue", 1) + `,`,
		`FallbackIsEnded:` + strings.Replace(fmt.Sprintf("%v", this.FallbackIsEnded), "BoolValue", "types.BoolValue", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CallMember) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CallMember{`,
		`UserId:` + fmt.Sprintf("%v", this.UserId) + `,`,
		`State:` + strings.Replace(this.State.String(), "CallMemberStateHolder", "CallMemberStateHolder", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PeerSettings) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PeerSettings{`,
		`CanPreConnect:` + strings.Replace(fmt.Sprintf("%v", this.CanPreConnect), "BoolValue", "types.BoolValue", 1) + `,`,
		`SendsOffer:` + strings.Replace(fmt.Sprintf("%v", this.SendsOffer), "BoolValue", "types.BoolValue", 1) + `,`,
		`WaitForCandidates:` + strings.Replace(fmt.Sprintf("%v", this.WaitForCandidates), "BoolValue", "types.BoolValue", 1) + `,`,
		`ClientInfo:` + strings.Replace(fmt.Sprintf("%v", this.ClientInfo), "ClientInfo", "ClientInfo", 1) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringWebRtc(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *UpdateIncomingCallDeprecated) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWebRtc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateIncomingCallDeprecated: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateIncomingCallDeprecated: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CallId", wireType)
			}
			m.CallId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWebRtc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CallId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AttemptIndex", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWebRtc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWebRtc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthWebRtc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AttemptIndex == nil {
				m.AttemptIndex = &types.Int32Value{}
			}
			if err := m.AttemptIndex.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipWebRtc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWebRtc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthWebRtc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateIncomingCall) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWebRtc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateIncomingCall: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateIncomingCall: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CallId", wireType)
			}
			m.CallId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWebRtc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CallId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventBusId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWebRtc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWebRtc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWebRtc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EventBusId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Peer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWebRtc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWebRtc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthWebRtc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Peer == nil {
				m.Peer = &Peer{}
			}
			if err := m.Peer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisplayName", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWebRtc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWebRtc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthWebRtc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DisplayName == nil {
				m.DisplayName = &types.StringValue{}
			}
			if err := m.DisplayName.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AttemptIndex", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWebRtc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWebRtc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthWebRtc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AttemptIndex == nil {
				m.AttemptIndex = &types.Int32Value{}
			}
			if err := m.AttemptIndex.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutPeer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWebRtc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWebRtc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthWebRtc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.OutPeer == nil {
				m.OutPeer = &OutPeer{}
			}
			if err := m.OutPeer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Video", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWebRtc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Video = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipWebRtc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWebRtc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthWebRtc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateCallHandled) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWebRtc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateCallHandled: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateCallHandled: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CallId", wireType)
			}
			m.CallId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWebRtc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CallId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AttemptIndex", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWebRtc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWebRtc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthWebRtc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AttemptIndex == nil {
				m.AttemptIndex = &types.Int32Value{}
			}
			if err := m.AttemptIndex.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipWebRtc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWebRtc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthWebRtc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateCallDisposed) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWebRtc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateCallDisposed: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateCallDisposed: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CallId", wireType)
			}
			m.CallId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWebRtc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CallId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AttemptIndex", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWebRtc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWebRtc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthWebRtc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AttemptIndex == nil {
				m.AttemptIndex = &types.Int32Value{}
			}
			if err := m.AttemptIndex.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reason", wireType)
			}
			m.Reason = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWebRtc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Reason |= CallDisposedReason(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipWebRtc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWebRtc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthWebRtc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestGetCallInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWebRtc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestGetCallInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestGetCallInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CallId", wireType)
			}
			m.CallId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWebRtc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CallId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipWebRtc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWebRtc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthWebRtc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResponseGetCallInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWebRtc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResponseGetCallInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResponseGetCallInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Peer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWebRtc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWebRtc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthWebRtc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Peer == nil {
				m.Peer = &Peer{}
			}
			if err := m.Peer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Groups", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWebRtc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWebRtc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthWebRtc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Groups = append(m.Groups, &GroupOutPeer{})
			if err := m.Groups[len(m.Groups)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Users", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWebRtc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWebRtc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthWebRtc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Users = append(m.Users, &UserOutPeer{})
			if err := m.Users[len(m.Users)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventBusId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWebRtc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWebRtc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWebRtc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EventBusId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisplayName", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWebRtc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWebRtc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthWebRtc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DisplayName == nil {
				m.DisplayName = &types.StringValue{}
			}
			if err := m.DisplayName.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipWebRtc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWebRtc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthWebRtc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CallLogEntry) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWebRtc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CallLogEntry: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CallLogEntry: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWebRtc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CallDate", wireType)
			}
			m.CallDate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWebRtc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CallDate |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Initiator", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWebRtc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWebRtc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthWebRtc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Initiator == nil {
				m.Initiator = &OutPeer{}
			}
			if err := m.Initiator.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Recipient", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWebRtc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWebRtc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthWebRtc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Recipient == nil {
				m.Recipient = &OutPeer{}
			}
			if err := m.Recipient.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Duration", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWebRtc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWebRtc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthWebRtc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Duration == nil {
				m.Duration = &types.Int64Value{}
			}
			if err := m.Duration.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Answered", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWebRtc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWebRtc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthWebRtc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Answered == nil {
				m.Answered = &types.BoolValue{}
			}
			if err := m.Answered.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Finished", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWebRtc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWebRtc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthWebRtc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Finished == nil {
				m.Finished = &types.BoolValue{}
			}
			if err := m.Finished.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisplayName", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWebRtc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWebRtc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthWebRtc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DisplayName == nil {
				m.DisplayName = &types.StringValue{}
			}
			if err := m.DisplayName.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rejected", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWebRtc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWebRtc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthWebRtc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Rejected == nil {
				m.Rejected = &types.BoolValue{}
			}
			if err := m.Rejected.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipWebRtc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWebRtc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthWebRtc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestLoadCalls) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWebRtc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestLoadCalls: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestLoadCalls: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NextOffset", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWebRtc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWebRtc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthWebRtc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.NextOffset == nil {
				m.NextOffset = &types.BytesValue{}
			}
			if err := m.NextOffset.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWebRtc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipWebRtc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWebRtc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthWebRtc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResponseLoadCalls) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWebRtc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResponseLoadCalls: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResponseLoadCalls: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Calls", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWebRtc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWebRtc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthWebRtc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Calls = append(m.Calls, &CallLogEntry{})
			if err := m.Calls[len(m.Calls)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Users", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWebRtc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWebRtc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthWebRtc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Users = append(m.Users, &UserOutPeer{})
			if err := m.Users[len(m.Users)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Groups", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWebRtc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWebRtc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthWebRtc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Groups = append(m.Groups, &GroupOutPeer{})
			if err := m.Groups[len(m.Groups)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NextOffset", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWebRtc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWebRtc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthWebRtc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.NextOffset == nil {
				m.NextOffset = &types.BytesValue{}
			}
			if err := m.NextOffset.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipWebRtc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWebRtc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthWebRtc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestDoCall) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWebRtc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestDoCall: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestDoCall: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Peer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWebRtc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWebRtc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthWebRtc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Peer == nil {
				m.Peer = &OutPeer{}
			}
			if err := m.Peer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timeout", wireType)
			}
			m.Timeout = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWebRtc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Timeout |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipWebRtc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWebRtc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthWebRtc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResponseDoCall) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWebRtc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResponseDoCall: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResponseDoCall: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CallId", wireType)
			}
			m.CallId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWebRtc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CallId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventBusId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWebRtc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWebRtc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWebRtc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EventBusId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeviceId", wireType)
			}
			m.DeviceId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWebRtc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DeviceId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipWebRtc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWebRtc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthWebRtc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestJoinCall) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWebRtc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestJoinCall: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestJoinCall: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CallId", wireType)
			}
			m.CallId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWebRtc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CallId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipWebRtc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWebRtc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthWebRtc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestRejectCall) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWebRtc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestRejectCall: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestRejectCall: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CallId", wireType)
			}
			m.CallId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWebRtc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CallId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reason", wireType)
			}
			m.Reason = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWebRtc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Reason |= RejectCallReason(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipWebRtc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWebRtc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthWebRtc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestDeleteCall) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWebRtc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestDeleteCall: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestDeleteCall: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CallId", wireType)
			}
			m.CallId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWebRtc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CallId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipWebRtc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWebRtc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthWebRtc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestChangeCallDisplayName) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWebRtc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestChangeCallDisplayName: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestChangeCallDisplayName: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CallId", wireType)
			}
			m.CallId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWebRtc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CallId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisplayName", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWebRtc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWebRtc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthWebRtc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DisplayName == nil {
				m.DisplayName = &types.StringValue{}
			}
			if err := m.DisplayName.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipWebRtc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWebRtc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthWebRtc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ICEServer) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWebRtc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ICEServer: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ICEServer: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Url", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWebRtc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWebRtc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWebRtc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Url = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Username", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWebRtc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWebRtc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthWebRtc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Username == nil {
				m.Username = &types.StringValue{}
			}
			if err := m.Username.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Credential", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWebRtc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWebRtc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthWebRtc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Credential == nil {
				m.Credential = &types.StringValue{}
			}
			if err := m.Credential.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipWebRtc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWebRtc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthWebRtc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ICECandidate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWebRtc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ICECandidate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ICECandidate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SdpMLineIndex", wireType)
			}
			m.SdpMLineIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWebRtc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SdpMLineIndex |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SdpMid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWebRtc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWebRtc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWebRtc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SdpMid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sdp", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWebRtc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWebRtc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWebRtc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sdp = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipWebRtc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWebRtc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthWebRtc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WebRTCSignaling) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWebRtc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WebRTCSignaling: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WebRTCSignaling: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdvertiseSelf", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWebRtc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWebRtc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthWebRtc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &AdvertiseSelf{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Body = &WebRTCSignaling_AdvertiseSelf{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdvertiseMaster", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWebRtc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWebRtc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthWebRtc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &AdvertiseMaster{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Body = &WebRTCSignaling_AdvertiseMaster{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdvertisePeer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWebRtc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWebRtc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthWebRtc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &AdvertisePeer{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Body = &WebRTCSignaling_AdvertisePeer{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Candidate", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWebRtc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWebRtc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthWebRtc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &Candidate{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Body = &WebRTCSignaling_Candidate{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GotICECandidate", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWebRtc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWebRtc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthWebRtc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &GotICECandidate{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Body = &WebRTCSignaling_GotICECandidate{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RemovedICECandidates", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWebRtc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWebRtc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthWebRtc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &RemovedICECandidates{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Body = &WebRTCSignaling_RemovedICECandidates{v}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Offer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWebRtc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWebRtc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthWebRtc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &Offer{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Body = &WebRTCSignaling_Offer{v}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Answer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWebRtc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWebRtc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthWebRtc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &Answer{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Body = &WebRTCSignaling_Answer{v}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NeedOffer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWebRtc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWebRtc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthWebRtc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &NeedOffer{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Body = &WebRTCSignaling_NeedOffer{v}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NegotinationSuccessful", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWebRtc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWebRtc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthWebRtc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &NegotinationSuccessful{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Body = &WebRTCSignaling_NegotinationSuccessful{v}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnableConnection", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWebRtc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWebRtc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthWebRtc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &EnableConnection{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Body = &WebRTCSignaling_EnableConnection{v}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OnRenegotiationNeeded", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWebRtc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWebRtc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthWebRtc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &OnRenegotiationNeeded{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Body = &WebRTCSignaling_OnRenegotiationNeeded{v}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CloseSession", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWebRtc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWebRtc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthWebRtc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &CloseSession{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Body = &WebRTCSignaling_CloseSession{v}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NeedDisconnect", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWebRtc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWebRtc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthWebRtc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &NeedDisconnect{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Body = &WebRTCSignaling_NeedDisconnect{v}
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DTMF", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWebRtc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWebRtc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthWebRtc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &DTMF{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Body = &WebRTCSignaling_DTMF{v}
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CallStats", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWebRtc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWebRtc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthWebRtc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &CallStats{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Body = &WebRTCSignaling_CallStats{v}
			iNdEx = postIndex
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CallNameChanged", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWebRtc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWebRtc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthWebRtc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &CallNameChanged{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Body = &WebRTCSignaling_CallNameChanged{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipWebRtc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWebRtc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthWebRtc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AdvertiseSelf) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWebRtc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AdvertiseSelf: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AdvertiseSelf: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PeerSettings", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWebRtc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWebRtc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthWebRtc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PeerSettings == nil {
				m.PeerSettings = &PeerSettings{}
			}
			if err := m.PeerSettings.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipWebRtc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWebRtc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthWebRtc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AdvertiseMaster) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWebRtc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AdvertiseMaster: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AdvertiseMaster: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Server", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWebRtc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWebRtc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthWebRtc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Server = append(m.Server, &ICEServer{})
			if err := m.Server[len(m.Server)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CallApiVersion", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWebRtc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWebRtc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthWebRtc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CallApiVersion == nil {
				m.CallApiVersion = &types.Int32Value{}
			}
			if err := m.CallApiVersion.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CallName", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWebRtc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWebRtc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthWebRtc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CallName == nil {
				m.CallName = &types.StringValue{}
			}
			if err := m.CallName.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipWebRtc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWebRtc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthWebRtc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AdvertisePeer) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWebRtc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AdvertisePeer: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AdvertisePeer: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeviceId", wireType)
			}
			m.DeviceId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWebRtc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DeviceId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PeerSettings", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWebRtc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWebRtc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthWebRtc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PeerSettings == nil {
				m.PeerSettings = &PeerSettings{}
			}
			if err := m.PeerSettings.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IceServers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWebRtc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWebRtc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthWebRtc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IceServers = append(m.IceServers, &ICEServer{})
			if err := m.IceServers[len(m.IceServers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipWebRtc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWebRtc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthWebRtc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Candidate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWebRtc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Candidate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Candidate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SessionId", wireType)
			}
			m.SessionId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWebRtc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SessionId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			m.Index = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWebRtc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Index |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWebRtc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWebRtc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWebRtc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sdp", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWebRtc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWebRtc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWebRtc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sdp = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipWebRtc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWebRtc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthWebRtc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GotICECandidate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWebRtc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GotICECandidate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GotICECandidate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SessionId", wireType)
			}
			m.SessionId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWebRtc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SessionId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Candidate", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWebRtc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWebRtc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthWebRtc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Candidate == nil {
				m.Candidate = &ICECandidate{}
			}
			if err := m.Candidate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipWebRtc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWebRtc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthWebRtc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RemovedICECandidates) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWebRtc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RemovedICECandidates: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RemovedICECandidates: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SessionId", wireType)
			}
			m.SessionId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWebRtc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SessionId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Candidate", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWebRtc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWebRtc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthWebRtc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Candidate = append(m.Candidate, &ICECandidate{})
			if err := m.Candidate[len(m.Candidate)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipWebRtc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWebRtc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthWebRtc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Offer) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWebRtc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Offer: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Offer: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SessionId", wireType)
			}
			m.SessionId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWebRtc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SessionId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sdp", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWebRtc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWebRtc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWebRtc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sdp = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PeerSettings", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWebRtc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWebRtc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthWebRtc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PeerSettings == nil {
				m.PeerSettings = &PeerSettings{}
			}
			if err := m.PeerSettings.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipWebRtc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWebRtc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthWebRtc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Answer) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWebRtc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Answer: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Answer: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SessionId", wireType)
			}
			m.SessionId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWebRtc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SessionId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sdp", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWebRtc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWebRtc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWebRtc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sdp = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipWebRtc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWebRtc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthWebRtc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NeedOffer) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWebRtc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NeedOffer: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NeedOffer: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Device", wireType)
			}
			m.Device = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWebRtc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Device |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SessionId", wireType)
			}
			m.SessionId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWebRtc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SessionId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PeerSettings", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWebRtc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWebRtc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthWebRtc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PeerSettings == nil {
				m.PeerSettings = &PeerSettings{}
			}
			if err := m.PeerSettings.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipWebRtc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWebRtc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthWebRtc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NegotinationSuccessful) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWebRtc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NegotinationSuccessful: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NegotinationSuccessful: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Device", wireType)
			}
			m.Device = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWebRtc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Device |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SessionId", wireType)
			}
			m.SessionId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWebRtc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SessionId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipWebRtc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWebRtc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthWebRtc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EnableConnection) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWebRtc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EnableConnection: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EnableConnection: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Device", wireType)
			}
			m.Device = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWebRtc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Device |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SessionId", wireType)
			}
			m.SessionId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWebRtc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SessionId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipWebRtc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWebRtc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthWebRtc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OnRenegotiationNeeded) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWebRtc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OnRenegotiationNeeded: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OnRenegotiationNeeded: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Device", wireType)
			}
			m.Device = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWebRtc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Device |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SessionId", wireType)
			}
			m.SessionId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWebRtc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SessionId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipWebRtc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWebRtc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthWebRtc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CloseSession) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWebRtc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CloseSession: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CloseSession: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Device", wireType)
			}
			m.Device = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWebRtc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Device |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SessionId", wireType)
			}
			m.SessionId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWebRtc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SessionId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipWebRtc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWebRtc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthWebRtc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NeedDisconnect) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWebRtc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NeedDisconnect: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NeedDisconnect: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Device", wireType)
			}
			m.Device = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWebRtc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Device |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipWebRtc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWebRtc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthWebRtc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DTMF) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWebRtc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DTMF: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DTMF: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWebRtc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= DTMFCode(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Duration", wireType)
			}
			m.Duration = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWebRtc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Duration |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipWebRtc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWebRtc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthWebRtc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CallStats) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWebRtc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CallStats: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CallStats: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWebRtc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= CallStatsType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWebRtc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWebRtc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWebRtc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipWebRtc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWebRtc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthWebRtc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CallNameChanged) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWebRtc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CallNameChanged: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CallNameChanged: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CallName", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWebRtc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWebRtc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthWebRtc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CallName == nil {
				m.CallName = &types.StringValue{}
			}
			if err := m.CallName.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipWebRtc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWebRtc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthWebRtc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ActiveCall) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWebRtc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ActiveCall: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ActiveCall: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CallId", wireType)
			}
			m.CallId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWebRtc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CallId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Peer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWebRtc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWebRtc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthWebRtc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Peer == nil {
				m.Peer = &Peer{}
			}
			if err := m.Peer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CallMembers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWebRtc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWebRtc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthWebRtc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CallMembers = append(m.CallMembers, &CallMember{})
			if err := m.CallMembers[len(m.CallMembers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipWebRtc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWebRtc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthWebRtc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CallMemberStateHolder) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWebRtc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CallMemberStateHolder: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CallMemberStateHolder: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWebRtc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= CallMemberState(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FallbackIsRinging", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWebRtc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWebRtc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthWebRtc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FallbackIsRinging == nil {
				m.FallbackIsRinging = &types.BoolValue{}
			}
			if err := m.FallbackIsRinging.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FallbackIsConnected", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWebRtc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWebRtc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthWebRtc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FallbackIsConnected == nil {
				m.FallbackIsConnected = &types.BoolValue{}
			}
			if err := m.FallbackIsConnected.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FallbackIsConnecting", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWebRtc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWebRtc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthWebRtc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FallbackIsConnecting == nil {
				m.FallbackIsConnecting = &types.BoolValue{}
			}
			if err := m.FallbackIsConnecting.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FallbackIsRingingReached", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWebRtc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWebRtc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthWebRtc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FallbackIsRingingReached == nil {
				m.FallbackIsRingingReached = &types.BoolValue{}
			}
			if err := m.FallbackIsRingingReached.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FallbackIsEnded", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWebRtc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWebRtc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthWebRtc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FallbackIsEnded == nil {
				m.FallbackIsEnded = &types.BoolValue{}
			}
			if err := m.FallbackIsEnded.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipWebRtc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWebRtc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthWebRtc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CallMember) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWebRtc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CallMember: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CallMember: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWebRtc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWebRtc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWebRtc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthWebRtc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.State == nil {
				m.State = &CallMemberStateHolder{}
			}
			if err := m.State.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipWebRtc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWebRtc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthWebRtc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PeerSettings) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWebRtc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PeerSettings: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PeerSettings: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CanPreConnect", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWebRtc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWebRtc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthWebRtc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CanPreConnect == nil {
				m.CanPreConnect = &types.BoolValue{}
			}
			if err := m.CanPreConnect.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SendsOffer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWebRtc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWebRtc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthWebRtc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SendsOffer == nil {
				m.SendsOffer = &types.BoolValue{}
			}
			if err := m.SendsOffer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WaitForCandidates", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWebRtc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWebRtc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthWebRtc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.WaitForCandidates == nil {
				m.WaitForCandidates = &types.BoolValue{}
			}
			if err := m.WaitForCandidates.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWebRtc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWebRtc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthWebRtc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ClientInfo == nil {
				m.ClientInfo = &ClientInfo{}
			}
			if err := m.ClientInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipWebRtc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWebRtc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthWebRtc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipWebRtc(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowWebRtc
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowWebRtc
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowWebRtc
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthWebRtc
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupWebRtc
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthWebRtc
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthWebRtc        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowWebRtc          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupWebRtc = fmt.Errorf("proto: unexpected end of group")
)
