// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: sequence_and_updates.proto

package dialog

import (
	bytes "bytes"
	context "context"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	types "github.com/gogo/protobuf/types"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Sequence update
type UpdateSeqUpdate struct {
	Seq          int32  `protobuf:"varint,1,opt,name=seq,proto3" json:"seq,omitempty"`
	State        []byte `protobuf:"bytes,2,opt,name=state,proto3" json:"state,omitempty"`
	UpdateHeader int32  `protobuf:"varint,3,opt,name=update_header,json=updateHeader,proto3" json:"update_header,omitempty"`
	// Types that are valid to be assigned to Update:
	//	*UpdateSeqUpdate_UpdateForceReloadState
	//	*UpdateSeqUpdate_UpdateUserAvatarChanged
	//	*UpdateSeqUpdate_UpdateUserNameChanged
	//	*UpdateSeqUpdate_UpdateUserLocalNameChanged
	//	*UpdateSeqUpdate_UpdateUserContactsChanged
	//	*UpdateSeqUpdate_UpdateUserNickChanged
	//	*UpdateSeqUpdate_UpdateUserAboutChanged
	//	*UpdateSeqUpdate_UpdateUserPreferredLanguagesChanged
	//	*UpdateSeqUpdate_UpdateUserTimeZoneChanged
	//	*UpdateSeqUpdate_UpdateUserBotCommandsChanged
	//	*UpdateSeqUpdate_UpdateUserExtChanged
	//	*UpdateSeqUpdate_UpdateUserFullExtChanged
	//	*UpdateSeqUpdate_UpdateUserSexChanged
	//	*UpdateSeqUpdate_UpdateUserCustomProfileChanged
	//	*UpdateSeqUpdate_UpdateUserStatusChanged
	//	*UpdateSeqUpdate_UpdateContactRegistered
	//	*UpdateSeqUpdate_UpdateContactsAdded
	//	*UpdateSeqUpdate_UpdateContactsAddTaskSuspended
	//	*UpdateSeqUpdate_UpdateContactsRemoved
	//	*UpdateSeqUpdate_UpdateUserBlocked
	//	*UpdateSeqUpdate_UpdateUserUnblocked
	//	*UpdateSeqUpdate_UpdateInteractiveMediaEvent
	//	*UpdateSeqUpdate_UpdateMessage
	//	*UpdateSeqUpdate_UpdateMessageContentChanged
	//	*UpdateSeqUpdate_UpdateMessageSent
	//	*UpdateSeqUpdate_UpdateMessageReceived
	//	*UpdateSeqUpdate_UpdateMessageRead
	//	*UpdateSeqUpdate_UpdateMessageReadByMe
	//	*UpdateSeqUpdate_UpdateMessageDelete
	//	*UpdateSeqUpdate_UpdateChatClear
	//	*UpdateSeqUpdate_UpdateChatDelete
	//	*UpdateSeqUpdate_UpdateChatArchive
	//	*UpdateSeqUpdate_UpdateChatGroupsChanged
	//	*UpdateSeqUpdate_UpdateReactionsUpdate
	//	*UpdateSeqUpdate_UpdateDialogFavouriteChanged
	//	*UpdateSeqUpdate_UpdatePinnedMessagesChanged
	//	*UpdateSeqUpdate_UpdateGroupTitleChanged
	//	*UpdateSeqUpdate_UpdateGroupAvatarChanged
	//	*UpdateSeqUpdate_UpdateGroupAboutChanged
	//	*UpdateSeqUpdate_UpdateGroupOwnerChanged
	//	*UpdateSeqUpdate_UpdateGroupMembersUpdated
	//	*UpdateSeqUpdate_UpdateGroupMemberDiff
	//	*UpdateSeqUpdate_UpdateGroupMembersCountChanged
	//	*UpdateSeqUpdate_UpdateGroupMemberPermissionsChanged
	//	*UpdateSeqUpdate_UpdateGroupInviteObsolete
	//	*UpdateSeqUpdate_UpdateGroupUserInvitedObsolete
	//	*UpdateSeqUpdate_UpdateGroupUserLeaveObsolete
	//	*UpdateSeqUpdate_UpdateGroupUserKickObsolete
	//	*UpdateSeqUpdate_UpdateGroupMembersUpdateObsolete
	//	*UpdateSeqUpdate_UpdateGroupTitleChangedObsolete
	//	*UpdateSeqUpdate_UpdateGroupAboutChangedObsolete
	//	*UpdateSeqUpdate_UpdateGroupAvatarChangedObsolete
	//	*UpdateSeqUpdate_UpdateGroupShortnameChanged
	//	*UpdateSeqUpdate_UpdateStickerCollectionsChanged
	//	*UpdateSeqUpdate_UpdateStickerPackRemoved
	//	*UpdateSeqUpdate_UpdateStickerPackAdded
	//	*UpdateSeqUpdate_UpdatePauseNotifications
	//	*UpdateSeqUpdate_UpdateRestoreNotifications
	//	*UpdateSeqUpdate_UpdateTyping
	//	*UpdateSeqUpdate_UpdateTypingStop
	//	*UpdateSeqUpdate_UpdateUserOnline
	//	*UpdateSeqUpdate_UpdateUserOffline
	//	*UpdateSeqUpdate_UpdateUserLastSeen
	//	*UpdateSeqUpdate_UpdateGroupOnline
	//	*UpdateSeqUpdate_UpdateEventBusDeviceConnected
	//	*UpdateSeqUpdate_UpdateEventBusDeviceDisconnected
	//	*UpdateSeqUpdate_UpdateEventBusMessage
	//	*UpdateSeqUpdate_UpdateEventBusDisposed
	//	*UpdateSeqUpdate_UpdateIncomingCallDeprecated
	//	*UpdateSeqUpdate_UpdateIncomingCall
	//	*UpdateSeqUpdate_UpdateCallHandled
	//	*UpdateSeqUpdate_UpdateCallDisposed
	//	*UpdateSeqUpdate_UpdateParameterChanged
	//	*UpdateSeqUpdate_UpdateRawUpdate
	//	*UpdateSeqUpdate_UpdateEmptyUpdate
	//	*UpdateSeqUpdate_UpdateCountersChanged
	//	*UpdateSeqUpdate_UpdateConfig
	//	*UpdateSeqUpdate_UpdateSpaceModified
	//	*UpdateSeqUpdate_UpdateSpaceMemberModified
	//	*UpdateSeqUpdate_UpdateMessageRejectedByHook
	//	*UpdateSeqUpdate_UpdateMessageEditRejectedByHook
	//	*UpdateSeqUpdate_UpdateUser
	//	*UpdateSeqUpdate_UpdateFeatureFlagChanged
	//	*UpdateSeqUpdate_UpdateThreadCreated
	//	*UpdateSeqUpdate_UpdateThreadLifted
	//	*UpdateSeqUpdate_UpdateGroup
	//	*UpdateSeqUpdate_UpdateGroupMemberInvited
	//	*UpdateSeqUpdate_MessageReactionsUpdate
	Update isUpdateSeqUpdate_Update `protobuf_oneof:"update"`
}

func (m *UpdateSeqUpdate) Reset()      { *m = UpdateSeqUpdate{} }
func (*UpdateSeqUpdate) ProtoMessage() {}
func (*UpdateSeqUpdate) Descriptor() ([]byte, []int) {
	return fileDescriptor_0cf1109f6bcc730b, []int{0}
}
func (m *UpdateSeqUpdate) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateSeqUpdate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateSeqUpdate.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateSeqUpdate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateSeqUpdate.Merge(m, src)
}
func (m *UpdateSeqUpdate) XXX_Size() int {
	return m.Size()
}
func (m *UpdateSeqUpdate) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateSeqUpdate.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateSeqUpdate proto.InternalMessageInfo

type isUpdateSeqUpdate_Update interface {
	isUpdateSeqUpdate_Update()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type UpdateSeqUpdate_UpdateForceReloadState struct {
	UpdateForceReloadState *UpdateForceReloadState `protobuf:"bytes,4,opt,name=updateForceReloadState,proto3,oneof" json:"updateForceReloadState,omitempty"`
}
type UpdateSeqUpdate_UpdateUserAvatarChanged struct {
	UpdateUserAvatarChanged *UpdateUserAvatarChanged `protobuf:"bytes,5,opt,name=updateUserAvatarChanged,proto3,oneof" json:"updateUserAvatarChanged,omitempty"`
}
type UpdateSeqUpdate_UpdateUserNameChanged struct {
	UpdateUserNameChanged *UpdateUserNameChanged `protobuf:"bytes,6,opt,name=updateUserNameChanged,proto3,oneof" json:"updateUserNameChanged,omitempty"`
}
type UpdateSeqUpdate_UpdateUserLocalNameChanged struct {
	UpdateUserLocalNameChanged *UpdateUserLocalNameChanged `protobuf:"bytes,7,opt,name=updateUserLocalNameChanged,proto3,oneof" json:"updateUserLocalNameChanged,omitempty"`
}
type UpdateSeqUpdate_UpdateUserContactsChanged struct {
	UpdateUserContactsChanged *UpdateUserContactsChanged `protobuf:"bytes,8,opt,name=updateUserContactsChanged,proto3,oneof" json:"updateUserContactsChanged,omitempty"`
}
type UpdateSeqUpdate_UpdateUserNickChanged struct {
	UpdateUserNickChanged *UpdateUserNickChanged `protobuf:"bytes,9,opt,name=updateUserNickChanged,proto3,oneof" json:"updateUserNickChanged,omitempty"`
}
type UpdateSeqUpdate_UpdateUserAboutChanged struct {
	UpdateUserAboutChanged *UpdateUserAboutChanged `protobuf:"bytes,10,opt,name=updateUserAboutChanged,proto3,oneof" json:"updateUserAboutChanged,omitempty"`
}
type UpdateSeqUpdate_UpdateUserPreferredLanguagesChanged struct {
	UpdateUserPreferredLanguagesChanged *UpdateUserPreferredLanguagesChanged `protobuf:"bytes,11,opt,name=updateUserPreferredLanguagesChanged,proto3,oneof" json:"updateUserPreferredLanguagesChanged,omitempty"`
}
type UpdateSeqUpdate_UpdateUserTimeZoneChanged struct {
	UpdateUserTimeZoneChanged *UpdateUserTimeZoneChanged `protobuf:"bytes,12,opt,name=updateUserTimeZoneChanged,proto3,oneof" json:"updateUserTimeZoneChanged,omitempty"`
}
type UpdateSeqUpdate_UpdateUserBotCommandsChanged struct {
	UpdateUserBotCommandsChanged *UpdateUserBotCommandsChanged `protobuf:"bytes,13,opt,name=updateUserBotCommandsChanged,proto3,oneof" json:"updateUserBotCommandsChanged,omitempty"`
}
type UpdateSeqUpdate_UpdateUserExtChanged struct {
	UpdateUserExtChanged *UpdateUserExtChanged `protobuf:"bytes,14,opt,name=updateUserExtChanged,proto3,oneof" json:"updateUserExtChanged,omitempty"`
}
type UpdateSeqUpdate_UpdateUserFullExtChanged struct {
	UpdateUserFullExtChanged *UpdateUserFullExtChanged `protobuf:"bytes,15,opt,name=updateUserFullExtChanged,proto3,oneof" json:"updateUserFullExtChanged,omitempty"`
}
type UpdateSeqUpdate_UpdateUserSexChanged struct {
	UpdateUserSexChanged *UpdateUserSexChanged `protobuf:"bytes,16,opt,name=updateUserSexChanged,proto3,oneof" json:"updateUserSexChanged,omitempty"`
}
type UpdateSeqUpdate_UpdateUserCustomProfileChanged struct {
	UpdateUserCustomProfileChanged *UpdateUserCustomProfileChanged `protobuf:"bytes,17,opt,name=updateUserCustomProfileChanged,proto3,oneof" json:"updateUserCustomProfileChanged,omitempty"`
}
type UpdateSeqUpdate_UpdateUserStatusChanged struct {
	UpdateUserStatusChanged *UpdateUserStatusChanged `protobuf:"bytes,18,opt,name=updateUserStatusChanged,proto3,oneof" json:"updateUserStatusChanged,omitempty"`
}
type UpdateSeqUpdate_UpdateContactRegistered struct {
	UpdateContactRegistered *UpdateContactRegistered `protobuf:"bytes,19,opt,name=updateContactRegistered,proto3,oneof" json:"updateContactRegistered,omitempty"`
}
type UpdateSeqUpdate_UpdateContactsAdded struct {
	UpdateContactsAdded *UpdateContactsAdded `protobuf:"bytes,20,opt,name=updateContactsAdded,proto3,oneof" json:"updateContactsAdded,omitempty"`
}
type UpdateSeqUpdate_UpdateContactsAddTaskSuspended struct {
	UpdateContactsAddTaskSuspended *UpdateContactsAddTaskSuspended `protobuf:"bytes,21,opt,name=updateContactsAddTaskSuspended,proto3,oneof" json:"updateContactsAddTaskSuspended,omitempty"`
}
type UpdateSeqUpdate_UpdateContactsRemoved struct {
	UpdateContactsRemoved *UpdateContactsRemoved `protobuf:"bytes,22,opt,name=updateContactsRemoved,proto3,oneof" json:"updateContactsRemoved,omitempty"`
}
type UpdateSeqUpdate_UpdateUserBlocked struct {
	UpdateUserBlocked *UpdateUserBlocked `protobuf:"bytes,23,opt,name=updateUserBlocked,proto3,oneof" json:"updateUserBlocked,omitempty"`
}
type UpdateSeqUpdate_UpdateUserUnblocked struct {
	UpdateUserUnblocked *UpdateUserUnblocked `protobuf:"bytes,24,opt,name=updateUserUnblocked,proto3,oneof" json:"updateUserUnblocked,omitempty"`
}
type UpdateSeqUpdate_UpdateInteractiveMediaEvent struct {
	UpdateInteractiveMediaEvent *UpdateInteractiveMediaEvent `protobuf:"bytes,25,opt,name=updateInteractiveMediaEvent,proto3,oneof" json:"updateInteractiveMediaEvent,omitempty"`
}
type UpdateSeqUpdate_UpdateMessage struct {
	UpdateMessage *UpdateMessage `protobuf:"bytes,26,opt,name=updateMessage,proto3,oneof" json:"updateMessage,omitempty"`
}
type UpdateSeqUpdate_UpdateMessageContentChanged struct {
	UpdateMessageContentChanged *UpdateMessageContentChanged `protobuf:"bytes,27,opt,name=updateMessageContentChanged,proto3,oneof" json:"updateMessageContentChanged,omitempty"`
}
type UpdateSeqUpdate_UpdateMessageSent struct {
	UpdateMessageSent *UpdateMessageSent `protobuf:"bytes,28,opt,name=updateMessageSent,proto3,oneof" json:"updateMessageSent,omitempty"`
}
type UpdateSeqUpdate_UpdateMessageReceived struct {
	UpdateMessageReceived *UpdateMessageReceived `protobuf:"bytes,29,opt,name=updateMessageReceived,proto3,oneof" json:"updateMessageReceived,omitempty"`
}
type UpdateSeqUpdate_UpdateMessageRead struct {
	UpdateMessageRead *UpdateMessageRead `protobuf:"bytes,30,opt,name=updateMessageRead,proto3,oneof" json:"updateMessageRead,omitempty"`
}
type UpdateSeqUpdate_UpdateMessageReadByMe struct {
	UpdateMessageReadByMe *UpdateMessageReadByMe `protobuf:"bytes,31,opt,name=updateMessageReadByMe,proto3,oneof" json:"updateMessageReadByMe,omitempty"`
}
type UpdateSeqUpdate_UpdateMessageDelete struct {
	UpdateMessageDelete *UpdateMessageDelete `protobuf:"bytes,32,opt,name=updateMessageDelete,proto3,oneof" json:"updateMessageDelete,omitempty"`
}
type UpdateSeqUpdate_UpdateChatClear struct {
	UpdateChatClear *UpdateChatClear `protobuf:"bytes,33,opt,name=updateChatClear,proto3,oneof" json:"updateChatClear,omitempty"`
}
type UpdateSeqUpdate_UpdateChatDelete struct {
	UpdateChatDelete *UpdateChatDelete `protobuf:"bytes,34,opt,name=updateChatDelete,proto3,oneof" json:"updateChatDelete,omitempty"`
}
type UpdateSeqUpdate_UpdateChatArchive struct {
	UpdateChatArchive *UpdateChatArchive `protobuf:"bytes,35,opt,name=updateChatArchive,proto3,oneof" json:"updateChatArchive,omitempty"`
}
type UpdateSeqUpdate_UpdateChatGroupsChanged struct {
	UpdateChatGroupsChanged *UpdateChatGroupsChanged `protobuf:"bytes,36,opt,name=updateChatGroupsChanged,proto3,oneof" json:"updateChatGroupsChanged,omitempty"`
}
type UpdateSeqUpdate_UpdateReactionsUpdate struct {
	UpdateReactionsUpdate *UpdateReactionsUpdate `protobuf:"bytes,37,opt,name=updateReactionsUpdate,proto3,oneof" json:"updateReactionsUpdate,omitempty"`
}
type UpdateSeqUpdate_UpdateDialogFavouriteChanged struct {
	UpdateDialogFavouriteChanged *UpdateDialogFavouriteChanged `protobuf:"bytes,38,opt,name=updateDialogFavouriteChanged,proto3,oneof" json:"updateDialogFavouriteChanged,omitempty"`
}
type UpdateSeqUpdate_UpdatePinnedMessagesChanged struct {
	UpdatePinnedMessagesChanged *UpdatePinnedMessagesChanged `protobuf:"bytes,39,opt,name=updatePinnedMessagesChanged,proto3,oneof" json:"updatePinnedMessagesChanged,omitempty"`
}
type UpdateSeqUpdate_UpdateGroupTitleChanged struct {
	UpdateGroupTitleChanged *UpdateGroupTitleChanged `protobuf:"bytes,40,opt,name=updateGroupTitleChanged,proto3,oneof" json:"updateGroupTitleChanged,omitempty"`
}
type UpdateSeqUpdate_UpdateGroupAvatarChanged struct {
	UpdateGroupAvatarChanged *UpdateGroupAvatarChanged `protobuf:"bytes,41,opt,name=updateGroupAvatarChanged,proto3,oneof" json:"updateGroupAvatarChanged,omitempty"`
}
type UpdateSeqUpdate_UpdateGroupAboutChanged struct {
	UpdateGroupAboutChanged *UpdateGroupAboutChanged `protobuf:"bytes,43,opt,name=updateGroupAboutChanged,proto3,oneof" json:"updateGroupAboutChanged,omitempty"`
}
type UpdateSeqUpdate_UpdateGroupOwnerChanged struct {
	UpdateGroupOwnerChanged *UpdateGroupOwnerChanged `protobuf:"bytes,44,opt,name=updateGroupOwnerChanged,proto3,oneof" json:"updateGroupOwnerChanged,omitempty"`
}
type UpdateSeqUpdate_UpdateGroupMembersUpdated struct {
	UpdateGroupMembersUpdated *UpdateGroupMembersUpdated `protobuf:"bytes,51,opt,name=updateGroupMembersUpdated,proto3,oneof" json:"updateGroupMembersUpdated,omitempty"`
}
type UpdateSeqUpdate_UpdateGroupMemberDiff struct {
	UpdateGroupMemberDiff *UpdateGroupMemberDiff `protobuf:"bytes,52,opt,name=updateGroupMemberDiff,proto3,oneof" json:"updateGroupMemberDiff,omitempty"`
}
type UpdateSeqUpdate_UpdateGroupMembersCountChanged struct {
	UpdateGroupMembersCountChanged *UpdateGroupMembersCountChanged `protobuf:"bytes,53,opt,name=updateGroupMembersCountChanged,proto3,oneof" json:"updateGroupMembersCountChanged,omitempty"`
}
type UpdateSeqUpdate_UpdateGroupMemberPermissionsChanged struct {
	UpdateGroupMemberPermissionsChanged *UpdateGroupMemberPermissionsChanged `protobuf:"bytes,55,opt,name=updateGroupMemberPermissionsChanged,proto3,oneof" json:"updateGroupMemberPermissionsChanged,omitempty"`
}
type UpdateSeqUpdate_UpdateGroupInviteObsolete struct {
	UpdateGroupInviteObsolete *UpdateGroupInviteObsolete `protobuf:"bytes,56,opt,name=updateGroupInviteObsolete,proto3,oneof" json:"updateGroupInviteObsolete,omitempty"`
}
type UpdateSeqUpdate_UpdateGroupUserInvitedObsolete struct {
	UpdateGroupUserInvitedObsolete *UpdateGroupUserInvitedObsolete `protobuf:"bytes,57,opt,name=updateGroupUserInvitedObsolete,proto3,oneof" json:"updateGroupUserInvitedObsolete,omitempty"`
}
type UpdateSeqUpdate_UpdateGroupUserLeaveObsolete struct {
	UpdateGroupUserLeaveObsolete *UpdateGroupUserLeaveObsolete `protobuf:"bytes,58,opt,name=updateGroupUserLeaveObsolete,proto3,oneof" json:"updateGroupUserLeaveObsolete,omitempty"`
}
type UpdateSeqUpdate_UpdateGroupUserKickObsolete struct {
	UpdateGroupUserKickObsolete *UpdateGroupUserKickObsolete `protobuf:"bytes,59,opt,name=updateGroupUserKickObsolete,proto3,oneof" json:"updateGroupUserKickObsolete,omitempty"`
}
type UpdateSeqUpdate_UpdateGroupMembersUpdateObsolete struct {
	UpdateGroupMembersUpdateObsolete *UpdateGroupMembersUpdateObsolete `protobuf:"bytes,60,opt,name=updateGroupMembersUpdateObsolete,proto3,oneof" json:"updateGroupMembersUpdateObsolete,omitempty"`
}
type UpdateSeqUpdate_UpdateGroupTitleChangedObsolete struct {
	UpdateGroupTitleChangedObsolete *UpdateGroupTitleChangedObsolete `protobuf:"bytes,61,opt,name=updateGroupTitleChangedObsolete,proto3,oneof" json:"updateGroupTitleChangedObsolete,omitempty"`
}
type UpdateSeqUpdate_UpdateGroupAboutChangedObsolete struct {
	UpdateGroupAboutChangedObsolete *UpdateGroupAboutChangedObsolete `protobuf:"bytes,63,opt,name=updateGroupAboutChangedObsolete,proto3,oneof" json:"updateGroupAboutChangedObsolete,omitempty"`
}
type UpdateSeqUpdate_UpdateGroupAvatarChangedObsolete struct {
	UpdateGroupAvatarChangedObsolete *UpdateGroupAvatarChangedObsolete `protobuf:"bytes,64,opt,name=updateGroupAvatarChangedObsolete,proto3,oneof" json:"updateGroupAvatarChangedObsolete,omitempty"`
}
type UpdateSeqUpdate_UpdateGroupShortnameChanged struct {
	UpdateGroupShortnameChanged *UpdateGroupShortnameChanged `protobuf:"bytes,65,opt,name=updateGroupShortnameChanged,proto3,oneof" json:"updateGroupShortnameChanged,omitempty"`
}
type UpdateSeqUpdate_UpdateStickerCollectionsChanged struct {
	UpdateStickerCollectionsChanged *UpdateStickerCollectionsChanged `protobuf:"bytes,66,opt,name=updateStickerCollectionsChanged,proto3,oneof" json:"updateStickerCollectionsChanged,omitempty"`
}
type UpdateSeqUpdate_UpdateStickerPackRemoved struct {
	UpdateStickerPackRemoved *UpdateStickerPackRemoved `protobuf:"bytes,67,opt,name=updateStickerPackRemoved,proto3,oneof" json:"updateStickerPackRemoved,omitempty"`
}
type UpdateSeqUpdate_UpdateStickerPackAdded struct {
	UpdateStickerPackAdded *UpdateStickerPackAdded `protobuf:"bytes,68,opt,name=updateStickerPackAdded,proto3,oneof" json:"updateStickerPackAdded,omitempty"`
}
type UpdateSeqUpdate_UpdatePauseNotifications struct {
	UpdatePauseNotifications *UpdatePauseNotifications `protobuf:"bytes,69,opt,name=updatePauseNotifications,proto3,oneof" json:"updatePauseNotifications,omitempty"`
}
type UpdateSeqUpdate_UpdateRestoreNotifications struct {
	UpdateRestoreNotifications *UpdateRestoreNotifications `protobuf:"bytes,70,opt,name=updateRestoreNotifications,proto3,oneof" json:"updateRestoreNotifications,omitempty"`
}
type UpdateSeqUpdate_UpdateTyping struct {
	UpdateTyping *UpdateTyping `protobuf:"bytes,71,opt,name=updateTyping,proto3,oneof" json:"updateTyping,omitempty"`
}
type UpdateSeqUpdate_UpdateTypingStop struct {
	UpdateTypingStop *UpdateTypingStop `protobuf:"bytes,72,opt,name=updateTypingStop,proto3,oneof" json:"updateTypingStop,omitempty"`
}
type UpdateSeqUpdate_UpdateUserOnline struct {
	UpdateUserOnline *UpdateUserOnline `protobuf:"bytes,73,opt,name=updateUserOnline,proto3,oneof" json:"updateUserOnline,omitempty"`
}
type UpdateSeqUpdate_UpdateUserOffline struct {
	UpdateUserOffline *UpdateUserOffline `protobuf:"bytes,74,opt,name=updateUserOffline,proto3,oneof" json:"updateUserOffline,omitempty"`
}
type UpdateSeqUpdate_UpdateUserLastSeen struct {
	UpdateUserLastSeen *UpdateUserLastSeen `protobuf:"bytes,75,opt,name=updateUserLastSeen,proto3,oneof" json:"updateUserLastSeen,omitempty"`
}
type UpdateSeqUpdate_UpdateGroupOnline struct {
	UpdateGroupOnline *UpdateGroupOnline `protobuf:"bytes,76,opt,name=updateGroupOnline,proto3,oneof" json:"updateGroupOnline,omitempty"`
}
type UpdateSeqUpdate_UpdateEventBusDeviceConnected struct {
	UpdateEventBusDeviceConnected *UpdateEventBusDeviceConnected `protobuf:"bytes,77,opt,name=updateEventBusDeviceConnected,proto3,oneof" json:"updateEventBusDeviceConnected,omitempty"`
}
type UpdateSeqUpdate_UpdateEventBusDeviceDisconnected struct {
	UpdateEventBusDeviceDisconnected *UpdateEventBusDeviceDisconnected `protobuf:"bytes,78,opt,name=updateEventBusDeviceDisconnected,proto3,oneof" json:"updateEventBusDeviceDisconnected,omitempty"`
}
type UpdateSeqUpdate_UpdateEventBusMessage struct {
	UpdateEventBusMessage *UpdateEventBusMessage `protobuf:"bytes,79,opt,name=updateEventBusMessage,proto3,oneof" json:"updateEventBusMessage,omitempty"`
}
type UpdateSeqUpdate_UpdateEventBusDisposed struct {
	UpdateEventBusDisposed *UpdateEventBusDisposed `protobuf:"bytes,80,opt,name=updateEventBusDisposed,proto3,oneof" json:"updateEventBusDisposed,omitempty"`
}
type UpdateSeqUpdate_UpdateIncomingCallDeprecated struct {
	UpdateIncomingCallDeprecated *UpdateIncomingCallDeprecated `protobuf:"bytes,81,opt,name=updateIncomingCallDeprecated,proto3,oneof" json:"updateIncomingCallDeprecated,omitempty"`
}
type UpdateSeqUpdate_UpdateIncomingCall struct {
	UpdateIncomingCall *UpdateIncomingCall `protobuf:"bytes,82,opt,name=updateIncomingCall,proto3,oneof" json:"updateIncomingCall,omitempty"`
}
type UpdateSeqUpdate_UpdateCallHandled struct {
	UpdateCallHandled *UpdateCallHandled `protobuf:"bytes,83,opt,name=updateCallHandled,proto3,oneof" json:"updateCallHandled,omitempty"`
}
type UpdateSeqUpdate_UpdateCallDisposed struct {
	UpdateCallDisposed *UpdateCallDisposed `protobuf:"bytes,84,opt,name=updateCallDisposed,proto3,oneof" json:"updateCallDisposed,omitempty"`
}
type UpdateSeqUpdate_UpdateParameterChanged struct {
	UpdateParameterChanged *UpdateParameterChanged `protobuf:"bytes,85,opt,name=updateParameterChanged,proto3,oneof" json:"updateParameterChanged,omitempty"`
}
type UpdateSeqUpdate_UpdateRawUpdate struct {
	UpdateRawUpdate *UpdateRawUpdate `protobuf:"bytes,86,opt,name=updateRawUpdate,proto3,oneof" json:"updateRawUpdate,omitempty"`
}
type UpdateSeqUpdate_UpdateEmptyUpdate struct {
	UpdateEmptyUpdate *UpdateEmptyUpdate `protobuf:"bytes,87,opt,name=updateEmptyUpdate,proto3,oneof" json:"updateEmptyUpdate,omitempty"`
}
type UpdateSeqUpdate_UpdateCountersChanged struct {
	UpdateCountersChanged *UpdateCountersChanged `protobuf:"bytes,88,opt,name=updateCountersChanged,proto3,oneof" json:"updateCountersChanged,omitempty"`
}
type UpdateSeqUpdate_UpdateConfig struct {
	UpdateConfig *UpdateConfig `protobuf:"bytes,89,opt,name=updateConfig,proto3,oneof" json:"updateConfig,omitempty"`
}
type UpdateSeqUpdate_UpdateSpaceModified struct {
	UpdateSpaceModified *UpdateSpaceModified `protobuf:"bytes,90,opt,name=updateSpaceModified,proto3,oneof" json:"updateSpaceModified,omitempty"`
}
type UpdateSeqUpdate_UpdateSpaceMemberModified struct {
	UpdateSpaceMemberModified *UpdateSpaceMemberModified `protobuf:"bytes,91,opt,name=updateSpaceMemberModified,proto3,oneof" json:"updateSpaceMemberModified,omitempty"`
}
type UpdateSeqUpdate_UpdateMessageRejectedByHook struct {
	UpdateMessageRejectedByHook *UpdateMessageRejectedByHook `protobuf:"bytes,92,opt,name=updateMessageRejectedByHook,proto3,oneof" json:"updateMessageRejectedByHook,omitempty"`
}
type UpdateSeqUpdate_UpdateMessageEditRejectedByHook struct {
	UpdateMessageEditRejectedByHook *UpdateMessageEditRejectedByHook `protobuf:"bytes,93,opt,name=updateMessageEditRejectedByHook,proto3,oneof" json:"updateMessageEditRejectedByHook,omitempty"`
}
type UpdateSeqUpdate_UpdateUser struct {
	UpdateUser *UpdateUser `protobuf:"bytes,94,opt,name=updateUser,proto3,oneof" json:"updateUser,omitempty"`
}
type UpdateSeqUpdate_UpdateFeatureFlagChanged struct {
	UpdateFeatureFlagChanged *UpdateFeatureFlagChanged `protobuf:"bytes,95,opt,name=updateFeatureFlagChanged,proto3,oneof" json:"updateFeatureFlagChanged,omitempty"`
}
type UpdateSeqUpdate_UpdateThreadCreated struct {
	UpdateThreadCreated *UpdateThreadCreated `protobuf:"bytes,96,opt,name=updateThreadCreated,proto3,oneof" json:"updateThreadCreated,omitempty"`
}
type UpdateSeqUpdate_UpdateThreadLifted struct {
	UpdateThreadLifted *UpdateThreadLifted `protobuf:"bytes,97,opt,name=updateThreadLifted,proto3,oneof" json:"updateThreadLifted,omitempty"`
}
type UpdateSeqUpdate_UpdateGroup struct {
	UpdateGroup *UpdateGroup `protobuf:"bytes,98,opt,name=updateGroup,proto3,oneof" json:"updateGroup,omitempty"`
}
type UpdateSeqUpdate_UpdateGroupMemberInvited struct {
	UpdateGroupMemberInvited *UpdateGroupMemberInvited `protobuf:"bytes,99,opt,name=updateGroupMemberInvited,proto3,oneof" json:"updateGroupMemberInvited,omitempty"`
}
type UpdateSeqUpdate_MessageReactionsUpdate struct {
	MessageReactionsUpdate *MessageReactionsUpdate `protobuf:"bytes,100,opt,name=messageReactionsUpdate,proto3,oneof" json:"messageReactionsUpdate,omitempty"`
}

func (*UpdateSeqUpdate_UpdateForceReloadState) isUpdateSeqUpdate_Update()              {}
func (*UpdateSeqUpdate_UpdateUserAvatarChanged) isUpdateSeqUpdate_Update()             {}
func (*UpdateSeqUpdate_UpdateUserNameChanged) isUpdateSeqUpdate_Update()               {}
func (*UpdateSeqUpdate_UpdateUserLocalNameChanged) isUpdateSeqUpdate_Update()          {}
func (*UpdateSeqUpdate_UpdateUserContactsChanged) isUpdateSeqUpdate_Update()           {}
func (*UpdateSeqUpdate_UpdateUserNickChanged) isUpdateSeqUpdate_Update()               {}
func (*UpdateSeqUpdate_UpdateUserAboutChanged) isUpdateSeqUpdate_Update()              {}
func (*UpdateSeqUpdate_UpdateUserPreferredLanguagesChanged) isUpdateSeqUpdate_Update() {}
func (*UpdateSeqUpdate_UpdateUserTimeZoneChanged) isUpdateSeqUpdate_Update()           {}
func (*UpdateSeqUpdate_UpdateUserBotCommandsChanged) isUpdateSeqUpdate_Update()        {}
func (*UpdateSeqUpdate_UpdateUserExtChanged) isUpdateSeqUpdate_Update()                {}
func (*UpdateSeqUpdate_UpdateUserFullExtChanged) isUpdateSeqUpdate_Update()            {}
func (*UpdateSeqUpdate_UpdateUserSexChanged) isUpdateSeqUpdate_Update()                {}
func (*UpdateSeqUpdate_UpdateUserCustomProfileChanged) isUpdateSeqUpdate_Update()      {}
func (*UpdateSeqUpdate_UpdateUserStatusChanged) isUpdateSeqUpdate_Update()             {}
func (*UpdateSeqUpdate_UpdateContactRegistered) isUpdateSeqUpdate_Update()             {}
func (*UpdateSeqUpdate_UpdateContactsAdded) isUpdateSeqUpdate_Update()                 {}
func (*UpdateSeqUpdate_UpdateContactsAddTaskSuspended) isUpdateSeqUpdate_Update()      {}
func (*UpdateSeqUpdate_UpdateContactsRemoved) isUpdateSeqUpdate_Update()               {}
func (*UpdateSeqUpdate_UpdateUserBlocked) isUpdateSeqUpdate_Update()                   {}
func (*UpdateSeqUpdate_UpdateUserUnblocked) isUpdateSeqUpdate_Update()                 {}
func (*UpdateSeqUpdate_UpdateInteractiveMediaEvent) isUpdateSeqUpdate_Update()         {}
func (*UpdateSeqUpdate_UpdateMessage) isUpdateSeqUpdate_Update()                       {}
func (*UpdateSeqUpdate_UpdateMessageContentChanged) isUpdateSeqUpdate_Update()         {}
func (*UpdateSeqUpdate_UpdateMessageSent) isUpdateSeqUpdate_Update()                   {}
func (*UpdateSeqUpdate_UpdateMessageReceived) isUpdateSeqUpdate_Update()               {}
func (*UpdateSeqUpdate_UpdateMessageRead) isUpdateSeqUpdate_Update()                   {}
func (*UpdateSeqUpdate_UpdateMessageReadByMe) isUpdateSeqUpdate_Update()               {}
func (*UpdateSeqUpdate_UpdateMessageDelete) isUpdateSeqUpdate_Update()                 {}
func (*UpdateSeqUpdate_UpdateChatClear) isUpdateSeqUpdate_Update()                     {}
func (*UpdateSeqUpdate_UpdateChatDelete) isUpdateSeqUpdate_Update()                    {}
func (*UpdateSeqUpdate_UpdateChatArchive) isUpdateSeqUpdate_Update()                   {}
func (*UpdateSeqUpdate_UpdateChatGroupsChanged) isUpdateSeqUpdate_Update()             {}
func (*UpdateSeqUpdate_UpdateReactionsUpdate) isUpdateSeqUpdate_Update()               {}
func (*UpdateSeqUpdate_UpdateDialogFavouriteChanged) isUpdateSeqUpdate_Update()        {}
func (*UpdateSeqUpdate_UpdatePinnedMessagesChanged) isUpdateSeqUpdate_Update()         {}
func (*UpdateSeqUpdate_UpdateGroupTitleChanged) isUpdateSeqUpdate_Update()             {}
func (*UpdateSeqUpdate_UpdateGroupAvatarChanged) isUpdateSeqUpdate_Update()            {}
func (*UpdateSeqUpdate_UpdateGroupAboutChanged) isUpdateSeqUpdate_Update()             {}
func (*UpdateSeqUpdate_UpdateGroupOwnerChanged) isUpdateSeqUpdate_Update()             {}
func (*UpdateSeqUpdate_UpdateGroupMembersUpdated) isUpdateSeqUpdate_Update()           {}
func (*UpdateSeqUpdate_UpdateGroupMemberDiff) isUpdateSeqUpdate_Update()               {}
func (*UpdateSeqUpdate_UpdateGroupMembersCountChanged) isUpdateSeqUpdate_Update()      {}
func (*UpdateSeqUpdate_UpdateGroupMemberPermissionsChanged) isUpdateSeqUpdate_Update() {}
func (*UpdateSeqUpdate_UpdateGroupInviteObsolete) isUpdateSeqUpdate_Update()           {}
func (*UpdateSeqUpdate_UpdateGroupUserInvitedObsolete) isUpdateSeqUpdate_Update()      {}
func (*UpdateSeqUpdate_UpdateGroupUserLeaveObsolete) isUpdateSeqUpdate_Update()        {}
func (*UpdateSeqUpdate_UpdateGroupUserKickObsolete) isUpdateSeqUpdate_Update()         {}
func (*UpdateSeqUpdate_UpdateGroupMembersUpdateObsolete) isUpdateSeqUpdate_Update()    {}
func (*UpdateSeqUpdate_UpdateGroupTitleChangedObsolete) isUpdateSeqUpdate_Update()     {}
func (*UpdateSeqUpdate_UpdateGroupAboutChangedObsolete) isUpdateSeqUpdate_Update()     {}
func (*UpdateSeqUpdate_UpdateGroupAvatarChangedObsolete) isUpdateSeqUpdate_Update()    {}
func (*UpdateSeqUpdate_UpdateGroupShortnameChanged) isUpdateSeqUpdate_Update()         {}
func (*UpdateSeqUpdate_UpdateStickerCollectionsChanged) isUpdateSeqUpdate_Update()     {}
func (*UpdateSeqUpdate_UpdateStickerPackRemoved) isUpdateSeqUpdate_Update()            {}
func (*UpdateSeqUpdate_UpdateStickerPackAdded) isUpdateSeqUpdate_Update()              {}
func (*UpdateSeqUpdate_UpdatePauseNotifications) isUpdateSeqUpdate_Update()            {}
func (*UpdateSeqUpdate_UpdateRestoreNotifications) isUpdateSeqUpdate_Update()          {}
func (*UpdateSeqUpdate_UpdateTyping) isUpdateSeqUpdate_Update()                        {}
func (*UpdateSeqUpdate_UpdateTypingStop) isUpdateSeqUpdate_Update()                    {}
func (*UpdateSeqUpdate_UpdateUserOnline) isUpdateSeqUpdate_Update()                    {}
func (*UpdateSeqUpdate_UpdateUserOffline) isUpdateSeqUpdate_Update()                   {}
func (*UpdateSeqUpdate_UpdateUserLastSeen) isUpdateSeqUpdate_Update()                  {}
func (*UpdateSeqUpdate_UpdateGroupOnline) isUpdateSeqUpdate_Update()                   {}
func (*UpdateSeqUpdate_UpdateEventBusDeviceConnected) isUpdateSeqUpdate_Update()       {}
func (*UpdateSeqUpdate_UpdateEventBusDeviceDisconnected) isUpdateSeqUpdate_Update()    {}
func (*UpdateSeqUpdate_UpdateEventBusMessage) isUpdateSeqUpdate_Update()               {}
func (*UpdateSeqUpdate_UpdateEventBusDisposed) isUpdateSeqUpdate_Update()              {}
func (*UpdateSeqUpdate_UpdateIncomingCallDeprecated) isUpdateSeqUpdate_Update()        {}
func (*UpdateSeqUpdate_UpdateIncomingCall) isUpdateSeqUpdate_Update()                  {}
func (*UpdateSeqUpdate_UpdateCallHandled) isUpdateSeqUpdate_Update()                   {}
func (*UpdateSeqUpdate_UpdateCallDisposed) isUpdateSeqUpdate_Update()                  {}
func (*UpdateSeqUpdate_UpdateParameterChanged) isUpdateSeqUpdate_Update()              {}
func (*UpdateSeqUpdate_UpdateRawUpdate) isUpdateSeqUpdate_Update()                     {}
func (*UpdateSeqUpdate_UpdateEmptyUpdate) isUpdateSeqUpdate_Update()                   {}
func (*UpdateSeqUpdate_UpdateCountersChanged) isUpdateSeqUpdate_Update()               {}
func (*UpdateSeqUpdate_UpdateConfig) isUpdateSeqUpdate_Update()                        {}
func (*UpdateSeqUpdate_UpdateSpaceModified) isUpdateSeqUpdate_Update()                 {}
func (*UpdateSeqUpdate_UpdateSpaceMemberModified) isUpdateSeqUpdate_Update()           {}
func (*UpdateSeqUpdate_UpdateMessageRejectedByHook) isUpdateSeqUpdate_Update()         {}
func (*UpdateSeqUpdate_UpdateMessageEditRejectedByHook) isUpdateSeqUpdate_Update()     {}
func (*UpdateSeqUpdate_UpdateUser) isUpdateSeqUpdate_Update()                          {}
func (*UpdateSeqUpdate_UpdateFeatureFlagChanged) isUpdateSeqUpdate_Update()            {}
func (*UpdateSeqUpdate_UpdateThreadCreated) isUpdateSeqUpdate_Update()                 {}
func (*UpdateSeqUpdate_UpdateThreadLifted) isUpdateSeqUpdate_Update()                  {}
func (*UpdateSeqUpdate_UpdateGroup) isUpdateSeqUpdate_Update()                         {}
func (*UpdateSeqUpdate_UpdateGroupMemberInvited) isUpdateSeqUpdate_Update()            {}
func (*UpdateSeqUpdate_MessageReactionsUpdate) isUpdateSeqUpdate_Update()              {}

func (m *UpdateSeqUpdate) GetUpdate() isUpdateSeqUpdate_Update {
	if m != nil {
		return m.Update
	}
	return nil
}

func (m *UpdateSeqUpdate) GetSeq() int32 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *UpdateSeqUpdate) GetState() []byte {
	if m != nil {
		return m.State
	}
	return nil
}

func (m *UpdateSeqUpdate) GetUpdateHeader() int32 {
	if m != nil {
		return m.UpdateHeader
	}
	return 0
}

func (m *UpdateSeqUpdate) GetUpdateForceReloadState() *UpdateForceReloadState {
	if x, ok := m.GetUpdate().(*UpdateSeqUpdate_UpdateForceReloadState); ok {
		return x.UpdateForceReloadState
	}
	return nil
}

func (m *UpdateSeqUpdate) GetUpdateUserAvatarChanged() *UpdateUserAvatarChanged {
	if x, ok := m.GetUpdate().(*UpdateSeqUpdate_UpdateUserAvatarChanged); ok {
		return x.UpdateUserAvatarChanged
	}
	return nil
}

func (m *UpdateSeqUpdate) GetUpdateUserNameChanged() *UpdateUserNameChanged {
	if x, ok := m.GetUpdate().(*UpdateSeqUpdate_UpdateUserNameChanged); ok {
		return x.UpdateUserNameChanged
	}
	return nil
}

func (m *UpdateSeqUpdate) GetUpdateUserLocalNameChanged() *UpdateUserLocalNameChanged {
	if x, ok := m.GetUpdate().(*UpdateSeqUpdate_UpdateUserLocalNameChanged); ok {
		return x.UpdateUserLocalNameChanged
	}
	return nil
}

func (m *UpdateSeqUpdate) GetUpdateUserContactsChanged() *UpdateUserContactsChanged {
	if x, ok := m.GetUpdate().(*UpdateSeqUpdate_UpdateUserContactsChanged); ok {
		return x.UpdateUserContactsChanged
	}
	return nil
}

func (m *UpdateSeqUpdate) GetUpdateUserNickChanged() *UpdateUserNickChanged {
	if x, ok := m.GetUpdate().(*UpdateSeqUpdate_UpdateUserNickChanged); ok {
		return x.UpdateUserNickChanged
	}
	return nil
}

func (m *UpdateSeqUpdate) GetUpdateUserAboutChanged() *UpdateUserAboutChanged {
	if x, ok := m.GetUpdate().(*UpdateSeqUpdate_UpdateUserAboutChanged); ok {
		return x.UpdateUserAboutChanged
	}
	return nil
}

func (m *UpdateSeqUpdate) GetUpdateUserPreferredLanguagesChanged() *UpdateUserPreferredLanguagesChanged {
	if x, ok := m.GetUpdate().(*UpdateSeqUpdate_UpdateUserPreferredLanguagesChanged); ok {
		return x.UpdateUserPreferredLanguagesChanged
	}
	return nil
}

func (m *UpdateSeqUpdate) GetUpdateUserTimeZoneChanged() *UpdateUserTimeZoneChanged {
	if x, ok := m.GetUpdate().(*UpdateSeqUpdate_UpdateUserTimeZoneChanged); ok {
		return x.UpdateUserTimeZoneChanged
	}
	return nil
}

func (m *UpdateSeqUpdate) GetUpdateUserBotCommandsChanged() *UpdateUserBotCommandsChanged {
	if x, ok := m.GetUpdate().(*UpdateSeqUpdate_UpdateUserBotCommandsChanged); ok {
		return x.UpdateUserBotCommandsChanged
	}
	return nil
}

func (m *UpdateSeqUpdate) GetUpdateUserExtChanged() *UpdateUserExtChanged {
	if x, ok := m.GetUpdate().(*UpdateSeqUpdate_UpdateUserExtChanged); ok {
		return x.UpdateUserExtChanged
	}
	return nil
}

func (m *UpdateSeqUpdate) GetUpdateUserFullExtChanged() *UpdateUserFullExtChanged {
	if x, ok := m.GetUpdate().(*UpdateSeqUpdate_UpdateUserFullExtChanged); ok {
		return x.UpdateUserFullExtChanged
	}
	return nil
}

func (m *UpdateSeqUpdate) GetUpdateUserSexChanged() *UpdateUserSexChanged {
	if x, ok := m.GetUpdate().(*UpdateSeqUpdate_UpdateUserSexChanged); ok {
		return x.UpdateUserSexChanged
	}
	return nil
}

func (m *UpdateSeqUpdate) GetUpdateUserCustomProfileChanged() *UpdateUserCustomProfileChanged {
	if x, ok := m.GetUpdate().(*UpdateSeqUpdate_UpdateUserCustomProfileChanged); ok {
		return x.UpdateUserCustomProfileChanged
	}
	return nil
}

func (m *UpdateSeqUpdate) GetUpdateUserStatusChanged() *UpdateUserStatusChanged {
	if x, ok := m.GetUpdate().(*UpdateSeqUpdate_UpdateUserStatusChanged); ok {
		return x.UpdateUserStatusChanged
	}
	return nil
}

func (m *UpdateSeqUpdate) GetUpdateContactRegistered() *UpdateContactRegistered {
	if x, ok := m.GetUpdate().(*UpdateSeqUpdate_UpdateContactRegistered); ok {
		return x.UpdateContactRegistered
	}
	return nil
}

func (m *UpdateSeqUpdate) GetUpdateContactsAdded() *UpdateContactsAdded {
	if x, ok := m.GetUpdate().(*UpdateSeqUpdate_UpdateContactsAdded); ok {
		return x.UpdateContactsAdded
	}
	return nil
}

func (m *UpdateSeqUpdate) GetUpdateContactsAddTaskSuspended() *UpdateContactsAddTaskSuspended {
	if x, ok := m.GetUpdate().(*UpdateSeqUpdate_UpdateContactsAddTaskSuspended); ok {
		return x.UpdateContactsAddTaskSuspended
	}
	return nil
}

func (m *UpdateSeqUpdate) GetUpdateContactsRemoved() *UpdateContactsRemoved {
	if x, ok := m.GetUpdate().(*UpdateSeqUpdate_UpdateContactsRemoved); ok {
		return x.UpdateContactsRemoved
	}
	return nil
}

func (m *UpdateSeqUpdate) GetUpdateUserBlocked() *UpdateUserBlocked {
	if x, ok := m.GetUpdate().(*UpdateSeqUpdate_UpdateUserBlocked); ok {
		return x.UpdateUserBlocked
	}
	return nil
}

func (m *UpdateSeqUpdate) GetUpdateUserUnblocked() *UpdateUserUnblocked {
	if x, ok := m.GetUpdate().(*UpdateSeqUpdate_UpdateUserUnblocked); ok {
		return x.UpdateUserUnblocked
	}
	return nil
}

func (m *UpdateSeqUpdate) GetUpdateInteractiveMediaEvent() *UpdateInteractiveMediaEvent {
	if x, ok := m.GetUpdate().(*UpdateSeqUpdate_UpdateInteractiveMediaEvent); ok {
		return x.UpdateInteractiveMediaEvent
	}
	return nil
}

func (m *UpdateSeqUpdate) GetUpdateMessage() *UpdateMessage {
	if x, ok := m.GetUpdate().(*UpdateSeqUpdate_UpdateMessage); ok {
		return x.UpdateMessage
	}
	return nil
}

func (m *UpdateSeqUpdate) GetUpdateMessageContentChanged() *UpdateMessageContentChanged {
	if x, ok := m.GetUpdate().(*UpdateSeqUpdate_UpdateMessageContentChanged); ok {
		return x.UpdateMessageContentChanged
	}
	return nil
}

func (m *UpdateSeqUpdate) GetUpdateMessageSent() *UpdateMessageSent {
	if x, ok := m.GetUpdate().(*UpdateSeqUpdate_UpdateMessageSent); ok {
		return x.UpdateMessageSent
	}
	return nil
}

func (m *UpdateSeqUpdate) GetUpdateMessageReceived() *UpdateMessageReceived {
	if x, ok := m.GetUpdate().(*UpdateSeqUpdate_UpdateMessageReceived); ok {
		return x.UpdateMessageReceived
	}
	return nil
}

func (m *UpdateSeqUpdate) GetUpdateMessageRead() *UpdateMessageRead {
	if x, ok := m.GetUpdate().(*UpdateSeqUpdate_UpdateMessageRead); ok {
		return x.UpdateMessageRead
	}
	return nil
}

func (m *UpdateSeqUpdate) GetUpdateMessageReadByMe() *UpdateMessageReadByMe {
	if x, ok := m.GetUpdate().(*UpdateSeqUpdate_UpdateMessageReadByMe); ok {
		return x.UpdateMessageReadByMe
	}
	return nil
}

func (m *UpdateSeqUpdate) GetUpdateMessageDelete() *UpdateMessageDelete {
	if x, ok := m.GetUpdate().(*UpdateSeqUpdate_UpdateMessageDelete); ok {
		return x.UpdateMessageDelete
	}
	return nil
}

func (m *UpdateSeqUpdate) GetUpdateChatClear() *UpdateChatClear {
	if x, ok := m.GetUpdate().(*UpdateSeqUpdate_UpdateChatClear); ok {
		return x.UpdateChatClear
	}
	return nil
}

func (m *UpdateSeqUpdate) GetUpdateChatDelete() *UpdateChatDelete {
	if x, ok := m.GetUpdate().(*UpdateSeqUpdate_UpdateChatDelete); ok {
		return x.UpdateChatDelete
	}
	return nil
}

func (m *UpdateSeqUpdate) GetUpdateChatArchive() *UpdateChatArchive {
	if x, ok := m.GetUpdate().(*UpdateSeqUpdate_UpdateChatArchive); ok {
		return x.UpdateChatArchive
	}
	return nil
}

func (m *UpdateSeqUpdate) GetUpdateChatGroupsChanged() *UpdateChatGroupsChanged {
	if x, ok := m.GetUpdate().(*UpdateSeqUpdate_UpdateChatGroupsChanged); ok {
		return x.UpdateChatGroupsChanged
	}
	return nil
}

func (m *UpdateSeqUpdate) GetUpdateReactionsUpdate() *UpdateReactionsUpdate {
	if x, ok := m.GetUpdate().(*UpdateSeqUpdate_UpdateReactionsUpdate); ok {
		return x.UpdateReactionsUpdate
	}
	return nil
}

func (m *UpdateSeqUpdate) GetUpdateDialogFavouriteChanged() *UpdateDialogFavouriteChanged {
	if x, ok := m.GetUpdate().(*UpdateSeqUpdate_UpdateDialogFavouriteChanged); ok {
		return x.UpdateDialogFavouriteChanged
	}
	return nil
}

func (m *UpdateSeqUpdate) GetUpdatePinnedMessagesChanged() *UpdatePinnedMessagesChanged {
	if x, ok := m.GetUpdate().(*UpdateSeqUpdate_UpdatePinnedMessagesChanged); ok {
		return x.UpdatePinnedMessagesChanged
	}
	return nil
}

func (m *UpdateSeqUpdate) GetUpdateGroupTitleChanged() *UpdateGroupTitleChanged {
	if x, ok := m.GetUpdate().(*UpdateSeqUpdate_UpdateGroupTitleChanged); ok {
		return x.UpdateGroupTitleChanged
	}
	return nil
}

func (m *UpdateSeqUpdate) GetUpdateGroupAvatarChanged() *UpdateGroupAvatarChanged {
	if x, ok := m.GetUpdate().(*UpdateSeqUpdate_UpdateGroupAvatarChanged); ok {
		return x.UpdateGroupAvatarChanged
	}
	return nil
}

func (m *UpdateSeqUpdate) GetUpdateGroupAboutChanged() *UpdateGroupAboutChanged {
	if x, ok := m.GetUpdate().(*UpdateSeqUpdate_UpdateGroupAboutChanged); ok {
		return x.UpdateGroupAboutChanged
	}
	return nil
}

func (m *UpdateSeqUpdate) GetUpdateGroupOwnerChanged() *UpdateGroupOwnerChanged {
	if x, ok := m.GetUpdate().(*UpdateSeqUpdate_UpdateGroupOwnerChanged); ok {
		return x.UpdateGroupOwnerChanged
	}
	return nil
}

func (m *UpdateSeqUpdate) GetUpdateGroupMembersUpdated() *UpdateGroupMembersUpdated {
	if x, ok := m.GetUpdate().(*UpdateSeqUpdate_UpdateGroupMembersUpdated); ok {
		return x.UpdateGroupMembersUpdated
	}
	return nil
}

func (m *UpdateSeqUpdate) GetUpdateGroupMemberDiff() *UpdateGroupMemberDiff {
	if x, ok := m.GetUpdate().(*UpdateSeqUpdate_UpdateGroupMemberDiff); ok {
		return x.UpdateGroupMemberDiff
	}
	return nil
}

func (m *UpdateSeqUpdate) GetUpdateGroupMembersCountChanged() *UpdateGroupMembersCountChanged {
	if x, ok := m.GetUpdate().(*UpdateSeqUpdate_UpdateGroupMembersCountChanged); ok {
		return x.UpdateGroupMembersCountChanged
	}
	return nil
}

func (m *UpdateSeqUpdate) GetUpdateGroupMemberPermissionsChanged() *UpdateGroupMemberPermissionsChanged {
	if x, ok := m.GetUpdate().(*UpdateSeqUpdate_UpdateGroupMemberPermissionsChanged); ok {
		return x.UpdateGroupMemberPermissionsChanged
	}
	return nil
}

func (m *UpdateSeqUpdate) GetUpdateGroupInviteObsolete() *UpdateGroupInviteObsolete {
	if x, ok := m.GetUpdate().(*UpdateSeqUpdate_UpdateGroupInviteObsolete); ok {
		return x.UpdateGroupInviteObsolete
	}
	return nil
}

func (m *UpdateSeqUpdate) GetUpdateGroupUserInvitedObsolete() *UpdateGroupUserInvitedObsolete {
	if x, ok := m.GetUpdate().(*UpdateSeqUpdate_UpdateGroupUserInvitedObsolete); ok {
		return x.UpdateGroupUserInvitedObsolete
	}
	return nil
}

func (m *UpdateSeqUpdate) GetUpdateGroupUserLeaveObsolete() *UpdateGroupUserLeaveObsolete {
	if x, ok := m.GetUpdate().(*UpdateSeqUpdate_UpdateGroupUserLeaveObsolete); ok {
		return x.UpdateGroupUserLeaveObsolete
	}
	return nil
}

func (m *UpdateSeqUpdate) GetUpdateGroupUserKickObsolete() *UpdateGroupUserKickObsolete {
	if x, ok := m.GetUpdate().(*UpdateSeqUpdate_UpdateGroupUserKickObsolete); ok {
		return x.UpdateGroupUserKickObsolete
	}
	return nil
}

func (m *UpdateSeqUpdate) GetUpdateGroupMembersUpdateObsolete() *UpdateGroupMembersUpdateObsolete {
	if x, ok := m.GetUpdate().(*UpdateSeqUpdate_UpdateGroupMembersUpdateObsolete); ok {
		return x.UpdateGroupMembersUpdateObsolete
	}
	return nil
}

func (m *UpdateSeqUpdate) GetUpdateGroupTitleChangedObsolete() *UpdateGroupTitleChangedObsolete {
	if x, ok := m.GetUpdate().(*UpdateSeqUpdate_UpdateGroupTitleChangedObsolete); ok {
		return x.UpdateGroupTitleChangedObsolete
	}
	return nil
}

func (m *UpdateSeqUpdate) GetUpdateGroupAboutChangedObsolete() *UpdateGroupAboutChangedObsolete {
	if x, ok := m.GetUpdate().(*UpdateSeqUpdate_UpdateGroupAboutChangedObsolete); ok {
		return x.UpdateGroupAboutChangedObsolete
	}
	return nil
}

func (m *UpdateSeqUpdate) GetUpdateGroupAvatarChangedObsolete() *UpdateGroupAvatarChangedObsolete {
	if x, ok := m.GetUpdate().(*UpdateSeqUpdate_UpdateGroupAvatarChangedObsolete); ok {
		return x.UpdateGroupAvatarChangedObsolete
	}
	return nil
}

func (m *UpdateSeqUpdate) GetUpdateGroupShortnameChanged() *UpdateGroupShortnameChanged {
	if x, ok := m.GetUpdate().(*UpdateSeqUpdate_UpdateGroupShortnameChanged); ok {
		return x.UpdateGroupShortnameChanged
	}
	return nil
}

func (m *UpdateSeqUpdate) GetUpdateStickerCollectionsChanged() *UpdateStickerCollectionsChanged {
	if x, ok := m.GetUpdate().(*UpdateSeqUpdate_UpdateStickerCollectionsChanged); ok {
		return x.UpdateStickerCollectionsChanged
	}
	return nil
}

func (m *UpdateSeqUpdate) GetUpdateStickerPackRemoved() *UpdateStickerPackRemoved {
	if x, ok := m.GetUpdate().(*UpdateSeqUpdate_UpdateStickerPackRemoved); ok {
		return x.UpdateStickerPackRemoved
	}
	return nil
}

func (m *UpdateSeqUpdate) GetUpdateStickerPackAdded() *UpdateStickerPackAdded {
	if x, ok := m.GetUpdate().(*UpdateSeqUpdate_UpdateStickerPackAdded); ok {
		return x.UpdateStickerPackAdded
	}
	return nil
}

func (m *UpdateSeqUpdate) GetUpdatePauseNotifications() *UpdatePauseNotifications {
	if x, ok := m.GetUpdate().(*UpdateSeqUpdate_UpdatePauseNotifications); ok {
		return x.UpdatePauseNotifications
	}
	return nil
}

func (m *UpdateSeqUpdate) GetUpdateRestoreNotifications() *UpdateRestoreNotifications {
	if x, ok := m.GetUpdate().(*UpdateSeqUpdate_UpdateRestoreNotifications); ok {
		return x.UpdateRestoreNotifications
	}
	return nil
}

func (m *UpdateSeqUpdate) GetUpdateTyping() *UpdateTyping {
	if x, ok := m.GetUpdate().(*UpdateSeqUpdate_UpdateTyping); ok {
		return x.UpdateTyping
	}
	return nil
}

func (m *UpdateSeqUpdate) GetUpdateTypingStop() *UpdateTypingStop {
	if x, ok := m.GetUpdate().(*UpdateSeqUpdate_UpdateTypingStop); ok {
		return x.UpdateTypingStop
	}
	return nil
}

func (m *UpdateSeqUpdate) GetUpdateUserOnline() *UpdateUserOnline {
	if x, ok := m.GetUpdate().(*UpdateSeqUpdate_UpdateUserOnline); ok {
		return x.UpdateUserOnline
	}
	return nil
}

func (m *UpdateSeqUpdate) GetUpdateUserOffline() *UpdateUserOffline {
	if x, ok := m.GetUpdate().(*UpdateSeqUpdate_UpdateUserOffline); ok {
		return x.UpdateUserOffline
	}
	return nil
}

func (m *UpdateSeqUpdate) GetUpdateUserLastSeen() *UpdateUserLastSeen {
	if x, ok := m.GetUpdate().(*UpdateSeqUpdate_UpdateUserLastSeen); ok {
		return x.UpdateUserLastSeen
	}
	return nil
}

func (m *UpdateSeqUpdate) GetUpdateGroupOnline() *UpdateGroupOnline {
	if x, ok := m.GetUpdate().(*UpdateSeqUpdate_UpdateGroupOnline); ok {
		return x.UpdateGroupOnline
	}
	return nil
}

func (m *UpdateSeqUpdate) GetUpdateEventBusDeviceConnected() *UpdateEventBusDeviceConnected {
	if x, ok := m.GetUpdate().(*UpdateSeqUpdate_UpdateEventBusDeviceConnected); ok {
		return x.UpdateEventBusDeviceConnected
	}
	return nil
}

func (m *UpdateSeqUpdate) GetUpdateEventBusDeviceDisconnected() *UpdateEventBusDeviceDisconnected {
	if x, ok := m.GetUpdate().(*UpdateSeqUpdate_UpdateEventBusDeviceDisconnected); ok {
		return x.UpdateEventBusDeviceDisconnected
	}
	return nil
}

func (m *UpdateSeqUpdate) GetUpdateEventBusMessage() *UpdateEventBusMessage {
	if x, ok := m.GetUpdate().(*UpdateSeqUpdate_UpdateEventBusMessage); ok {
		return x.UpdateEventBusMessage
	}
	return nil
}

func (m *UpdateSeqUpdate) GetUpdateEventBusDisposed() *UpdateEventBusDisposed {
	if x, ok := m.GetUpdate().(*UpdateSeqUpdate_UpdateEventBusDisposed); ok {
		return x.UpdateEventBusDisposed
	}
	return nil
}

func (m *UpdateSeqUpdate) GetUpdateIncomingCallDeprecated() *UpdateIncomingCallDeprecated {
	if x, ok := m.GetUpdate().(*UpdateSeqUpdate_UpdateIncomingCallDeprecated); ok {
		return x.UpdateIncomingCallDeprecated
	}
	return nil
}

func (m *UpdateSeqUpdate) GetUpdateIncomingCall() *UpdateIncomingCall {
	if x, ok := m.GetUpdate().(*UpdateSeqUpdate_UpdateIncomingCall); ok {
		return x.UpdateIncomingCall
	}
	return nil
}

func (m *UpdateSeqUpdate) GetUpdateCallHandled() *UpdateCallHandled {
	if x, ok := m.GetUpdate().(*UpdateSeqUpdate_UpdateCallHandled); ok {
		return x.UpdateCallHandled
	}
	return nil
}

func (m *UpdateSeqUpdate) GetUpdateCallDisposed() *UpdateCallDisposed {
	if x, ok := m.GetUpdate().(*UpdateSeqUpdate_UpdateCallDisposed); ok {
		return x.UpdateCallDisposed
	}
	return nil
}

func (m *UpdateSeqUpdate) GetUpdateParameterChanged() *UpdateParameterChanged {
	if x, ok := m.GetUpdate().(*UpdateSeqUpdate_UpdateParameterChanged); ok {
		return x.UpdateParameterChanged
	}
	return nil
}

func (m *UpdateSeqUpdate) GetUpdateRawUpdate() *UpdateRawUpdate {
	if x, ok := m.GetUpdate().(*UpdateSeqUpdate_UpdateRawUpdate); ok {
		return x.UpdateRawUpdate
	}
	return nil
}

func (m *UpdateSeqUpdate) GetUpdateEmptyUpdate() *UpdateEmptyUpdate {
	if x, ok := m.GetUpdate().(*UpdateSeqUpdate_UpdateEmptyUpdate); ok {
		return x.UpdateEmptyUpdate
	}
	return nil
}

func (m *UpdateSeqUpdate) GetUpdateCountersChanged() *UpdateCountersChanged {
	if x, ok := m.GetUpdate().(*UpdateSeqUpdate_UpdateCountersChanged); ok {
		return x.UpdateCountersChanged
	}
	return nil
}

func (m *UpdateSeqUpdate) GetUpdateConfig() *UpdateConfig {
	if x, ok := m.GetUpdate().(*UpdateSeqUpdate_UpdateConfig); ok {
		return x.UpdateConfig
	}
	return nil
}

func (m *UpdateSeqUpdate) GetUpdateSpaceModified() *UpdateSpaceModified {
	if x, ok := m.GetUpdate().(*UpdateSeqUpdate_UpdateSpaceModified); ok {
		return x.UpdateSpaceModified
	}
	return nil
}

func (m *UpdateSeqUpdate) GetUpdateSpaceMemberModified() *UpdateSpaceMemberModified {
	if x, ok := m.GetUpdate().(*UpdateSeqUpdate_UpdateSpaceMemberModified); ok {
		return x.UpdateSpaceMemberModified
	}
	return nil
}

func (m *UpdateSeqUpdate) GetUpdateMessageRejectedByHook() *UpdateMessageRejectedByHook {
	if x, ok := m.GetUpdate().(*UpdateSeqUpdate_UpdateMessageRejectedByHook); ok {
		return x.UpdateMessageRejectedByHook
	}
	return nil
}

func (m *UpdateSeqUpdate) GetUpdateMessageEditRejectedByHook() *UpdateMessageEditRejectedByHook {
	if x, ok := m.GetUpdate().(*UpdateSeqUpdate_UpdateMessageEditRejectedByHook); ok {
		return x.UpdateMessageEditRejectedByHook
	}
	return nil
}

func (m *UpdateSeqUpdate) GetUpdateUser() *UpdateUser {
	if x, ok := m.GetUpdate().(*UpdateSeqUpdate_UpdateUser); ok {
		return x.UpdateUser
	}
	return nil
}

func (m *UpdateSeqUpdate) GetUpdateFeatureFlagChanged() *UpdateFeatureFlagChanged {
	if x, ok := m.GetUpdate().(*UpdateSeqUpdate_UpdateFeatureFlagChanged); ok {
		return x.UpdateFeatureFlagChanged
	}
	return nil
}

func (m *UpdateSeqUpdate) GetUpdateThreadCreated() *UpdateThreadCreated {
	if x, ok := m.GetUpdate().(*UpdateSeqUpdate_UpdateThreadCreated); ok {
		return x.UpdateThreadCreated
	}
	return nil
}

func (m *UpdateSeqUpdate) GetUpdateThreadLifted() *UpdateThreadLifted {
	if x, ok := m.GetUpdate().(*UpdateSeqUpdate_UpdateThreadLifted); ok {
		return x.UpdateThreadLifted
	}
	return nil
}

func (m *UpdateSeqUpdate) GetUpdateGroup() *UpdateGroup {
	if x, ok := m.GetUpdate().(*UpdateSeqUpdate_UpdateGroup); ok {
		return x.UpdateGroup
	}
	return nil
}

func (m *UpdateSeqUpdate) GetUpdateGroupMemberInvited() *UpdateGroupMemberInvited {
	if x, ok := m.GetUpdate().(*UpdateSeqUpdate_UpdateGroupMemberInvited); ok {
		return x.UpdateGroupMemberInvited
	}
	return nil
}

func (m *UpdateSeqUpdate) GetMessageReactionsUpdate() *MessageReactionsUpdate {
	if x, ok := m.GetUpdate().(*UpdateSeqUpdate_MessageReactionsUpdate); ok {
		return x.MessageReactionsUpdate
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*UpdateSeqUpdate) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*UpdateSeqUpdate_UpdateForceReloadState)(nil),
		(*UpdateSeqUpdate_UpdateUserAvatarChanged)(nil),
		(*UpdateSeqUpdate_UpdateUserNameChanged)(nil),
		(*UpdateSeqUpdate_UpdateUserLocalNameChanged)(nil),
		(*UpdateSeqUpdate_UpdateUserContactsChanged)(nil),
		(*UpdateSeqUpdate_UpdateUserNickChanged)(nil),
		(*UpdateSeqUpdate_UpdateUserAboutChanged)(nil),
		(*UpdateSeqUpdate_UpdateUserPreferredLanguagesChanged)(nil),
		(*UpdateSeqUpdate_UpdateUserTimeZoneChanged)(nil),
		(*UpdateSeqUpdate_UpdateUserBotCommandsChanged)(nil),
		(*UpdateSeqUpdate_UpdateUserExtChanged)(nil),
		(*UpdateSeqUpdate_UpdateUserFullExtChanged)(nil),
		(*UpdateSeqUpdate_UpdateUserSexChanged)(nil),
		(*UpdateSeqUpdate_UpdateUserCustomProfileChanged)(nil),
		(*UpdateSeqUpdate_UpdateUserStatusChanged)(nil),
		(*UpdateSeqUpdate_UpdateContactRegistered)(nil),
		(*UpdateSeqUpdate_UpdateContactsAdded)(nil),
		(*UpdateSeqUpdate_UpdateContactsAddTaskSuspended)(nil),
		(*UpdateSeqUpdate_UpdateContactsRemoved)(nil),
		(*UpdateSeqUpdate_UpdateUserBlocked)(nil),
		(*UpdateSeqUpdate_UpdateUserUnblocked)(nil),
		(*UpdateSeqUpdate_UpdateInteractiveMediaEvent)(nil),
		(*UpdateSeqUpdate_UpdateMessage)(nil),
		(*UpdateSeqUpdate_UpdateMessageContentChanged)(nil),
		(*UpdateSeqUpdate_UpdateMessageSent)(nil),
		(*UpdateSeqUpdate_UpdateMessageReceived)(nil),
		(*UpdateSeqUpdate_UpdateMessageRead)(nil),
		(*UpdateSeqUpdate_UpdateMessageReadByMe)(nil),
		(*UpdateSeqUpdate_UpdateMessageDelete)(nil),
		(*UpdateSeqUpdate_UpdateChatClear)(nil),
		(*UpdateSeqUpdate_UpdateChatDelete)(nil),
		(*UpdateSeqUpdate_UpdateChatArchive)(nil),
		(*UpdateSeqUpdate_UpdateChatGroupsChanged)(nil),
		(*UpdateSeqUpdate_UpdateReactionsUpdate)(nil),
		(*UpdateSeqUpdate_UpdateDialogFavouriteChanged)(nil),
		(*UpdateSeqUpdate_UpdatePinnedMessagesChanged)(nil),
		(*UpdateSeqUpdate_UpdateGroupTitleChanged)(nil),
		(*UpdateSeqUpdate_UpdateGroupAvatarChanged)(nil),
		(*UpdateSeqUpdate_UpdateGroupAboutChanged)(nil),
		(*UpdateSeqUpdate_UpdateGroupOwnerChanged)(nil),
		(*UpdateSeqUpdate_UpdateGroupMembersUpdated)(nil),
		(*UpdateSeqUpdate_UpdateGroupMemberDiff)(nil),
		(*UpdateSeqUpdate_UpdateGroupMembersCountChanged)(nil),
		(*UpdateSeqUpdate_UpdateGroupMemberPermissionsChanged)(nil),
		(*UpdateSeqUpdate_UpdateGroupInviteObsolete)(nil),
		(*UpdateSeqUpdate_UpdateGroupUserInvitedObsolete)(nil),
		(*UpdateSeqUpdate_UpdateGroupUserLeaveObsolete)(nil),
		(*UpdateSeqUpdate_UpdateGroupUserKickObsolete)(nil),
		(*UpdateSeqUpdate_UpdateGroupMembersUpdateObsolete)(nil),
		(*UpdateSeqUpdate_UpdateGroupTitleChangedObsolete)(nil),
		(*UpdateSeqUpdate_UpdateGroupAboutChangedObsolete)(nil),
		(*UpdateSeqUpdate_UpdateGroupAvatarChangedObsolete)(nil),
		(*UpdateSeqUpdate_UpdateGroupShortnameChanged)(nil),
		(*UpdateSeqUpdate_UpdateStickerCollectionsChanged)(nil),
		(*UpdateSeqUpdate_UpdateStickerPackRemoved)(nil),
		(*UpdateSeqUpdate_UpdateStickerPackAdded)(nil),
		(*UpdateSeqUpdate_UpdatePauseNotifications)(nil),
		(*UpdateSeqUpdate_UpdateRestoreNotifications)(nil),
		(*UpdateSeqUpdate_UpdateTyping)(nil),
		(*UpdateSeqUpdate_UpdateTypingStop)(nil),
		(*UpdateSeqUpdate_UpdateUserOnline)(nil),
		(*UpdateSeqUpdate_UpdateUserOffline)(nil),
		(*UpdateSeqUpdate_UpdateUserLastSeen)(nil),
		(*UpdateSeqUpdate_UpdateGroupOnline)(nil),
		(*UpdateSeqUpdate_UpdateEventBusDeviceConnected)(nil),
		(*UpdateSeqUpdate_UpdateEventBusDeviceDisconnected)(nil),
		(*UpdateSeqUpdate_UpdateEventBusMessage)(nil),
		(*UpdateSeqUpdate_UpdateEventBusDisposed)(nil),
		(*UpdateSeqUpdate_UpdateIncomingCallDeprecated)(nil),
		(*UpdateSeqUpdate_UpdateIncomingCall)(nil),
		(*UpdateSeqUpdate_UpdateCallHandled)(nil),
		(*UpdateSeqUpdate_UpdateCallDisposed)(nil),
		(*UpdateSeqUpdate_UpdateParameterChanged)(nil),
		(*UpdateSeqUpdate_UpdateRawUpdate)(nil),
		(*UpdateSeqUpdate_UpdateEmptyUpdate)(nil),
		(*UpdateSeqUpdate_UpdateCountersChanged)(nil),
		(*UpdateSeqUpdate_UpdateConfig)(nil),
		(*UpdateSeqUpdate_UpdateSpaceModified)(nil),
		(*UpdateSeqUpdate_UpdateSpaceMemberModified)(nil),
		(*UpdateSeqUpdate_UpdateMessageRejectedByHook)(nil),
		(*UpdateSeqUpdate_UpdateMessageEditRejectedByHook)(nil),
		(*UpdateSeqUpdate_UpdateUser)(nil),
		(*UpdateSeqUpdate_UpdateFeatureFlagChanged)(nil),
		(*UpdateSeqUpdate_UpdateThreadCreated)(nil),
		(*UpdateSeqUpdate_UpdateThreadLifted)(nil),
		(*UpdateSeqUpdate_UpdateGroup)(nil),
		(*UpdateSeqUpdate_UpdateGroupMemberInvited)(nil),
		(*UpdateSeqUpdate_MessageReactionsUpdate)(nil),
	}
}

// Fat sequence update with additional data
type UpdateFatSeqUpdate struct {
	Seq          int32  `protobuf:"varint,1,opt,name=seq,proto3" json:"seq,omitempty"`
	State        []byte `protobuf:"bytes,2,opt,name=state,proto3" json:"state,omitempty"`
	UpdateHeader int32  `protobuf:"varint,3,opt,name=update_header,json=updateHeader,proto3" json:"update_header,omitempty"`
	Update       []byte `protobuf:"bytes,4,opt,name=update,proto3" json:"update,omitempty"`
	/// related users
	Users []*User `protobuf:"bytes,5,rep,name=users,proto3" json:"users,omitempty"`
	/// related groups
	Groups []*Group `protobuf:"bytes,6,rep,name=groups,proto3" json:"groups,omitempty"`
}

func (m *UpdateFatSeqUpdate) Reset()      { *m = UpdateFatSeqUpdate{} }
func (*UpdateFatSeqUpdate) ProtoMessage() {}
func (*UpdateFatSeqUpdate) Descriptor() ([]byte, []int) {
	return fileDescriptor_0cf1109f6bcc730b, []int{1}
}
func (m *UpdateFatSeqUpdate) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateFatSeqUpdate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateFatSeqUpdate.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateFatSeqUpdate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateFatSeqUpdate.Merge(m, src)
}
func (m *UpdateFatSeqUpdate) XXX_Size() int {
	return m.Size()
}
func (m *UpdateFatSeqUpdate) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateFatSeqUpdate.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateFatSeqUpdate proto.InternalMessageInfo

func (m *UpdateFatSeqUpdate) GetSeq() int32 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *UpdateFatSeqUpdate) GetState() []byte {
	if m != nil {
		return m.State
	}
	return nil
}

func (m *UpdateFatSeqUpdate) GetUpdateHeader() int32 {
	if m != nil {
		return m.UpdateHeader
	}
	return 0
}

func (m *UpdateFatSeqUpdate) GetUpdate() []byte {
	if m != nil {
		return m.Update
	}
	return nil
}

func (m *UpdateFatSeqUpdate) GetUsers() []*User {
	if m != nil {
		return m.Users
	}
	return nil
}

func (m *UpdateFatSeqUpdate) GetGroups() []*Group {
	if m != nil {
		return m.Groups
	}
	return nil
}

// Out of sequence update (for typing and online statuses)
type UpdateWeakUpdate struct {
	Date         int64  `protobuf:"varint,1,opt,name=date,proto3" json:"date,omitempty"`
	UpdateHeader int32  `protobuf:"varint,2,opt,name=update_header,json=updateHeader,proto3" json:"update_header,omitempty"`
	Update       []byte `protobuf:"bytes,3,opt,name=update,proto3" json:"update,omitempty"`
}

func (m *UpdateWeakUpdate) Reset()      { *m = UpdateWeakUpdate{} }
func (*UpdateWeakUpdate) ProtoMessage() {}
func (*UpdateWeakUpdate) Descriptor() ([]byte, []int) {
	return fileDescriptor_0cf1109f6bcc730b, []int{2}
}
func (m *UpdateWeakUpdate) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateWeakUpdate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateWeakUpdate.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateWeakUpdate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateWeakUpdate.Merge(m, src)
}
func (m *UpdateWeakUpdate) XXX_Size() int {
	return m.Size()
}
func (m *UpdateWeakUpdate) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateWeakUpdate.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateWeakUpdate proto.InternalMessageInfo

func (m *UpdateWeakUpdate) GetDate() int64 {
	if m != nil {
		return m.Date
	}
	return 0
}

func (m *UpdateWeakUpdate) GetUpdateHeader() int32 {
	if m != nil {
		return m.UpdateHeader
	}
	return 0
}

func (m *UpdateWeakUpdate) GetUpdate() []byte {
	if m != nil {
		return m.Update
	}
	return nil
}

// Fat Weak Update
type UpdateWeakFatUpdate struct {
	Date         int64    `protobuf:"varint,1,opt,name=date,proto3" json:"date,omitempty"`
	UpdateHeader int32    `protobuf:"varint,2,opt,name=update_header,json=updateHeader,proto3" json:"update_header,omitempty"`
	Update       []byte   `protobuf:"bytes,3,opt,name=update,proto3" json:"update,omitempty"`
	Users        []*User  `protobuf:"bytes,4,rep,name=users,proto3" json:"users,omitempty"`
	Groups       []*Group `protobuf:"bytes,5,rep,name=groups,proto3" json:"groups,omitempty"`
}

func (m *UpdateWeakFatUpdate) Reset()      { *m = UpdateWeakFatUpdate{} }
func (*UpdateWeakFatUpdate) ProtoMessage() {}
func (*UpdateWeakFatUpdate) Descriptor() ([]byte, []int) {
	return fileDescriptor_0cf1109f6bcc730b, []int{3}
}
func (m *UpdateWeakFatUpdate) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateWeakFatUpdate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateWeakFatUpdate.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateWeakFatUpdate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateWeakFatUpdate.Merge(m, src)
}
func (m *UpdateWeakFatUpdate) XXX_Size() int {
	return m.Size()
}
func (m *UpdateWeakFatUpdate) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateWeakFatUpdate.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateWeakFatUpdate proto.InternalMessageInfo

func (m *UpdateWeakFatUpdate) GetDate() int64 {
	if m != nil {
		return m.Date
	}
	return 0
}

func (m *UpdateWeakFatUpdate) GetUpdateHeader() int32 {
	if m != nil {
		return m.UpdateHeader
	}
	return 0
}

func (m *UpdateWeakFatUpdate) GetUpdate() []byte {
	if m != nil {
		return m.Update
	}
	return nil
}

func (m *UpdateWeakFatUpdate) GetUsers() []*User {
	if m != nil {
		return m.Users
	}
	return nil
}

func (m *UpdateWeakFatUpdate) GetGroups() []*Group {
	if m != nil {
		return m.Groups
	}
	return nil
}

// Notification about requiring performing manual GetDifference
type UpdateSeqUpdateTooLong struct {
}

func (m *UpdateSeqUpdateTooLong) Reset()      { *m = UpdateSeqUpdateTooLong{} }
func (*UpdateSeqUpdateTooLong) ProtoMessage() {}
func (*UpdateSeqUpdateTooLong) Descriptor() ([]byte, []int) {
	return fileDescriptor_0cf1109f6bcc730b, []int{4}
}
func (m *UpdateSeqUpdateTooLong) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateSeqUpdateTooLong) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateSeqUpdateTooLong.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateSeqUpdateTooLong) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateSeqUpdateTooLong.Merge(m, src)
}
func (m *UpdateSeqUpdateTooLong) XXX_Size() int {
	return m.Size()
}
func (m *UpdateSeqUpdateTooLong) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateSeqUpdateTooLong.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateSeqUpdateTooLong proto.InternalMessageInfo

// Update container
type UpdateContainer struct {
	UpdateHeader int32  `protobuf:"varint,1,opt,name=update_header,json=updateHeader,proto3" json:"update_header,omitempty"`
	Update       []byte `protobuf:"bytes,2,opt,name=update,proto3" json:"update,omitempty"`
}

func (m *UpdateContainer) Reset()      { *m = UpdateContainer{} }
func (*UpdateContainer) ProtoMessage() {}
func (*UpdateContainer) Descriptor() ([]byte, []int) {
	return fileDescriptor_0cf1109f6bcc730b, []int{5}
}
func (m *UpdateContainer) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateContainer) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateContainer.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateContainer) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateContainer.Merge(m, src)
}
func (m *UpdateContainer) XXX_Size() int {
	return m.Size()
}
func (m *UpdateContainer) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateContainer.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateContainer proto.InternalMessageInfo

func (m *UpdateContainer) GetUpdateHeader() int32 {
	if m != nil {
		return m.UpdateHeader
	}
	return 0
}

func (m *UpdateContainer) GetUpdate() []byte {
	if m != nil {
		return m.Update
	}
	return nil
}

// Combined update
type UpdateCombinedUpdate struct {
	/// start of related sequence intervals
	SeqStart int32 `protobuf:"varint,1,opt,name=seq_start,json=seqStart,proto3" json:"seq_start,omitempty"`
	/// end of related sequence intervals
	SeqEnd int32  `protobuf:"varint,2,opt,name=seq_end,json=seqEnd,proto3" json:"seq_end,omitempty"`
	State  []byte `protobuf:"bytes,3,opt,name=state,proto3" json:"state,omitempty"`
	/// related users
	Users []*User `protobuf:"bytes,4,rep,name=users,proto3" json:"users,omitempty"`
	/// related groups
	Groups  []*Group           `protobuf:"bytes,5,rep,name=groups,proto3" json:"groups,omitempty"`
	Updates []*UpdateContainer `protobuf:"bytes,6,rep,name=updates,proto3" json:"updates,omitempty"`
	/// related messages
	Messages []*HistoryMessage `protobuf:"bytes,7,rep,name=messages,proto3" json:"messages,omitempty"`
}

func (m *UpdateCombinedUpdate) Reset()      { *m = UpdateCombinedUpdate{} }
func (*UpdateCombinedUpdate) ProtoMessage() {}
func (*UpdateCombinedUpdate) Descriptor() ([]byte, []int) {
	return fileDescriptor_0cf1109f6bcc730b, []int{6}
}
func (m *UpdateCombinedUpdate) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateCombinedUpdate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateCombinedUpdate.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateCombinedUpdate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateCombinedUpdate.Merge(m, src)
}
func (m *UpdateCombinedUpdate) XXX_Size() int {
	return m.Size()
}
func (m *UpdateCombinedUpdate) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateCombinedUpdate.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateCombinedUpdate proto.InternalMessageInfo

func (m *UpdateCombinedUpdate) GetSeqStart() int32 {
	if m != nil {
		return m.SeqStart
	}
	return 0
}

func (m *UpdateCombinedUpdate) GetSeqEnd() int32 {
	if m != nil {
		return m.SeqEnd
	}
	return 0
}

func (m *UpdateCombinedUpdate) GetState() []byte {
	if m != nil {
		return m.State
	}
	return nil
}

func (m *UpdateCombinedUpdate) GetUsers() []*User {
	if m != nil {
		return m.Users
	}
	return nil
}

func (m *UpdateCombinedUpdate) GetGroups() []*Group {
	if m != nil {
		return m.Groups
	}
	return nil
}

func (m *UpdateCombinedUpdate) GetUpdates() []*UpdateContainer {
	if m != nil {
		return m.Updates
	}
	return nil
}

func (m *UpdateCombinedUpdate) GetMessages() []*HistoryMessage {
	if m != nil {
		return m.Messages
	}
	return nil
}

// Get main sequence state
type RequestGetState struct {
	Optimizations []UpdateOptimization `protobuf:"varint,1,rep,packed,name=optimizations,proto3,enum=dialog.UpdateOptimization" json:"optimizations,omitempty"`
}

func (m *RequestGetState) Reset()      { *m = RequestGetState{} }
func (*RequestGetState) ProtoMessage() {}
func (*RequestGetState) Descriptor() ([]byte, []int) {
	return fileDescriptor_0cf1109f6bcc730b, []int{7}
}
func (m *RequestGetState) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RequestGetState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RequestGetState.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RequestGetState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RequestGetState.Merge(m, src)
}
func (m *RequestGetState) XXX_Size() int {
	return m.Size()
}
func (m *RequestGetState) XXX_DiscardUnknown() {
	xxx_messageInfo_RequestGetState.DiscardUnknown(m)
}

var xxx_messageInfo_RequestGetState proto.InternalMessageInfo

func (m *RequestGetState) GetOptimizations() []UpdateOptimization {
	if m != nil {
		return m.Optimizations
	}
	return nil
}

// Getting difference of sequence
type RequestGetDifference struct {
	Seq           int32                `protobuf:"varint,1,opt,name=seq,proto3" json:"seq,omitempty"`
	State         []byte               `protobuf:"bytes,2,opt,name=state,proto3" json:"state,omitempty"`
	Optimizations []UpdateOptimization `protobuf:"varint,3,rep,packed,name=optimizations,proto3,enum=dialog.UpdateOptimization" json:"optimizations,omitempty"`
	ConfigHash    *types.Int64Value    `protobuf:"bytes,4,opt,name=config_hash,json=configHash,proto3" json:"config_hash,omitempty"`
}

func (m *RequestGetDifference) Reset()      { *m = RequestGetDifference{} }
func (*RequestGetDifference) ProtoMessage() {}
func (*RequestGetDifference) Descriptor() ([]byte, []int) {
	return fileDescriptor_0cf1109f6bcc730b, []int{8}
}
func (m *RequestGetDifference) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RequestGetDifference) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RequestGetDifference.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RequestGetDifference) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RequestGetDifference.Merge(m, src)
}
func (m *RequestGetDifference) XXX_Size() int {
	return m.Size()
}
func (m *RequestGetDifference) XXX_DiscardUnknown() {
	xxx_messageInfo_RequestGetDifference.DiscardUnknown(m)
}

var xxx_messageInfo_RequestGetDifference proto.InternalMessageInfo

func (m *RequestGetDifference) GetSeq() int32 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *RequestGetDifference) GetState() []byte {
	if m != nil {
		return m.State
	}
	return nil
}

func (m *RequestGetDifference) GetOptimizations() []UpdateOptimization {
	if m != nil {
		return m.Optimizations
	}
	return nil
}

func (m *RequestGetDifference) GetConfigHash() *types.Int64Value {
	if m != nil {
		return m.ConfigHash
	}
	return nil
}

/// Updates happens after requested seq number + related peers and entities
type ResponseGetDifference struct {
	Seq        int32              `protobuf:"varint,1,opt,name=seq,proto3" json:"seq,omitempty"`
	State      []byte             `protobuf:"bytes,2,opt,name=state,proto3" json:"state,omitempty"`
	Updates    []*UpdateSeqUpdate `protobuf:"bytes,4,rep,name=updates,proto3" json:"updates,omitempty"`
	Messages   []*HistoryMessage  `protobuf:"bytes,7,rep,name=messages,proto3" json:"messages,omitempty"`
	NeedMore   bool               `protobuf:"varint,5,opt,name=need_more,json=needMore,proto3" json:"need_more,omitempty"`
	UsersRefs  []*UserOutPeer     `protobuf:"bytes,8,rep,name=users_refs,json=usersRefs,proto3" json:"users_refs,omitempty"`
	GroupsRefs []*GroupOutPeer    `protobuf:"bytes,9,rep,name=groups_refs,json=groupsRefs,proto3" json:"groups_refs,omitempty"`
	Config     *Config            `protobuf:"bytes,10,opt,name=config,proto3" json:"config,omitempty"`
	ConfigHash *types.Int64Value  `protobuf:"bytes,11,opt,name=config_hash,json=configHash,proto3" json:"config_hash,omitempty"`
}

func (m *ResponseGetDifference) Reset()      { *m = ResponseGetDifference{} }
func (*ResponseGetDifference) ProtoMessage() {}
func (*ResponseGetDifference) Descriptor() ([]byte, []int) {
	return fileDescriptor_0cf1109f6bcc730b, []int{9}
}
func (m *ResponseGetDifference) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ResponseGetDifference) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ResponseGetDifference.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ResponseGetDifference) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResponseGetDifference.Merge(m, src)
}
func (m *ResponseGetDifference) XXX_Size() int {
	return m.Size()
}
func (m *ResponseGetDifference) XXX_DiscardUnknown() {
	xxx_messageInfo_ResponseGetDifference.DiscardUnknown(m)
}

var xxx_messageInfo_ResponseGetDifference proto.InternalMessageInfo

func (m *ResponseGetDifference) GetSeq() int32 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *ResponseGetDifference) GetState() []byte {
	if m != nil {
		return m.State
	}
	return nil
}

func (m *ResponseGetDifference) GetUpdates() []*UpdateSeqUpdate {
	if m != nil {
		return m.Updates
	}
	return nil
}

func (m *ResponseGetDifference) GetMessages() []*HistoryMessage {
	if m != nil {
		return m.Messages
	}
	return nil
}

func (m *ResponseGetDifference) GetNeedMore() bool {
	if m != nil {
		return m.NeedMore
	}
	return false
}

func (m *ResponseGetDifference) GetUsersRefs() []*UserOutPeer {
	if m != nil {
		return m.UsersRefs
	}
	return nil
}

func (m *ResponseGetDifference) GetGroupsRefs() []*GroupOutPeer {
	if m != nil {
		return m.GroupsRefs
	}
	return nil
}

func (m *ResponseGetDifference) GetConfig() *Config {
	if m != nil {
		return m.Config
	}
	return nil
}

func (m *ResponseGetDifference) GetConfigHash() *types.Int64Value {
	if m != nil {
		return m.ConfigHash
	}
	return nil
}

// Getting difference of dialogs
type RequestGetDialogsDifference struct {
	/// max of the last action dates among all user's dialogs
	Clock int64 `protobuf:"varint,1,opt,name=clock,proto3" json:"clock,omitempty"`
}

func (m *RequestGetDialogsDifference) Reset()      { *m = RequestGetDialogsDifference{} }
func (*RequestGetDialogsDifference) ProtoMessage() {}
func (*RequestGetDialogsDifference) Descriptor() ([]byte, []int) {
	return fileDescriptor_0cf1109f6bcc730b, []int{10}
}
func (m *RequestGetDialogsDifference) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RequestGetDialogsDifference) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RequestGetDialogsDifference.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RequestGetDialogsDifference) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RequestGetDialogsDifference.Merge(m, src)
}
func (m *RequestGetDialogsDifference) XXX_Size() int {
	return m.Size()
}
func (m *RequestGetDialogsDifference) XXX_DiscardUnknown() {
	xxx_messageInfo_RequestGetDialogsDifference.DiscardUnknown(m)
}

var xxx_messageInfo_RequestGetDialogsDifference proto.InternalMessageInfo

func (m *RequestGetDialogsDifference) GetClock() int64 {
	if m != nil {
		return m.Clock
	}
	return 0
}

/// Dialogs + peers and entities
type ResponseGetDialogsDifference struct {
	Dialogs    []*Dialog       `protobuf:"bytes,1,rep,name=dialogs,proto3" json:"dialogs,omitempty"`
	GroupPeers []*GroupOutPeer `protobuf:"bytes,2,rep,name=group_peers,json=groupPeers,proto3" json:"group_peers,omitempty"`
	UserPeers  []*UserOutPeer  `protobuf:"bytes,3,rep,name=user_peers,json=userPeers,proto3" json:"user_peers,omitempty"`
}

func (m *ResponseGetDialogsDifference) Reset()      { *m = ResponseGetDialogsDifference{} }
func (*ResponseGetDialogsDifference) ProtoMessage() {}
func (*ResponseGetDialogsDifference) Descriptor() ([]byte, []int) {
	return fileDescriptor_0cf1109f6bcc730b, []int{11}
}
func (m *ResponseGetDialogsDifference) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ResponseGetDialogsDifference) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ResponseGetDialogsDifference.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ResponseGetDialogsDifference) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResponseGetDialogsDifference.Merge(m, src)
}
func (m *ResponseGetDialogsDifference) XXX_Size() int {
	return m.Size()
}
func (m *ResponseGetDialogsDifference) XXX_DiscardUnknown() {
	xxx_messageInfo_ResponseGetDialogsDifference.DiscardUnknown(m)
}

var xxx_messageInfo_ResponseGetDialogsDifference proto.InternalMessageInfo

func (m *ResponseGetDialogsDifference) GetDialogs() []*Dialog {
	if m != nil {
		return m.Dialogs
	}
	return nil
}

func (m *ResponseGetDialogsDifference) GetGroupPeers() []*GroupOutPeer {
	if m != nil {
		return m.GroupPeers
	}
	return nil
}

func (m *ResponseGetDialogsDifference) GetUserPeers() []*UserOutPeer {
	if m != nil {
		return m.UserPeers
	}
	return nil
}

// Represents subset of group members
type GroupMembersSubset struct {
	GroupPeer *GroupOutPeer `protobuf:"bytes,1,opt,name=group_peer,json=groupPeer,proto3" json:"group_peer,omitempty"`
	MemberIds []int32       `protobuf:"varint,2,rep,packed,name=member_ids,json=memberIds,proto3" json:"member_ids,omitempty"`
}

func (m *GroupMembersSubset) Reset()      { *m = GroupMembersSubset{} }
func (*GroupMembersSubset) ProtoMessage() {}
func (*GroupMembersSubset) Descriptor() ([]byte, []int) {
	return fileDescriptor_0cf1109f6bcc730b, []int{12}
}
func (m *GroupMembersSubset) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GroupMembersSubset) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GroupMembersSubset.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GroupMembersSubset) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GroupMembersSubset.Merge(m, src)
}
func (m *GroupMembersSubset) XXX_Size() int {
	return m.Size()
}
func (m *GroupMembersSubset) XXX_DiscardUnknown() {
	xxx_messageInfo_GroupMembersSubset.DiscardUnknown(m)
}

var xxx_messageInfo_GroupMembersSubset proto.InternalMessageInfo

func (m *GroupMembersSubset) GetGroupPeer() *GroupOutPeer {
	if m != nil {
		return m.GroupPeer
	}
	return nil
}

func (m *GroupMembersSubset) GetMemberIds() []int32 {
	if m != nil {
		return m.MemberIds
	}
	return nil
}

// Loading referenced entities
type RequestGetReferencedEntitites struct {
	/// users needed
	Users []*UserOutPeer `protobuf:"bytes,1,rep,name=users,proto3" json:"users,omitempty"`
	/// messages needed
	Mids []*UUIDValue `protobuf:"bytes,3,rep,name=mids,proto3" json:"mids,omitempty"`
	//*
	// Group + subset of members to return.
	// For loading members of big groups by chunks.
	GroupMembers []*GroupMembersSubset `protobuf:"bytes,4,rep,name=group_members,json=groupMembers,proto3" json:"group_members,omitempty"`
	/// groups needed
	Groups []*GroupOutPeer `protobuf:"bytes,5,rep,name=groups,proto3" json:"groups,omitempty"`
}

func (m *RequestGetReferencedEntitites) Reset()      { *m = RequestGetReferencedEntitites{} }
func (*RequestGetReferencedEntitites) ProtoMessage() {}
func (*RequestGetReferencedEntitites) Descriptor() ([]byte, []int) {
	return fileDescriptor_0cf1109f6bcc730b, []int{13}
}
func (m *RequestGetReferencedEntitites) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RequestGetReferencedEntitites) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RequestGetReferencedEntitites.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RequestGetReferencedEntitites) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RequestGetReferencedEntitites.Merge(m, src)
}
func (m *RequestGetReferencedEntitites) XXX_Size() int {
	return m.Size()
}
func (m *RequestGetReferencedEntitites) XXX_DiscardUnknown() {
	xxx_messageInfo_RequestGetReferencedEntitites.DiscardUnknown(m)
}

var xxx_messageInfo_RequestGetReferencedEntitites proto.InternalMessageInfo

func (m *RequestGetReferencedEntitites) GetUsers() []*UserOutPeer {
	if m != nil {
		return m.Users
	}
	return nil
}

func (m *RequestGetReferencedEntitites) GetMids() []*UUIDValue {
	if m != nil {
		return m.Mids
	}
	return nil
}

func (m *RequestGetReferencedEntitites) GetGroupMembers() []*GroupMembersSubset {
	if m != nil {
		return m.GroupMembers
	}
	return nil
}

func (m *RequestGetReferencedEntitites) GetGroups() []*GroupOutPeer {
	if m != nil {
		return m.Groups
	}
	return nil
}

type ResponseGetReferencedEntitites struct {
	Users    []*User           `protobuf:"bytes,1,rep,name=users,proto3" json:"users,omitempty"`
	Groups   []*Group          `protobuf:"bytes,2,rep,name=groups,proto3" json:"groups,omitempty"`
	Messages []*HistoryMessage `protobuf:"bytes,3,rep,name=messages,proto3" json:"messages,omitempty"`
}

func (m *ResponseGetReferencedEntitites) Reset()      { *m = ResponseGetReferencedEntitites{} }
func (*ResponseGetReferencedEntitites) ProtoMessage() {}
func (*ResponseGetReferencedEntitites) Descriptor() ([]byte, []int) {
	return fileDescriptor_0cf1109f6bcc730b, []int{14}
}
func (m *ResponseGetReferencedEntitites) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ResponseGetReferencedEntitites) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ResponseGetReferencedEntitites.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ResponseGetReferencedEntitites) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResponseGetReferencedEntitites.Merge(m, src)
}
func (m *ResponseGetReferencedEntitites) XXX_Size() int {
	return m.Size()
}
func (m *ResponseGetReferencedEntitites) XXX_DiscardUnknown() {
	xxx_messageInfo_ResponseGetReferencedEntitites.DiscardUnknown(m)
}

var xxx_messageInfo_ResponseGetReferencedEntitites proto.InternalMessageInfo

func (m *ResponseGetReferencedEntitites) GetUsers() []*User {
	if m != nil {
		return m.Users
	}
	return nil
}

func (m *ResponseGetReferencedEntitites) GetGroups() []*Group {
	if m != nil {
		return m.Groups
	}
	return nil
}

func (m *ResponseGetReferencedEntitites) GetMessages() []*HistoryMessage {
	if m != nil {
		return m.Messages
	}
	return nil
}

type RequestGetPartialPeerInfo struct {
	Users        []*UserOutPeer        `protobuf:"bytes,1,rep,name=users,proto3" json:"users,omitempty"`
	Groups       []*GroupOutPeer       `protobuf:"bytes,2,rep,name=groups,proto3" json:"groups,omitempty"`
	GroupMembers []*GroupMembersSubset `protobuf:"bytes,3,rep,name=group_members,json=groupMembers,proto3" json:"group_members,omitempty"`
}

func (m *RequestGetPartialPeerInfo) Reset()      { *m = RequestGetPartialPeerInfo{} }
func (*RequestGetPartialPeerInfo) ProtoMessage() {}
func (*RequestGetPartialPeerInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_0cf1109f6bcc730b, []int{15}
}
func (m *RequestGetPartialPeerInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RequestGetPartialPeerInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RequestGetPartialPeerInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RequestGetPartialPeerInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RequestGetPartialPeerInfo.Merge(m, src)
}
func (m *RequestGetPartialPeerInfo) XXX_Size() int {
	return m.Size()
}
func (m *RequestGetPartialPeerInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_RequestGetPartialPeerInfo.DiscardUnknown(m)
}

var xxx_messageInfo_RequestGetPartialPeerInfo proto.InternalMessageInfo

func (m *RequestGetPartialPeerInfo) GetUsers() []*UserOutPeer {
	if m != nil {
		return m.Users
	}
	return nil
}

func (m *RequestGetPartialPeerInfo) GetGroups() []*GroupOutPeer {
	if m != nil {
		return m.Groups
	}
	return nil
}

func (m *RequestGetPartialPeerInfo) GetGroupMembers() []*GroupMembersSubset {
	if m != nil {
		return m.GroupMembers
	}
	return nil
}

type ResponseGetPartialPeerInfo struct {
	Users  []*UserPartialInfo  `protobuf:"bytes,1,rep,name=users,proto3" json:"users,omitempty"`
	Groups []*GroupPartialInfo `protobuf:"bytes,2,rep,name=groups,proto3" json:"groups,omitempty"`
}

func (m *ResponseGetPartialPeerInfo) Reset()      { *m = ResponseGetPartialPeerInfo{} }
func (*ResponseGetPartialPeerInfo) ProtoMessage() {}
func (*ResponseGetPartialPeerInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_0cf1109f6bcc730b, []int{16}
}
func (m *ResponseGetPartialPeerInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ResponseGetPartialPeerInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ResponseGetPartialPeerInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ResponseGetPartialPeerInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResponseGetPartialPeerInfo.Merge(m, src)
}
func (m *ResponseGetPartialPeerInfo) XXX_Size() int {
	return m.Size()
}
func (m *ResponseGetPartialPeerInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_ResponseGetPartialPeerInfo.DiscardUnknown(m)
}

var xxx_messageInfo_ResponseGetPartialPeerInfo proto.InternalMessageInfo

func (m *ResponseGetPartialPeerInfo) GetUsers() []*UserPartialInfo {
	if m != nil {
		return m.Users
	}
	return nil
}

func (m *ResponseGetPartialPeerInfo) GetGroups() []*GroupPartialInfo {
	if m != nil {
		return m.Groups
	}
	return nil
}

// Custom Raw Update
type UpdateRawUpdate struct {
	Type  *types.StringValue `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	Bytes []byte             `protobuf:"bytes,2,opt,name=bytes,proto3" json:"bytes,omitempty"`
}

func (m *UpdateRawUpdate) Reset()      { *m = UpdateRawUpdate{} }
func (*UpdateRawUpdate) ProtoMessage() {}
func (*UpdateRawUpdate) Descriptor() ([]byte, []int) {
	return fileDescriptor_0cf1109f6bcc730b, []int{17}
}
func (m *UpdateRawUpdate) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateRawUpdate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateRawUpdate.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateRawUpdate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateRawUpdate.Merge(m, src)
}
func (m *UpdateRawUpdate) XXX_Size() int {
	return m.Size()
}
func (m *UpdateRawUpdate) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateRawUpdate.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateRawUpdate proto.InternalMessageInfo

func (m *UpdateRawUpdate) GetType() *types.StringValue {
	if m != nil {
		return m.Type
	}
	return nil
}

func (m *UpdateRawUpdate) GetBytes() []byte {
	if m != nil {
		return m.Bytes
	}
	return nil
}

// Empty update
type UpdateEmptyUpdate struct {
}

func (m *UpdateEmptyUpdate) Reset()      { *m = UpdateEmptyUpdate{} }
func (*UpdateEmptyUpdate) ProtoMessage() {}
func (*UpdateEmptyUpdate) Descriptor() ([]byte, []int) {
	return fileDescriptor_0cf1109f6bcc730b, []int{18}
}
func (m *UpdateEmptyUpdate) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateEmptyUpdate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateEmptyUpdate.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateEmptyUpdate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateEmptyUpdate.Merge(m, src)
}
func (m *UpdateEmptyUpdate) XXX_Size() int {
	return m.Size()
}
func (m *UpdateEmptyUpdate) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateEmptyUpdate.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateEmptyUpdate proto.InternalMessageInfo

// Subscribing for users online
type RequestSubscribeToOnline struct {
	Users []*UserOutPeer `protobuf:"bytes,1,rep,name=users,proto3" json:"users,omitempty"`
}

func (m *RequestSubscribeToOnline) Reset()      { *m = RequestSubscribeToOnline{} }
func (*RequestSubscribeToOnline) ProtoMessage() {}
func (*RequestSubscribeToOnline) Descriptor() ([]byte, []int) {
	return fileDescriptor_0cf1109f6bcc730b, []int{19}
}
func (m *RequestSubscribeToOnline) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RequestSubscribeToOnline) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RequestSubscribeToOnline.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RequestSubscribeToOnline) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RequestSubscribeToOnline.Merge(m, src)
}
func (m *RequestSubscribeToOnline) XXX_Size() int {
	return m.Size()
}
func (m *RequestSubscribeToOnline) XXX_DiscardUnknown() {
	xxx_messageInfo_RequestSubscribeToOnline.DiscardUnknown(m)
}

var xxx_messageInfo_RequestSubscribeToOnline proto.InternalMessageInfo

func (m *RequestSubscribeToOnline) GetUsers() []*UserOutPeer {
	if m != nil {
		return m.Users
	}
	return nil
}

// Removing subscription for users online
type RequestSubscribeFromOnline struct {
	Users []*UserOutPeer `protobuf:"bytes,1,rep,name=users,proto3" json:"users,omitempty"`
}

func (m *RequestSubscribeFromOnline) Reset()      { *m = RequestSubscribeFromOnline{} }
func (*RequestSubscribeFromOnline) ProtoMessage() {}
func (*RequestSubscribeFromOnline) Descriptor() ([]byte, []int) {
	return fileDescriptor_0cf1109f6bcc730b, []int{20}
}
func (m *RequestSubscribeFromOnline) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RequestSubscribeFromOnline) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RequestSubscribeFromOnline.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RequestSubscribeFromOnline) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RequestSubscribeFromOnline.Merge(m, src)
}
func (m *RequestSubscribeFromOnline) XXX_Size() int {
	return m.Size()
}
func (m *RequestSubscribeFromOnline) XXX_DiscardUnknown() {
	xxx_messageInfo_RequestSubscribeFromOnline.DiscardUnknown(m)
}

var xxx_messageInfo_RequestSubscribeFromOnline proto.InternalMessageInfo

func (m *RequestSubscribeFromOnline) GetUsers() []*UserOutPeer {
	if m != nil {
		return m.Users
	}
	return nil
}

// Subscribing for groups online
type RequestSubscribeToGroupOnline struct {
	Groups []*GroupOutPeer `protobuf:"bytes,1,rep,name=groups,proto3" json:"groups,omitempty"`
}

func (m *RequestSubscribeToGroupOnline) Reset()      { *m = RequestSubscribeToGroupOnline{} }
func (*RequestSubscribeToGroupOnline) ProtoMessage() {}
func (*RequestSubscribeToGroupOnline) Descriptor() ([]byte, []int) {
	return fileDescriptor_0cf1109f6bcc730b, []int{21}
}
func (m *RequestSubscribeToGroupOnline) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RequestSubscribeToGroupOnline) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RequestSubscribeToGroupOnline.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RequestSubscribeToGroupOnline) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RequestSubscribeToGroupOnline.Merge(m, src)
}
func (m *RequestSubscribeToGroupOnline) XXX_Size() int {
	return m.Size()
}
func (m *RequestSubscribeToGroupOnline) XXX_DiscardUnknown() {
	xxx_messageInfo_RequestSubscribeToGroupOnline.DiscardUnknown(m)
}

var xxx_messageInfo_RequestSubscribeToGroupOnline proto.InternalMessageInfo

func (m *RequestSubscribeToGroupOnline) GetGroups() []*GroupOutPeer {
	if m != nil {
		return m.Groups
	}
	return nil
}

// Removing subscription for groups online
type RequestSubscribeFromGroupOnline struct {
	Groups []*GroupOutPeer `protobuf:"bytes,1,rep,name=groups,proto3" json:"groups,omitempty"`
}

func (m *RequestSubscribeFromGroupOnline) Reset()      { *m = RequestSubscribeFromGroupOnline{} }
func (*RequestSubscribeFromGroupOnline) ProtoMessage() {}
func (*RequestSubscribeFromGroupOnline) Descriptor() ([]byte, []int) {
	return fileDescriptor_0cf1109f6bcc730b, []int{22}
}
func (m *RequestSubscribeFromGroupOnline) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RequestSubscribeFromGroupOnline) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RequestSubscribeFromGroupOnline.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RequestSubscribeFromGroupOnline) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RequestSubscribeFromGroupOnline.Merge(m, src)
}
func (m *RequestSubscribeFromGroupOnline) XXX_Size() int {
	return m.Size()
}
func (m *RequestSubscribeFromGroupOnline) XXX_DiscardUnknown() {
	xxx_messageInfo_RequestSubscribeFromGroupOnline.DiscardUnknown(m)
}

var xxx_messageInfo_RequestSubscribeFromGroupOnline proto.InternalMessageInfo

func (m *RequestSubscribeFromGroupOnline) GetGroups() []*GroupOutPeer {
	if m != nil {
		return m.Groups
	}
	return nil
}

/// Container which contains UpdateSeqUpdate
type SeqUpdateBox struct {
	Seq           int32             `protobuf:"varint,1,opt,name=seq,proto3" json:"seq,omitempty"`
	State         []byte            `protobuf:"bytes,2,opt,name=state,proto3" json:"state,omitempty"`
	Update        *types.BytesValue `protobuf:"bytes,3,opt,name=update,proto3" json:"update,omitempty"`
	UnboxedUpdate *UpdateSeqUpdate  `protobuf:"bytes,4,opt,name=unboxed_update,json=unboxedUpdate,proto3" json:"unboxed_update,omitempty"`
}

func (m *SeqUpdateBox) Reset()      { *m = SeqUpdateBox{} }
func (*SeqUpdateBox) ProtoMessage() {}
func (*SeqUpdateBox) Descriptor() ([]byte, []int) {
	return fileDescriptor_0cf1109f6bcc730b, []int{23}
}
func (m *SeqUpdateBox) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SeqUpdateBox) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SeqUpdateBox.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SeqUpdateBox) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SeqUpdateBox.Merge(m, src)
}
func (m *SeqUpdateBox) XXX_Size() int {
	return m.Size()
}
func (m *SeqUpdateBox) XXX_DiscardUnknown() {
	xxx_messageInfo_SeqUpdateBox.DiscardUnknown(m)
}

var xxx_messageInfo_SeqUpdateBox proto.InternalMessageInfo

func (m *SeqUpdateBox) GetSeq() int32 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *SeqUpdateBox) GetState() []byte {
	if m != nil {
		return m.State
	}
	return nil
}

func (m *SeqUpdateBox) GetUpdate() *types.BytesValue {
	if m != nil {
		return m.Update
	}
	return nil
}

func (m *SeqUpdateBox) GetUnboxedUpdate() *UpdateSeqUpdate {
	if m != nil {
		return m.UnboxedUpdate
	}
	return nil
}

type PeersList struct {
	Peers []*Peer `protobuf:"bytes,1,rep,name=peers,proto3" json:"peers,omitempty"`
}

func (m *PeersList) Reset()      { *m = PeersList{} }
func (*PeersList) ProtoMessage() {}
func (*PeersList) Descriptor() ([]byte, []int) {
	return fileDescriptor_0cf1109f6bcc730b, []int{24}
}
func (m *PeersList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PeersList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PeersList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PeersList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PeersList.Merge(m, src)
}
func (m *PeersList) XXX_Size() int {
	return m.Size()
}
func (m *PeersList) XXX_DiscardUnknown() {
	xxx_messageInfo_PeersList.DiscardUnknown(m)
}

var xxx_messageInfo_PeersList proto.InternalMessageInfo

func (m *PeersList) GetPeers() []*Peer {
	if m != nil {
		return m.Peers
	}
	return nil
}

type WeakUpdateCommand struct {
	// Types that are valid to be assigned to Command:
	//	*WeakUpdateCommand_ChangeMyOnline_
	//	*WeakUpdateCommand_SubscribeToOnlines
	//	*WeakUpdateCommand_UnsubscribeFromOnlines
	//	*WeakUpdateCommand_UnsubscribeFromAllOnlines
	//	*WeakUpdateCommand_ChangeMyTyping_
	//	*WeakUpdateCommand_SubscribeToTypings
	//	*WeakUpdateCommand_UnsubscribeFromTypings
	//	*WeakUpdateCommand_UnsubscribeFromAllTypings
	Command isWeakUpdateCommand_Command `protobuf_oneof:"command"`
}

func (m *WeakUpdateCommand) Reset()      { *m = WeakUpdateCommand{} }
func (*WeakUpdateCommand) ProtoMessage() {}
func (*WeakUpdateCommand) Descriptor() ([]byte, []int) {
	return fileDescriptor_0cf1109f6bcc730b, []int{25}
}
func (m *WeakUpdateCommand) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WeakUpdateCommand) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WeakUpdateCommand.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WeakUpdateCommand) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WeakUpdateCommand.Merge(m, src)
}
func (m *WeakUpdateCommand) XXX_Size() int {
	return m.Size()
}
func (m *WeakUpdateCommand) XXX_DiscardUnknown() {
	xxx_messageInfo_WeakUpdateCommand.DiscardUnknown(m)
}

var xxx_messageInfo_WeakUpdateCommand proto.InternalMessageInfo

type isWeakUpdateCommand_Command interface {
	isWeakUpdateCommand_Command()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type WeakUpdateCommand_ChangeMyOnline_ struct {
	ChangeMyOnline *WeakUpdateCommand_ChangeMyOnline `protobuf:"bytes,1,opt,name=change_my_online,json=changeMyOnline,proto3,oneof" json:"change_my_online,omitempty"`
}
type WeakUpdateCommand_SubscribeToOnlines struct {
	SubscribeToOnlines *PeersList `protobuf:"bytes,2,opt,name=subscribe_to_onlines,json=subscribeToOnlines,proto3,oneof" json:"subscribe_to_onlines,omitempty"`
}
type WeakUpdateCommand_UnsubscribeFromOnlines struct {
	UnsubscribeFromOnlines *PeersList `protobuf:"bytes,3,opt,name=unsubscribe_from_onlines,json=unsubscribeFromOnlines,proto3,oneof" json:"unsubscribe_from_onlines,omitempty"`
}
type WeakUpdateCommand_UnsubscribeFromAllOnlines struct {
	UnsubscribeFromAllOnlines *types.Empty `protobuf:"bytes,4,opt,name=unsubscribe_from_all_onlines,json=unsubscribeFromAllOnlines,proto3,oneof" json:"unsubscribe_from_all_onlines,omitempty"`
}
type WeakUpdateCommand_ChangeMyTyping_ struct {
	ChangeMyTyping *WeakUpdateCommand_ChangeMyTyping `protobuf:"bytes,5,opt,name=change_my_typing,json=changeMyTyping,proto3,oneof" json:"change_my_typing,omitempty"`
}
type WeakUpdateCommand_SubscribeToTypings struct {
	SubscribeToTypings *PeersList `protobuf:"bytes,6,opt,name=subscribe_to_typings,json=subscribeToTypings,proto3,oneof" json:"subscribe_to_typings,omitempty"`
}
type WeakUpdateCommand_UnsubscribeFromTypings struct {
	UnsubscribeFromTypings *PeersList `protobuf:"bytes,7,opt,name=unsubscribe_from_typings,json=unsubscribeFromTypings,proto3,oneof" json:"unsubscribe_from_typings,omitempty"`
}
type WeakUpdateCommand_UnsubscribeFromAllTypings struct {
	UnsubscribeFromAllTypings *types.Empty `protobuf:"bytes,8,opt,name=unsubscribe_from_all_typings,json=unsubscribeFromAllTypings,proto3,oneof" json:"unsubscribe_from_all_typings,omitempty"`
}

func (*WeakUpdateCommand_ChangeMyOnline_) isWeakUpdateCommand_Command()           {}
func (*WeakUpdateCommand_SubscribeToOnlines) isWeakUpdateCommand_Command()        {}
func (*WeakUpdateCommand_UnsubscribeFromOnlines) isWeakUpdateCommand_Command()    {}
func (*WeakUpdateCommand_UnsubscribeFromAllOnlines) isWeakUpdateCommand_Command() {}
func (*WeakUpdateCommand_ChangeMyTyping_) isWeakUpdateCommand_Command()           {}
func (*WeakUpdateCommand_SubscribeToTypings) isWeakUpdateCommand_Command()        {}
func (*WeakUpdateCommand_UnsubscribeFromTypings) isWeakUpdateCommand_Command()    {}
func (*WeakUpdateCommand_UnsubscribeFromAllTypings) isWeakUpdateCommand_Command() {}

func (m *WeakUpdateCommand) GetCommand() isWeakUpdateCommand_Command {
	if m != nil {
		return m.Command
	}
	return nil
}

func (m *WeakUpdateCommand) GetChangeMyOnline() *WeakUpdateCommand_ChangeMyOnline {
	if x, ok := m.GetCommand().(*WeakUpdateCommand_ChangeMyOnline_); ok {
		return x.ChangeMyOnline
	}
	return nil
}

func (m *WeakUpdateCommand) GetSubscribeToOnlines() *PeersList {
	if x, ok := m.GetCommand().(*WeakUpdateCommand_SubscribeToOnlines); ok {
		return x.SubscribeToOnlines
	}
	return nil
}

func (m *WeakUpdateCommand) GetUnsubscribeFromOnlines() *PeersList {
	if x, ok := m.GetCommand().(*WeakUpdateCommand_UnsubscribeFromOnlines); ok {
		return x.UnsubscribeFromOnlines
	}
	return nil
}

func (m *WeakUpdateCommand) GetUnsubscribeFromAllOnlines() *types.Empty {
	if x, ok := m.GetCommand().(*WeakUpdateCommand_UnsubscribeFromAllOnlines); ok {
		return x.UnsubscribeFromAllOnlines
	}
	return nil
}

func (m *WeakUpdateCommand) GetChangeMyTyping() *WeakUpdateCommand_ChangeMyTyping {
	if x, ok := m.GetCommand().(*WeakUpdateCommand_ChangeMyTyping_); ok {
		return x.ChangeMyTyping
	}
	return nil
}

func (m *WeakUpdateCommand) GetSubscribeToTypings() *PeersList {
	if x, ok := m.GetCommand().(*WeakUpdateCommand_SubscribeToTypings); ok {
		return x.SubscribeToTypings
	}
	return nil
}

func (m *WeakUpdateCommand) GetUnsubscribeFromTypings() *PeersList {
	if x, ok := m.GetCommand().(*WeakUpdateCommand_UnsubscribeFromTypings); ok {
		return x.UnsubscribeFromTypings
	}
	return nil
}

func (m *WeakUpdateCommand) GetUnsubscribeFromAllTypings() *types.Empty {
	if x, ok := m.GetCommand().(*WeakUpdateCommand_UnsubscribeFromAllTypings); ok {
		return x.UnsubscribeFromAllTypings
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*WeakUpdateCommand) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*WeakUpdateCommand_ChangeMyOnline_)(nil),
		(*WeakUpdateCommand_SubscribeToOnlines)(nil),
		(*WeakUpdateCommand_UnsubscribeFromOnlines)(nil),
		(*WeakUpdateCommand_UnsubscribeFromAllOnlines)(nil),
		(*WeakUpdateCommand_ChangeMyTyping_)(nil),
		(*WeakUpdateCommand_SubscribeToTypings)(nil),
		(*WeakUpdateCommand_UnsubscribeFromTypings)(nil),
		(*WeakUpdateCommand_UnsubscribeFromAllTypings)(nil),
	}
}

type WeakUpdateCommand_ChangeMyOnline struct {
	Online bool `protobuf:"varint,1,opt,name=online,proto3" json:"online,omitempty"`
}

func (m *WeakUpdateCommand_ChangeMyOnline) Reset()      { *m = WeakUpdateCommand_ChangeMyOnline{} }
func (*WeakUpdateCommand_ChangeMyOnline) ProtoMessage() {}
func (*WeakUpdateCommand_ChangeMyOnline) Descriptor() ([]byte, []int) {
	return fileDescriptor_0cf1109f6bcc730b, []int{25, 0}
}
func (m *WeakUpdateCommand_ChangeMyOnline) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WeakUpdateCommand_ChangeMyOnline) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WeakUpdateCommand_ChangeMyOnline.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WeakUpdateCommand_ChangeMyOnline) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WeakUpdateCommand_ChangeMyOnline.Merge(m, src)
}
func (m *WeakUpdateCommand_ChangeMyOnline) XXX_Size() int {
	return m.Size()
}
func (m *WeakUpdateCommand_ChangeMyOnline) XXX_DiscardUnknown() {
	xxx_messageInfo_WeakUpdateCommand_ChangeMyOnline.DiscardUnknown(m)
}

var xxx_messageInfo_WeakUpdateCommand_ChangeMyOnline proto.InternalMessageInfo

func (m *WeakUpdateCommand_ChangeMyOnline) GetOnline() bool {
	if m != nil {
		return m.Online
	}
	return false
}

type WeakUpdateCommand_ChangeMyTyping struct {
	Peer  *Peer      `protobuf:"bytes,1,opt,name=peer,proto3" json:"peer,omitempty"`
	Type  TypingType `protobuf:"varint,2,opt,name=type,proto3,enum=dialog.TypingType" json:"type,omitempty"`
	Start bool       `protobuf:"varint,3,opt,name=start,proto3" json:"start,omitempty"`
}

func (m *WeakUpdateCommand_ChangeMyTyping) Reset()      { *m = WeakUpdateCommand_ChangeMyTyping{} }
func (*WeakUpdateCommand_ChangeMyTyping) ProtoMessage() {}
func (*WeakUpdateCommand_ChangeMyTyping) Descriptor() ([]byte, []int) {
	return fileDescriptor_0cf1109f6bcc730b, []int{25, 1}
}
func (m *WeakUpdateCommand_ChangeMyTyping) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WeakUpdateCommand_ChangeMyTyping) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WeakUpdateCommand_ChangeMyTyping.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WeakUpdateCommand_ChangeMyTyping) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WeakUpdateCommand_ChangeMyTyping.Merge(m, src)
}
func (m *WeakUpdateCommand_ChangeMyTyping) XXX_Size() int {
	return m.Size()
}
func (m *WeakUpdateCommand_ChangeMyTyping) XXX_DiscardUnknown() {
	xxx_messageInfo_WeakUpdateCommand_ChangeMyTyping.DiscardUnknown(m)
}

var xxx_messageInfo_WeakUpdateCommand_ChangeMyTyping proto.InternalMessageInfo

func (m *WeakUpdateCommand_ChangeMyTyping) GetPeer() *Peer {
	if m != nil {
		return m.Peer
	}
	return nil
}

func (m *WeakUpdateCommand_ChangeMyTyping) GetType() TypingType {
	if m != nil {
		return m.Type
	}
	return TYPINGTYPE_UNKNOWN
}

func (m *WeakUpdateCommand_ChangeMyTyping) GetStart() bool {
	if m != nil {
		return m.Start
	}
	return false
}

type WeakUpdateBox struct {
	// Types that are valid to be assigned to Updatebox:
	//	*WeakUpdateBox_TypingStart
	//	*WeakUpdateBox_TypingStop
	//	*WeakUpdateBox_UserLastSeen
	//	*WeakUpdateBox_GroupOnline
	//	*WeakUpdateBox_ForceReload
	//	*WeakUpdateBox_PermissionsChange
	//	*WeakUpdateBox_UserStatusChange
	//	*WeakUpdateBox_MessageReactionUpdate
	//	*WeakUpdateBox_Message
	//	*WeakUpdateBox_MessageContentChange
	//	*WeakUpdateBox_MessageRead
	//	*WeakUpdateBox_MessageReceived
	//	*WeakUpdateBox_MessageReadByMe
	Updatebox isWeakUpdateBox_Updatebox `protobuf_oneof:"updatebox"`
}

func (m *WeakUpdateBox) Reset()      { *m = WeakUpdateBox{} }
func (*WeakUpdateBox) ProtoMessage() {}
func (*WeakUpdateBox) Descriptor() ([]byte, []int) {
	return fileDescriptor_0cf1109f6bcc730b, []int{26}
}
func (m *WeakUpdateBox) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WeakUpdateBox) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WeakUpdateBox.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WeakUpdateBox) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WeakUpdateBox.Merge(m, src)
}
func (m *WeakUpdateBox) XXX_Size() int {
	return m.Size()
}
func (m *WeakUpdateBox) XXX_DiscardUnknown() {
	xxx_messageInfo_WeakUpdateBox.DiscardUnknown(m)
}

var xxx_messageInfo_WeakUpdateBox proto.InternalMessageInfo

type isWeakUpdateBox_Updatebox interface {
	isWeakUpdateBox_Updatebox()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type WeakUpdateBox_TypingStart struct {
	TypingStart *UpdateTyping `protobuf:"bytes,1,opt,name=typing_start,json=typingStart,proto3,oneof" json:"typing_start,omitempty"`
}
type WeakUpdateBox_TypingStop struct {
	TypingStop *UpdateTypingStop `protobuf:"bytes,2,opt,name=typing_stop,json=typingStop,proto3,oneof" json:"typing_stop,omitempty"`
}
type WeakUpdateBox_UserLastSeen struct {
	UserLastSeen *UpdateUserLastSeen `protobuf:"bytes,3,opt,name=user_last_seen,json=userLastSeen,proto3,oneof" json:"user_last_seen,omitempty"`
}
type WeakUpdateBox_GroupOnline struct {
	GroupOnline *UpdateGroupOnline `protobuf:"bytes,4,opt,name=group_online,json=groupOnline,proto3,oneof" json:"group_online,omitempty"`
}
type WeakUpdateBox_ForceReload struct {
	ForceReload *WeakUpdateBox_UpdateForceReloadState `protobuf:"bytes,5,opt,name=force_reload,json=forceReload,proto3,oneof" json:"force_reload,omitempty"`
}
type WeakUpdateBox_PermissionsChange struct {
	PermissionsChange *UpdatePermissionsChange `protobuf:"bytes,6,opt,name=permissions_change,json=permissionsChange,proto3,oneof" json:"permissions_change,omitempty"`
}
type WeakUpdateBox_UserStatusChange struct {
	UserStatusChange *UpdateUserStatusChanged `protobuf:"bytes,7,opt,name=user_status_change,json=userStatusChange,proto3,oneof" json:"user_status_change,omitempty"`
}
type WeakUpdateBox_MessageReactionUpdate struct {
	MessageReactionUpdate *MessageReactionsUpdate `protobuf:"bytes,8,opt,name=message_reaction_update,json=messageReactionUpdate,proto3,oneof" json:"message_reaction_update,omitempty"`
}
type WeakUpdateBox_Message struct {
	Message *UpdateMessage `protobuf:"bytes,9,opt,name=message,proto3,oneof" json:"message,omitempty"`
}
type WeakUpdateBox_MessageContentChange struct {
	MessageContentChange *UpdateMessageContentChanged `protobuf:"bytes,10,opt,name=message_content_change,json=messageContentChange,proto3,oneof" json:"message_content_change,omitempty"`
}
type WeakUpdateBox_MessageRead struct {
	MessageRead *UpdateMessageRead `protobuf:"bytes,11,opt,name=message_read,json=messageRead,proto3,oneof" json:"message_read,omitempty"`
}
type WeakUpdateBox_MessageReceived struct {
	MessageReceived *UpdateMessageReceived `protobuf:"bytes,12,opt,name=message_received,json=messageReceived,proto3,oneof" json:"message_received,omitempty"`
}
type WeakUpdateBox_MessageReadByMe struct {
	MessageReadByMe *UpdateMessageReadByMe `protobuf:"bytes,13,opt,name=message_read_by_me,json=messageReadByMe,proto3,oneof" json:"message_read_by_me,omitempty"`
}

func (*WeakUpdateBox_TypingStart) isWeakUpdateBox_Updatebox()           {}
func (*WeakUpdateBox_TypingStop) isWeakUpdateBox_Updatebox()            {}
func (*WeakUpdateBox_UserLastSeen) isWeakUpdateBox_Updatebox()          {}
func (*WeakUpdateBox_GroupOnline) isWeakUpdateBox_Updatebox()           {}
func (*WeakUpdateBox_ForceReload) isWeakUpdateBox_Updatebox()           {}
func (*WeakUpdateBox_PermissionsChange) isWeakUpdateBox_Updatebox()     {}
func (*WeakUpdateBox_UserStatusChange) isWeakUpdateBox_Updatebox()      {}
func (*WeakUpdateBox_MessageReactionUpdate) isWeakUpdateBox_Updatebox() {}
func (*WeakUpdateBox_Message) isWeakUpdateBox_Updatebox()               {}
func (*WeakUpdateBox_MessageContentChange) isWeakUpdateBox_Updatebox()  {}
func (*WeakUpdateBox_MessageRead) isWeakUpdateBox_Updatebox()           {}
func (*WeakUpdateBox_MessageReceived) isWeakUpdateBox_Updatebox()       {}
func (*WeakUpdateBox_MessageReadByMe) isWeakUpdateBox_Updatebox()       {}

func (m *WeakUpdateBox) GetUpdatebox() isWeakUpdateBox_Updatebox {
	if m != nil {
		return m.Updatebox
	}
	return nil
}

func (m *WeakUpdateBox) GetTypingStart() *UpdateTyping {
	if x, ok := m.GetUpdatebox().(*WeakUpdateBox_TypingStart); ok {
		return x.TypingStart
	}
	return nil
}

func (m *WeakUpdateBox) GetTypingStop() *UpdateTypingStop {
	if x, ok := m.GetUpdatebox().(*WeakUpdateBox_TypingStop); ok {
		return x.TypingStop
	}
	return nil
}

func (m *WeakUpdateBox) GetUserLastSeen() *UpdateUserLastSeen {
	if x, ok := m.GetUpdatebox().(*WeakUpdateBox_UserLastSeen); ok {
		return x.UserLastSeen
	}
	return nil
}

func (m *WeakUpdateBox) GetGroupOnline() *UpdateGroupOnline {
	if x, ok := m.GetUpdatebox().(*WeakUpdateBox_GroupOnline); ok {
		return x.GroupOnline
	}
	return nil
}

func (m *WeakUpdateBox) GetForceReload() *WeakUpdateBox_UpdateForceReloadState {
	if x, ok := m.GetUpdatebox().(*WeakUpdateBox_ForceReload); ok {
		return x.ForceReload
	}
	return nil
}

func (m *WeakUpdateBox) GetPermissionsChange() *UpdatePermissionsChange {
	if x, ok := m.GetUpdatebox().(*WeakUpdateBox_PermissionsChange); ok {
		return x.PermissionsChange
	}
	return nil
}

func (m *WeakUpdateBox) GetUserStatusChange() *UpdateUserStatusChanged {
	if x, ok := m.GetUpdatebox().(*WeakUpdateBox_UserStatusChange); ok {
		return x.UserStatusChange
	}
	return nil
}

func (m *WeakUpdateBox) GetMessageReactionUpdate() *MessageReactionsUpdate {
	if x, ok := m.GetUpdatebox().(*WeakUpdateBox_MessageReactionUpdate); ok {
		return x.MessageReactionUpdate
	}
	return nil
}

func (m *WeakUpdateBox) GetMessage() *UpdateMessage {
	if x, ok := m.GetUpdatebox().(*WeakUpdateBox_Message); ok {
		return x.Message
	}
	return nil
}

func (m *WeakUpdateBox) GetMessageContentChange() *UpdateMessageContentChanged {
	if x, ok := m.GetUpdatebox().(*WeakUpdateBox_MessageContentChange); ok {
		return x.MessageContentChange
	}
	return nil
}

func (m *WeakUpdateBox) GetMessageRead() *UpdateMessageRead {
	if x, ok := m.GetUpdatebox().(*WeakUpdateBox_MessageRead); ok {
		return x.MessageRead
	}
	return nil
}

func (m *WeakUpdateBox) GetMessageReceived() *UpdateMessageReceived {
	if x, ok := m.GetUpdatebox().(*WeakUpdateBox_MessageReceived); ok {
		return x.MessageReceived
	}
	return nil
}

func (m *WeakUpdateBox) GetMessageReadByMe() *UpdateMessageReadByMe {
	if x, ok := m.GetUpdatebox().(*WeakUpdateBox_MessageReadByMe); ok {
		return x.MessageReadByMe
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*WeakUpdateBox) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*WeakUpdateBox_TypingStart)(nil),
		(*WeakUpdateBox_TypingStop)(nil),
		(*WeakUpdateBox_UserLastSeen)(nil),
		(*WeakUpdateBox_GroupOnline)(nil),
		(*WeakUpdateBox_ForceReload)(nil),
		(*WeakUpdateBox_PermissionsChange)(nil),
		(*WeakUpdateBox_UserStatusChange)(nil),
		(*WeakUpdateBox_MessageReactionUpdate)(nil),
		(*WeakUpdateBox_Message)(nil),
		(*WeakUpdateBox_MessageContentChange)(nil),
		(*WeakUpdateBox_MessageRead)(nil),
		(*WeakUpdateBox_MessageReceived)(nil),
		(*WeakUpdateBox_MessageReadByMe)(nil),
	}
}

type WeakUpdateBox_UpdateForceReloadState struct {
	Fields []*WeakUpdateBox_UpdateForceReloadState_ForceReloadField `protobuf:"bytes,1,rep,name=fields,proto3" json:"fields,omitempty"`
}

func (m *WeakUpdateBox_UpdateForceReloadState) Reset()      { *m = WeakUpdateBox_UpdateForceReloadState{} }
func (*WeakUpdateBox_UpdateForceReloadState) ProtoMessage() {}
func (*WeakUpdateBox_UpdateForceReloadState) Descriptor() ([]byte, []int) {
	return fileDescriptor_0cf1109f6bcc730b, []int{26, 0}
}
func (m *WeakUpdateBox_UpdateForceReloadState) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WeakUpdateBox_UpdateForceReloadState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WeakUpdateBox_UpdateForceReloadState.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WeakUpdateBox_UpdateForceReloadState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WeakUpdateBox_UpdateForceReloadState.Merge(m, src)
}
func (m *WeakUpdateBox_UpdateForceReloadState) XXX_Size() int {
	return m.Size()
}
func (m *WeakUpdateBox_UpdateForceReloadState) XXX_DiscardUnknown() {
	xxx_messageInfo_WeakUpdateBox_UpdateForceReloadState.DiscardUnknown(m)
}

var xxx_messageInfo_WeakUpdateBox_UpdateForceReloadState proto.InternalMessageInfo

func (m *WeakUpdateBox_UpdateForceReloadState) GetFields() []*WeakUpdateBox_UpdateForceReloadState_ForceReloadField {
	if m != nil {
		return m.Fields
	}
	return nil
}

type WeakUpdateBox_UpdateForceReloadState_ForceReloadField struct {
	// Types that are valid to be assigned to Field:
	//	*WeakUpdateBox_UpdateForceReloadState_ForceReloadField_ReloadDialogs
	//	*WeakUpdateBox_UpdateForceReloadState_ForceReloadField_ReloadContacts
	//	*WeakUpdateBox_UpdateForceReloadState_ForceReloadField_ReloadHistory
	Field isWeakUpdateBox_UpdateForceReloadState_ForceReloadField_Field `protobuf_oneof:"field"`
}

func (m *WeakUpdateBox_UpdateForceReloadState_ForceReloadField) Reset() {
	*m = WeakUpdateBox_UpdateForceReloadState_ForceReloadField{}
}
func (*WeakUpdateBox_UpdateForceReloadState_ForceReloadField) ProtoMessage() {}
func (*WeakUpdateBox_UpdateForceReloadState_ForceReloadField) Descriptor() ([]byte, []int) {
	return fileDescriptor_0cf1109f6bcc730b, []int{26, 0, 0}
}
func (m *WeakUpdateBox_UpdateForceReloadState_ForceReloadField) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WeakUpdateBox_UpdateForceReloadState_ForceReloadField) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WeakUpdateBox_UpdateForceReloadState_ForceReloadField.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WeakUpdateBox_UpdateForceReloadState_ForceReloadField) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WeakUpdateBox_UpdateForceReloadState_ForceReloadField.Merge(m, src)
}
func (m *WeakUpdateBox_UpdateForceReloadState_ForceReloadField) XXX_Size() int {
	return m.Size()
}
func (m *WeakUpdateBox_UpdateForceReloadState_ForceReloadField) XXX_DiscardUnknown() {
	xxx_messageInfo_WeakUpdateBox_UpdateForceReloadState_ForceReloadField.DiscardUnknown(m)
}

var xxx_messageInfo_WeakUpdateBox_UpdateForceReloadState_ForceReloadField proto.InternalMessageInfo

type isWeakUpdateBox_UpdateForceReloadState_ForceReloadField_Field interface {
	isWeakUpdateBox_UpdateForceReloadState_ForceReloadField_Field()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type WeakUpdateBox_UpdateForceReloadState_ForceReloadField_ReloadDialogs struct {
	ReloadDialogs *types.Empty `protobuf:"bytes,1,opt,name=reload_dialogs,json=reloadDialogs,proto3,oneof" json:"reload_dialogs,omitempty"`
}
type WeakUpdateBox_UpdateForceReloadState_ForceReloadField_ReloadContacts struct {
	ReloadContacts *types.Empty `protobuf:"bytes,2,opt,name=reload_contacts,json=reloadContacts,proto3,oneof" json:"reload_contacts,omitempty"`
}
type WeakUpdateBox_UpdateForceReloadState_ForceReloadField_ReloadHistory struct {
	ReloadHistory *PeersList `protobuf:"bytes,3,opt,name=reload_history,json=reloadHistory,proto3,oneof" json:"reload_history,omitempty"`
}

func (*WeakUpdateBox_UpdateForceReloadState_ForceReloadField_ReloadDialogs) isWeakUpdateBox_UpdateForceReloadState_ForceReloadField_Field() {
}
func (*WeakUpdateBox_UpdateForceReloadState_ForceReloadField_ReloadContacts) isWeakUpdateBox_UpdateForceReloadState_ForceReloadField_Field() {
}
func (*WeakUpdateBox_UpdateForceReloadState_ForceReloadField_ReloadHistory) isWeakUpdateBox_UpdateForceReloadState_ForceReloadField_Field() {
}

func (m *WeakUpdateBox_UpdateForceReloadState_ForceReloadField) GetField() isWeakUpdateBox_UpdateForceReloadState_ForceReloadField_Field {
	if m != nil {
		return m.Field
	}
	return nil
}

func (m *WeakUpdateBox_UpdateForceReloadState_ForceReloadField) GetReloadDialogs() *types.Empty {
	if x, ok := m.GetField().(*WeakUpdateBox_UpdateForceReloadState_ForceReloadField_ReloadDialogs); ok {
		return x.ReloadDialogs
	}
	return nil
}

func (m *WeakUpdateBox_UpdateForceReloadState_ForceReloadField) GetReloadContacts() *types.Empty {
	if x, ok := m.GetField().(*WeakUpdateBox_UpdateForceReloadState_ForceReloadField_ReloadContacts); ok {
		return x.ReloadContacts
	}
	return nil
}

func (m *WeakUpdateBox_UpdateForceReloadState_ForceReloadField) GetReloadHistory() *PeersList {
	if x, ok := m.GetField().(*WeakUpdateBox_UpdateForceReloadState_ForceReloadField_ReloadHistory); ok {
		return x.ReloadHistory
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*WeakUpdateBox_UpdateForceReloadState_ForceReloadField) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*WeakUpdateBox_UpdateForceReloadState_ForceReloadField_ReloadDialogs)(nil),
		(*WeakUpdateBox_UpdateForceReloadState_ForceReloadField_ReloadContacts)(nil),
		(*WeakUpdateBox_UpdateForceReloadState_ForceReloadField_ReloadHistory)(nil),
	}
}

func init() {
	proto.RegisterType((*UpdateSeqUpdate)(nil), "dialog.UpdateSeqUpdate")
	proto.RegisterType((*UpdateFatSeqUpdate)(nil), "dialog.UpdateFatSeqUpdate")
	proto.RegisterType((*UpdateWeakUpdate)(nil), "dialog.UpdateWeakUpdate")
	proto.RegisterType((*UpdateWeakFatUpdate)(nil), "dialog.UpdateWeakFatUpdate")
	proto.RegisterType((*UpdateSeqUpdateTooLong)(nil), "dialog.UpdateSeqUpdateTooLong")
	proto.RegisterType((*UpdateContainer)(nil), "dialog.UpdateContainer")
	proto.RegisterType((*UpdateCombinedUpdate)(nil), "dialog.UpdateCombinedUpdate")
	proto.RegisterType((*RequestGetState)(nil), "dialog.RequestGetState")
	proto.RegisterType((*RequestGetDifference)(nil), "dialog.RequestGetDifference")
	proto.RegisterType((*ResponseGetDifference)(nil), "dialog.ResponseGetDifference")
	proto.RegisterType((*RequestGetDialogsDifference)(nil), "dialog.RequestGetDialogsDifference")
	proto.RegisterType((*ResponseGetDialogsDifference)(nil), "dialog.ResponseGetDialogsDifference")
	proto.RegisterType((*GroupMembersSubset)(nil), "dialog.GroupMembersSubset")
	proto.RegisterType((*RequestGetReferencedEntitites)(nil), "dialog.RequestGetReferencedEntitites")
	proto.RegisterType((*ResponseGetReferencedEntitites)(nil), "dialog.ResponseGetReferencedEntitites")
	proto.RegisterType((*RequestGetPartialPeerInfo)(nil), "dialog.RequestGetPartialPeerInfo")
	proto.RegisterType((*ResponseGetPartialPeerInfo)(nil), "dialog.ResponseGetPartialPeerInfo")
	proto.RegisterType((*UpdateRawUpdate)(nil), "dialog.UpdateRawUpdate")
	proto.RegisterType((*UpdateEmptyUpdate)(nil), "dialog.UpdateEmptyUpdate")
	proto.RegisterType((*RequestSubscribeToOnline)(nil), "dialog.RequestSubscribeToOnline")
	proto.RegisterType((*RequestSubscribeFromOnline)(nil), "dialog.RequestSubscribeFromOnline")
	proto.RegisterType((*RequestSubscribeToGroupOnline)(nil), "dialog.RequestSubscribeToGroupOnline")
	proto.RegisterType((*RequestSubscribeFromGroupOnline)(nil), "dialog.RequestSubscribeFromGroupOnline")
	proto.RegisterType((*SeqUpdateBox)(nil), "dialog.SeqUpdateBox")
	proto.RegisterType((*PeersList)(nil), "dialog.PeersList")
	proto.RegisterType((*WeakUpdateCommand)(nil), "dialog.WeakUpdateCommand")
	proto.RegisterType((*WeakUpdateCommand_ChangeMyOnline)(nil), "dialog.WeakUpdateCommand.ChangeMyOnline")
	proto.RegisterType((*WeakUpdateCommand_ChangeMyTyping)(nil), "dialog.WeakUpdateCommand.ChangeMyTyping")
	proto.RegisterType((*WeakUpdateBox)(nil), "dialog.WeakUpdateBox")
	proto.RegisterType((*WeakUpdateBox_UpdateForceReloadState)(nil), "dialog.WeakUpdateBox.UpdateForceReloadState")
	proto.RegisterType((*WeakUpdateBox_UpdateForceReloadState_ForceReloadField)(nil), "dialog.WeakUpdateBox.UpdateForceReloadState.ForceReloadField")
}

func init() { proto.RegisterFile("sequence_and_updates.proto", fileDescriptor_0cf1109f6bcc730b) }

var fileDescriptor_0cf1109f6bcc730b = []byte{
	// 4259 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x5c, 0xcd, 0x6f, 0x1c, 0x47,
	0x76, 0x9f, 0x26, 0x47, 0xe4, 0xb0, 0xf8, 0xa1, 0x51, 0x89, 0xa2, 0x5a, 0x23, 0x69, 0x44, 0xb7,
	0x2c, 0x99, 0x96, 0xbd, 0xa4, 0x44, 0xcb, 0x6b, 0x5b, 0xb2, 0x2d, 0x8b, 0x94, 0xe8, 0x11, 0x2d,
	0x9a, 0xdc, 0x26, 0xe9, 0xdd, 0xb5, 0xb3, 0x3b, 0xdb, 0xd3, 0x5d, 0x33, 0xec, 0xe5, 0x4c, 0xf7,
	0xa8, 0xbb, 0x87, 0x12, 0x17, 0x01, 0x62, 0x2c, 0x90, 0x1c, 0x92, 0xcb, 0x02, 0xc9, 0x21, 0xc8,
	0x61, 0x8f, 0x41, 0x80, 0xe4, 0x2f, 0xd8, 0x43, 0x72, 0xdd, 0x4b, 0x00, 0x23, 0xb9, 0x2c, 0x90,
	0x4b, 0x4c, 0xe7, 0x10, 0xe4, 0xb4, 0xa7, 0x9c, 0x12, 0x20, 0xe8, 0xaa, 0xea, 0x7e, 0xd5, 0xd5,
	0xd5, 0x33, 0x54, 0x9c, 0x8f, 0x3d, 0x59, 0xac, 0xf7, 0xab, 0xf7, 0x5e, 0xbd, 0xf7, 0xea, 0xd5,
	0xab, 0x37, 0xd5, 0x46, 0xb5, 0x90, 0x3c, 0x1b, 0x10, 0xcf, 0x26, 0x4d, 0xcb, 0x73, 0x9a, 0x83,
	0xbe, 0x63, 0x45, 0x24, 0x5c, 0xee, 0x07, 0x7e, 0xe4, 0xe3, 0x09, 0xc7, 0xb5, 0xba, 0x7e, 0xa7,
	0x56, 0xef, 0xf8, 0x7e, 0xa7, 0x4b, 0x56, 0xe8, 0x68, 0x6b, 0xd0, 0x5e, 0x79, 0x1e, 0x58, 0xfd,
	0x3e, 0x09, 0x38, 0xae, 0x76, 0x59, 0xa6, 0x93, 0x5e, 0x3f, 0x3a, 0xe6, 0xc4, 0x2b, 0x9c, 0x68,
	0xf5, 0xdd, 0x15, 0xcb, 0xf3, 0xfc, 0xc8, 0x8a, 0x5c, 0xdf, 0x4b, 0xa6, 0x9e, 0x73, 0x48, 0xdb,
	0xf5, 0x5c, 0x71, 0xe8, 0x7c, 0xcf, 0x0d, 0x6d, 0xd2, 0xed, 0x5a, 0x1e, 0xf1, 0x07, 0xc9, 0xe0,
	0xbc, 0x35, 0x88, 0x0e, 0x88, 0x17, 0xb9, 0x36, 0x9d, 0xce, 0x47, 0x67, 0x3a, 0x81, 0x3f, 0xe8,
	0x27, 0x98, 0xb9, 0x30, 0x72, 0xed, 0x43, 0x50, 0xeb, 0x62, 0x74, 0xdc, 0x77, 0xbd, 0x0e, 0x5d,
	0x98, 0xef, 0x75, 0x5d, 0x8f, 0x70, 0xc2, 0x59, 0x72, 0x44, 0xbc, 0xa8, 0xd9, 0x4a, 0xb9, 0xcf,
	0x3e, 0x27, 0xad, 0x66, 0x10, 0xd9, 0x89, 0x52, 0xb6, 0xef, 0xb5, 0xdd, 0x4e, 0x33, 0x3c, 0xf6,
	0x92, 0xa1, 0x39, 0xdb, 0x1f, 0x78, 0x11, 0xf0, 0x9e, 0xb3, 0x7d, 0x2f, 0xb2, 0xec, 0x28, 0xe5,
	0xd0, 0x0f, 0xdc, 0x23, 0xcb, 0x4e, 0x16, 0x3d, 0xdd, 0x27, 0x80, 0x3d, 0xdb, 0x23, 0x61, 0x68,
	0x75, 0x5c, 0xaf, 0x93, 0x50, 0x07, 0x21, 0x50, 0x67, 0xc2, 0xbe, 0x65, 0x93, 0x14, 0x1b, 0x10,
	0xcb, 0xce, 0x18, 0xa8, 0x4f, 0x82, 0x9e, 0x1b, 0x86, 0xc2, 0xd0, 0x85, 0xd0, 0xb6, 0xba, 0x56,
	0xbf, 0xb5, 0xc2, 0xff, 0xcb, 0x86, 0x8d, 0x7f, 0xff, 0x08, 0x9d, 0xdd, 0xa7, 0xfe, 0xdb, 0x25,
	0xcf, 0xd8, 0x3f, 0xf0, 0x35, 0x34, 0x1e, 0x92, 0x67, 0xba, 0xb6, 0xa8, 0x2d, 0x9d, 0x59, 0x9b,
	0xfd, 0xe3, 0x7f, 0xbb, 0x3d, 0x85, 0x26, 0x8f, 0xdc, 0xd0, 0x6d, 0x75, 0x89, 0x19, 0x53, 0xf0,
	0x75, 0x74, 0x26, 0x8c, 0xac, 0x88, 0xe8, 0x63, 0x8b, 0xda, 0xd2, 0x4c, 0x02, 0xb1, 0xfd, 0x5e,
	0xdf, 0xb2, 0x23, 0x93, 0xd1, 0xf0, 0x2a, 0x9a, 0x65, 0x81, 0xd1, 0x3c, 0x20, 0x96, 0x43, 0x02,
	0x7d, 0x5c, 0xc5, 0x6f, 0x86, 0x61, 0x1a, 0x14, 0x82, 0x7f, 0x80, 0x16, 0xd8, 0xdf, 0x1b, 0x7e,
	0x60, 0x13, 0x93, 0x74, 0x7d, 0xcb, 0xd9, 0xa5, 0x92, 0xca, 0x8b, 0xda, 0xd2, 0xf4, 0x6a, 0x7d,
	0x99, 0x05, 0xd7, 0xf2, 0xbe, 0x12, 0xd5, 0x28, 0x99, 0x05, 0xf3, 0xf1, 0x17, 0xe8, 0x22, 0xa3,
	0xec, 0x87, 0x24, 0x78, 0x78, 0x64, 0x45, 0x56, 0xb0, 0x7e, 0x60, 0x79, 0x1d, 0xe2, 0xe8, 0x67,
	0x28, 0xeb, 0x6b, 0x59, 0xd6, 0x39, 0x58, 0xa3, 0x64, 0x16, 0x71, 0xc0, 0xfb, 0xe8, 0x02, 0x90,
	0x3e, 0xb5, 0x7a, 0x24, 0x61, 0x3d, 0x41, 0x59, 0x5f, 0xcd, 0xb3, 0x16, 0x40, 0x8d, 0x92, 0xa9,
	0x9e, 0x8d, 0x1d, 0x54, 0x03, 0xc2, 0x53, 0xdf, 0xb6, 0xba, 0x22, 0xef, 0x49, 0xca, 0xdb, 0xc8,
	0xf3, 0x96, 0x91, 0x8d, 0x92, 0x39, 0x84, 0x0f, 0xb6, 0xd0, 0x25, 0xa0, 0xae, 0xf3, 0x00, 0x4d,
	0x84, 0x54, 0xa8, 0x90, 0x57, 0xf2, 0x42, 0x24, 0x60, 0xa3, 0x64, 0x16, 0x73, 0x91, 0xec, 0xe3,
	0xda, 0x87, 0x09, 0xfb, 0xa9, 0x42, 0xfb, 0x00, 0x48, 0xb2, 0x0f, 0x10, 0x20, 0x5a, 0xa8, 0x47,
	0x5a, 0xfe, 0x20, 0x4a, 0xf8, 0x22, 0x55, 0xb4, 0xc8, 0x28, 0x88, 0x16, 0x99, 0x82, 0xff, 0x00,
	0x5d, 0x07, 0xca, 0x4e, 0x40, 0xda, 0x24, 0x08, 0x88, 0xf3, 0xd4, 0xf2, 0x3a, 0x03, 0xab, 0x43,
	0x52, 0xeb, 0x4c, 0x53, 0x31, 0x6f, 0xe4, 0xc5, 0x14, 0x4e, 0x69, 0x94, 0xcc, 0xd3, 0x70, 0xce,
	0x3a, 0x65, 0xcf, 0xed, 0x91, 0xcf, 0x7d, 0x2f, 0xf5, 0xfc, 0x4c, 0x91, 0x53, 0x24, 0x60, 0xd6,
	0x29, 0x12, 0x11, 0xff, 0x14, 0x5d, 0x01, 0xe2, 0x9a, 0x1f, 0xad, 0xfb, 0xbd, 0x9e, 0xe5, 0x39,
	0xe9, 0xe2, 0x66, 0xa9, 0x94, 0x57, 0xf3, 0x52, 0xf2, 0xd8, 0x46, 0xc9, 0x1c, 0xca, 0x0b, 0x9b,
	0x68, 0x1e, 0xe8, 0x8f, 0x5f, 0xa4, 0x7e, 0x9a, 0xa3, 0x32, 0xae, 0xe4, 0x65, 0x00, 0xa6, 0x51,
	0x32, 0x95, 0x73, 0xf1, 0x8f, 0x91, 0x0e, 0xe3, 0x1b, 0x83, 0x6e, 0x57, 0xe0, 0x7b, 0x96, 0xf2,
	0x5d, 0xcc, 0xf3, 0xcd, 0xe2, 0x1a, 0x25, 0xb3, 0x90, 0x47, 0x56, 0xe7, 0x5d, 0xf2, 0x22, 0xe1,
	0x5d, 0x2d, 0xd2, 0x19, 0x30, 0x59, 0x9d, 0x61, 0x1c, 0xf7, 0x51, 0x5d, 0xd8, 0x25, 0x83, 0x30,
	0xf2, 0x7b, 0x3b, 0x81, 0xdf, 0x76, 0xbb, 0xa9, 0x6f, 0xcf, 0x51, 0xee, 0x37, 0x15, 0x1b, 0x4e,
	0x81, 0x6e, 0x94, 0xcc, 0x11, 0xfc, 0xb2, 0x79, 0x2f, 0x4e, 0x85, 0x83, 0xd4, 0xc1, 0xb8, 0x28,
	0xef, 0x65, 0x60, 0xd9, 0xbc, 0x97, 0x21, 0x01, 0x73, 0xbe, 0xe1, 0x4d, 0xd2, 0x71, 0xc3, 0x88,
	0x04, 0xc4, 0xd1, 0xcf, 0xab, 0x98, 0xe7, 0x60, 0xc0, 0x3c, 0x47, 0xc2, 0xdb, 0xe8, 0x7c, 0x86,
	0x14, 0x3e, 0x74, 0x1c, 0xe2, 0xe8, 0xf3, 0x94, 0xf1, 0x65, 0x25, 0x63, 0x06, 0x69, 0x94, 0x4c,
	0xd5, 0x4c, 0x30, 0xbe, 0x30, 0xbc, 0x67, 0x85, 0x87, 0xbb, 0x83, 0xb0, 0x4f, 0xbc, 0x98, 0xf7,
	0x05, 0x95, 0xf1, 0x8b, 0xd0, 0x60, 0xfc, 0x22, 0x04, 0xe4, 0xbd, 0x04, 0x61, 0x92, 0x9e, 0x7f,
	0x44, 0x1c, 0x7d, 0x41, 0x95, 0xf7, 0x24, 0x10, 0xe4, 0x3d, 0x89, 0x80, 0x9f, 0xa0, 0x73, 0xc2,
	0x6e, 0xeb, 0xfa, 0xf6, 0x21, 0x71, 0xf4, 0x8b, 0x94, 0xe5, 0x25, 0xc5, 0x76, 0x65, 0x80, 0x46,
	0xc9, 0xcc, 0xcf, 0x02, 0x23, 0xc7, 0x83, 0xfb, 0x5e, 0x8b, 0x33, 0xd3, 0x55, 0x46, 0xce, 0x40,
	0xc0, 0xc8, 0x99, 0x61, 0xdc, 0x41, 0x97, 0xd9, 0xf0, 0x93, 0xb8, 0xf0, 0x89, 0xab, 0x92, 0x23,
	0xb2, 0x45, 0x1c, 0xd7, 0x7a, 0x1c, 0x57, 0x4f, 0xfa, 0x25, 0xca, 0xf8, 0x7a, 0x96, 0xb1, 0x12,
	0xda, 0x28, 0x99, 0xc3, 0x38, 0xe1, 0x0f, 0x92, 0xf2, 0x62, 0x8b, 0xd6, 0x49, 0x44, 0xaf, 0x51,
	0xd6, 0x17, 0xb2, 0xac, 0x39, 0xb1, 0x51, 0x32, 0xb3, 0x68, 0xd0, 0x93, 0x0f, 0xc4, 0x36, 0x26,
	0x5e, 0x9a, 0x40, 0x2e, 0xab, 0xf4, 0x54, 0x42, 0x41, 0x4f, 0x25, 0x19, 0x9c, 0xc5, 0xc9, 0xbb,
	0xb1, 0x19, 0xae, 0xa8, 0x9c, 0x25, 0x00, 0xc0, 0x59, 0xc2, 0x20, 0x84, 0x13, 0x1f, 0x34, 0x89,
	0x4d, 0xdc, 0x38, 0x9c, 0xae, 0xaa, 0xc2, 0x49, 0x02, 0x41, 0x38, 0x49, 0x84, 0x9c, 0x86, 0x26,
	0xb1, 0x1c, 0xbd, 0x3e, 0x44, 0xc3, 0x18, 0x90, 0xd3, 0x30, 0x1e, 0x54, 0x68, 0x68, 0x39, 0x6b,
	0xc7, 0x5b, 0x44, 0xbf, 0x36, 0x54, 0x43, 0x06, 0x52, 0x68, 0xc8, 0x08, 0x10, 0xa5, 0x9c, 0xf0,
	0x88, 0x74, 0x49, 0x44, 0xf4, 0x45, 0x55, 0x94, 0x66, 0x20, 0x10, 0xa5, 0x99, 0x61, 0xbc, 0x8e,
	0xce, 0xf2, 0xad, 0x75, 0x60, 0x45, 0xeb, 0x5d, 0x62, 0x05, 0xfa, 0x2b, 0x94, 0xd9, 0x45, 0x69,
	0x4b, 0x26, 0xe4, 0x46, 0xc9, 0x94, 0x67, 0xe0, 0x0d, 0x54, 0x85, 0x21, 0xae, 0x92, 0x41, 0xb9,
	0xe8, 0x79, 0x2e, 0xa9, 0x3e, 0xb9, 0x39, 0x60, 0xff, 0x78, 0xec, 0x61, 0x60, 0x1f, 0xb8, 0x47,
	0x44, 0xbf, 0xae, 0xb2, 0xbf, 0x00, 0x00, 0xfb, 0x0b, 0x83, 0x42, 0x42, 0x3e, 0xb0, 0xa2, 0x8f,
	0xe9, 0x35, 0x27, 0x89, 0xe8, 0x57, 0x95, 0x09, 0x59, 0x86, 0x09, 0x09, 0x59, 0x26, 0x81, 0x73,
	0xcd, 0xe4, 0xb6, 0xc1, 0x98, 0xe8, 0x37, 0x54, 0xce, 0x95, 0x40, 0xe0, 0x5c, 0x89, 0x00, 0x75,
	0xc8, 0x23, 0x3a, 0x7d, 0xc3, 0x3a, 0xf2, 0x07, 0x81, 0x1b, 0xa5, 0x27, 0xe2, 0x4d, 0x55, 0x1d,
	0xa2, 0xc6, 0x42, 0x1d, 0xa2, 0xa6, 0xc3, 0xae, 0xdf, 0x71, 0x3d, 0x8f, 0x38, 0x3c, 0x28, 0x52,
	0x1b, 0xbd, 0xa6, 0xda, 0xf5, 0x4a, 0x28, 0xec, 0x7a, 0x25, 0x19, 0x1c, 0x41, 0x4d, 0xb8, 0xe7,
	0x46, 0x70, 0xc2, 0x2f, 0xa9, 0x1c, 0x91, 0x83, 0x81, 0x23, 0x72, 0x24, 0xa8, 0x7c, 0x28, 0x29,
	0x7b, 0x99, 0x79, 0x5d, 0x55, 0xf9, 0xe4, 0x71, 0x50, 0xf9, 0xe4, 0x69, 0x92, 0xf2, 0x99, 0xc2,
	0xfa, 0x8d, 0x42, 0xe5, 0xa5, 0xca, 0xba, 0x88, 0x83, 0xc4, 0x7c, 0xfb, 0xb9, 0x47, 0x52, 0xdd,
	0xdf, 0x2c, 0x64, 0x2e, 0xc2, 0x24, 0xe6, 0x22, 0x09, 0xca, 0x66, 0x4a, 0xda, 0x22, 0xbd, 0x16,
	0x09, 0x78, 0x9c, 0x39, 0xfa, 0x5b, 0xaa, 0xb2, 0x59, 0x01, 0x84, 0xb2, 0x59, 0x41, 0x84, 0x5d,
	0x20, 0x10, 0x1f, 0xb9, 0xed, 0xb6, 0x7e, 0x57, 0xb5, 0x0b, 0x24, 0x10, 0xec, 0x02, 0x89, 0x00,
	0xc5, 0x89, 0x28, 0x73, 0xdd, 0x1f, 0xc0, 0x91, 0xf4, 0xb6, 0xaa, 0x38, 0x29, 0x42, 0x43, 0x71,
	0x52, 0x84, 0x80, 0x3b, 0x8e, 0x80, 0xd8, 0x81, 0xb6, 0x41, 0x22, 0xf6, 0x1d, 0xd5, 0x1d, 0x67,
	0xe8, 0x14, 0xb8, 0xe3, 0x0c, 0x85, 0x49, 0xce, 0x7a, 0xe2, 0x1d, 0xb9, 0x11, 0xd9, 0x6e, 0x85,
	0x3e, 0x4d, 0xa4, 0xef, 0x16, 0x3a, 0x2b, 0x0b, 0x94, 0x9c, 0x95, 0x25, 0x4a, 0x56, 0x8d, 0x2b,
	0x15, 0x06, 0x70, 0x52, 0x39, 0xef, 0x15, 0x5a, 0x55, 0x81, 0x96, 0xac, 0xaa, 0x40, 0x40, 0x36,
	0x4b, 0x11, 0x4f, 0x89, 0x75, 0x04, 0xeb, 0xba, 0xa7, 0xca, 0x66, 0x6a, 0x2c, 0x64, 0x33, 0x35,
	0x1d, 0xb2, 0x59, 0x4a, 0xff, 0xc4, 0xb5, 0x0f, 0x53, 0x51, 0xf7, 0x55, 0xd9, 0x4c, 0x09, 0x85,
	0x6c, 0xa6, 0x24, 0xe3, 0x23, 0xb4, 0x58, 0xb4, 0x21, 0x52, 0x69, 0xef, 0x53, 0x69, 0x4b, 0xa3,
	0x76, 0x97, 0x20, 0x72, 0x24, 0x4f, 0x1c, 0xa2, 0x6b, 0x05, 0x39, 0x30, 0x15, 0xfb, 0x01, 0x15,
	0xfb, 0xda, 0x88, 0x6c, 0x2a, 0x48, 0x1d, 0xc5, 0x51, 0x12, 0x2a, 0xe6, 0xae, 0x54, 0xe8, 0x83,
	0x42, 0xa1, 0x2a, 0xb8, 0x24, 0x54, 0x05, 0x91, 0x2c, 0x9c, 0x49, 0xc7, 0xa9, 0xd4, 0x8f, 0x0a,
	0x2d, 0xac, 0xc4, 0x4b, 0x16, 0x56, 0x62, 0xa4, 0x10, 0xda, 0x3d, 0xf0, 0x83, 0xc8, 0x13, 0x7a,
	0x4c, 0x0f, 0x0b, 0x43, 0x48, 0x86, 0x4a, 0x21, 0x24, 0x93, 0xc1, 0xaa, 0xbb, 0xac, 0xdd, 0xba,
	0xee, 0x77, 0xbb, 0x84, 0xd5, 0x01, 0x89, 0xb0, 0x35, 0x95, 0x55, 0x0b, 0xe1, 0x60, 0xd5, 0x42,
	0x08, 0x1c, 0x94, 0x1c, 0xb2, 0x63, 0xd9, 0x87, 0xc9, 0x15, 0x6c, 0x5d, 0x75, 0x50, 0xe6, 0x71,
	0x70, 0x50, 0xe6, 0x69, 0xd0, 0x80, 0x12, 0x68, 0xec, 0x96, 0xfa, 0x48, 0xd5, 0x80, 0x92, 0x51,
	0xd0, 0x80, 0x92, 0x29, 0xa0, 0xf9, 0x8e, 0x35, 0x08, 0xc9, 0xa7, 0x7e, 0xe4, 0xb6, 0x79, 0x13,
	0x3b, 0xd4, 0x1f, 0xab, 0x34, 0xcf, 0xe3, 0x40, 0xf3, 0x3c, 0x0d, 0x5a, 0x8b, 0x26, 0x09, 0x23,
	0x3f, 0x90, 0x24, 0x6c, 0xa8, 0x5a, 0x8b, 0x2a, 0x24, 0xb4, 0x16, 0x55, 0x54, 0x7c, 0x0f, 0xf1,
	0xf6, 0xee, 0x1e, 0xed, 0xa9, 0xeb, 0x1f, 0x53, 0xbe, 0xf3, 0x59, 0xbe, 0x8c, 0xd6, 0x28, 0x99,
	0x19, 0x2c, 0x54, 0xd7, 0xec, 0xef, 0xdd, 0xc8, 0xef, 0xeb, 0x0d, 0x55, 0x75, 0x0d, 0x74, 0xa8,
	0xae, 0x61, 0x0c, 0xf8, 0xc4, 0x59, 0x6d, 0x9b, 0x36, 0xf4, 0xf5, 0x27, 0x2a, 0x3e, 0x40, 0x07,
	0x3e, 0x30, 0x96, 0xbd, 0x74, 0x6f, 0xb7, 0xdb, 0x94, 0xd1, 0x66, 0xd1, 0xa5, 0x9b, 0x03, 0xb2,
	0x97, 0x6e, 0x3e, 0x88, 0x9f, 0x22, 0x2c, 0xf4, 0x63, 0xad, 0x30, 0xda, 0x25, 0xc4, 0xd3, 0x3f,
	0xa1, 0xbc, 0x6a, 0x8a, 0x7e, 0x2e, 0x47, 0x34, 0x4a, 0xa6, 0x62, 0x1e, 0x28, 0xc6, 0xca, 0x21,
	0xb6, 0xc2, 0xa7, 0x2a, 0xc5, 0x04, 0x00, 0x28, 0x26, 0x0c, 0xe2, 0x1e, 0xba, 0xca, 0x06, 0xe9,
	0x15, 0x7b, 0x6d, 0x10, 0x3e, 0x22, 0x47, 0xae, 0x1d, 0xdf, 0x68, 0x3d, 0x62, 0xc7, 0x25, 0xd4,
	0x16, 0x65, 0x7b, 0x23, 0xcb, 0xb6, 0x00, 0xdc, 0x28, 0x99, 0xc3, 0xb9, 0x41, 0xd2, 0xcb, 0x02,
	0x1e, 0xb9, 0xa1, 0x9d, 0x4a, 0xfc, 0x54, 0x95, 0xf4, 0x8a, 0xf1, 0x90, 0xf4, 0x8a, 0x31, 0x50,
	0xc2, 0x25, 0x98, 0xa4, 0x85, 0xb0, 0xad, 0x2a, 0xe1, 0x24, 0x10, 0x94, 0x70, 0x12, 0x01, 0xb2,
	0x41, 0x2a, 0xda, 0x0d, 0xfb, 0x7e, 0x48, 0x1c, 0x7d, 0x47, 0x95, 0x0d, 0x64, 0x14, 0x64, 0x03,
	0x99, 0x02, 0x45, 0xc5, 0x13, 0xcf, 0xf6, 0x7b, 0xae, 0xd7, 0x59, 0xb7, 0xba, 0xdd, 0x47, 0xa4,
	0x1f, 0x10, 0x9b, 0x56, 0xb6, 0xdf, 0x53, 0x15, 0x15, 0x6a, 0x2c, 0x14, 0x15, 0x6a, 0x3a, 0x04,
	0xa7, 0x48, 0xd7, 0x4d, 0x55, 0x70, 0x8a, 0x08, 0x08, 0x4e, 0x71, 0x54, 0xb8, 0xdb, 0xc6, 0x18,
	0xcb, 0x73, 0xba, 0xc4, 0xd1, 0x77, 0x95, 0x77, 0x5b, 0x00, 0x08, 0x77, 0x5b, 0x18, 0x04, 0xc5,
	0xa8, 0xc2, 0x89, 0x69, 0xf7, 0x54, 0x8a, 0x89, 0x08, 0x50, 0x4c, 0x1c, 0x05, 0x67, 0xed, 0x58,
	0x81, 0xd5, 0x23, 0x11, 0xdc, 0x42, 0xf6, 0x55, 0xce, 0x92, 0x51, 0xe0, 0x2c, 0x99, 0x02, 0xbd,
	0x05, 0xd3, 0x7a, 0xce, 0x2f, 0xc8, 0x9f, 0xa9, 0x7a, 0x0b, 0x29, 0x19, 0x7a, 0x0b, 0xe9, 0x10,
	0xd8, 0xed, 0x71, 0xaf, 0x1f, 0x1d, 0x73, 0x36, 0xdf, 0x57, 0xd9, 0x4d, 0x00, 0x80, 0xdd, 0x84,
	0x41, 0xb1, 0x09, 0xc9, 0x7e, 0x8c, 0x4c, 0x16, 0xfa, 0x03, 0x75, 0x13, 0x32, 0x03, 0x12, 0x9b,
	0x90, 0x19, 0x02, 0xe4, 0xf6, 0x75, 0xfa, 0xb3, 0xa7, 0xfe, 0x43, 0x55, 0x6e, 0x67, 0x34, 0xc8,
	0xed, 0xec, 0x6f, 0xe8, 0xe7, 0xec, 0xf6, 0x2d, 0x9b, 0x6c, 0xf9, 0x8e, 0xdb, 0x76, 0x89, 0xa3,
	0x7f, 0xae, 0xea, 0xe7, 0x64, 0x20, 0xd0, 0xcf, 0xc9, 0x0c, 0xc3, 0x55, 0x82, 0x0d, 0xd3, 0x62,
	0x32, 0x65, 0xfb, 0x85, 0xea, 0x2a, 0xa1, 0x00, 0xc2, 0x55, 0x42, 0x41, 0xcc, 0x35, 0x0c, 0x4d,
	0xf2, 0x53, 0x9a, 0x4d, 0xd6, 0x8e, 0x1b, 0xbe, 0x7f, 0xa8, 0xff, 0xde, 0x90, 0x86, 0x61, 0x16,
	0x9a, 0x6b, 0x18, 0x66, 0xc9, 0x50, 0x29, 0x71, 0xf2, 0x63, 0xc7, 0x8d, 0x24, 0x61, 0x3f, 0x52,
	0x55, 0x4a, 0x85, 0x70, 0xa8, 0x94, 0x0a, 0x21, 0xf8, 0x2e, 0x42, 0x70, 0xb4, 0xe8, 0x3f, 0xa6,
	0xfc, 0x71, 0xfe, 0x28, 0x6a, 0x94, 0x4c, 0x01, 0x07, 0x55, 0xca, 0x06, 0xb1, 0xa2, 0x41, 0x40,
	0x36, 0xba, 0x56, 0x27, 0x89, 0xae, 0xa6, 0xaa, 0x4a, 0xc9, 0xe3, 0xa0, 0x4a, 0xc9, 0xd3, 0x20,
	0x4e, 0xf6, 0x0e, 0x02, 0x62, 0x39, 0xeb, 0x01, 0xa1, 0xe9, 0xee, 0x27, 0xaa, 0x38, 0xc9, 0x40,
	0x20, 0x4e, 0x32, 0xc3, 0x90, 0x43, 0xd8, 0xf0, 0x53, 0xb7, 0x1d, 0xf3, 0xb3, 0x54, 0x39, 0x44,
	0x44, 0x40, 0x0e, 0x11, 0x47, 0xf1, 0x3b, 0x68, 0x5a, 0x38, 0x43, 0xf5, 0x16, 0x65, 0x73, 0x5e,
	0x71, 0xe6, 0x36, 0x4a, 0xa6, 0x88, 0x94, 0x1a, 0x38, 0x2c, 0xd0, 0xf8, 0x45, 0x52, 0xb7, 0x0b,
	0x1b, 0x38, 0x19, 0x9c, 0xd4, 0xc0, 0xc9, 0xd0, 0x70, 0x0b, 0x2d, 0xf4, 0xd2, 0x16, 0x6a, 0xa6,
	0x55, 0xe7, 0x64, 0x8f, 0x53, 0x78, 0x37, 0xb0, 0xa5, 0xc4, 0xc7, 0x69, 0x4e, 0xcd, 0x69, 0xad,
	0x82, 0x26, 0x98, 0xfc, 0xcd, 0x72, 0xe5, 0x56, 0xf5, 0x8d, 0xcd, 0x72, 0xe5, 0x3b, 0xd5, 0xe5,
	0xcd, 0x72, 0x65, 0xb9, 0xba, 0xb2, 0x59, 0xae, 0xac, 0x54, 0x6f, 0x6f, 0x96, 0x2b, 0xb7, 0xab,
	0x77, 0x36, 0xcb, 0x95, 0x3b, 0xd5, 0xd5, 0xcd, 0x72, 0x65, 0xb5, 0xfa, 0xd6, 0x66, 0xb9, 0xf2,
	0xdd, 0xea, 0x3b, 0x9b, 0xe5, 0xca, 0x87, 0xd5, 0x07, 0xc6, 0x2f, 0xc7, 0x10, 0xe6, 0x41, 0x61,
	0x45, 0xbf, 0x0b, 0x6f, 0x0f, 0x6e, 0x24, 0x0b, 0xa2, 0x6f, 0x0d, 0x72, 0x9c, 0x39, 0x11, 0xdf,
	0x41, 0x67, 0xe8, 0x43, 0x0c, 0xfd, 0xcc, 0xe2, 0xf8, 0xd2, 0xf4, 0xea, 0x4c, 0xea, 0xa8, 0x90,
	0x04, 0x39, 0x6d, 0x28, 0x12, 0xdf, 0x45, 0x13, 0xec, 0xc9, 0x89, 0x3e, 0x41, 0xe7, 0xcc, 0x26,
	0x73, 0xa8, 0xeb, 0x72, 0x82, 0x18, 0xd6, 0xf8, 0x85, 0x86, 0xaa, 0xcc, 0x28, 0xdf, 0x27, 0xd6,
	0x21, 0x37, 0xcf, 0x2b, 0xa8, 0x4c, 0x55, 0x8c, 0xed, 0x33, 0x2e, 0xaf, 0x87, 0x92, 0xf2, 0x6b,
	0x1f, 0x7b, 0x99, 0xb5, 0x8f, 0x0f, 0x59, 0xbb, 0xf1, 0x1f, 0x1a, 0x3a, 0x0f, 0x2a, 0x6d, 0x58,
	0xd1, 0xff, 0x8b, 0x56, 0x09, 0x38, 0xe7, 0x91, 0x72, 0xb1, 0x47, 0x92, 0x39, 0x39, 0x8f, 0x9c,
	0x19, 0xe2, 0x91, 0x54, 0x10, 0xf7, 0x88, 0x8e, 0x16, 0xa4, 0xa7, 0x32, 0x7b, 0xbe, 0xff, 0xd4,
	0xf7, 0x3a, 0x46, 0x37, 0x79, 0x44, 0x43, 0x7f, 0xaa, 0x73, 0x3d, 0x12, 0xe4, 0x17, 0xac, 0xbd,
	0xcc, 0x82, 0xc7, 0x86, 0xb9, 0xe1, 0x3f, 0xc7, 0xd0, 0x7c, 0x22, 0xae, 0xd7, 0x72, 0x3d, 0xe2,
	0x70, 0x3f, 0xdc, 0x42, 0x53, 0x21, 0x79, 0xd6, 0x0c, 0x23, 0x2b, 0x88, 0xd4, 0xf2, 0x2a, 0x21,
	0x79, 0xb6, 0x1b, 0x93, 0xf1, 0x4d, 0x34, 0x19, 0x63, 0x89, 0xe7, 0xa8, 0x5d, 0x31, 0x11, 0x92,
	0x67, 0x8f, 0x3d, 0x07, 0xf6, 0x9b, 0xd2, 0x07, 0x7c, 0xbf, 0x9d, 0xc6, 0x05, 0x85, 0x9b, 0xe2,
	0xcc, 0xe9, 0x37, 0x05, 0xfe, 0x08, 0x4d, 0xf2, 0xd7, 0x66, 0x7c, 0x2f, 0x5d, 0x54, 0xfc, 0x86,
	0x1a, 0xdb, 0x5f, 0x56, 0x34, 0x99, 0x86, 0x1f, 0xa2, 0x0a, 0xcf, 0x68, 0xa1, 0x3e, 0x49, 0x59,
	0x2c, 0x24, 0x2c, 0x1a, 0x6e, 0x7c, 0x87, 0x3d, 0xe6, 0xa9, 0x30, 0x67, 0xba, 0x64, 0x9a, 0xf1,
	0xa5, 0x86, 0xce, 0x9a, 0xe4, 0xd9, 0x80, 0x84, 0xd1, 0xc7, 0x24, 0x62, 0xef, 0x8b, 0xb6, 0xd1,
	0xac, 0xdf, 0x8f, 0xdc, 0x9e, 0xfb, 0x33, 0x7e, 0x87, 0xd6, 0x16, 0xc7, 0x97, 0xe6, 0xe4, 0x43,
	0x65, 0x5b, 0x80, 0xc8, 0xfc, 0xb3, 0xf3, 0xef, 0x5d, 0x39, 0x79, 0x70, 0x09, 0x5d, 0x74, 0x7b,
	0xcb, 0x4e, 0xb7, 0xb3, 0xdc, 0x09, 0xfa, 0xf6, 0xf2, 0xc7, 0x41, 0xdf, 0xe6, 0x62, 0x8d, 0x3f,
	0x1f, 0x43, 0xf3, 0xa0, 0xc2, 0x23, 0xb7, 0xdd, 0x26, 0x01, 0xf1, 0xec, 0xff, 0xa9, 0xfc, 0x99,
	0x5b, 0xcd, 0xf8, 0xb7, 0x5b, 0x0d, 0xfe, 0x04, 0x4d, 0xf3, 0xe7, 0x71, 0x07, 0x56, 0x78, 0xc0,
	0x5f, 0x73, 0x5d, 0x5e, 0x66, 0xaf, 0xfc, 0x96, 0x93, 0x27, 0x80, 0xcb, 0x4f, 0xbc, 0xe8, 0xbb,
	0x77, 0x3f, 0xb3, 0xba, 0x83, 0x9c, 0xf5, 0x11, 0x9b, 0xde, 0xb0, 0xc2, 0x83, 0x11, 0xa6, 0xf9,
	0xbb, 0x71, 0x74, 0xc1, 0x24, 0x61, 0xdf, 0xf7, 0x42, 0x92, 0xb5, 0x4d, 0x55, 0xb0, 0x0d, 0x33,
	0xc6, 0x7c, 0xc6, 0x18, 0x10, 0xcd, 0x69, 0x90, 0x95, 0x55, 0x41, 0x96, 0x6e, 0x7f, 0x88, 0xaa,
	0xd5, 0xd3, 0x46, 0x15, 0x84, 0x11, 0xbe, 0x8c, 0xa6, 0x3c, 0x42, 0x9c, 0x66, 0xcf, 0x0f, 0x08,
	0x7d, 0x84, 0x56, 0x31, 0x2b, 0xf1, 0xc0, 0x96, 0x1f, 0xc4, 0xf9, 0x12, 0xd1, 0x7d, 0xd2, 0x0c,
	0x48, 0x3b, 0xd4, 0x2b, 0x94, 0xe5, 0x79, 0x71, 0x5b, 0x6d, 0x0f, 0xa2, 0x1d, 0x42, 0x02, 0x73,
	0x8a, 0xc2, 0x4c, 0xd2, 0x0e, 0xf1, 0xdb, 0x68, 0x9a, 0x6d, 0x13, 0x36, 0x69, 0x8a, 0x4e, 0x9a,
	0xcf, 0xec, 0xab, 0x64, 0x16, 0x62, 0x40, 0x3a, 0xed, 0x26, 0x9a, 0x60, 0xc6, 0xe5, 0xcf, 0xa6,
	0xe6, 0x92, 0x19, 0xac, 0x5a, 0x37, 0x39, 0x15, 0xbf, 0x9f, 0xf5, 0xe1, 0xf4, 0x48, 0x1f, 0x66,
	0x9c, 0x76, 0xf5, 0xe4, 0x41, 0x0d, 0xe9, 0x79, 0xa7, 0x31, 0x47, 0x6d, 0x96, 0x2b, 0xe3, 0xd5,
	0xf2, 0x66, 0xb9, 0x32, 0x51, 0x9d, 0x34, 0x7e, 0x82, 0x2e, 0x8b, 0xb1, 0x1d, 0xeb, 0x12, 0x0a,
	0x6e, 0xbc, 0x8e, 0xce, 0xd8, 0x5d, 0xdf, 0x3e, 0x54, 0x1f, 0x37, 0x8c, 0x36, 0x22, 0x46, 0xfe,
	0x41, 0x43, 0x57, 0x32, 0x31, 0x22, 0xcb, 0x58, 0x42, 0x93, 0xcc, 0x08, 0x6c, 0x23, 0x0b, 0x46,
	0x61, 0x58, 0x33, 0x21, 0xa7, 0x46, 0x6f, 0xd2, 0xc7, 0x9b, 0xfa, 0xd8, 0x48, 0xa3, 0xc7, 0xff,
	0x0c, 0x13, 0xff, 0xf2, 0x59, 0xe3, 0x23, 0xfc, 0x4b, 0xe7, 0x8c, 0x30, 0xa1, 0xf1, 0x47, 0x1a,
	0xc2, 0x62, 0x33, 0x7d, 0x77, 0xd0, 0x0a, 0x49, 0x84, 0xd7, 0x10, 0x02, 0x05, 0xa9, 0xcd, 0x0a,
	0xf4, 0x93, 0x2d, 0x39, 0x95, 0xaa, 0x8b, 0xdf, 0x44, 0xa8, 0x47, 0x99, 0x36, 0x5d, 0x87, 0xad,
	0x31, 0x97, 0x5c, 0xa6, 0x18, 0xe0, 0x89, 0x13, 0x1a, 0xbf, 0x1a, 0x43, 0x57, 0xc1, 0x81, 0x26,
	0xe1, 0x46, 0x75, 0x1e, 0x7b, 0x91, 0x1b, 0xb9, 0xf1, 0x76, 0x79, 0x37, 0x39, 0x2f, 0xb4, 0xc2,
	0x85, 0x17, 0x1e, 0x1b, 0xe5, 0x5e, 0xac, 0x03, 0xb3, 0xd8, 0xb9, 0x74, 0xe2, 0xfe, 0x93, 0x47,
	0xca, 0xbc, 0x41, 0xd1, 0xf8, 0x53, 0x34, 0xcb, 0x6c, 0xc0, 0x94, 0x4c, 0xf6, 0x75, 0x2d, 0x63,
	0x86, 0x8c, 0xd9, 0x72, 0x07, 0x75, 0x47, 0x80, 0xe0, 0xfb, 0xd2, 0xe1, 0x75, 0x2a, 0x7b, 0xf2,
	0x29, 0x23, 0x42, 0xf3, 0x6f, 0x35, 0x54, 0x17, 0x42, 0x53, 0x65, 0x3d, 0x23, 0x6b, 0xbd, 0xcc,
	0x69, 0x9b, 0xd8, 0xe9, 0x46, 0xaa, 0xe1, 0x98, 0xe2, 0x78, 0x4d, 0xcf, 0x53, 0x31, 0x6f, 0x8d,
	0x9f, 0x2e, 0x6f, 0x8d, 0x0a, 0xc3, 0x2f, 0xc7, 0xd0, 0x25, 0xf0, 0xfe, 0x8e, 0x15, 0x44, 0xae,
	0xd5, 0x8d, 0xed, 0xf1, 0xc4, 0x6b, 0xfb, 0x2f, 0xe3, 0x79, 0xa9, 0x66, 0xbb, 0x2f, 0xad, 0xe8,
	0x65, 0x6c, 0x9e, 0x0f, 0x80, 0xf1, 0x6f, 0x15, 0x00, 0x23, 0x7c, 0xf8, 0x2b, 0x0d, 0xd5, 0x04,
	0x1f, 0xca, 0x36, 0x78, 0x3f, 0x6b, 0x83, 0x8b, 0xa2, 0x0d, 0x38, 0x36, 0xc6, 0x15, 0xd8, 0xe1,
	0x81, 0x64, 0x07, 0x3d, 0xb3, 0x86, 0x21, 0xf3, 0x93, 0xf8, 0x1b, 0xe1, 0xbf, 0xe7, 0x49, 0x2d,
	0x0b, 0xdd, 0xa8, 0x07, 0xa8, 0x1c, 0x1d, 0xf7, 0x09, 0x4f, 0x1e, 0x57, 0x72, 0x29, 0x7f, 0x37,
	0x0a, 0x5c, 0xaf, 0xa3, 0xde, 0x7f, 0xf1, 0xc4, 0x38, 0x65, 0xb7, 0x8e, 0xe3, 0xf3, 0x74, 0x4c,
	0x59, 0x44, 0x52, 0x9a, 0x71, 0x1e, 0x9d, 0xcb, 0xb5, 0xb4, 0x8c, 0x00, 0xe9, 0xdc, 0xaa, 0xb1,
	0x5b, 0xec, 0xc0, 0x6d, 0x91, 0x3d, 0x9f, 0xb7, 0xab, 0xff, 0xdb, 0x59, 0x64, 0x84, 0xfb, 0xa2,
	0xd8, 0x7b, 0x59, 0x99, 0x1b, 0x81, 0xdf, 0xfb, 0x5f, 0x96, 0xfa, 0xb3, 0x34, 0x69, 0x0a, 0x2b,
	0x15, 0xbb, 0xf3, 0xb0, 0x01, 0xb4, 0xd1, 0x1b, 0x40, 0x2a, 0x9c, 0x47, 0xc8, 0xfe, 0x7d, 0x74,
	0x4d, 0xb5, 0xe2, 0xff, 0x23, 0xe9, 0x7f, 0xad, 0xa1, 0x99, 0xb4, 0xa6, 0x5a, 0xf3, 0x5f, 0x9c,
	0xba, 0x50, 0x7b, 0x2b, 0x73, 0x41, 0x54, 0x15, 0x23, 0x6b, 0x71, 0x64, 0xb1, 0x62, 0x24, 0xb9,
	0x2e, 0x7e, 0x88, 0xe6, 0x06, 0x5e, 0xcb, 0x7f, 0x41, 0x92, 0x0f, 0x57, 0x78, 0x35, 0x5a, 0x58,
	0xe4, 0xcd, 0x72, 0x38, 0x8f, 0xc8, 0x15, 0x34, 0x45, 0x8f, 0xe3, 0xa7, 0x6e, 0x18, 0xc5, 0xa9,
	0x98, 0x9d, 0xe0, 0x52, 0x2a, 0xa6, 0x47, 0x37, 0x23, 0x19, 0xbf, 0x9e, 0x40, 0xe7, 0xe0, 0x0a,
	0xcf, 0x9f, 0x46, 0xe3, 0x3d, 0x54, 0xb5, 0x69, 0x9b, 0xab, 0xd9, 0x3b, 0xe6, 0x1f, 0x9a, 0xf0,
	0xfd, 0x95, 0x76, 0x67, 0x72, 0x93, 0x96, 0x59, 0x63, 0x6c, 0xeb, 0x38, 0xfd, 0x11, 0x67, 0xce,
	0xce, 0x8c, 0xe0, 0xc7, 0x68, 0x3e, 0x4c, 0x3c, 0xd8, 0x8c, 0x7c, 0xce, 0x98, 0xed, 0x3b, 0xe1,
	0xb8, 0x4c, 0x17, 0xd0, 0x28, 0x99, 0x38, 0x94, 0x37, 0x56, 0x88, 0xb7, 0x90, 0x3e, 0xf0, 0x80,
	0x51, 0x3b, 0xf0, 0x7b, 0x29, 0xab, 0xf1, 0x62, 0x56, 0x0b, 0xc2, 0x24, 0xd8, 0x31, 0x21, 0xfe,
	0x21, 0xba, 0x92, 0x63, 0x67, 0x75, 0xbb, 0x29, 0x4b, 0xe6, 0x80, 0x85, 0x9c, 0xf7, 0x68, 0x22,
	0xa0, 0x6d, 0xd9, 0x2c, 0xdf, 0x87, 0xdd, 0x6e, 0xc2, 0x3a, 0x63, 0x46, 0xf6, 0xe9, 0x0e, 0xff,
	0xa0, 0xe3, 0x14, 0x66, 0x4c, 0x7f, 0x7a, 0x4c, 0xcd, 0xc8, 0x7f, 0x7c, 0x94, 0xcd, 0xc8, 0x18,
	0x87, 0xfc, 0x7b, 0x8e, 0x91, 0x66, 0x64, 0x5c, 0xd4, 0x66, 0x4c, 0x58, 0x4d, 0x9e, 0xde, 0x8c,
	0x09, 0xbb, 0x22, 0x33, 0x26, 0x2c, 0x2b, 0x2f, 0x6f, 0x46, 0xce, 0xba, 0xb6, 0x84, 0xe6, 0xb2,
	0xb1, 0x85, 0x17, 0xd0, 0x84, 0x10, 0x95, 0x15, 0x93, 0xff, 0x55, 0xeb, 0x03, 0x92, 0x1b, 0x6b,
	0x11, 0x95, 0x85, 0xd2, 0x32, 0xbb, 0x05, 0x28, 0x05, 0xdf, 0xe4, 0xe7, 0x47, 0x1c, 0x85, 0x73,
	0xd0, 0x57, 0x66, 0xf3, 0xf7, 0x8e, 0xfb, 0xc9, 0x31, 0xc1, 0x76, 0x79, 0x10, 0xd1, 0x18, 0xab,
	0x98, 0xec, 0x8f, 0x35, 0x96, 0x4f, 0x62, 0xc7, 0x19, 0x7f, 0x83, 0xd0, 0x2c, 0xb8, 0x33, 0x4e,
	0x15, 0xef, 0xa1, 0x19, 0xfe, 0xc1, 0x16, 0x74, 0x3d, 0x8a, 0x7f, 0x62, 0x9e, 0x8e, 0xf8, 0x0f,
	0xc3, 0x56, 0x10, 0xe1, 0xfb, 0x68, 0x3a, 0x9d, 0xea, 0xf7, 0xf9, 0x16, 0x19, 0xf6, 0xe3, 0x32,
	0x8a, 0xe0, 0x67, 0xe5, 0x35, 0x34, 0x47, 0xeb, 0xf7, 0xae, 0x15, 0x46, 0xcd, 0x90, 0x10, 0x8f,
	0xef, 0x8b, 0xe1, 0xbf, 0xdf, 0xce, 0x0c, 0xc4, 0x5f, 0x6e, 0x3f, 0x44, 0xac, 0xa8, 0x48, 0xb6,
	0x7f, 0x79, 0xf4, 0x8f, 0xb6, 0xec, 0xae, 0xc1, 0x5d, 0xf4, 0x3d, 0x34, 0xd3, 0xf6, 0x03, 0x9b,
	0x34, 0x03, 0xfa, 0xa1, 0x13, 0x8f, 0xfb, 0x37, 0xf3, 0x71, 0xbf, 0xe6, 0xbf, 0x28, 0xfe, 0x62,
	0x6a, 0xba, 0x0d, 0x63, 0x78, 0x07, 0x61, 0xe1, 0xd3, 0xb1, 0x26, 0xdb, 0x16, 0x3c, 0xec, 0xa5,
	0x87, 0x79, 0xb9, 0x17, 0x5d, 0x8d, 0x92, 0x29, 0x7e, 0x77, 0xc6, 0x06, 0xf1, 0x36, 0xc2, 0xd4,
	0x50, 0x21, 0xfd, 0x72, 0x20, 0xe1, 0x38, 0x79, 0xda, 0x6f, 0x0f, 0xaa, 0x03, 0x69, 0x10, 0xb7,
	0xd0, 0x45, 0x5e, 0x8a, 0x36, 0x93, 0xf6, 0x75, 0x92, 0xc8, 0x2b, 0x2f, 0xdd, 0xdd, 0xbe, 0x20,
	0x75, 0xb7, 0xf7, 0x93, 0x96, 0xe2, 0x24, 0x27, 0xf0, 0x4f, 0x94, 0x0a, 0x9f, 0x95, 0x27, 0x38,
	0xfc, 0x45, 0xda, 0x73, 0x6f, 0xda, 0xec, 0x05, 0x78, 0xb2, 0x56, 0xf4, 0x32, 0x6f, 0xc9, 0xe7,
	0x7b, 0x0a, 0x42, 0x1c, 0x29, 0xc2, 0x9a, 0x93, 0x0f, 0x8f, 0x86, 0xbe, 0xce, 0x9e, 0xee, 0x09,
	0xef, 0xb2, 0x37, 0x51, 0x15, 0xe6, 0xf3, 0x47, 0xe3, 0x33, 0xa7, 0x7b, 0x34, 0x7e, 0xb6, 0x27,
	0x3d, 0x17, 0x7f, 0x8a, 0xb0, 0xa8, 0x4b, 0xb3, 0x75, 0xdc, 0xec, 0x11, 0xfe, 0xb5, 0xd0, 0xc8,
	0x07, 0xde, 0x67, 0x7b, 0xd9, 0xa1, 0xda, 0xdf, 0x8f, 0x25, 0x4d, 0xd5, 0xdc, 0x27, 0x7b, 0xfb,
	0x68, 0xa2, 0xed, 0x92, 0xae, 0x93, 0x1c, 0xae, 0x1f, 0xbc, 0x4c, 0x60, 0x2f, 0x0b, 0x03, 0x1b,
	0x31, 0x17, 0x93, 0x33, 0xab, 0xfd, 0x93, 0x86, 0xaa, 0x32, 0x11, 0x3f, 0x40, 0x73, 0x6c, 0x13,
	0x35, 0xe1, 0xda, 0x3f, 0x3c, 0x99, 0xce, 0x32, 0x3c, 0x6f, 0x1d, 0xe0, 0x87, 0xe8, 0x2c, 0x67,
	0x90, 0x7c, 0xe3, 0xc9, 0x13, 0x4a, 0x31, 0x07, 0x2e, 0x31, 0xf9, 0xba, 0x03, 0xdf, 0x4b, 0x75,
	0x38, 0x60, 0x57, 0xaf, 0x61, 0x47, 0x2d, 0x17, 0xcf, 0x2f, 0x69, 0x6b, 0x93, 0xe8, 0x0c, 0x5d,
	0xde, 0xda, 0x34, 0x9a, 0x62, 0x9b, 0xa1, 0xe5, 0xbf, 0x58, 0xfd, 0x7a, 0x1a, 0xe1, 0x5d, 0xfe,
	0xa5, 0xee, 0x43, 0x8f, 0x17, 0x30, 0x21, 0x76, 0x51, 0x25, 0xed, 0x5b, 0xa6, 0x55, 0x8f, 0xd4,
	0xd0, 0xac, 0x9d, 0x07, 0x02, 0xbb, 0x18, 0xec, 0x92, 0x67, 0xc6, 0xca, 0xcf, 0xff, 0xf1, 0x5f,
	0xfe, 0x74, 0xec, 0x75, 0xe3, 0xd5, 0x95, 0xa3, 0x3b, 0x2b, 0x71, 0x1d, 0xb7, 0x92, 0x67, 0xbf,
	0x92, 0xb0, 0xb8, 0xa7, 0xdd, 0xc2, 0x3f, 0xd7, 0xd0, 0x6c, 0xb6, 0x09, 0x77, 0x25, 0x2f, 0x10,
	0xa8, 0xb5, 0xab, 0xb2, 0xd4, 0x0c, 0xd9, 0xb8, 0x4b, 0xe5, 0x2f, 0x1b, 0xaf, 0x8f, 0x90, 0x0f,
	0x53, 0x62, 0x25, 0x7e, 0xa9, 0xa1, 0x79, 0x75, 0x27, 0x49, 0xa5, 0x8b, 0x04, 0xaa, 0xbd, 0xaa,
	0x54, 0x49, 0x42, 0x19, 0xf7, 0xa9, 0x66, 0x6f, 0x1b, 0xb7, 0x47, 0x6a, 0x26, 0xcd, 0x8c, 0x15,
	0xfc, 0x4b, 0x0d, 0x2d, 0x14, 0xdc, 0xf5, 0x6f, 0xe4, 0x55, 0x54, 0xc0, 0x6a, 0x37, 0x15, 0x4a,
	0x2a, 0x70, 0xc6, 0x07, 0x54, 0xcd, 0x77, 0x8c, 0xd5, 0x11, 0x6a, 0x2a, 0xe6, 0xc6, 0x8a, 0xfe,
	0x08, 0x61, 0xc5, 0x7d, 0xf6, 0x95, 0xbc, 0x8e, 0x12, 0xa4, 0x66, 0x28, 0xf4, 0x93, 0x30, 0x46,
	0x09, 0xff, 0xa1, 0x86, 0xce, 0xe5, 0xaf, 0x79, 0x8b, 0x12, 0xfb, 0x1c, 0xa2, 0x36, 0x2f, 0x73,
	0xff, 0xcc, 0x77, 0x1d, 0xe3, 0x5d, 0xba, 0xd6, 0x55, 0xe3, 0x3b, 0xc3, 0xd6, 0x9a, 0x63, 0x16,
	0x2f, 0xf3, 0x4f, 0x34, 0x74, 0x5e, 0x75, 0xf5, 0x33, 0x8a, 0x34, 0x01, 0x4c, 0x81, 0x2e, 0xf7,
	0xa8, 0x2e, 0x77, 0x8d, 0x95, 0x53, 0xe9, 0x02, 0xec, 0x62, 0x6d, 0xfe, 0x4c, 0x43, 0x0b, 0x05,
	0x57, 0xc2, 0x1b, 0xc5, 0xa6, 0x11, 0x60, 0x05, 0x3a, 0x9d, 0x2a, 0x16, 0xd4, 0x1c, 0x63, 0xb5,
	0xfe, 0x42, 0x43, 0x7a, 0xe1, 0x6d, 0xf1, 0xb5, 0x61, 0x96, 0x1a, 0xad, 0xda, 0x03, 0xaa, 0xda,
	0x7b, 0xc6, 0xdd, 0x53, 0x9b, 0x4b, 0x52, 0xce, 0x47, 0x28, 0xbd, 0xc0, 0x85, 0xb8, 0x20, 0x07,
	0x83, 0x70, 0xf1, 0xf6, 0x69, 0xdc, 0xa1, 0xc2, 0xdf, 0x30, 0x6e, 0x0e, 0x15, 0x9e, 0x72, 0xbf,
	0xa7, 0xdd, 0xba, 0xad, 0xe1, 0xe7, 0x68, 0x1a, 0x8e, 0xa5, 0x10, 0x5f, 0x2a, 0xbc, 0x7c, 0xd4,
	0x2e, 0x28, 0x8f, 0x31, 0x63, 0x95, 0x4a, 0x7d, 0xd3, 0x78, 0x6d, 0x98, 0x54, 0x41, 0xc4, 0x3d,
	0xed, 0xd6, 0x92, 0x76, 0x5b, 0x5b, 0xdb, 0x3f, 0x79, 0xb0, 0x80, 0xe6, 0xc5, 0xab, 0x75, 0x48,
	0x82, 0x23, 0xd7, 0x26, 0xe1, 0x57, 0x5f, 0xd7, 0x4b, 0xbf, 0xf9, 0xba, 0x5e, 0xfa, 0xed, 0xd7,
	0x75, 0xed, 0xcb, 0x93, 0xba, 0xf6, 0x57, 0x27, 0x75, 0xed, 0xd7, 0x27, 0x75, 0xed, 0xab, 0x93,
	0xba, 0xf6, 0xcf, 0x27, 0x75, 0xed, 0x5f, 0x4f, 0xea, 0xa5, 0xdf, 0x9e, 0xd4, 0xb5, 0x5f, 0x7c,
	0x53, 0x2f, 0x7d, 0xf5, 0x4d, 0xbd, 0xf4, 0x9b, 0x6f, 0xea, 0xa5, 0xcf, 0xf9, 0xff, 0xbd, 0xa1,
	0x35, 0x41, 0x4d, 0xf5, 0xd6, 0x7f, 0x05, 0x00, 0x00, 0xff, 0xff, 0xea, 0x2b, 0xee, 0x5e, 0xea,
	0x41, 0x00, 0x00,
}

func (this *UpdateSeqUpdate) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpdateSeqUpdate)
	if !ok {
		that2, ok := that.(UpdateSeqUpdate)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Seq != that1.Seq {
		return false
	}
	if !bytes.Equal(this.State, that1.State) {
		return false
	}
	if this.UpdateHeader != that1.UpdateHeader {
		return false
	}
	if that1.Update == nil {
		if this.Update != nil {
			return false
		}
	} else if this.Update == nil {
		return false
	} else if !this.Update.Equal(that1.Update) {
		return false
	}
	return true
}
func (this *UpdateSeqUpdate_UpdateForceReloadState) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpdateSeqUpdate_UpdateForceReloadState)
	if !ok {
		that2, ok := that.(UpdateSeqUpdate_UpdateForceReloadState)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.UpdateForceReloadState.Equal(that1.UpdateForceReloadState) {
		return false
	}
	return true
}
func (this *UpdateSeqUpdate_UpdateUserAvatarChanged) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpdateSeqUpdate_UpdateUserAvatarChanged)
	if !ok {
		that2, ok := that.(UpdateSeqUpdate_UpdateUserAvatarChanged)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.UpdateUserAvatarChanged.Equal(that1.UpdateUserAvatarChanged) {
		return false
	}
	return true
}
func (this *UpdateSeqUpdate_UpdateUserNameChanged) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpdateSeqUpdate_UpdateUserNameChanged)
	if !ok {
		that2, ok := that.(UpdateSeqUpdate_UpdateUserNameChanged)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.UpdateUserNameChanged.Equal(that1.UpdateUserNameChanged) {
		return false
	}
	return true
}
func (this *UpdateSeqUpdate_UpdateUserLocalNameChanged) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpdateSeqUpdate_UpdateUserLocalNameChanged)
	if !ok {
		that2, ok := that.(UpdateSeqUpdate_UpdateUserLocalNameChanged)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.UpdateUserLocalNameChanged.Equal(that1.UpdateUserLocalNameChanged) {
		return false
	}
	return true
}
func (this *UpdateSeqUpdate_UpdateUserContactsChanged) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpdateSeqUpdate_UpdateUserContactsChanged)
	if !ok {
		that2, ok := that.(UpdateSeqUpdate_UpdateUserContactsChanged)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.UpdateUserContactsChanged.Equal(that1.UpdateUserContactsChanged) {
		return false
	}
	return true
}
func (this *UpdateSeqUpdate_UpdateUserNickChanged) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpdateSeqUpdate_UpdateUserNickChanged)
	if !ok {
		that2, ok := that.(UpdateSeqUpdate_UpdateUserNickChanged)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.UpdateUserNickChanged.Equal(that1.UpdateUserNickChanged) {
		return false
	}
	return true
}
func (this *UpdateSeqUpdate_UpdateUserAboutChanged) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpdateSeqUpdate_UpdateUserAboutChanged)
	if !ok {
		that2, ok := that.(UpdateSeqUpdate_UpdateUserAboutChanged)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.UpdateUserAboutChanged.Equal(that1.UpdateUserAboutChanged) {
		return false
	}
	return true
}
func (this *UpdateSeqUpdate_UpdateUserPreferredLanguagesChanged) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpdateSeqUpdate_UpdateUserPreferredLanguagesChanged)
	if !ok {
		that2, ok := that.(UpdateSeqUpdate_UpdateUserPreferredLanguagesChanged)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.UpdateUserPreferredLanguagesChanged.Equal(that1.UpdateUserPreferredLanguagesChanged) {
		return false
	}
	return true
}
func (this *UpdateSeqUpdate_UpdateUserTimeZoneChanged) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpdateSeqUpdate_UpdateUserTimeZoneChanged)
	if !ok {
		that2, ok := that.(UpdateSeqUpdate_UpdateUserTimeZoneChanged)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.UpdateUserTimeZoneChanged.Equal(that1.UpdateUserTimeZoneChanged) {
		return false
	}
	return true
}
func (this *UpdateSeqUpdate_UpdateUserBotCommandsChanged) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpdateSeqUpdate_UpdateUserBotCommandsChanged)
	if !ok {
		that2, ok := that.(UpdateSeqUpdate_UpdateUserBotCommandsChanged)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.UpdateUserBotCommandsChanged.Equal(that1.UpdateUserBotCommandsChanged) {
		return false
	}
	return true
}
func (this *UpdateSeqUpdate_UpdateUserExtChanged) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpdateSeqUpdate_UpdateUserExtChanged)
	if !ok {
		that2, ok := that.(UpdateSeqUpdate_UpdateUserExtChanged)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.UpdateUserExtChanged.Equal(that1.UpdateUserExtChanged) {
		return false
	}
	return true
}
func (this *UpdateSeqUpdate_UpdateUserFullExtChanged) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpdateSeqUpdate_UpdateUserFullExtChanged)
	if !ok {
		that2, ok := that.(UpdateSeqUpdate_UpdateUserFullExtChanged)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.UpdateUserFullExtChanged.Equal(that1.UpdateUserFullExtChanged) {
		return false
	}
	return true
}
func (this *UpdateSeqUpdate_UpdateUserSexChanged) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpdateSeqUpdate_UpdateUserSexChanged)
	if !ok {
		that2, ok := that.(UpdateSeqUpdate_UpdateUserSexChanged)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.UpdateUserSexChanged.Equal(that1.UpdateUserSexChanged) {
		return false
	}
	return true
}
func (this *UpdateSeqUpdate_UpdateUserCustomProfileChanged) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpdateSeqUpdate_UpdateUserCustomProfileChanged)
	if !ok {
		that2, ok := that.(UpdateSeqUpdate_UpdateUserCustomProfileChanged)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.UpdateUserCustomProfileChanged.Equal(that1.UpdateUserCustomProfileChanged) {
		return false
	}
	return true
}
func (this *UpdateSeqUpdate_UpdateUserStatusChanged) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpdateSeqUpdate_UpdateUserStatusChanged)
	if !ok {
		that2, ok := that.(UpdateSeqUpdate_UpdateUserStatusChanged)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.UpdateUserStatusChanged.Equal(that1.UpdateUserStatusChanged) {
		return false
	}
	return true
}
func (this *UpdateSeqUpdate_UpdateContactRegistered) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpdateSeqUpdate_UpdateContactRegistered)
	if !ok {
		that2, ok := that.(UpdateSeqUpdate_UpdateContactRegistered)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.UpdateContactRegistered.Equal(that1.UpdateContactRegistered) {
		return false
	}
	return true
}
func (this *UpdateSeqUpdate_UpdateContactsAdded) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpdateSeqUpdate_UpdateContactsAdded)
	if !ok {
		that2, ok := that.(UpdateSeqUpdate_UpdateContactsAdded)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.UpdateContactsAdded.Equal(that1.UpdateContactsAdded) {
		return false
	}
	return true
}
func (this *UpdateSeqUpdate_UpdateContactsAddTaskSuspended) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpdateSeqUpdate_UpdateContactsAddTaskSuspended)
	if !ok {
		that2, ok := that.(UpdateSeqUpdate_UpdateContactsAddTaskSuspended)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.UpdateContactsAddTaskSuspended.Equal(that1.UpdateContactsAddTaskSuspended) {
		return false
	}
	return true
}
func (this *UpdateSeqUpdate_UpdateContactsRemoved) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpdateSeqUpdate_UpdateContactsRemoved)
	if !ok {
		that2, ok := that.(UpdateSeqUpdate_UpdateContactsRemoved)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.UpdateContactsRemoved.Equal(that1.UpdateContactsRemoved) {
		return false
	}
	return true
}
func (this *UpdateSeqUpdate_UpdateUserBlocked) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpdateSeqUpdate_UpdateUserBlocked)
	if !ok {
		that2, ok := that.(UpdateSeqUpdate_UpdateUserBlocked)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.UpdateUserBlocked.Equal(that1.UpdateUserBlocked) {
		return false
	}
	return true
}
func (this *UpdateSeqUpdate_UpdateUserUnblocked) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpdateSeqUpdate_UpdateUserUnblocked)
	if !ok {
		that2, ok := that.(UpdateSeqUpdate_UpdateUserUnblocked)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.UpdateUserUnblocked.Equal(that1.UpdateUserUnblocked) {
		return false
	}
	return true
}
func (this *UpdateSeqUpdate_UpdateInteractiveMediaEvent) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpdateSeqUpdate_UpdateInteractiveMediaEvent)
	if !ok {
		that2, ok := that.(UpdateSeqUpdate_UpdateInteractiveMediaEvent)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.UpdateInteractiveMediaEvent.Equal(that1.UpdateInteractiveMediaEvent) {
		return false
	}
	return true
}
func (this *UpdateSeqUpdate_UpdateMessage) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpdateSeqUpdate_UpdateMessage)
	if !ok {
		that2, ok := that.(UpdateSeqUpdate_UpdateMessage)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.UpdateMessage.Equal(that1.UpdateMessage) {
		return false
	}
	return true
}
func (this *UpdateSeqUpdate_UpdateMessageContentChanged) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpdateSeqUpdate_UpdateMessageContentChanged)
	if !ok {
		that2, ok := that.(UpdateSeqUpdate_UpdateMessageContentChanged)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.UpdateMessageContentChanged.Equal(that1.UpdateMessageContentChanged) {
		return false
	}
	return true
}
func (this *UpdateSeqUpdate_UpdateMessageSent) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpdateSeqUpdate_UpdateMessageSent)
	if !ok {
		that2, ok := that.(UpdateSeqUpdate_UpdateMessageSent)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.UpdateMessageSent.Equal(that1.UpdateMessageSent) {
		return false
	}
	return true
}
func (this *UpdateSeqUpdate_UpdateMessageReceived) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpdateSeqUpdate_UpdateMessageReceived)
	if !ok {
		that2, ok := that.(UpdateSeqUpdate_UpdateMessageReceived)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.UpdateMessageReceived.Equal(that1.UpdateMessageReceived) {
		return false
	}
	return true
}
func (this *UpdateSeqUpdate_UpdateMessageRead) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpdateSeqUpdate_UpdateMessageRead)
	if !ok {
		that2, ok := that.(UpdateSeqUpdate_UpdateMessageRead)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.UpdateMessageRead.Equal(that1.UpdateMessageRead) {
		return false
	}
	return true
}
func (this *UpdateSeqUpdate_UpdateMessageReadByMe) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpdateSeqUpdate_UpdateMessageReadByMe)
	if !ok {
		that2, ok := that.(UpdateSeqUpdate_UpdateMessageReadByMe)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.UpdateMessageReadByMe.Equal(that1.UpdateMessageReadByMe) {
		return false
	}
	return true
}
func (this *UpdateSeqUpdate_UpdateMessageDelete) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpdateSeqUpdate_UpdateMessageDelete)
	if !ok {
		that2, ok := that.(UpdateSeqUpdate_UpdateMessageDelete)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.UpdateMessageDelete.Equal(that1.UpdateMessageDelete) {
		return false
	}
	return true
}
func (this *UpdateSeqUpdate_UpdateChatClear) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpdateSeqUpdate_UpdateChatClear)
	if !ok {
		that2, ok := that.(UpdateSeqUpdate_UpdateChatClear)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.UpdateChatClear.Equal(that1.UpdateChatClear) {
		return false
	}
	return true
}
func (this *UpdateSeqUpdate_UpdateChatDelete) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpdateSeqUpdate_UpdateChatDelete)
	if !ok {
		that2, ok := that.(UpdateSeqUpdate_UpdateChatDelete)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.UpdateChatDelete.Equal(that1.UpdateChatDelete) {
		return false
	}
	return true
}
func (this *UpdateSeqUpdate_UpdateChatArchive) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpdateSeqUpdate_UpdateChatArchive)
	if !ok {
		that2, ok := that.(UpdateSeqUpdate_UpdateChatArchive)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.UpdateChatArchive.Equal(that1.UpdateChatArchive) {
		return false
	}
	return true
}
func (this *UpdateSeqUpdate_UpdateChatGroupsChanged) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpdateSeqUpdate_UpdateChatGroupsChanged)
	if !ok {
		that2, ok := that.(UpdateSeqUpdate_UpdateChatGroupsChanged)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.UpdateChatGroupsChanged.Equal(that1.UpdateChatGroupsChanged) {
		return false
	}
	return true
}
func (this *UpdateSeqUpdate_UpdateReactionsUpdate) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpdateSeqUpdate_UpdateReactionsUpdate)
	if !ok {
		that2, ok := that.(UpdateSeqUpdate_UpdateReactionsUpdate)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.UpdateReactionsUpdate.Equal(that1.UpdateReactionsUpdate) {
		return false
	}
	return true
}
func (this *UpdateSeqUpdate_UpdateDialogFavouriteChanged) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpdateSeqUpdate_UpdateDialogFavouriteChanged)
	if !ok {
		that2, ok := that.(UpdateSeqUpdate_UpdateDialogFavouriteChanged)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.UpdateDialogFavouriteChanged.Equal(that1.UpdateDialogFavouriteChanged) {
		return false
	}
	return true
}
func (this *UpdateSeqUpdate_UpdatePinnedMessagesChanged) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpdateSeqUpdate_UpdatePinnedMessagesChanged)
	if !ok {
		that2, ok := that.(UpdateSeqUpdate_UpdatePinnedMessagesChanged)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.UpdatePinnedMessagesChanged.Equal(that1.UpdatePinnedMessagesChanged) {
		return false
	}
	return true
}
func (this *UpdateSeqUpdate_UpdateGroupTitleChanged) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpdateSeqUpdate_UpdateGroupTitleChanged)
	if !ok {
		that2, ok := that.(UpdateSeqUpdate_UpdateGroupTitleChanged)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.UpdateGroupTitleChanged.Equal(that1.UpdateGroupTitleChanged) {
		return false
	}
	return true
}
func (this *UpdateSeqUpdate_UpdateGroupAvatarChanged) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpdateSeqUpdate_UpdateGroupAvatarChanged)
	if !ok {
		that2, ok := that.(UpdateSeqUpdate_UpdateGroupAvatarChanged)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.UpdateGroupAvatarChanged.Equal(that1.UpdateGroupAvatarChanged) {
		return false
	}
	return true
}
func (this *UpdateSeqUpdate_UpdateGroupAboutChanged) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpdateSeqUpdate_UpdateGroupAboutChanged)
	if !ok {
		that2, ok := that.(UpdateSeqUpdate_UpdateGroupAboutChanged)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.UpdateGroupAboutChanged.Equal(that1.UpdateGroupAboutChanged) {
		return false
	}
	return true
}
func (this *UpdateSeqUpdate_UpdateGroupOwnerChanged) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpdateSeqUpdate_UpdateGroupOwnerChanged)
	if !ok {
		that2, ok := that.(UpdateSeqUpdate_UpdateGroupOwnerChanged)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.UpdateGroupOwnerChanged.Equal(that1.UpdateGroupOwnerChanged) {
		return false
	}
	return true
}
func (this *UpdateSeqUpdate_UpdateGroupMembersUpdated) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpdateSeqUpdate_UpdateGroupMembersUpdated)
	if !ok {
		that2, ok := that.(UpdateSeqUpdate_UpdateGroupMembersUpdated)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.UpdateGroupMembersUpdated.Equal(that1.UpdateGroupMembersUpdated) {
		return false
	}
	return true
}
func (this *UpdateSeqUpdate_UpdateGroupMemberDiff) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpdateSeqUpdate_UpdateGroupMemberDiff)
	if !ok {
		that2, ok := that.(UpdateSeqUpdate_UpdateGroupMemberDiff)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.UpdateGroupMemberDiff.Equal(that1.UpdateGroupMemberDiff) {
		return false
	}
	return true
}
func (this *UpdateSeqUpdate_UpdateGroupMembersCountChanged) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpdateSeqUpdate_UpdateGroupMembersCountChanged)
	if !ok {
		that2, ok := that.(UpdateSeqUpdate_UpdateGroupMembersCountChanged)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.UpdateGroupMembersCountChanged.Equal(that1.UpdateGroupMembersCountChanged) {
		return false
	}
	return true
}
func (this *UpdateSeqUpdate_UpdateGroupMemberPermissionsChanged) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpdateSeqUpdate_UpdateGroupMemberPermissionsChanged)
	if !ok {
		that2, ok := that.(UpdateSeqUpdate_UpdateGroupMemberPermissionsChanged)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.UpdateGroupMemberPermissionsChanged.Equal(that1.UpdateGroupMemberPermissionsChanged) {
		return false
	}
	return true
}
func (this *UpdateSeqUpdate_UpdateGroupInviteObsolete) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpdateSeqUpdate_UpdateGroupInviteObsolete)
	if !ok {
		that2, ok := that.(UpdateSeqUpdate_UpdateGroupInviteObsolete)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.UpdateGroupInviteObsolete.Equal(that1.UpdateGroupInviteObsolete) {
		return false
	}
	return true
}
func (this *UpdateSeqUpdate_UpdateGroupUserInvitedObsolete) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpdateSeqUpdate_UpdateGroupUserInvitedObsolete)
	if !ok {
		that2, ok := that.(UpdateSeqUpdate_UpdateGroupUserInvitedObsolete)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.UpdateGroupUserInvitedObsolete.Equal(that1.UpdateGroupUserInvitedObsolete) {
		return false
	}
	return true
}
func (this *UpdateSeqUpdate_UpdateGroupUserLeaveObsolete) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpdateSeqUpdate_UpdateGroupUserLeaveObsolete)
	if !ok {
		that2, ok := that.(UpdateSeqUpdate_UpdateGroupUserLeaveObsolete)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.UpdateGroupUserLeaveObsolete.Equal(that1.UpdateGroupUserLeaveObsolete) {
		return false
	}
	return true
}
func (this *UpdateSeqUpdate_UpdateGroupUserKickObsolete) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpdateSeqUpdate_UpdateGroupUserKickObsolete)
	if !ok {
		that2, ok := that.(UpdateSeqUpdate_UpdateGroupUserKickObsolete)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.UpdateGroupUserKickObsolete.Equal(that1.UpdateGroupUserKickObsolete) {
		return false
	}
	return true
}
func (this *UpdateSeqUpdate_UpdateGroupMembersUpdateObsolete) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpdateSeqUpdate_UpdateGroupMembersUpdateObsolete)
	if !ok {
		that2, ok := that.(UpdateSeqUpdate_UpdateGroupMembersUpdateObsolete)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.UpdateGroupMembersUpdateObsolete.Equal(that1.UpdateGroupMembersUpdateObsolete) {
		return false
	}
	return true
}
func (this *UpdateSeqUpdate_UpdateGroupTitleChangedObsolete) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpdateSeqUpdate_UpdateGroupTitleChangedObsolete)
	if !ok {
		that2, ok := that.(UpdateSeqUpdate_UpdateGroupTitleChangedObsolete)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.UpdateGroupTitleChangedObsolete.Equal(that1.UpdateGroupTitleChangedObsolete) {
		return false
	}
	return true
}
func (this *UpdateSeqUpdate_UpdateGroupAboutChangedObsolete) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpdateSeqUpdate_UpdateGroupAboutChangedObsolete)
	if !ok {
		that2, ok := that.(UpdateSeqUpdate_UpdateGroupAboutChangedObsolete)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.UpdateGroupAboutChangedObsolete.Equal(that1.UpdateGroupAboutChangedObsolete) {
		return false
	}
	return true
}
func (this *UpdateSeqUpdate_UpdateGroupAvatarChangedObsolete) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpdateSeqUpdate_UpdateGroupAvatarChangedObsolete)
	if !ok {
		that2, ok := that.(UpdateSeqUpdate_UpdateGroupAvatarChangedObsolete)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.UpdateGroupAvatarChangedObsolete.Equal(that1.UpdateGroupAvatarChangedObsolete) {
		return false
	}
	return true
}
func (this *UpdateSeqUpdate_UpdateGroupShortnameChanged) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpdateSeqUpdate_UpdateGroupShortnameChanged)
	if !ok {
		that2, ok := that.(UpdateSeqUpdate_UpdateGroupShortnameChanged)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.UpdateGroupShortnameChanged.Equal(that1.UpdateGroupShortnameChanged) {
		return false
	}
	return true
}
func (this *UpdateSeqUpdate_UpdateStickerCollectionsChanged) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpdateSeqUpdate_UpdateStickerCollectionsChanged)
	if !ok {
		that2, ok := that.(UpdateSeqUpdate_UpdateStickerCollectionsChanged)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.UpdateStickerCollectionsChanged.Equal(that1.UpdateStickerCollectionsChanged) {
		return false
	}
	return true
}
func (this *UpdateSeqUpdate_UpdateStickerPackRemoved) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpdateSeqUpdate_UpdateStickerPackRemoved)
	if !ok {
		that2, ok := that.(UpdateSeqUpdate_UpdateStickerPackRemoved)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.UpdateStickerPackRemoved.Equal(that1.UpdateStickerPackRemoved) {
		return false
	}
	return true
}
func (this *UpdateSeqUpdate_UpdateStickerPackAdded) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpdateSeqUpdate_UpdateStickerPackAdded)
	if !ok {
		that2, ok := that.(UpdateSeqUpdate_UpdateStickerPackAdded)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.UpdateStickerPackAdded.Equal(that1.UpdateStickerPackAdded) {
		return false
	}
	return true
}
func (this *UpdateSeqUpdate_UpdatePauseNotifications) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpdateSeqUpdate_UpdatePauseNotifications)
	if !ok {
		that2, ok := that.(UpdateSeqUpdate_UpdatePauseNotifications)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.UpdatePauseNotifications.Equal(that1.UpdatePauseNotifications) {
		return false
	}
	return true
}
func (this *UpdateSeqUpdate_UpdateRestoreNotifications) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpdateSeqUpdate_UpdateRestoreNotifications)
	if !ok {
		that2, ok := that.(UpdateSeqUpdate_UpdateRestoreNotifications)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.UpdateRestoreNotifications.Equal(that1.UpdateRestoreNotifications) {
		return false
	}
	return true
}
func (this *UpdateSeqUpdate_UpdateTyping) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpdateSeqUpdate_UpdateTyping)
	if !ok {
		that2, ok := that.(UpdateSeqUpdate_UpdateTyping)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.UpdateTyping.Equal(that1.UpdateTyping) {
		return false
	}
	return true
}
func (this *UpdateSeqUpdate_UpdateTypingStop) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpdateSeqUpdate_UpdateTypingStop)
	if !ok {
		that2, ok := that.(UpdateSeqUpdate_UpdateTypingStop)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.UpdateTypingStop.Equal(that1.UpdateTypingStop) {
		return false
	}
	return true
}
func (this *UpdateSeqUpdate_UpdateUserOnline) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpdateSeqUpdate_UpdateUserOnline)
	if !ok {
		that2, ok := that.(UpdateSeqUpdate_UpdateUserOnline)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.UpdateUserOnline.Equal(that1.UpdateUserOnline) {
		return false
	}
	return true
}
func (this *UpdateSeqUpdate_UpdateUserOffline) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpdateSeqUpdate_UpdateUserOffline)
	if !ok {
		that2, ok := that.(UpdateSeqUpdate_UpdateUserOffline)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.UpdateUserOffline.Equal(that1.UpdateUserOffline) {
		return false
	}
	return true
}
func (this *UpdateSeqUpdate_UpdateUserLastSeen) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpdateSeqUpdate_UpdateUserLastSeen)
	if !ok {
		that2, ok := that.(UpdateSeqUpdate_UpdateUserLastSeen)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.UpdateUserLastSeen.Equal(that1.UpdateUserLastSeen) {
		return false
	}
	return true
}
func (this *UpdateSeqUpdate_UpdateGroupOnline) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpdateSeqUpdate_UpdateGroupOnline)
	if !ok {
		that2, ok := that.(UpdateSeqUpdate_UpdateGroupOnline)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.UpdateGroupOnline.Equal(that1.UpdateGroupOnline) {
		return false
	}
	return true
}
func (this *UpdateSeqUpdate_UpdateEventBusDeviceConnected) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpdateSeqUpdate_UpdateEventBusDeviceConnected)
	if !ok {
		that2, ok := that.(UpdateSeqUpdate_UpdateEventBusDeviceConnected)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.UpdateEventBusDeviceConnected.Equal(that1.UpdateEventBusDeviceConnected) {
		return false
	}
	return true
}
func (this *UpdateSeqUpdate_UpdateEventBusDeviceDisconnected) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpdateSeqUpdate_UpdateEventBusDeviceDisconnected)
	if !ok {
		that2, ok := that.(UpdateSeqUpdate_UpdateEventBusDeviceDisconnected)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.UpdateEventBusDeviceDisconnected.Equal(that1.UpdateEventBusDeviceDisconnected) {
		return false
	}
	return true
}
func (this *UpdateSeqUpdate_UpdateEventBusMessage) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpdateSeqUpdate_UpdateEventBusMessage)
	if !ok {
		that2, ok := that.(UpdateSeqUpdate_UpdateEventBusMessage)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.UpdateEventBusMessage.Equal(that1.UpdateEventBusMessage) {
		return false
	}
	return true
}
func (this *UpdateSeqUpdate_UpdateEventBusDisposed) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpdateSeqUpdate_UpdateEventBusDisposed)
	if !ok {
		that2, ok := that.(UpdateSeqUpdate_UpdateEventBusDisposed)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.UpdateEventBusDisposed.Equal(that1.UpdateEventBusDisposed) {
		return false
	}
	return true
}
func (this *UpdateSeqUpdate_UpdateIncomingCallDeprecated) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpdateSeqUpdate_UpdateIncomingCallDeprecated)
	if !ok {
		that2, ok := that.(UpdateSeqUpdate_UpdateIncomingCallDeprecated)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.UpdateIncomingCallDeprecated.Equal(that1.UpdateIncomingCallDeprecated) {
		return false
	}
	return true
}
func (this *UpdateSeqUpdate_UpdateIncomingCall) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpdateSeqUpdate_UpdateIncomingCall)
	if !ok {
		that2, ok := that.(UpdateSeqUpdate_UpdateIncomingCall)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.UpdateIncomingCall.Equal(that1.UpdateIncomingCall) {
		return false
	}
	return true
}
func (this *UpdateSeqUpdate_UpdateCallHandled) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpdateSeqUpdate_UpdateCallHandled)
	if !ok {
		that2, ok := that.(UpdateSeqUpdate_UpdateCallHandled)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.UpdateCallHandled.Equal(that1.UpdateCallHandled) {
		return false
	}
	return true
}
func (this *UpdateSeqUpdate_UpdateCallDisposed) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpdateSeqUpdate_UpdateCallDisposed)
	if !ok {
		that2, ok := that.(UpdateSeqUpdate_UpdateCallDisposed)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.UpdateCallDisposed.Equal(that1.UpdateCallDisposed) {
		return false
	}
	return true
}
func (this *UpdateSeqUpdate_UpdateParameterChanged) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpdateSeqUpdate_UpdateParameterChanged)
	if !ok {
		that2, ok := that.(UpdateSeqUpdate_UpdateParameterChanged)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.UpdateParameterChanged.Equal(that1.UpdateParameterChanged) {
		return false
	}
	return true
}
func (this *UpdateSeqUpdate_UpdateRawUpdate) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpdateSeqUpdate_UpdateRawUpdate)
	if !ok {
		that2, ok := that.(UpdateSeqUpdate_UpdateRawUpdate)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.UpdateRawUpdate.Equal(that1.UpdateRawUpdate) {
		return false
	}
	return true
}
func (this *UpdateSeqUpdate_UpdateEmptyUpdate) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpdateSeqUpdate_UpdateEmptyUpdate)
	if !ok {
		that2, ok := that.(UpdateSeqUpdate_UpdateEmptyUpdate)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.UpdateEmptyUpdate.Equal(that1.UpdateEmptyUpdate) {
		return false
	}
	return true
}
func (this *UpdateSeqUpdate_UpdateCountersChanged) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpdateSeqUpdate_UpdateCountersChanged)
	if !ok {
		that2, ok := that.(UpdateSeqUpdate_UpdateCountersChanged)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.UpdateCountersChanged.Equal(that1.UpdateCountersChanged) {
		return false
	}
	return true
}
func (this *UpdateSeqUpdate_UpdateConfig) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpdateSeqUpdate_UpdateConfig)
	if !ok {
		that2, ok := that.(UpdateSeqUpdate_UpdateConfig)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.UpdateConfig.Equal(that1.UpdateConfig) {
		return false
	}
	return true
}
func (this *UpdateSeqUpdate_UpdateSpaceModified) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpdateSeqUpdate_UpdateSpaceModified)
	if !ok {
		that2, ok := that.(UpdateSeqUpdate_UpdateSpaceModified)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.UpdateSpaceModified.Equal(that1.UpdateSpaceModified) {
		return false
	}
	return true
}
func (this *UpdateSeqUpdate_UpdateSpaceMemberModified) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpdateSeqUpdate_UpdateSpaceMemberModified)
	if !ok {
		that2, ok := that.(UpdateSeqUpdate_UpdateSpaceMemberModified)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.UpdateSpaceMemberModified.Equal(that1.UpdateSpaceMemberModified) {
		return false
	}
	return true
}
func (this *UpdateSeqUpdate_UpdateMessageRejectedByHook) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpdateSeqUpdate_UpdateMessageRejectedByHook)
	if !ok {
		that2, ok := that.(UpdateSeqUpdate_UpdateMessageRejectedByHook)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.UpdateMessageRejectedByHook.Equal(that1.UpdateMessageRejectedByHook) {
		return false
	}
	return true
}
func (this *UpdateSeqUpdate_UpdateMessageEditRejectedByHook) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpdateSeqUpdate_UpdateMessageEditRejectedByHook)
	if !ok {
		that2, ok := that.(UpdateSeqUpdate_UpdateMessageEditRejectedByHook)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.UpdateMessageEditRejectedByHook.Equal(that1.UpdateMessageEditRejectedByHook) {
		return false
	}
	return true
}
func (this *UpdateSeqUpdate_UpdateUser) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpdateSeqUpdate_UpdateUser)
	if !ok {
		that2, ok := that.(UpdateSeqUpdate_UpdateUser)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.UpdateUser.Equal(that1.UpdateUser) {
		return false
	}
	return true
}
func (this *UpdateSeqUpdate_UpdateFeatureFlagChanged) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpdateSeqUpdate_UpdateFeatureFlagChanged)
	if !ok {
		that2, ok := that.(UpdateSeqUpdate_UpdateFeatureFlagChanged)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.UpdateFeatureFlagChanged.Equal(that1.UpdateFeatureFlagChanged) {
		return false
	}
	return true
}
func (this *UpdateSeqUpdate_UpdateThreadCreated) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpdateSeqUpdate_UpdateThreadCreated)
	if !ok {
		that2, ok := that.(UpdateSeqUpdate_UpdateThreadCreated)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.UpdateThreadCreated.Equal(that1.UpdateThreadCreated) {
		return false
	}
	return true
}
func (this *UpdateSeqUpdate_UpdateThreadLifted) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpdateSeqUpdate_UpdateThreadLifted)
	if !ok {
		that2, ok := that.(UpdateSeqUpdate_UpdateThreadLifted)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.UpdateThreadLifted.Equal(that1.UpdateThreadLifted) {
		return false
	}
	return true
}
func (this *UpdateSeqUpdate_UpdateGroup) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpdateSeqUpdate_UpdateGroup)
	if !ok {
		that2, ok := that.(UpdateSeqUpdate_UpdateGroup)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.UpdateGroup.Equal(that1.UpdateGroup) {
		return false
	}
	return true
}
func (this *UpdateSeqUpdate_UpdateGroupMemberInvited) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpdateSeqUpdate_UpdateGroupMemberInvited)
	if !ok {
		that2, ok := that.(UpdateSeqUpdate_UpdateGroupMemberInvited)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.UpdateGroupMemberInvited.Equal(that1.UpdateGroupMemberInvited) {
		return false
	}
	return true
}
func (this *UpdateSeqUpdate_MessageReactionsUpdate) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpdateSeqUpdate_MessageReactionsUpdate)
	if !ok {
		that2, ok := that.(UpdateSeqUpdate_MessageReactionsUpdate)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.MessageReactionsUpdate.Equal(that1.MessageReactionsUpdate) {
		return false
	}
	return true
}
func (this *UpdateFatSeqUpdate) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpdateFatSeqUpdate)
	if !ok {
		that2, ok := that.(UpdateFatSeqUpdate)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Seq != that1.Seq {
		return false
	}
	if !bytes.Equal(this.State, that1.State) {
		return false
	}
	if this.UpdateHeader != that1.UpdateHeader {
		return false
	}
	if !bytes.Equal(this.Update, that1.Update) {
		return false
	}
	if len(this.Users) != len(that1.Users) {
		return false
	}
	for i := range this.Users {
		if !this.Users[i].Equal(that1.Users[i]) {
			return false
		}
	}
	if len(this.Groups) != len(that1.Groups) {
		return false
	}
	for i := range this.Groups {
		if !this.Groups[i].Equal(that1.Groups[i]) {
			return false
		}
	}
	return true
}
func (this *UpdateWeakUpdate) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpdateWeakUpdate)
	if !ok {
		that2, ok := that.(UpdateWeakUpdate)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Date != that1.Date {
		return false
	}
	if this.UpdateHeader != that1.UpdateHeader {
		return false
	}
	if !bytes.Equal(this.Update, that1.Update) {
		return false
	}
	return true
}
func (this *UpdateWeakFatUpdate) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpdateWeakFatUpdate)
	if !ok {
		that2, ok := that.(UpdateWeakFatUpdate)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Date != that1.Date {
		return false
	}
	if this.UpdateHeader != that1.UpdateHeader {
		return false
	}
	if !bytes.Equal(this.Update, that1.Update) {
		return false
	}
	if len(this.Users) != len(that1.Users) {
		return false
	}
	for i := range this.Users {
		if !this.Users[i].Equal(that1.Users[i]) {
			return false
		}
	}
	if len(this.Groups) != len(that1.Groups) {
		return false
	}
	for i := range this.Groups {
		if !this.Groups[i].Equal(that1.Groups[i]) {
			return false
		}
	}
	return true
}
func (this *UpdateSeqUpdateTooLong) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpdateSeqUpdateTooLong)
	if !ok {
		that2, ok := that.(UpdateSeqUpdateTooLong)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *UpdateContainer) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpdateContainer)
	if !ok {
		that2, ok := that.(UpdateContainer)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.UpdateHeader != that1.UpdateHeader {
		return false
	}
	if !bytes.Equal(this.Update, that1.Update) {
		return false
	}
	return true
}
func (this *UpdateCombinedUpdate) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpdateCombinedUpdate)
	if !ok {
		that2, ok := that.(UpdateCombinedUpdate)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.SeqStart != that1.SeqStart {
		return false
	}
	if this.SeqEnd != that1.SeqEnd {
		return false
	}
	if !bytes.Equal(this.State, that1.State) {
		return false
	}
	if len(this.Users) != len(that1.Users) {
		return false
	}
	for i := range this.Users {
		if !this.Users[i].Equal(that1.Users[i]) {
			return false
		}
	}
	if len(this.Groups) != len(that1.Groups) {
		return false
	}
	for i := range this.Groups {
		if !this.Groups[i].Equal(that1.Groups[i]) {
			return false
		}
	}
	if len(this.Updates) != len(that1.Updates) {
		return false
	}
	for i := range this.Updates {
		if !this.Updates[i].Equal(that1.Updates[i]) {
			return false
		}
	}
	if len(this.Messages) != len(that1.Messages) {
		return false
	}
	for i := range this.Messages {
		if !this.Messages[i].Equal(that1.Messages[i]) {
			return false
		}
	}
	return true
}
func (this *RequestGetState) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RequestGetState)
	if !ok {
		that2, ok := that.(RequestGetState)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Optimizations) != len(that1.Optimizations) {
		return false
	}
	for i := range this.Optimizations {
		if this.Optimizations[i] != that1.Optimizations[i] {
			return false
		}
	}
	return true
}
func (this *RequestGetDifference) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RequestGetDifference)
	if !ok {
		that2, ok := that.(RequestGetDifference)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Seq != that1.Seq {
		return false
	}
	if !bytes.Equal(this.State, that1.State) {
		return false
	}
	if len(this.Optimizations) != len(that1.Optimizations) {
		return false
	}
	for i := range this.Optimizations {
		if this.Optimizations[i] != that1.Optimizations[i] {
			return false
		}
	}
	if !this.ConfigHash.Equal(that1.ConfigHash) {
		return false
	}
	return true
}
func (this *ResponseGetDifference) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ResponseGetDifference)
	if !ok {
		that2, ok := that.(ResponseGetDifference)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Seq != that1.Seq {
		return false
	}
	if !bytes.Equal(this.State, that1.State) {
		return false
	}
	if len(this.Updates) != len(that1.Updates) {
		return false
	}
	for i := range this.Updates {
		if !this.Updates[i].Equal(that1.Updates[i]) {
			return false
		}
	}
	if len(this.Messages) != len(that1.Messages) {
		return false
	}
	for i := range this.Messages {
		if !this.Messages[i].Equal(that1.Messages[i]) {
			return false
		}
	}
	if this.NeedMore != that1.NeedMore {
		return false
	}
	if len(this.UsersRefs) != len(that1.UsersRefs) {
		return false
	}
	for i := range this.UsersRefs {
		if !this.UsersRefs[i].Equal(that1.UsersRefs[i]) {
			return false
		}
	}
	if len(this.GroupsRefs) != len(that1.GroupsRefs) {
		return false
	}
	for i := range this.GroupsRefs {
		if !this.GroupsRefs[i].Equal(that1.GroupsRefs[i]) {
			return false
		}
	}
	if !this.Config.Equal(that1.Config) {
		return false
	}
	if !this.ConfigHash.Equal(that1.ConfigHash) {
		return false
	}
	return true
}
func (this *RequestGetDialogsDifference) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RequestGetDialogsDifference)
	if !ok {
		that2, ok := that.(RequestGetDialogsDifference)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Clock != that1.Clock {
		return false
	}
	return true
}
func (this *ResponseGetDialogsDifference) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ResponseGetDialogsDifference)
	if !ok {
		that2, ok := that.(ResponseGetDialogsDifference)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Dialogs) != len(that1.Dialogs) {
		return false
	}
	for i := range this.Dialogs {
		if !this.Dialogs[i].Equal(that1.Dialogs[i]) {
			return false
		}
	}
	if len(this.GroupPeers) != len(that1.GroupPeers) {
		return false
	}
	for i := range this.GroupPeers {
		if !this.GroupPeers[i].Equal(that1.GroupPeers[i]) {
			return false
		}
	}
	if len(this.UserPeers) != len(that1.UserPeers) {
		return false
	}
	for i := range this.UserPeers {
		if !this.UserPeers[i].Equal(that1.UserPeers[i]) {
			return false
		}
	}
	return true
}
func (this *GroupMembersSubset) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GroupMembersSubset)
	if !ok {
		that2, ok := that.(GroupMembersSubset)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.GroupPeer.Equal(that1.GroupPeer) {
		return false
	}
	if len(this.MemberIds) != len(that1.MemberIds) {
		return false
	}
	for i := range this.MemberIds {
		if this.MemberIds[i] != that1.MemberIds[i] {
			return false
		}
	}
	return true
}
func (this *RequestGetReferencedEntitites) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RequestGetReferencedEntitites)
	if !ok {
		that2, ok := that.(RequestGetReferencedEntitites)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Users) != len(that1.Users) {
		return false
	}
	for i := range this.Users {
		if !this.Users[i].Equal(that1.Users[i]) {
			return false
		}
	}
	if len(this.Mids) != len(that1.Mids) {
		return false
	}
	for i := range this.Mids {
		if !this.Mids[i].Equal(that1.Mids[i]) {
			return false
		}
	}
	if len(this.GroupMembers) != len(that1.GroupMembers) {
		return false
	}
	for i := range this.GroupMembers {
		if !this.GroupMembers[i].Equal(that1.GroupMembers[i]) {
			return false
		}
	}
	if len(this.Groups) != len(that1.Groups) {
		return false
	}
	for i := range this.Groups {
		if !this.Groups[i].Equal(that1.Groups[i]) {
			return false
		}
	}
	return true
}
func (this *ResponseGetReferencedEntitites) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ResponseGetReferencedEntitites)
	if !ok {
		that2, ok := that.(ResponseGetReferencedEntitites)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Users) != len(that1.Users) {
		return false
	}
	for i := range this.Users {
		if !this.Users[i].Equal(that1.Users[i]) {
			return false
		}
	}
	if len(this.Groups) != len(that1.Groups) {
		return false
	}
	for i := range this.Groups {
		if !this.Groups[i].Equal(that1.Groups[i]) {
			return false
		}
	}
	if len(this.Messages) != len(that1.Messages) {
		return false
	}
	for i := range this.Messages {
		if !this.Messages[i].Equal(that1.Messages[i]) {
			return false
		}
	}
	return true
}
func (this *RequestGetPartialPeerInfo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RequestGetPartialPeerInfo)
	if !ok {
		that2, ok := that.(RequestGetPartialPeerInfo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Users) != len(that1.Users) {
		return false
	}
	for i := range this.Users {
		if !this.Users[i].Equal(that1.Users[i]) {
			return false
		}
	}
	if len(this.Groups) != len(that1.Groups) {
		return false
	}
	for i := range this.Groups {
		if !this.Groups[i].Equal(that1.Groups[i]) {
			return false
		}
	}
	if len(this.GroupMembers) != len(that1.GroupMembers) {
		return false
	}
	for i := range this.GroupMembers {
		if !this.GroupMembers[i].Equal(that1.GroupMembers[i]) {
			return false
		}
	}
	return true
}
func (this *ResponseGetPartialPeerInfo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ResponseGetPartialPeerInfo)
	if !ok {
		that2, ok := that.(ResponseGetPartialPeerInfo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Users) != len(that1.Users) {
		return false
	}
	for i := range this.Users {
		if !this.Users[i].Equal(that1.Users[i]) {
			return false
		}
	}
	if len(this.Groups) != len(that1.Groups) {
		return false
	}
	for i := range this.Groups {
		if !this.Groups[i].Equal(that1.Groups[i]) {
			return false
		}
	}
	return true
}
func (this *UpdateRawUpdate) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpdateRawUpdate)
	if !ok {
		that2, ok := that.(UpdateRawUpdate)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Type.Equal(that1.Type) {
		return false
	}
	if !bytes.Equal(this.Bytes, that1.Bytes) {
		return false
	}
	return true
}
func (this *UpdateEmptyUpdate) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpdateEmptyUpdate)
	if !ok {
		that2, ok := that.(UpdateEmptyUpdate)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *RequestSubscribeToOnline) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RequestSubscribeToOnline)
	if !ok {
		that2, ok := that.(RequestSubscribeToOnline)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Users) != len(that1.Users) {
		return false
	}
	for i := range this.Users {
		if !this.Users[i].Equal(that1.Users[i]) {
			return false
		}
	}
	return true
}
func (this *RequestSubscribeFromOnline) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RequestSubscribeFromOnline)
	if !ok {
		that2, ok := that.(RequestSubscribeFromOnline)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Users) != len(that1.Users) {
		return false
	}
	for i := range this.Users {
		if !this.Users[i].Equal(that1.Users[i]) {
			return false
		}
	}
	return true
}
func (this *RequestSubscribeToGroupOnline) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RequestSubscribeToGroupOnline)
	if !ok {
		that2, ok := that.(RequestSubscribeToGroupOnline)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Groups) != len(that1.Groups) {
		return false
	}
	for i := range this.Groups {
		if !this.Groups[i].Equal(that1.Groups[i]) {
			return false
		}
	}
	return true
}
func (this *RequestSubscribeFromGroupOnline) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RequestSubscribeFromGroupOnline)
	if !ok {
		that2, ok := that.(RequestSubscribeFromGroupOnline)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Groups) != len(that1.Groups) {
		return false
	}
	for i := range this.Groups {
		if !this.Groups[i].Equal(that1.Groups[i]) {
			return false
		}
	}
	return true
}
func (this *SeqUpdateBox) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SeqUpdateBox)
	if !ok {
		that2, ok := that.(SeqUpdateBox)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Seq != that1.Seq {
		return false
	}
	if !bytes.Equal(this.State, that1.State) {
		return false
	}
	if !this.Update.Equal(that1.Update) {
		return false
	}
	if !this.UnboxedUpdate.Equal(that1.UnboxedUpdate) {
		return false
	}
	return true
}
func (this *PeersList) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PeersList)
	if !ok {
		that2, ok := that.(PeersList)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Peers) != len(that1.Peers) {
		return false
	}
	for i := range this.Peers {
		if !this.Peers[i].Equal(that1.Peers[i]) {
			return false
		}
	}
	return true
}
func (this *WeakUpdateCommand) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*WeakUpdateCommand)
	if !ok {
		that2, ok := that.(WeakUpdateCommand)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.Command == nil {
		if this.Command != nil {
			return false
		}
	} else if this.Command == nil {
		return false
	} else if !this.Command.Equal(that1.Command) {
		return false
	}
	return true
}
func (this *WeakUpdateCommand_ChangeMyOnline_) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*WeakUpdateCommand_ChangeMyOnline_)
	if !ok {
		that2, ok := that.(WeakUpdateCommand_ChangeMyOnline_)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ChangeMyOnline.Equal(that1.ChangeMyOnline) {
		return false
	}
	return true
}
func (this *WeakUpdateCommand_SubscribeToOnlines) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*WeakUpdateCommand_SubscribeToOnlines)
	if !ok {
		that2, ok := that.(WeakUpdateCommand_SubscribeToOnlines)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.SubscribeToOnlines.Equal(that1.SubscribeToOnlines) {
		return false
	}
	return true
}
func (this *WeakUpdateCommand_UnsubscribeFromOnlines) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*WeakUpdateCommand_UnsubscribeFromOnlines)
	if !ok {
		that2, ok := that.(WeakUpdateCommand_UnsubscribeFromOnlines)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.UnsubscribeFromOnlines.Equal(that1.UnsubscribeFromOnlines) {
		return false
	}
	return true
}
func (this *WeakUpdateCommand_UnsubscribeFromAllOnlines) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*WeakUpdateCommand_UnsubscribeFromAllOnlines)
	if !ok {
		that2, ok := that.(WeakUpdateCommand_UnsubscribeFromAllOnlines)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.UnsubscribeFromAllOnlines.Equal(that1.UnsubscribeFromAllOnlines) {
		return false
	}
	return true
}
func (this *WeakUpdateCommand_ChangeMyTyping_) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*WeakUpdateCommand_ChangeMyTyping_)
	if !ok {
		that2, ok := that.(WeakUpdateCommand_ChangeMyTyping_)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ChangeMyTyping.Equal(that1.ChangeMyTyping) {
		return false
	}
	return true
}
func (this *WeakUpdateCommand_SubscribeToTypings) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*WeakUpdateCommand_SubscribeToTypings)
	if !ok {
		that2, ok := that.(WeakUpdateCommand_SubscribeToTypings)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.SubscribeToTypings.Equal(that1.SubscribeToTypings) {
		return false
	}
	return true
}
func (this *WeakUpdateCommand_UnsubscribeFromTypings) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*WeakUpdateCommand_UnsubscribeFromTypings)
	if !ok {
		that2, ok := that.(WeakUpdateCommand_UnsubscribeFromTypings)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.UnsubscribeFromTypings.Equal(that1.UnsubscribeFromTypings) {
		return false
	}
	return true
}
func (this *WeakUpdateCommand_UnsubscribeFromAllTypings) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*WeakUpdateCommand_UnsubscribeFromAllTypings)
	if !ok {
		that2, ok := that.(WeakUpdateCommand_UnsubscribeFromAllTypings)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.UnsubscribeFromAllTypings.Equal(that1.UnsubscribeFromAllTypings) {
		return false
	}
	return true
}
func (this *WeakUpdateCommand_ChangeMyOnline) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*WeakUpdateCommand_ChangeMyOnline)
	if !ok {
		that2, ok := that.(WeakUpdateCommand_ChangeMyOnline)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Online != that1.Online {
		return false
	}
	return true
}
func (this *WeakUpdateCommand_ChangeMyTyping) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*WeakUpdateCommand_ChangeMyTyping)
	if !ok {
		that2, ok := that.(WeakUpdateCommand_ChangeMyTyping)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Peer.Equal(that1.Peer) {
		return false
	}
	if this.Type != that1.Type {
		return false
	}
	if this.Start != that1.Start {
		return false
	}
	return true
}
func (this *WeakUpdateBox) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*WeakUpdateBox)
	if !ok {
		that2, ok := that.(WeakUpdateBox)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.Updatebox == nil {
		if this.Updatebox != nil {
			return false
		}
	} else if this.Updatebox == nil {
		return false
	} else if !this.Updatebox.Equal(that1.Updatebox) {
		return false
	}
	return true
}
func (this *WeakUpdateBox_TypingStart) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*WeakUpdateBox_TypingStart)
	if !ok {
		that2, ok := that.(WeakUpdateBox_TypingStart)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.TypingStart.Equal(that1.TypingStart) {
		return false
	}
	return true
}
func (this *WeakUpdateBox_TypingStop) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*WeakUpdateBox_TypingStop)
	if !ok {
		that2, ok := that.(WeakUpdateBox_TypingStop)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.TypingStop.Equal(that1.TypingStop) {
		return false
	}
	return true
}
func (this *WeakUpdateBox_UserLastSeen) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*WeakUpdateBox_UserLastSeen)
	if !ok {
		that2, ok := that.(WeakUpdateBox_UserLastSeen)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.UserLastSeen.Equal(that1.UserLastSeen) {
		return false
	}
	return true
}
func (this *WeakUpdateBox_GroupOnline) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*WeakUpdateBox_GroupOnline)
	if !ok {
		that2, ok := that.(WeakUpdateBox_GroupOnline)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.GroupOnline.Equal(that1.GroupOnline) {
		return false
	}
	return true
}
func (this *WeakUpdateBox_ForceReload) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*WeakUpdateBox_ForceReload)
	if !ok {
		that2, ok := that.(WeakUpdateBox_ForceReload)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ForceReload.Equal(that1.ForceReload) {
		return false
	}
	return true
}
func (this *WeakUpdateBox_PermissionsChange) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*WeakUpdateBox_PermissionsChange)
	if !ok {
		that2, ok := that.(WeakUpdateBox_PermissionsChange)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.PermissionsChange.Equal(that1.PermissionsChange) {
		return false
	}
	return true
}
func (this *WeakUpdateBox_UserStatusChange) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*WeakUpdateBox_UserStatusChange)
	if !ok {
		that2, ok := that.(WeakUpdateBox_UserStatusChange)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.UserStatusChange.Equal(that1.UserStatusChange) {
		return false
	}
	return true
}
func (this *WeakUpdateBox_MessageReactionUpdate) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*WeakUpdateBox_MessageReactionUpdate)
	if !ok {
		that2, ok := that.(WeakUpdateBox_MessageReactionUpdate)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.MessageReactionUpdate.Equal(that1.MessageReactionUpdate) {
		return false
	}
	return true
}
func (this *WeakUpdateBox_Message) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*WeakUpdateBox_Message)
	if !ok {
		that2, ok := that.(WeakUpdateBox_Message)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Message.Equal(that1.Message) {
		return false
	}
	return true
}
func (this *WeakUpdateBox_MessageContentChange) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*WeakUpdateBox_MessageContentChange)
	if !ok {
		that2, ok := that.(WeakUpdateBox_MessageContentChange)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.MessageContentChange.Equal(that1.MessageContentChange) {
		return false
	}
	return true
}
func (this *WeakUpdateBox_MessageRead) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*WeakUpdateBox_MessageRead)
	if !ok {
		that2, ok := that.(WeakUpdateBox_MessageRead)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.MessageRead.Equal(that1.MessageRead) {
		return false
	}
	return true
}
func (this *WeakUpdateBox_MessageReceived) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*WeakUpdateBox_MessageReceived)
	if !ok {
		that2, ok := that.(WeakUpdateBox_MessageReceived)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.MessageReceived.Equal(that1.MessageReceived) {
		return false
	}
	return true
}
func (this *WeakUpdateBox_MessageReadByMe) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*WeakUpdateBox_MessageReadByMe)
	if !ok {
		that2, ok := that.(WeakUpdateBox_MessageReadByMe)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.MessageReadByMe.Equal(that1.MessageReadByMe) {
		return false
	}
	return true
}
func (this *WeakUpdateBox_UpdateForceReloadState) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*WeakUpdateBox_UpdateForceReloadState)
	if !ok {
		that2, ok := that.(WeakUpdateBox_UpdateForceReloadState)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Fields) != len(that1.Fields) {
		return false
	}
	for i := range this.Fields {
		if !this.Fields[i].Equal(that1.Fields[i]) {
			return false
		}
	}
	return true
}
func (this *WeakUpdateBox_UpdateForceReloadState_ForceReloadField) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*WeakUpdateBox_UpdateForceReloadState_ForceReloadField)
	if !ok {
		that2, ok := that.(WeakUpdateBox_UpdateForceReloadState_ForceReloadField)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.Field == nil {
		if this.Field != nil {
			return false
		}
	} else if this.Field == nil {
		return false
	} else if !this.Field.Equal(that1.Field) {
		return false
	}
	return true
}
func (this *WeakUpdateBox_UpdateForceReloadState_ForceReloadField_ReloadDialogs) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*WeakUpdateBox_UpdateForceReloadState_ForceReloadField_ReloadDialogs)
	if !ok {
		that2, ok := that.(WeakUpdateBox_UpdateForceReloadState_ForceReloadField_ReloadDialogs)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ReloadDialogs.Equal(that1.ReloadDialogs) {
		return false
	}
	return true
}
func (this *WeakUpdateBox_UpdateForceReloadState_ForceReloadField_ReloadContacts) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*WeakUpdateBox_UpdateForceReloadState_ForceReloadField_ReloadContacts)
	if !ok {
		that2, ok := that.(WeakUpdateBox_UpdateForceReloadState_ForceReloadField_ReloadContacts)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ReloadContacts.Equal(that1.ReloadContacts) {
		return false
	}
	return true
}
func (this *WeakUpdateBox_UpdateForceReloadState_ForceReloadField_ReloadHistory) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*WeakUpdateBox_UpdateForceReloadState_ForceReloadField_ReloadHistory)
	if !ok {
		that2, ok := that.(WeakUpdateBox_UpdateForceReloadState_ForceReloadField_ReloadHistory)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ReloadHistory.Equal(that1.ReloadHistory) {
		return false
	}
	return true
}
func (this *UpdateSeqUpdate) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 95)
	s = append(s, "&dialog.UpdateSeqUpdate{")
	s = append(s, "Seq: "+fmt.Sprintf("%#v", this.Seq)+",\n")
	s = append(s, "State: "+fmt.Sprintf("%#v", this.State)+",\n")
	s = append(s, "UpdateHeader: "+fmt.Sprintf("%#v", this.UpdateHeader)+",\n")
	if this.Update != nil {
		s = append(s, "Update: "+fmt.Sprintf("%#v", this.Update)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UpdateSeqUpdate_UpdateForceReloadState) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dialog.UpdateSeqUpdate_UpdateForceReloadState{` +
		`UpdateForceReloadState:` + fmt.Sprintf("%#v", this.UpdateForceReloadState) + `}`}, ", ")
	return s
}
func (this *UpdateSeqUpdate_UpdateUserAvatarChanged) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dialog.UpdateSeqUpdate_UpdateUserAvatarChanged{` +
		`UpdateUserAvatarChanged:` + fmt.Sprintf("%#v", this.UpdateUserAvatarChanged) + `}`}, ", ")
	return s
}
func (this *UpdateSeqUpdate_UpdateUserNameChanged) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dialog.UpdateSeqUpdate_UpdateUserNameChanged{` +
		`UpdateUserNameChanged:` + fmt.Sprintf("%#v", this.UpdateUserNameChanged) + `}`}, ", ")
	return s
}
func (this *UpdateSeqUpdate_UpdateUserLocalNameChanged) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dialog.UpdateSeqUpdate_UpdateUserLocalNameChanged{` +
		`UpdateUserLocalNameChanged:` + fmt.Sprintf("%#v", this.UpdateUserLocalNameChanged) + `}`}, ", ")
	return s
}
func (this *UpdateSeqUpdate_UpdateUserContactsChanged) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dialog.UpdateSeqUpdate_UpdateUserContactsChanged{` +
		`UpdateUserContactsChanged:` + fmt.Sprintf("%#v", this.UpdateUserContactsChanged) + `}`}, ", ")
	return s
}
func (this *UpdateSeqUpdate_UpdateUserNickChanged) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dialog.UpdateSeqUpdate_UpdateUserNickChanged{` +
		`UpdateUserNickChanged:` + fmt.Sprintf("%#v", this.UpdateUserNickChanged) + `}`}, ", ")
	return s
}
func (this *UpdateSeqUpdate_UpdateUserAboutChanged) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dialog.UpdateSeqUpdate_UpdateUserAboutChanged{` +
		`UpdateUserAboutChanged:` + fmt.Sprintf("%#v", this.UpdateUserAboutChanged) + `}`}, ", ")
	return s
}
func (this *UpdateSeqUpdate_UpdateUserPreferredLanguagesChanged) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dialog.UpdateSeqUpdate_UpdateUserPreferredLanguagesChanged{` +
		`UpdateUserPreferredLanguagesChanged:` + fmt.Sprintf("%#v", this.UpdateUserPreferredLanguagesChanged) + `}`}, ", ")
	return s
}
func (this *UpdateSeqUpdate_UpdateUserTimeZoneChanged) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dialog.UpdateSeqUpdate_UpdateUserTimeZoneChanged{` +
		`UpdateUserTimeZoneChanged:` + fmt.Sprintf("%#v", this.UpdateUserTimeZoneChanged) + `}`}, ", ")
	return s
}
func (this *UpdateSeqUpdate_UpdateUserBotCommandsChanged) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dialog.UpdateSeqUpdate_UpdateUserBotCommandsChanged{` +
		`UpdateUserBotCommandsChanged:` + fmt.Sprintf("%#v", this.UpdateUserBotCommandsChanged) + `}`}, ", ")
	return s
}
func (this *UpdateSeqUpdate_UpdateUserExtChanged) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dialog.UpdateSeqUpdate_UpdateUserExtChanged{` +
		`UpdateUserExtChanged:` + fmt.Sprintf("%#v", this.UpdateUserExtChanged) + `}`}, ", ")
	return s
}
func (this *UpdateSeqUpdate_UpdateUserFullExtChanged) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dialog.UpdateSeqUpdate_UpdateUserFullExtChanged{` +
		`UpdateUserFullExtChanged:` + fmt.Sprintf("%#v", this.UpdateUserFullExtChanged) + `}`}, ", ")
	return s
}
func (this *UpdateSeqUpdate_UpdateUserSexChanged) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dialog.UpdateSeqUpdate_UpdateUserSexChanged{` +
		`UpdateUserSexChanged:` + fmt.Sprintf("%#v", this.UpdateUserSexChanged) + `}`}, ", ")
	return s
}
func (this *UpdateSeqUpdate_UpdateUserCustomProfileChanged) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dialog.UpdateSeqUpdate_UpdateUserCustomProfileChanged{` +
		`UpdateUserCustomProfileChanged:` + fmt.Sprintf("%#v", this.UpdateUserCustomProfileChanged) + `}`}, ", ")
	return s
}
func (this *UpdateSeqUpdate_UpdateUserStatusChanged) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dialog.UpdateSeqUpdate_UpdateUserStatusChanged{` +
		`UpdateUserStatusChanged:` + fmt.Sprintf("%#v", this.UpdateUserStatusChanged) + `}`}, ", ")
	return s
}
func (this *UpdateSeqUpdate_UpdateContactRegistered) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dialog.UpdateSeqUpdate_UpdateContactRegistered{` +
		`UpdateContactRegistered:` + fmt.Sprintf("%#v", this.UpdateContactRegistered) + `}`}, ", ")
	return s
}
func (this *UpdateSeqUpdate_UpdateContactsAdded) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dialog.UpdateSeqUpdate_UpdateContactsAdded{` +
		`UpdateContactsAdded:` + fmt.Sprintf("%#v", this.UpdateContactsAdded) + `}`}, ", ")
	return s
}
func (this *UpdateSeqUpdate_UpdateContactsAddTaskSuspended) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dialog.UpdateSeqUpdate_UpdateContactsAddTaskSuspended{` +
		`UpdateContactsAddTaskSuspended:` + fmt.Sprintf("%#v", this.UpdateContactsAddTaskSuspended) + `}`}, ", ")
	return s
}
func (this *UpdateSeqUpdate_UpdateContactsRemoved) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dialog.UpdateSeqUpdate_UpdateContactsRemoved{` +
		`UpdateContactsRemoved:` + fmt.Sprintf("%#v", this.UpdateContactsRemoved) + `}`}, ", ")
	return s
}
func (this *UpdateSeqUpdate_UpdateUserBlocked) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dialog.UpdateSeqUpdate_UpdateUserBlocked{` +
		`UpdateUserBlocked:` + fmt.Sprintf("%#v", this.UpdateUserBlocked) + `}`}, ", ")
	return s
}
func (this *UpdateSeqUpdate_UpdateUserUnblocked) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dialog.UpdateSeqUpdate_UpdateUserUnblocked{` +
		`UpdateUserUnblocked:` + fmt.Sprintf("%#v", this.UpdateUserUnblocked) + `}`}, ", ")
	return s
}
func (this *UpdateSeqUpdate_UpdateInteractiveMediaEvent) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dialog.UpdateSeqUpdate_UpdateInteractiveMediaEvent{` +
		`UpdateInteractiveMediaEvent:` + fmt.Sprintf("%#v", this.UpdateInteractiveMediaEvent) + `}`}, ", ")
	return s
}
func (this *UpdateSeqUpdate_UpdateMessage) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dialog.UpdateSeqUpdate_UpdateMessage{` +
		`UpdateMessage:` + fmt.Sprintf("%#v", this.UpdateMessage) + `}`}, ", ")
	return s
}
func (this *UpdateSeqUpdate_UpdateMessageContentChanged) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dialog.UpdateSeqUpdate_UpdateMessageContentChanged{` +
		`UpdateMessageContentChanged:` + fmt.Sprintf("%#v", this.UpdateMessageContentChanged) + `}`}, ", ")
	return s
}
func (this *UpdateSeqUpdate_UpdateMessageSent) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dialog.UpdateSeqUpdate_UpdateMessageSent{` +
		`UpdateMessageSent:` + fmt.Sprintf("%#v", this.UpdateMessageSent) + `}`}, ", ")
	return s
}
func (this *UpdateSeqUpdate_UpdateMessageReceived) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dialog.UpdateSeqUpdate_UpdateMessageReceived{` +
		`UpdateMessageReceived:` + fmt.Sprintf("%#v", this.UpdateMessageReceived) + `}`}, ", ")
	return s
}
func (this *UpdateSeqUpdate_UpdateMessageRead) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dialog.UpdateSeqUpdate_UpdateMessageRead{` +
		`UpdateMessageRead:` + fmt.Sprintf("%#v", this.UpdateMessageRead) + `}`}, ", ")
	return s
}
func (this *UpdateSeqUpdate_UpdateMessageReadByMe) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dialog.UpdateSeqUpdate_UpdateMessageReadByMe{` +
		`UpdateMessageReadByMe:` + fmt.Sprintf("%#v", this.UpdateMessageReadByMe) + `}`}, ", ")
	return s
}
func (this *UpdateSeqUpdate_UpdateMessageDelete) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dialog.UpdateSeqUpdate_UpdateMessageDelete{` +
		`UpdateMessageDelete:` + fmt.Sprintf("%#v", this.UpdateMessageDelete) + `}`}, ", ")
	return s
}
func (this *UpdateSeqUpdate_UpdateChatClear) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dialog.UpdateSeqUpdate_UpdateChatClear{` +
		`UpdateChatClear:` + fmt.Sprintf("%#v", this.UpdateChatClear) + `}`}, ", ")
	return s
}
func (this *UpdateSeqUpdate_UpdateChatDelete) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dialog.UpdateSeqUpdate_UpdateChatDelete{` +
		`UpdateChatDelete:` + fmt.Sprintf("%#v", this.UpdateChatDelete) + `}`}, ", ")
	return s
}
func (this *UpdateSeqUpdate_UpdateChatArchive) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dialog.UpdateSeqUpdate_UpdateChatArchive{` +
		`UpdateChatArchive:` + fmt.Sprintf("%#v", this.UpdateChatArchive) + `}`}, ", ")
	return s
}
func (this *UpdateSeqUpdate_UpdateChatGroupsChanged) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dialog.UpdateSeqUpdate_UpdateChatGroupsChanged{` +
		`UpdateChatGroupsChanged:` + fmt.Sprintf("%#v", this.UpdateChatGroupsChanged) + `}`}, ", ")
	return s
}
func (this *UpdateSeqUpdate_UpdateReactionsUpdate) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dialog.UpdateSeqUpdate_UpdateReactionsUpdate{` +
		`UpdateReactionsUpdate:` + fmt.Sprintf("%#v", this.UpdateReactionsUpdate) + `}`}, ", ")
	return s
}
func (this *UpdateSeqUpdate_UpdateDialogFavouriteChanged) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dialog.UpdateSeqUpdate_UpdateDialogFavouriteChanged{` +
		`UpdateDialogFavouriteChanged:` + fmt.Sprintf("%#v", this.UpdateDialogFavouriteChanged) + `}`}, ", ")
	return s
}
func (this *UpdateSeqUpdate_UpdatePinnedMessagesChanged) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dialog.UpdateSeqUpdate_UpdatePinnedMessagesChanged{` +
		`UpdatePinnedMessagesChanged:` + fmt.Sprintf("%#v", this.UpdatePinnedMessagesChanged) + `}`}, ", ")
	return s
}
func (this *UpdateSeqUpdate_UpdateGroupTitleChanged) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dialog.UpdateSeqUpdate_UpdateGroupTitleChanged{` +
		`UpdateGroupTitleChanged:` + fmt.Sprintf("%#v", this.UpdateGroupTitleChanged) + `}`}, ", ")
	return s
}
func (this *UpdateSeqUpdate_UpdateGroupAvatarChanged) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dialog.UpdateSeqUpdate_UpdateGroupAvatarChanged{` +
		`UpdateGroupAvatarChanged:` + fmt.Sprintf("%#v", this.UpdateGroupAvatarChanged) + `}`}, ", ")
	return s
}
func (this *UpdateSeqUpdate_UpdateGroupAboutChanged) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dialog.UpdateSeqUpdate_UpdateGroupAboutChanged{` +
		`UpdateGroupAboutChanged:` + fmt.Sprintf("%#v", this.UpdateGroupAboutChanged) + `}`}, ", ")
	return s
}
func (this *UpdateSeqUpdate_UpdateGroupOwnerChanged) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dialog.UpdateSeqUpdate_UpdateGroupOwnerChanged{` +
		`UpdateGroupOwnerChanged:` + fmt.Sprintf("%#v", this.UpdateGroupOwnerChanged) + `}`}, ", ")
	return s
}
func (this *UpdateSeqUpdate_UpdateGroupMembersUpdated) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dialog.UpdateSeqUpdate_UpdateGroupMembersUpdated{` +
		`UpdateGroupMembersUpdated:` + fmt.Sprintf("%#v", this.UpdateGroupMembersUpdated) + `}`}, ", ")
	return s
}
func (this *UpdateSeqUpdate_UpdateGroupMemberDiff) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dialog.UpdateSeqUpdate_UpdateGroupMemberDiff{` +
		`UpdateGroupMemberDiff:` + fmt.Sprintf("%#v", this.UpdateGroupMemberDiff) + `}`}, ", ")
	return s
}
func (this *UpdateSeqUpdate_UpdateGroupMembersCountChanged) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dialog.UpdateSeqUpdate_UpdateGroupMembersCountChanged{` +
		`UpdateGroupMembersCountChanged:` + fmt.Sprintf("%#v", this.UpdateGroupMembersCountChanged) + `}`}, ", ")
	return s
}
func (this *UpdateSeqUpdate_UpdateGroupMemberPermissionsChanged) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dialog.UpdateSeqUpdate_UpdateGroupMemberPermissionsChanged{` +
		`UpdateGroupMemberPermissionsChanged:` + fmt.Sprintf("%#v", this.UpdateGroupMemberPermissionsChanged) + `}`}, ", ")
	return s
}
func (this *UpdateSeqUpdate_UpdateGroupInviteObsolete) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dialog.UpdateSeqUpdate_UpdateGroupInviteObsolete{` +
		`UpdateGroupInviteObsolete:` + fmt.Sprintf("%#v", this.UpdateGroupInviteObsolete) + `}`}, ", ")
	return s
}
func (this *UpdateSeqUpdate_UpdateGroupUserInvitedObsolete) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dialog.UpdateSeqUpdate_UpdateGroupUserInvitedObsolete{` +
		`UpdateGroupUserInvitedObsolete:` + fmt.Sprintf("%#v", this.UpdateGroupUserInvitedObsolete) + `}`}, ", ")
	return s
}
func (this *UpdateSeqUpdate_UpdateGroupUserLeaveObsolete) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dialog.UpdateSeqUpdate_UpdateGroupUserLeaveObsolete{` +
		`UpdateGroupUserLeaveObsolete:` + fmt.Sprintf("%#v", this.UpdateGroupUserLeaveObsolete) + `}`}, ", ")
	return s
}
func (this *UpdateSeqUpdate_UpdateGroupUserKickObsolete) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dialog.UpdateSeqUpdate_UpdateGroupUserKickObsolete{` +
		`UpdateGroupUserKickObsolete:` + fmt.Sprintf("%#v", this.UpdateGroupUserKickObsolete) + `}`}, ", ")
	return s
}
func (this *UpdateSeqUpdate_UpdateGroupMembersUpdateObsolete) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dialog.UpdateSeqUpdate_UpdateGroupMembersUpdateObsolete{` +
		`UpdateGroupMembersUpdateObsolete:` + fmt.Sprintf("%#v", this.UpdateGroupMembersUpdateObsolete) + `}`}, ", ")
	return s
}
func (this *UpdateSeqUpdate_UpdateGroupTitleChangedObsolete) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dialog.UpdateSeqUpdate_UpdateGroupTitleChangedObsolete{` +
		`UpdateGroupTitleChangedObsolete:` + fmt.Sprintf("%#v", this.UpdateGroupTitleChangedObsolete) + `}`}, ", ")
	return s
}
func (this *UpdateSeqUpdate_UpdateGroupAboutChangedObsolete) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dialog.UpdateSeqUpdate_UpdateGroupAboutChangedObsolete{` +
		`UpdateGroupAboutChangedObsolete:` + fmt.Sprintf("%#v", this.UpdateGroupAboutChangedObsolete) + `}`}, ", ")
	return s
}
func (this *UpdateSeqUpdate_UpdateGroupAvatarChangedObsolete) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dialog.UpdateSeqUpdate_UpdateGroupAvatarChangedObsolete{` +
		`UpdateGroupAvatarChangedObsolete:` + fmt.Sprintf("%#v", this.UpdateGroupAvatarChangedObsolete) + `}`}, ", ")
	return s
}
func (this *UpdateSeqUpdate_UpdateGroupShortnameChanged) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dialog.UpdateSeqUpdate_UpdateGroupShortnameChanged{` +
		`UpdateGroupShortnameChanged:` + fmt.Sprintf("%#v", this.UpdateGroupShortnameChanged) + `}`}, ", ")
	return s
}
func (this *UpdateSeqUpdate_UpdateStickerCollectionsChanged) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dialog.UpdateSeqUpdate_UpdateStickerCollectionsChanged{` +
		`UpdateStickerCollectionsChanged:` + fmt.Sprintf("%#v", this.UpdateStickerCollectionsChanged) + `}`}, ", ")
	return s
}
func (this *UpdateSeqUpdate_UpdateStickerPackRemoved) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dialog.UpdateSeqUpdate_UpdateStickerPackRemoved{` +
		`UpdateStickerPackRemoved:` + fmt.Sprintf("%#v", this.UpdateStickerPackRemoved) + `}`}, ", ")
	return s
}
func (this *UpdateSeqUpdate_UpdateStickerPackAdded) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dialog.UpdateSeqUpdate_UpdateStickerPackAdded{` +
		`UpdateStickerPackAdded:` + fmt.Sprintf("%#v", this.UpdateStickerPackAdded) + `}`}, ", ")
	return s
}
func (this *UpdateSeqUpdate_UpdatePauseNotifications) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dialog.UpdateSeqUpdate_UpdatePauseNotifications{` +
		`UpdatePauseNotifications:` + fmt.Sprintf("%#v", this.UpdatePauseNotifications) + `}`}, ", ")
	return s
}
func (this *UpdateSeqUpdate_UpdateRestoreNotifications) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dialog.UpdateSeqUpdate_UpdateRestoreNotifications{` +
		`UpdateRestoreNotifications:` + fmt.Sprintf("%#v", this.UpdateRestoreNotifications) + `}`}, ", ")
	return s
}
func (this *UpdateSeqUpdate_UpdateTyping) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dialog.UpdateSeqUpdate_UpdateTyping{` +
		`UpdateTyping:` + fmt.Sprintf("%#v", this.UpdateTyping) + `}`}, ", ")
	return s
}
func (this *UpdateSeqUpdate_UpdateTypingStop) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dialog.UpdateSeqUpdate_UpdateTypingStop{` +
		`UpdateTypingStop:` + fmt.Sprintf("%#v", this.UpdateTypingStop) + `}`}, ", ")
	return s
}
func (this *UpdateSeqUpdate_UpdateUserOnline) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dialog.UpdateSeqUpdate_UpdateUserOnline{` +
		`UpdateUserOnline:` + fmt.Sprintf("%#v", this.UpdateUserOnline) + `}`}, ", ")
	return s
}
func (this *UpdateSeqUpdate_UpdateUserOffline) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dialog.UpdateSeqUpdate_UpdateUserOffline{` +
		`UpdateUserOffline:` + fmt.Sprintf("%#v", this.UpdateUserOffline) + `}`}, ", ")
	return s
}
func (this *UpdateSeqUpdate_UpdateUserLastSeen) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dialog.UpdateSeqUpdate_UpdateUserLastSeen{` +
		`UpdateUserLastSeen:` + fmt.Sprintf("%#v", this.UpdateUserLastSeen) + `}`}, ", ")
	return s
}
func (this *UpdateSeqUpdate_UpdateGroupOnline) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dialog.UpdateSeqUpdate_UpdateGroupOnline{` +
		`UpdateGroupOnline:` + fmt.Sprintf("%#v", this.UpdateGroupOnline) + `}`}, ", ")
	return s
}
func (this *UpdateSeqUpdate_UpdateEventBusDeviceConnected) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dialog.UpdateSeqUpdate_UpdateEventBusDeviceConnected{` +
		`UpdateEventBusDeviceConnected:` + fmt.Sprintf("%#v", this.UpdateEventBusDeviceConnected) + `}`}, ", ")
	return s
}
func (this *UpdateSeqUpdate_UpdateEventBusDeviceDisconnected) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dialog.UpdateSeqUpdate_UpdateEventBusDeviceDisconnected{` +
		`UpdateEventBusDeviceDisconnected:` + fmt.Sprintf("%#v", this.UpdateEventBusDeviceDisconnected) + `}`}, ", ")
	return s
}
func (this *UpdateSeqUpdate_UpdateEventBusMessage) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dialog.UpdateSeqUpdate_UpdateEventBusMessage{` +
		`UpdateEventBusMessage:` + fmt.Sprintf("%#v", this.UpdateEventBusMessage) + `}`}, ", ")
	return s
}
func (this *UpdateSeqUpdate_UpdateEventBusDisposed) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dialog.UpdateSeqUpdate_UpdateEventBusDisposed{` +
		`UpdateEventBusDisposed:` + fmt.Sprintf("%#v", this.UpdateEventBusDisposed) + `}`}, ", ")
	return s
}
func (this *UpdateSeqUpdate_UpdateIncomingCallDeprecated) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dialog.UpdateSeqUpdate_UpdateIncomingCallDeprecated{` +
		`UpdateIncomingCallDeprecated:` + fmt.Sprintf("%#v", this.UpdateIncomingCallDeprecated) + `}`}, ", ")
	return s
}
func (this *UpdateSeqUpdate_UpdateIncomingCall) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dialog.UpdateSeqUpdate_UpdateIncomingCall{` +
		`UpdateIncomingCall:` + fmt.Sprintf("%#v", this.UpdateIncomingCall) + `}`}, ", ")
	return s
}
func (this *UpdateSeqUpdate_UpdateCallHandled) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dialog.UpdateSeqUpdate_UpdateCallHandled{` +
		`UpdateCallHandled:` + fmt.Sprintf("%#v", this.UpdateCallHandled) + `}`}, ", ")
	return s
}
func (this *UpdateSeqUpdate_UpdateCallDisposed) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dialog.UpdateSeqUpdate_UpdateCallDisposed{` +
		`UpdateCallDisposed:` + fmt.Sprintf("%#v", this.UpdateCallDisposed) + `}`}, ", ")
	return s
}
func (this *UpdateSeqUpdate_UpdateParameterChanged) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dialog.UpdateSeqUpdate_UpdateParameterChanged{` +
		`UpdateParameterChanged:` + fmt.Sprintf("%#v", this.UpdateParameterChanged) + `}`}, ", ")
	return s
}
func (this *UpdateSeqUpdate_UpdateRawUpdate) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dialog.UpdateSeqUpdate_UpdateRawUpdate{` +
		`UpdateRawUpdate:` + fmt.Sprintf("%#v", this.UpdateRawUpdate) + `}`}, ", ")
	return s
}
func (this *UpdateSeqUpdate_UpdateEmptyUpdate) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dialog.UpdateSeqUpdate_UpdateEmptyUpdate{` +
		`UpdateEmptyUpdate:` + fmt.Sprintf("%#v", this.UpdateEmptyUpdate) + `}`}, ", ")
	return s
}
func (this *UpdateSeqUpdate_UpdateCountersChanged) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dialog.UpdateSeqUpdate_UpdateCountersChanged{` +
		`UpdateCountersChanged:` + fmt.Sprintf("%#v", this.UpdateCountersChanged) + `}`}, ", ")
	return s
}
func (this *UpdateSeqUpdate_UpdateConfig) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dialog.UpdateSeqUpdate_UpdateConfig{` +
		`UpdateConfig:` + fmt.Sprintf("%#v", this.UpdateConfig) + `}`}, ", ")
	return s
}
func (this *UpdateSeqUpdate_UpdateSpaceModified) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dialog.UpdateSeqUpdate_UpdateSpaceModified{` +
		`UpdateSpaceModified:` + fmt.Sprintf("%#v", this.UpdateSpaceModified) + `}`}, ", ")
	return s
}
func (this *UpdateSeqUpdate_UpdateSpaceMemberModified) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dialog.UpdateSeqUpdate_UpdateSpaceMemberModified{` +
		`UpdateSpaceMemberModified:` + fmt.Sprintf("%#v", this.UpdateSpaceMemberModified) + `}`}, ", ")
	return s
}
func (this *UpdateSeqUpdate_UpdateMessageRejectedByHook) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dialog.UpdateSeqUpdate_UpdateMessageRejectedByHook{` +
		`UpdateMessageRejectedByHook:` + fmt.Sprintf("%#v", this.UpdateMessageRejectedByHook) + `}`}, ", ")
	return s
}
func (this *UpdateSeqUpdate_UpdateMessageEditRejectedByHook) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dialog.UpdateSeqUpdate_UpdateMessageEditRejectedByHook{` +
		`UpdateMessageEditRejectedByHook:` + fmt.Sprintf("%#v", this.UpdateMessageEditRejectedByHook) + `}`}, ", ")
	return s
}
func (this *UpdateSeqUpdate_UpdateUser) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dialog.UpdateSeqUpdate_UpdateUser{` +
		`UpdateUser:` + fmt.Sprintf("%#v", this.UpdateUser) + `}`}, ", ")
	return s
}
func (this *UpdateSeqUpdate_UpdateFeatureFlagChanged) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dialog.UpdateSeqUpdate_UpdateFeatureFlagChanged{` +
		`UpdateFeatureFlagChanged:` + fmt.Sprintf("%#v", this.UpdateFeatureFlagChanged) + `}`}, ", ")
	return s
}
func (this *UpdateSeqUpdate_UpdateThreadCreated) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dialog.UpdateSeqUpdate_UpdateThreadCreated{` +
		`UpdateThreadCreated:` + fmt.Sprintf("%#v", this.UpdateThreadCreated) + `}`}, ", ")
	return s
}
func (this *UpdateSeqUpdate_UpdateThreadLifted) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dialog.UpdateSeqUpdate_UpdateThreadLifted{` +
		`UpdateThreadLifted:` + fmt.Sprintf("%#v", this.UpdateThreadLifted) + `}`}, ", ")
	return s
}
func (this *UpdateSeqUpdate_UpdateGroup) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dialog.UpdateSeqUpdate_UpdateGroup{` +
		`UpdateGroup:` + fmt.Sprintf("%#v", this.UpdateGroup) + `}`}, ", ")
	return s
}
func (this *UpdateSeqUpdate_UpdateGroupMemberInvited) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dialog.UpdateSeqUpdate_UpdateGroupMemberInvited{` +
		`UpdateGroupMemberInvited:` + fmt.Sprintf("%#v", this.UpdateGroupMemberInvited) + `}`}, ", ")
	return s
}
func (this *UpdateSeqUpdate_MessageReactionsUpdate) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dialog.UpdateSeqUpdate_MessageReactionsUpdate{` +
		`MessageReactionsUpdate:` + fmt.Sprintf("%#v", this.MessageReactionsUpdate) + `}`}, ", ")
	return s
}
func (this *UpdateFatSeqUpdate) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 10)
	s = append(s, "&dialog.UpdateFatSeqUpdate{")
	s = append(s, "Seq: "+fmt.Sprintf("%#v", this.Seq)+",\n")
	s = append(s, "State: "+fmt.Sprintf("%#v", this.State)+",\n")
	s = append(s, "UpdateHeader: "+fmt.Sprintf("%#v", this.UpdateHeader)+",\n")
	s = append(s, "Update: "+fmt.Sprintf("%#v", this.Update)+",\n")
	if this.Users != nil {
		s = append(s, "Users: "+fmt.Sprintf("%#v", this.Users)+",\n")
	}
	if this.Groups != nil {
		s = append(s, "Groups: "+fmt.Sprintf("%#v", this.Groups)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UpdateWeakUpdate) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&dialog.UpdateWeakUpdate{")
	s = append(s, "Date: "+fmt.Sprintf("%#v", this.Date)+",\n")
	s = append(s, "UpdateHeader: "+fmt.Sprintf("%#v", this.UpdateHeader)+",\n")
	s = append(s, "Update: "+fmt.Sprintf("%#v", this.Update)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UpdateWeakFatUpdate) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&dialog.UpdateWeakFatUpdate{")
	s = append(s, "Date: "+fmt.Sprintf("%#v", this.Date)+",\n")
	s = append(s, "UpdateHeader: "+fmt.Sprintf("%#v", this.UpdateHeader)+",\n")
	s = append(s, "Update: "+fmt.Sprintf("%#v", this.Update)+",\n")
	if this.Users != nil {
		s = append(s, "Users: "+fmt.Sprintf("%#v", this.Users)+",\n")
	}
	if this.Groups != nil {
		s = append(s, "Groups: "+fmt.Sprintf("%#v", this.Groups)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UpdateSeqUpdateTooLong) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&dialog.UpdateSeqUpdateTooLong{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UpdateContainer) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&dialog.UpdateContainer{")
	s = append(s, "UpdateHeader: "+fmt.Sprintf("%#v", this.UpdateHeader)+",\n")
	s = append(s, "Update: "+fmt.Sprintf("%#v", this.Update)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UpdateCombinedUpdate) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 11)
	s = append(s, "&dialog.UpdateCombinedUpdate{")
	s = append(s, "SeqStart: "+fmt.Sprintf("%#v", this.SeqStart)+",\n")
	s = append(s, "SeqEnd: "+fmt.Sprintf("%#v", this.SeqEnd)+",\n")
	s = append(s, "State: "+fmt.Sprintf("%#v", this.State)+",\n")
	if this.Users != nil {
		s = append(s, "Users: "+fmt.Sprintf("%#v", this.Users)+",\n")
	}
	if this.Groups != nil {
		s = append(s, "Groups: "+fmt.Sprintf("%#v", this.Groups)+",\n")
	}
	if this.Updates != nil {
		s = append(s, "Updates: "+fmt.Sprintf("%#v", this.Updates)+",\n")
	}
	if this.Messages != nil {
		s = append(s, "Messages: "+fmt.Sprintf("%#v", this.Messages)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RequestGetState) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&dialog.RequestGetState{")
	s = append(s, "Optimizations: "+fmt.Sprintf("%#v", this.Optimizations)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RequestGetDifference) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&dialog.RequestGetDifference{")
	s = append(s, "Seq: "+fmt.Sprintf("%#v", this.Seq)+",\n")
	s = append(s, "State: "+fmt.Sprintf("%#v", this.State)+",\n")
	s = append(s, "Optimizations: "+fmt.Sprintf("%#v", this.Optimizations)+",\n")
	if this.ConfigHash != nil {
		s = append(s, "ConfigHash: "+fmt.Sprintf("%#v", this.ConfigHash)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ResponseGetDifference) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 13)
	s = append(s, "&dialog.ResponseGetDifference{")
	s = append(s, "Seq: "+fmt.Sprintf("%#v", this.Seq)+",\n")
	s = append(s, "State: "+fmt.Sprintf("%#v", this.State)+",\n")
	if this.Updates != nil {
		s = append(s, "Updates: "+fmt.Sprintf("%#v", this.Updates)+",\n")
	}
	if this.Messages != nil {
		s = append(s, "Messages: "+fmt.Sprintf("%#v", this.Messages)+",\n")
	}
	s = append(s, "NeedMore: "+fmt.Sprintf("%#v", this.NeedMore)+",\n")
	if this.UsersRefs != nil {
		s = append(s, "UsersRefs: "+fmt.Sprintf("%#v", this.UsersRefs)+",\n")
	}
	if this.GroupsRefs != nil {
		s = append(s, "GroupsRefs: "+fmt.Sprintf("%#v", this.GroupsRefs)+",\n")
	}
	if this.Config != nil {
		s = append(s, "Config: "+fmt.Sprintf("%#v", this.Config)+",\n")
	}
	if this.ConfigHash != nil {
		s = append(s, "ConfigHash: "+fmt.Sprintf("%#v", this.ConfigHash)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RequestGetDialogsDifference) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&dialog.RequestGetDialogsDifference{")
	s = append(s, "Clock: "+fmt.Sprintf("%#v", this.Clock)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ResponseGetDialogsDifference) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&dialog.ResponseGetDialogsDifference{")
	if this.Dialogs != nil {
		s = append(s, "Dialogs: "+fmt.Sprintf("%#v", this.Dialogs)+",\n")
	}
	if this.GroupPeers != nil {
		s = append(s, "GroupPeers: "+fmt.Sprintf("%#v", this.GroupPeers)+",\n")
	}
	if this.UserPeers != nil {
		s = append(s, "UserPeers: "+fmt.Sprintf("%#v", this.UserPeers)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GroupMembersSubset) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&dialog.GroupMembersSubset{")
	if this.GroupPeer != nil {
		s = append(s, "GroupPeer: "+fmt.Sprintf("%#v", this.GroupPeer)+",\n")
	}
	s = append(s, "MemberIds: "+fmt.Sprintf("%#v", this.MemberIds)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RequestGetReferencedEntitites) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&dialog.RequestGetReferencedEntitites{")
	if this.Users != nil {
		s = append(s, "Users: "+fmt.Sprintf("%#v", this.Users)+",\n")
	}
	if this.Mids != nil {
		s = append(s, "Mids: "+fmt.Sprintf("%#v", this.Mids)+",\n")
	}
	if this.GroupMembers != nil {
		s = append(s, "GroupMembers: "+fmt.Sprintf("%#v", this.GroupMembers)+",\n")
	}
	if this.Groups != nil {
		s = append(s, "Groups: "+fmt.Sprintf("%#v", this.Groups)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ResponseGetReferencedEntitites) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&dialog.ResponseGetReferencedEntitites{")
	if this.Users != nil {
		s = append(s, "Users: "+fmt.Sprintf("%#v", this.Users)+",\n")
	}
	if this.Groups != nil {
		s = append(s, "Groups: "+fmt.Sprintf("%#v", this.Groups)+",\n")
	}
	if this.Messages != nil {
		s = append(s, "Messages: "+fmt.Sprintf("%#v", this.Messages)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RequestGetPartialPeerInfo) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&dialog.RequestGetPartialPeerInfo{")
	if this.Users != nil {
		s = append(s, "Users: "+fmt.Sprintf("%#v", this.Users)+",\n")
	}
	if this.Groups != nil {
		s = append(s, "Groups: "+fmt.Sprintf("%#v", this.Groups)+",\n")
	}
	if this.GroupMembers != nil {
		s = append(s, "GroupMembers: "+fmt.Sprintf("%#v", this.GroupMembers)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ResponseGetPartialPeerInfo) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&dialog.ResponseGetPartialPeerInfo{")
	if this.Users != nil {
		s = append(s, "Users: "+fmt.Sprintf("%#v", this.Users)+",\n")
	}
	if this.Groups != nil {
		s = append(s, "Groups: "+fmt.Sprintf("%#v", this.Groups)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UpdateRawUpdate) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&dialog.UpdateRawUpdate{")
	if this.Type != nil {
		s = append(s, "Type: "+fmt.Sprintf("%#v", this.Type)+",\n")
	}
	s = append(s, "Bytes: "+fmt.Sprintf("%#v", this.Bytes)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UpdateEmptyUpdate) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&dialog.UpdateEmptyUpdate{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RequestSubscribeToOnline) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&dialog.RequestSubscribeToOnline{")
	if this.Users != nil {
		s = append(s, "Users: "+fmt.Sprintf("%#v", this.Users)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RequestSubscribeFromOnline) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&dialog.RequestSubscribeFromOnline{")
	if this.Users != nil {
		s = append(s, "Users: "+fmt.Sprintf("%#v", this.Users)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RequestSubscribeToGroupOnline) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&dialog.RequestSubscribeToGroupOnline{")
	if this.Groups != nil {
		s = append(s, "Groups: "+fmt.Sprintf("%#v", this.Groups)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RequestSubscribeFromGroupOnline) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&dialog.RequestSubscribeFromGroupOnline{")
	if this.Groups != nil {
		s = append(s, "Groups: "+fmt.Sprintf("%#v", this.Groups)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SeqUpdateBox) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&dialog.SeqUpdateBox{")
	s = append(s, "Seq: "+fmt.Sprintf("%#v", this.Seq)+",\n")
	s = append(s, "State: "+fmt.Sprintf("%#v", this.State)+",\n")
	if this.Update != nil {
		s = append(s, "Update: "+fmt.Sprintf("%#v", this.Update)+",\n")
	}
	if this.UnboxedUpdate != nil {
		s = append(s, "UnboxedUpdate: "+fmt.Sprintf("%#v", this.UnboxedUpdate)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *PeersList) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&dialog.PeersList{")
	if this.Peers != nil {
		s = append(s, "Peers: "+fmt.Sprintf("%#v", this.Peers)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *WeakUpdateCommand) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 12)
	s = append(s, "&dialog.WeakUpdateCommand{")
	if this.Command != nil {
		s = append(s, "Command: "+fmt.Sprintf("%#v", this.Command)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *WeakUpdateCommand_ChangeMyOnline_) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dialog.WeakUpdateCommand_ChangeMyOnline_{` +
		`ChangeMyOnline:` + fmt.Sprintf("%#v", this.ChangeMyOnline) + `}`}, ", ")
	return s
}
func (this *WeakUpdateCommand_SubscribeToOnlines) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dialog.WeakUpdateCommand_SubscribeToOnlines{` +
		`SubscribeToOnlines:` + fmt.Sprintf("%#v", this.SubscribeToOnlines) + `}`}, ", ")
	return s
}
func (this *WeakUpdateCommand_UnsubscribeFromOnlines) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dialog.WeakUpdateCommand_UnsubscribeFromOnlines{` +
		`UnsubscribeFromOnlines:` + fmt.Sprintf("%#v", this.UnsubscribeFromOnlines) + `}`}, ", ")
	return s
}
func (this *WeakUpdateCommand_UnsubscribeFromAllOnlines) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dialog.WeakUpdateCommand_UnsubscribeFromAllOnlines{` +
		`UnsubscribeFromAllOnlines:` + fmt.Sprintf("%#v", this.UnsubscribeFromAllOnlines) + `}`}, ", ")
	return s
}
func (this *WeakUpdateCommand_ChangeMyTyping_) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dialog.WeakUpdateCommand_ChangeMyTyping_{` +
		`ChangeMyTyping:` + fmt.Sprintf("%#v", this.ChangeMyTyping) + `}`}, ", ")
	return s
}
func (this *WeakUpdateCommand_SubscribeToTypings) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dialog.WeakUpdateCommand_SubscribeToTypings{` +
		`SubscribeToTypings:` + fmt.Sprintf("%#v", this.SubscribeToTypings) + `}`}, ", ")
	return s
}
func (this *WeakUpdateCommand_UnsubscribeFromTypings) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dialog.WeakUpdateCommand_UnsubscribeFromTypings{` +
		`UnsubscribeFromTypings:` + fmt.Sprintf("%#v", this.UnsubscribeFromTypings) + `}`}, ", ")
	return s
}
func (this *WeakUpdateCommand_UnsubscribeFromAllTypings) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dialog.WeakUpdateCommand_UnsubscribeFromAllTypings{` +
		`UnsubscribeFromAllTypings:` + fmt.Sprintf("%#v", this.UnsubscribeFromAllTypings) + `}`}, ", ")
	return s
}
func (this *WeakUpdateCommand_ChangeMyOnline) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&dialog.WeakUpdateCommand_ChangeMyOnline{")
	s = append(s, "Online: "+fmt.Sprintf("%#v", this.Online)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *WeakUpdateCommand_ChangeMyTyping) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&dialog.WeakUpdateCommand_ChangeMyTyping{")
	if this.Peer != nil {
		s = append(s, "Peer: "+fmt.Sprintf("%#v", this.Peer)+",\n")
	}
	s = append(s, "Type: "+fmt.Sprintf("%#v", this.Type)+",\n")
	s = append(s, "Start: "+fmt.Sprintf("%#v", this.Start)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *WeakUpdateBox) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 17)
	s = append(s, "&dialog.WeakUpdateBox{")
	if this.Updatebox != nil {
		s = append(s, "Updatebox: "+fmt.Sprintf("%#v", this.Updatebox)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *WeakUpdateBox_TypingStart) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dialog.WeakUpdateBox_TypingStart{` +
		`TypingStart:` + fmt.Sprintf("%#v", this.TypingStart) + `}`}, ", ")
	return s
}
func (this *WeakUpdateBox_TypingStop) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dialog.WeakUpdateBox_TypingStop{` +
		`TypingStop:` + fmt.Sprintf("%#v", this.TypingStop) + `}`}, ", ")
	return s
}
func (this *WeakUpdateBox_UserLastSeen) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dialog.WeakUpdateBox_UserLastSeen{` +
		`UserLastSeen:` + fmt.Sprintf("%#v", this.UserLastSeen) + `}`}, ", ")
	return s
}
func (this *WeakUpdateBox_GroupOnline) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dialog.WeakUpdateBox_GroupOnline{` +
		`GroupOnline:` + fmt.Sprintf("%#v", this.GroupOnline) + `}`}, ", ")
	return s
}
func (this *WeakUpdateBox_ForceReload) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dialog.WeakUpdateBox_ForceReload{` +
		`ForceReload:` + fmt.Sprintf("%#v", this.ForceReload) + `}`}, ", ")
	return s
}
func (this *WeakUpdateBox_PermissionsChange) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dialog.WeakUpdateBox_PermissionsChange{` +
		`PermissionsChange:` + fmt.Sprintf("%#v", this.PermissionsChange) + `}`}, ", ")
	return s
}
func (this *WeakUpdateBox_UserStatusChange) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dialog.WeakUpdateBox_UserStatusChange{` +
		`UserStatusChange:` + fmt.Sprintf("%#v", this.UserStatusChange) + `}`}, ", ")
	return s
}
func (this *WeakUpdateBox_MessageReactionUpdate) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dialog.WeakUpdateBox_MessageReactionUpdate{` +
		`MessageReactionUpdate:` + fmt.Sprintf("%#v", this.MessageReactionUpdate) + `}`}, ", ")
	return s
}
func (this *WeakUpdateBox_Message) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dialog.WeakUpdateBox_Message{` +
		`Message:` + fmt.Sprintf("%#v", this.Message) + `}`}, ", ")
	return s
}
func (this *WeakUpdateBox_MessageContentChange) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dialog.WeakUpdateBox_MessageContentChange{` +
		`MessageContentChange:` + fmt.Sprintf("%#v", this.MessageContentChange) + `}`}, ", ")
	return s
}
func (this *WeakUpdateBox_MessageRead) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dialog.WeakUpdateBox_MessageRead{` +
		`MessageRead:` + fmt.Sprintf("%#v", this.MessageRead) + `}`}, ", ")
	return s
}
func (this *WeakUpdateBox_MessageReceived) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dialog.WeakUpdateBox_MessageReceived{` +
		`MessageReceived:` + fmt.Sprintf("%#v", this.MessageReceived) + `}`}, ", ")
	return s
}
func (this *WeakUpdateBox_MessageReadByMe) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dialog.WeakUpdateBox_MessageReadByMe{` +
		`MessageReadByMe:` + fmt.Sprintf("%#v", this.MessageReadByMe) + `}`}, ", ")
	return s
}
func (this *WeakUpdateBox_UpdateForceReloadState) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&dialog.WeakUpdateBox_UpdateForceReloadState{")
	if this.Fields != nil {
		s = append(s, "Fields: "+fmt.Sprintf("%#v", this.Fields)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *WeakUpdateBox_UpdateForceReloadState_ForceReloadField) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&dialog.WeakUpdateBox_UpdateForceReloadState_ForceReloadField{")
	if this.Field != nil {
		s = append(s, "Field: "+fmt.Sprintf("%#v", this.Field)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *WeakUpdateBox_UpdateForceReloadState_ForceReloadField_ReloadDialogs) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dialog.WeakUpdateBox_UpdateForceReloadState_ForceReloadField_ReloadDialogs{` +
		`ReloadDialogs:` + fmt.Sprintf("%#v", this.ReloadDialogs) + `}`}, ", ")
	return s
}
func (this *WeakUpdateBox_UpdateForceReloadState_ForceReloadField_ReloadContacts) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dialog.WeakUpdateBox_UpdateForceReloadState_ForceReloadField_ReloadContacts{` +
		`ReloadContacts:` + fmt.Sprintf("%#v", this.ReloadContacts) + `}`}, ", ")
	return s
}
func (this *WeakUpdateBox_UpdateForceReloadState_ForceReloadField_ReloadHistory) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dialog.WeakUpdateBox_UpdateForceReloadState_ForceReloadField_ReloadHistory{` +
		`ReloadHistory:` + fmt.Sprintf("%#v", this.ReloadHistory) + `}`}, ", ")
	return s
}
func valueToGoStringSequenceAndUpdates(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// SequenceAndUpdatesClient is the client API for SequenceAndUpdates service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SequenceAndUpdatesClient interface {
	/// Get last seq number
	GetState(ctx context.Context, in *RequestGetState, opts ...grpc.CallOption) (*ResponseSeq, error)
	/// Get all update that happens after given seq number
	GetDifference(ctx context.Context, in *RequestGetDifference, opts ...grpc.CallOption) (*ResponseGetDifference, error)
	/// Load all dialogs that changed after given date
	GetDialogsDifference(ctx context.Context, in *RequestGetDialogsDifference, opts ...grpc.CallOption) (*ResponseGetDialogsDifference, error)
	/// Load some required entities
	GetReferencedEntitites(ctx context.Context, in *RequestGetReferencedEntitites, opts ...grpc.CallOption) (*ResponseGetReferencedEntitites, error)
	GetPartialPeerInfo(ctx context.Context, in *RequestGetPartialPeerInfo, opts ...grpc.CallOption) (*ResponseGetPartialPeerInfo, error)
	SubscribeToOnline(ctx context.Context, in *RequestSubscribeToOnline, opts ...grpc.CallOption) (*ResponseVoid, error)
	SubscribeFromOnline(ctx context.Context, in *RequestSubscribeFromOnline, opts ...grpc.CallOption) (*ResponseVoid, error)
	SubscribeToGroupOnline(ctx context.Context, in *RequestSubscribeToGroupOnline, opts ...grpc.CallOption) (*ResponseVoid, error)
	SubscribeFromGroupOnline(ctx context.Context, in *RequestSubscribeFromGroupOnline, opts ...grpc.CallOption) (*ResponseVoid, error)
	/// Get stream of the user's updates
	SeqUpdates(ctx context.Context, in *types.Empty, opts ...grpc.CallOption) (SequenceAndUpdates_SeqUpdatesClient, error)
	WeakUpdates(ctx context.Context, opts ...grpc.CallOption) (SequenceAndUpdates_WeakUpdatesClient, error)
}

type sequenceAndUpdatesClient struct {
	cc *grpc.ClientConn
}

func NewSequenceAndUpdatesClient(cc *grpc.ClientConn) SequenceAndUpdatesClient {
	return &sequenceAndUpdatesClient{cc}
}

func (c *sequenceAndUpdatesClient) GetState(ctx context.Context, in *RequestGetState, opts ...grpc.CallOption) (*ResponseSeq, error) {
	out := new(ResponseSeq)
	err := c.cc.Invoke(ctx, "/dialog.SequenceAndUpdates/GetState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sequenceAndUpdatesClient) GetDifference(ctx context.Context, in *RequestGetDifference, opts ...grpc.CallOption) (*ResponseGetDifference, error) {
	out := new(ResponseGetDifference)
	err := c.cc.Invoke(ctx, "/dialog.SequenceAndUpdates/GetDifference", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sequenceAndUpdatesClient) GetDialogsDifference(ctx context.Context, in *RequestGetDialogsDifference, opts ...grpc.CallOption) (*ResponseGetDialogsDifference, error) {
	out := new(ResponseGetDialogsDifference)
	err := c.cc.Invoke(ctx, "/dialog.SequenceAndUpdates/GetDialogsDifference", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sequenceAndUpdatesClient) GetReferencedEntitites(ctx context.Context, in *RequestGetReferencedEntitites, opts ...grpc.CallOption) (*ResponseGetReferencedEntitites, error) {
	out := new(ResponseGetReferencedEntitites)
	err := c.cc.Invoke(ctx, "/dialog.SequenceAndUpdates/GetReferencedEntitites", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sequenceAndUpdatesClient) GetPartialPeerInfo(ctx context.Context, in *RequestGetPartialPeerInfo, opts ...grpc.CallOption) (*ResponseGetPartialPeerInfo, error) {
	out := new(ResponseGetPartialPeerInfo)
	err := c.cc.Invoke(ctx, "/dialog.SequenceAndUpdates/GetPartialPeerInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sequenceAndUpdatesClient) SubscribeToOnline(ctx context.Context, in *RequestSubscribeToOnline, opts ...grpc.CallOption) (*ResponseVoid, error) {
	out := new(ResponseVoid)
	err := c.cc.Invoke(ctx, "/dialog.SequenceAndUpdates/SubscribeToOnline", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sequenceAndUpdatesClient) SubscribeFromOnline(ctx context.Context, in *RequestSubscribeFromOnline, opts ...grpc.CallOption) (*ResponseVoid, error) {
	out := new(ResponseVoid)
	err := c.cc.Invoke(ctx, "/dialog.SequenceAndUpdates/SubscribeFromOnline", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sequenceAndUpdatesClient) SubscribeToGroupOnline(ctx context.Context, in *RequestSubscribeToGroupOnline, opts ...grpc.CallOption) (*ResponseVoid, error) {
	out := new(ResponseVoid)
	err := c.cc.Invoke(ctx, "/dialog.SequenceAndUpdates/SubscribeToGroupOnline", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sequenceAndUpdatesClient) SubscribeFromGroupOnline(ctx context.Context, in *RequestSubscribeFromGroupOnline, opts ...grpc.CallOption) (*ResponseVoid, error) {
	out := new(ResponseVoid)
	err := c.cc.Invoke(ctx, "/dialog.SequenceAndUpdates/SubscribeFromGroupOnline", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sequenceAndUpdatesClient) SeqUpdates(ctx context.Context, in *types.Empty, opts ...grpc.CallOption) (SequenceAndUpdates_SeqUpdatesClient, error) {
	stream, err := c.cc.NewStream(ctx, &_SequenceAndUpdates_serviceDesc.Streams[0], "/dialog.SequenceAndUpdates/SeqUpdates", opts...)
	if err != nil {
		return nil, err
	}
	x := &sequenceAndUpdatesSeqUpdatesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type SequenceAndUpdates_SeqUpdatesClient interface {
	Recv() (*SeqUpdateBox, error)
	grpc.ClientStream
}

type sequenceAndUpdatesSeqUpdatesClient struct {
	grpc.ClientStream
}

func (x *sequenceAndUpdatesSeqUpdatesClient) Recv() (*SeqUpdateBox, error) {
	m := new(SeqUpdateBox)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *sequenceAndUpdatesClient) WeakUpdates(ctx context.Context, opts ...grpc.CallOption) (SequenceAndUpdates_WeakUpdatesClient, error) {
	stream, err := c.cc.NewStream(ctx, &_SequenceAndUpdates_serviceDesc.Streams[1], "/dialog.SequenceAndUpdates/WeakUpdates", opts...)
	if err != nil {
		return nil, err
	}
	x := &sequenceAndUpdatesWeakUpdatesClient{stream}
	return x, nil
}

type SequenceAndUpdates_WeakUpdatesClient interface {
	Send(*WeakUpdateCommand) error
	Recv() (*WeakUpdateBox, error)
	grpc.ClientStream
}

type sequenceAndUpdatesWeakUpdatesClient struct {
	grpc.ClientStream
}

func (x *sequenceAndUpdatesWeakUpdatesClient) Send(m *WeakUpdateCommand) error {
	return x.ClientStream.SendMsg(m)
}

func (x *sequenceAndUpdatesWeakUpdatesClient) Recv() (*WeakUpdateBox, error) {
	m := new(WeakUpdateBox)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// SequenceAndUpdatesServer is the server API for SequenceAndUpdates service.
type SequenceAndUpdatesServer interface {
	/// Get last seq number
	GetState(context.Context, *RequestGetState) (*ResponseSeq, error)
	/// Get all update that happens after given seq number
	GetDifference(context.Context, *RequestGetDifference) (*ResponseGetDifference, error)
	/// Load all dialogs that changed after given date
	GetDialogsDifference(context.Context, *RequestGetDialogsDifference) (*ResponseGetDialogsDifference, error)
	/// Load some required entities
	GetReferencedEntitites(context.Context, *RequestGetReferencedEntitites) (*ResponseGetReferencedEntitites, error)
	GetPartialPeerInfo(context.Context, *RequestGetPartialPeerInfo) (*ResponseGetPartialPeerInfo, error)
	SubscribeToOnline(context.Context, *RequestSubscribeToOnline) (*ResponseVoid, error)
	SubscribeFromOnline(context.Context, *RequestSubscribeFromOnline) (*ResponseVoid, error)
	SubscribeToGroupOnline(context.Context, *RequestSubscribeToGroupOnline) (*ResponseVoid, error)
	SubscribeFromGroupOnline(context.Context, *RequestSubscribeFromGroupOnline) (*ResponseVoid, error)
	/// Get stream of the user's updates
	SeqUpdates(*types.Empty, SequenceAndUpdates_SeqUpdatesServer) error
	WeakUpdates(SequenceAndUpdates_WeakUpdatesServer) error
}

// UnimplementedSequenceAndUpdatesServer can be embedded to have forward compatible implementations.
type UnimplementedSequenceAndUpdatesServer struct {
}

func (*UnimplementedSequenceAndUpdatesServer) GetState(ctx context.Context, req *RequestGetState) (*ResponseSeq, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetState not implemented")
}
func (*UnimplementedSequenceAndUpdatesServer) GetDifference(ctx context.Context, req *RequestGetDifference) (*ResponseGetDifference, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDifference not implemented")
}
func (*UnimplementedSequenceAndUpdatesServer) GetDialogsDifference(ctx context.Context, req *RequestGetDialogsDifference) (*ResponseGetDialogsDifference, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDialogsDifference not implemented")
}
func (*UnimplementedSequenceAndUpdatesServer) GetReferencedEntitites(ctx context.Context, req *RequestGetReferencedEntitites) (*ResponseGetReferencedEntitites, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetReferencedEntitites not implemented")
}
func (*UnimplementedSequenceAndUpdatesServer) GetPartialPeerInfo(ctx context.Context, req *RequestGetPartialPeerInfo) (*ResponseGetPartialPeerInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPartialPeerInfo not implemented")
}
func (*UnimplementedSequenceAndUpdatesServer) SubscribeToOnline(ctx context.Context, req *RequestSubscribeToOnline) (*ResponseVoid, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubscribeToOnline not implemented")
}
func (*UnimplementedSequenceAndUpdatesServer) SubscribeFromOnline(ctx context.Context, req *RequestSubscribeFromOnline) (*ResponseVoid, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubscribeFromOnline not implemented")
}
func (*UnimplementedSequenceAndUpdatesServer) SubscribeToGroupOnline(ctx context.Context, req *RequestSubscribeToGroupOnline) (*ResponseVoid, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubscribeToGroupOnline not implemented")
}
func (*UnimplementedSequenceAndUpdatesServer) SubscribeFromGroupOnline(ctx context.Context, req *RequestSubscribeFromGroupOnline) (*ResponseVoid, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubscribeFromGroupOnline not implemented")
}
func (*UnimplementedSequenceAndUpdatesServer) SeqUpdates(req *types.Empty, srv SequenceAndUpdates_SeqUpdatesServer) error {
	return status.Errorf(codes.Unimplemented, "method SeqUpdates not implemented")
}
func (*UnimplementedSequenceAndUpdatesServer) WeakUpdates(srv SequenceAndUpdates_WeakUpdatesServer) error {
	return status.Errorf(codes.Unimplemented, "method WeakUpdates not implemented")
}

func RegisterSequenceAndUpdatesServer(s *grpc.Server, srv SequenceAndUpdatesServer) {
	s.RegisterService(&_SequenceAndUpdates_serviceDesc, srv)
}

func _SequenceAndUpdates_GetState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestGetState)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SequenceAndUpdatesServer).GetState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dialog.SequenceAndUpdates/GetState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SequenceAndUpdatesServer).GetState(ctx, req.(*RequestGetState))
	}
	return interceptor(ctx, in, info, handler)
}

func _SequenceAndUpdates_GetDifference_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestGetDifference)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SequenceAndUpdatesServer).GetDifference(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dialog.SequenceAndUpdates/GetDifference",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SequenceAndUpdatesServer).GetDifference(ctx, req.(*RequestGetDifference))
	}
	return interceptor(ctx, in, info, handler)
}

func _SequenceAndUpdates_GetDialogsDifference_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestGetDialogsDifference)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SequenceAndUpdatesServer).GetDialogsDifference(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dialog.SequenceAndUpdates/GetDialogsDifference",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SequenceAndUpdatesServer).GetDialogsDifference(ctx, req.(*RequestGetDialogsDifference))
	}
	return interceptor(ctx, in, info, handler)
}

func _SequenceAndUpdates_GetReferencedEntitites_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestGetReferencedEntitites)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SequenceAndUpdatesServer).GetReferencedEntitites(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dialog.SequenceAndUpdates/GetReferencedEntitites",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SequenceAndUpdatesServer).GetReferencedEntitites(ctx, req.(*RequestGetReferencedEntitites))
	}
	return interceptor(ctx, in, info, handler)
}

func _SequenceAndUpdates_GetPartialPeerInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestGetPartialPeerInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SequenceAndUpdatesServer).GetPartialPeerInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dialog.SequenceAndUpdates/GetPartialPeerInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SequenceAndUpdatesServer).GetPartialPeerInfo(ctx, req.(*RequestGetPartialPeerInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _SequenceAndUpdates_SubscribeToOnline_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestSubscribeToOnline)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SequenceAndUpdatesServer).SubscribeToOnline(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dialog.SequenceAndUpdates/SubscribeToOnline",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SequenceAndUpdatesServer).SubscribeToOnline(ctx, req.(*RequestSubscribeToOnline))
	}
	return interceptor(ctx, in, info, handler)
}

func _SequenceAndUpdates_SubscribeFromOnline_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestSubscribeFromOnline)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SequenceAndUpdatesServer).SubscribeFromOnline(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dialog.SequenceAndUpdates/SubscribeFromOnline",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SequenceAndUpdatesServer).SubscribeFromOnline(ctx, req.(*RequestSubscribeFromOnline))
	}
	return interceptor(ctx, in, info, handler)
}

func _SequenceAndUpdates_SubscribeToGroupOnline_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestSubscribeToGroupOnline)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SequenceAndUpdatesServer).SubscribeToGroupOnline(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dialog.SequenceAndUpdates/SubscribeToGroupOnline",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SequenceAndUpdatesServer).SubscribeToGroupOnline(ctx, req.(*RequestSubscribeToGroupOnline))
	}
	return interceptor(ctx, in, info, handler)
}

func _SequenceAndUpdates_SubscribeFromGroupOnline_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestSubscribeFromGroupOnline)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SequenceAndUpdatesServer).SubscribeFromGroupOnline(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dialog.SequenceAndUpdates/SubscribeFromGroupOnline",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SequenceAndUpdatesServer).SubscribeFromGroupOnline(ctx, req.(*RequestSubscribeFromGroupOnline))
	}
	return interceptor(ctx, in, info, handler)
}

func _SequenceAndUpdates_SeqUpdates_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(types.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SequenceAndUpdatesServer).SeqUpdates(m, &sequenceAndUpdatesSeqUpdatesServer{stream})
}

type SequenceAndUpdates_SeqUpdatesServer interface {
	Send(*SeqUpdateBox) error
	grpc.ServerStream
}

type sequenceAndUpdatesSeqUpdatesServer struct {
	grpc.ServerStream
}

func (x *sequenceAndUpdatesSeqUpdatesServer) Send(m *SeqUpdateBox) error {
	return x.ServerStream.SendMsg(m)
}

func _SequenceAndUpdates_WeakUpdates_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(SequenceAndUpdatesServer).WeakUpdates(&sequenceAndUpdatesWeakUpdatesServer{stream})
}

type SequenceAndUpdates_WeakUpdatesServer interface {
	Send(*WeakUpdateBox) error
	Recv() (*WeakUpdateCommand, error)
	grpc.ServerStream
}

type sequenceAndUpdatesWeakUpdatesServer struct {
	grpc.ServerStream
}

func (x *sequenceAndUpdatesWeakUpdatesServer) Send(m *WeakUpdateBox) error {
	return x.ServerStream.SendMsg(m)
}

func (x *sequenceAndUpdatesWeakUpdatesServer) Recv() (*WeakUpdateCommand, error) {
	m := new(WeakUpdateCommand)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _SequenceAndUpdates_serviceDesc = grpc.ServiceDesc{
	ServiceName: "dialog.SequenceAndUpdates",
	HandlerType: (*SequenceAndUpdatesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetState",
			Handler:    _SequenceAndUpdates_GetState_Handler,
		},
		{
			MethodName: "GetDifference",
			Handler:    _SequenceAndUpdates_GetDifference_Handler,
		},
		{
			MethodName: "GetDialogsDifference",
			Handler:    _SequenceAndUpdates_GetDialogsDifference_Handler,
		},
		{
			MethodName: "GetReferencedEntitites",
			Handler:    _SequenceAndUpdates_GetReferencedEntitites_Handler,
		},
		{
			MethodName: "GetPartialPeerInfo",
			Handler:    _SequenceAndUpdates_GetPartialPeerInfo_Handler,
		},
		{
			MethodName: "SubscribeToOnline",
			Handler:    _SequenceAndUpdates_SubscribeToOnline_Handler,
		},
		{
			MethodName: "SubscribeFromOnline",
			Handler:    _SequenceAndUpdates_SubscribeFromOnline_Handler,
		},
		{
			MethodName: "SubscribeToGroupOnline",
			Handler:    _SequenceAndUpdates_SubscribeToGroupOnline_Handler,
		},
		{
			MethodName: "SubscribeFromGroupOnline",
			Handler:    _SequenceAndUpdates_SubscribeFromGroupOnline_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SeqUpdates",
			Handler:       _SequenceAndUpdates_SeqUpdates_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "WeakUpdates",
			Handler:       _SequenceAndUpdates_WeakUpdates_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "sequence_and_updates.proto",
}

func (m *UpdateSeqUpdate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateSeqUpdate) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateSeqUpdate) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Update != nil {
		{
			size := m.Update.Size()
			i -= size
			if _, err := m.Update.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.UpdateHeader != 0 {
		i = encodeVarintSequenceAndUpdates(dAtA, i, uint64(m.UpdateHeader))
		i--
		dAtA[i] = 0x18
	}
	if len(m.State) > 0 {
		i -= len(m.State)
		copy(dAtA[i:], m.State)
		i = encodeVarintSequenceAndUpdates(dAtA, i, uint64(len(m.State)))
		i--
		dAtA[i] = 0x12
	}
	if m.Seq != 0 {
		i = encodeVarintSequenceAndUpdates(dAtA, i, uint64(m.Seq))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *UpdateSeqUpdate_UpdateForceReloadState) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateSeqUpdate_UpdateForceReloadState) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.UpdateForceReloadState != nil {
		{
			size, err := m.UpdateForceReloadState.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSequenceAndUpdates(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *UpdateSeqUpdate_UpdateUserAvatarChanged) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateSeqUpdate_UpdateUserAvatarChanged) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.UpdateUserAvatarChanged != nil {
		{
			size, err := m.UpdateUserAvatarChanged.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSequenceAndUpdates(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	return len(dAtA) - i, nil
}
func (m *UpdateSeqUpdate_UpdateUserNameChanged) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateSeqUpdate_UpdateUserNameChanged) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.UpdateUserNameChanged != nil {
		{
			size, err := m.UpdateUserNameChanged.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSequenceAndUpdates(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	return len(dAtA) - i, nil
}
func (m *UpdateSeqUpdate_UpdateUserLocalNameChanged) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateSeqUpdate_UpdateUserLocalNameChanged) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.UpdateUserLocalNameChanged != nil {
		{
			size, err := m.UpdateUserLocalNameChanged.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSequenceAndUpdates(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	return len(dAtA) - i, nil
}
func (m *UpdateSeqUpdate_UpdateUserContactsChanged) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateSeqUpdate_UpdateUserContactsChanged) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.UpdateUserContactsChanged != nil {
		{
			size, err := m.UpdateUserContactsChanged.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSequenceAndUpdates(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	return len(dAtA) - i, nil
}
func (m *UpdateSeqUpdate_UpdateUserNickChanged) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateSeqUpdate_UpdateUserNickChanged) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.UpdateUserNickChanged != nil {
		{
			size, err := m.UpdateUserNickChanged.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSequenceAndUpdates(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	return len(dAtA) - i, nil
}
func (m *UpdateSeqUpdate_UpdateUserAboutChanged) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateSeqUpdate_UpdateUserAboutChanged) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.UpdateUserAboutChanged != nil {
		{
			size, err := m.UpdateUserAboutChanged.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSequenceAndUpdates(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x52
	}
	return len(dAtA) - i, nil
}
func (m *UpdateSeqUpdate_UpdateUserPreferredLanguagesChanged) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateSeqUpdate_UpdateUserPreferredLanguagesChanged) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.UpdateUserPreferredLanguagesChanged != nil {
		{
			size, err := m.UpdateUserPreferredLanguagesChanged.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSequenceAndUpdates(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5a
	}
	return len(dAtA) - i, nil
}
func (m *UpdateSeqUpdate_UpdateUserTimeZoneChanged) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateSeqUpdate_UpdateUserTimeZoneChanged) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.UpdateUserTimeZoneChanged != nil {
		{
			size, err := m.UpdateUserTimeZoneChanged.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSequenceAndUpdates(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x62
	}
	return len(dAtA) - i, nil
}
func (m *UpdateSeqUpdate_UpdateUserBotCommandsChanged) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateSeqUpdate_UpdateUserBotCommandsChanged) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.UpdateUserBotCommandsChanged != nil {
		{
			size, err := m.UpdateUserBotCommandsChanged.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSequenceAndUpdates(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6a
	}
	return len(dAtA) - i, nil
}
func (m *UpdateSeqUpdate_UpdateUserExtChanged) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateSeqUpdate_UpdateUserExtChanged) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.UpdateUserExtChanged != nil {
		{
			size, err := m.UpdateUserExtChanged.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSequenceAndUpdates(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x72
	}
	return len(dAtA) - i, nil
}
func (m *UpdateSeqUpdate_UpdateUserFullExtChanged) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateSeqUpdate_UpdateUserFullExtChanged) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.UpdateUserFullExtChanged != nil {
		{
			size, err := m.UpdateUserFullExtChanged.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSequenceAndUpdates(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x7a
	}
	return len(dAtA) - i, nil
}
func (m *UpdateSeqUpdate_UpdateUserSexChanged) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateSeqUpdate_UpdateUserSexChanged) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.UpdateUserSexChanged != nil {
		{
			size, err := m.UpdateUserSexChanged.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSequenceAndUpdates(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x82
	}
	return len(dAtA) - i, nil
}
func (m *UpdateSeqUpdate_UpdateUserCustomProfileChanged) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateSeqUpdate_UpdateUserCustomProfileChanged) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.UpdateUserCustomProfileChanged != nil {
		{
			size, err := m.UpdateUserCustomProfileChanged.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSequenceAndUpdates(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x8a
	}
	return len(dAtA) - i, nil
}
func (m *UpdateSeqUpdate_UpdateUserStatusChanged) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateSeqUpdate_UpdateUserStatusChanged) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.UpdateUserStatusChanged != nil {
		{
			size, err := m.UpdateUserStatusChanged.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSequenceAndUpdates(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x92
	}
	return len(dAtA) - i, nil
}
func (m *UpdateSeqUpdate_UpdateContactRegistered) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateSeqUpdate_UpdateContactRegistered) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.UpdateContactRegistered != nil {
		{
			size, err := m.UpdateContactRegistered.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSequenceAndUpdates(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x9a
	}
	return len(dAtA) - i, nil
}
func (m *UpdateSeqUpdate_UpdateContactsAdded) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateSeqUpdate_UpdateContactsAdded) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.UpdateContactsAdded != nil {
		{
			size, err := m.UpdateContactsAdded.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSequenceAndUpdates(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa2
	}
	return len(dAtA) - i, nil
}
func (m *UpdateSeqUpdate_UpdateContactsAddTaskSuspended) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateSeqUpdate_UpdateContactsAddTaskSuspended) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.UpdateContactsAddTaskSuspended != nil {
		{
			size, err := m.UpdateContactsAddTaskSuspended.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSequenceAndUpdates(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xaa
	}
	return len(dAtA) - i, nil
}
func (m *UpdateSeqUpdate_UpdateContactsRemoved) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateSeqUpdate_UpdateContactsRemoved) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.UpdateContactsRemoved != nil {
		{
			size, err := m.UpdateContactsRemoved.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSequenceAndUpdates(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xb2
	}
	return len(dAtA) - i, nil
}
func (m *UpdateSeqUpdate_UpdateUserBlocked) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateSeqUpdate_UpdateUserBlocked) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.UpdateUserBlocked != nil {
		{
			size, err := m.UpdateUserBlocked.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSequenceAndUpdates(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xba
	}
	return len(dAtA) - i, nil
}
func (m *UpdateSeqUpdate_UpdateUserUnblocked) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateSeqUpdate_UpdateUserUnblocked) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.UpdateUserUnblocked != nil {
		{
			size, err := m.UpdateUserUnblocked.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSequenceAndUpdates(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xc2
	}
	return len(dAtA) - i, nil
}
func (m *UpdateSeqUpdate_UpdateInteractiveMediaEvent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateSeqUpdate_UpdateInteractiveMediaEvent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.UpdateInteractiveMediaEvent != nil {
		{
			size, err := m.UpdateInteractiveMediaEvent.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSequenceAndUpdates(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xca
	}
	return len(dAtA) - i, nil
}
func (m *UpdateSeqUpdate_UpdateMessage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateSeqUpdate_UpdateMessage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.UpdateMessage != nil {
		{
			size, err := m.UpdateMessage.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSequenceAndUpdates(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xd2
	}
	return len(dAtA) - i, nil
}
func (m *UpdateSeqUpdate_UpdateMessageContentChanged) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateSeqUpdate_UpdateMessageContentChanged) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.UpdateMessageContentChanged != nil {
		{
			size, err := m.UpdateMessageContentChanged.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSequenceAndUpdates(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xda
	}
	return len(dAtA) - i, nil
}
func (m *UpdateSeqUpdate_UpdateMessageSent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateSeqUpdate_UpdateMessageSent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.UpdateMessageSent != nil {
		{
			size, err := m.UpdateMessageSent.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSequenceAndUpdates(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xe2
	}
	return len(dAtA) - i, nil
}
func (m *UpdateSeqUpdate_UpdateMessageReceived) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateSeqUpdate_UpdateMessageReceived) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.UpdateMessageReceived != nil {
		{
			size, err := m.UpdateMessageReceived.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSequenceAndUpdates(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xea
	}
	return len(dAtA) - i, nil
}
func (m *UpdateSeqUpdate_UpdateMessageRead) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateSeqUpdate_UpdateMessageRead) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.UpdateMessageRead != nil {
		{
			size, err := m.UpdateMessageRead.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSequenceAndUpdates(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xf2
	}
	return len(dAtA) - i, nil
}
func (m *UpdateSeqUpdate_UpdateMessageReadByMe) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateSeqUpdate_UpdateMessageReadByMe) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.UpdateMessageReadByMe != nil {
		{
			size, err := m.UpdateMessageReadByMe.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSequenceAndUpdates(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xfa
	}
	return len(dAtA) - i, nil
}
func (m *UpdateSeqUpdate_UpdateMessageDelete) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateSeqUpdate_UpdateMessageDelete) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.UpdateMessageDelete != nil {
		{
			size, err := m.UpdateMessageDelete.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSequenceAndUpdates(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0x82
	}
	return len(dAtA) - i, nil
}
func (m *UpdateSeqUpdate_UpdateChatClear) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateSeqUpdate_UpdateChatClear) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.UpdateChatClear != nil {
		{
			size, err := m.UpdateChatClear.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSequenceAndUpdates(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0x8a
	}
	return len(dAtA) - i, nil
}
func (m *UpdateSeqUpdate_UpdateChatDelete) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateSeqUpdate_UpdateChatDelete) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.UpdateChatDelete != nil {
		{
			size, err := m.UpdateChatDelete.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSequenceAndUpdates(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0x92
	}
	return len(dAtA) - i, nil
}
func (m *UpdateSeqUpdate_UpdateChatArchive) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateSeqUpdate_UpdateChatArchive) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.UpdateChatArchive != nil {
		{
			size, err := m.UpdateChatArchive.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSequenceAndUpdates(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0x9a
	}
	return len(dAtA) - i, nil
}
func (m *UpdateSeqUpdate_UpdateChatGroupsChanged) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateSeqUpdate_UpdateChatGroupsChanged) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.UpdateChatGroupsChanged != nil {
		{
			size, err := m.UpdateChatGroupsChanged.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSequenceAndUpdates(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xa2
	}
	return len(dAtA) - i, nil
}
func (m *UpdateSeqUpdate_UpdateReactionsUpdate) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateSeqUpdate_UpdateReactionsUpdate) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.UpdateReactionsUpdate != nil {
		{
			size, err := m.UpdateReactionsUpdate.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSequenceAndUpdates(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xaa
	}
	return len(dAtA) - i, nil
}
func (m *UpdateSeqUpdate_UpdateDialogFavouriteChanged) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateSeqUpdate_UpdateDialogFavouriteChanged) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.UpdateDialogFavouriteChanged != nil {
		{
			size, err := m.UpdateDialogFavouriteChanged.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSequenceAndUpdates(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xb2
	}
	return len(dAtA) - i, nil
}
func (m *UpdateSeqUpdate_UpdatePinnedMessagesChanged) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateSeqUpdate_UpdatePinnedMessagesChanged) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.UpdatePinnedMessagesChanged != nil {
		{
			size, err := m.UpdatePinnedMessagesChanged.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSequenceAndUpdates(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xba
	}
	return len(dAtA) - i, nil
}
func (m *UpdateSeqUpdate_UpdateGroupTitleChanged) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateSeqUpdate_UpdateGroupTitleChanged) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.UpdateGroupTitleChanged != nil {
		{
			size, err := m.UpdateGroupTitleChanged.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSequenceAndUpdates(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xc2
	}
	return len(dAtA) - i, nil
}
func (m *UpdateSeqUpdate_UpdateGroupAvatarChanged) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateSeqUpdate_UpdateGroupAvatarChanged) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.UpdateGroupAvatarChanged != nil {
		{
			size, err := m.UpdateGroupAvatarChanged.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSequenceAndUpdates(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xca
	}
	return len(dAtA) - i, nil
}
func (m *UpdateSeqUpdate_UpdateGroupAboutChanged) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateSeqUpdate_UpdateGroupAboutChanged) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.UpdateGroupAboutChanged != nil {
		{
			size, err := m.UpdateGroupAboutChanged.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSequenceAndUpdates(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xda
	}
	return len(dAtA) - i, nil
}
func (m *UpdateSeqUpdate_UpdateGroupOwnerChanged) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateSeqUpdate_UpdateGroupOwnerChanged) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.UpdateGroupOwnerChanged != nil {
		{
			size, err := m.UpdateGroupOwnerChanged.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSequenceAndUpdates(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xe2
	}
	return len(dAtA) - i, nil
}
func (m *UpdateSeqUpdate_UpdateGroupMembersUpdated) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateSeqUpdate_UpdateGroupMembersUpdated) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.UpdateGroupMembersUpdated != nil {
		{
			size, err := m.UpdateGroupMembersUpdated.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSequenceAndUpdates(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0x9a
	}
	return len(dAtA) - i, nil
}
func (m *UpdateSeqUpdate_UpdateGroupMemberDiff) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateSeqUpdate_UpdateGroupMemberDiff) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.UpdateGroupMemberDiff != nil {
		{
			size, err := m.UpdateGroupMemberDiff.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSequenceAndUpdates(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xa2
	}
	return len(dAtA) - i, nil
}
func (m *UpdateSeqUpdate_UpdateGroupMembersCountChanged) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateSeqUpdate_UpdateGroupMembersCountChanged) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.UpdateGroupMembersCountChanged != nil {
		{
			size, err := m.UpdateGroupMembersCountChanged.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSequenceAndUpdates(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xaa
	}
	return len(dAtA) - i, nil
}
func (m *UpdateSeqUpdate_UpdateGroupMemberPermissionsChanged) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateSeqUpdate_UpdateGroupMemberPermissionsChanged) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.UpdateGroupMemberPermissionsChanged != nil {
		{
			size, err := m.UpdateGroupMemberPermissionsChanged.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSequenceAndUpdates(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xba
	}
	return len(dAtA) - i, nil
}
func (m *UpdateSeqUpdate_UpdateGroupInviteObsolete) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateSeqUpdate_UpdateGroupInviteObsolete) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.UpdateGroupInviteObsolete != nil {
		{
			size, err := m.UpdateGroupInviteObsolete.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSequenceAndUpdates(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xc2
	}
	return len(dAtA) - i, nil
}
func (m *UpdateSeqUpdate_UpdateGroupUserInvitedObsolete) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateSeqUpdate_UpdateGroupUserInvitedObsolete) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.UpdateGroupUserInvitedObsolete != nil {
		{
			size, err := m.UpdateGroupUserInvitedObsolete.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSequenceAndUpdates(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xca
	}
	return len(dAtA) - i, nil
}
func (m *UpdateSeqUpdate_UpdateGroupUserLeaveObsolete) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateSeqUpdate_UpdateGroupUserLeaveObsolete) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.UpdateGroupUserLeaveObsolete != nil {
		{
			size, err := m.UpdateGroupUserLeaveObsolete.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSequenceAndUpdates(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xd2
	}
	return len(dAtA) - i, nil
}
func (m *UpdateSeqUpdate_UpdateGroupUserKickObsolete) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateSeqUpdate_UpdateGroupUserKickObsolete) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.UpdateGroupUserKickObsolete != nil {
		{
			size, err := m.UpdateGroupUserKickObsolete.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSequenceAndUpdates(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xda
	}
	return len(dAtA) - i, nil
}
func (m *UpdateSeqUpdate_UpdateGroupMembersUpdateObsolete) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateSeqUpdate_UpdateGroupMembersUpdateObsolete) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.UpdateGroupMembersUpdateObsolete != nil {
		{
			size, err := m.UpdateGroupMembersUpdateObsolete.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSequenceAndUpdates(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xe2
	}
	return len(dAtA) - i, nil
}
func (m *UpdateSeqUpdate_UpdateGroupTitleChangedObsolete) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateSeqUpdate_UpdateGroupTitleChangedObsolete) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.UpdateGroupTitleChangedObsolete != nil {
		{
			size, err := m.UpdateGroupTitleChangedObsolete.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSequenceAndUpdates(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xea
	}
	return len(dAtA) - i, nil
}
func (m *UpdateSeqUpdate_UpdateGroupAboutChangedObsolete) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateSeqUpdate_UpdateGroupAboutChangedObsolete) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.UpdateGroupAboutChangedObsolete != nil {
		{
			size, err := m.UpdateGroupAboutChangedObsolete.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSequenceAndUpdates(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xfa
	}
	return len(dAtA) - i, nil
}
func (m *UpdateSeqUpdate_UpdateGroupAvatarChangedObsolete) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateSeqUpdate_UpdateGroupAvatarChangedObsolete) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.UpdateGroupAvatarChangedObsolete != nil {
		{
			size, err := m.UpdateGroupAvatarChangedObsolete.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSequenceAndUpdates(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4
		i--
		dAtA[i] = 0x82
	}
	return len(dAtA) - i, nil
}
func (m *UpdateSeqUpdate_UpdateGroupShortnameChanged) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateSeqUpdate_UpdateGroupShortnameChanged) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.UpdateGroupShortnameChanged != nil {
		{
			size, err := m.UpdateGroupShortnameChanged.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSequenceAndUpdates(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4
		i--
		dAtA[i] = 0x8a
	}
	return len(dAtA) - i, nil
}
func (m *UpdateSeqUpdate_UpdateStickerCollectionsChanged) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateSeqUpdate_UpdateStickerCollectionsChanged) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.UpdateStickerCollectionsChanged != nil {
		{
			size, err := m.UpdateStickerCollectionsChanged.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSequenceAndUpdates(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4
		i--
		dAtA[i] = 0x92
	}
	return len(dAtA) - i, nil
}
func (m *UpdateSeqUpdate_UpdateStickerPackRemoved) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateSeqUpdate_UpdateStickerPackRemoved) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.UpdateStickerPackRemoved != nil {
		{
			size, err := m.UpdateStickerPackRemoved.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSequenceAndUpdates(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4
		i--
		dAtA[i] = 0x9a
	}
	return len(dAtA) - i, nil
}
func (m *UpdateSeqUpdate_UpdateStickerPackAdded) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateSeqUpdate_UpdateStickerPackAdded) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.UpdateStickerPackAdded != nil {
		{
			size, err := m.UpdateStickerPackAdded.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSequenceAndUpdates(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4
		i--
		dAtA[i] = 0xa2
	}
	return len(dAtA) - i, nil
}
func (m *UpdateSeqUpdate_UpdatePauseNotifications) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateSeqUpdate_UpdatePauseNotifications) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.UpdatePauseNotifications != nil {
		{
			size, err := m.UpdatePauseNotifications.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSequenceAndUpdates(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4
		i--
		dAtA[i] = 0xaa
	}
	return len(dAtA) - i, nil
}
func (m *UpdateSeqUpdate_UpdateRestoreNotifications) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateSeqUpdate_UpdateRestoreNotifications) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.UpdateRestoreNotifications != nil {
		{
			size, err := m.UpdateRestoreNotifications.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSequenceAndUpdates(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4
		i--
		dAtA[i] = 0xb2
	}
	return len(dAtA) - i, nil
}
func (m *UpdateSeqUpdate_UpdateTyping) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateSeqUpdate_UpdateTyping) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.UpdateTyping != nil {
		{
			size, err := m.UpdateTyping.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSequenceAndUpdates(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4
		i--
		dAtA[i] = 0xba
	}
	return len(dAtA) - i, nil
}
func (m *UpdateSeqUpdate_UpdateTypingStop) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateSeqUpdate_UpdateTypingStop) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.UpdateTypingStop != nil {
		{
			size, err := m.UpdateTypingStop.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSequenceAndUpdates(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4
		i--
		dAtA[i] = 0xc2
	}
	return len(dAtA) - i, nil
}
func (m *UpdateSeqUpdate_UpdateUserOnline) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateSeqUpdate_UpdateUserOnline) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.UpdateUserOnline != nil {
		{
			size, err := m.UpdateUserOnline.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSequenceAndUpdates(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4
		i--
		dAtA[i] = 0xca
	}
	return len(dAtA) - i, nil
}
func (m *UpdateSeqUpdate_UpdateUserOffline) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateSeqUpdate_UpdateUserOffline) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.UpdateUserOffline != nil {
		{
			size, err := m.UpdateUserOffline.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSequenceAndUpdates(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4
		i--
		dAtA[i] = 0xd2
	}
	return len(dAtA) - i, nil
}
func (m *UpdateSeqUpdate_UpdateUserLastSeen) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateSeqUpdate_UpdateUserLastSeen) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.UpdateUserLastSeen != nil {
		{
			size, err := m.UpdateUserLastSeen.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSequenceAndUpdates(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4
		i--
		dAtA[i] = 0xda
	}
	return len(dAtA) - i, nil
}
func (m *UpdateSeqUpdate_UpdateGroupOnline) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateSeqUpdate_UpdateGroupOnline) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.UpdateGroupOnline != nil {
		{
			size, err := m.UpdateGroupOnline.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSequenceAndUpdates(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4
		i--
		dAtA[i] = 0xe2
	}
	return len(dAtA) - i, nil
}
func (m *UpdateSeqUpdate_UpdateEventBusDeviceConnected) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateSeqUpdate_UpdateEventBusDeviceConnected) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.UpdateEventBusDeviceConnected != nil {
		{
			size, err := m.UpdateEventBusDeviceConnected.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSequenceAndUpdates(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4
		i--
		dAtA[i] = 0xea
	}
	return len(dAtA) - i, nil
}
func (m *UpdateSeqUpdate_UpdateEventBusDeviceDisconnected) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateSeqUpdate_UpdateEventBusDeviceDisconnected) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.UpdateEventBusDeviceDisconnected != nil {
		{
			size, err := m.UpdateEventBusDeviceDisconnected.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSequenceAndUpdates(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4
		i--
		dAtA[i] = 0xf2
	}
	return len(dAtA) - i, nil
}
func (m *UpdateSeqUpdate_UpdateEventBusMessage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateSeqUpdate_UpdateEventBusMessage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.UpdateEventBusMessage != nil {
		{
			size, err := m.UpdateEventBusMessage.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSequenceAndUpdates(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4
		i--
		dAtA[i] = 0xfa
	}
	return len(dAtA) - i, nil
}
func (m *UpdateSeqUpdate_UpdateEventBusDisposed) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateSeqUpdate_UpdateEventBusDisposed) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.UpdateEventBusDisposed != nil {
		{
			size, err := m.UpdateEventBusDisposed.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSequenceAndUpdates(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5
		i--
		dAtA[i] = 0x82
	}
	return len(dAtA) - i, nil
}
func (m *UpdateSeqUpdate_UpdateIncomingCallDeprecated) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateSeqUpdate_UpdateIncomingCallDeprecated) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.UpdateIncomingCallDeprecated != nil {
		{
			size, err := m.UpdateIncomingCallDeprecated.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSequenceAndUpdates(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5
		i--
		dAtA[i] = 0x8a
	}
	return len(dAtA) - i, nil
}
func (m *UpdateSeqUpdate_UpdateIncomingCall) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateSeqUpdate_UpdateIncomingCall) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.UpdateIncomingCall != nil {
		{
			size, err := m.UpdateIncomingCall.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSequenceAndUpdates(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5
		i--
		dAtA[i] = 0x92
	}
	return len(dAtA) - i, nil
}
func (m *UpdateSeqUpdate_UpdateCallHandled) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateSeqUpdate_UpdateCallHandled) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.UpdateCallHandled != nil {
		{
			size, err := m.UpdateCallHandled.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSequenceAndUpdates(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5
		i--
		dAtA[i] = 0x9a
	}
	return len(dAtA) - i, nil
}
func (m *UpdateSeqUpdate_UpdateCallDisposed) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateSeqUpdate_UpdateCallDisposed) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.UpdateCallDisposed != nil {
		{
			size, err := m.UpdateCallDisposed.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSequenceAndUpdates(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5
		i--
		dAtA[i] = 0xa2
	}
	return len(dAtA) - i, nil
}
func (m *UpdateSeqUpdate_UpdateParameterChanged) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateSeqUpdate_UpdateParameterChanged) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.UpdateParameterChanged != nil {
		{
			size, err := m.UpdateParameterChanged.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSequenceAndUpdates(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5
		i--
		dAtA[i] = 0xaa
	}
	return len(dAtA) - i, nil
}
func (m *UpdateSeqUpdate_UpdateRawUpdate) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateSeqUpdate_UpdateRawUpdate) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.UpdateRawUpdate != nil {
		{
			size, err := m.UpdateRawUpdate.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSequenceAndUpdates(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5
		i--
		dAtA[i] = 0xb2
	}
	return len(dAtA) - i, nil
}
func (m *UpdateSeqUpdate_UpdateEmptyUpdate) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateSeqUpdate_UpdateEmptyUpdate) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.UpdateEmptyUpdate != nil {
		{
			size, err := m.UpdateEmptyUpdate.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSequenceAndUpdates(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5
		i--
		dAtA[i] = 0xba
	}
	return len(dAtA) - i, nil
}
func (m *UpdateSeqUpdate_UpdateCountersChanged) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateSeqUpdate_UpdateCountersChanged) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.UpdateCountersChanged != nil {
		{
			size, err := m.UpdateCountersChanged.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSequenceAndUpdates(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5
		i--
		dAtA[i] = 0xc2
	}
	return len(dAtA) - i, nil
}
func (m *UpdateSeqUpdate_UpdateConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateSeqUpdate_UpdateConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.UpdateConfig != nil {
		{
			size, err := m.UpdateConfig.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSequenceAndUpdates(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5
		i--
		dAtA[i] = 0xca
	}
	return len(dAtA) - i, nil
}
func (m *UpdateSeqUpdate_UpdateSpaceModified) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateSeqUpdate_UpdateSpaceModified) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.UpdateSpaceModified != nil {
		{
			size, err := m.UpdateSpaceModified.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSequenceAndUpdates(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5
		i--
		dAtA[i] = 0xd2
	}
	return len(dAtA) - i, nil
}
func (m *UpdateSeqUpdate_UpdateSpaceMemberModified) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateSeqUpdate_UpdateSpaceMemberModified) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.UpdateSpaceMemberModified != nil {
		{
			size, err := m.UpdateSpaceMemberModified.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSequenceAndUpdates(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5
		i--
		dAtA[i] = 0xda
	}
	return len(dAtA) - i, nil
}
func (m *UpdateSeqUpdate_UpdateMessageRejectedByHook) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateSeqUpdate_UpdateMessageRejectedByHook) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.UpdateMessageRejectedByHook != nil {
		{
			size, err := m.UpdateMessageRejectedByHook.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSequenceAndUpdates(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5
		i--
		dAtA[i] = 0xe2
	}
	return len(dAtA) - i, nil
}
func (m *UpdateSeqUpdate_UpdateMessageEditRejectedByHook) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateSeqUpdate_UpdateMessageEditRejectedByHook) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.UpdateMessageEditRejectedByHook != nil {
		{
			size, err := m.UpdateMessageEditRejectedByHook.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSequenceAndUpdates(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5
		i--
		dAtA[i] = 0xea
	}
	return len(dAtA) - i, nil
}
func (m *UpdateSeqUpdate_UpdateUser) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateSeqUpdate_UpdateUser) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.UpdateUser != nil {
		{
			size, err := m.UpdateUser.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSequenceAndUpdates(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5
		i--
		dAtA[i] = 0xf2
	}
	return len(dAtA) - i, nil
}
func (m *UpdateSeqUpdate_UpdateFeatureFlagChanged) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateSeqUpdate_UpdateFeatureFlagChanged) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.UpdateFeatureFlagChanged != nil {
		{
			size, err := m.UpdateFeatureFlagChanged.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSequenceAndUpdates(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5
		i--
		dAtA[i] = 0xfa
	}
	return len(dAtA) - i, nil
}
func (m *UpdateSeqUpdate_UpdateThreadCreated) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateSeqUpdate_UpdateThreadCreated) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.UpdateThreadCreated != nil {
		{
			size, err := m.UpdateThreadCreated.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSequenceAndUpdates(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0x82
	}
	return len(dAtA) - i, nil
}
func (m *UpdateSeqUpdate_UpdateThreadLifted) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateSeqUpdate_UpdateThreadLifted) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.UpdateThreadLifted != nil {
		{
			size, err := m.UpdateThreadLifted.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSequenceAndUpdates(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0x8a
	}
	return len(dAtA) - i, nil
}
func (m *UpdateSeqUpdate_UpdateGroup) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateSeqUpdate_UpdateGroup) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.UpdateGroup != nil {
		{
			size, err := m.UpdateGroup.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSequenceAndUpdates(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0x92
	}
	return len(dAtA) - i, nil
}
func (m *UpdateSeqUpdate_UpdateGroupMemberInvited) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateSeqUpdate_UpdateGroupMemberInvited) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.UpdateGroupMemberInvited != nil {
		{
			size, err := m.UpdateGroupMemberInvited.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSequenceAndUpdates(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0x9a
	}
	return len(dAtA) - i, nil
}
func (m *UpdateSeqUpdate_MessageReactionsUpdate) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateSeqUpdate_MessageReactionsUpdate) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.MessageReactionsUpdate != nil {
		{
			size, err := m.MessageReactionsUpdate.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSequenceAndUpdates(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xa2
	}
	return len(dAtA) - i, nil
}
func (m *UpdateFatSeqUpdate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateFatSeqUpdate) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateFatSeqUpdate) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Groups) > 0 {
		for iNdEx := len(m.Groups) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Groups[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintSequenceAndUpdates(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.Users) > 0 {
		for iNdEx := len(m.Users) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Users[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintSequenceAndUpdates(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.Update) > 0 {
		i -= len(m.Update)
		copy(dAtA[i:], m.Update)
		i = encodeVarintSequenceAndUpdates(dAtA, i, uint64(len(m.Update)))
		i--
		dAtA[i] = 0x22
	}
	if m.UpdateHeader != 0 {
		i = encodeVarintSequenceAndUpdates(dAtA, i, uint64(m.UpdateHeader))
		i--
		dAtA[i] = 0x18
	}
	if len(m.State) > 0 {
		i -= len(m.State)
		copy(dAtA[i:], m.State)
		i = encodeVarintSequenceAndUpdates(dAtA, i, uint64(len(m.State)))
		i--
		dAtA[i] = 0x12
	}
	if m.Seq != 0 {
		i = encodeVarintSequenceAndUpdates(dAtA, i, uint64(m.Seq))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *UpdateWeakUpdate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateWeakUpdate) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateWeakUpdate) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Update) > 0 {
		i -= len(m.Update)
		copy(dAtA[i:], m.Update)
		i = encodeVarintSequenceAndUpdates(dAtA, i, uint64(len(m.Update)))
		i--
		dAtA[i] = 0x1a
	}
	if m.UpdateHeader != 0 {
		i = encodeVarintSequenceAndUpdates(dAtA, i, uint64(m.UpdateHeader))
		i--
		dAtA[i] = 0x10
	}
	if m.Date != 0 {
		i = encodeVarintSequenceAndUpdates(dAtA, i, uint64(m.Date))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *UpdateWeakFatUpdate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateWeakFatUpdate) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateWeakFatUpdate) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Groups) > 0 {
		for iNdEx := len(m.Groups) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Groups[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintSequenceAndUpdates(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.Users) > 0 {
		for iNdEx := len(m.Users) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Users[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintSequenceAndUpdates(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.Update) > 0 {
		i -= len(m.Update)
		copy(dAtA[i:], m.Update)
		i = encodeVarintSequenceAndUpdates(dAtA, i, uint64(len(m.Update)))
		i--
		dAtA[i] = 0x1a
	}
	if m.UpdateHeader != 0 {
		i = encodeVarintSequenceAndUpdates(dAtA, i, uint64(m.UpdateHeader))
		i--
		dAtA[i] = 0x10
	}
	if m.Date != 0 {
		i = encodeVarintSequenceAndUpdates(dAtA, i, uint64(m.Date))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *UpdateSeqUpdateTooLong) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateSeqUpdateTooLong) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateSeqUpdateTooLong) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *UpdateContainer) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateContainer) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateContainer) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Update) > 0 {
		i -= len(m.Update)
		copy(dAtA[i:], m.Update)
		i = encodeVarintSequenceAndUpdates(dAtA, i, uint64(len(m.Update)))
		i--
		dAtA[i] = 0x12
	}
	if m.UpdateHeader != 0 {
		i = encodeVarintSequenceAndUpdates(dAtA, i, uint64(m.UpdateHeader))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *UpdateCombinedUpdate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateCombinedUpdate) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateCombinedUpdate) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Messages) > 0 {
		for iNdEx := len(m.Messages) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Messages[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintSequenceAndUpdates(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3a
		}
	}
	if len(m.Updates) > 0 {
		for iNdEx := len(m.Updates) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Updates[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintSequenceAndUpdates(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.Groups) > 0 {
		for iNdEx := len(m.Groups) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Groups[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintSequenceAndUpdates(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.Users) > 0 {
		for iNdEx := len(m.Users) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Users[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintSequenceAndUpdates(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.State) > 0 {
		i -= len(m.State)
		copy(dAtA[i:], m.State)
		i = encodeVarintSequenceAndUpdates(dAtA, i, uint64(len(m.State)))
		i--
		dAtA[i] = 0x1a
	}
	if m.SeqEnd != 0 {
		i = encodeVarintSequenceAndUpdates(dAtA, i, uint64(m.SeqEnd))
		i--
		dAtA[i] = 0x10
	}
	if m.SeqStart != 0 {
		i = encodeVarintSequenceAndUpdates(dAtA, i, uint64(m.SeqStart))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *RequestGetState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestGetState) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RequestGetState) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Optimizations) > 0 {
		dAtA90 := make([]byte, len(m.Optimizations)*10)
		var j89 int
		for _, num := range m.Optimizations {
			for num >= 1<<7 {
				dAtA90[j89] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j89++
			}
			dAtA90[j89] = uint8(num)
			j89++
		}
		i -= j89
		copy(dAtA[i:], dAtA90[:j89])
		i = encodeVarintSequenceAndUpdates(dAtA, i, uint64(j89))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RequestGetDifference) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestGetDifference) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RequestGetDifference) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ConfigHash != nil {
		{
			size, err := m.ConfigHash.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSequenceAndUpdates(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if len(m.Optimizations) > 0 {
		dAtA93 := make([]byte, len(m.Optimizations)*10)
		var j92 int
		for _, num := range m.Optimizations {
			for num >= 1<<7 {
				dAtA93[j92] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j92++
			}
			dAtA93[j92] = uint8(num)
			j92++
		}
		i -= j92
		copy(dAtA[i:], dAtA93[:j92])
		i = encodeVarintSequenceAndUpdates(dAtA, i, uint64(j92))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.State) > 0 {
		i -= len(m.State)
		copy(dAtA[i:], m.State)
		i = encodeVarintSequenceAndUpdates(dAtA, i, uint64(len(m.State)))
		i--
		dAtA[i] = 0x12
	}
	if m.Seq != 0 {
		i = encodeVarintSequenceAndUpdates(dAtA, i, uint64(m.Seq))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ResponseGetDifference) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResponseGetDifference) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ResponseGetDifference) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ConfigHash != nil {
		{
			size, err := m.ConfigHash.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSequenceAndUpdates(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5a
	}
	if m.Config != nil {
		{
			size, err := m.Config.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSequenceAndUpdates(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x52
	}
	if len(m.GroupsRefs) > 0 {
		for iNdEx := len(m.GroupsRefs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.GroupsRefs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintSequenceAndUpdates(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x4a
		}
	}
	if len(m.UsersRefs) > 0 {
		for iNdEx := len(m.UsersRefs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.UsersRefs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintSequenceAndUpdates(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x42
		}
	}
	if len(m.Messages) > 0 {
		for iNdEx := len(m.Messages) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Messages[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintSequenceAndUpdates(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3a
		}
	}
	if m.NeedMore {
		i--
		if m.NeedMore {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	if len(m.Updates) > 0 {
		for iNdEx := len(m.Updates) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Updates[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintSequenceAndUpdates(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.State) > 0 {
		i -= len(m.State)
		copy(dAtA[i:], m.State)
		i = encodeVarintSequenceAndUpdates(dAtA, i, uint64(len(m.State)))
		i--
		dAtA[i] = 0x12
	}
	if m.Seq != 0 {
		i = encodeVarintSequenceAndUpdates(dAtA, i, uint64(m.Seq))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *RequestGetDialogsDifference) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestGetDialogsDifference) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RequestGetDialogsDifference) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Clock != 0 {
		i = encodeVarintSequenceAndUpdates(dAtA, i, uint64(m.Clock))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ResponseGetDialogsDifference) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResponseGetDialogsDifference) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ResponseGetDialogsDifference) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.UserPeers) > 0 {
		for iNdEx := len(m.UserPeers) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.UserPeers[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintSequenceAndUpdates(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.GroupPeers) > 0 {
		for iNdEx := len(m.GroupPeers) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.GroupPeers[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintSequenceAndUpdates(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Dialogs) > 0 {
		for iNdEx := len(m.Dialogs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Dialogs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintSequenceAndUpdates(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *GroupMembersSubset) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GroupMembersSubset) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GroupMembersSubset) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.MemberIds) > 0 {
		dAtA97 := make([]byte, len(m.MemberIds)*10)
		var j96 int
		for _, num1 := range m.MemberIds {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA97[j96] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j96++
			}
			dAtA97[j96] = uint8(num)
			j96++
		}
		i -= j96
		copy(dAtA[i:], dAtA97[:j96])
		i = encodeVarintSequenceAndUpdates(dAtA, i, uint64(j96))
		i--
		dAtA[i] = 0x12
	}
	if m.GroupPeer != nil {
		{
			size, err := m.GroupPeer.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSequenceAndUpdates(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RequestGetReferencedEntitites) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestGetReferencedEntitites) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RequestGetReferencedEntitites) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Groups) > 0 {
		for iNdEx := len(m.Groups) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Groups[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintSequenceAndUpdates(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.GroupMembers) > 0 {
		for iNdEx := len(m.GroupMembers) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.GroupMembers[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintSequenceAndUpdates(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.Mids) > 0 {
		for iNdEx := len(m.Mids) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Mids[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintSequenceAndUpdates(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Users) > 0 {
		for iNdEx := len(m.Users) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Users[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintSequenceAndUpdates(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ResponseGetReferencedEntitites) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResponseGetReferencedEntitites) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ResponseGetReferencedEntitites) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Messages) > 0 {
		for iNdEx := len(m.Messages) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Messages[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintSequenceAndUpdates(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Groups) > 0 {
		for iNdEx := len(m.Groups) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Groups[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintSequenceAndUpdates(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Users) > 0 {
		for iNdEx := len(m.Users) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Users[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintSequenceAndUpdates(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *RequestGetPartialPeerInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestGetPartialPeerInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RequestGetPartialPeerInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.GroupMembers) > 0 {
		for iNdEx := len(m.GroupMembers) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.GroupMembers[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintSequenceAndUpdates(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Groups) > 0 {
		for iNdEx := len(m.Groups) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Groups[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintSequenceAndUpdates(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Users) > 0 {
		for iNdEx := len(m.Users) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Users[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintSequenceAndUpdates(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ResponseGetPartialPeerInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResponseGetPartialPeerInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ResponseGetPartialPeerInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Groups) > 0 {
		for iNdEx := len(m.Groups) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Groups[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintSequenceAndUpdates(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Users) > 0 {
		for iNdEx := len(m.Users) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Users[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintSequenceAndUpdates(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *UpdateRawUpdate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateRawUpdate) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateRawUpdate) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Bytes) > 0 {
		i -= len(m.Bytes)
		copy(dAtA[i:], m.Bytes)
		i = encodeVarintSequenceAndUpdates(dAtA, i, uint64(len(m.Bytes)))
		i--
		dAtA[i] = 0x12
	}
	if m.Type != nil {
		{
			size, err := m.Type.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSequenceAndUpdates(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UpdateEmptyUpdate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateEmptyUpdate) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateEmptyUpdate) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *RequestSubscribeToOnline) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestSubscribeToOnline) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RequestSubscribeToOnline) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Users) > 0 {
		for iNdEx := len(m.Users) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Users[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintSequenceAndUpdates(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *RequestSubscribeFromOnline) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestSubscribeFromOnline) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RequestSubscribeFromOnline) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Users) > 0 {
		for iNdEx := len(m.Users) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Users[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintSequenceAndUpdates(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *RequestSubscribeToGroupOnline) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestSubscribeToGroupOnline) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RequestSubscribeToGroupOnline) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Groups) > 0 {
		for iNdEx := len(m.Groups) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Groups[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintSequenceAndUpdates(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *RequestSubscribeFromGroupOnline) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestSubscribeFromGroupOnline) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RequestSubscribeFromGroupOnline) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Groups) > 0 {
		for iNdEx := len(m.Groups) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Groups[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintSequenceAndUpdates(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *SeqUpdateBox) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SeqUpdateBox) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SeqUpdateBox) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.UnboxedUpdate != nil {
		{
			size, err := m.UnboxedUpdate.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSequenceAndUpdates(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.Update != nil {
		{
			size, err := m.Update.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSequenceAndUpdates(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.State) > 0 {
		i -= len(m.State)
		copy(dAtA[i:], m.State)
		i = encodeVarintSequenceAndUpdates(dAtA, i, uint64(len(m.State)))
		i--
		dAtA[i] = 0x12
	}
	if m.Seq != 0 {
		i = encodeVarintSequenceAndUpdates(dAtA, i, uint64(m.Seq))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *PeersList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PeersList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PeersList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Peers) > 0 {
		for iNdEx := len(m.Peers) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Peers[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintSequenceAndUpdates(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *WeakUpdateCommand) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WeakUpdateCommand) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WeakUpdateCommand) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Command != nil {
		{
			size := m.Command.Size()
			i -= size
			if _, err := m.Command.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *WeakUpdateCommand_ChangeMyOnline_) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WeakUpdateCommand_ChangeMyOnline_) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ChangeMyOnline != nil {
		{
			size, err := m.ChangeMyOnline.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSequenceAndUpdates(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}
func (m *WeakUpdateCommand_SubscribeToOnlines) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WeakUpdateCommand_SubscribeToOnlines) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.SubscribeToOnlines != nil {
		{
			size, err := m.SubscribeToOnlines.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSequenceAndUpdates(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *WeakUpdateCommand_UnsubscribeFromOnlines) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WeakUpdateCommand_UnsubscribeFromOnlines) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.UnsubscribeFromOnlines != nil {
		{
			size, err := m.UnsubscribeFromOnlines.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSequenceAndUpdates(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *WeakUpdateCommand_UnsubscribeFromAllOnlines) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WeakUpdateCommand_UnsubscribeFromAllOnlines) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.UnsubscribeFromAllOnlines != nil {
		{
			size, err := m.UnsubscribeFromAllOnlines.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSequenceAndUpdates(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *WeakUpdateCommand_ChangeMyTyping_) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WeakUpdateCommand_ChangeMyTyping_) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ChangeMyTyping != nil {
		{
			size, err := m.ChangeMyTyping.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSequenceAndUpdates(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	return len(dAtA) - i, nil
}
func (m *WeakUpdateCommand_SubscribeToTypings) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WeakUpdateCommand_SubscribeToTypings) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.SubscribeToTypings != nil {
		{
			size, err := m.SubscribeToTypings.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSequenceAndUpdates(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	return len(dAtA) - i, nil
}
func (m *WeakUpdateCommand_UnsubscribeFromTypings) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WeakUpdateCommand_UnsubscribeFromTypings) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.UnsubscribeFromTypings != nil {
		{
			size, err := m.UnsubscribeFromTypings.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSequenceAndUpdates(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	return len(dAtA) - i, nil
}
func (m *WeakUpdateCommand_UnsubscribeFromAllTypings) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WeakUpdateCommand_UnsubscribeFromAllTypings) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.UnsubscribeFromAllTypings != nil {
		{
			size, err := m.UnsubscribeFromAllTypings.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSequenceAndUpdates(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	return len(dAtA) - i, nil
}
func (m *WeakUpdateCommand_ChangeMyOnline) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WeakUpdateCommand_ChangeMyOnline) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WeakUpdateCommand_ChangeMyOnline) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Online {
		i--
		if m.Online {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *WeakUpdateCommand_ChangeMyTyping) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WeakUpdateCommand_ChangeMyTyping) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WeakUpdateCommand_ChangeMyTyping) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Start {
		i--
		if m.Start {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.Type != 0 {
		i = encodeVarintSequenceAndUpdates(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x10
	}
	if m.Peer != nil {
		{
			size, err := m.Peer.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSequenceAndUpdates(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *WeakUpdateBox) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WeakUpdateBox) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WeakUpdateBox) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Updatebox != nil {
		{
			size := m.Updatebox.Size()
			i -= size
			if _, err := m.Updatebox.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *WeakUpdateBox_TypingStart) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WeakUpdateBox_TypingStart) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.TypingStart != nil {
		{
			size, err := m.TypingStart.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSequenceAndUpdates(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}
func (m *WeakUpdateBox_TypingStop) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WeakUpdateBox_TypingStop) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.TypingStop != nil {
		{
			size, err := m.TypingStop.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSequenceAndUpdates(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *WeakUpdateBox_UserLastSeen) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WeakUpdateBox_UserLastSeen) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.UserLastSeen != nil {
		{
			size, err := m.UserLastSeen.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSequenceAndUpdates(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *WeakUpdateBox_GroupOnline) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WeakUpdateBox_GroupOnline) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.GroupOnline != nil {
		{
			size, err := m.GroupOnline.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSequenceAndUpdates(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *WeakUpdateBox_ForceReload) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WeakUpdateBox_ForceReload) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ForceReload != nil {
		{
			size, err := m.ForceReload.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSequenceAndUpdates(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	return len(dAtA) - i, nil
}
func (m *WeakUpdateBox_PermissionsChange) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WeakUpdateBox_PermissionsChange) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.PermissionsChange != nil {
		{
			size, err := m.PermissionsChange.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSequenceAndUpdates(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	return len(dAtA) - i, nil
}
func (m *WeakUpdateBox_UserStatusChange) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WeakUpdateBox_UserStatusChange) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.UserStatusChange != nil {
		{
			size, err := m.UserStatusChange.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSequenceAndUpdates(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	return len(dAtA) - i, nil
}
func (m *WeakUpdateBox_MessageReactionUpdate) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WeakUpdateBox_MessageReactionUpdate) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.MessageReactionUpdate != nil {
		{
			size, err := m.MessageReactionUpdate.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSequenceAndUpdates(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	return len(dAtA) - i, nil
}
func (m *WeakUpdateBox_Message) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WeakUpdateBox_Message) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Message != nil {
		{
			size, err := m.Message.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSequenceAndUpdates(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	return len(dAtA) - i, nil
}
func (m *WeakUpdateBox_MessageContentChange) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WeakUpdateBox_MessageContentChange) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.MessageContentChange != nil {
		{
			size, err := m.MessageContentChange.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSequenceAndUpdates(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x52
	}
	return len(dAtA) - i, nil
}
func (m *WeakUpdateBox_MessageRead) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WeakUpdateBox_MessageRead) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.MessageRead != nil {
		{
			size, err := m.MessageRead.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSequenceAndUpdates(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5a
	}
	return len(dAtA) - i, nil
}
func (m *WeakUpdateBox_MessageReceived) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WeakUpdateBox_MessageReceived) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.MessageReceived != nil {
		{
			size, err := m.MessageReceived.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSequenceAndUpdates(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x62
	}
	return len(dAtA) - i, nil
}
func (m *WeakUpdateBox_MessageReadByMe) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WeakUpdateBox_MessageReadByMe) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.MessageReadByMe != nil {
		{
			size, err := m.MessageReadByMe.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSequenceAndUpdates(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6a
	}
	return len(dAtA) - i, nil
}
func (m *WeakUpdateBox_UpdateForceReloadState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WeakUpdateBox_UpdateForceReloadState) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WeakUpdateBox_UpdateForceReloadState) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Fields) > 0 {
		for iNdEx := len(m.Fields) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Fields[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintSequenceAndUpdates(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *WeakUpdateBox_UpdateForceReloadState_ForceReloadField) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WeakUpdateBox_UpdateForceReloadState_ForceReloadField) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WeakUpdateBox_UpdateForceReloadState_ForceReloadField) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Field != nil {
		{
			size := m.Field.Size()
			i -= size
			if _, err := m.Field.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *WeakUpdateBox_UpdateForceReloadState_ForceReloadField_ReloadDialogs) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WeakUpdateBox_UpdateForceReloadState_ForceReloadField_ReloadDialogs) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ReloadDialogs != nil {
		{
			size, err := m.ReloadDialogs.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSequenceAndUpdates(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}
func (m *WeakUpdateBox_UpdateForceReloadState_ForceReloadField_ReloadContacts) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WeakUpdateBox_UpdateForceReloadState_ForceReloadField_ReloadContacts) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ReloadContacts != nil {
		{
			size, err := m.ReloadContacts.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSequenceAndUpdates(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *WeakUpdateBox_UpdateForceReloadState_ForceReloadField_ReloadHistory) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WeakUpdateBox_UpdateForceReloadState_ForceReloadField_ReloadHistory) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ReloadHistory != nil {
		{
			size, err := m.ReloadHistory.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSequenceAndUpdates(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func encodeVarintSequenceAndUpdates(dAtA []byte, offset int, v uint64) int {
	offset -= sovSequenceAndUpdates(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *UpdateSeqUpdate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Seq != 0 {
		n += 1 + sovSequenceAndUpdates(uint64(m.Seq))
	}
	l = len(m.State)
	if l > 0 {
		n += 1 + l + sovSequenceAndUpdates(uint64(l))
	}
	if m.UpdateHeader != 0 {
		n += 1 + sovSequenceAndUpdates(uint64(m.UpdateHeader))
	}
	if m.Update != nil {
		n += m.Update.Size()
	}
	return n
}

func (m *UpdateSeqUpdate_UpdateForceReloadState) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UpdateForceReloadState != nil {
		l = m.UpdateForceReloadState.Size()
		n += 1 + l + sovSequenceAndUpdates(uint64(l))
	}
	return n
}
func (m *UpdateSeqUpdate_UpdateUserAvatarChanged) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UpdateUserAvatarChanged != nil {
		l = m.UpdateUserAvatarChanged.Size()
		n += 1 + l + sovSequenceAndUpdates(uint64(l))
	}
	return n
}
func (m *UpdateSeqUpdate_UpdateUserNameChanged) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UpdateUserNameChanged != nil {
		l = m.UpdateUserNameChanged.Size()
		n += 1 + l + sovSequenceAndUpdates(uint64(l))
	}
	return n
}
func (m *UpdateSeqUpdate_UpdateUserLocalNameChanged) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UpdateUserLocalNameChanged != nil {
		l = m.UpdateUserLocalNameChanged.Size()
		n += 1 + l + sovSequenceAndUpdates(uint64(l))
	}
	return n
}
func (m *UpdateSeqUpdate_UpdateUserContactsChanged) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UpdateUserContactsChanged != nil {
		l = m.UpdateUserContactsChanged.Size()
		n += 1 + l + sovSequenceAndUpdates(uint64(l))
	}
	return n
}
func (m *UpdateSeqUpdate_UpdateUserNickChanged) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UpdateUserNickChanged != nil {
		l = m.UpdateUserNickChanged.Size()
		n += 1 + l + sovSequenceAndUpdates(uint64(l))
	}
	return n
}
func (m *UpdateSeqUpdate_UpdateUserAboutChanged) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UpdateUserAboutChanged != nil {
		l = m.UpdateUserAboutChanged.Size()
		n += 1 + l + sovSequenceAndUpdates(uint64(l))
	}
	return n
}
func (m *UpdateSeqUpdate_UpdateUserPreferredLanguagesChanged) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UpdateUserPreferredLanguagesChanged != nil {
		l = m.UpdateUserPreferredLanguagesChanged.Size()
		n += 1 + l + sovSequenceAndUpdates(uint64(l))
	}
	return n
}
func (m *UpdateSeqUpdate_UpdateUserTimeZoneChanged) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UpdateUserTimeZoneChanged != nil {
		l = m.UpdateUserTimeZoneChanged.Size()
		n += 1 + l + sovSequenceAndUpdates(uint64(l))
	}
	return n
}
func (m *UpdateSeqUpdate_UpdateUserBotCommandsChanged) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UpdateUserBotCommandsChanged != nil {
		l = m.UpdateUserBotCommandsChanged.Size()
		n += 1 + l + sovSequenceAndUpdates(uint64(l))
	}
	return n
}
func (m *UpdateSeqUpdate_UpdateUserExtChanged) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UpdateUserExtChanged != nil {
		l = m.UpdateUserExtChanged.Size()
		n += 1 + l + sovSequenceAndUpdates(uint64(l))
	}
	return n
}
func (m *UpdateSeqUpdate_UpdateUserFullExtChanged) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UpdateUserFullExtChanged != nil {
		l = m.UpdateUserFullExtChanged.Size()
		n += 1 + l + sovSequenceAndUpdates(uint64(l))
	}
	return n
}
func (m *UpdateSeqUpdate_UpdateUserSexChanged) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UpdateUserSexChanged != nil {
		l = m.UpdateUserSexChanged.Size()
		n += 2 + l + sovSequenceAndUpdates(uint64(l))
	}
	return n
}
func (m *UpdateSeqUpdate_UpdateUserCustomProfileChanged) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UpdateUserCustomProfileChanged != nil {
		l = m.UpdateUserCustomProfileChanged.Size()
		n += 2 + l + sovSequenceAndUpdates(uint64(l))
	}
	return n
}
func (m *UpdateSeqUpdate_UpdateUserStatusChanged) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UpdateUserStatusChanged != nil {
		l = m.UpdateUserStatusChanged.Size()
		n += 2 + l + sovSequenceAndUpdates(uint64(l))
	}
	return n
}
func (m *UpdateSeqUpdate_UpdateContactRegistered) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UpdateContactRegistered != nil {
		l = m.UpdateContactRegistered.Size()
		n += 2 + l + sovSequenceAndUpdates(uint64(l))
	}
	return n
}
func (m *UpdateSeqUpdate_UpdateContactsAdded) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UpdateContactsAdded != nil {
		l = m.UpdateContactsAdded.Size()
		n += 2 + l + sovSequenceAndUpdates(uint64(l))
	}
	return n
}
func (m *UpdateSeqUpdate_UpdateContactsAddTaskSuspended) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UpdateContactsAddTaskSuspended != nil {
		l = m.UpdateContactsAddTaskSuspended.Size()
		n += 2 + l + sovSequenceAndUpdates(uint64(l))
	}
	return n
}
func (m *UpdateSeqUpdate_UpdateContactsRemoved) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UpdateContactsRemoved != nil {
		l = m.UpdateContactsRemoved.Size()
		n += 2 + l + sovSequenceAndUpdates(uint64(l))
	}
	return n
}
func (m *UpdateSeqUpdate_UpdateUserBlocked) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UpdateUserBlocked != nil {
		l = m.UpdateUserBlocked.Size()
		n += 2 + l + sovSequenceAndUpdates(uint64(l))
	}
	return n
}
func (m *UpdateSeqUpdate_UpdateUserUnblocked) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UpdateUserUnblocked != nil {
		l = m.UpdateUserUnblocked.Size()
		n += 2 + l + sovSequenceAndUpdates(uint64(l))
	}
	return n
}
func (m *UpdateSeqUpdate_UpdateInteractiveMediaEvent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UpdateInteractiveMediaEvent != nil {
		l = m.UpdateInteractiveMediaEvent.Size()
		n += 2 + l + sovSequenceAndUpdates(uint64(l))
	}
	return n
}
func (m *UpdateSeqUpdate_UpdateMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UpdateMessage != nil {
		l = m.UpdateMessage.Size()
		n += 2 + l + sovSequenceAndUpdates(uint64(l))
	}
	return n
}
func (m *UpdateSeqUpdate_UpdateMessageContentChanged) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UpdateMessageContentChanged != nil {
		l = m.UpdateMessageContentChanged.Size()
		n += 2 + l + sovSequenceAndUpdates(uint64(l))
	}
	return n
}
func (m *UpdateSeqUpdate_UpdateMessageSent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UpdateMessageSent != nil {
		l = m.UpdateMessageSent.Size()
		n += 2 + l + sovSequenceAndUpdates(uint64(l))
	}
	return n
}
func (m *UpdateSeqUpdate_UpdateMessageReceived) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UpdateMessageReceived != nil {
		l = m.UpdateMessageReceived.Size()
		n += 2 + l + sovSequenceAndUpdates(uint64(l))
	}
	return n
}
func (m *UpdateSeqUpdate_UpdateMessageRead) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UpdateMessageRead != nil {
		l = m.UpdateMessageRead.Size()
		n += 2 + l + sovSequenceAndUpdates(uint64(l))
	}
	return n
}
func (m *UpdateSeqUpdate_UpdateMessageReadByMe) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UpdateMessageReadByMe != nil {
		l = m.UpdateMessageReadByMe.Size()
		n += 2 + l + sovSequenceAndUpdates(uint64(l))
	}
	return n
}
func (m *UpdateSeqUpdate_UpdateMessageDelete) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UpdateMessageDelete != nil {
		l = m.UpdateMessageDelete.Size()
		n += 2 + l + sovSequenceAndUpdates(uint64(l))
	}
	return n
}
func (m *UpdateSeqUpdate_UpdateChatClear) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UpdateChatClear != nil {
		l = m.UpdateChatClear.Size()
		n += 2 + l + sovSequenceAndUpdates(uint64(l))
	}
	return n
}
func (m *UpdateSeqUpdate_UpdateChatDelete) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UpdateChatDelete != nil {
		l = m.UpdateChatDelete.Size()
		n += 2 + l + sovSequenceAndUpdates(uint64(l))
	}
	return n
}
func (m *UpdateSeqUpdate_UpdateChatArchive) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UpdateChatArchive != nil {
		l = m.UpdateChatArchive.Size()
		n += 2 + l + sovSequenceAndUpdates(uint64(l))
	}
	return n
}
func (m *UpdateSeqUpdate_UpdateChatGroupsChanged) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UpdateChatGroupsChanged != nil {
		l = m.UpdateChatGroupsChanged.Size()
		n += 2 + l + sovSequenceAndUpdates(uint64(l))
	}
	return n
}
func (m *UpdateSeqUpdate_UpdateReactionsUpdate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UpdateReactionsUpdate != nil {
		l = m.UpdateReactionsUpdate.Size()
		n += 2 + l + sovSequenceAndUpdates(uint64(l))
	}
	return n
}
func (m *UpdateSeqUpdate_UpdateDialogFavouriteChanged) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UpdateDialogFavouriteChanged != nil {
		l = m.UpdateDialogFavouriteChanged.Size()
		n += 2 + l + sovSequenceAndUpdates(uint64(l))
	}
	return n
}
func (m *UpdateSeqUpdate_UpdatePinnedMessagesChanged) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UpdatePinnedMessagesChanged != nil {
		l = m.UpdatePinnedMessagesChanged.Size()
		n += 2 + l + sovSequenceAndUpdates(uint64(l))
	}
	return n
}
func (m *UpdateSeqUpdate_UpdateGroupTitleChanged) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UpdateGroupTitleChanged != nil {
		l = m.UpdateGroupTitleChanged.Size()
		n += 2 + l + sovSequenceAndUpdates(uint64(l))
	}
	return n
}
func (m *UpdateSeqUpdate_UpdateGroupAvatarChanged) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UpdateGroupAvatarChanged != nil {
		l = m.UpdateGroupAvatarChanged.Size()
		n += 2 + l + sovSequenceAndUpdates(uint64(l))
	}
	return n
}
func (m *UpdateSeqUpdate_UpdateGroupAboutChanged) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UpdateGroupAboutChanged != nil {
		l = m.UpdateGroupAboutChanged.Size()
		n += 2 + l + sovSequenceAndUpdates(uint64(l))
	}
	return n
}
func (m *UpdateSeqUpdate_UpdateGroupOwnerChanged) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UpdateGroupOwnerChanged != nil {
		l = m.UpdateGroupOwnerChanged.Size()
		n += 2 + l + sovSequenceAndUpdates(uint64(l))
	}
	return n
}
func (m *UpdateSeqUpdate_UpdateGroupMembersUpdated) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UpdateGroupMembersUpdated != nil {
		l = m.UpdateGroupMembersUpdated.Size()
		n += 2 + l + sovSequenceAndUpdates(uint64(l))
	}
	return n
}
func (m *UpdateSeqUpdate_UpdateGroupMemberDiff) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UpdateGroupMemberDiff != nil {
		l = m.UpdateGroupMemberDiff.Size()
		n += 2 + l + sovSequenceAndUpdates(uint64(l))
	}
	return n
}
func (m *UpdateSeqUpdate_UpdateGroupMembersCountChanged) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UpdateGroupMembersCountChanged != nil {
		l = m.UpdateGroupMembersCountChanged.Size()
		n += 2 + l + sovSequenceAndUpdates(uint64(l))
	}
	return n
}
func (m *UpdateSeqUpdate_UpdateGroupMemberPermissionsChanged) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UpdateGroupMemberPermissionsChanged != nil {
		l = m.UpdateGroupMemberPermissionsChanged.Size()
		n += 2 + l + sovSequenceAndUpdates(uint64(l))
	}
	return n
}
func (m *UpdateSeqUpdate_UpdateGroupInviteObsolete) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UpdateGroupInviteObsolete != nil {
		l = m.UpdateGroupInviteObsolete.Size()
		n += 2 + l + sovSequenceAndUpdates(uint64(l))
	}
	return n
}
func (m *UpdateSeqUpdate_UpdateGroupUserInvitedObsolete) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UpdateGroupUserInvitedObsolete != nil {
		l = m.UpdateGroupUserInvitedObsolete.Size()
		n += 2 + l + sovSequenceAndUpdates(uint64(l))
	}
	return n
}
func (m *UpdateSeqUpdate_UpdateGroupUserLeaveObsolete) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UpdateGroupUserLeaveObsolete != nil {
		l = m.UpdateGroupUserLeaveObsolete.Size()
		n += 2 + l + sovSequenceAndUpdates(uint64(l))
	}
	return n
}
func (m *UpdateSeqUpdate_UpdateGroupUserKickObsolete) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UpdateGroupUserKickObsolete != nil {
		l = m.UpdateGroupUserKickObsolete.Size()
		n += 2 + l + sovSequenceAndUpdates(uint64(l))
	}
	return n
}
func (m *UpdateSeqUpdate_UpdateGroupMembersUpdateObsolete) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UpdateGroupMembersUpdateObsolete != nil {
		l = m.UpdateGroupMembersUpdateObsolete.Size()
		n += 2 + l + sovSequenceAndUpdates(uint64(l))
	}
	return n
}
func (m *UpdateSeqUpdate_UpdateGroupTitleChangedObsolete) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UpdateGroupTitleChangedObsolete != nil {
		l = m.UpdateGroupTitleChangedObsolete.Size()
		n += 2 + l + sovSequenceAndUpdates(uint64(l))
	}
	return n
}
func (m *UpdateSeqUpdate_UpdateGroupAboutChangedObsolete) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UpdateGroupAboutChangedObsolete != nil {
		l = m.UpdateGroupAboutChangedObsolete.Size()
		n += 2 + l + sovSequenceAndUpdates(uint64(l))
	}
	return n
}
func (m *UpdateSeqUpdate_UpdateGroupAvatarChangedObsolete) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UpdateGroupAvatarChangedObsolete != nil {
		l = m.UpdateGroupAvatarChangedObsolete.Size()
		n += 2 + l + sovSequenceAndUpdates(uint64(l))
	}
	return n
}
func (m *UpdateSeqUpdate_UpdateGroupShortnameChanged) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UpdateGroupShortnameChanged != nil {
		l = m.UpdateGroupShortnameChanged.Size()
		n += 2 + l + sovSequenceAndUpdates(uint64(l))
	}
	return n
}
func (m *UpdateSeqUpdate_UpdateStickerCollectionsChanged) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UpdateStickerCollectionsChanged != nil {
		l = m.UpdateStickerCollectionsChanged.Size()
		n += 2 + l + sovSequenceAndUpdates(uint64(l))
	}
	return n
}
func (m *UpdateSeqUpdate_UpdateStickerPackRemoved) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UpdateStickerPackRemoved != nil {
		l = m.UpdateStickerPackRemoved.Size()
		n += 2 + l + sovSequenceAndUpdates(uint64(l))
	}
	return n
}
func (m *UpdateSeqUpdate_UpdateStickerPackAdded) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UpdateStickerPackAdded != nil {
		l = m.UpdateStickerPackAdded.Size()
		n += 2 + l + sovSequenceAndUpdates(uint64(l))
	}
	return n
}
func (m *UpdateSeqUpdate_UpdatePauseNotifications) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UpdatePauseNotifications != nil {
		l = m.UpdatePauseNotifications.Size()
		n += 2 + l + sovSequenceAndUpdates(uint64(l))
	}
	return n
}
func (m *UpdateSeqUpdate_UpdateRestoreNotifications) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UpdateRestoreNotifications != nil {
		l = m.UpdateRestoreNotifications.Size()
		n += 2 + l + sovSequenceAndUpdates(uint64(l))
	}
	return n
}
func (m *UpdateSeqUpdate_UpdateTyping) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UpdateTyping != nil {
		l = m.UpdateTyping.Size()
		n += 2 + l + sovSequenceAndUpdates(uint64(l))
	}
	return n
}
func (m *UpdateSeqUpdate_UpdateTypingStop) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UpdateTypingStop != nil {
		l = m.UpdateTypingStop.Size()
		n += 2 + l + sovSequenceAndUpdates(uint64(l))
	}
	return n
}
func (m *UpdateSeqUpdate_UpdateUserOnline) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UpdateUserOnline != nil {
		l = m.UpdateUserOnline.Size()
		n += 2 + l + sovSequenceAndUpdates(uint64(l))
	}
	return n
}
func (m *UpdateSeqUpdate_UpdateUserOffline) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UpdateUserOffline != nil {
		l = m.UpdateUserOffline.Size()
		n += 2 + l + sovSequenceAndUpdates(uint64(l))
	}
	return n
}
func (m *UpdateSeqUpdate_UpdateUserLastSeen) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UpdateUserLastSeen != nil {
		l = m.UpdateUserLastSeen.Size()
		n += 2 + l + sovSequenceAndUpdates(uint64(l))
	}
	return n
}
func (m *UpdateSeqUpdate_UpdateGroupOnline) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UpdateGroupOnline != nil {
		l = m.UpdateGroupOnline.Size()
		n += 2 + l + sovSequenceAndUpdates(uint64(l))
	}
	return n
}
func (m *UpdateSeqUpdate_UpdateEventBusDeviceConnected) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UpdateEventBusDeviceConnected != nil {
		l = m.UpdateEventBusDeviceConnected.Size()
		n += 2 + l + sovSequenceAndUpdates(uint64(l))
	}
	return n
}
func (m *UpdateSeqUpdate_UpdateEventBusDeviceDisconnected) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UpdateEventBusDeviceDisconnected != nil {
		l = m.UpdateEventBusDeviceDisconnected.Size()
		n += 2 + l + sovSequenceAndUpdates(uint64(l))
	}
	return n
}
func (m *UpdateSeqUpdate_UpdateEventBusMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UpdateEventBusMessage != nil {
		l = m.UpdateEventBusMessage.Size()
		n += 2 + l + sovSequenceAndUpdates(uint64(l))
	}
	return n
}
func (m *UpdateSeqUpdate_UpdateEventBusDisposed) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UpdateEventBusDisposed != nil {
		l = m.UpdateEventBusDisposed.Size()
		n += 2 + l + sovSequenceAndUpdates(uint64(l))
	}
	return n
}
func (m *UpdateSeqUpdate_UpdateIncomingCallDeprecated) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UpdateIncomingCallDeprecated != nil {
		l = m.UpdateIncomingCallDeprecated.Size()
		n += 2 + l + sovSequenceAndUpdates(uint64(l))
	}
	return n
}
func (m *UpdateSeqUpdate_UpdateIncomingCall) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UpdateIncomingCall != nil {
		l = m.UpdateIncomingCall.Size()
		n += 2 + l + sovSequenceAndUpdates(uint64(l))
	}
	return n
}
func (m *UpdateSeqUpdate_UpdateCallHandled) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UpdateCallHandled != nil {
		l = m.UpdateCallHandled.Size()
		n += 2 + l + sovSequenceAndUpdates(uint64(l))
	}
	return n
}
func (m *UpdateSeqUpdate_UpdateCallDisposed) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UpdateCallDisposed != nil {
		l = m.UpdateCallDisposed.Size()
		n += 2 + l + sovSequenceAndUpdates(uint64(l))
	}
	return n
}
func (m *UpdateSeqUpdate_UpdateParameterChanged) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UpdateParameterChanged != nil {
		l = m.UpdateParameterChanged.Size()
		n += 2 + l + sovSequenceAndUpdates(uint64(l))
	}
	return n
}
func (m *UpdateSeqUpdate_UpdateRawUpdate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UpdateRawUpdate != nil {
		l = m.UpdateRawUpdate.Size()
		n += 2 + l + sovSequenceAndUpdates(uint64(l))
	}
	return n
}
func (m *UpdateSeqUpdate_UpdateEmptyUpdate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UpdateEmptyUpdate != nil {
		l = m.UpdateEmptyUpdate.Size()
		n += 2 + l + sovSequenceAndUpdates(uint64(l))
	}
	return n
}
func (m *UpdateSeqUpdate_UpdateCountersChanged) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UpdateCountersChanged != nil {
		l = m.UpdateCountersChanged.Size()
		n += 2 + l + sovSequenceAndUpdates(uint64(l))
	}
	return n
}
func (m *UpdateSeqUpdate_UpdateConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UpdateConfig != nil {
		l = m.UpdateConfig.Size()
		n += 2 + l + sovSequenceAndUpdates(uint64(l))
	}
	return n
}
func (m *UpdateSeqUpdate_UpdateSpaceModified) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UpdateSpaceModified != nil {
		l = m.UpdateSpaceModified.Size()
		n += 2 + l + sovSequenceAndUpdates(uint64(l))
	}
	return n
}
func (m *UpdateSeqUpdate_UpdateSpaceMemberModified) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UpdateSpaceMemberModified != nil {
		l = m.UpdateSpaceMemberModified.Size()
		n += 2 + l + sovSequenceAndUpdates(uint64(l))
	}
	return n
}
func (m *UpdateSeqUpdate_UpdateMessageRejectedByHook) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UpdateMessageRejectedByHook != nil {
		l = m.UpdateMessageRejectedByHook.Size()
		n += 2 + l + sovSequenceAndUpdates(uint64(l))
	}
	return n
}
func (m *UpdateSeqUpdate_UpdateMessageEditRejectedByHook) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UpdateMessageEditRejectedByHook != nil {
		l = m.UpdateMessageEditRejectedByHook.Size()
		n += 2 + l + sovSequenceAndUpdates(uint64(l))
	}
	return n
}
func (m *UpdateSeqUpdate_UpdateUser) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UpdateUser != nil {
		l = m.UpdateUser.Size()
		n += 2 + l + sovSequenceAndUpdates(uint64(l))
	}
	return n
}
func (m *UpdateSeqUpdate_UpdateFeatureFlagChanged) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UpdateFeatureFlagChanged != nil {
		l = m.UpdateFeatureFlagChanged.Size()
		n += 2 + l + sovSequenceAndUpdates(uint64(l))
	}
	return n
}
func (m *UpdateSeqUpdate_UpdateThreadCreated) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UpdateThreadCreated != nil {
		l = m.UpdateThreadCreated.Size()
		n += 2 + l + sovSequenceAndUpdates(uint64(l))
	}
	return n
}
func (m *UpdateSeqUpdate_UpdateThreadLifted) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UpdateThreadLifted != nil {
		l = m.UpdateThreadLifted.Size()
		n += 2 + l + sovSequenceAndUpdates(uint64(l))
	}
	return n
}
func (m *UpdateSeqUpdate_UpdateGroup) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UpdateGroup != nil {
		l = m.UpdateGroup.Size()
		n += 2 + l + sovSequenceAndUpdates(uint64(l))
	}
	return n
}
func (m *UpdateSeqUpdate_UpdateGroupMemberInvited) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UpdateGroupMemberInvited != nil {
		l = m.UpdateGroupMemberInvited.Size()
		n += 2 + l + sovSequenceAndUpdates(uint64(l))
	}
	return n
}
func (m *UpdateSeqUpdate_MessageReactionsUpdate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MessageReactionsUpdate != nil {
		l = m.MessageReactionsUpdate.Size()
		n += 2 + l + sovSequenceAndUpdates(uint64(l))
	}
	return n
}
func (m *UpdateFatSeqUpdate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Seq != 0 {
		n += 1 + sovSequenceAndUpdates(uint64(m.Seq))
	}
	l = len(m.State)
	if l > 0 {
		n += 1 + l + sovSequenceAndUpdates(uint64(l))
	}
	if m.UpdateHeader != 0 {
		n += 1 + sovSequenceAndUpdates(uint64(m.UpdateHeader))
	}
	l = len(m.Update)
	if l > 0 {
		n += 1 + l + sovSequenceAndUpdates(uint64(l))
	}
	if len(m.Users) > 0 {
		for _, e := range m.Users {
			l = e.Size()
			n += 1 + l + sovSequenceAndUpdates(uint64(l))
		}
	}
	if len(m.Groups) > 0 {
		for _, e := range m.Groups {
			l = e.Size()
			n += 1 + l + sovSequenceAndUpdates(uint64(l))
		}
	}
	return n
}

func (m *UpdateWeakUpdate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Date != 0 {
		n += 1 + sovSequenceAndUpdates(uint64(m.Date))
	}
	if m.UpdateHeader != 0 {
		n += 1 + sovSequenceAndUpdates(uint64(m.UpdateHeader))
	}
	l = len(m.Update)
	if l > 0 {
		n += 1 + l + sovSequenceAndUpdates(uint64(l))
	}
	return n
}

func (m *UpdateWeakFatUpdate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Date != 0 {
		n += 1 + sovSequenceAndUpdates(uint64(m.Date))
	}
	if m.UpdateHeader != 0 {
		n += 1 + sovSequenceAndUpdates(uint64(m.UpdateHeader))
	}
	l = len(m.Update)
	if l > 0 {
		n += 1 + l + sovSequenceAndUpdates(uint64(l))
	}
	if len(m.Users) > 0 {
		for _, e := range m.Users {
			l = e.Size()
			n += 1 + l + sovSequenceAndUpdates(uint64(l))
		}
	}
	if len(m.Groups) > 0 {
		for _, e := range m.Groups {
			l = e.Size()
			n += 1 + l + sovSequenceAndUpdates(uint64(l))
		}
	}
	return n
}

func (m *UpdateSeqUpdateTooLong) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *UpdateContainer) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UpdateHeader != 0 {
		n += 1 + sovSequenceAndUpdates(uint64(m.UpdateHeader))
	}
	l = len(m.Update)
	if l > 0 {
		n += 1 + l + sovSequenceAndUpdates(uint64(l))
	}
	return n
}

func (m *UpdateCombinedUpdate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SeqStart != 0 {
		n += 1 + sovSequenceAndUpdates(uint64(m.SeqStart))
	}
	if m.SeqEnd != 0 {
		n += 1 + sovSequenceAndUpdates(uint64(m.SeqEnd))
	}
	l = len(m.State)
	if l > 0 {
		n += 1 + l + sovSequenceAndUpdates(uint64(l))
	}
	if len(m.Users) > 0 {
		for _, e := range m.Users {
			l = e.Size()
			n += 1 + l + sovSequenceAndUpdates(uint64(l))
		}
	}
	if len(m.Groups) > 0 {
		for _, e := range m.Groups {
			l = e.Size()
			n += 1 + l + sovSequenceAndUpdates(uint64(l))
		}
	}
	if len(m.Updates) > 0 {
		for _, e := range m.Updates {
			l = e.Size()
			n += 1 + l + sovSequenceAndUpdates(uint64(l))
		}
	}
	if len(m.Messages) > 0 {
		for _, e := range m.Messages {
			l = e.Size()
			n += 1 + l + sovSequenceAndUpdates(uint64(l))
		}
	}
	return n
}

func (m *RequestGetState) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Optimizations) > 0 {
		l = 0
		for _, e := range m.Optimizations {
			l += sovSequenceAndUpdates(uint64(e))
		}
		n += 1 + sovSequenceAndUpdates(uint64(l)) + l
	}
	return n
}

func (m *RequestGetDifference) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Seq != 0 {
		n += 1 + sovSequenceAndUpdates(uint64(m.Seq))
	}
	l = len(m.State)
	if l > 0 {
		n += 1 + l + sovSequenceAndUpdates(uint64(l))
	}
	if len(m.Optimizations) > 0 {
		l = 0
		for _, e := range m.Optimizations {
			l += sovSequenceAndUpdates(uint64(e))
		}
		n += 1 + sovSequenceAndUpdates(uint64(l)) + l
	}
	if m.ConfigHash != nil {
		l = m.ConfigHash.Size()
		n += 1 + l + sovSequenceAndUpdates(uint64(l))
	}
	return n
}

func (m *ResponseGetDifference) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Seq != 0 {
		n += 1 + sovSequenceAndUpdates(uint64(m.Seq))
	}
	l = len(m.State)
	if l > 0 {
		n += 1 + l + sovSequenceAndUpdates(uint64(l))
	}
	if len(m.Updates) > 0 {
		for _, e := range m.Updates {
			l = e.Size()
			n += 1 + l + sovSequenceAndUpdates(uint64(l))
		}
	}
	if m.NeedMore {
		n += 2
	}
	if len(m.Messages) > 0 {
		for _, e := range m.Messages {
			l = e.Size()
			n += 1 + l + sovSequenceAndUpdates(uint64(l))
		}
	}
	if len(m.UsersRefs) > 0 {
		for _, e := range m.UsersRefs {
			l = e.Size()
			n += 1 + l + sovSequenceAndUpdates(uint64(l))
		}
	}
	if len(m.GroupsRefs) > 0 {
		for _, e := range m.GroupsRefs {
			l = e.Size()
			n += 1 + l + sovSequenceAndUpdates(uint64(l))
		}
	}
	if m.Config != nil {
		l = m.Config.Size()
		n += 1 + l + sovSequenceAndUpdates(uint64(l))
	}
	if m.ConfigHash != nil {
		l = m.ConfigHash.Size()
		n += 1 + l + sovSequenceAndUpdates(uint64(l))
	}
	return n
}

func (m *RequestGetDialogsDifference) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Clock != 0 {
		n += 1 + sovSequenceAndUpdates(uint64(m.Clock))
	}
	return n
}

func (m *ResponseGetDialogsDifference) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Dialogs) > 0 {
		for _, e := range m.Dialogs {
			l = e.Size()
			n += 1 + l + sovSequenceAndUpdates(uint64(l))
		}
	}
	if len(m.GroupPeers) > 0 {
		for _, e := range m.GroupPeers {
			l = e.Size()
			n += 1 + l + sovSequenceAndUpdates(uint64(l))
		}
	}
	if len(m.UserPeers) > 0 {
		for _, e := range m.UserPeers {
			l = e.Size()
			n += 1 + l + sovSequenceAndUpdates(uint64(l))
		}
	}
	return n
}

func (m *GroupMembersSubset) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.GroupPeer != nil {
		l = m.GroupPeer.Size()
		n += 1 + l + sovSequenceAndUpdates(uint64(l))
	}
	if len(m.MemberIds) > 0 {
		l = 0
		for _, e := range m.MemberIds {
			l += sovSequenceAndUpdates(uint64(e))
		}
		n += 1 + sovSequenceAndUpdates(uint64(l)) + l
	}
	return n
}

func (m *RequestGetReferencedEntitites) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Users) > 0 {
		for _, e := range m.Users {
			l = e.Size()
			n += 1 + l + sovSequenceAndUpdates(uint64(l))
		}
	}
	if len(m.Mids) > 0 {
		for _, e := range m.Mids {
			l = e.Size()
			n += 1 + l + sovSequenceAndUpdates(uint64(l))
		}
	}
	if len(m.GroupMembers) > 0 {
		for _, e := range m.GroupMembers {
			l = e.Size()
			n += 1 + l + sovSequenceAndUpdates(uint64(l))
		}
	}
	if len(m.Groups) > 0 {
		for _, e := range m.Groups {
			l = e.Size()
			n += 1 + l + sovSequenceAndUpdates(uint64(l))
		}
	}
	return n
}

func (m *ResponseGetReferencedEntitites) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Users) > 0 {
		for _, e := range m.Users {
			l = e.Size()
			n += 1 + l + sovSequenceAndUpdates(uint64(l))
		}
	}
	if len(m.Groups) > 0 {
		for _, e := range m.Groups {
			l = e.Size()
			n += 1 + l + sovSequenceAndUpdates(uint64(l))
		}
	}
	if len(m.Messages) > 0 {
		for _, e := range m.Messages {
			l = e.Size()
			n += 1 + l + sovSequenceAndUpdates(uint64(l))
		}
	}
	return n
}

func (m *RequestGetPartialPeerInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Users) > 0 {
		for _, e := range m.Users {
			l = e.Size()
			n += 1 + l + sovSequenceAndUpdates(uint64(l))
		}
	}
	if len(m.Groups) > 0 {
		for _, e := range m.Groups {
			l = e.Size()
			n += 1 + l + sovSequenceAndUpdates(uint64(l))
		}
	}
	if len(m.GroupMembers) > 0 {
		for _, e := range m.GroupMembers {
			l = e.Size()
			n += 1 + l + sovSequenceAndUpdates(uint64(l))
		}
	}
	return n
}

func (m *ResponseGetPartialPeerInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Users) > 0 {
		for _, e := range m.Users {
			l = e.Size()
			n += 1 + l + sovSequenceAndUpdates(uint64(l))
		}
	}
	if len(m.Groups) > 0 {
		for _, e := range m.Groups {
			l = e.Size()
			n += 1 + l + sovSequenceAndUpdates(uint64(l))
		}
	}
	return n
}

func (m *UpdateRawUpdate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Type != nil {
		l = m.Type.Size()
		n += 1 + l + sovSequenceAndUpdates(uint64(l))
	}
	l = len(m.Bytes)
	if l > 0 {
		n += 1 + l + sovSequenceAndUpdates(uint64(l))
	}
	return n
}

func (m *UpdateEmptyUpdate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *RequestSubscribeToOnline) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Users) > 0 {
		for _, e := range m.Users {
			l = e.Size()
			n += 1 + l + sovSequenceAndUpdates(uint64(l))
		}
	}
	return n
}

func (m *RequestSubscribeFromOnline) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Users) > 0 {
		for _, e := range m.Users {
			l = e.Size()
			n += 1 + l + sovSequenceAndUpdates(uint64(l))
		}
	}
	return n
}

func (m *RequestSubscribeToGroupOnline) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Groups) > 0 {
		for _, e := range m.Groups {
			l = e.Size()
			n += 1 + l + sovSequenceAndUpdates(uint64(l))
		}
	}
	return n
}

func (m *RequestSubscribeFromGroupOnline) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Groups) > 0 {
		for _, e := range m.Groups {
			l = e.Size()
			n += 1 + l + sovSequenceAndUpdates(uint64(l))
		}
	}
	return n
}

func (m *SeqUpdateBox) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Seq != 0 {
		n += 1 + sovSequenceAndUpdates(uint64(m.Seq))
	}
	l = len(m.State)
	if l > 0 {
		n += 1 + l + sovSequenceAndUpdates(uint64(l))
	}
	if m.Update != nil {
		l = m.Update.Size()
		n += 1 + l + sovSequenceAndUpdates(uint64(l))
	}
	if m.UnboxedUpdate != nil {
		l = m.UnboxedUpdate.Size()
		n += 1 + l + sovSequenceAndUpdates(uint64(l))
	}
	return n
}

func (m *PeersList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Peers) > 0 {
		for _, e := range m.Peers {
			l = e.Size()
			n += 1 + l + sovSequenceAndUpdates(uint64(l))
		}
	}
	return n
}

func (m *WeakUpdateCommand) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Command != nil {
		n += m.Command.Size()
	}
	return n
}

func (m *WeakUpdateCommand_ChangeMyOnline_) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ChangeMyOnline != nil {
		l = m.ChangeMyOnline.Size()
		n += 1 + l + sovSequenceAndUpdates(uint64(l))
	}
	return n
}
func (m *WeakUpdateCommand_SubscribeToOnlines) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SubscribeToOnlines != nil {
		l = m.SubscribeToOnlines.Size()
		n += 1 + l + sovSequenceAndUpdates(uint64(l))
	}
	return n
}
func (m *WeakUpdateCommand_UnsubscribeFromOnlines) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UnsubscribeFromOnlines != nil {
		l = m.UnsubscribeFromOnlines.Size()
		n += 1 + l + sovSequenceAndUpdates(uint64(l))
	}
	return n
}
func (m *WeakUpdateCommand_UnsubscribeFromAllOnlines) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UnsubscribeFromAllOnlines != nil {
		l = m.UnsubscribeFromAllOnlines.Size()
		n += 1 + l + sovSequenceAndUpdates(uint64(l))
	}
	return n
}
func (m *WeakUpdateCommand_ChangeMyTyping_) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ChangeMyTyping != nil {
		l = m.ChangeMyTyping.Size()
		n += 1 + l + sovSequenceAndUpdates(uint64(l))
	}
	return n
}
func (m *WeakUpdateCommand_SubscribeToTypings) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SubscribeToTypings != nil {
		l = m.SubscribeToTypings.Size()
		n += 1 + l + sovSequenceAndUpdates(uint64(l))
	}
	return n
}
func (m *WeakUpdateCommand_UnsubscribeFromTypings) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UnsubscribeFromTypings != nil {
		l = m.UnsubscribeFromTypings.Size()
		n += 1 + l + sovSequenceAndUpdates(uint64(l))
	}
	return n
}
func (m *WeakUpdateCommand_UnsubscribeFromAllTypings) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UnsubscribeFromAllTypings != nil {
		l = m.UnsubscribeFromAllTypings.Size()
		n += 1 + l + sovSequenceAndUpdates(uint64(l))
	}
	return n
}
func (m *WeakUpdateCommand_ChangeMyOnline) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Online {
		n += 2
	}
	return n
}

func (m *WeakUpdateCommand_ChangeMyTyping) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Peer != nil {
		l = m.Peer.Size()
		n += 1 + l + sovSequenceAndUpdates(uint64(l))
	}
	if m.Type != 0 {
		n += 1 + sovSequenceAndUpdates(uint64(m.Type))
	}
	if m.Start {
		n += 2
	}
	return n
}

func (m *WeakUpdateBox) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Updatebox != nil {
		n += m.Updatebox.Size()
	}
	return n
}

func (m *WeakUpdateBox_TypingStart) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TypingStart != nil {
		l = m.TypingStart.Size()
		n += 1 + l + sovSequenceAndUpdates(uint64(l))
	}
	return n
}
func (m *WeakUpdateBox_TypingStop) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TypingStop != nil {
		l = m.TypingStop.Size()
		n += 1 + l + sovSequenceAndUpdates(uint64(l))
	}
	return n
}
func (m *WeakUpdateBox_UserLastSeen) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UserLastSeen != nil {
		l = m.UserLastSeen.Size()
		n += 1 + l + sovSequenceAndUpdates(uint64(l))
	}
	return n
}
func (m *WeakUpdateBox_GroupOnline) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.GroupOnline != nil {
		l = m.GroupOnline.Size()
		n += 1 + l + sovSequenceAndUpdates(uint64(l))
	}
	return n
}
func (m *WeakUpdateBox_ForceReload) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ForceReload != nil {
		l = m.ForceReload.Size()
		n += 1 + l + sovSequenceAndUpdates(uint64(l))
	}
	return n
}
func (m *WeakUpdateBox_PermissionsChange) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PermissionsChange != nil {
		l = m.PermissionsChange.Size()
		n += 1 + l + sovSequenceAndUpdates(uint64(l))
	}
	return n
}
func (m *WeakUpdateBox_UserStatusChange) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UserStatusChange != nil {
		l = m.UserStatusChange.Size()
		n += 1 + l + sovSequenceAndUpdates(uint64(l))
	}
	return n
}
func (m *WeakUpdateBox_MessageReactionUpdate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MessageReactionUpdate != nil {
		l = m.MessageReactionUpdate.Size()
		n += 1 + l + sovSequenceAndUpdates(uint64(l))
	}
	return n
}
func (m *WeakUpdateBox_Message) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Message != nil {
		l = m.Message.Size()
		n += 1 + l + sovSequenceAndUpdates(uint64(l))
	}
	return n
}
func (m *WeakUpdateBox_MessageContentChange) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MessageContentChange != nil {
		l = m.MessageContentChange.Size()
		n += 1 + l + sovSequenceAndUpdates(uint64(l))
	}
	return n
}
func (m *WeakUpdateBox_MessageRead) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MessageRead != nil {
		l = m.MessageRead.Size()
		n += 1 + l + sovSequenceAndUpdates(uint64(l))
	}
	return n
}
func (m *WeakUpdateBox_MessageReceived) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MessageReceived != nil {
		l = m.MessageReceived.Size()
		n += 1 + l + sovSequenceAndUpdates(uint64(l))
	}
	return n
}
func (m *WeakUpdateBox_MessageReadByMe) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MessageReadByMe != nil {
		l = m.MessageReadByMe.Size()
		n += 1 + l + sovSequenceAndUpdates(uint64(l))
	}
	return n
}
func (m *WeakUpdateBox_UpdateForceReloadState) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Fields) > 0 {
		for _, e := range m.Fields {
			l = e.Size()
			n += 1 + l + sovSequenceAndUpdates(uint64(l))
		}
	}
	return n
}

func (m *WeakUpdateBox_UpdateForceReloadState_ForceReloadField) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Field != nil {
		n += m.Field.Size()
	}
	return n
}

func (m *WeakUpdateBox_UpdateForceReloadState_ForceReloadField_ReloadDialogs) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ReloadDialogs != nil {
		l = m.ReloadDialogs.Size()
		n += 1 + l + sovSequenceAndUpdates(uint64(l))
	}
	return n
}
func (m *WeakUpdateBox_UpdateForceReloadState_ForceReloadField_ReloadContacts) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ReloadContacts != nil {
		l = m.ReloadContacts.Size()
		n += 1 + l + sovSequenceAndUpdates(uint64(l))
	}
	return n
}
func (m *WeakUpdateBox_UpdateForceReloadState_ForceReloadField_ReloadHistory) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ReloadHistory != nil {
		l = m.ReloadHistory.Size()
		n += 1 + l + sovSequenceAndUpdates(uint64(l))
	}
	return n
}

func sovSequenceAndUpdates(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozSequenceAndUpdates(x uint64) (n int) {
	return sovSequenceAndUpdates(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *UpdateSeqUpdate) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateSeqUpdate{`,
		`Seq:` + fmt.Sprintf("%v", this.Seq) + `,`,
		`State:` + fmt.Sprintf("%v", this.State) + `,`,
		`UpdateHeader:` + fmt.Sprintf("%v", this.UpdateHeader) + `,`,
		`Update:` + fmt.Sprintf("%v", this.Update) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateSeqUpdate_UpdateForceReloadState) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateSeqUpdate_UpdateForceReloadState{`,
		`UpdateForceReloadState:` + strings.Replace(fmt.Sprintf("%v", this.UpdateForceReloadState), "UpdateForceReloadState", "UpdateForceReloadState", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateSeqUpdate_UpdateUserAvatarChanged) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateSeqUpdate_UpdateUserAvatarChanged{`,
		`UpdateUserAvatarChanged:` + strings.Replace(fmt.Sprintf("%v", this.UpdateUserAvatarChanged), "UpdateUserAvatarChanged", "UpdateUserAvatarChanged", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateSeqUpdate_UpdateUserNameChanged) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateSeqUpdate_UpdateUserNameChanged{`,
		`UpdateUserNameChanged:` + strings.Replace(fmt.Sprintf("%v", this.UpdateUserNameChanged), "UpdateUserNameChanged", "UpdateUserNameChanged", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateSeqUpdate_UpdateUserLocalNameChanged) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateSeqUpdate_UpdateUserLocalNameChanged{`,
		`UpdateUserLocalNameChanged:` + strings.Replace(fmt.Sprintf("%v", this.UpdateUserLocalNameChanged), "UpdateUserLocalNameChanged", "UpdateUserLocalNameChanged", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateSeqUpdate_UpdateUserContactsChanged) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateSeqUpdate_UpdateUserContactsChanged{`,
		`UpdateUserContactsChanged:` + strings.Replace(fmt.Sprintf("%v", this.UpdateUserContactsChanged), "UpdateUserContactsChanged", "UpdateUserContactsChanged", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateSeqUpdate_UpdateUserNickChanged) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateSeqUpdate_UpdateUserNickChanged{`,
		`UpdateUserNickChanged:` + strings.Replace(fmt.Sprintf("%v", this.UpdateUserNickChanged), "UpdateUserNickChanged", "UpdateUserNickChanged", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateSeqUpdate_UpdateUserAboutChanged) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateSeqUpdate_UpdateUserAboutChanged{`,
		`UpdateUserAboutChanged:` + strings.Replace(fmt.Sprintf("%v", this.UpdateUserAboutChanged), "UpdateUserAboutChanged", "UpdateUserAboutChanged", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateSeqUpdate_UpdateUserPreferredLanguagesChanged) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateSeqUpdate_UpdateUserPreferredLanguagesChanged{`,
		`UpdateUserPreferredLanguagesChanged:` + strings.Replace(fmt.Sprintf("%v", this.UpdateUserPreferredLanguagesChanged), "UpdateUserPreferredLanguagesChanged", "UpdateUserPreferredLanguagesChanged", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateSeqUpdate_UpdateUserTimeZoneChanged) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateSeqUpdate_UpdateUserTimeZoneChanged{`,
		`UpdateUserTimeZoneChanged:` + strings.Replace(fmt.Sprintf("%v", this.UpdateUserTimeZoneChanged), "UpdateUserTimeZoneChanged", "UpdateUserTimeZoneChanged", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateSeqUpdate_UpdateUserBotCommandsChanged) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateSeqUpdate_UpdateUserBotCommandsChanged{`,
		`UpdateUserBotCommandsChanged:` + strings.Replace(fmt.Sprintf("%v", this.UpdateUserBotCommandsChanged), "UpdateUserBotCommandsChanged", "UpdateUserBotCommandsChanged", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateSeqUpdate_UpdateUserExtChanged) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateSeqUpdate_UpdateUserExtChanged{`,
		`UpdateUserExtChanged:` + strings.Replace(fmt.Sprintf("%v", this.UpdateUserExtChanged), "UpdateUserExtChanged", "UpdateUserExtChanged", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateSeqUpdate_UpdateUserFullExtChanged) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateSeqUpdate_UpdateUserFullExtChanged{`,
		`UpdateUserFullExtChanged:` + strings.Replace(fmt.Sprintf("%v", this.UpdateUserFullExtChanged), "UpdateUserFullExtChanged", "UpdateUserFullExtChanged", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateSeqUpdate_UpdateUserSexChanged) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateSeqUpdate_UpdateUserSexChanged{`,
		`UpdateUserSexChanged:` + strings.Replace(fmt.Sprintf("%v", this.UpdateUserSexChanged), "UpdateUserSexChanged", "UpdateUserSexChanged", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateSeqUpdate_UpdateUserCustomProfileChanged) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateSeqUpdate_UpdateUserCustomProfileChanged{`,
		`UpdateUserCustomProfileChanged:` + strings.Replace(fmt.Sprintf("%v", this.UpdateUserCustomProfileChanged), "UpdateUserCustomProfileChanged", "UpdateUserCustomProfileChanged", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateSeqUpdate_UpdateUserStatusChanged) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateSeqUpdate_UpdateUserStatusChanged{`,
		`UpdateUserStatusChanged:` + strings.Replace(fmt.Sprintf("%v", this.UpdateUserStatusChanged), "UpdateUserStatusChanged", "UpdateUserStatusChanged", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateSeqUpdate_UpdateContactRegistered) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateSeqUpdate_UpdateContactRegistered{`,
		`UpdateContactRegistered:` + strings.Replace(fmt.Sprintf("%v", this.UpdateContactRegistered), "UpdateContactRegistered", "UpdateContactRegistered", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateSeqUpdate_UpdateContactsAdded) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateSeqUpdate_UpdateContactsAdded{`,
		`UpdateContactsAdded:` + strings.Replace(fmt.Sprintf("%v", this.UpdateContactsAdded), "UpdateContactsAdded", "UpdateContactsAdded", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateSeqUpdate_UpdateContactsAddTaskSuspended) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateSeqUpdate_UpdateContactsAddTaskSuspended{`,
		`UpdateContactsAddTaskSuspended:` + strings.Replace(fmt.Sprintf("%v", this.UpdateContactsAddTaskSuspended), "UpdateContactsAddTaskSuspended", "UpdateContactsAddTaskSuspended", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateSeqUpdate_UpdateContactsRemoved) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateSeqUpdate_UpdateContactsRemoved{`,
		`UpdateContactsRemoved:` + strings.Replace(fmt.Sprintf("%v", this.UpdateContactsRemoved), "UpdateContactsRemoved", "UpdateContactsRemoved", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateSeqUpdate_UpdateUserBlocked) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateSeqUpdate_UpdateUserBlocked{`,
		`UpdateUserBlocked:` + strings.Replace(fmt.Sprintf("%v", this.UpdateUserBlocked), "UpdateUserBlocked", "UpdateUserBlocked", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateSeqUpdate_UpdateUserUnblocked) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateSeqUpdate_UpdateUserUnblocked{`,
		`UpdateUserUnblocked:` + strings.Replace(fmt.Sprintf("%v", this.UpdateUserUnblocked), "UpdateUserUnblocked", "UpdateUserUnblocked", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateSeqUpdate_UpdateInteractiveMediaEvent) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateSeqUpdate_UpdateInteractiveMediaEvent{`,
		`UpdateInteractiveMediaEvent:` + strings.Replace(fmt.Sprintf("%v", this.UpdateInteractiveMediaEvent), "UpdateInteractiveMediaEvent", "UpdateInteractiveMediaEvent", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateSeqUpdate_UpdateMessage) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateSeqUpdate_UpdateMessage{`,
		`UpdateMessage:` + strings.Replace(fmt.Sprintf("%v", this.UpdateMessage), "UpdateMessage", "UpdateMessage", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateSeqUpdate_UpdateMessageContentChanged) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateSeqUpdate_UpdateMessageContentChanged{`,
		`UpdateMessageContentChanged:` + strings.Replace(fmt.Sprintf("%v", this.UpdateMessageContentChanged), "UpdateMessageContentChanged", "UpdateMessageContentChanged", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateSeqUpdate_UpdateMessageSent) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateSeqUpdate_UpdateMessageSent{`,
		`UpdateMessageSent:` + strings.Replace(fmt.Sprintf("%v", this.UpdateMessageSent), "UpdateMessageSent", "UpdateMessageSent", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateSeqUpdate_UpdateMessageReceived) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateSeqUpdate_UpdateMessageReceived{`,
		`UpdateMessageReceived:` + strings.Replace(fmt.Sprintf("%v", this.UpdateMessageReceived), "UpdateMessageReceived", "UpdateMessageReceived", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateSeqUpdate_UpdateMessageRead) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateSeqUpdate_UpdateMessageRead{`,
		`UpdateMessageRead:` + strings.Replace(fmt.Sprintf("%v", this.UpdateMessageRead), "UpdateMessageRead", "UpdateMessageRead", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateSeqUpdate_UpdateMessageReadByMe) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateSeqUpdate_UpdateMessageReadByMe{`,
		`UpdateMessageReadByMe:` + strings.Replace(fmt.Sprintf("%v", this.UpdateMessageReadByMe), "UpdateMessageReadByMe", "UpdateMessageReadByMe", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateSeqUpdate_UpdateMessageDelete) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateSeqUpdate_UpdateMessageDelete{`,
		`UpdateMessageDelete:` + strings.Replace(fmt.Sprintf("%v", this.UpdateMessageDelete), "UpdateMessageDelete", "UpdateMessageDelete", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateSeqUpdate_UpdateChatClear) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateSeqUpdate_UpdateChatClear{`,
		`UpdateChatClear:` + strings.Replace(fmt.Sprintf("%v", this.UpdateChatClear), "UpdateChatClear", "UpdateChatClear", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateSeqUpdate_UpdateChatDelete) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateSeqUpdate_UpdateChatDelete{`,
		`UpdateChatDelete:` + strings.Replace(fmt.Sprintf("%v", this.UpdateChatDelete), "UpdateChatDelete", "UpdateChatDelete", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateSeqUpdate_UpdateChatArchive) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateSeqUpdate_UpdateChatArchive{`,
		`UpdateChatArchive:` + strings.Replace(fmt.Sprintf("%v", this.UpdateChatArchive), "UpdateChatArchive", "UpdateChatArchive", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateSeqUpdate_UpdateChatGroupsChanged) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateSeqUpdate_UpdateChatGroupsChanged{`,
		`UpdateChatGroupsChanged:` + strings.Replace(fmt.Sprintf("%v", this.UpdateChatGroupsChanged), "UpdateChatGroupsChanged", "UpdateChatGroupsChanged", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateSeqUpdate_UpdateReactionsUpdate) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateSeqUpdate_UpdateReactionsUpdate{`,
		`UpdateReactionsUpdate:` + strings.Replace(fmt.Sprintf("%v", this.UpdateReactionsUpdate), "UpdateReactionsUpdate", "UpdateReactionsUpdate", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateSeqUpdate_UpdateDialogFavouriteChanged) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateSeqUpdate_UpdateDialogFavouriteChanged{`,
		`UpdateDialogFavouriteChanged:` + strings.Replace(fmt.Sprintf("%v", this.UpdateDialogFavouriteChanged), "UpdateDialogFavouriteChanged", "UpdateDialogFavouriteChanged", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateSeqUpdate_UpdatePinnedMessagesChanged) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateSeqUpdate_UpdatePinnedMessagesChanged{`,
		`UpdatePinnedMessagesChanged:` + strings.Replace(fmt.Sprintf("%v", this.UpdatePinnedMessagesChanged), "UpdatePinnedMessagesChanged", "UpdatePinnedMessagesChanged", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateSeqUpdate_UpdateGroupTitleChanged) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateSeqUpdate_UpdateGroupTitleChanged{`,
		`UpdateGroupTitleChanged:` + strings.Replace(fmt.Sprintf("%v", this.UpdateGroupTitleChanged), "UpdateGroupTitleChanged", "UpdateGroupTitleChanged", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateSeqUpdate_UpdateGroupAvatarChanged) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateSeqUpdate_UpdateGroupAvatarChanged{`,
		`UpdateGroupAvatarChanged:` + strings.Replace(fmt.Sprintf("%v", this.UpdateGroupAvatarChanged), "UpdateGroupAvatarChanged", "UpdateGroupAvatarChanged", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateSeqUpdate_UpdateGroupAboutChanged) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateSeqUpdate_UpdateGroupAboutChanged{`,
		`UpdateGroupAboutChanged:` + strings.Replace(fmt.Sprintf("%v", this.UpdateGroupAboutChanged), "UpdateGroupAboutChanged", "UpdateGroupAboutChanged", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateSeqUpdate_UpdateGroupOwnerChanged) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateSeqUpdate_UpdateGroupOwnerChanged{`,
		`UpdateGroupOwnerChanged:` + strings.Replace(fmt.Sprintf("%v", this.UpdateGroupOwnerChanged), "UpdateGroupOwnerChanged", "UpdateGroupOwnerChanged", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateSeqUpdate_UpdateGroupMembersUpdated) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateSeqUpdate_UpdateGroupMembersUpdated{`,
		`UpdateGroupMembersUpdated:` + strings.Replace(fmt.Sprintf("%v", this.UpdateGroupMembersUpdated), "UpdateGroupMembersUpdated", "UpdateGroupMembersUpdated", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateSeqUpdate_UpdateGroupMemberDiff) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateSeqUpdate_UpdateGroupMemberDiff{`,
		`UpdateGroupMemberDiff:` + strings.Replace(fmt.Sprintf("%v", this.UpdateGroupMemberDiff), "UpdateGroupMemberDiff", "UpdateGroupMemberDiff", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateSeqUpdate_UpdateGroupMembersCountChanged) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateSeqUpdate_UpdateGroupMembersCountChanged{`,
		`UpdateGroupMembersCountChanged:` + strings.Replace(fmt.Sprintf("%v", this.UpdateGroupMembersCountChanged), "UpdateGroupMembersCountChanged", "UpdateGroupMembersCountChanged", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateSeqUpdate_UpdateGroupMemberPermissionsChanged) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateSeqUpdate_UpdateGroupMemberPermissionsChanged{`,
		`UpdateGroupMemberPermissionsChanged:` + strings.Replace(fmt.Sprintf("%v", this.UpdateGroupMemberPermissionsChanged), "UpdateGroupMemberPermissionsChanged", "UpdateGroupMemberPermissionsChanged", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateSeqUpdate_UpdateGroupInviteObsolete) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateSeqUpdate_UpdateGroupInviteObsolete{`,
		`UpdateGroupInviteObsolete:` + strings.Replace(fmt.Sprintf("%v", this.UpdateGroupInviteObsolete), "UpdateGroupInviteObsolete", "UpdateGroupInviteObsolete", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateSeqUpdate_UpdateGroupUserInvitedObsolete) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateSeqUpdate_UpdateGroupUserInvitedObsolete{`,
		`UpdateGroupUserInvitedObsolete:` + strings.Replace(fmt.Sprintf("%v", this.UpdateGroupUserInvitedObsolete), "UpdateGroupUserInvitedObsolete", "UpdateGroupUserInvitedObsolete", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateSeqUpdate_UpdateGroupUserLeaveObsolete) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateSeqUpdate_UpdateGroupUserLeaveObsolete{`,
		`UpdateGroupUserLeaveObsolete:` + strings.Replace(fmt.Sprintf("%v", this.UpdateGroupUserLeaveObsolete), "UpdateGroupUserLeaveObsolete", "UpdateGroupUserLeaveObsolete", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateSeqUpdate_UpdateGroupUserKickObsolete) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateSeqUpdate_UpdateGroupUserKickObsolete{`,
		`UpdateGroupUserKickObsolete:` + strings.Replace(fmt.Sprintf("%v", this.UpdateGroupUserKickObsolete), "UpdateGroupUserKickObsolete", "UpdateGroupUserKickObsolete", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateSeqUpdate_UpdateGroupMembersUpdateObsolete) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateSeqUpdate_UpdateGroupMembersUpdateObsolete{`,
		`UpdateGroupMembersUpdateObsolete:` + strings.Replace(fmt.Sprintf("%v", this.UpdateGroupMembersUpdateObsolete), "UpdateGroupMembersUpdateObsolete", "UpdateGroupMembersUpdateObsolete", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateSeqUpdate_UpdateGroupTitleChangedObsolete) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateSeqUpdate_UpdateGroupTitleChangedObsolete{`,
		`UpdateGroupTitleChangedObsolete:` + strings.Replace(fmt.Sprintf("%v", this.UpdateGroupTitleChangedObsolete), "UpdateGroupTitleChangedObsolete", "UpdateGroupTitleChangedObsolete", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateSeqUpdate_UpdateGroupAboutChangedObsolete) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateSeqUpdate_UpdateGroupAboutChangedObsolete{`,
		`UpdateGroupAboutChangedObsolete:` + strings.Replace(fmt.Sprintf("%v", this.UpdateGroupAboutChangedObsolete), "UpdateGroupAboutChangedObsolete", "UpdateGroupAboutChangedObsolete", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateSeqUpdate_UpdateGroupAvatarChangedObsolete) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateSeqUpdate_UpdateGroupAvatarChangedObsolete{`,
		`UpdateGroupAvatarChangedObsolete:` + strings.Replace(fmt.Sprintf("%v", this.UpdateGroupAvatarChangedObsolete), "UpdateGroupAvatarChangedObsolete", "UpdateGroupAvatarChangedObsolete", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateSeqUpdate_UpdateGroupShortnameChanged) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateSeqUpdate_UpdateGroupShortnameChanged{`,
		`UpdateGroupShortnameChanged:` + strings.Replace(fmt.Sprintf("%v", this.UpdateGroupShortnameChanged), "UpdateGroupShortnameChanged", "UpdateGroupShortnameChanged", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateSeqUpdate_UpdateStickerCollectionsChanged) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateSeqUpdate_UpdateStickerCollectionsChanged{`,
		`UpdateStickerCollectionsChanged:` + strings.Replace(fmt.Sprintf("%v", this.UpdateStickerCollectionsChanged), "UpdateStickerCollectionsChanged", "UpdateStickerCollectionsChanged", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateSeqUpdate_UpdateStickerPackRemoved) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateSeqUpdate_UpdateStickerPackRemoved{`,
		`UpdateStickerPackRemoved:` + strings.Replace(fmt.Sprintf("%v", this.UpdateStickerPackRemoved), "UpdateStickerPackRemoved", "UpdateStickerPackRemoved", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateSeqUpdate_UpdateStickerPackAdded) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateSeqUpdate_UpdateStickerPackAdded{`,
		`UpdateStickerPackAdded:` + strings.Replace(fmt.Sprintf("%v", this.UpdateStickerPackAdded), "UpdateStickerPackAdded", "UpdateStickerPackAdded", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateSeqUpdate_UpdatePauseNotifications) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateSeqUpdate_UpdatePauseNotifications{`,
		`UpdatePauseNotifications:` + strings.Replace(fmt.Sprintf("%v", this.UpdatePauseNotifications), "UpdatePauseNotifications", "UpdatePauseNotifications", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateSeqUpdate_UpdateRestoreNotifications) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateSeqUpdate_UpdateRestoreNotifications{`,
		`UpdateRestoreNotifications:` + strings.Replace(fmt.Sprintf("%v", this.UpdateRestoreNotifications), "UpdateRestoreNotifications", "UpdateRestoreNotifications", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateSeqUpdate_UpdateTyping) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateSeqUpdate_UpdateTyping{`,
		`UpdateTyping:` + strings.Replace(fmt.Sprintf("%v", this.UpdateTyping), "UpdateTyping", "UpdateTyping", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateSeqUpdate_UpdateTypingStop) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateSeqUpdate_UpdateTypingStop{`,
		`UpdateTypingStop:` + strings.Replace(fmt.Sprintf("%v", this.UpdateTypingStop), "UpdateTypingStop", "UpdateTypingStop", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateSeqUpdate_UpdateUserOnline) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateSeqUpdate_UpdateUserOnline{`,
		`UpdateUserOnline:` + strings.Replace(fmt.Sprintf("%v", this.UpdateUserOnline), "UpdateUserOnline", "UpdateUserOnline", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateSeqUpdate_UpdateUserOffline) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateSeqUpdate_UpdateUserOffline{`,
		`UpdateUserOffline:` + strings.Replace(fmt.Sprintf("%v", this.UpdateUserOffline), "UpdateUserOffline", "UpdateUserOffline", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateSeqUpdate_UpdateUserLastSeen) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateSeqUpdate_UpdateUserLastSeen{`,
		`UpdateUserLastSeen:` + strings.Replace(fmt.Sprintf("%v", this.UpdateUserLastSeen), "UpdateUserLastSeen", "UpdateUserLastSeen", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateSeqUpdate_UpdateGroupOnline) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateSeqUpdate_UpdateGroupOnline{`,
		`UpdateGroupOnline:` + strings.Replace(fmt.Sprintf("%v", this.UpdateGroupOnline), "UpdateGroupOnline", "UpdateGroupOnline", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateSeqUpdate_UpdateEventBusDeviceConnected) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateSeqUpdate_UpdateEventBusDeviceConnected{`,
		`UpdateEventBusDeviceConnected:` + strings.Replace(fmt.Sprintf("%v", this.UpdateEventBusDeviceConnected), "UpdateEventBusDeviceConnected", "UpdateEventBusDeviceConnected", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateSeqUpdate_UpdateEventBusDeviceDisconnected) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateSeqUpdate_UpdateEventBusDeviceDisconnected{`,
		`UpdateEventBusDeviceDisconnected:` + strings.Replace(fmt.Sprintf("%v", this.UpdateEventBusDeviceDisconnected), "UpdateEventBusDeviceDisconnected", "UpdateEventBusDeviceDisconnected", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateSeqUpdate_UpdateEventBusMessage) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateSeqUpdate_UpdateEventBusMessage{`,
		`UpdateEventBusMessage:` + strings.Replace(fmt.Sprintf("%v", this.UpdateEventBusMessage), "UpdateEventBusMessage", "UpdateEventBusMessage", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateSeqUpdate_UpdateEventBusDisposed) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateSeqUpdate_UpdateEventBusDisposed{`,
		`UpdateEventBusDisposed:` + strings.Replace(fmt.Sprintf("%v", this.UpdateEventBusDisposed), "UpdateEventBusDisposed", "UpdateEventBusDisposed", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateSeqUpdate_UpdateIncomingCallDeprecated) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateSeqUpdate_UpdateIncomingCallDeprecated{`,
		`UpdateIncomingCallDeprecated:` + strings.Replace(fmt.Sprintf("%v", this.UpdateIncomingCallDeprecated), "UpdateIncomingCallDeprecated", "UpdateIncomingCallDeprecated", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateSeqUpdate_UpdateIncomingCall) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateSeqUpdate_UpdateIncomingCall{`,
		`UpdateIncomingCall:` + strings.Replace(fmt.Sprintf("%v", this.UpdateIncomingCall), "UpdateIncomingCall", "UpdateIncomingCall", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateSeqUpdate_UpdateCallHandled) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateSeqUpdate_UpdateCallHandled{`,
		`UpdateCallHandled:` + strings.Replace(fmt.Sprintf("%v", this.UpdateCallHandled), "UpdateCallHandled", "UpdateCallHandled", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateSeqUpdate_UpdateCallDisposed) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateSeqUpdate_UpdateCallDisposed{`,
		`UpdateCallDisposed:` + strings.Replace(fmt.Sprintf("%v", this.UpdateCallDisposed), "UpdateCallDisposed", "UpdateCallDisposed", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateSeqUpdate_UpdateParameterChanged) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateSeqUpdate_UpdateParameterChanged{`,
		`UpdateParameterChanged:` + strings.Replace(fmt.Sprintf("%v", this.UpdateParameterChanged), "UpdateParameterChanged", "UpdateParameterChanged", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateSeqUpdate_UpdateRawUpdate) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateSeqUpdate_UpdateRawUpdate{`,
		`UpdateRawUpdate:` + strings.Replace(fmt.Sprintf("%v", this.UpdateRawUpdate), "UpdateRawUpdate", "UpdateRawUpdate", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateSeqUpdate_UpdateEmptyUpdate) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateSeqUpdate_UpdateEmptyUpdate{`,
		`UpdateEmptyUpdate:` + strings.Replace(fmt.Sprintf("%v", this.UpdateEmptyUpdate), "UpdateEmptyUpdate", "UpdateEmptyUpdate", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateSeqUpdate_UpdateCountersChanged) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateSeqUpdate_UpdateCountersChanged{`,
		`UpdateCountersChanged:` + strings.Replace(fmt.Sprintf("%v", this.UpdateCountersChanged), "UpdateCountersChanged", "UpdateCountersChanged", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateSeqUpdate_UpdateConfig) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateSeqUpdate_UpdateConfig{`,
		`UpdateConfig:` + strings.Replace(fmt.Sprintf("%v", this.UpdateConfig), "UpdateConfig", "UpdateConfig", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateSeqUpdate_UpdateSpaceModified) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateSeqUpdate_UpdateSpaceModified{`,
		`UpdateSpaceModified:` + strings.Replace(fmt.Sprintf("%v", this.UpdateSpaceModified), "UpdateSpaceModified", "UpdateSpaceModified", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateSeqUpdate_UpdateSpaceMemberModified) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateSeqUpdate_UpdateSpaceMemberModified{`,
		`UpdateSpaceMemberModified:` + strings.Replace(fmt.Sprintf("%v", this.UpdateSpaceMemberModified), "UpdateSpaceMemberModified", "UpdateSpaceMemberModified", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateSeqUpdate_UpdateMessageRejectedByHook) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateSeqUpdate_UpdateMessageRejectedByHook{`,
		`UpdateMessageRejectedByHook:` + strings.Replace(fmt.Sprintf("%v", this.UpdateMessageRejectedByHook), "UpdateMessageRejectedByHook", "UpdateMessageRejectedByHook", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateSeqUpdate_UpdateMessageEditRejectedByHook) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateSeqUpdate_UpdateMessageEditRejectedByHook{`,
		`UpdateMessageEditRejectedByHook:` + strings.Replace(fmt.Sprintf("%v", this.UpdateMessageEditRejectedByHook), "UpdateMessageEditRejectedByHook", "UpdateMessageEditRejectedByHook", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateSeqUpdate_UpdateUser) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateSeqUpdate_UpdateUser{`,
		`UpdateUser:` + strings.Replace(fmt.Sprintf("%v", this.UpdateUser), "UpdateUser", "UpdateUser", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateSeqUpdate_UpdateFeatureFlagChanged) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateSeqUpdate_UpdateFeatureFlagChanged{`,
		`UpdateFeatureFlagChanged:` + strings.Replace(fmt.Sprintf("%v", this.UpdateFeatureFlagChanged), "UpdateFeatureFlagChanged", "UpdateFeatureFlagChanged", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateSeqUpdate_UpdateThreadCreated) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateSeqUpdate_UpdateThreadCreated{`,
		`UpdateThreadCreated:` + strings.Replace(fmt.Sprintf("%v", this.UpdateThreadCreated), "UpdateThreadCreated", "UpdateThreadCreated", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateSeqUpdate_UpdateThreadLifted) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateSeqUpdate_UpdateThreadLifted{`,
		`UpdateThreadLifted:` + strings.Replace(fmt.Sprintf("%v", this.UpdateThreadLifted), "UpdateThreadLifted", "UpdateThreadLifted", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateSeqUpdate_UpdateGroup) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateSeqUpdate_UpdateGroup{`,
		`UpdateGroup:` + strings.Replace(fmt.Sprintf("%v", this.UpdateGroup), "UpdateGroup", "UpdateGroup", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateSeqUpdate_UpdateGroupMemberInvited) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateSeqUpdate_UpdateGroupMemberInvited{`,
		`UpdateGroupMemberInvited:` + strings.Replace(fmt.Sprintf("%v", this.UpdateGroupMemberInvited), "UpdateGroupMemberInvited", "UpdateGroupMemberInvited", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateSeqUpdate_MessageReactionsUpdate) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateSeqUpdate_MessageReactionsUpdate{`,
		`MessageReactionsUpdate:` + strings.Replace(fmt.Sprintf("%v", this.MessageReactionsUpdate), "MessageReactionsUpdate", "MessageReactionsUpdate", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateFatSeqUpdate) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForUsers := "[]*User{"
	for _, f := range this.Users {
		repeatedStringForUsers += strings.Replace(fmt.Sprintf("%v", f), "User", "User", 1) + ","
	}
	repeatedStringForUsers += "}"
	repeatedStringForGroups := "[]*Group{"
	for _, f := range this.Groups {
		repeatedStringForGroups += strings.Replace(fmt.Sprintf("%v", f), "Group", "Group", 1) + ","
	}
	repeatedStringForGroups += "}"
	s := strings.Join([]string{`&UpdateFatSeqUpdate{`,
		`Seq:` + fmt.Sprintf("%v", this.Seq) + `,`,
		`State:` + fmt.Sprintf("%v", this.State) + `,`,
		`UpdateHeader:` + fmt.Sprintf("%v", this.UpdateHeader) + `,`,
		`Update:` + fmt.Sprintf("%v", this.Update) + `,`,
		`Users:` + repeatedStringForUsers + `,`,
		`Groups:` + repeatedStringForGroups + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateWeakUpdate) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateWeakUpdate{`,
		`Date:` + fmt.Sprintf("%v", this.Date) + `,`,
		`UpdateHeader:` + fmt.Sprintf("%v", this.UpdateHeader) + `,`,
		`Update:` + fmt.Sprintf("%v", this.Update) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateWeakFatUpdate) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForUsers := "[]*User{"
	for _, f := range this.Users {
		repeatedStringForUsers += strings.Replace(fmt.Sprintf("%v", f), "User", "User", 1) + ","
	}
	repeatedStringForUsers += "}"
	repeatedStringForGroups := "[]*Group{"
	for _, f := range this.Groups {
		repeatedStringForGroups += strings.Replace(fmt.Sprintf("%v", f), "Group", "Group", 1) + ","
	}
	repeatedStringForGroups += "}"
	s := strings.Join([]string{`&UpdateWeakFatUpdate{`,
		`Date:` + fmt.Sprintf("%v", this.Date) + `,`,
		`UpdateHeader:` + fmt.Sprintf("%v", this.UpdateHeader) + `,`,
		`Update:` + fmt.Sprintf("%v", this.Update) + `,`,
		`Users:` + repeatedStringForUsers + `,`,
		`Groups:` + repeatedStringForGroups + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateSeqUpdateTooLong) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateSeqUpdateTooLong{`,
		`}`,
	}, "")
	return s
}
func (this *UpdateContainer) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateContainer{`,
		`UpdateHeader:` + fmt.Sprintf("%v", this.UpdateHeader) + `,`,
		`Update:` + fmt.Sprintf("%v", this.Update) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateCombinedUpdate) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForUsers := "[]*User{"
	for _, f := range this.Users {
		repeatedStringForUsers += strings.Replace(fmt.Sprintf("%v", f), "User", "User", 1) + ","
	}
	repeatedStringForUsers += "}"
	repeatedStringForGroups := "[]*Group{"
	for _, f := range this.Groups {
		repeatedStringForGroups += strings.Replace(fmt.Sprintf("%v", f), "Group", "Group", 1) + ","
	}
	repeatedStringForGroups += "}"
	repeatedStringForUpdates := "[]*UpdateContainer{"
	for _, f := range this.Updates {
		repeatedStringForUpdates += strings.Replace(f.String(), "UpdateContainer", "UpdateContainer", 1) + ","
	}
	repeatedStringForUpdates += "}"
	repeatedStringForMessages := "[]*HistoryMessage{"
	for _, f := range this.Messages {
		repeatedStringForMessages += strings.Replace(fmt.Sprintf("%v", f), "HistoryMessage", "HistoryMessage", 1) + ","
	}
	repeatedStringForMessages += "}"
	s := strings.Join([]string{`&UpdateCombinedUpdate{`,
		`SeqStart:` + fmt.Sprintf("%v", this.SeqStart) + `,`,
		`SeqEnd:` + fmt.Sprintf("%v", this.SeqEnd) + `,`,
		`State:` + fmt.Sprintf("%v", this.State) + `,`,
		`Users:` + repeatedStringForUsers + `,`,
		`Groups:` + repeatedStringForGroups + `,`,
		`Updates:` + repeatedStringForUpdates + `,`,
		`Messages:` + repeatedStringForMessages + `,`,
		`}`,
	}, "")
	return s
}
func (this *RequestGetState) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RequestGetState{`,
		`Optimizations:` + fmt.Sprintf("%v", this.Optimizations) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RequestGetDifference) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RequestGetDifference{`,
		`Seq:` + fmt.Sprintf("%v", this.Seq) + `,`,
		`State:` + fmt.Sprintf("%v", this.State) + `,`,
		`Optimizations:` + fmt.Sprintf("%v", this.Optimizations) + `,`,
		`ConfigHash:` + strings.Replace(fmt.Sprintf("%v", this.ConfigHash), "Int64Value", "types.Int64Value", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ResponseGetDifference) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForUpdates := "[]*UpdateSeqUpdate{"
	for _, f := range this.Updates {
		repeatedStringForUpdates += strings.Replace(f.String(), "UpdateSeqUpdate", "UpdateSeqUpdate", 1) + ","
	}
	repeatedStringForUpdates += "}"
	repeatedStringForMessages := "[]*HistoryMessage{"
	for _, f := range this.Messages {
		repeatedStringForMessages += strings.Replace(fmt.Sprintf("%v", f), "HistoryMessage", "HistoryMessage", 1) + ","
	}
	repeatedStringForMessages += "}"
	repeatedStringForUsersRefs := "[]*UserOutPeer{"
	for _, f := range this.UsersRefs {
		repeatedStringForUsersRefs += strings.Replace(fmt.Sprintf("%v", f), "UserOutPeer", "UserOutPeer", 1) + ","
	}
	repeatedStringForUsersRefs += "}"
	repeatedStringForGroupsRefs := "[]*GroupOutPeer{"
	for _, f := range this.GroupsRefs {
		repeatedStringForGroupsRefs += strings.Replace(fmt.Sprintf("%v", f), "GroupOutPeer", "GroupOutPeer", 1) + ","
	}
	repeatedStringForGroupsRefs += "}"
	s := strings.Join([]string{`&ResponseGetDifference{`,
		`Seq:` + fmt.Sprintf("%v", this.Seq) + `,`,
		`State:` + fmt.Sprintf("%v", this.State) + `,`,
		`Updates:` + repeatedStringForUpdates + `,`,
		`NeedMore:` + fmt.Sprintf("%v", this.NeedMore) + `,`,
		`Messages:` + repeatedStringForMessages + `,`,
		`UsersRefs:` + repeatedStringForUsersRefs + `,`,
		`GroupsRefs:` + repeatedStringForGroupsRefs + `,`,
		`Config:` + strings.Replace(fmt.Sprintf("%v", this.Config), "Config", "Config", 1) + `,`,
		`ConfigHash:` + strings.Replace(fmt.Sprintf("%v", this.ConfigHash), "Int64Value", "types.Int64Value", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RequestGetDialogsDifference) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RequestGetDialogsDifference{`,
		`Clock:` + fmt.Sprintf("%v", this.Clock) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ResponseGetDialogsDifference) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForDialogs := "[]*Dialog{"
	for _, f := range this.Dialogs {
		repeatedStringForDialogs += strings.Replace(fmt.Sprintf("%v", f), "Dialog", "Dialog", 1) + ","
	}
	repeatedStringForDialogs += "}"
	repeatedStringForGroupPeers := "[]*GroupOutPeer{"
	for _, f := range this.GroupPeers {
		repeatedStringForGroupPeers += strings.Replace(fmt.Sprintf("%v", f), "GroupOutPeer", "GroupOutPeer", 1) + ","
	}
	repeatedStringForGroupPeers += "}"
	repeatedStringForUserPeers := "[]*UserOutPeer{"
	for _, f := range this.UserPeers {
		repeatedStringForUserPeers += strings.Replace(fmt.Sprintf("%v", f), "UserOutPeer", "UserOutPeer", 1) + ","
	}
	repeatedStringForUserPeers += "}"
	s := strings.Join([]string{`&ResponseGetDialogsDifference{`,
		`Dialogs:` + repeatedStringForDialogs + `,`,
		`GroupPeers:` + repeatedStringForGroupPeers + `,`,
		`UserPeers:` + repeatedStringForUserPeers + `,`,
		`}`,
	}, "")
	return s
}
func (this *GroupMembersSubset) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GroupMembersSubset{`,
		`GroupPeer:` + strings.Replace(fmt.Sprintf("%v", this.GroupPeer), "GroupOutPeer", "GroupOutPeer", 1) + `,`,
		`MemberIds:` + fmt.Sprintf("%v", this.MemberIds) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RequestGetReferencedEntitites) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForUsers := "[]*UserOutPeer{"
	for _, f := range this.Users {
		repeatedStringForUsers += strings.Replace(fmt.Sprintf("%v", f), "UserOutPeer", "UserOutPeer", 1) + ","
	}
	repeatedStringForUsers += "}"
	repeatedStringForMids := "[]*UUIDValue{"
	for _, f := range this.Mids {
		repeatedStringForMids += strings.Replace(fmt.Sprintf("%v", f), "UUIDValue", "UUIDValue", 1) + ","
	}
	repeatedStringForMids += "}"
	repeatedStringForGroupMembers := "[]*GroupMembersSubset{"
	for _, f := range this.GroupMembers {
		repeatedStringForGroupMembers += strings.Replace(f.String(), "GroupMembersSubset", "GroupMembersSubset", 1) + ","
	}
	repeatedStringForGroupMembers += "}"
	repeatedStringForGroups := "[]*GroupOutPeer{"
	for _, f := range this.Groups {
		repeatedStringForGroups += strings.Replace(fmt.Sprintf("%v", f), "GroupOutPeer", "GroupOutPeer", 1) + ","
	}
	repeatedStringForGroups += "}"
	s := strings.Join([]string{`&RequestGetReferencedEntitites{`,
		`Users:` + repeatedStringForUsers + `,`,
		`Mids:` + repeatedStringForMids + `,`,
		`GroupMembers:` + repeatedStringForGroupMembers + `,`,
		`Groups:` + repeatedStringForGroups + `,`,
		`}`,
	}, "")
	return s
}
func (this *ResponseGetReferencedEntitites) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForUsers := "[]*User{"
	for _, f := range this.Users {
		repeatedStringForUsers += strings.Replace(fmt.Sprintf("%v", f), "User", "User", 1) + ","
	}
	repeatedStringForUsers += "}"
	repeatedStringForGroups := "[]*Group{"
	for _, f := range this.Groups {
		repeatedStringForGroups += strings.Replace(fmt.Sprintf("%v", f), "Group", "Group", 1) + ","
	}
	repeatedStringForGroups += "}"
	repeatedStringForMessages := "[]*HistoryMessage{"
	for _, f := range this.Messages {
		repeatedStringForMessages += strings.Replace(fmt.Sprintf("%v", f), "HistoryMessage", "HistoryMessage", 1) + ","
	}
	repeatedStringForMessages += "}"
	s := strings.Join([]string{`&ResponseGetReferencedEntitites{`,
		`Users:` + repeatedStringForUsers + `,`,
		`Groups:` + repeatedStringForGroups + `,`,
		`Messages:` + repeatedStringForMessages + `,`,
		`}`,
	}, "")
	return s
}
func (this *RequestGetPartialPeerInfo) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForUsers := "[]*UserOutPeer{"
	for _, f := range this.Users {
		repeatedStringForUsers += strings.Replace(fmt.Sprintf("%v", f), "UserOutPeer", "UserOutPeer", 1) + ","
	}
	repeatedStringForUsers += "}"
	repeatedStringForGroups := "[]*GroupOutPeer{"
	for _, f := range this.Groups {
		repeatedStringForGroups += strings.Replace(fmt.Sprintf("%v", f), "GroupOutPeer", "GroupOutPeer", 1) + ","
	}
	repeatedStringForGroups += "}"
	repeatedStringForGroupMembers := "[]*GroupMembersSubset{"
	for _, f := range this.GroupMembers {
		repeatedStringForGroupMembers += strings.Replace(f.String(), "GroupMembersSubset", "GroupMembersSubset", 1) + ","
	}
	repeatedStringForGroupMembers += "}"
	s := strings.Join([]string{`&RequestGetPartialPeerInfo{`,
		`Users:` + repeatedStringForUsers + `,`,
		`Groups:` + repeatedStringForGroups + `,`,
		`GroupMembers:` + repeatedStringForGroupMembers + `,`,
		`}`,
	}, "")
	return s
}
func (this *ResponseGetPartialPeerInfo) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForUsers := "[]*UserPartialInfo{"
	for _, f := range this.Users {
		repeatedStringForUsers += strings.Replace(fmt.Sprintf("%v", f), "UserPartialInfo", "UserPartialInfo", 1) + ","
	}
	repeatedStringForUsers += "}"
	repeatedStringForGroups := "[]*GroupPartialInfo{"
	for _, f := range this.Groups {
		repeatedStringForGroups += strings.Replace(fmt.Sprintf("%v", f), "GroupPartialInfo", "GroupPartialInfo", 1) + ","
	}
	repeatedStringForGroups += "}"
	s := strings.Join([]string{`&ResponseGetPartialPeerInfo{`,
		`Users:` + repeatedStringForUsers + `,`,
		`Groups:` + repeatedStringForGroups + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateRawUpdate) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateRawUpdate{`,
		`Type:` + strings.Replace(fmt.Sprintf("%v", this.Type), "StringValue", "types.StringValue", 1) + `,`,
		`Bytes:` + fmt.Sprintf("%v", this.Bytes) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateEmptyUpdate) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateEmptyUpdate{`,
		`}`,
	}, "")
	return s
}
func (this *RequestSubscribeToOnline) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForUsers := "[]*UserOutPeer{"
	for _, f := range this.Users {
		repeatedStringForUsers += strings.Replace(fmt.Sprintf("%v", f), "UserOutPeer", "UserOutPeer", 1) + ","
	}
	repeatedStringForUsers += "}"
	s := strings.Join([]string{`&RequestSubscribeToOnline{`,
		`Users:` + repeatedStringForUsers + `,`,
		`}`,
	}, "")
	return s
}
func (this *RequestSubscribeFromOnline) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForUsers := "[]*UserOutPeer{"
	for _, f := range this.Users {
		repeatedStringForUsers += strings.Replace(fmt.Sprintf("%v", f), "UserOutPeer", "UserOutPeer", 1) + ","
	}
	repeatedStringForUsers += "}"
	s := strings.Join([]string{`&RequestSubscribeFromOnline{`,
		`Users:` + repeatedStringForUsers + `,`,
		`}`,
	}, "")
	return s
}
func (this *RequestSubscribeToGroupOnline) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForGroups := "[]*GroupOutPeer{"
	for _, f := range this.Groups {
		repeatedStringForGroups += strings.Replace(fmt.Sprintf("%v", f), "GroupOutPeer", "GroupOutPeer", 1) + ","
	}
	repeatedStringForGroups += "}"
	s := strings.Join([]string{`&RequestSubscribeToGroupOnline{`,
		`Groups:` + repeatedStringForGroups + `,`,
		`}`,
	}, "")
	return s
}
func (this *RequestSubscribeFromGroupOnline) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForGroups := "[]*GroupOutPeer{"
	for _, f := range this.Groups {
		repeatedStringForGroups += strings.Replace(fmt.Sprintf("%v", f), "GroupOutPeer", "GroupOutPeer", 1) + ","
	}
	repeatedStringForGroups += "}"
	s := strings.Join([]string{`&RequestSubscribeFromGroupOnline{`,
		`Groups:` + repeatedStringForGroups + `,`,
		`}`,
	}, "")
	return s
}
func (this *SeqUpdateBox) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SeqUpdateBox{`,
		`Seq:` + fmt.Sprintf("%v", this.Seq) + `,`,
		`State:` + fmt.Sprintf("%v", this.State) + `,`,
		`Update:` + strings.Replace(fmt.Sprintf("%v", this.Update), "BytesValue", "types.BytesValue", 1) + `,`,
		`UnboxedUpdate:` + strings.Replace(this.UnboxedUpdate.String(), "UpdateSeqUpdate", "UpdateSeqUpdate", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PeersList) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForPeers := "[]*Peer{"
	for _, f := range this.Peers {
		repeatedStringForPeers += strings.Replace(fmt.Sprintf("%v", f), "Peer", "Peer", 1) + ","
	}
	repeatedStringForPeers += "}"
	s := strings.Join([]string{`&PeersList{`,
		`Peers:` + repeatedStringForPeers + `,`,
		`}`,
	}, "")
	return s
}
func (this *WeakUpdateCommand) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&WeakUpdateCommand{`,
		`Command:` + fmt.Sprintf("%v", this.Command) + `,`,
		`}`,
	}, "")
	return s
}
func (this *WeakUpdateCommand_ChangeMyOnline_) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&WeakUpdateCommand_ChangeMyOnline_{`,
		`ChangeMyOnline:` + strings.Replace(fmt.Sprintf("%v", this.ChangeMyOnline), "WeakUpdateCommand_ChangeMyOnline", "WeakUpdateCommand_ChangeMyOnline", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *WeakUpdateCommand_SubscribeToOnlines) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&WeakUpdateCommand_SubscribeToOnlines{`,
		`SubscribeToOnlines:` + strings.Replace(fmt.Sprintf("%v", this.SubscribeToOnlines), "PeersList", "PeersList", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *WeakUpdateCommand_UnsubscribeFromOnlines) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&WeakUpdateCommand_UnsubscribeFromOnlines{`,
		`UnsubscribeFromOnlines:` + strings.Replace(fmt.Sprintf("%v", this.UnsubscribeFromOnlines), "PeersList", "PeersList", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *WeakUpdateCommand_UnsubscribeFromAllOnlines) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&WeakUpdateCommand_UnsubscribeFromAllOnlines{`,
		`UnsubscribeFromAllOnlines:` + strings.Replace(fmt.Sprintf("%v", this.UnsubscribeFromAllOnlines), "Empty", "types.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *WeakUpdateCommand_ChangeMyTyping_) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&WeakUpdateCommand_ChangeMyTyping_{`,
		`ChangeMyTyping:` + strings.Replace(fmt.Sprintf("%v", this.ChangeMyTyping), "WeakUpdateCommand_ChangeMyTyping", "WeakUpdateCommand_ChangeMyTyping", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *WeakUpdateCommand_SubscribeToTypings) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&WeakUpdateCommand_SubscribeToTypings{`,
		`SubscribeToTypings:` + strings.Replace(fmt.Sprintf("%v", this.SubscribeToTypings), "PeersList", "PeersList", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *WeakUpdateCommand_UnsubscribeFromTypings) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&WeakUpdateCommand_UnsubscribeFromTypings{`,
		`UnsubscribeFromTypings:` + strings.Replace(fmt.Sprintf("%v", this.UnsubscribeFromTypings), "PeersList", "PeersList", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *WeakUpdateCommand_UnsubscribeFromAllTypings) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&WeakUpdateCommand_UnsubscribeFromAllTypings{`,
		`UnsubscribeFromAllTypings:` + strings.Replace(fmt.Sprintf("%v", this.UnsubscribeFromAllTypings), "Empty", "types.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *WeakUpdateCommand_ChangeMyOnline) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&WeakUpdateCommand_ChangeMyOnline{`,
		`Online:` + fmt.Sprintf("%v", this.Online) + `,`,
		`}`,
	}, "")
	return s
}
func (this *WeakUpdateCommand_ChangeMyTyping) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&WeakUpdateCommand_ChangeMyTyping{`,
		`Peer:` + strings.Replace(fmt.Sprintf("%v", this.Peer), "Peer", "Peer", 1) + `,`,
		`Type:` + fmt.Sprintf("%v", this.Type) + `,`,
		`Start:` + fmt.Sprintf("%v", this.Start) + `,`,
		`}`,
	}, "")
	return s
}
func (this *WeakUpdateBox) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&WeakUpdateBox{`,
		`Updatebox:` + fmt.Sprintf("%v", this.Updatebox) + `,`,
		`}`,
	}, "")
	return s
}
func (this *WeakUpdateBox_TypingStart) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&WeakUpdateBox_TypingStart{`,
		`TypingStart:` + strings.Replace(fmt.Sprintf("%v", this.TypingStart), "UpdateTyping", "UpdateTyping", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *WeakUpdateBox_TypingStop) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&WeakUpdateBox_TypingStop{`,
		`TypingStop:` + strings.Replace(fmt.Sprintf("%v", this.TypingStop), "UpdateTypingStop", "UpdateTypingStop", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *WeakUpdateBox_UserLastSeen) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&WeakUpdateBox_UserLastSeen{`,
		`UserLastSeen:` + strings.Replace(fmt.Sprintf("%v", this.UserLastSeen), "UpdateUserLastSeen", "UpdateUserLastSeen", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *WeakUpdateBox_GroupOnline) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&WeakUpdateBox_GroupOnline{`,
		`GroupOnline:` + strings.Replace(fmt.Sprintf("%v", this.GroupOnline), "UpdateGroupOnline", "UpdateGroupOnline", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *WeakUpdateBox_ForceReload) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&WeakUpdateBox_ForceReload{`,
		`ForceReload:` + strings.Replace(fmt.Sprintf("%v", this.ForceReload), "WeakUpdateBox_UpdateForceReloadState", "WeakUpdateBox_UpdateForceReloadState", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *WeakUpdateBox_PermissionsChange) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&WeakUpdateBox_PermissionsChange{`,
		`PermissionsChange:` + strings.Replace(fmt.Sprintf("%v", this.PermissionsChange), "UpdatePermissionsChange", "UpdatePermissionsChange", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *WeakUpdateBox_UserStatusChange) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&WeakUpdateBox_UserStatusChange{`,
		`UserStatusChange:` + strings.Replace(fmt.Sprintf("%v", this.UserStatusChange), "UpdateUserStatusChanged", "UpdateUserStatusChanged", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *WeakUpdateBox_MessageReactionUpdate) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&WeakUpdateBox_MessageReactionUpdate{`,
		`MessageReactionUpdate:` + strings.Replace(fmt.Sprintf("%v", this.MessageReactionUpdate), "MessageReactionsUpdate", "MessageReactionsUpdate", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *WeakUpdateBox_Message) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&WeakUpdateBox_Message{`,
		`Message:` + strings.Replace(fmt.Sprintf("%v", this.Message), "UpdateMessage", "UpdateMessage", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *WeakUpdateBox_MessageContentChange) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&WeakUpdateBox_MessageContentChange{`,
		`MessageContentChange:` + strings.Replace(fmt.Sprintf("%v", this.MessageContentChange), "UpdateMessageContentChanged", "UpdateMessageContentChanged", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *WeakUpdateBox_MessageRead) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&WeakUpdateBox_MessageRead{`,
		`MessageRead:` + strings.Replace(fmt.Sprintf("%v", this.MessageRead), "UpdateMessageRead", "UpdateMessageRead", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *WeakUpdateBox_MessageReceived) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&WeakUpdateBox_MessageReceived{`,
		`MessageReceived:` + strings.Replace(fmt.Sprintf("%v", this.MessageReceived), "UpdateMessageReceived", "UpdateMessageReceived", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *WeakUpdateBox_MessageReadByMe) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&WeakUpdateBox_MessageReadByMe{`,
		`MessageReadByMe:` + strings.Replace(fmt.Sprintf("%v", this.MessageReadByMe), "UpdateMessageReadByMe", "UpdateMessageReadByMe", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *WeakUpdateBox_UpdateForceReloadState) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForFields := "[]*WeakUpdateBox_UpdateForceReloadState_ForceReloadField{"
	for _, f := range this.Fields {
		repeatedStringForFields += strings.Replace(fmt.Sprintf("%v", f), "WeakUpdateBox_UpdateForceReloadState_ForceReloadField", "WeakUpdateBox_UpdateForceReloadState_ForceReloadField", 1) + ","
	}
	repeatedStringForFields += "}"
	s := strings.Join([]string{`&WeakUpdateBox_UpdateForceReloadState{`,
		`Fields:` + repeatedStringForFields + `,`,
		`}`,
	}, "")
	return s
}
func (this *WeakUpdateBox_UpdateForceReloadState_ForceReloadField) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&WeakUpdateBox_UpdateForceReloadState_ForceReloadField{`,
		`Field:` + fmt.Sprintf("%v", this.Field) + `,`,
		`}`,
	}, "")
	return s
}
func (this *WeakUpdateBox_UpdateForceReloadState_ForceReloadField_ReloadDialogs) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&WeakUpdateBox_UpdateForceReloadState_ForceReloadField_ReloadDialogs{`,
		`ReloadDialogs:` + strings.Replace(fmt.Sprintf("%v", this.ReloadDialogs), "Empty", "types.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *WeakUpdateBox_UpdateForceReloadState_ForceReloadField_ReloadContacts) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&WeakUpdateBox_UpdateForceReloadState_ForceReloadField_ReloadContacts{`,
		`ReloadContacts:` + strings.Replace(fmt.Sprintf("%v", this.ReloadContacts), "Empty", "types.Empty", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *WeakUpdateBox_UpdateForceReloadState_ForceReloadField_ReloadHistory) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&WeakUpdateBox_UpdateForceReloadState_ForceReloadField_ReloadHistory{`,
		`ReloadHistory:` + strings.Replace(fmt.Sprintf("%v", this.ReloadHistory), "PeersList", "PeersList", 1) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringSequenceAndUpdates(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *UpdateSeqUpdate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSequenceAndUpdates
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateSeqUpdate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateSeqUpdate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Seq", wireType)
			}
			m.Seq = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSequenceAndUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Seq |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSequenceAndUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.State = append(m.State[:0], dAtA[iNdEx:postIndex]...)
			if m.State == nil {
				m.State = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateHeader", wireType)
			}
			m.UpdateHeader = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSequenceAndUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UpdateHeader |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateForceReloadState", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSequenceAndUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &UpdateForceReloadState{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Update = &UpdateSeqUpdate_UpdateForceReloadState{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateUserAvatarChanged", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSequenceAndUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &UpdateUserAvatarChanged{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Update = &UpdateSeqUpdate_UpdateUserAvatarChanged{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateUserNameChanged", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSequenceAndUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &UpdateUserNameChanged{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Update = &UpdateSeqUpdate_UpdateUserNameChanged{v}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateUserLocalNameChanged", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSequenceAndUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &UpdateUserLocalNameChanged{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Update = &UpdateSeqUpdate_UpdateUserLocalNameChanged{v}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateUserContactsChanged", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSequenceAndUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &UpdateUserContactsChanged{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Update = &UpdateSeqUpdate_UpdateUserContactsChanged{v}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateUserNickChanged", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSequenceAndUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &UpdateUserNickChanged{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Update = &UpdateSeqUpdate_UpdateUserNickChanged{v}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateUserAboutChanged", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSequenceAndUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &UpdateUserAboutChanged{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Update = &UpdateSeqUpdate_UpdateUserAboutChanged{v}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateUserPreferredLanguagesChanged", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSequenceAndUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &UpdateUserPreferredLanguagesChanged{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Update = &UpdateSeqUpdate_UpdateUserPreferredLanguagesChanged{v}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateUserTimeZoneChanged", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSequenceAndUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &UpdateUserTimeZoneChanged{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Update = &UpdateSeqUpdate_UpdateUserTimeZoneChanged{v}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateUserBotCommandsChanged", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSequenceAndUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &UpdateUserBotCommandsChanged{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Update = &UpdateSeqUpdate_UpdateUserBotCommandsChanged{v}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateUserExtChanged", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSequenceAndUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &UpdateUserExtChanged{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Update = &UpdateSeqUpdate_UpdateUserExtChanged{v}
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateUserFullExtChanged", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSequenceAndUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &UpdateUserFullExtChanged{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Update = &UpdateSeqUpdate_UpdateUserFullExtChanged{v}
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateUserSexChanged", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSequenceAndUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &UpdateUserSexChanged{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Update = &UpdateSeqUpdate_UpdateUserSexChanged{v}
			iNdEx = postIndex
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateUserCustomProfileChanged", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSequenceAndUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &UpdateUserCustomProfileChanged{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Update = &UpdateSeqUpdate_UpdateUserCustomProfileChanged{v}
			iNdEx = postIndex
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateUserStatusChanged", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSequenceAndUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &UpdateUserStatusChanged{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Update = &UpdateSeqUpdate_UpdateUserStatusChanged{v}
			iNdEx = postIndex
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateContactRegistered", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSequenceAndUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &UpdateContactRegistered{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Update = &UpdateSeqUpdate_UpdateContactRegistered{v}
			iNdEx = postIndex
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateContactsAdded", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSequenceAndUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &UpdateContactsAdded{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Update = &UpdateSeqUpdate_UpdateContactsAdded{v}
			iNdEx = postIndex
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateContactsAddTaskSuspended", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSequenceAndUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &UpdateContactsAddTaskSuspended{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Update = &UpdateSeqUpdate_UpdateContactsAddTaskSuspended{v}
			iNdEx = postIndex
		case 22:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateContactsRemoved", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSequenceAndUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &UpdateContactsRemoved{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Update = &UpdateSeqUpdate_UpdateContactsRemoved{v}
			iNdEx = postIndex
		case 23:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateUserBlocked", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSequenceAndUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &UpdateUserBlocked{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Update = &UpdateSeqUpdate_UpdateUserBlocked{v}
			iNdEx = postIndex
		case 24:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateUserUnblocked", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSequenceAndUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &UpdateUserUnblocked{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Update = &UpdateSeqUpdate_UpdateUserUnblocked{v}
			iNdEx = postIndex
		case 25:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateInteractiveMediaEvent", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSequenceAndUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &UpdateInteractiveMediaEvent{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Update = &UpdateSeqUpdate_UpdateInteractiveMediaEvent{v}
			iNdEx = postIndex
		case 26:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateMessage", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSequenceAndUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &UpdateMessage{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Update = &UpdateSeqUpdate_UpdateMessage{v}
			iNdEx = postIndex
		case 27:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateMessageContentChanged", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSequenceAndUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &UpdateMessageContentChanged{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Update = &UpdateSeqUpdate_UpdateMessageContentChanged{v}
			iNdEx = postIndex
		case 28:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateMessageSent", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSequenceAndUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &UpdateMessageSent{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Update = &UpdateSeqUpdate_UpdateMessageSent{v}
			iNdEx = postIndex
		case 29:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateMessageReceived", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSequenceAndUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &UpdateMessageReceived{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Update = &UpdateSeqUpdate_UpdateMessageReceived{v}
			iNdEx = postIndex
		case 30:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateMessageRead", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSequenceAndUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &UpdateMessageRead{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Update = &UpdateSeqUpdate_UpdateMessageRead{v}
			iNdEx = postIndex
		case 31:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateMessageReadByMe", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSequenceAndUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &UpdateMessageReadByMe{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Update = &UpdateSeqUpdate_UpdateMessageReadByMe{v}
			iNdEx = postIndex
		case 32:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateMessageDelete", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSequenceAndUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &UpdateMessageDelete{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Update = &UpdateSeqUpdate_UpdateMessageDelete{v}
			iNdEx = postIndex
		case 33:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateChatClear", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSequenceAndUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &UpdateChatClear{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Update = &UpdateSeqUpdate_UpdateChatClear{v}
			iNdEx = postIndex
		case 34:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateChatDelete", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSequenceAndUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &UpdateChatDelete{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Update = &UpdateSeqUpdate_UpdateChatDelete{v}
			iNdEx = postIndex
		case 35:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateChatArchive", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSequenceAndUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &UpdateChatArchive{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Update = &UpdateSeqUpdate_UpdateChatArchive{v}
			iNdEx = postIndex
		case 36:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateChatGroupsChanged", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSequenceAndUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &UpdateChatGroupsChanged{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Update = &UpdateSeqUpdate_UpdateChatGroupsChanged{v}
			iNdEx = postIndex
		case 37:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateReactionsUpdate", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSequenceAndUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &UpdateReactionsUpdate{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Update = &UpdateSeqUpdate_UpdateReactionsUpdate{v}
			iNdEx = postIndex
		case 38:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateDialogFavouriteChanged", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSequenceAndUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &UpdateDialogFavouriteChanged{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Update = &UpdateSeqUpdate_UpdateDialogFavouriteChanged{v}
			iNdEx = postIndex
		case 39:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatePinnedMessagesChanged", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSequenceAndUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &UpdatePinnedMessagesChanged{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Update = &UpdateSeqUpdate_UpdatePinnedMessagesChanged{v}
			iNdEx = postIndex
		case 40:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateGroupTitleChanged", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSequenceAndUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &UpdateGroupTitleChanged{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Update = &UpdateSeqUpdate_UpdateGroupTitleChanged{v}
			iNdEx = postIndex
		case 41:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateGroupAvatarChanged", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSequenceAndUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &UpdateGroupAvatarChanged{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Update = &UpdateSeqUpdate_UpdateGroupAvatarChanged{v}
			iNdEx = postIndex
		case 43:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateGroupAboutChanged", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSequenceAndUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &UpdateGroupAboutChanged{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Update = &UpdateSeqUpdate_UpdateGroupAboutChanged{v}
			iNdEx = postIndex
		case 44:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateGroupOwnerChanged", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSequenceAndUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &UpdateGroupOwnerChanged{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Update = &UpdateSeqUpdate_UpdateGroupOwnerChanged{v}
			iNdEx = postIndex
		case 51:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateGroupMembersUpdated", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSequenceAndUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &UpdateGroupMembersUpdated{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Update = &UpdateSeqUpdate_UpdateGroupMembersUpdated{v}
			iNdEx = postIndex
		case 52:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateGroupMemberDiff", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSequenceAndUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &UpdateGroupMemberDiff{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Update = &UpdateSeqUpdate_UpdateGroupMemberDiff{v}
			iNdEx = postIndex
		case 53:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateGroupMembersCountChanged", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSequenceAndUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &UpdateGroupMembersCountChanged{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Update = &UpdateSeqUpdate_UpdateGroupMembersCountChanged{v}
			iNdEx = postIndex
		case 55:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateGroupMemberPermissionsChanged", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSequenceAndUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &UpdateGroupMemberPermissionsChanged{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Update = &UpdateSeqUpdate_UpdateGroupMemberPermissionsChanged{v}
			iNdEx = postIndex
		case 56:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateGroupInviteObsolete", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSequenceAndUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &UpdateGroupInviteObsolete{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Update = &UpdateSeqUpdate_UpdateGroupInviteObsolete{v}
			iNdEx = postIndex
		case 57:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateGroupUserInvitedObsolete", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSequenceAndUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &UpdateGroupUserInvitedObsolete{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Update = &UpdateSeqUpdate_UpdateGroupUserInvitedObsolete{v}
			iNdEx = postIndex
		case 58:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateGroupUserLeaveObsolete", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSequenceAndUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &UpdateGroupUserLeaveObsolete{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Update = &UpdateSeqUpdate_UpdateGroupUserLeaveObsolete{v}
			iNdEx = postIndex
		case 59:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateGroupUserKickObsolete", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSequenceAndUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &UpdateGroupUserKickObsolete{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Update = &UpdateSeqUpdate_UpdateGroupUserKickObsolete{v}
			iNdEx = postIndex
		case 60:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateGroupMembersUpdateObsolete", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSequenceAndUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &UpdateGroupMembersUpdateObsolete{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Update = &UpdateSeqUpdate_UpdateGroupMembersUpdateObsolete{v}
			iNdEx = postIndex
		case 61:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateGroupTitleChangedObsolete", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSequenceAndUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &UpdateGroupTitleChangedObsolete{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Update = &UpdateSeqUpdate_UpdateGroupTitleChangedObsolete{v}
			iNdEx = postIndex
		case 63:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateGroupAboutChangedObsolete", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSequenceAndUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &UpdateGroupAboutChangedObsolete{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Update = &UpdateSeqUpdate_UpdateGroupAboutChangedObsolete{v}
			iNdEx = postIndex
		case 64:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateGroupAvatarChangedObsolete", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSequenceAndUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &UpdateGroupAvatarChangedObsolete{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Update = &UpdateSeqUpdate_UpdateGroupAvatarChangedObsolete{v}
			iNdEx = postIndex
		case 65:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateGroupShortnameChanged", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSequenceAndUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &UpdateGroupShortnameChanged{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Update = &UpdateSeqUpdate_UpdateGroupShortnameChanged{v}
			iNdEx = postIndex
		case 66:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateStickerCollectionsChanged", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSequenceAndUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &UpdateStickerCollectionsChanged{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Update = &UpdateSeqUpdate_UpdateStickerCollectionsChanged{v}
			iNdEx = postIndex
		case 67:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateStickerPackRemoved", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSequenceAndUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &UpdateStickerPackRemoved{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Update = &UpdateSeqUpdate_UpdateStickerPackRemoved{v}
			iNdEx = postIndex
		case 68:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateStickerPackAdded", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSequenceAndUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &UpdateStickerPackAdded{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Update = &UpdateSeqUpdate_UpdateStickerPackAdded{v}
			iNdEx = postIndex
		case 69:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatePauseNotifications", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSequenceAndUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &UpdatePauseNotifications{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Update = &UpdateSeqUpdate_UpdatePauseNotifications{v}
			iNdEx = postIndex
		case 70:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateRestoreNotifications", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSequenceAndUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &UpdateRestoreNotifications{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Update = &UpdateSeqUpdate_UpdateRestoreNotifications{v}
			iNdEx = postIndex
		case 71:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateTyping", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSequenceAndUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &UpdateTyping{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Update = &UpdateSeqUpdate_UpdateTyping{v}
			iNdEx = postIndex
		case 72:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateTypingStop", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSequenceAndUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &UpdateTypingStop{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Update = &UpdateSeqUpdate_UpdateTypingStop{v}
			iNdEx = postIndex
		case 73:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateUserOnline", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSequenceAndUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &UpdateUserOnline{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Update = &UpdateSeqUpdate_UpdateUserOnline{v}
			iNdEx = postIndex
		case 74:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateUserOffline", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSequenceAndUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &UpdateUserOffline{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Update = &UpdateSeqUpdate_UpdateUserOffline{v}
			iNdEx = postIndex
		case 75:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateUserLastSeen", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSequenceAndUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &UpdateUserLastSeen{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Update = &UpdateSeqUpdate_UpdateUserLastSeen{v}
			iNdEx = postIndex
		case 76:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateGroupOnline", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSequenceAndUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &UpdateGroupOnline{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Update = &UpdateSeqUpdate_UpdateGroupOnline{v}
			iNdEx = postIndex
		case 77:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateEventBusDeviceConnected", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSequenceAndUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &UpdateEventBusDeviceConnected{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Update = &UpdateSeqUpdate_UpdateEventBusDeviceConnected{v}
			iNdEx = postIndex
		case 78:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateEventBusDeviceDisconnected", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSequenceAndUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &UpdateEventBusDeviceDisconnected{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Update = &UpdateSeqUpdate_UpdateEventBusDeviceDisconnected{v}
			iNdEx = postIndex
		case 79:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateEventBusMessage", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSequenceAndUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &UpdateEventBusMessage{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Update = &UpdateSeqUpdate_UpdateEventBusMessage{v}
			iNdEx = postIndex
		case 80:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateEventBusDisposed", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSequenceAndUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &UpdateEventBusDisposed{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Update = &UpdateSeqUpdate_UpdateEventBusDisposed{v}
			iNdEx = postIndex
		case 81:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateIncomingCallDeprecated", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSequenceAndUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &UpdateIncomingCallDeprecated{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Update = &UpdateSeqUpdate_UpdateIncomingCallDeprecated{v}
			iNdEx = postIndex
		case 82:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateIncomingCall", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSequenceAndUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &UpdateIncomingCall{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Update = &UpdateSeqUpdate_UpdateIncomingCall{v}
			iNdEx = postIndex
		case 83:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateCallHandled", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSequenceAndUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &UpdateCallHandled{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Update = &UpdateSeqUpdate_UpdateCallHandled{v}
			iNdEx = postIndex
		case 84:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateCallDisposed", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSequenceAndUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &UpdateCallDisposed{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Update = &UpdateSeqUpdate_UpdateCallDisposed{v}
			iNdEx = postIndex
		case 85:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateParameterChanged", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSequenceAndUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &UpdateParameterChanged{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Update = &UpdateSeqUpdate_UpdateParameterChanged{v}
			iNdEx = postIndex
		case 86:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateRawUpdate", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSequenceAndUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &UpdateRawUpdate{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Update = &UpdateSeqUpdate_UpdateRawUpdate{v}
			iNdEx = postIndex
		case 87:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateEmptyUpdate", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSequenceAndUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &UpdateEmptyUpdate{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Update = &UpdateSeqUpdate_UpdateEmptyUpdate{v}
			iNdEx = postIndex
		case 88:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateCountersChanged", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSequenceAndUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &UpdateCountersChanged{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Update = &UpdateSeqUpdate_UpdateCountersChanged{v}
			iNdEx = postIndex
		case 89:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateConfig", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSequenceAndUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &UpdateConfig{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Update = &UpdateSeqUpdate_UpdateConfig{v}
			iNdEx = postIndex
		case 90:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateSpaceModified", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSequenceAndUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &UpdateSpaceModified{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Update = &UpdateSeqUpdate_UpdateSpaceModified{v}
			iNdEx = postIndex
		case 91:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateSpaceMemberModified", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSequenceAndUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &UpdateSpaceMemberModified{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Update = &UpdateSeqUpdate_UpdateSpaceMemberModified{v}
			iNdEx = postIndex
		case 92:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateMessageRejectedByHook", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSequenceAndUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &UpdateMessageRejectedByHook{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Update = &UpdateSeqUpdate_UpdateMessageRejectedByHook{v}
			iNdEx = postIndex
		case 93:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateMessageEditRejectedByHook", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSequenceAndUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &UpdateMessageEditRejectedByHook{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Update = &UpdateSeqUpdate_UpdateMessageEditRejectedByHook{v}
			iNdEx = postIndex
		case 94:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateUser", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSequenceAndUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &UpdateUser{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Update = &UpdateSeqUpdate_UpdateUser{v}
			iNdEx = postIndex
		case 95:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateFeatureFlagChanged", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSequenceAndUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &UpdateFeatureFlagChanged{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Update = &UpdateSeqUpdate_UpdateFeatureFlagChanged{v}
			iNdEx = postIndex
		case 96:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateThreadCreated", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSequenceAndUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &UpdateThreadCreated{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Update = &UpdateSeqUpdate_UpdateThreadCreated{v}
			iNdEx = postIndex
		case 97:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateThreadLifted", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSequenceAndUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &UpdateThreadLifted{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Update = &UpdateSeqUpdate_UpdateThreadLifted{v}
			iNdEx = postIndex
		case 98:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateGroup", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSequenceAndUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &UpdateGroup{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Update = &UpdateSeqUpdate_UpdateGroup{v}
			iNdEx = postIndex
		case 99:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateGroupMemberInvited", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSequenceAndUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &UpdateGroupMemberInvited{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Update = &UpdateSeqUpdate_UpdateGroupMemberInvited{v}
			iNdEx = postIndex
		case 100:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MessageReactionsUpdate", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSequenceAndUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &MessageReactionsUpdate{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Update = &UpdateSeqUpdate_MessageReactionsUpdate{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSequenceAndUpdates(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateFatSeqUpdate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSequenceAndUpdates
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateFatSeqUpdate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateFatSeqUpdate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Seq", wireType)
			}
			m.Seq = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSequenceAndUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Seq |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSequenceAndUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.State = append(m.State[:0], dAtA[iNdEx:postIndex]...)
			if m.State == nil {
				m.State = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateHeader", wireType)
			}
			m.UpdateHeader = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSequenceAndUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UpdateHeader |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Update", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSequenceAndUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Update = append(m.Update[:0], dAtA[iNdEx:postIndex]...)
			if m.Update == nil {
				m.Update = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Users", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSequenceAndUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Users = append(m.Users, &User{})
			if err := m.Users[len(m.Users)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Groups", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSequenceAndUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Groups = append(m.Groups, &Group{})
			if err := m.Groups[len(m.Groups)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSequenceAndUpdates(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateWeakUpdate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSequenceAndUpdates
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateWeakUpdate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateWeakUpdate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Date", wireType)
			}
			m.Date = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSequenceAndUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Date |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateHeader", wireType)
			}
			m.UpdateHeader = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSequenceAndUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UpdateHeader |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Update", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSequenceAndUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Update = append(m.Update[:0], dAtA[iNdEx:postIndex]...)
			if m.Update == nil {
				m.Update = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSequenceAndUpdates(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateWeakFatUpdate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSequenceAndUpdates
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateWeakFatUpdate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateWeakFatUpdate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Date", wireType)
			}
			m.Date = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSequenceAndUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Date |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateHeader", wireType)
			}
			m.UpdateHeader = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSequenceAndUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UpdateHeader |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Update", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSequenceAndUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Update = append(m.Update[:0], dAtA[iNdEx:postIndex]...)
			if m.Update == nil {
				m.Update = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Users", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSequenceAndUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Users = append(m.Users, &User{})
			if err := m.Users[len(m.Users)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Groups", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSequenceAndUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Groups = append(m.Groups, &Group{})
			if err := m.Groups[len(m.Groups)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSequenceAndUpdates(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateSeqUpdateTooLong) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSequenceAndUpdates
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateSeqUpdateTooLong: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateSeqUpdateTooLong: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipSequenceAndUpdates(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateContainer) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSequenceAndUpdates
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateContainer: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateContainer: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateHeader", wireType)
			}
			m.UpdateHeader = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSequenceAndUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UpdateHeader |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Update", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSequenceAndUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Update = append(m.Update[:0], dAtA[iNdEx:postIndex]...)
			if m.Update == nil {
				m.Update = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSequenceAndUpdates(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateCombinedUpdate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSequenceAndUpdates
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateCombinedUpdate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateCombinedUpdate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SeqStart", wireType)
			}
			m.SeqStart = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSequenceAndUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SeqStart |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SeqEnd", wireType)
			}
			m.SeqEnd = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSequenceAndUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SeqEnd |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSequenceAndUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.State = append(m.State[:0], dAtA[iNdEx:postIndex]...)
			if m.State == nil {
				m.State = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Users", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSequenceAndUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Users = append(m.Users, &User{})
			if err := m.Users[len(m.Users)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Groups", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSequenceAndUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Groups = append(m.Groups, &Group{})
			if err := m.Groups[len(m.Groups)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Updates", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSequenceAndUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Updates = append(m.Updates, &UpdateContainer{})
			if err := m.Updates[len(m.Updates)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Messages", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSequenceAndUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Messages = append(m.Messages, &HistoryMessage{})
			if err := m.Messages[len(m.Messages)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSequenceAndUpdates(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestGetState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSequenceAndUpdates
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestGetState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestGetState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v UpdateOptimization
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowSequenceAndUpdates
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= UpdateOptimization(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Optimizations = append(m.Optimizations, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowSequenceAndUpdates
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthSequenceAndUpdates
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthSequenceAndUpdates
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				if elementCount != 0 && len(m.Optimizations) == 0 {
					m.Optimizations = make([]UpdateOptimization, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v UpdateOptimization
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowSequenceAndUpdates
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= UpdateOptimization(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Optimizations = append(m.Optimizations, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Optimizations", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSequenceAndUpdates(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestGetDifference) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSequenceAndUpdates
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestGetDifference: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestGetDifference: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Seq", wireType)
			}
			m.Seq = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSequenceAndUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Seq |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSequenceAndUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.State = append(m.State[:0], dAtA[iNdEx:postIndex]...)
			if m.State == nil {
				m.State = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType == 0 {
				var v UpdateOptimization
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowSequenceAndUpdates
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= UpdateOptimization(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Optimizations = append(m.Optimizations, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowSequenceAndUpdates
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthSequenceAndUpdates
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthSequenceAndUpdates
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				if elementCount != 0 && len(m.Optimizations) == 0 {
					m.Optimizations = make([]UpdateOptimization, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v UpdateOptimization
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowSequenceAndUpdates
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= UpdateOptimization(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Optimizations = append(m.Optimizations, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Optimizations", wireType)
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConfigHash", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSequenceAndUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ConfigHash == nil {
				m.ConfigHash = &types.Int64Value{}
			}
			if err := m.ConfigHash.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSequenceAndUpdates(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResponseGetDifference) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSequenceAndUpdates
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResponseGetDifference: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResponseGetDifference: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Seq", wireType)
			}
			m.Seq = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSequenceAndUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Seq |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSequenceAndUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.State = append(m.State[:0], dAtA[iNdEx:postIndex]...)
			if m.State == nil {
				m.State = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Updates", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSequenceAndUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Updates = append(m.Updates, &UpdateSeqUpdate{})
			if err := m.Updates[len(m.Updates)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NeedMore", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSequenceAndUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.NeedMore = bool(v != 0)
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Messages", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSequenceAndUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Messages = append(m.Messages, &HistoryMessage{})
			if err := m.Messages[len(m.Messages)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UsersRefs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSequenceAndUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UsersRefs = append(m.UsersRefs, &UserOutPeer{})
			if err := m.UsersRefs[len(m.UsersRefs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupsRefs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSequenceAndUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GroupsRefs = append(m.GroupsRefs, &GroupOutPeer{})
			if err := m.GroupsRefs[len(m.GroupsRefs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Config", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSequenceAndUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Config == nil {
				m.Config = &Config{}
			}
			if err := m.Config.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConfigHash", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSequenceAndUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ConfigHash == nil {
				m.ConfigHash = &types.Int64Value{}
			}
			if err := m.ConfigHash.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSequenceAndUpdates(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestGetDialogsDifference) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSequenceAndUpdates
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestGetDialogsDifference: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestGetDialogsDifference: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Clock", wireType)
			}
			m.Clock = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSequenceAndUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Clock |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSequenceAndUpdates(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResponseGetDialogsDifference) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSequenceAndUpdates
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResponseGetDialogsDifference: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResponseGetDialogsDifference: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dialogs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSequenceAndUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Dialogs = append(m.Dialogs, &Dialog{})
			if err := m.Dialogs[len(m.Dialogs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupPeers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSequenceAndUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GroupPeers = append(m.GroupPeers, &GroupOutPeer{})
			if err := m.GroupPeers[len(m.GroupPeers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserPeers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSequenceAndUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserPeers = append(m.UserPeers, &UserOutPeer{})
			if err := m.UserPeers[len(m.UserPeers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSequenceAndUpdates(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GroupMembersSubset) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSequenceAndUpdates
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GroupMembersSubset: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GroupMembersSubset: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupPeer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSequenceAndUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.GroupPeer == nil {
				m.GroupPeer = &GroupOutPeer{}
			}
			if err := m.GroupPeer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowSequenceAndUpdates
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.MemberIds = append(m.MemberIds, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowSequenceAndUpdates
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthSequenceAndUpdates
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthSequenceAndUpdates
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.MemberIds) == 0 {
					m.MemberIds = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowSequenceAndUpdates
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.MemberIds = append(m.MemberIds, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field MemberIds", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSequenceAndUpdates(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestGetReferencedEntitites) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSequenceAndUpdates
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestGetReferencedEntitites: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestGetReferencedEntitites: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Users", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSequenceAndUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Users = append(m.Users, &UserOutPeer{})
			if err := m.Users[len(m.Users)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mids", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSequenceAndUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Mids = append(m.Mids, &UUIDValue{})
			if err := m.Mids[len(m.Mids)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupMembers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSequenceAndUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GroupMembers = append(m.GroupMembers, &GroupMembersSubset{})
			if err := m.GroupMembers[len(m.GroupMembers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Groups", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSequenceAndUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Groups = append(m.Groups, &GroupOutPeer{})
			if err := m.Groups[len(m.Groups)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSequenceAndUpdates(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResponseGetReferencedEntitites) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSequenceAndUpdates
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResponseGetReferencedEntitites: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResponseGetReferencedEntitites: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Users", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSequenceAndUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Users = append(m.Users, &User{})
			if err := m.Users[len(m.Users)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Groups", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSequenceAndUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Groups = append(m.Groups, &Group{})
			if err := m.Groups[len(m.Groups)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Messages", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSequenceAndUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Messages = append(m.Messages, &HistoryMessage{})
			if err := m.Messages[len(m.Messages)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSequenceAndUpdates(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestGetPartialPeerInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSequenceAndUpdates
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestGetPartialPeerInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestGetPartialPeerInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Users", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSequenceAndUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Users = append(m.Users, &UserOutPeer{})
			if err := m.Users[len(m.Users)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Groups", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSequenceAndUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Groups = append(m.Groups, &GroupOutPeer{})
			if err := m.Groups[len(m.Groups)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupMembers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSequenceAndUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GroupMembers = append(m.GroupMembers, &GroupMembersSubset{})
			if err := m.GroupMembers[len(m.GroupMembers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSequenceAndUpdates(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResponseGetPartialPeerInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSequenceAndUpdates
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResponseGetPartialPeerInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResponseGetPartialPeerInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Users", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSequenceAndUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Users = append(m.Users, &UserPartialInfo{})
			if err := m.Users[len(m.Users)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Groups", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSequenceAndUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Groups = append(m.Groups, &GroupPartialInfo{})
			if err := m.Groups[len(m.Groups)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSequenceAndUpdates(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateRawUpdate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSequenceAndUpdates
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateRawUpdate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateRawUpdate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSequenceAndUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Type == nil {
				m.Type = &types.StringValue{}
			}
			if err := m.Type.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bytes", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSequenceAndUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Bytes = append(m.Bytes[:0], dAtA[iNdEx:postIndex]...)
			if m.Bytes == nil {
				m.Bytes = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSequenceAndUpdates(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateEmptyUpdate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSequenceAndUpdates
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateEmptyUpdate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateEmptyUpdate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipSequenceAndUpdates(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestSubscribeToOnline) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSequenceAndUpdates
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestSubscribeToOnline: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestSubscribeToOnline: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Users", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSequenceAndUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Users = append(m.Users, &UserOutPeer{})
			if err := m.Users[len(m.Users)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSequenceAndUpdates(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestSubscribeFromOnline) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSequenceAndUpdates
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestSubscribeFromOnline: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestSubscribeFromOnline: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Users", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSequenceAndUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Users = append(m.Users, &UserOutPeer{})
			if err := m.Users[len(m.Users)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSequenceAndUpdates(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestSubscribeToGroupOnline) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSequenceAndUpdates
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestSubscribeToGroupOnline: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestSubscribeToGroupOnline: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Groups", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSequenceAndUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Groups = append(m.Groups, &GroupOutPeer{})
			if err := m.Groups[len(m.Groups)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSequenceAndUpdates(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestSubscribeFromGroupOnline) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSequenceAndUpdates
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestSubscribeFromGroupOnline: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestSubscribeFromGroupOnline: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Groups", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSequenceAndUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Groups = append(m.Groups, &GroupOutPeer{})
			if err := m.Groups[len(m.Groups)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSequenceAndUpdates(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SeqUpdateBox) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSequenceAndUpdates
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SeqUpdateBox: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SeqUpdateBox: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Seq", wireType)
			}
			m.Seq = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSequenceAndUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Seq |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSequenceAndUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.State = append(m.State[:0], dAtA[iNdEx:postIndex]...)
			if m.State == nil {
				m.State = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Update", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSequenceAndUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Update == nil {
				m.Update = &types.BytesValue{}
			}
			if err := m.Update.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnboxedUpdate", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSequenceAndUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UnboxedUpdate == nil {
				m.UnboxedUpdate = &UpdateSeqUpdate{}
			}
			if err := m.UnboxedUpdate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSequenceAndUpdates(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PeersList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSequenceAndUpdates
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PeersList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PeersList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Peers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSequenceAndUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Peers = append(m.Peers, &Peer{})
			if err := m.Peers[len(m.Peers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSequenceAndUpdates(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WeakUpdateCommand) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSequenceAndUpdates
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WeakUpdateCommand: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WeakUpdateCommand: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChangeMyOnline", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSequenceAndUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &WeakUpdateCommand_ChangeMyOnline{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Command = &WeakUpdateCommand_ChangeMyOnline_{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubscribeToOnlines", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSequenceAndUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &PeersList{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Command = &WeakUpdateCommand_SubscribeToOnlines{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnsubscribeFromOnlines", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSequenceAndUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &PeersList{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Command = &WeakUpdateCommand_UnsubscribeFromOnlines{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnsubscribeFromAllOnlines", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSequenceAndUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &types.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Command = &WeakUpdateCommand_UnsubscribeFromAllOnlines{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChangeMyTyping", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSequenceAndUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &WeakUpdateCommand_ChangeMyTyping{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Command = &WeakUpdateCommand_ChangeMyTyping_{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubscribeToTypings", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSequenceAndUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &PeersList{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Command = &WeakUpdateCommand_SubscribeToTypings{v}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnsubscribeFromTypings", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSequenceAndUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &PeersList{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Command = &WeakUpdateCommand_UnsubscribeFromTypings{v}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnsubscribeFromAllTypings", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSequenceAndUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &types.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Command = &WeakUpdateCommand_UnsubscribeFromAllTypings{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSequenceAndUpdates(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WeakUpdateCommand_ChangeMyOnline) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSequenceAndUpdates
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChangeMyOnline: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChangeMyOnline: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Online", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSequenceAndUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Online = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipSequenceAndUpdates(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WeakUpdateCommand_ChangeMyTyping) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSequenceAndUpdates
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChangeMyTyping: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChangeMyTyping: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Peer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSequenceAndUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Peer == nil {
				m.Peer = &Peer{}
			}
			if err := m.Peer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSequenceAndUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= TypingType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Start", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSequenceAndUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Start = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipSequenceAndUpdates(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WeakUpdateBox) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSequenceAndUpdates
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WeakUpdateBox: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WeakUpdateBox: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TypingStart", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSequenceAndUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &UpdateTyping{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Updatebox = &WeakUpdateBox_TypingStart{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TypingStop", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSequenceAndUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &UpdateTypingStop{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Updatebox = &WeakUpdateBox_TypingStop{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserLastSeen", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSequenceAndUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &UpdateUserLastSeen{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Updatebox = &WeakUpdateBox_UserLastSeen{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupOnline", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSequenceAndUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &UpdateGroupOnline{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Updatebox = &WeakUpdateBox_GroupOnline{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ForceReload", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSequenceAndUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &WeakUpdateBox_UpdateForceReloadState{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Updatebox = &WeakUpdateBox_ForceReload{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PermissionsChange", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSequenceAndUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &UpdatePermissionsChange{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Updatebox = &WeakUpdateBox_PermissionsChange{v}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserStatusChange", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSequenceAndUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &UpdateUserStatusChanged{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Updatebox = &WeakUpdateBox_UserStatusChange{v}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MessageReactionUpdate", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSequenceAndUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &MessageReactionsUpdate{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Updatebox = &WeakUpdateBox_MessageReactionUpdate{v}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSequenceAndUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &UpdateMessage{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Updatebox = &WeakUpdateBox_Message{v}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MessageContentChange", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSequenceAndUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &UpdateMessageContentChanged{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Updatebox = &WeakUpdateBox_MessageContentChange{v}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MessageRead", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSequenceAndUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &UpdateMessageRead{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Updatebox = &WeakUpdateBox_MessageRead{v}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MessageReceived", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSequenceAndUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &UpdateMessageReceived{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Updatebox = &WeakUpdateBox_MessageReceived{v}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MessageReadByMe", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSequenceAndUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &UpdateMessageReadByMe{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Updatebox = &WeakUpdateBox_MessageReadByMe{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSequenceAndUpdates(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WeakUpdateBox_UpdateForceReloadState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSequenceAndUpdates
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateForceReloadState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateForceReloadState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fields", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSequenceAndUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Fields = append(m.Fields, &WeakUpdateBox_UpdateForceReloadState_ForceReloadField{})
			if err := m.Fields[len(m.Fields)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSequenceAndUpdates(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WeakUpdateBox_UpdateForceReloadState_ForceReloadField) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSequenceAndUpdates
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ForceReloadField: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ForceReloadField: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReloadDialogs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSequenceAndUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &types.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Field = &WeakUpdateBox_UpdateForceReloadState_ForceReloadField_ReloadDialogs{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReloadContacts", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSequenceAndUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &types.Empty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Field = &WeakUpdateBox_UpdateForceReloadState_ForceReloadField_ReloadContacts{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReloadHistory", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSequenceAndUpdates
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &PeersList{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Field = &WeakUpdateBox_UpdateForceReloadState_ForceReloadField_ReloadHistory{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSequenceAndUpdates(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSequenceAndUpdates
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipSequenceAndUpdates(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowSequenceAndUpdates
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSequenceAndUpdates
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSequenceAndUpdates
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthSequenceAndUpdates
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupSequenceAndUpdates
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthSequenceAndUpdates
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthSequenceAndUpdates        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowSequenceAndUpdates          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupSequenceAndUpdates = fmt.Errorf("proto: unexpected end of group")
)
