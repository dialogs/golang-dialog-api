// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: integrations.proto

package dialog

import (
	context "context"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	_ "github.com/gogo/protobuf/types"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Group token response
type ResponseIntegrationToken struct {
	Token string `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	Url   string `protobuf:"bytes,2,opt,name=url,proto3" json:"url,omitempty"`
}

func (m *ResponseIntegrationToken) Reset()      { *m = ResponseIntegrationToken{} }
func (*ResponseIntegrationToken) ProtoMessage() {}
func (*ResponseIntegrationToken) Descriptor() ([]byte, []int) {
	return fileDescriptor_6b02b01320e142e5, []int{0}
}
func (m *ResponseIntegrationToken) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ResponseIntegrationToken) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ResponseIntegrationToken.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ResponseIntegrationToken) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResponseIntegrationToken.Merge(m, src)
}
func (m *ResponseIntegrationToken) XXX_Size() int {
	return m.Size()
}
func (m *ResponseIntegrationToken) XXX_DiscardUnknown() {
	xxx_messageInfo_ResponseIntegrationToken.DiscardUnknown(m)
}

var xxx_messageInfo_ResponseIntegrationToken proto.InternalMessageInfo

func (m *ResponseIntegrationToken) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func (m *ResponseIntegrationToken) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

// Getting current group token
type RequestGetIntegrationToken struct {
	GroupPeer *OutPeer `protobuf:"bytes,1,opt,name=group_peer,json=groupPeer,proto3" json:"group_peer,omitempty"`
}

func (m *RequestGetIntegrationToken) Reset()      { *m = RequestGetIntegrationToken{} }
func (*RequestGetIntegrationToken) ProtoMessage() {}
func (*RequestGetIntegrationToken) Descriptor() ([]byte, []int) {
	return fileDescriptor_6b02b01320e142e5, []int{1}
}
func (m *RequestGetIntegrationToken) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RequestGetIntegrationToken) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RequestGetIntegrationToken.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RequestGetIntegrationToken) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RequestGetIntegrationToken.Merge(m, src)
}
func (m *RequestGetIntegrationToken) XXX_Size() int {
	return m.Size()
}
func (m *RequestGetIntegrationToken) XXX_DiscardUnknown() {
	xxx_messageInfo_RequestGetIntegrationToken.DiscardUnknown(m)
}

var xxx_messageInfo_RequestGetIntegrationToken proto.InternalMessageInfo

func (m *RequestGetIntegrationToken) GetGroupPeer() *OutPeer {
	if m != nil {
		return m.GroupPeer
	}
	return nil
}

// Revoke group token
type RequestRevokeIntegrationToken struct {
	GroupPeer *OutPeer `protobuf:"bytes,1,opt,name=group_peer,json=groupPeer,proto3" json:"group_peer,omitempty"`
}

func (m *RequestRevokeIntegrationToken) Reset()      { *m = RequestRevokeIntegrationToken{} }
func (*RequestRevokeIntegrationToken) ProtoMessage() {}
func (*RequestRevokeIntegrationToken) Descriptor() ([]byte, []int) {
	return fileDescriptor_6b02b01320e142e5, []int{2}
}
func (m *RequestRevokeIntegrationToken) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RequestRevokeIntegrationToken) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RequestRevokeIntegrationToken.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RequestRevokeIntegrationToken) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RequestRevokeIntegrationToken.Merge(m, src)
}
func (m *RequestRevokeIntegrationToken) XXX_Size() int {
	return m.Size()
}
func (m *RequestRevokeIntegrationToken) XXX_DiscardUnknown() {
	xxx_messageInfo_RequestRevokeIntegrationToken.DiscardUnknown(m)
}

var xxx_messageInfo_RequestRevokeIntegrationToken proto.InternalMessageInfo

func (m *RequestRevokeIntegrationToken) GetGroupPeer() *OutPeer {
	if m != nil {
		return m.GroupPeer
	}
	return nil
}

func init() {
	proto.RegisterType((*ResponseIntegrationToken)(nil), "dialog.ResponseIntegrationToken")
	proto.RegisterType((*RequestGetIntegrationToken)(nil), "dialog.RequestGetIntegrationToken")
	proto.RegisterType((*RequestRevokeIntegrationToken)(nil), "dialog.RequestRevokeIntegrationToken")
}

func init() { proto.RegisterFile("integrations.proto", fileDescriptor_6b02b01320e142e5) }

var fileDescriptor_6b02b01320e142e5 = []byte{
	// 445 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x93, 0x41, 0x6b, 0x13, 0x41,
	0x14, 0xc7, 0x77, 0x22, 0x46, 0xf3, 0x5a, 0x11, 0x57, 0xad, 0x71, 0x69, 0x87, 0x32, 0x20, 0x68,
	0x91, 0xdd, 0xb6, 0x0a, 0x42, 0x40, 0x02, 0xb9, 0x14, 0x4f, 0xca, 0xa2, 0x17, 0x2f, 0xb2, 0x49,
	0x9e, 0xc3, 0xd0, 0x75, 0x66, 0x9c, 0x99, 0x04, 0x04, 0x05, 0xf1, 0xd8, 0x93, 0xe2, 0xcd, 0x4f,
	0xe0, 0xb7, 0xf0, 0xea, 0x31, 0xe0, 0xa5, 0x47, 0x33, 0xf1, 0x20, 0x3d, 0xf5, 0x23, 0xc8, 0x6e,
	0x12, 0xba, 0xd8, 0x2d, 0x78, 0xf2, 0xb4, 0xb3, 0xef, 0xfd, 0xf7, 0xfd, 0xfe, 0xfb, 0x1f, 0x1e,
	0x84, 0x42, 0x3a, 0xe4, 0x26, 0x73, 0x42, 0x49, 0x1b, 0x6b, 0xa3, 0x9c, 0x0a, 0x9b, 0x43, 0x91,
	0xe5, 0x8a, 0x47, 0xeb, 0x5c, 0x29, 0x9e, 0x63, 0x92, 0x69, 0x91, 0x64, 0x52, 0x2a, 0x57, 0x55,
	0x45, 0x57, 0x86, 0xf8, 0x52, 0x48, 0x51, 0x2d, 0xad, 0x68, 0x44, 0xb3, 0x7c, 0xb9, 0x6e, 0x07,
	0x59, 0x9e, 0xe9, 0x7e, 0xb2, 0x78, 0xce, 0xcb, 0xec, 0x1d, 0xb4, 0x53, 0xb4, 0x5a, 0x49, 0x8b,
	0x8f, 0x4e, 0xd0, 0x4f, 0xd5, 0x3e, 0xca, 0x90, 0xc1, 0x79, 0x57, 0x1c, 0xda, 0x64, 0x93, 0xdc,
	0x6e, 0xf5, 0x56, 0x0f, 0x8e, 0xb6, 0x2f, 0x42, 0x73, 0x98, 0x49, 0x8e, 0x26, 0x9d, 0xb7, 0x42,
	0x0a, 0xe7, 0x46, 0x26, 0x6f, 0x37, 0x6a, 0x14, 0x45, 0xa3, 0xb3, 0xe1, 0xbb, 0x11, 0xb4, 0xc5,
	0xab, 0x78, 0x98, 0xf3, 0x98, 0x1b, 0x3d, 0x88, 0xf7, 0x8c, 0x1e, 0x2c, 0x91, 0xec, 0x0d, 0x44,
	0x29, 0xbe, 0x1e, 0xa1, 0x75, 0x7b, 0xe8, 0x4e, 0x19, 0x78, 0x08, 0xc0, 0x8d, 0x1a, 0xe9, 0x17,
	0xc5, 0x8f, 0x94, 0x2e, 0x56, 0x76, 0x2f, 0xc7, 0xf3, 0x38, 0xe2, 0xc7, 0x23, 0xf7, 0x04, 0xd1,
	0xf4, 0x2e, 0x1d, 0x1c, 0x6d, 0xb7, 0xe0, 0xc2, 0x58, 0x58, 0xd1, 0xcf, 0x31, 0x6d, 0x95, 0x5f,
	0x14, 0x9d, 0xce, 0xba, 0xef, 0xde, 0x84, 0x1b, 0xa7, 0xd9, 0x25, 0x8f, 0xbd, 0x85, 0x8d, 0xc5,
	0x31, 0xc5, 0xb1, 0xda, 0xc7, 0xff, 0x4a, 0xdf, 0xfd, 0xd6, 0x80, 0xd5, 0x0a, 0xd1, 0x86, 0x9f,
	0x08, 0x5c, 0xad, 0xcb, 0x80, 0x2d, 0x89, 0x67, 0xe7, 0x14, 0x6d, 0x9e, 0x68, 0xea, 0xaf, 0x92,
	0xdd, 0xff, 0xf0, 0xe3, 0xd7, 0xe7, 0x46, 0xcc, 0xee, 0x24, 0xe3, 0x9d, 0xa4, 0x30, 0x93, 0x54,
	0xe1, 0x49, 0xcd, 0xd0, 0x0e, 0xd9, 0x0a, 0xbf, 0x10, 0x58, 0x3b, 0x23, 0x9c, 0x5b, 0x7f, 0xd9,
	0xaa, 0x97, 0xfd, 0x83, 0xb3, 0x07, 0xa5, 0xb3, 0x1d, 0x76, 0xb7, 0xde, 0x59, 0xfd, 0xdc, 0x0e,
	0xd9, 0xea, 0x3d, 0xf3, 0xdd, 0x35, 0xb8, 0x56, 0xcd, 0xd7, 0xa2, 0x19, 0x8b, 0x01, 0xda, 0xc9,
	0x94, 0x06, 0x87, 0x53, 0x1a, 0x1c, 0x4f, 0x29, 0x79, 0xef, 0x29, 0xf9, 0xea, 0x29, 0xf9, 0xee,
	0x29, 0x99, 0x78, 0x4a, 0x7e, 0x7a, 0x4a, 0x7e, 0x7b, 0x1a, 0x1c, 0x7b, 0x4a, 0x3e, 0xce, 0x68,
	0x30, 0x99, 0xd1, 0xe0, 0x70, 0x46, 0x83, 0xe7, 0x8b, 0x2d, 0xeb, 0x37, 0xcb, 0xbd, 0xb8, 0xf7,
	0x27, 0x00, 0x00, 0xff, 0xff, 0x36, 0x67, 0x6b, 0xe0, 0x8a, 0x03, 0x00, 0x00,
}

func (this *ResponseIntegrationToken) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ResponseIntegrationToken)
	if !ok {
		that2, ok := that.(ResponseIntegrationToken)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Token != that1.Token {
		return false
	}
	if this.Url != that1.Url {
		return false
	}
	return true
}
func (this *RequestGetIntegrationToken) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RequestGetIntegrationToken)
	if !ok {
		that2, ok := that.(RequestGetIntegrationToken)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.GroupPeer.Equal(that1.GroupPeer) {
		return false
	}
	return true
}
func (this *RequestRevokeIntegrationToken) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RequestRevokeIntegrationToken)
	if !ok {
		that2, ok := that.(RequestRevokeIntegrationToken)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.GroupPeer.Equal(that1.GroupPeer) {
		return false
	}
	return true
}
func (this *ResponseIntegrationToken) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&dialog.ResponseIntegrationToken{")
	s = append(s, "Token: "+fmt.Sprintf("%#v", this.Token)+",\n")
	s = append(s, "Url: "+fmt.Sprintf("%#v", this.Url)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RequestGetIntegrationToken) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&dialog.RequestGetIntegrationToken{")
	if this.GroupPeer != nil {
		s = append(s, "GroupPeer: "+fmt.Sprintf("%#v", this.GroupPeer)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RequestRevokeIntegrationToken) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&dialog.RequestRevokeIntegrationToken{")
	if this.GroupPeer != nil {
		s = append(s, "GroupPeer: "+fmt.Sprintf("%#v", this.GroupPeer)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringIntegrations(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// IntegrationsClient is the client API for Integrations service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type IntegrationsClient interface {
	/// Get token for posting to group
	GetIntegrationToken(ctx context.Context, in *RequestGetIntegrationToken, opts ...grpc.CallOption) (*ResponseIntegrationToken, error)
	/// Revoke token
	RevokeIntegrationToken(ctx context.Context, in *RequestRevokeIntegrationToken, opts ...grpc.CallOption) (*ResponseIntegrationToken, error)
}

type integrationsClient struct {
	cc *grpc.ClientConn
}

func NewIntegrationsClient(cc *grpc.ClientConn) IntegrationsClient {
	return &integrationsClient{cc}
}

func (c *integrationsClient) GetIntegrationToken(ctx context.Context, in *RequestGetIntegrationToken, opts ...grpc.CallOption) (*ResponseIntegrationToken, error) {
	out := new(ResponseIntegrationToken)
	err := c.cc.Invoke(ctx, "/dialog.Integrations/GetIntegrationToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *integrationsClient) RevokeIntegrationToken(ctx context.Context, in *RequestRevokeIntegrationToken, opts ...grpc.CallOption) (*ResponseIntegrationToken, error) {
	out := new(ResponseIntegrationToken)
	err := c.cc.Invoke(ctx, "/dialog.Integrations/RevokeIntegrationToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// IntegrationsServer is the server API for Integrations service.
type IntegrationsServer interface {
	/// Get token for posting to group
	GetIntegrationToken(context.Context, *RequestGetIntegrationToken) (*ResponseIntegrationToken, error)
	/// Revoke token
	RevokeIntegrationToken(context.Context, *RequestRevokeIntegrationToken) (*ResponseIntegrationToken, error)
}

// UnimplementedIntegrationsServer can be embedded to have forward compatible implementations.
type UnimplementedIntegrationsServer struct {
}

func (*UnimplementedIntegrationsServer) GetIntegrationToken(ctx context.Context, req *RequestGetIntegrationToken) (*ResponseIntegrationToken, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetIntegrationToken not implemented")
}
func (*UnimplementedIntegrationsServer) RevokeIntegrationToken(ctx context.Context, req *RequestRevokeIntegrationToken) (*ResponseIntegrationToken, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RevokeIntegrationToken not implemented")
}

func RegisterIntegrationsServer(s *grpc.Server, srv IntegrationsServer) {
	s.RegisterService(&_Integrations_serviceDesc, srv)
}

func _Integrations_GetIntegrationToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestGetIntegrationToken)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IntegrationsServer).GetIntegrationToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dialog.Integrations/GetIntegrationToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IntegrationsServer).GetIntegrationToken(ctx, req.(*RequestGetIntegrationToken))
	}
	return interceptor(ctx, in, info, handler)
}

func _Integrations_RevokeIntegrationToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestRevokeIntegrationToken)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IntegrationsServer).RevokeIntegrationToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dialog.Integrations/RevokeIntegrationToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IntegrationsServer).RevokeIntegrationToken(ctx, req.(*RequestRevokeIntegrationToken))
	}
	return interceptor(ctx, in, info, handler)
}

var _Integrations_serviceDesc = grpc.ServiceDesc{
	ServiceName: "dialog.Integrations",
	HandlerType: (*IntegrationsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetIntegrationToken",
			Handler:    _Integrations_GetIntegrationToken_Handler,
		},
		{
			MethodName: "RevokeIntegrationToken",
			Handler:    _Integrations_RevokeIntegrationToken_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "integrations.proto",
}

func (m *ResponseIntegrationToken) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResponseIntegrationToken) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ResponseIntegrationToken) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Url) > 0 {
		i -= len(m.Url)
		copy(dAtA[i:], m.Url)
		i = encodeVarintIntegrations(dAtA, i, uint64(len(m.Url)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Token) > 0 {
		i -= len(m.Token)
		copy(dAtA[i:], m.Token)
		i = encodeVarintIntegrations(dAtA, i, uint64(len(m.Token)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RequestGetIntegrationToken) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestGetIntegrationToken) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RequestGetIntegrationToken) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.GroupPeer != nil {
		{
			size, err := m.GroupPeer.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintIntegrations(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RequestRevokeIntegrationToken) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestRevokeIntegrationToken) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RequestRevokeIntegrationToken) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.GroupPeer != nil {
		{
			size, err := m.GroupPeer.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintIntegrations(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintIntegrations(dAtA []byte, offset int, v uint64) int {
	offset -= sovIntegrations(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ResponseIntegrationToken) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Token)
	if l > 0 {
		n += 1 + l + sovIntegrations(uint64(l))
	}
	l = len(m.Url)
	if l > 0 {
		n += 1 + l + sovIntegrations(uint64(l))
	}
	return n
}

func (m *RequestGetIntegrationToken) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.GroupPeer != nil {
		l = m.GroupPeer.Size()
		n += 1 + l + sovIntegrations(uint64(l))
	}
	return n
}

func (m *RequestRevokeIntegrationToken) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.GroupPeer != nil {
		l = m.GroupPeer.Size()
		n += 1 + l + sovIntegrations(uint64(l))
	}
	return n
}

func sovIntegrations(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozIntegrations(x uint64) (n int) {
	return sovIntegrations(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *ResponseIntegrationToken) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ResponseIntegrationToken{`,
		`Token:` + fmt.Sprintf("%v", this.Token) + `,`,
		`Url:` + fmt.Sprintf("%v", this.Url) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RequestGetIntegrationToken) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RequestGetIntegrationToken{`,
		`GroupPeer:` + strings.Replace(fmt.Sprintf("%v", this.GroupPeer), "OutPeer", "OutPeer", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RequestRevokeIntegrationToken) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RequestRevokeIntegrationToken{`,
		`GroupPeer:` + strings.Replace(fmt.Sprintf("%v", this.GroupPeer), "OutPeer", "OutPeer", 1) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringIntegrations(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *ResponseIntegrationToken) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIntegrations
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResponseIntegrationToken: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResponseIntegrationToken: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIntegrations
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIntegrations
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthIntegrations
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Token = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Url", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIntegrations
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIntegrations
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthIntegrations
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Url = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipIntegrations(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthIntegrations
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthIntegrations
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestGetIntegrationToken) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIntegrations
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestGetIntegrationToken: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestGetIntegrationToken: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupPeer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIntegrations
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIntegrations
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthIntegrations
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.GroupPeer == nil {
				m.GroupPeer = &OutPeer{}
			}
			if err := m.GroupPeer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipIntegrations(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthIntegrations
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthIntegrations
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestRevokeIntegrationToken) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIntegrations
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestRevokeIntegrationToken: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestRevokeIntegrationToken: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupPeer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIntegrations
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIntegrations
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthIntegrations
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.GroupPeer == nil {
				m.GroupPeer = &OutPeer{}
			}
			if err := m.GroupPeer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipIntegrations(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthIntegrations
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthIntegrations
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipIntegrations(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowIntegrations
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowIntegrations
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowIntegrations
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthIntegrations
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupIntegrations
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthIntegrations
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthIntegrations        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowIntegrations          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupIntegrations = fmt.Errorf("proto: unexpected end of group")
)
