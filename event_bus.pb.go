// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: event_bus.proto

package dialog

import (
	bytes "bytes"
	context "context"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	_ "github.com/gogo/protobuf/types"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Joining Event Bus
type RequestJoinEventBus struct {
	Id      string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Timeout int64  `protobuf:"varint,2,opt,name=timeout,proto3" json:"timeout,omitempty"`
}

func (m *RequestJoinEventBus) Reset()      { *m = RequestJoinEventBus{} }
func (*RequestJoinEventBus) ProtoMessage() {}
func (*RequestJoinEventBus) Descriptor() ([]byte, []int) {
	return fileDescriptor_69a301110d6a5632, []int{0}
}
func (m *RequestJoinEventBus) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RequestJoinEventBus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RequestJoinEventBus.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RequestJoinEventBus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RequestJoinEventBus.Merge(m, src)
}
func (m *RequestJoinEventBus) XXX_Size() int {
	return m.Size()
}
func (m *RequestJoinEventBus) XXX_DiscardUnknown() {
	xxx_messageInfo_RequestJoinEventBus.DiscardUnknown(m)
}

var xxx_messageInfo_RequestJoinEventBus proto.InternalMessageInfo

func (m *RequestJoinEventBus) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *RequestJoinEventBus) GetTimeout() int64 {
	if m != nil {
		return m.Timeout
	}
	return 0
}

type ResponseJoinEventBus struct {
	DeviceId int64 `protobuf:"varint,1,opt,name=device_id,json=deviceId,proto3" json:"device_id,omitempty"`
}

func (m *ResponseJoinEventBus) Reset()      { *m = ResponseJoinEventBus{} }
func (*ResponseJoinEventBus) ProtoMessage() {}
func (*ResponseJoinEventBus) Descriptor() ([]byte, []int) {
	return fileDescriptor_69a301110d6a5632, []int{1}
}
func (m *ResponseJoinEventBus) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ResponseJoinEventBus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ResponseJoinEventBus.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ResponseJoinEventBus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResponseJoinEventBus.Merge(m, src)
}
func (m *ResponseJoinEventBus) XXX_Size() int {
	return m.Size()
}
func (m *ResponseJoinEventBus) XXX_DiscardUnknown() {
	xxx_messageInfo_ResponseJoinEventBus.DiscardUnknown(m)
}

var xxx_messageInfo_ResponseJoinEventBus proto.InternalMessageInfo

func (m *ResponseJoinEventBus) GetDeviceId() int64 {
	if m != nil {
		return m.DeviceId
	}
	return 0
}

// Keep Alive Event Bus
type RequestKeepAliveEventBus struct {
	Id      string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Timeout int64  `protobuf:"varint,2,opt,name=timeout,proto3" json:"timeout,omitempty"`
}

func (m *RequestKeepAliveEventBus) Reset()      { *m = RequestKeepAliveEventBus{} }
func (*RequestKeepAliveEventBus) ProtoMessage() {}
func (*RequestKeepAliveEventBus) Descriptor() ([]byte, []int) {
	return fileDescriptor_69a301110d6a5632, []int{2}
}
func (m *RequestKeepAliveEventBus) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RequestKeepAliveEventBus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RequestKeepAliveEventBus.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RequestKeepAliveEventBus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RequestKeepAliveEventBus.Merge(m, src)
}
func (m *RequestKeepAliveEventBus) XXX_Size() int {
	return m.Size()
}
func (m *RequestKeepAliveEventBus) XXX_DiscardUnknown() {
	xxx_messageInfo_RequestKeepAliveEventBus.DiscardUnknown(m)
}

var xxx_messageInfo_RequestKeepAliveEventBus proto.InternalMessageInfo

func (m *RequestKeepAliveEventBus) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *RequestKeepAliveEventBus) GetTimeout() int64 {
	if m != nil {
		return m.Timeout
	}
	return 0
}

// Event Bus Destination
type RequestPostToEventBus struct {
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	/// Destination device ids
	Destinations []int64 `protobuf:"varint,2,rep,packed,name=destinations,proto3" json:"destinations,omitempty"`
	/// Message to send
	Message []byte `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
}

func (m *RequestPostToEventBus) Reset()      { *m = RequestPostToEventBus{} }
func (*RequestPostToEventBus) ProtoMessage() {}
func (*RequestPostToEventBus) Descriptor() ([]byte, []int) {
	return fileDescriptor_69a301110d6a5632, []int{3}
}
func (m *RequestPostToEventBus) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RequestPostToEventBus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RequestPostToEventBus.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RequestPostToEventBus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RequestPostToEventBus.Merge(m, src)
}
func (m *RequestPostToEventBus) XXX_Size() int {
	return m.Size()
}
func (m *RequestPostToEventBus) XXX_DiscardUnknown() {
	xxx_messageInfo_RequestPostToEventBus.DiscardUnknown(m)
}

var xxx_messageInfo_RequestPostToEventBus proto.InternalMessageInfo

func (m *RequestPostToEventBus) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *RequestPostToEventBus) GetDestinations() []int64 {
	if m != nil {
		return m.Destinations
	}
	return nil
}

func (m *RequestPostToEventBus) GetMessage() []byte {
	if m != nil {
		return m.Message
	}
	return nil
}

// Update about pubsub device connected
type UpdateEventBusDeviceConnected struct {
	Id       string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	UserId   int32  `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	DeviceId int64  `protobuf:"varint,3,opt,name=device_id,json=deviceId,proto3" json:"device_id,omitempty"`
	Peer     *Peer  `protobuf:"bytes,4,opt,name=peer,proto3" json:"peer,omitempty"`
}

func (m *UpdateEventBusDeviceConnected) Reset()      { *m = UpdateEventBusDeviceConnected{} }
func (*UpdateEventBusDeviceConnected) ProtoMessage() {}
func (*UpdateEventBusDeviceConnected) Descriptor() ([]byte, []int) {
	return fileDescriptor_69a301110d6a5632, []int{4}
}
func (m *UpdateEventBusDeviceConnected) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateEventBusDeviceConnected) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateEventBusDeviceConnected.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateEventBusDeviceConnected) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateEventBusDeviceConnected.Merge(m, src)
}
func (m *UpdateEventBusDeviceConnected) XXX_Size() int {
	return m.Size()
}
func (m *UpdateEventBusDeviceConnected) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateEventBusDeviceConnected.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateEventBusDeviceConnected proto.InternalMessageInfo

func (m *UpdateEventBusDeviceConnected) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *UpdateEventBusDeviceConnected) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *UpdateEventBusDeviceConnected) GetDeviceId() int64 {
	if m != nil {
		return m.DeviceId
	}
	return 0
}

func (m *UpdateEventBusDeviceConnected) GetPeer() *Peer {
	if m != nil {
		return m.Peer
	}
	return nil
}

// Update about device disconnected
type UpdateEventBusDeviceDisconnected struct {
	Id       string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	UserId   int32  `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	DeviceId int64  `protobuf:"varint,3,opt,name=device_id,json=deviceId,proto3" json:"device_id,omitempty"`
	Peer     *Peer  `protobuf:"bytes,4,opt,name=peer,proto3" json:"peer,omitempty"`
}

func (m *UpdateEventBusDeviceDisconnected) Reset()      { *m = UpdateEventBusDeviceDisconnected{} }
func (*UpdateEventBusDeviceDisconnected) ProtoMessage() {}
func (*UpdateEventBusDeviceDisconnected) Descriptor() ([]byte, []int) {
	return fileDescriptor_69a301110d6a5632, []int{5}
}
func (m *UpdateEventBusDeviceDisconnected) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateEventBusDeviceDisconnected) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateEventBusDeviceDisconnected.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateEventBusDeviceDisconnected) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateEventBusDeviceDisconnected.Merge(m, src)
}
func (m *UpdateEventBusDeviceDisconnected) XXX_Size() int {
	return m.Size()
}
func (m *UpdateEventBusDeviceDisconnected) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateEventBusDeviceDisconnected.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateEventBusDeviceDisconnected proto.InternalMessageInfo

func (m *UpdateEventBusDeviceDisconnected) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *UpdateEventBusDeviceDisconnected) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *UpdateEventBusDeviceDisconnected) GetDeviceId() int64 {
	if m != nil {
		return m.DeviceId
	}
	return 0
}

func (m *UpdateEventBusDeviceDisconnected) GetPeer() *Peer {
	if m != nil {
		return m.Peer
	}
	return nil
}

// Event Bus Message
type UpdateEventBusMessage struct {
	Id             string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	SenderId       int32  `protobuf:"varint,2,opt,name=sender_id,json=senderId,proto3" json:"sender_id,omitempty"`
	SenderDeviceId int64  `protobuf:"varint,3,opt,name=sender_device_id,json=senderDeviceId,proto3" json:"sender_device_id,omitempty"`
	Message        []byte `protobuf:"bytes,4,opt,name=message,proto3" json:"message,omitempty"`
}

func (m *UpdateEventBusMessage) Reset()      { *m = UpdateEventBusMessage{} }
func (*UpdateEventBusMessage) ProtoMessage() {}
func (*UpdateEventBusMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_69a301110d6a5632, []int{6}
}
func (m *UpdateEventBusMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateEventBusMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateEventBusMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateEventBusMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateEventBusMessage.Merge(m, src)
}
func (m *UpdateEventBusMessage) XXX_Size() int {
	return m.Size()
}
func (m *UpdateEventBusMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateEventBusMessage.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateEventBusMessage proto.InternalMessageInfo

func (m *UpdateEventBusMessage) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *UpdateEventBusMessage) GetSenderId() int32 {
	if m != nil {
		return m.SenderId
	}
	return 0
}

func (m *UpdateEventBusMessage) GetSenderDeviceId() int64 {
	if m != nil {
		return m.SenderDeviceId
	}
	return 0
}

func (m *UpdateEventBusMessage) GetMessage() []byte {
	if m != nil {
		return m.Message
	}
	return nil
}

// Event Bus dispose
type UpdateEventBusDisposed struct {
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *UpdateEventBusDisposed) Reset()      { *m = UpdateEventBusDisposed{} }
func (*UpdateEventBusDisposed) ProtoMessage() {}
func (*UpdateEventBusDisposed) Descriptor() ([]byte, []int) {
	return fileDescriptor_69a301110d6a5632, []int{7}
}
func (m *UpdateEventBusDisposed) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateEventBusDisposed) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateEventBusDisposed.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateEventBusDisposed) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateEventBusDisposed.Merge(m, src)
}
func (m *UpdateEventBusDisposed) XXX_Size() int {
	return m.Size()
}
func (m *UpdateEventBusDisposed) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateEventBusDisposed.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateEventBusDisposed proto.InternalMessageInfo

func (m *UpdateEventBusDisposed) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func init() {
	proto.RegisterType((*RequestJoinEventBus)(nil), "dialog.RequestJoinEventBus")
	proto.RegisterType((*ResponseJoinEventBus)(nil), "dialog.ResponseJoinEventBus")
	proto.RegisterType((*RequestKeepAliveEventBus)(nil), "dialog.RequestKeepAliveEventBus")
	proto.RegisterType((*RequestPostToEventBus)(nil), "dialog.RequestPostToEventBus")
	proto.RegisterType((*UpdateEventBusDeviceConnected)(nil), "dialog.UpdateEventBusDeviceConnected")
	proto.RegisterType((*UpdateEventBusDeviceDisconnected)(nil), "dialog.UpdateEventBusDeviceDisconnected")
	proto.RegisterType((*UpdateEventBusMessage)(nil), "dialog.UpdateEventBusMessage")
	proto.RegisterType((*UpdateEventBusDisposed)(nil), "dialog.UpdateEventBusDisposed")
}

func init() { proto.RegisterFile("event_bus.proto", fileDescriptor_69a301110d6a5632) }

var fileDescriptor_69a301110d6a5632 = []byte{
	// 668 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xd4, 0x55, 0x3f, 0x6f, 0xd3, 0x5e,
	0x14, 0xcd, 0x4b, 0xfa, 0xcb, 0x9f, 0xd7, 0xfc, 0x0a, 0x75, 0x5b, 0x30, 0xa1, 0x7d, 0xb2, 0x5c,
	0x51, 0x42, 0x90, 0xec, 0xb6, 0x0c, 0x95, 0xb2, 0x54, 0x84, 0x22, 0x54, 0x10, 0x52, 0x65, 0x01,
	0x03, 0x4b, 0xe5, 0xf8, 0x5d, 0xc2, 0x93, 0x1c, 0x3f, 0xe3, 0xe7, 0x64, 0xe9, 0x52, 0x31, 0x76,
	0x42, 0xe2, 0x4b, 0xb0, 0xf1, 0x21, 0x2a, 0x21, 0xc6, 0x4a, 0x2c, 0x1d, 0xa9, 0xcb, 0x80, 0x3a,
	0x95, 0x6f, 0x80, 0x1c, 0xdb, 0x25, 0xb1, 0x43, 0xc3, 0x84, 0xc4, 0x94, 0xd8, 0xe7, 0xf8, 0x9e,
	0x7b, 0xef, 0xb9, 0xef, 0x3e, 0x7c, 0x05, 0xfa, 0xe0, 0xf8, 0xbb, 0xed, 0x9e, 0xd0, 0x5c, 0x8f,
	0xfb, 0x5c, 0x2a, 0x52, 0x66, 0xda, 0xbc, 0x53, 0x5b, 0xec, 0x70, 0xde, 0xb1, 0x41, 0x37, 0x5d,
	0xa6, 0x9b, 0x8e, 0xc3, 0x7d, 0xd3, 0x67, 0xdc, 0x89, 0x59, 0xb5, 0x69, 0x17, 0xc0, 0x4b, 0x1e,
	0x66, 0x29, 0xbc, 0x62, 0x0e, 0x1b, 0xc6, 0xe7, 0xba, 0x4c, 0x58, 0x60, 0xdb, 0xa6, 0x03, 0x3c,
	0x09, 0x5d, 0x5b, 0x10, 0x96, 0x69, 0x9b, 0x6e, 0x5b, 0x8f, 0x7f, 0xa3, 0xd7, 0xea, 0x1e, 0x9e,
	0x33, 0xe0, 0x4d, 0x0f, 0x84, 0xff, 0x98, 0x33, 0xe7, 0x61, 0x98, 0x4f, 0xab, 0x27, 0xa4, 0x25,
	0x9c, 0x67, 0x54, 0x46, 0x0a, 0xaa, 0x57, 0x5a, 0xff, 0x1f, 0x9c, 0xad, 0x56, 0x70, 0xa9, 0xcf,
	0x04, 0x6b, 0xdb, 0x60, 0xe4, 0x19, 0x95, 0x6e, 0xe3, 0x92, 0xcf, 0xba, 0xc0, 0x7b, 0xbe, 0x9c,
	0x57, 0x50, 0xbd, 0x90, 0xe6, 0x24, 0x68, 0x73, 0x31, 0xd8, 0xbc, 0x81, 0xaf, 0xb3, 0xae, 0x46,
	0xed, 0x8e, 0xd6, 0xf1, 0x5c, 0x4b, 0x7b, 0xe4, 0xb9, 0x56, 0xac, 0xa8, 0x1a, 0x78, 0xde, 0x00,
	0xe1, 0x72, 0x47, 0xc0, 0x88, 0xfa, 0x4d, 0x5c, 0xa1, 0xd0, 0x67, 0x16, 0xec, 0xc6, 0x49, 0x14,
	0x8c, 0x72, 0xf4, 0x62, 0x9b, 0x36, 0x97, 0x82, 0xcd, 0x1a, 0x96, 0xb3, 0x21, 0xa3, 0x38, 0xea,
	0x3e, 0xc2, 0x72, 0x1c, 0xff, 0x09, 0x80, 0x7b, 0xdf, 0x66, 0x7d, 0xf8, 0xcb, 0x65, 0x7d, 0x44,
	0x78, 0x21, 0xfe, 0xbf, 0xc3, 0x85, 0xff, 0x8c, 0xff, 0xa9, 0xfe, 0x1a, 0xae, 0x52, 0x10, 0x3e,
	0x73, 0x22, 0xbb, 0xe5, 0xbc, 0x52, 0xc8, 0x26, 0x31, 0x42, 0x91, 0x56, 0x70, 0xa9, 0x0b, 0x42,
	0x98, 0x1d, 0x90, 0x0b, 0x0a, 0xaa, 0x57, 0x5b, 0xd5, 0x83, 0xb3, 0xd5, 0x32, 0x2e, 0xbe, 0x66,
	0x94, 0x82, 0x63, 0x24, 0xe0, 0x84, 0x8c, 0x0f, 0x11, 0x5e, 0x7a, 0xee, 0x52, 0xd3, 0xbf, 0x68,
	0xd5, 0xd6, 0xa0, 0xdd, 0x0f, 0xb8, 0xe3, 0x80, 0xe5, 0x03, 0x9d, 0x94, 0xf9, 0x0a, 0x2e, 0xf5,
	0x04, 0x78, 0xa1, 0x5f, 0x61, 0xe7, 0xfe, 0x4b, 0x73, 0x8a, 0x21, 0xba, 0x4d, 0xa5, 0xc6, 0xb0,
	0xb3, 0x85, 0x71, 0x3d, 0xbe, 0x30, 0x5a, 0xd2, 0xf1, 0x54, 0x38, 0xe8, 0xf2, 0x94, 0x82, 0xea,
	0xd3, 0xeb, 0x55, 0x2d, 0x3a, 0x1b, 0xda, 0x0e, 0x80, 0x97, 0xfe, 0x68, 0x40, 0x54, 0x3f, 0x21,
	0xac, 0x8c, 0xab, 0x62, 0x8b, 0x09, 0xeb, 0x9f, 0x2a, 0xe4, 0x10, 0xe1, 0x85, 0xd1, 0x42, 0x9e,
	0x46, 0x36, 0x4e, 0xca, 0xbe, 0x81, 0x2b, 0x02, 0x1c, 0x7a, 0x49, 0xfe, 0xe5, 0x08, 0xdf, 0xa6,
	0xd2, 0x06, 0xbe, 0x1a, 0x73, 0x27, 0x14, 0x32, 0x13, 0xd1, 0xb6, 0x92, 0x72, 0x86, 0x46, 0x6e,
	0xea, 0x92, 0x91, 0x53, 0x37, 0xf0, 0xb5, 0x94, 0x1b, 0x4c, 0xb8, 0x5c, 0x4c, 0xf4, 0x60, 0xfd,
	0x47, 0x1e, 0x97, 0x2f, 0x8e, 0x8c, 0x8f, 0xab, 0xa3, 0xbb, 0x21, 0x69, 0xdf, 0x98, 0xb5, 0x55,
	0x5b, 0xfc, 0x05, 0x66, 0xd7, 0x8a, 0x7a, 0xe7, 0xed, 0x97, 0x6f, 0xef, 0xf3, 0xcb, 0x2a, 0xd1,
	0xfb, 0x6b, 0x7a, 0x78, 0x06, 0xf4, 0x04, 0xd2, 0x87, 0x79, 0x4d, 0xd4, 0x90, 0xf6, 0xf0, 0x6c,
	0x76, 0x7b, 0x28, 0x29, 0xe9, 0x0c, 0xa3, 0x36, 0x9f, 0xd6, 0x7f, 0xc1, 0x19, 0x55, 0xb5, 0x81,
	0x6e, 0x5d, 0x5d, 0xce, 0xea, 0x66, 0x42, 0x84, 0xe2, 0x1e, 0x9e, 0x49, 0xef, 0x8d, 0x94, 0xf2,
	0x28, 0xfc, 0x1b, 0xd9, 0xbb, 0x03, 0xd9, 0x5b, 0xaa, 0x92, 0x95, 0x1d, 0xfd, 0xbe, 0x89, 0x1a,
	0x2d, 0xe3, 0xe8, 0x84, 0xe4, 0x8e, 0x4f, 0x48, 0xee, 0xfc, 0x84, 0xa0, 0xfd, 0x80, 0xa0, 0x0f,
	0x01, 0x41, 0x9f, 0x03, 0x82, 0x8e, 0x02, 0x82, 0xbe, 0x06, 0x04, 0x7d, 0x0f, 0x48, 0xee, 0x3c,
	0x20, 0xe8, 0xdd, 0x29, 0xc9, 0x1d, 0x9d, 0x92, 0xdc, 0xf1, 0x29, 0xc9, 0xe1, 0xf9, 0xe1, 0x85,
	0x22, 0xc0, 0x0b, 0x27, 0x44, 0xbc, 0x8c, 0x6f, 0xb1, 0x76, 0x71, 0x70, 0xc5, 0xdc, 0xfb, 0x19,
	0x00, 0x00, 0xff, 0xff, 0x67, 0x97, 0x6c, 0xce, 0xe7, 0x06, 0x00, 0x00,
}

func (this *RequestJoinEventBus) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RequestJoinEventBus)
	if !ok {
		that2, ok := that.(RequestJoinEventBus)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if this.Timeout != that1.Timeout {
		return false
	}
	return true
}
func (this *ResponseJoinEventBus) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ResponseJoinEventBus)
	if !ok {
		that2, ok := that.(ResponseJoinEventBus)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.DeviceId != that1.DeviceId {
		return false
	}
	return true
}
func (this *RequestKeepAliveEventBus) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RequestKeepAliveEventBus)
	if !ok {
		that2, ok := that.(RequestKeepAliveEventBus)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if this.Timeout != that1.Timeout {
		return false
	}
	return true
}
func (this *RequestPostToEventBus) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RequestPostToEventBus)
	if !ok {
		that2, ok := that.(RequestPostToEventBus)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if len(this.Destinations) != len(that1.Destinations) {
		return false
	}
	for i := range this.Destinations {
		if this.Destinations[i] != that1.Destinations[i] {
			return false
		}
	}
	if !bytes.Equal(this.Message, that1.Message) {
		return false
	}
	return true
}
func (this *UpdateEventBusDeviceConnected) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpdateEventBusDeviceConnected)
	if !ok {
		that2, ok := that.(UpdateEventBusDeviceConnected)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if this.UserId != that1.UserId {
		return false
	}
	if this.DeviceId != that1.DeviceId {
		return false
	}
	if !this.Peer.Equal(that1.Peer) {
		return false
	}
	return true
}
func (this *UpdateEventBusDeviceDisconnected) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpdateEventBusDeviceDisconnected)
	if !ok {
		that2, ok := that.(UpdateEventBusDeviceDisconnected)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if this.UserId != that1.UserId {
		return false
	}
	if this.DeviceId != that1.DeviceId {
		return false
	}
	if !this.Peer.Equal(that1.Peer) {
		return false
	}
	return true
}
func (this *UpdateEventBusMessage) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpdateEventBusMessage)
	if !ok {
		that2, ok := that.(UpdateEventBusMessage)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if this.SenderId != that1.SenderId {
		return false
	}
	if this.SenderDeviceId != that1.SenderDeviceId {
		return false
	}
	if !bytes.Equal(this.Message, that1.Message) {
		return false
	}
	return true
}
func (this *UpdateEventBusDisposed) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpdateEventBusDisposed)
	if !ok {
		that2, ok := that.(UpdateEventBusDisposed)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	return true
}
func (this *RequestJoinEventBus) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&dialog.RequestJoinEventBus{")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	s = append(s, "Timeout: "+fmt.Sprintf("%#v", this.Timeout)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ResponseJoinEventBus) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&dialog.ResponseJoinEventBus{")
	s = append(s, "DeviceId: "+fmt.Sprintf("%#v", this.DeviceId)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RequestKeepAliveEventBus) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&dialog.RequestKeepAliveEventBus{")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	s = append(s, "Timeout: "+fmt.Sprintf("%#v", this.Timeout)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RequestPostToEventBus) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&dialog.RequestPostToEventBus{")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	s = append(s, "Destinations: "+fmt.Sprintf("%#v", this.Destinations)+",\n")
	s = append(s, "Message: "+fmt.Sprintf("%#v", this.Message)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UpdateEventBusDeviceConnected) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&dialog.UpdateEventBusDeviceConnected{")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	s = append(s, "UserId: "+fmt.Sprintf("%#v", this.UserId)+",\n")
	s = append(s, "DeviceId: "+fmt.Sprintf("%#v", this.DeviceId)+",\n")
	if this.Peer != nil {
		s = append(s, "Peer: "+fmt.Sprintf("%#v", this.Peer)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UpdateEventBusDeviceDisconnected) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&dialog.UpdateEventBusDeviceDisconnected{")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	s = append(s, "UserId: "+fmt.Sprintf("%#v", this.UserId)+",\n")
	s = append(s, "DeviceId: "+fmt.Sprintf("%#v", this.DeviceId)+",\n")
	if this.Peer != nil {
		s = append(s, "Peer: "+fmt.Sprintf("%#v", this.Peer)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UpdateEventBusMessage) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&dialog.UpdateEventBusMessage{")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	s = append(s, "SenderId: "+fmt.Sprintf("%#v", this.SenderId)+",\n")
	s = append(s, "SenderDeviceId: "+fmt.Sprintf("%#v", this.SenderDeviceId)+",\n")
	s = append(s, "Message: "+fmt.Sprintf("%#v", this.Message)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UpdateEventBusDisposed) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&dialog.UpdateEventBusDisposed{")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringEventBus(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// EventBusClient is the client API for EventBus service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type EventBusClient interface {
	JoinEventBus(ctx context.Context, in *RequestJoinEventBus, opts ...grpc.CallOption) (*ResponseJoinEventBus, error)
	KeepAliveEventBus(ctx context.Context, in *RequestKeepAliveEventBus, opts ...grpc.CallOption) (*ResponseVoid, error)
	PostToEventBus(ctx context.Context, in *RequestPostToEventBus, opts ...grpc.CallOption) (*ResponseVoid, error)
}

type eventBusClient struct {
	cc *grpc.ClientConn
}

func NewEventBusClient(cc *grpc.ClientConn) EventBusClient {
	return &eventBusClient{cc}
}

func (c *eventBusClient) JoinEventBus(ctx context.Context, in *RequestJoinEventBus, opts ...grpc.CallOption) (*ResponseJoinEventBus, error) {
	out := new(ResponseJoinEventBus)
	err := c.cc.Invoke(ctx, "/dialog.EventBus/JoinEventBus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventBusClient) KeepAliveEventBus(ctx context.Context, in *RequestKeepAliveEventBus, opts ...grpc.CallOption) (*ResponseVoid, error) {
	out := new(ResponseVoid)
	err := c.cc.Invoke(ctx, "/dialog.EventBus/KeepAliveEventBus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventBusClient) PostToEventBus(ctx context.Context, in *RequestPostToEventBus, opts ...grpc.CallOption) (*ResponseVoid, error) {
	out := new(ResponseVoid)
	err := c.cc.Invoke(ctx, "/dialog.EventBus/PostToEventBus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EventBusServer is the server API for EventBus service.
type EventBusServer interface {
	JoinEventBus(context.Context, *RequestJoinEventBus) (*ResponseJoinEventBus, error)
	KeepAliveEventBus(context.Context, *RequestKeepAliveEventBus) (*ResponseVoid, error)
	PostToEventBus(context.Context, *RequestPostToEventBus) (*ResponseVoid, error)
}

// UnimplementedEventBusServer can be embedded to have forward compatible implementations.
type UnimplementedEventBusServer struct {
}

func (*UnimplementedEventBusServer) JoinEventBus(ctx context.Context, req *RequestJoinEventBus) (*ResponseJoinEventBus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JoinEventBus not implemented")
}
func (*UnimplementedEventBusServer) KeepAliveEventBus(ctx context.Context, req *RequestKeepAliveEventBus) (*ResponseVoid, error) {
	return nil, status.Errorf(codes.Unimplemented, "method KeepAliveEventBus not implemented")
}
func (*UnimplementedEventBusServer) PostToEventBus(ctx context.Context, req *RequestPostToEventBus) (*ResponseVoid, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostToEventBus not implemented")
}

func RegisterEventBusServer(s *grpc.Server, srv EventBusServer) {
	s.RegisterService(&_EventBus_serviceDesc, srv)
}

func _EventBus_JoinEventBus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestJoinEventBus)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventBusServer).JoinEventBus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dialog.EventBus/JoinEventBus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventBusServer).JoinEventBus(ctx, req.(*RequestJoinEventBus))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventBus_KeepAliveEventBus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestKeepAliveEventBus)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventBusServer).KeepAliveEventBus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dialog.EventBus/KeepAliveEventBus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventBusServer).KeepAliveEventBus(ctx, req.(*RequestKeepAliveEventBus))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventBus_PostToEventBus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestPostToEventBus)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventBusServer).PostToEventBus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dialog.EventBus/PostToEventBus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventBusServer).PostToEventBus(ctx, req.(*RequestPostToEventBus))
	}
	return interceptor(ctx, in, info, handler)
}

var _EventBus_serviceDesc = grpc.ServiceDesc{
	ServiceName: "dialog.EventBus",
	HandlerType: (*EventBusServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "JoinEventBus",
			Handler:    _EventBus_JoinEventBus_Handler,
		},
		{
			MethodName: "KeepAliveEventBus",
			Handler:    _EventBus_KeepAliveEventBus_Handler,
		},
		{
			MethodName: "PostToEventBus",
			Handler:    _EventBus_PostToEventBus_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "event_bus.proto",
}

func (m *RequestJoinEventBus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestJoinEventBus) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RequestJoinEventBus) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Timeout != 0 {
		i = encodeVarintEventBus(dAtA, i, uint64(m.Timeout))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintEventBus(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ResponseJoinEventBus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResponseJoinEventBus) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ResponseJoinEventBus) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.DeviceId != 0 {
		i = encodeVarintEventBus(dAtA, i, uint64(m.DeviceId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *RequestKeepAliveEventBus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestKeepAliveEventBus) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RequestKeepAliveEventBus) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Timeout != 0 {
		i = encodeVarintEventBus(dAtA, i, uint64(m.Timeout))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintEventBus(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RequestPostToEventBus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestPostToEventBus) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RequestPostToEventBus) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Message) > 0 {
		i -= len(m.Message)
		copy(dAtA[i:], m.Message)
		i = encodeVarintEventBus(dAtA, i, uint64(len(m.Message)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Destinations) > 0 {
		dAtA2 := make([]byte, len(m.Destinations)*10)
		var j1 int
		for _, num1 := range m.Destinations {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		i -= j1
		copy(dAtA[i:], dAtA2[:j1])
		i = encodeVarintEventBus(dAtA, i, uint64(j1))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintEventBus(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UpdateEventBusDeviceConnected) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateEventBusDeviceConnected) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateEventBusDeviceConnected) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Peer != nil {
		{
			size, err := m.Peer.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEventBus(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.DeviceId != 0 {
		i = encodeVarintEventBus(dAtA, i, uint64(m.DeviceId))
		i--
		dAtA[i] = 0x18
	}
	if m.UserId != 0 {
		i = encodeVarintEventBus(dAtA, i, uint64(m.UserId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintEventBus(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UpdateEventBusDeviceDisconnected) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateEventBusDeviceDisconnected) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateEventBusDeviceDisconnected) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Peer != nil {
		{
			size, err := m.Peer.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEventBus(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.DeviceId != 0 {
		i = encodeVarintEventBus(dAtA, i, uint64(m.DeviceId))
		i--
		dAtA[i] = 0x18
	}
	if m.UserId != 0 {
		i = encodeVarintEventBus(dAtA, i, uint64(m.UserId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintEventBus(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UpdateEventBusMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateEventBusMessage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateEventBusMessage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Message) > 0 {
		i -= len(m.Message)
		copy(dAtA[i:], m.Message)
		i = encodeVarintEventBus(dAtA, i, uint64(len(m.Message)))
		i--
		dAtA[i] = 0x22
	}
	if m.SenderDeviceId != 0 {
		i = encodeVarintEventBus(dAtA, i, uint64(m.SenderDeviceId))
		i--
		dAtA[i] = 0x18
	}
	if m.SenderId != 0 {
		i = encodeVarintEventBus(dAtA, i, uint64(m.SenderId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintEventBus(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UpdateEventBusDisposed) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateEventBusDisposed) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateEventBusDisposed) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintEventBus(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintEventBus(dAtA []byte, offset int, v uint64) int {
	offset -= sovEventBus(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *RequestJoinEventBus) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovEventBus(uint64(l))
	}
	if m.Timeout != 0 {
		n += 1 + sovEventBus(uint64(m.Timeout))
	}
	return n
}

func (m *ResponseJoinEventBus) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DeviceId != 0 {
		n += 1 + sovEventBus(uint64(m.DeviceId))
	}
	return n
}

func (m *RequestKeepAliveEventBus) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovEventBus(uint64(l))
	}
	if m.Timeout != 0 {
		n += 1 + sovEventBus(uint64(m.Timeout))
	}
	return n
}

func (m *RequestPostToEventBus) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovEventBus(uint64(l))
	}
	if len(m.Destinations) > 0 {
		l = 0
		for _, e := range m.Destinations {
			l += sovEventBus(uint64(e))
		}
		n += 1 + sovEventBus(uint64(l)) + l
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovEventBus(uint64(l))
	}
	return n
}

func (m *UpdateEventBusDeviceConnected) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovEventBus(uint64(l))
	}
	if m.UserId != 0 {
		n += 1 + sovEventBus(uint64(m.UserId))
	}
	if m.DeviceId != 0 {
		n += 1 + sovEventBus(uint64(m.DeviceId))
	}
	if m.Peer != nil {
		l = m.Peer.Size()
		n += 1 + l + sovEventBus(uint64(l))
	}
	return n
}

func (m *UpdateEventBusDeviceDisconnected) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovEventBus(uint64(l))
	}
	if m.UserId != 0 {
		n += 1 + sovEventBus(uint64(m.UserId))
	}
	if m.DeviceId != 0 {
		n += 1 + sovEventBus(uint64(m.DeviceId))
	}
	if m.Peer != nil {
		l = m.Peer.Size()
		n += 1 + l + sovEventBus(uint64(l))
	}
	return n
}

func (m *UpdateEventBusMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovEventBus(uint64(l))
	}
	if m.SenderId != 0 {
		n += 1 + sovEventBus(uint64(m.SenderId))
	}
	if m.SenderDeviceId != 0 {
		n += 1 + sovEventBus(uint64(m.SenderDeviceId))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovEventBus(uint64(l))
	}
	return n
}

func (m *UpdateEventBusDisposed) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovEventBus(uint64(l))
	}
	return n
}

func sovEventBus(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozEventBus(x uint64) (n int) {
	return sovEventBus(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *RequestJoinEventBus) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RequestJoinEventBus{`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`Timeout:` + fmt.Sprintf("%v", this.Timeout) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ResponseJoinEventBus) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ResponseJoinEventBus{`,
		`DeviceId:` + fmt.Sprintf("%v", this.DeviceId) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RequestKeepAliveEventBus) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RequestKeepAliveEventBus{`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`Timeout:` + fmt.Sprintf("%v", this.Timeout) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RequestPostToEventBus) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RequestPostToEventBus{`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`Destinations:` + fmt.Sprintf("%v", this.Destinations) + `,`,
		`Message:` + fmt.Sprintf("%v", this.Message) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateEventBusDeviceConnected) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateEventBusDeviceConnected{`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`UserId:` + fmt.Sprintf("%v", this.UserId) + `,`,
		`DeviceId:` + fmt.Sprintf("%v", this.DeviceId) + `,`,
		`Peer:` + strings.Replace(fmt.Sprintf("%v", this.Peer), "Peer", "Peer", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateEventBusDeviceDisconnected) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateEventBusDeviceDisconnected{`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`UserId:` + fmt.Sprintf("%v", this.UserId) + `,`,
		`DeviceId:` + fmt.Sprintf("%v", this.DeviceId) + `,`,
		`Peer:` + strings.Replace(fmt.Sprintf("%v", this.Peer), "Peer", "Peer", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateEventBusMessage) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateEventBusMessage{`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`SenderId:` + fmt.Sprintf("%v", this.SenderId) + `,`,
		`SenderDeviceId:` + fmt.Sprintf("%v", this.SenderDeviceId) + `,`,
		`Message:` + fmt.Sprintf("%v", this.Message) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateEventBusDisposed) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateEventBusDisposed{`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringEventBus(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *RequestJoinEventBus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEventBus
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestJoinEventBus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestJoinEventBus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEventBus
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEventBus
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEventBus
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timeout", wireType)
			}
			m.Timeout = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEventBus
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Timeout |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEventBus(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEventBus
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthEventBus
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResponseJoinEventBus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEventBus
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResponseJoinEventBus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResponseJoinEventBus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeviceId", wireType)
			}
			m.DeviceId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEventBus
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DeviceId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEventBus(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEventBus
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthEventBus
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestKeepAliveEventBus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEventBus
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestKeepAliveEventBus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestKeepAliveEventBus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEventBus
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEventBus
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEventBus
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timeout", wireType)
			}
			m.Timeout = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEventBus
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Timeout |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEventBus(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEventBus
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthEventBus
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestPostToEventBus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEventBus
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestPostToEventBus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestPostToEventBus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEventBus
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEventBus
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEventBus
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowEventBus
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Destinations = append(m.Destinations, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowEventBus
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthEventBus
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthEventBus
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Destinations) == 0 {
					m.Destinations = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowEventBus
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Destinations = append(m.Destinations, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Destinations", wireType)
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEventBus
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEventBus
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEventBus
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = append(m.Message[:0], dAtA[iNdEx:postIndex]...)
			if m.Message == nil {
				m.Message = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEventBus(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEventBus
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthEventBus
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateEventBusDeviceConnected) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEventBus
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateEventBusDeviceConnected: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateEventBusDeviceConnected: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEventBus
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEventBus
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEventBus
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEventBus
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeviceId", wireType)
			}
			m.DeviceId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEventBus
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DeviceId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Peer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEventBus
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEventBus
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEventBus
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Peer == nil {
				m.Peer = &Peer{}
			}
			if err := m.Peer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEventBus(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEventBus
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthEventBus
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateEventBusDeviceDisconnected) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEventBus
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateEventBusDeviceDisconnected: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateEventBusDeviceDisconnected: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEventBus
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEventBus
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEventBus
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEventBus
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeviceId", wireType)
			}
			m.DeviceId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEventBus
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DeviceId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Peer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEventBus
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEventBus
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEventBus
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Peer == nil {
				m.Peer = &Peer{}
			}
			if err := m.Peer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEventBus(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEventBus
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthEventBus
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateEventBusMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEventBus
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateEventBusMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateEventBusMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEventBus
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEventBus
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEventBus
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SenderId", wireType)
			}
			m.SenderId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEventBus
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SenderId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SenderDeviceId", wireType)
			}
			m.SenderDeviceId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEventBus
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SenderDeviceId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEventBus
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEventBus
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEventBus
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = append(m.Message[:0], dAtA[iNdEx:postIndex]...)
			if m.Message == nil {
				m.Message = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEventBus(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEventBus
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthEventBus
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateEventBusDisposed) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEventBus
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateEventBusDisposed: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateEventBusDisposed: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEventBus
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEventBus
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEventBus
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEventBus(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEventBus
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthEventBus
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipEventBus(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowEventBus
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEventBus
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEventBus
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthEventBus
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupEventBus
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthEventBus
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthEventBus        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowEventBus          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupEventBus = fmt.Errorf("proto: unexpected end of group")
)
