// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: clickroad.proto

package dialog

import (
	context "context"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_sortkeys "github.com/gogo/protobuf/sortkeys"
	types "github.com/gogo/protobuf/types"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type TrackContext struct {
	Context map[string]string `protobuf:"bytes,1,rep,name=context,proto3" json:"context,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *TrackContext) Reset()      { *m = TrackContext{} }
func (*TrackContext) ProtoMessage() {}
func (*TrackContext) Descriptor() ([]byte, []int) {
	return fileDescriptor_8e3622ea19d9d328, []int{0}
}
func (m *TrackContext) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TrackContext) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TrackContext.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TrackContext) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TrackContext.Merge(m, src)
}
func (m *TrackContext) XXX_Size() int {
	return m.Size()
}
func (m *TrackContext) XXX_DiscardUnknown() {
	xxx_messageInfo_TrackContext.DiscardUnknown(m)
}

var xxx_messageInfo_TrackContext proto.InternalMessageInfo

func (m *TrackContext) GetContext() map[string]string {
	if m != nil {
		return m.Context
	}
	return nil
}

type TrackScreenView struct {
	Name   string             `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Source *types.StringValue `protobuf:"bytes,2,opt,name=source,proto3" json:"source,omitempty"`
	Url    *types.StringValue `protobuf:"bytes,3,opt,name=url,proto3" json:"url,omitempty"`
}

func (m *TrackScreenView) Reset()      { *m = TrackScreenView{} }
func (*TrackScreenView) ProtoMessage() {}
func (*TrackScreenView) Descriptor() ([]byte, []int) {
	return fileDescriptor_8e3622ea19d9d328, []int{1}
}
func (m *TrackScreenView) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TrackScreenView) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TrackScreenView.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TrackScreenView) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TrackScreenView.Merge(m, src)
}
func (m *TrackScreenView) XXX_Size() int {
	return m.Size()
}
func (m *TrackScreenView) XXX_DiscardUnknown() {
	xxx_messageInfo_TrackScreenView.DiscardUnknown(m)
}

var xxx_messageInfo_TrackScreenView proto.InternalMessageInfo

func (m *TrackScreenView) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *TrackScreenView) GetSource() *types.StringValue {
	if m != nil {
		return m.Source
	}
	return nil
}

func (m *TrackScreenView) GetUrl() *types.StringValue {
	if m != nil {
		return m.Url
	}
	return nil
}

type TrackEvent struct {
	Category string             `protobuf:"bytes,1,opt,name=category,proto3" json:"category,omitempty"`
	Action   string             `protobuf:"bytes,2,opt,name=action,proto3" json:"action,omitempty"`
	Label    *types.StringValue `protobuf:"bytes,3,opt,name=label,proto3" json:"label,omitempty"`
	Value    *types.DoubleValue `protobuf:"bytes,4,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *TrackEvent) Reset()      { *m = TrackEvent{} }
func (*TrackEvent) ProtoMessage() {}
func (*TrackEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_8e3622ea19d9d328, []int{2}
}
func (m *TrackEvent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TrackEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TrackEvent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TrackEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TrackEvent.Merge(m, src)
}
func (m *TrackEvent) XXX_Size() int {
	return m.Size()
}
func (m *TrackEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_TrackEvent.DiscardUnknown(m)
}

var xxx_messageInfo_TrackEvent proto.InternalMessageInfo

func (m *TrackEvent) GetCategory() string {
	if m != nil {
		return m.Category
	}
	return ""
}

func (m *TrackEvent) GetAction() string {
	if m != nil {
		return m.Action
	}
	return ""
}

func (m *TrackEvent) GetLabel() *types.StringValue {
	if m != nil {
		return m.Label
	}
	return nil
}

func (m *TrackEvent) GetValue() *types.DoubleValue {
	if m != nil {
		return m.Value
	}
	return nil
}

type TrackTiming struct {
	Category string             `protobuf:"bytes,1,opt,name=category,proto3" json:"category,omitempty"`
	Variable string             `protobuf:"bytes,2,opt,name=variable,proto3" json:"variable,omitempty"`
	Time     int64              `protobuf:"varint,3,opt,name=time,proto3" json:"time,omitempty"`
	Label    *types.StringValue `protobuf:"bytes,4,opt,name=label,proto3" json:"label,omitempty"`
}

func (m *TrackTiming) Reset()      { *m = TrackTiming{} }
func (*TrackTiming) ProtoMessage() {}
func (*TrackTiming) Descriptor() ([]byte, []int) {
	return fileDescriptor_8e3622ea19d9d328, []int{3}
}
func (m *TrackTiming) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TrackTiming) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TrackTiming.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TrackTiming) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TrackTiming.Merge(m, src)
}
func (m *TrackTiming) XXX_Size() int {
	return m.Size()
}
func (m *TrackTiming) XXX_DiscardUnknown() {
	xxx_messageInfo_TrackTiming.DiscardUnknown(m)
}

var xxx_messageInfo_TrackTiming proto.InternalMessageInfo

func (m *TrackTiming) GetCategory() string {
	if m != nil {
		return m.Category
	}
	return ""
}

func (m *TrackTiming) GetVariable() string {
	if m != nil {
		return m.Variable
	}
	return ""
}

func (m *TrackTiming) GetTime() int64 {
	if m != nil {
		return m.Time
	}
	return 0
}

func (m *TrackTiming) GetLabel() *types.StringValue {
	if m != nil {
		return m.Label
	}
	return nil
}

type TrackSocial struct {
	Network string `protobuf:"bytes,1,opt,name=network,proto3" json:"network,omitempty"`
	Action  string `protobuf:"bytes,2,opt,name=action,proto3" json:"action,omitempty"`
	Target  string `protobuf:"bytes,3,opt,name=target,proto3" json:"target,omitempty"`
}

func (m *TrackSocial) Reset()      { *m = TrackSocial{} }
func (*TrackSocial) ProtoMessage() {}
func (*TrackSocial) Descriptor() ([]byte, []int) {
	return fileDescriptor_8e3622ea19d9d328, []int{4}
}
func (m *TrackSocial) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TrackSocial) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TrackSocial.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TrackSocial) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TrackSocial.Merge(m, src)
}
func (m *TrackSocial) XXX_Size() int {
	return m.Size()
}
func (m *TrackSocial) XXX_DiscardUnknown() {
	xxx_messageInfo_TrackSocial.DiscardUnknown(m)
}

var xxx_messageInfo_TrackSocial proto.InternalMessageInfo

func (m *TrackSocial) GetNetwork() string {
	if m != nil {
		return m.Network
	}
	return ""
}

func (m *TrackSocial) GetAction() string {
	if m != nil {
		return m.Action
	}
	return ""
}

func (m *TrackSocial) GetTarget() string {
	if m != nil {
		return m.Target
	}
	return ""
}

type TrackError struct {
	Message string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	Fatal   bool   `protobuf:"varint,2,opt,name=fatal,proto3" json:"fatal,omitempty"`
}

func (m *TrackError) Reset()      { *m = TrackError{} }
func (*TrackError) ProtoMessage() {}
func (*TrackError) Descriptor() ([]byte, []int) {
	return fileDescriptor_8e3622ea19d9d328, []int{5}
}
func (m *TrackError) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TrackError) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TrackError.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TrackError) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TrackError.Merge(m, src)
}
func (m *TrackError) XXX_Size() int {
	return m.Size()
}
func (m *TrackError) XXX_DiscardUnknown() {
	xxx_messageInfo_TrackError.DiscardUnknown(m)
}

var xxx_messageInfo_TrackError proto.InternalMessageInfo

func (m *TrackError) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *TrackError) GetFatal() bool {
	if m != nil {
		return m.Fatal
	}
	return false
}

type TrackMetric struct {
	Time *types.Timestamp `protobuf:"bytes,1,opt,name=time,proto3" json:"time,omitempty"`
	// Types that are valid to be assigned to Metric:
	//	*TrackMetric_Context
	//	*TrackMetric_ScreenView
	//	*TrackMetric_Event
	//	*TrackMetric_Timing
	//	*TrackMetric_Social
	//	*TrackMetric_Error
	Metric isTrackMetric_Metric `protobuf_oneof:"metric"`
}

func (m *TrackMetric) Reset()      { *m = TrackMetric{} }
func (*TrackMetric) ProtoMessage() {}
func (*TrackMetric) Descriptor() ([]byte, []int) {
	return fileDescriptor_8e3622ea19d9d328, []int{6}
}
func (m *TrackMetric) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TrackMetric) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TrackMetric.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TrackMetric) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TrackMetric.Merge(m, src)
}
func (m *TrackMetric) XXX_Size() int {
	return m.Size()
}
func (m *TrackMetric) XXX_DiscardUnknown() {
	xxx_messageInfo_TrackMetric.DiscardUnknown(m)
}

var xxx_messageInfo_TrackMetric proto.InternalMessageInfo

type isTrackMetric_Metric interface {
	isTrackMetric_Metric()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type TrackMetric_Context struct {
	Context *TrackContext `protobuf:"bytes,2,opt,name=context,proto3,oneof" json:"context,omitempty"`
}
type TrackMetric_ScreenView struct {
	ScreenView *TrackScreenView `protobuf:"bytes,3,opt,name=screen_view,json=screenView,proto3,oneof" json:"screen_view,omitempty"`
}
type TrackMetric_Event struct {
	Event *TrackEvent `protobuf:"bytes,4,opt,name=event,proto3,oneof" json:"event,omitempty"`
}
type TrackMetric_Timing struct {
	Timing *TrackTiming `protobuf:"bytes,5,opt,name=timing,proto3,oneof" json:"timing,omitempty"`
}
type TrackMetric_Social struct {
	Social *TrackSocial `protobuf:"bytes,6,opt,name=social,proto3,oneof" json:"social,omitempty"`
}
type TrackMetric_Error struct {
	Error *TrackError `protobuf:"bytes,7,opt,name=error,proto3,oneof" json:"error,omitempty"`
}

func (*TrackMetric_Context) isTrackMetric_Metric()    {}
func (*TrackMetric_ScreenView) isTrackMetric_Metric() {}
func (*TrackMetric_Event) isTrackMetric_Metric()      {}
func (*TrackMetric_Timing) isTrackMetric_Metric()     {}
func (*TrackMetric_Social) isTrackMetric_Metric()     {}
func (*TrackMetric_Error) isTrackMetric_Metric()      {}

func (m *TrackMetric) GetMetric() isTrackMetric_Metric {
	if m != nil {
		return m.Metric
	}
	return nil
}

func (m *TrackMetric) GetTime() *types.Timestamp {
	if m != nil {
		return m.Time
	}
	return nil
}

func (m *TrackMetric) GetContext() *TrackContext {
	if x, ok := m.GetMetric().(*TrackMetric_Context); ok {
		return x.Context
	}
	return nil
}

func (m *TrackMetric) GetScreenView() *TrackScreenView {
	if x, ok := m.GetMetric().(*TrackMetric_ScreenView); ok {
		return x.ScreenView
	}
	return nil
}

func (m *TrackMetric) GetEvent() *TrackEvent {
	if x, ok := m.GetMetric().(*TrackMetric_Event); ok {
		return x.Event
	}
	return nil
}

func (m *TrackMetric) GetTiming() *TrackTiming {
	if x, ok := m.GetMetric().(*TrackMetric_Timing); ok {
		return x.Timing
	}
	return nil
}

func (m *TrackMetric) GetSocial() *TrackSocial {
	if x, ok := m.GetMetric().(*TrackMetric_Social); ok {
		return x.Social
	}
	return nil
}

func (m *TrackMetric) GetError() *TrackError {
	if x, ok := m.GetMetric().(*TrackMetric_Error); ok {
		return x.Error
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*TrackMetric) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*TrackMetric_Context)(nil),
		(*TrackMetric_ScreenView)(nil),
		(*TrackMetric_Event)(nil),
		(*TrackMetric_Timing)(nil),
		(*TrackMetric_Social)(nil),
		(*TrackMetric_Error)(nil),
	}
}

type RequestTrackEvent struct {
	Cid     string         `protobuf:"bytes,1,opt,name=cid,proto3" json:"cid,omitempty"`
	Metrics []*TrackMetric `protobuf:"bytes,2,rep,name=metrics,proto3" json:"metrics,omitempty"`
}

func (m *RequestTrackEvent) Reset()      { *m = RequestTrackEvent{} }
func (*RequestTrackEvent) ProtoMessage() {}
func (*RequestTrackEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_8e3622ea19d9d328, []int{7}
}
func (m *RequestTrackEvent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RequestTrackEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RequestTrackEvent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RequestTrackEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RequestTrackEvent.Merge(m, src)
}
func (m *RequestTrackEvent) XXX_Size() int {
	return m.Size()
}
func (m *RequestTrackEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_RequestTrackEvent.DiscardUnknown(m)
}

var xxx_messageInfo_RequestTrackEvent proto.InternalMessageInfo

func (m *RequestTrackEvent) GetCid() string {
	if m != nil {
		return m.Cid
	}
	return ""
}

func (m *RequestTrackEvent) GetMetrics() []*TrackMetric {
	if m != nil {
		return m.Metrics
	}
	return nil
}

type ResponseTrackEvent struct {
	Cid string `protobuf:"bytes,1,opt,name=cid,proto3" json:"cid,omitempty"`
}

func (m *ResponseTrackEvent) Reset()      { *m = ResponseTrackEvent{} }
func (*ResponseTrackEvent) ProtoMessage() {}
func (*ResponseTrackEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_8e3622ea19d9d328, []int{8}
}
func (m *ResponseTrackEvent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ResponseTrackEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ResponseTrackEvent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ResponseTrackEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResponseTrackEvent.Merge(m, src)
}
func (m *ResponseTrackEvent) XXX_Size() int {
	return m.Size()
}
func (m *ResponseTrackEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_ResponseTrackEvent.DiscardUnknown(m)
}

var xxx_messageInfo_ResponseTrackEvent proto.InternalMessageInfo

func (m *ResponseTrackEvent) GetCid() string {
	if m != nil {
		return m.Cid
	}
	return ""
}

func init() {
	proto.RegisterType((*TrackContext)(nil), "clickroad.TrackContext")
	proto.RegisterMapType((map[string]string)(nil), "clickroad.TrackContext.ContextEntry")
	proto.RegisterType((*TrackScreenView)(nil), "clickroad.TrackScreenView")
	proto.RegisterType((*TrackEvent)(nil), "clickroad.TrackEvent")
	proto.RegisterType((*TrackTiming)(nil), "clickroad.TrackTiming")
	proto.RegisterType((*TrackSocial)(nil), "clickroad.TrackSocial")
	proto.RegisterType((*TrackError)(nil), "clickroad.TrackError")
	proto.RegisterType((*TrackMetric)(nil), "clickroad.TrackMetric")
	proto.RegisterType((*RequestTrackEvent)(nil), "clickroad.RequestTrackEvent")
	proto.RegisterType((*ResponseTrackEvent)(nil), "clickroad.ResponseTrackEvent")
}

func init() { proto.RegisterFile("clickroad.proto", fileDescriptor_8e3622ea19d9d328) }

var fileDescriptor_8e3622ea19d9d328 = []byte{
	// 697 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x54, 0x4d, 0x4f, 0xdb, 0x4a,
	0x14, 0xf5, 0x24, 0xc4, 0x24, 0x37, 0x48, 0xf0, 0x46, 0xef, 0xf1, 0x2c, 0x8b, 0xba, 0xc8, 0xaa,
	0x2a, 0x36, 0x35, 0x28, 0x74, 0x51, 0x21, 0xda, 0x05, 0x14, 0x29, 0x52, 0xd5, 0x8d, 0x41, 0x50,
	0x75, 0x53, 0x4d, 0x9c, 0xc1, 0xb2, 0xe2, 0x78, 0xd2, 0xf1, 0x24, 0x29, 0xbb, 0xae, 0x5b, 0x55,
	0xea, 0xcf, 0xe0, 0xa7, 0x74, 0xc9, 0x92, 0x65, 0x09, 0x9b, 0x2e, 0xf9, 0x03, 0x95, 0xaa, 0xf9,
	0x70, 0x12, 0x42, 0x83, 0x58, 0x65, 0x6e, 0xe6, 0x9c, 0x3b, 0xe7, 0xde, 0x7b, 0xae, 0x61, 0x39,
	0x4a, 0x93, 0xa8, 0xc3, 0x19, 0x69, 0x07, 0x3d, 0xce, 0x04, 0xc3, 0xb5, 0xf1, 0x1f, 0xae, 0x17,
	0x33, 0x16, 0xa7, 0x74, 0x53, 0x5d, 0xb4, 0xfa, 0xa7, 0x9b, 0x43, 0x4e, 0x7a, 0x3d, 0xca, 0x73,
	0x0d, 0x75, 0x1f, 0xcf, 0xde, 0x8b, 0xa4, 0x4b, 0x73, 0x41, 0xba, 0x3d, 0x0d, 0xf0, 0xbf, 0x20,
	0x58, 0x3a, 0xe2, 0x24, 0xea, 0xec, 0xb3, 0x4c, 0xd0, 0x4f, 0x02, 0xbf, 0x82, 0xc5, 0x48, 0x1f,
	0x1d, 0xb4, 0x5e, 0xde, 0xa8, 0x37, 0x9e, 0x04, 0x93, 0xf7, 0xa7, 0x91, 0x81, 0xf9, 0x3d, 0xc8,
	0x04, 0x3f, 0x0b, 0x0b, 0x92, 0xbb, 0x03, 0x4b, 0xd3, 0x17, 0x78, 0x05, 0xca, 0x1d, 0x7a, 0xe6,
	0xa0, 0x75, 0xb4, 0x51, 0x0b, 0xe5, 0x11, 0xff, 0x0b, 0x95, 0x01, 0x49, 0xfb, 0xd4, 0x29, 0xa9,
	0xff, 0x74, 0xb0, 0x53, 0x7a, 0x81, 0xfc, 0xaf, 0x08, 0x96, 0xd5, 0x13, 0x87, 0x11, 0xa7, 0x34,
	0x3b, 0x4e, 0xe8, 0x10, 0x63, 0x58, 0xc8, 0x48, 0x97, 0x9a, 0x04, 0xea, 0x8c, 0x9f, 0x83, 0x9d,
	0xb3, 0x3e, 0x8f, 0x74, 0x8a, 0x7a, 0x63, 0x2d, 0xd0, 0x65, 0x06, 0x45, 0x99, 0xc1, 0xa1, 0xe0,
	0x49, 0x16, 0x1f, 0xcb, 0xcc, 0xa1, 0xc1, 0xe2, 0x00, 0xca, 0x7d, 0x9e, 0x3a, 0xe5, 0x07, 0x50,
	0x24, 0xd0, 0x3f, 0x47, 0x00, 0x4a, 0xcd, 0xc1, 0x80, 0x66, 0x02, 0xbb, 0x50, 0x8d, 0x88, 0xa0,
	0x31, 0xe3, 0x45, 0x35, 0xe3, 0x18, 0xaf, 0x82, 0x4d, 0x22, 0x91, 0xb0, 0xcc, 0xd4, 0x64, 0x22,
	0xdc, 0x80, 0x4a, 0x4a, 0x5a, 0xf4, 0x61, 0x8f, 0x6a, 0xa8, 0xe4, 0xe8, 0xf6, 0x2c, 0xcc, 0xe1,
	0xbc, 0x66, 0xfd, 0x56, 0x4a, 0x0d, 0x47, 0x41, 0xfd, 0x6f, 0x08, 0xea, 0x4a, 0xea, 0x51, 0xd2,
	0x4d, 0xb2, 0xf8, 0x5e, 0xad, 0x2e, 0x54, 0x07, 0x84, 0x27, 0xa4, 0x95, 0x16, 0x13, 0x18, 0xc7,
	0xb2, 0xd9, 0xd2, 0x20, 0x4a, 0x6e, 0x39, 0x54, 0xe7, 0x49, 0x0d, 0x0b, 0x0f, 0xae, 0xc1, 0x3f,
	0x31, 0x72, 0x0e, 0x59, 0x94, 0x90, 0x14, 0x3b, 0xb0, 0x98, 0x51, 0x31, 0x64, 0xbc, 0x63, 0xd4,
	0x14, 0xe1, 0xdc, 0xc6, 0xad, 0x82, 0x2d, 0x08, 0x8f, 0xa9, 0x50, 0x52, 0x6a, 0xa1, 0x89, 0xfc,
	0xdd, 0x62, 0x24, 0x9c, 0x33, 0x2e, 0xf3, 0x76, 0x69, 0x9e, 0x93, 0xb8, 0xb0, 0x47, 0x11, 0x4a,
	0x8f, 0x9d, 0x12, 0x41, 0x52, 0x95, 0xb6, 0x1a, 0xea, 0xc0, 0xff, 0x5d, 0x32, 0xba, 0xde, 0x52,
	0xc1, 0x93, 0x08, 0x07, 0xa6, 0x5c, 0xa4, 0x2a, 0x73, 0xef, 0x54, 0x76, 0x54, 0x2c, 0x8b, 0x69,
	0xc5, 0xf6, 0x64, 0x37, 0xb4, 0xf1, 0xfe, 0x9f, 0xb3, 0x1b, 0x4d, 0x6b, 0xbc, 0x10, 0xf8, 0x25,
	0xd4, 0x73, 0x65, 0xe7, 0x0f, 0x83, 0x84, 0x0e, 0x8d, 0x13, 0xdc, 0x59, 0xe2, 0xc4, 0xf1, 0x4d,
	0x2b, 0x84, 0x7c, 0xe2, 0xff, 0x67, 0x50, 0xa1, 0xd2, 0x7f, 0xa6, 0xfd, 0xff, 0xcd, 0x12, 0x95,
	0x39, 0x9b, 0x56, 0xa8, 0x51, 0x78, 0x0b, 0x6c, 0xa1, 0x3c, 0xe0, 0x54, 0x14, 0x7e, 0x75, 0x16,
	0xaf, 0x1d, 0xd2, 0xb4, 0x42, 0x83, 0x93, 0x8c, 0x5c, 0x8d, 0xc9, 0xb1, 0xff, 0xce, 0xd0, 0x43,
	0x94, 0x0c, 0x8d, 0x53, 0x92, 0x64, 0xff, 0x9d, 0xc5, 0x39, 0x92, 0xe4, 0xa5, 0x92, 0x24, 0x0f,
	0x7b, 0x55, 0xb0, 0xbb, 0xaa, 0xdf, 0xfe, 0x09, 0xfc, 0x13, 0xd2, 0x8f, 0x7d, 0x9a, 0x8b, 0xa9,
	0xbd, 0x5a, 0x81, 0x72, 0x94, 0xb4, 0x8b, 0x0f, 0x44, 0x94, 0xb4, 0xf1, 0x96, 0x1c, 0xab, 0x24,
	0xe4, 0x4e, 0x49, 0x7d, 0x82, 0xee, 0x48, 0xd2, 0xf3, 0x0b, 0x0b, 0x98, 0xff, 0x14, 0x70, 0x48,
	0xf3, 0x1e, 0xcb, 0x72, 0x7a, 0x5f, 0xe6, 0xc6, 0x3b, 0xa8, 0xed, 0xcb, 0x4c, 0x21, 0x23, 0x6d,
	0xfc, 0xe6, 0xd6, 0x7a, 0xaf, 0x4d, 0xbd, 0x71, 0x47, 0xa4, 0xfb, 0xe8, 0xd6, 0xed, 0xec, 0x4b,
	0xbe, 0xb5, 0xb7, 0x7b, 0x71, 0xe5, 0x59, 0x97, 0x57, 0x9e, 0x75, 0x73, 0xe5, 0xa1, 0xcf, 0x23,
	0x0f, 0x9d, 0x8f, 0x3c, 0xf4, 0x63, 0xe4, 0xa1, 0x8b, 0x91, 0x87, 0x7e, 0x8e, 0x3c, 0xf4, 0x6b,
	0xe4, 0x59, 0x37, 0x23, 0x0f, 0x7d, 0xbf, 0xf6, 0xac, 0x8b, 0x6b, 0xcf, 0xba, 0xbc, 0xf6, 0xac,
	0xf7, 0x76, 0x3b, 0x21, 0x29, 0x8b, 0x5b, 0xb6, 0xb2, 0xdc, 0xf6, 0x9f, 0x00, 0x00, 0x00, 0xff,
	0xff, 0x65, 0x86, 0xb6, 0xe1, 0xeb, 0x05, 0x00, 0x00,
}

func (this *TrackContext) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TrackContext)
	if !ok {
		that2, ok := that.(TrackContext)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Context) != len(that1.Context) {
		return false
	}
	for i := range this.Context {
		if this.Context[i] != that1.Context[i] {
			return false
		}
	}
	return true
}
func (this *TrackScreenView) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TrackScreenView)
	if !ok {
		that2, ok := that.(TrackScreenView)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if !this.Source.Equal(that1.Source) {
		return false
	}
	if !this.Url.Equal(that1.Url) {
		return false
	}
	return true
}
func (this *TrackEvent) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TrackEvent)
	if !ok {
		that2, ok := that.(TrackEvent)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Category != that1.Category {
		return false
	}
	if this.Action != that1.Action {
		return false
	}
	if !this.Label.Equal(that1.Label) {
		return false
	}
	if !this.Value.Equal(that1.Value) {
		return false
	}
	return true
}
func (this *TrackTiming) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TrackTiming)
	if !ok {
		that2, ok := that.(TrackTiming)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Category != that1.Category {
		return false
	}
	if this.Variable != that1.Variable {
		return false
	}
	if this.Time != that1.Time {
		return false
	}
	if !this.Label.Equal(that1.Label) {
		return false
	}
	return true
}
func (this *TrackSocial) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TrackSocial)
	if !ok {
		that2, ok := that.(TrackSocial)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Network != that1.Network {
		return false
	}
	if this.Action != that1.Action {
		return false
	}
	if this.Target != that1.Target {
		return false
	}
	return true
}
func (this *TrackError) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TrackError)
	if !ok {
		that2, ok := that.(TrackError)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Message != that1.Message {
		return false
	}
	if this.Fatal != that1.Fatal {
		return false
	}
	return true
}
func (this *TrackMetric) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TrackMetric)
	if !ok {
		that2, ok := that.(TrackMetric)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Time.Equal(that1.Time) {
		return false
	}
	if that1.Metric == nil {
		if this.Metric != nil {
			return false
		}
	} else if this.Metric == nil {
		return false
	} else if !this.Metric.Equal(that1.Metric) {
		return false
	}
	return true
}
func (this *TrackMetric_Context) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TrackMetric_Context)
	if !ok {
		that2, ok := that.(TrackMetric_Context)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Context.Equal(that1.Context) {
		return false
	}
	return true
}
func (this *TrackMetric_ScreenView) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TrackMetric_ScreenView)
	if !ok {
		that2, ok := that.(TrackMetric_ScreenView)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ScreenView.Equal(that1.ScreenView) {
		return false
	}
	return true
}
func (this *TrackMetric_Event) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TrackMetric_Event)
	if !ok {
		that2, ok := that.(TrackMetric_Event)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Event.Equal(that1.Event) {
		return false
	}
	return true
}
func (this *TrackMetric_Timing) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TrackMetric_Timing)
	if !ok {
		that2, ok := that.(TrackMetric_Timing)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Timing.Equal(that1.Timing) {
		return false
	}
	return true
}
func (this *TrackMetric_Social) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TrackMetric_Social)
	if !ok {
		that2, ok := that.(TrackMetric_Social)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Social.Equal(that1.Social) {
		return false
	}
	return true
}
func (this *TrackMetric_Error) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TrackMetric_Error)
	if !ok {
		that2, ok := that.(TrackMetric_Error)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Error.Equal(that1.Error) {
		return false
	}
	return true
}
func (this *RequestTrackEvent) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RequestTrackEvent)
	if !ok {
		that2, ok := that.(RequestTrackEvent)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Cid != that1.Cid {
		return false
	}
	if len(this.Metrics) != len(that1.Metrics) {
		return false
	}
	for i := range this.Metrics {
		if !this.Metrics[i].Equal(that1.Metrics[i]) {
			return false
		}
	}
	return true
}
func (this *ResponseTrackEvent) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ResponseTrackEvent)
	if !ok {
		that2, ok := that.(ResponseTrackEvent)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Cid != that1.Cid {
		return false
	}
	return true
}
func (this *TrackContext) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&dialog.TrackContext{")
	keysForContext := make([]string, 0, len(this.Context))
	for k, _ := range this.Context {
		keysForContext = append(keysForContext, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForContext)
	mapStringForContext := "map[string]string{"
	for _, k := range keysForContext {
		mapStringForContext += fmt.Sprintf("%#v: %#v,", k, this.Context[k])
	}
	mapStringForContext += "}"
	if this.Context != nil {
		s = append(s, "Context: "+mapStringForContext+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TrackScreenView) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&dialog.TrackScreenView{")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	if this.Source != nil {
		s = append(s, "Source: "+fmt.Sprintf("%#v", this.Source)+",\n")
	}
	if this.Url != nil {
		s = append(s, "Url: "+fmt.Sprintf("%#v", this.Url)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TrackEvent) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&dialog.TrackEvent{")
	s = append(s, "Category: "+fmt.Sprintf("%#v", this.Category)+",\n")
	s = append(s, "Action: "+fmt.Sprintf("%#v", this.Action)+",\n")
	if this.Label != nil {
		s = append(s, "Label: "+fmt.Sprintf("%#v", this.Label)+",\n")
	}
	if this.Value != nil {
		s = append(s, "Value: "+fmt.Sprintf("%#v", this.Value)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TrackTiming) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&dialog.TrackTiming{")
	s = append(s, "Category: "+fmt.Sprintf("%#v", this.Category)+",\n")
	s = append(s, "Variable: "+fmt.Sprintf("%#v", this.Variable)+",\n")
	s = append(s, "Time: "+fmt.Sprintf("%#v", this.Time)+",\n")
	if this.Label != nil {
		s = append(s, "Label: "+fmt.Sprintf("%#v", this.Label)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TrackSocial) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&dialog.TrackSocial{")
	s = append(s, "Network: "+fmt.Sprintf("%#v", this.Network)+",\n")
	s = append(s, "Action: "+fmt.Sprintf("%#v", this.Action)+",\n")
	s = append(s, "Target: "+fmt.Sprintf("%#v", this.Target)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TrackError) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&dialog.TrackError{")
	s = append(s, "Message: "+fmt.Sprintf("%#v", this.Message)+",\n")
	s = append(s, "Fatal: "+fmt.Sprintf("%#v", this.Fatal)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TrackMetric) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 11)
	s = append(s, "&dialog.TrackMetric{")
	if this.Time != nil {
		s = append(s, "Time: "+fmt.Sprintf("%#v", this.Time)+",\n")
	}
	if this.Metric != nil {
		s = append(s, "Metric: "+fmt.Sprintf("%#v", this.Metric)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TrackMetric_Context) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dialog.TrackMetric_Context{` +
		`Context:` + fmt.Sprintf("%#v", this.Context) + `}`}, ", ")
	return s
}
func (this *TrackMetric_ScreenView) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dialog.TrackMetric_ScreenView{` +
		`ScreenView:` + fmt.Sprintf("%#v", this.ScreenView) + `}`}, ", ")
	return s
}
func (this *TrackMetric_Event) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dialog.TrackMetric_Event{` +
		`Event:` + fmt.Sprintf("%#v", this.Event) + `}`}, ", ")
	return s
}
func (this *TrackMetric_Timing) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dialog.TrackMetric_Timing{` +
		`Timing:` + fmt.Sprintf("%#v", this.Timing) + `}`}, ", ")
	return s
}
func (this *TrackMetric_Social) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dialog.TrackMetric_Social{` +
		`Social:` + fmt.Sprintf("%#v", this.Social) + `}`}, ", ")
	return s
}
func (this *TrackMetric_Error) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dialog.TrackMetric_Error{` +
		`Error:` + fmt.Sprintf("%#v", this.Error) + `}`}, ", ")
	return s
}
func (this *RequestTrackEvent) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&dialog.RequestTrackEvent{")
	s = append(s, "Cid: "+fmt.Sprintf("%#v", this.Cid)+",\n")
	if this.Metrics != nil {
		s = append(s, "Metrics: "+fmt.Sprintf("%#v", this.Metrics)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ResponseTrackEvent) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&dialog.ResponseTrackEvent{")
	s = append(s, "Cid: "+fmt.Sprintf("%#v", this.Cid)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringClickroad(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ClickRoadClient is the client API for ClickRoad service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ClickRoadClient interface {
	TrackEvent(ctx context.Context, in *RequestTrackEvent, opts ...grpc.CallOption) (*ResponseTrackEvent, error)
}

type clickRoadClient struct {
	cc *grpc.ClientConn
}

func NewClickRoadClient(cc *grpc.ClientConn) ClickRoadClient {
	return &clickRoadClient{cc}
}

func (c *clickRoadClient) TrackEvent(ctx context.Context, in *RequestTrackEvent, opts ...grpc.CallOption) (*ResponseTrackEvent, error) {
	out := new(ResponseTrackEvent)
	err := c.cc.Invoke(ctx, "/clickroad.ClickRoad/TrackEvent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ClickRoadServer is the server API for ClickRoad service.
type ClickRoadServer interface {
	TrackEvent(context.Context, *RequestTrackEvent) (*ResponseTrackEvent, error)
}

// UnimplementedClickRoadServer can be embedded to have forward compatible implementations.
type UnimplementedClickRoadServer struct {
}

func (*UnimplementedClickRoadServer) TrackEvent(ctx context.Context, req *RequestTrackEvent) (*ResponseTrackEvent, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TrackEvent not implemented")
}

func RegisterClickRoadServer(s *grpc.Server, srv ClickRoadServer) {
	s.RegisterService(&_ClickRoad_serviceDesc, srv)
}

func _ClickRoad_TrackEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestTrackEvent)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClickRoadServer).TrackEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clickroad.ClickRoad/TrackEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClickRoadServer).TrackEvent(ctx, req.(*RequestTrackEvent))
	}
	return interceptor(ctx, in, info, handler)
}

var _ClickRoad_serviceDesc = grpc.ServiceDesc{
	ServiceName: "clickroad.ClickRoad",
	HandlerType: (*ClickRoadServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "TrackEvent",
			Handler:    _ClickRoad_TrackEvent_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "clickroad.proto",
}

func (m *TrackContext) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TrackContext) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TrackContext) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Context) > 0 {
		for k := range m.Context {
			v := m.Context[k]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintClickroad(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintClickroad(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintClickroad(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *TrackScreenView) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TrackScreenView) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TrackScreenView) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Url != nil {
		{
			size, err := m.Url.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintClickroad(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Source != nil {
		{
			size, err := m.Source.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintClickroad(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintClickroad(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TrackEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TrackEvent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TrackEvent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Value != nil {
		{
			size, err := m.Value.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintClickroad(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.Label != nil {
		{
			size, err := m.Label.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintClickroad(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Action) > 0 {
		i -= len(m.Action)
		copy(dAtA[i:], m.Action)
		i = encodeVarintClickroad(dAtA, i, uint64(len(m.Action)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Category) > 0 {
		i -= len(m.Category)
		copy(dAtA[i:], m.Category)
		i = encodeVarintClickroad(dAtA, i, uint64(len(m.Category)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TrackTiming) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TrackTiming) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TrackTiming) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Label != nil {
		{
			size, err := m.Label.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintClickroad(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.Time != 0 {
		i = encodeVarintClickroad(dAtA, i, uint64(m.Time))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Variable) > 0 {
		i -= len(m.Variable)
		copy(dAtA[i:], m.Variable)
		i = encodeVarintClickroad(dAtA, i, uint64(len(m.Variable)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Category) > 0 {
		i -= len(m.Category)
		copy(dAtA[i:], m.Category)
		i = encodeVarintClickroad(dAtA, i, uint64(len(m.Category)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TrackSocial) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TrackSocial) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TrackSocial) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Target) > 0 {
		i -= len(m.Target)
		copy(dAtA[i:], m.Target)
		i = encodeVarintClickroad(dAtA, i, uint64(len(m.Target)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Action) > 0 {
		i -= len(m.Action)
		copy(dAtA[i:], m.Action)
		i = encodeVarintClickroad(dAtA, i, uint64(len(m.Action)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Network) > 0 {
		i -= len(m.Network)
		copy(dAtA[i:], m.Network)
		i = encodeVarintClickroad(dAtA, i, uint64(len(m.Network)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TrackError) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TrackError) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TrackError) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Fatal {
		i--
		if m.Fatal {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if len(m.Message) > 0 {
		i -= len(m.Message)
		copy(dAtA[i:], m.Message)
		i = encodeVarintClickroad(dAtA, i, uint64(len(m.Message)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TrackMetric) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TrackMetric) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TrackMetric) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Metric != nil {
		{
			size := m.Metric.Size()
			i -= size
			if _, err := m.Metric.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.Time != nil {
		{
			size, err := m.Time.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintClickroad(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TrackMetric_Context) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TrackMetric_Context) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Context != nil {
		{
			size, err := m.Context.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintClickroad(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *TrackMetric_ScreenView) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TrackMetric_ScreenView) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ScreenView != nil {
		{
			size, err := m.ScreenView.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintClickroad(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *TrackMetric_Event) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TrackMetric_Event) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Event != nil {
		{
			size, err := m.Event.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintClickroad(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *TrackMetric_Timing) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TrackMetric_Timing) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Timing != nil {
		{
			size, err := m.Timing.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintClickroad(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	return len(dAtA) - i, nil
}
func (m *TrackMetric_Social) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TrackMetric_Social) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Social != nil {
		{
			size, err := m.Social.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintClickroad(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	return len(dAtA) - i, nil
}
func (m *TrackMetric_Error) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TrackMetric_Error) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Error != nil {
		{
			size, err := m.Error.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintClickroad(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	return len(dAtA) - i, nil
}
func (m *RequestTrackEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestTrackEvent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RequestTrackEvent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Metrics) > 0 {
		for iNdEx := len(m.Metrics) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Metrics[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintClickroad(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Cid) > 0 {
		i -= len(m.Cid)
		copy(dAtA[i:], m.Cid)
		i = encodeVarintClickroad(dAtA, i, uint64(len(m.Cid)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ResponseTrackEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResponseTrackEvent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ResponseTrackEvent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Cid) > 0 {
		i -= len(m.Cid)
		copy(dAtA[i:], m.Cid)
		i = encodeVarintClickroad(dAtA, i, uint64(len(m.Cid)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintClickroad(dAtA []byte, offset int, v uint64) int {
	offset -= sovClickroad(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *TrackContext) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Context) > 0 {
		for k, v := range m.Context {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovClickroad(uint64(len(k))) + 1 + len(v) + sovClickroad(uint64(len(v)))
			n += mapEntrySize + 1 + sovClickroad(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *TrackScreenView) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovClickroad(uint64(l))
	}
	if m.Source != nil {
		l = m.Source.Size()
		n += 1 + l + sovClickroad(uint64(l))
	}
	if m.Url != nil {
		l = m.Url.Size()
		n += 1 + l + sovClickroad(uint64(l))
	}
	return n
}

func (m *TrackEvent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Category)
	if l > 0 {
		n += 1 + l + sovClickroad(uint64(l))
	}
	l = len(m.Action)
	if l > 0 {
		n += 1 + l + sovClickroad(uint64(l))
	}
	if m.Label != nil {
		l = m.Label.Size()
		n += 1 + l + sovClickroad(uint64(l))
	}
	if m.Value != nil {
		l = m.Value.Size()
		n += 1 + l + sovClickroad(uint64(l))
	}
	return n
}

func (m *TrackTiming) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Category)
	if l > 0 {
		n += 1 + l + sovClickroad(uint64(l))
	}
	l = len(m.Variable)
	if l > 0 {
		n += 1 + l + sovClickroad(uint64(l))
	}
	if m.Time != 0 {
		n += 1 + sovClickroad(uint64(m.Time))
	}
	if m.Label != nil {
		l = m.Label.Size()
		n += 1 + l + sovClickroad(uint64(l))
	}
	return n
}

func (m *TrackSocial) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Network)
	if l > 0 {
		n += 1 + l + sovClickroad(uint64(l))
	}
	l = len(m.Action)
	if l > 0 {
		n += 1 + l + sovClickroad(uint64(l))
	}
	l = len(m.Target)
	if l > 0 {
		n += 1 + l + sovClickroad(uint64(l))
	}
	return n
}

func (m *TrackError) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovClickroad(uint64(l))
	}
	if m.Fatal {
		n += 2
	}
	return n
}

func (m *TrackMetric) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Time != nil {
		l = m.Time.Size()
		n += 1 + l + sovClickroad(uint64(l))
	}
	if m.Metric != nil {
		n += m.Metric.Size()
	}
	return n
}

func (m *TrackMetric_Context) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Context != nil {
		l = m.Context.Size()
		n += 1 + l + sovClickroad(uint64(l))
	}
	return n
}
func (m *TrackMetric_ScreenView) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ScreenView != nil {
		l = m.ScreenView.Size()
		n += 1 + l + sovClickroad(uint64(l))
	}
	return n
}
func (m *TrackMetric_Event) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Event != nil {
		l = m.Event.Size()
		n += 1 + l + sovClickroad(uint64(l))
	}
	return n
}
func (m *TrackMetric_Timing) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Timing != nil {
		l = m.Timing.Size()
		n += 1 + l + sovClickroad(uint64(l))
	}
	return n
}
func (m *TrackMetric_Social) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Social != nil {
		l = m.Social.Size()
		n += 1 + l + sovClickroad(uint64(l))
	}
	return n
}
func (m *TrackMetric_Error) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Error != nil {
		l = m.Error.Size()
		n += 1 + l + sovClickroad(uint64(l))
	}
	return n
}
func (m *RequestTrackEvent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Cid)
	if l > 0 {
		n += 1 + l + sovClickroad(uint64(l))
	}
	if len(m.Metrics) > 0 {
		for _, e := range m.Metrics {
			l = e.Size()
			n += 1 + l + sovClickroad(uint64(l))
		}
	}
	return n
}

func (m *ResponseTrackEvent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Cid)
	if l > 0 {
		n += 1 + l + sovClickroad(uint64(l))
	}
	return n
}

func sovClickroad(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozClickroad(x uint64) (n int) {
	return sovClickroad(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *TrackContext) String() string {
	if this == nil {
		return "nil"
	}
	keysForContext := make([]string, 0, len(this.Context))
	for k, _ := range this.Context {
		keysForContext = append(keysForContext, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForContext)
	mapStringForContext := "map[string]string{"
	for _, k := range keysForContext {
		mapStringForContext += fmt.Sprintf("%v: %v,", k, this.Context[k])
	}
	mapStringForContext += "}"
	s := strings.Join([]string{`&TrackContext{`,
		`Context:` + mapStringForContext + `,`,
		`}`,
	}, "")
	return s
}
func (this *TrackScreenView) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TrackScreenView{`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Source:` + strings.Replace(fmt.Sprintf("%v", this.Source), "StringValue", "types.StringValue", 1) + `,`,
		`Url:` + strings.Replace(fmt.Sprintf("%v", this.Url), "StringValue", "types.StringValue", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *TrackEvent) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TrackEvent{`,
		`Category:` + fmt.Sprintf("%v", this.Category) + `,`,
		`Action:` + fmt.Sprintf("%v", this.Action) + `,`,
		`Label:` + strings.Replace(fmt.Sprintf("%v", this.Label), "StringValue", "types.StringValue", 1) + `,`,
		`Value:` + strings.Replace(fmt.Sprintf("%v", this.Value), "DoubleValue", "types.DoubleValue", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *TrackTiming) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TrackTiming{`,
		`Category:` + fmt.Sprintf("%v", this.Category) + `,`,
		`Variable:` + fmt.Sprintf("%v", this.Variable) + `,`,
		`Time:` + fmt.Sprintf("%v", this.Time) + `,`,
		`Label:` + strings.Replace(fmt.Sprintf("%v", this.Label), "StringValue", "types.StringValue", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *TrackSocial) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TrackSocial{`,
		`Network:` + fmt.Sprintf("%v", this.Network) + `,`,
		`Action:` + fmt.Sprintf("%v", this.Action) + `,`,
		`Target:` + fmt.Sprintf("%v", this.Target) + `,`,
		`}`,
	}, "")
	return s
}
func (this *TrackError) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TrackError{`,
		`Message:` + fmt.Sprintf("%v", this.Message) + `,`,
		`Fatal:` + fmt.Sprintf("%v", this.Fatal) + `,`,
		`}`,
	}, "")
	return s
}
func (this *TrackMetric) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TrackMetric{`,
		`Time:` + strings.Replace(fmt.Sprintf("%v", this.Time), "Timestamp", "types.Timestamp", 1) + `,`,
		`Metric:` + fmt.Sprintf("%v", this.Metric) + `,`,
		`}`,
	}, "")
	return s
}
func (this *TrackMetric_Context) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TrackMetric_Context{`,
		`Context:` + strings.Replace(fmt.Sprintf("%v", this.Context), "TrackContext", "TrackContext", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *TrackMetric_ScreenView) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TrackMetric_ScreenView{`,
		`ScreenView:` + strings.Replace(fmt.Sprintf("%v", this.ScreenView), "TrackScreenView", "TrackScreenView", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *TrackMetric_Event) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TrackMetric_Event{`,
		`Event:` + strings.Replace(fmt.Sprintf("%v", this.Event), "TrackEvent", "TrackEvent", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *TrackMetric_Timing) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TrackMetric_Timing{`,
		`Timing:` + strings.Replace(fmt.Sprintf("%v", this.Timing), "TrackTiming", "TrackTiming", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *TrackMetric_Social) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TrackMetric_Social{`,
		`Social:` + strings.Replace(fmt.Sprintf("%v", this.Social), "TrackSocial", "TrackSocial", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *TrackMetric_Error) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TrackMetric_Error{`,
		`Error:` + strings.Replace(fmt.Sprintf("%v", this.Error), "TrackError", "TrackError", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RequestTrackEvent) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForMetrics := "[]*TrackMetric{"
	for _, f := range this.Metrics {
		repeatedStringForMetrics += strings.Replace(f.String(), "TrackMetric", "TrackMetric", 1) + ","
	}
	repeatedStringForMetrics += "}"
	s := strings.Join([]string{`&RequestTrackEvent{`,
		`Cid:` + fmt.Sprintf("%v", this.Cid) + `,`,
		`Metrics:` + repeatedStringForMetrics + `,`,
		`}`,
	}, "")
	return s
}
func (this *ResponseTrackEvent) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ResponseTrackEvent{`,
		`Cid:` + fmt.Sprintf("%v", this.Cid) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringClickroad(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *TrackContext) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClickroad
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TrackContext: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TrackContext: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Context", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClickroad
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthClickroad
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthClickroad
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Context == nil {
				m.Context = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowClickroad
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowClickroad
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthClickroad
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthClickroad
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowClickroad
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthClickroad
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthClickroad
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipClickroad(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthClickroad
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Context[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipClickroad(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthClickroad
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthClickroad
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TrackScreenView) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClickroad
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TrackScreenView: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TrackScreenView: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClickroad
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClickroad
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthClickroad
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Source", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClickroad
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthClickroad
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthClickroad
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Source == nil {
				m.Source = &types.StringValue{}
			}
			if err := m.Source.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Url", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClickroad
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthClickroad
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthClickroad
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Url == nil {
				m.Url = &types.StringValue{}
			}
			if err := m.Url.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipClickroad(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthClickroad
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthClickroad
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TrackEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClickroad
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TrackEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TrackEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Category", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClickroad
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClickroad
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthClickroad
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Category = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Action", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClickroad
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClickroad
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthClickroad
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Action = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Label", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClickroad
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthClickroad
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthClickroad
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Label == nil {
				m.Label = &types.StringValue{}
			}
			if err := m.Label.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClickroad
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthClickroad
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthClickroad
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Value == nil {
				m.Value = &types.DoubleValue{}
			}
			if err := m.Value.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipClickroad(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthClickroad
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthClickroad
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TrackTiming) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClickroad
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TrackTiming: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TrackTiming: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Category", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClickroad
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClickroad
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthClickroad
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Category = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Variable", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClickroad
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClickroad
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthClickroad
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Variable = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Time", wireType)
			}
			m.Time = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClickroad
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Time |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Label", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClickroad
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthClickroad
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthClickroad
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Label == nil {
				m.Label = &types.StringValue{}
			}
			if err := m.Label.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipClickroad(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthClickroad
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthClickroad
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TrackSocial) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClickroad
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TrackSocial: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TrackSocial: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Network", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClickroad
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClickroad
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthClickroad
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Network = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Action", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClickroad
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClickroad
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthClickroad
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Action = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Target", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClickroad
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClickroad
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthClickroad
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Target = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipClickroad(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthClickroad
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthClickroad
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TrackError) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClickroad
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TrackError: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TrackError: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClickroad
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClickroad
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthClickroad
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fatal", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClickroad
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Fatal = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipClickroad(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthClickroad
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthClickroad
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TrackMetric) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClickroad
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TrackMetric: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TrackMetric: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Time", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClickroad
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthClickroad
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthClickroad
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Time == nil {
				m.Time = &types.Timestamp{}
			}
			if err := m.Time.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Context", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClickroad
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthClickroad
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthClickroad
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &TrackContext{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Metric = &TrackMetric_Context{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScreenView", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClickroad
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthClickroad
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthClickroad
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &TrackScreenView{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Metric = &TrackMetric_ScreenView{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Event", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClickroad
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthClickroad
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthClickroad
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &TrackEvent{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Metric = &TrackMetric_Event{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timing", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClickroad
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthClickroad
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthClickroad
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &TrackTiming{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Metric = &TrackMetric_Timing{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Social", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClickroad
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthClickroad
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthClickroad
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &TrackSocial{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Metric = &TrackMetric_Social{v}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClickroad
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthClickroad
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthClickroad
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &TrackError{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Metric = &TrackMetric_Error{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipClickroad(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthClickroad
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthClickroad
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestTrackEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClickroad
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestTrackEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestTrackEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClickroad
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClickroad
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthClickroad
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metrics", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClickroad
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthClickroad
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthClickroad
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Metrics = append(m.Metrics, &TrackMetric{})
			if err := m.Metrics[len(m.Metrics)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipClickroad(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthClickroad
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthClickroad
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResponseTrackEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClickroad
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResponseTrackEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResponseTrackEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClickroad
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClickroad
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthClickroad
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipClickroad(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthClickroad
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthClickroad
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipClickroad(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowClickroad
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowClickroad
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowClickroad
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthClickroad
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupClickroad
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthClickroad
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthClickroad        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowClickroad          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupClickroad = fmt.Errorf("proto: unexpected end of group")
)
