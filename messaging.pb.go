// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: messaging.proto

package dialog

import (
	bytes "bytes"
	context "context"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	types "github.com/gogo/protobuf/types"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strconv "strconv"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type InteractiveMediaStyle int32

const (
	INTERACTIVEMEDIASTYLE_UNKNOWN InteractiveMediaStyle = 0
	INTERACTIVEMEDIASTYLE_DEFAULT InteractiveMediaStyle = 1
	INTERACTIVEMEDIASTYLE_PRIMARY InteractiveMediaStyle = 2
	INTERACTIVEMEDIASTYLE_DANGER  InteractiveMediaStyle = 3
)

var InteractiveMediaStyle_name = map[int32]string{
	0: "INTERACTIVEMEDIASTYLE_UNKNOWN",
	1: "INTERACTIVEMEDIASTYLE_DEFAULT",
	2: "INTERACTIVEMEDIASTYLE_PRIMARY",
	3: "INTERACTIVEMEDIASTYLE_DANGER",
}

var InteractiveMediaStyle_value = map[string]int32{
	"INTERACTIVEMEDIASTYLE_UNKNOWN": 0,
	"INTERACTIVEMEDIASTYLE_DEFAULT": 1,
	"INTERACTIVEMEDIASTYLE_PRIMARY": 2,
	"INTERACTIVEMEDIASTYLE_DANGER":  3,
}

func (InteractiveMediaStyle) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_42a1718997f046ec, []int{0}
}

type MessageState int32

const (
	MESSAGESTATE_UNKNOWN  MessageState = 0
	MESSAGESTATE_SENT     MessageState = 1
	MESSAGESTATE_RECEIVED MessageState = 2
	MESSAGESTATE_READ     MessageState = 3
)

var MessageState_name = map[int32]string{
	0: "MESSAGESTATE_UNKNOWN",
	1: "MESSAGESTATE_SENT",
	2: "MESSAGESTATE_RECEIVED",
	3: "MESSAGESTATE_READ",
}

var MessageState_value = map[string]int32{
	"MESSAGESTATE_UNKNOWN":  0,
	"MESSAGESTATE_SENT":     1,
	"MESSAGESTATE_RECEIVED": 2,
	"MESSAGESTATE_READ":     3,
}

func (MessageState) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_42a1718997f046ec, []int{1}
}

type ListLoadMode int32

const (
	LISTLOADMODE_UNKNOWN  ListLoadMode = 0
	LISTLOADMODE_FORWARD  ListLoadMode = 1
	LISTLOADMODE_BACKWARD ListLoadMode = 2
	LISTLOADMODE_BOTH     ListLoadMode = 3
)

var ListLoadMode_name = map[int32]string{
	0: "LISTLOADMODE_UNKNOWN",
	1: "LISTLOADMODE_FORWARD",
	2: "LISTLOADMODE_BACKWARD",
	3: "LISTLOADMODE_BOTH",
}

var ListLoadMode_value = map[string]int32{
	"LISTLOADMODE_UNKNOWN":  0,
	"LISTLOADMODE_FORWARD":  1,
	"LISTLOADMODE_BACKWARD": 2,
	"LISTLOADMODE_BOTH":     3,
}

func (ListLoadMode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_42a1718997f046ec, []int{2}
}

type DialogsFilter int32

const (
	DIALOGSFILTER_UNKNOWN           DialogsFilter = 0
	DIALOGSFILTER_EXCLUDEFAVOURITES DialogsFilter = 1
	DIALOGSFILTER_EXCLUDEARCHIVED   DialogsFilter = 2
)

var DialogsFilter_name = map[int32]string{
	0: "DIALOGSFILTER_UNKNOWN",
	1: "DIALOGSFILTER_EXCLUDEFAVOURITES",
	2: "DIALOGSFILTER_EXCLUDEARCHIVED",
}

var DialogsFilter_value = map[string]int32{
	"DIALOGSFILTER_UNKNOWN":           0,
	"DIALOGSFILTER_EXCLUDEFAVOURITES": 1,
	"DIALOGSFILTER_EXCLUDEARCHIVED":   2,
}

func (DialogsFilter) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_42a1718997f046ec, []int{3}
}

// Message Attributes
type MessageAttributes struct {
	/// Is mentioned. If set overrides built-in value.
	IsMentioned *types.BoolValue `protobuf:"bytes,1,opt,name=is_mentioned,json=isMentioned,proto3" json:"is_mentioned,omitempty"`
	/// Is message highlighted. Default is false.
	IsHighlighted *types.BoolValue `protobuf:"bytes,2,opt,name=is_highlighted,json=isHighlighted,proto3" json:"is_highlighted,omitempty"`
	/// Is notified. If set overrides built-in settings.
	IsNotified *types.BoolValue `protobuf:"bytes,3,opt,name=is_notified,json=isNotified,proto3" json:"is_notified,omitempty"`
	/// If this message is only for you. Default is false
	IsOnlyForYou *types.BoolValue `protobuf:"bytes,4,opt,name=is_only_for_you,json=isOnlyForYou,proto3" json:"is_only_for_you,omitempty"`
}

func (m *MessageAttributes) Reset()      { *m = MessageAttributes{} }
func (*MessageAttributes) ProtoMessage() {}
func (*MessageAttributes) Descriptor() ([]byte, []int) {
	return fileDescriptor_42a1718997f046ec, []int{0}
}
func (m *MessageAttributes) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MessageAttributes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MessageAttributes.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MessageAttributes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MessageAttributes.Merge(m, src)
}
func (m *MessageAttributes) XXX_Size() int {
	return m.Size()
}
func (m *MessageAttributes) XXX_DiscardUnknown() {
	xxx_messageInfo_MessageAttributes.DiscardUnknown(m)
}

var xxx_messageInfo_MessageAttributes proto.InternalMessageInfo

func (m *MessageAttributes) GetIsMentioned() *types.BoolValue {
	if m != nil {
		return m.IsMentioned
	}
	return nil
}

func (m *MessageAttributes) GetIsHighlighted() *types.BoolValue {
	if m != nil {
		return m.IsHighlighted
	}
	return nil
}

func (m *MessageAttributes) GetIsNotified() *types.BoolValue {
	if m != nil {
		return m.IsNotified
	}
	return nil
}

func (m *MessageAttributes) GetIsOnlyForYou() *types.BoolValue {
	if m != nil {
		return m.IsOnlyForYou
	}
	return nil
}

// Quoted Message
// messageId
// publicGroupId
// senderUserId
// messageDate
// quotedMessageContent
type QuotedMessage struct {
	/// Message Id if present
	MessageId int64 `protobuf:"varint,1,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"`
	/// Public Group id if present
	PublicGroupId int32 `protobuf:"varint,2,opt,name=public_group_id,json=publicGroupId,proto3" json:"public_group_id,omitempty"`
	SenderUserId  int32 `protobuf:"varint,3,opt,name=sender_user_id,json=senderUserId,proto3" json:"sender_user_id,omitempty"`
	MessageDate   int64 `protobuf:"varint,4,opt,name=message_date,json=messageDate,proto3" json:"message_date,omitempty"`
	//*
	// Optional Quoted Message Content.
	// Can be empty if messageId is present and message is in current peer.
	QuotedMessageContent *MessageContent `protobuf:"bytes,5,opt,name=quoted_message_content,json=quotedMessageContent,proto3" json:"quoted_message_content,omitempty"`
}

func (m *QuotedMessage) Reset()      { *m = QuotedMessage{} }
func (*QuotedMessage) ProtoMessage() {}
func (*QuotedMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_42a1718997f046ec, []int{1}
}
func (m *QuotedMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QuotedMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QuotedMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QuotedMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuotedMessage.Merge(m, src)
}
func (m *QuotedMessage) XXX_Size() int {
	return m.Size()
}
func (m *QuotedMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_QuotedMessage.DiscardUnknown(m)
}

var xxx_messageInfo_QuotedMessage proto.InternalMessageInfo

func (m *QuotedMessage) GetMessageId() int64 {
	if m != nil {
		return m.MessageId
	}
	return 0
}

func (m *QuotedMessage) GetPublicGroupId() int32 {
	if m != nil {
		return m.PublicGroupId
	}
	return 0
}

func (m *QuotedMessage) GetSenderUserId() int32 {
	if m != nil {
		return m.SenderUserId
	}
	return 0
}

func (m *QuotedMessage) GetMessageDate() int64 {
	if m != nil {
		return m.MessageDate
	}
	return 0
}

func (m *QuotedMessage) GetQuotedMessageContent() *MessageContent {
	if m != nil {
		return m.QuotedMessageContent
	}
	return nil
}

// Message media
type MessageMedia struct {
	Webpage *WebpageMedia            `protobuf:"bytes,1,opt,name=webpage,proto3" json:"webpage,omitempty"`
	Image   *ImageMedia              `protobuf:"bytes,2,opt,name=image,proto3" json:"image,omitempty"`
	Audio   *AudioMedia              `protobuf:"bytes,3,opt,name=audio,proto3" json:"audio,omitempty"`
	Actions []*InteractiveMediaGroup `protobuf:"bytes,6,rep,name=actions,proto3" json:"actions,omitempty"`
}

func (m *MessageMedia) Reset()      { *m = MessageMedia{} }
func (*MessageMedia) ProtoMessage() {}
func (*MessageMedia) Descriptor() ([]byte, []int) {
	return fileDescriptor_42a1718997f046ec, []int{2}
}
func (m *MessageMedia) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MessageMedia) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MessageMedia.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MessageMedia) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MessageMedia.Merge(m, src)
}
func (m *MessageMedia) XXX_Size() int {
	return m.Size()
}
func (m *MessageMedia) XXX_DiscardUnknown() {
	xxx_messageInfo_MessageMedia.DiscardUnknown(m)
}

var xxx_messageInfo_MessageMedia proto.InternalMessageInfo

func (m *MessageMedia) GetWebpage() *WebpageMedia {
	if m != nil {
		return m.Webpage
	}
	return nil
}

func (m *MessageMedia) GetImage() *ImageMedia {
	if m != nil {
		return m.Image
	}
	return nil
}

func (m *MessageMedia) GetAudio() *AudioMedia {
	if m != nil {
		return m.Audio
	}
	return nil
}

func (m *MessageMedia) GetActions() []*InteractiveMediaGroup {
	if m != nil {
		return m.Actions
	}
	return nil
}

// Webpage media
type WebpageMedia struct {
	Url         *types.StringValue `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
	Title       *types.StringValue `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	Description *types.StringValue `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	Image       *ImageLocation     `protobuf:"bytes,4,opt,name=image,proto3" json:"image,omitempty"`
}

func (m *WebpageMedia) Reset()      { *m = WebpageMedia{} }
func (*WebpageMedia) ProtoMessage() {}
func (*WebpageMedia) Descriptor() ([]byte, []int) {
	return fileDescriptor_42a1718997f046ec, []int{3}
}
func (m *WebpageMedia) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WebpageMedia) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WebpageMedia.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WebpageMedia) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WebpageMedia.Merge(m, src)
}
func (m *WebpageMedia) XXX_Size() int {
	return m.Size()
}
func (m *WebpageMedia) XXX_DiscardUnknown() {
	xxx_messageInfo_WebpageMedia.DiscardUnknown(m)
}

var xxx_messageInfo_WebpageMedia proto.InternalMessageInfo

func (m *WebpageMedia) GetUrl() *types.StringValue {
	if m != nil {
		return m.Url
	}
	return nil
}

func (m *WebpageMedia) GetTitle() *types.StringValue {
	if m != nil {
		return m.Title
	}
	return nil
}

func (m *WebpageMedia) GetDescription() *types.StringValue {
	if m != nil {
		return m.Description
	}
	return nil
}

func (m *WebpageMedia) GetImage() *ImageLocation {
	if m != nil {
		return m.Image
	}
	return nil
}

// Image media
// image image
type ImageMedia struct {
	Image *ImageLocation `protobuf:"bytes,1,opt,name=image,proto3" json:"image,omitempty"`
}

func (m *ImageMedia) Reset()      { *m = ImageMedia{} }
func (*ImageMedia) ProtoMessage() {}
func (*ImageMedia) Descriptor() ([]byte, []int) {
	return fileDescriptor_42a1718997f046ec, []int{4}
}
func (m *ImageMedia) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ImageMedia) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ImageMedia.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ImageMedia) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ImageMedia.Merge(m, src)
}
func (m *ImageMedia) XXX_Size() int {
	return m.Size()
}
func (m *ImageMedia) XXX_DiscardUnknown() {
	xxx_messageInfo_ImageMedia.DiscardUnknown(m)
}

var xxx_messageInfo_ImageMedia proto.InternalMessageInfo

func (m *ImageMedia) GetImage() *ImageLocation {
	if m != nil {
		return m.Image
	}
	return nil
}

// Audio media
type AudioMedia struct {
	Audio *AudioLocation `protobuf:"bytes,1,opt,name=audio,proto3" json:"audio,omitempty"`
}

func (m *AudioMedia) Reset()      { *m = AudioMedia{} }
func (*AudioMedia) ProtoMessage() {}
func (*AudioMedia) Descriptor() ([]byte, []int) {
	return fileDescriptor_42a1718997f046ec, []int{5}
}
func (m *AudioMedia) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AudioMedia) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AudioMedia.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AudioMedia) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AudioMedia.Merge(m, src)
}
func (m *AudioMedia) XXX_Size() int {
	return m.Size()
}
func (m *AudioMedia) XXX_DiscardUnknown() {
	xxx_messageInfo_AudioMedia.DiscardUnknown(m)
}

var xxx_messageInfo_AudioMedia proto.InternalMessageInfo

func (m *AudioMedia) GetAudio() *AudioLocation {
	if m != nil {
		return m.Audio
	}
	return nil
}

/// Some interactive element inside a message
type InteractiveMediaWidget struct {
	// Types that are valid to be assigned to Body:
	//	*InteractiveMediaWidget_InteractiveMediaButton
	//	*InteractiveMediaWidget_InteractiveMediaSelect
	Body isInteractiveMediaWidget_Body `protobuf_oneof:"body"`
}

func (m *InteractiveMediaWidget) Reset()      { *m = InteractiveMediaWidget{} }
func (*InteractiveMediaWidget) ProtoMessage() {}
func (*InteractiveMediaWidget) Descriptor() ([]byte, []int) {
	return fileDescriptor_42a1718997f046ec, []int{6}
}
func (m *InteractiveMediaWidget) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InteractiveMediaWidget) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InteractiveMediaWidget.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InteractiveMediaWidget) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InteractiveMediaWidget.Merge(m, src)
}
func (m *InteractiveMediaWidget) XXX_Size() int {
	return m.Size()
}
func (m *InteractiveMediaWidget) XXX_DiscardUnknown() {
	xxx_messageInfo_InteractiveMediaWidget.DiscardUnknown(m)
}

var xxx_messageInfo_InteractiveMediaWidget proto.InternalMessageInfo

type isInteractiveMediaWidget_Body interface {
	isInteractiveMediaWidget_Body()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type InteractiveMediaWidget_InteractiveMediaButton struct {
	InteractiveMediaButton *InteractiveMediaButton `protobuf:"bytes,1,opt,name=interactiveMediaButton,proto3,oneof" json:"interactiveMediaButton,omitempty"`
}
type InteractiveMediaWidget_InteractiveMediaSelect struct {
	InteractiveMediaSelect *InteractiveMediaSelect `protobuf:"bytes,2,opt,name=interactiveMediaSelect,proto3,oneof" json:"interactiveMediaSelect,omitempty"`
}

func (*InteractiveMediaWidget_InteractiveMediaButton) isInteractiveMediaWidget_Body() {}
func (*InteractiveMediaWidget_InteractiveMediaSelect) isInteractiveMediaWidget_Body() {}

func (m *InteractiveMediaWidget) GetBody() isInteractiveMediaWidget_Body {
	if m != nil {
		return m.Body
	}
	return nil
}

func (m *InteractiveMediaWidget) GetInteractiveMediaButton() *InteractiveMediaButton {
	if x, ok := m.GetBody().(*InteractiveMediaWidget_InteractiveMediaButton); ok {
		return x.InteractiveMediaButton
	}
	return nil
}

func (m *InteractiveMediaWidget) GetInteractiveMediaSelect() *InteractiveMediaSelect {
	if x, ok := m.GetBody().(*InteractiveMediaWidget_InteractiveMediaSelect); ok {
		return x.InteractiveMediaSelect
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*InteractiveMediaWidget) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*InteractiveMediaWidget_InteractiveMediaButton)(nil),
		(*InteractiveMediaWidget_InteractiveMediaSelect)(nil),
	}
}

// A 'Button' widget
type InteractiveMediaButton struct {
	Value string `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	/// A user-visible description of this button
	Label *types.StringValue `protobuf:"bytes,2,opt,name=label,proto3" json:"label,omitempty"`
}

func (m *InteractiveMediaButton) Reset()      { *m = InteractiveMediaButton{} }
func (*InteractiveMediaButton) ProtoMessage() {}
func (*InteractiveMediaButton) Descriptor() ([]byte, []int) {
	return fileDescriptor_42a1718997f046ec, []int{7}
}
func (m *InteractiveMediaButton) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InteractiveMediaButton) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InteractiveMediaButton.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InteractiveMediaButton) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InteractiveMediaButton.Merge(m, src)
}
func (m *InteractiveMediaButton) XXX_Size() int {
	return m.Size()
}
func (m *InteractiveMediaButton) XXX_DiscardUnknown() {
	xxx_messageInfo_InteractiveMediaButton.DiscardUnknown(m)
}

var xxx_messageInfo_InteractiveMediaButton proto.InternalMessageInfo

func (m *InteractiveMediaButton) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

func (m *InteractiveMediaButton) GetLabel() *types.StringValue {
	if m != nil {
		return m.Label
	}
	return nil
}

// A select from multiple values widget
type InteractiveMediaSelect struct {
	/// list of values to present to user
	Options []*InteractiveMediaSelectOption `protobuf:"bytes,1,rep,name=options,proto3" json:"options,omitempty"`
	/// A user-visible descripton of this select
	Label *types.StringValue `protobuf:"bytes,2,opt,name=label,proto3" json:"label,omitempty"`
	/// A value that will be selected by default
	DefaultValue *types.StringValue `protobuf:"bytes,3,opt,name=default_value,json=defaultValue,proto3" json:"default_value,omitempty"`
}

func (m *InteractiveMediaSelect) Reset()      { *m = InteractiveMediaSelect{} }
func (*InteractiveMediaSelect) ProtoMessage() {}
func (*InteractiveMediaSelect) Descriptor() ([]byte, []int) {
	return fileDescriptor_42a1718997f046ec, []int{8}
}
func (m *InteractiveMediaSelect) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InteractiveMediaSelect) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InteractiveMediaSelect.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InteractiveMediaSelect) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InteractiveMediaSelect.Merge(m, src)
}
func (m *InteractiveMediaSelect) XXX_Size() int {
	return m.Size()
}
func (m *InteractiveMediaSelect) XXX_DiscardUnknown() {
	xxx_messageInfo_InteractiveMediaSelect.DiscardUnknown(m)
}

var xxx_messageInfo_InteractiveMediaSelect proto.InternalMessageInfo

func (m *InteractiveMediaSelect) GetOptions() []*InteractiveMediaSelectOption {
	if m != nil {
		return m.Options
	}
	return nil
}

func (m *InteractiveMediaSelect) GetLabel() *types.StringValue {
	if m != nil {
		return m.Label
	}
	return nil
}

func (m *InteractiveMediaSelect) GetDefaultValue() *types.StringValue {
	if m != nil {
		return m.DefaultValue
	}
	return nil
}

// A row in the select widget
type InteractiveMediaSelectOption struct {
	Value string `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	Label string `protobuf:"bytes,2,opt,name=label,proto3" json:"label,omitempty"`
}

func (m *InteractiveMediaSelectOption) Reset()      { *m = InteractiveMediaSelectOption{} }
func (*InteractiveMediaSelectOption) ProtoMessage() {}
func (*InteractiveMediaSelectOption) Descriptor() ([]byte, []int) {
	return fileDescriptor_42a1718997f046ec, []int{9}
}
func (m *InteractiveMediaSelectOption) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InteractiveMediaSelectOption) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InteractiveMediaSelectOption.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InteractiveMediaSelectOption) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InteractiveMediaSelectOption.Merge(m, src)
}
func (m *InteractiveMediaSelectOption) XXX_Size() int {
	return m.Size()
}
func (m *InteractiveMediaSelectOption) XXX_DiscardUnknown() {
	xxx_messageInfo_InteractiveMediaSelectOption.DiscardUnknown(m)
}

var xxx_messageInfo_InteractiveMediaSelectOption proto.InternalMessageInfo

func (m *InteractiveMediaSelectOption) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

func (m *InteractiveMediaSelectOption) GetLabel() string {
	if m != nil {
		return m.Label
	}
	return ""
}

// A text message extension representing an interactive action.
// Can be used to add widgets (such as buttons, selects, etc) to messages.
type InteractiveMedia struct {
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	/// a widget to be shown to user
	Widget *InteractiveMediaWidget `protobuf:"bytes,2,opt,name=widget,proto3" json:"widget,omitempty"`
	/// a style of the widget, which is interpreted by the client
	Style InteractiveMediaStyle `protobuf:"varint,3,opt,name=style,proto3,enum=dialog.InteractiveMediaStyle" json:"style,omitempty"`
	//*
	// A content of the alert dialog that will be show to user
	// when they perform the media action
	Confirm *InteractiveMediaConfirm `protobuf:"bytes,4,opt,name=confirm,proto3" json:"confirm,omitempty"`
}

func (m *InteractiveMedia) Reset()      { *m = InteractiveMedia{} }
func (*InteractiveMedia) ProtoMessage() {}
func (*InteractiveMedia) Descriptor() ([]byte, []int) {
	return fileDescriptor_42a1718997f046ec, []int{10}
}
func (m *InteractiveMedia) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InteractiveMedia) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InteractiveMedia.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InteractiveMedia) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InteractiveMedia.Merge(m, src)
}
func (m *InteractiveMedia) XXX_Size() int {
	return m.Size()
}
func (m *InteractiveMedia) XXX_DiscardUnknown() {
	xxx_messageInfo_InteractiveMedia.DiscardUnknown(m)
}

var xxx_messageInfo_InteractiveMedia proto.InternalMessageInfo

func (m *InteractiveMedia) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *InteractiveMedia) GetWidget() *InteractiveMediaWidget {
	if m != nil {
		return m.Widget
	}
	return nil
}

func (m *InteractiveMedia) GetStyle() InteractiveMediaStyle {
	if m != nil {
		return m.Style
	}
	return INTERACTIVEMEDIASTYLE_UNKNOWN
}

func (m *InteractiveMedia) GetConfirm() *InteractiveMediaConfirm {
	if m != nil {
		return m.Confirm
	}
	return nil
}

type InteractiveMediaTranslation struct {
	Id    string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Value string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *InteractiveMediaTranslation) Reset()      { *m = InteractiveMediaTranslation{} }
func (*InteractiveMediaTranslation) ProtoMessage() {}
func (*InteractiveMediaTranslation) Descriptor() ([]byte, []int) {
	return fileDescriptor_42a1718997f046ec, []int{11}
}
func (m *InteractiveMediaTranslation) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InteractiveMediaTranslation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InteractiveMediaTranslation.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InteractiveMediaTranslation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InteractiveMediaTranslation.Merge(m, src)
}
func (m *InteractiveMediaTranslation) XXX_Size() int {
	return m.Size()
}
func (m *InteractiveMediaTranslation) XXX_DiscardUnknown() {
	xxx_messageInfo_InteractiveMediaTranslation.DiscardUnknown(m)
}

var xxx_messageInfo_InteractiveMediaTranslation proto.InternalMessageInfo

func (m *InteractiveMediaTranslation) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *InteractiveMediaTranslation) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

type InteractiveMediaTranslationGroup struct {
	/// a translation group language
	Language string `protobuf:"bytes,1,opt,name=language,proto3" json:"language,omitempty"`
	/// a list of translation mesages
	Messages []*InteractiveMediaTranslation `protobuf:"bytes,2,rep,name=messages,proto3" json:"messages,omitempty"`
}

func (m *InteractiveMediaTranslationGroup) Reset()      { *m = InteractiveMediaTranslationGroup{} }
func (*InteractiveMediaTranslationGroup) ProtoMessage() {}
func (*InteractiveMediaTranslationGroup) Descriptor() ([]byte, []int) {
	return fileDescriptor_42a1718997f046ec, []int{12}
}
func (m *InteractiveMediaTranslationGroup) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InteractiveMediaTranslationGroup) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InteractiveMediaTranslationGroup.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InteractiveMediaTranslationGroup) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InteractiveMediaTranslationGroup.Merge(m, src)
}
func (m *InteractiveMediaTranslationGroup) XXX_Size() int {
	return m.Size()
}
func (m *InteractiveMediaTranslationGroup) XXX_DiscardUnknown() {
	xxx_messageInfo_InteractiveMediaTranslationGroup.DiscardUnknown(m)
}

var xxx_messageInfo_InteractiveMediaTranslationGroup proto.InternalMessageInfo

func (m *InteractiveMediaTranslationGroup) GetLanguage() string {
	if m != nil {
		return m.Language
	}
	return ""
}

func (m *InteractiveMediaTranslationGroup) GetMessages() []*InteractiveMediaTranslation {
	if m != nil {
		return m.Messages
	}
	return nil
}

// A group of interactive media actions
type InteractiveMediaGroup struct {
	/// the list of actions
	Actions []*InteractiveMedia `protobuf:"bytes,1,rep,name=actions,proto3" json:"actions,omitempty"`
	/// an optional title of the group
	Title *types.StringValue `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	/// an optional description of the group
	Description *types.StringValue `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	/// a media content translations
	Translations []*InteractiveMediaTranslationGroup `protobuf:"bytes,4,rep,name=translations,proto3" json:"translations,omitempty"`
}

func (m *InteractiveMediaGroup) Reset()      { *m = InteractiveMediaGroup{} }
func (*InteractiveMediaGroup) ProtoMessage() {}
func (*InteractiveMediaGroup) Descriptor() ([]byte, []int) {
	return fileDescriptor_42a1718997f046ec, []int{13}
}
func (m *InteractiveMediaGroup) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InteractiveMediaGroup) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InteractiveMediaGroup.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InteractiveMediaGroup) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InteractiveMediaGroup.Merge(m, src)
}
func (m *InteractiveMediaGroup) XXX_Size() int {
	return m.Size()
}
func (m *InteractiveMediaGroup) XXX_DiscardUnknown() {
	xxx_messageInfo_InteractiveMediaGroup.DiscardUnknown(m)
}

var xxx_messageInfo_InteractiveMediaGroup proto.InternalMessageInfo

func (m *InteractiveMediaGroup) GetActions() []*InteractiveMedia {
	if m != nil {
		return m.Actions
	}
	return nil
}

func (m *InteractiveMediaGroup) GetTitle() *types.StringValue {
	if m != nil {
		return m.Title
	}
	return nil
}

func (m *InteractiveMediaGroup) GetDescription() *types.StringValue {
	if m != nil {
		return m.Description
	}
	return nil
}

func (m *InteractiveMediaGroup) GetTranslations() []*InteractiveMediaTranslationGroup {
	if m != nil {
		return m.Translations
	}
	return nil
}

// An alert dialog content to show to user
type InteractiveMediaConfirm struct {
	/// the optional alert dialog prompt
	Text *types.StringValue `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty"`
	/// the optional alert dialog title
	Title *types.StringValue `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	/// the optional confirm button text
	Ok *types.StringValue `protobuf:"bytes,3,opt,name=ok,proto3" json:"ok,omitempty"`
	/// the optional cancel button text
	Dismiss *types.StringValue `protobuf:"bytes,4,opt,name=dismiss,proto3" json:"dismiss,omitempty"`
}

func (m *InteractiveMediaConfirm) Reset()      { *m = InteractiveMediaConfirm{} }
func (*InteractiveMediaConfirm) ProtoMessage() {}
func (*InteractiveMediaConfirm) Descriptor() ([]byte, []int) {
	return fileDescriptor_42a1718997f046ec, []int{14}
}
func (m *InteractiveMediaConfirm) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InteractiveMediaConfirm) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InteractiveMediaConfirm.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InteractiveMediaConfirm) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InteractiveMediaConfirm.Merge(m, src)
}
func (m *InteractiveMediaConfirm) XXX_Size() int {
	return m.Size()
}
func (m *InteractiveMediaConfirm) XXX_DiscardUnknown() {
	xxx_messageInfo_InteractiveMediaConfirm.DiscardUnknown(m)
}

var xxx_messageInfo_InteractiveMediaConfirm proto.InternalMessageInfo

func (m *InteractiveMediaConfirm) GetText() *types.StringValue {
	if m != nil {
		return m.Text
	}
	return nil
}

func (m *InteractiveMediaConfirm) GetTitle() *types.StringValue {
	if m != nil {
		return m.Title
	}
	return nil
}

func (m *InteractiveMediaConfirm) GetOk() *types.StringValue {
	if m != nil {
		return m.Ok
	}
	return nil
}

func (m *InteractiveMediaConfirm) GetDismiss() *types.StringValue {
	if m != nil {
		return m.Dismiss
	}
	return nil
}

// The update which will be received when the action is performed. Duplicated on all clients.
type UpdateInteractiveMediaEvent struct {
	/// Message id of the message that contains interactive media
	Mid *UUIDValue `protobuf:"bytes,1,opt,name=mid,proto3" json:"mid,omitempty"`
	/// identifier of the media action
	Id string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	/// selected value of that action
	Value string `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
	/// who interacted with that media
	Uid int32 `protobuf:"varint,4,opt,name=uid,proto3" json:"uid,omitempty"`
}

func (m *UpdateInteractiveMediaEvent) Reset()      { *m = UpdateInteractiveMediaEvent{} }
func (*UpdateInteractiveMediaEvent) ProtoMessage() {}
func (*UpdateInteractiveMediaEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_42a1718997f046ec, []int{15}
}
func (m *UpdateInteractiveMediaEvent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateInteractiveMediaEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateInteractiveMediaEvent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateInteractiveMediaEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateInteractiveMediaEvent.Merge(m, src)
}
func (m *UpdateInteractiveMediaEvent) XXX_Size() int {
	return m.Size()
}
func (m *UpdateInteractiveMediaEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateInteractiveMediaEvent.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateInteractiveMediaEvent proto.InternalMessageInfo

func (m *UpdateInteractiveMediaEvent) GetMid() *UUIDValue {
	if m != nil {
		return m.Mid
	}
	return nil
}

func (m *UpdateInteractiveMediaEvent) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *UpdateInteractiveMediaEvent) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

func (m *UpdateInteractiveMediaEvent) GetUid() int32 {
	if m != nil {
		return m.Uid
	}
	return 0
}

// Sends a request to do interactive media message
type RequestDoInteractiveMediaAction struct {
	/// Message id of the enclosed message
	Mid   *UUIDValue `protobuf:"bytes,1,opt,name=mid,proto3" json:"mid,omitempty"`
	Id    string     `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Value string     `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *RequestDoInteractiveMediaAction) Reset()      { *m = RequestDoInteractiveMediaAction{} }
func (*RequestDoInteractiveMediaAction) ProtoMessage() {}
func (*RequestDoInteractiveMediaAction) Descriptor() ([]byte, []int) {
	return fileDescriptor_42a1718997f046ec, []int{16}
}
func (m *RequestDoInteractiveMediaAction) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RequestDoInteractiveMediaAction) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RequestDoInteractiveMediaAction.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RequestDoInteractiveMediaAction) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RequestDoInteractiveMediaAction.Merge(m, src)
}
func (m *RequestDoInteractiveMediaAction) XXX_Size() int {
	return m.Size()
}
func (m *RequestDoInteractiveMediaAction) XXX_DiscardUnknown() {
	xxx_messageInfo_RequestDoInteractiveMediaAction.DiscardUnknown(m)
}

var xxx_messageInfo_RequestDoInteractiveMediaAction proto.InternalMessageInfo

func (m *RequestDoInteractiveMediaAction) GetMid() *UUIDValue {
	if m != nil {
		return m.Mid
	}
	return nil
}

func (m *RequestDoInteractiveMediaAction) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *RequestDoInteractiveMediaAction) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

type MessageContent struct {
	// Types that are valid to be assigned to Body:
	//	*MessageContent_TextMessage
	//	*MessageContent_ServiceMessage
	//	*MessageContent_DocumentMessage
	//	*MessageContent_JsonMessage
	//	*MessageContent_UnsupportedMessage
	//	*MessageContent_StickerMessage
	//	*MessageContent_BinaryMessage
	//	*MessageContent_EmptyMessage
	//	*MessageContent_DeletedMessage
	Body isMessageContent_Body `protobuf_oneof:"body"`
}

func (m *MessageContent) Reset()      { *m = MessageContent{} }
func (*MessageContent) ProtoMessage() {}
func (*MessageContent) Descriptor() ([]byte, []int) {
	return fileDescriptor_42a1718997f046ec, []int{17}
}
func (m *MessageContent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MessageContent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MessageContent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MessageContent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MessageContent.Merge(m, src)
}
func (m *MessageContent) XXX_Size() int {
	return m.Size()
}
func (m *MessageContent) XXX_DiscardUnknown() {
	xxx_messageInfo_MessageContent.DiscardUnknown(m)
}

var xxx_messageInfo_MessageContent proto.InternalMessageInfo

type isMessageContent_Body interface {
	isMessageContent_Body()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type MessageContent_TextMessage struct {
	TextMessage *TextMessage `protobuf:"bytes,1,opt,name=textMessage,proto3,oneof" json:"textMessage,omitempty"`
}
type MessageContent_ServiceMessage struct {
	ServiceMessage *ServiceMessage `protobuf:"bytes,2,opt,name=serviceMessage,proto3,oneof" json:"serviceMessage,omitempty"`
}
type MessageContent_DocumentMessage struct {
	DocumentMessage *DocumentMessage `protobuf:"bytes,3,opt,name=documentMessage,proto3,oneof" json:"documentMessage,omitempty"`
}
type MessageContent_JsonMessage struct {
	JsonMessage *JsonMessage `protobuf:"bytes,4,opt,name=jsonMessage,proto3,oneof" json:"jsonMessage,omitempty"`
}
type MessageContent_UnsupportedMessage struct {
	UnsupportedMessage *UnsupportedMessage `protobuf:"bytes,5,opt,name=unsupportedMessage,proto3,oneof" json:"unsupportedMessage,omitempty"`
}
type MessageContent_StickerMessage struct {
	StickerMessage *StickerMessage `protobuf:"bytes,6,opt,name=stickerMessage,proto3,oneof" json:"stickerMessage,omitempty"`
}
type MessageContent_BinaryMessage struct {
	BinaryMessage *BinaryMessage `protobuf:"bytes,7,opt,name=binaryMessage,proto3,oneof" json:"binaryMessage,omitempty"`
}
type MessageContent_EmptyMessage struct {
	EmptyMessage *EmptyMessage `protobuf:"bytes,8,opt,name=emptyMessage,proto3,oneof" json:"emptyMessage,omitempty"`
}
type MessageContent_DeletedMessage struct {
	DeletedMessage *DeletedMessage `protobuf:"bytes,9,opt,name=deletedMessage,proto3,oneof" json:"deletedMessage,omitempty"`
}

func (*MessageContent_TextMessage) isMessageContent_Body()        {}
func (*MessageContent_ServiceMessage) isMessageContent_Body()     {}
func (*MessageContent_DocumentMessage) isMessageContent_Body()    {}
func (*MessageContent_JsonMessage) isMessageContent_Body()        {}
func (*MessageContent_UnsupportedMessage) isMessageContent_Body() {}
func (*MessageContent_StickerMessage) isMessageContent_Body()     {}
func (*MessageContent_BinaryMessage) isMessageContent_Body()      {}
func (*MessageContent_EmptyMessage) isMessageContent_Body()       {}
func (*MessageContent_DeletedMessage) isMessageContent_Body()     {}

func (m *MessageContent) GetBody() isMessageContent_Body {
	if m != nil {
		return m.Body
	}
	return nil
}

func (m *MessageContent) GetTextMessage() *TextMessage {
	if x, ok := m.GetBody().(*MessageContent_TextMessage); ok {
		return x.TextMessage
	}
	return nil
}

func (m *MessageContent) GetServiceMessage() *ServiceMessage {
	if x, ok := m.GetBody().(*MessageContent_ServiceMessage); ok {
		return x.ServiceMessage
	}
	return nil
}

func (m *MessageContent) GetDocumentMessage() *DocumentMessage {
	if x, ok := m.GetBody().(*MessageContent_DocumentMessage); ok {
		return x.DocumentMessage
	}
	return nil
}

func (m *MessageContent) GetJsonMessage() *JsonMessage {
	if x, ok := m.GetBody().(*MessageContent_JsonMessage); ok {
		return x.JsonMessage
	}
	return nil
}

func (m *MessageContent) GetUnsupportedMessage() *UnsupportedMessage {
	if x, ok := m.GetBody().(*MessageContent_UnsupportedMessage); ok {
		return x.UnsupportedMessage
	}
	return nil
}

func (m *MessageContent) GetStickerMessage() *StickerMessage {
	if x, ok := m.GetBody().(*MessageContent_StickerMessage); ok {
		return x.StickerMessage
	}
	return nil
}

func (m *MessageContent) GetBinaryMessage() *BinaryMessage {
	if x, ok := m.GetBody().(*MessageContent_BinaryMessage); ok {
		return x.BinaryMessage
	}
	return nil
}

func (m *MessageContent) GetEmptyMessage() *EmptyMessage {
	if x, ok := m.GetBody().(*MessageContent_EmptyMessage); ok {
		return x.EmptyMessage
	}
	return nil
}

func (m *MessageContent) GetDeletedMessage() *DeletedMessage {
	if x, ok := m.GetBody().(*MessageContent_DeletedMessage); ok {
		return x.DeletedMessage
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*MessageContent) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*MessageContent_TextMessage)(nil),
		(*MessageContent_ServiceMessage)(nil),
		(*MessageContent_DocumentMessage)(nil),
		(*MessageContent_JsonMessage)(nil),
		(*MessageContent_UnsupportedMessage)(nil),
		(*MessageContent_StickerMessage)(nil),
		(*MessageContent_BinaryMessage)(nil),
		(*MessageContent_EmptyMessage)(nil),
		(*MessageContent_DeletedMessage)(nil),
	}
}

// Text message
type TextMessage struct {
	Text string `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty"`
	/// Optional bytes of extension
	Ext        *TextMessageEx  `protobuf:"bytes,3,opt,name=ext,proto3" json:"ext,omitempty"`
	Media      []*MessageMedia `protobuf:"bytes,4,rep,name=media,proto3" json:"media,omitempty"`
	Extensions []*Any          `protobuf:"bytes,5,rep,name=extensions,proto3" json:"extensions,omitempty"`
	/// Mentions in message
	Mentions []*Mention `protobuf:"bytes,6,rep,name=mentions,proto3" json:"mentions,omitempty"`
}

func (m *TextMessage) Reset()      { *m = TextMessage{} }
func (*TextMessage) ProtoMessage() {}
func (*TextMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_42a1718997f046ec, []int{18}
}
func (m *TextMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TextMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TextMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TextMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TextMessage.Merge(m, src)
}
func (m *TextMessage) XXX_Size() int {
	return m.Size()
}
func (m *TextMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_TextMessage.DiscardUnknown(m)
}

var xxx_messageInfo_TextMessage proto.InternalMessageInfo

func (m *TextMessage) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

func (m *TextMessage) GetExt() *TextMessageEx {
	if m != nil {
		return m.Ext
	}
	return nil
}

func (m *TextMessage) GetMedia() []*MessageMedia {
	if m != nil {
		return m.Media
	}
	return nil
}

func (m *TextMessage) GetExtensions() []*Any {
	if m != nil {
		return m.Extensions
	}
	return nil
}

func (m *TextMessage) GetMentions() []*Mention {
	if m != nil {
		return m.Mentions
	}
	return nil
}

type Mention struct {
	Peer *Peer `protobuf:"bytes,1,opt,name=peer,proto3" json:"peer,omitempty"`
	All  bool  `protobuf:"varint,2,opt,name=all,proto3" json:"all,omitempty"`
}

func (m *Mention) Reset()      { *m = Mention{} }
func (*Mention) ProtoMessage() {}
func (*Mention) Descriptor() ([]byte, []int) {
	return fileDescriptor_42a1718997f046ec, []int{19}
}
func (m *Mention) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Mention) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Mention.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Mention) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Mention.Merge(m, src)
}
func (m *Mention) XXX_Size() int {
	return m.Size()
}
func (m *Mention) XXX_DiscardUnknown() {
	xxx_messageInfo_Mention.DiscardUnknown(m)
}

var xxx_messageInfo_Mention proto.InternalMessageInfo

func (m *Mention) GetPeer() *Peer {
	if m != nil {
		return m.Peer
	}
	return nil
}

func (m *Mention) GetAll() bool {
	if m != nil {
		return m.All
	}
	return false
}

type TextMessageEx struct {
	// Types that are valid to be assigned to Body:
	//	*TextMessageEx_TextExMarkdown
	//	*TextMessageEx_TextModernMessage
	//	*TextMessageEx_TextCommand
	Body isTextMessageEx_Body `protobuf_oneof:"body"`
}

func (m *TextMessageEx) Reset()      { *m = TextMessageEx{} }
func (*TextMessageEx) ProtoMessage() {}
func (*TextMessageEx) Descriptor() ([]byte, []int) {
	return fileDescriptor_42a1718997f046ec, []int{20}
}
func (m *TextMessageEx) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TextMessageEx) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TextMessageEx.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TextMessageEx) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TextMessageEx.Merge(m, src)
}
func (m *TextMessageEx) XXX_Size() int {
	return m.Size()
}
func (m *TextMessageEx) XXX_DiscardUnknown() {
	xxx_messageInfo_TextMessageEx.DiscardUnknown(m)
}

var xxx_messageInfo_TextMessageEx proto.InternalMessageInfo

type isTextMessageEx_Body interface {
	isTextMessageEx_Body()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type TextMessageEx_TextExMarkdown struct {
	TextExMarkdown *TextExMarkdown `protobuf:"bytes,1,opt,name=textExMarkdown,proto3,oneof" json:"textExMarkdown,omitempty"`
}
type TextMessageEx_TextModernMessage struct {
	TextModernMessage *TextModernMessage `protobuf:"bytes,2,opt,name=textModernMessage,proto3,oneof" json:"textModernMessage,omitempty"`
}
type TextMessageEx_TextCommand struct {
	TextCommand *TextCommand `protobuf:"bytes,3,opt,name=textCommand,proto3,oneof" json:"textCommand,omitempty"`
}

func (*TextMessageEx_TextExMarkdown) isTextMessageEx_Body()    {}
func (*TextMessageEx_TextModernMessage) isTextMessageEx_Body() {}
func (*TextMessageEx_TextCommand) isTextMessageEx_Body()       {}

func (m *TextMessageEx) GetBody() isTextMessageEx_Body {
	if m != nil {
		return m.Body
	}
	return nil
}

func (m *TextMessageEx) GetTextExMarkdown() *TextExMarkdown {
	if x, ok := m.GetBody().(*TextMessageEx_TextExMarkdown); ok {
		return x.TextExMarkdown
	}
	return nil
}

func (m *TextMessageEx) GetTextModernMessage() *TextModernMessage {
	if x, ok := m.GetBody().(*TextMessageEx_TextModernMessage); ok {
		return x.TextModernMessage
	}
	return nil
}

func (m *TextMessageEx) GetTextCommand() *TextCommand {
	if x, ok := m.GetBody().(*TextMessageEx_TextCommand); ok {
		return x.TextCommand
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*TextMessageEx) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*TextMessageEx_TextExMarkdown)(nil),
		(*TextMessageEx_TextModernMessage)(nil),
		(*TextMessageEx_TextCommand)(nil),
	}
}

// Markdown extension
type TextExMarkdown struct {
	Markdown string `protobuf:"bytes,2,opt,name=markdown,proto3" json:"markdown,omitempty"`
}

func (m *TextExMarkdown) Reset()      { *m = TextExMarkdown{} }
func (*TextExMarkdown) ProtoMessage() {}
func (*TextExMarkdown) Descriptor() ([]byte, []int) {
	return fileDescriptor_42a1718997f046ec, []int{21}
}
func (m *TextExMarkdown) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TextExMarkdown) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TextExMarkdown.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TextExMarkdown) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TextExMarkdown.Merge(m, src)
}
func (m *TextExMarkdown) XXX_Size() int {
	return m.Size()
}
func (m *TextExMarkdown) XXX_DiscardUnknown() {
	xxx_messageInfo_TextExMarkdown.DiscardUnknown(m)
}

var xxx_messageInfo_TextExMarkdown proto.InternalMessageInfo

func (m *TextExMarkdown) GetMarkdown() string {
	if m != nil {
		return m.Markdown
	}
	return ""
}

// Modern text message
type TextModernMessage struct {
	Text                *types.StringValue  `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty"`
	SenderNameOverride  *types.StringValue  `protobuf:"bytes,2,opt,name=sender_name_override,json=senderNameOverride,proto3" json:"sender_name_override,omitempty"`
	SenderPhotoOverride *Avatar             `protobuf:"bytes,3,opt,name=sender_photo_override,json=senderPhotoOverride,proto3" json:"sender_photo_override,omitempty"`
	Style               *ParagraphStyle     `protobuf:"bytes,4,opt,name=style,proto3" json:"style,omitempty"`
	Attaches            []*TextModernAttach `protobuf:"bytes,5,rep,name=attaches,proto3" json:"attaches,omitempty"`
}

func (m *TextModernMessage) Reset()      { *m = TextModernMessage{} }
func (*TextModernMessage) ProtoMessage() {}
func (*TextModernMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_42a1718997f046ec, []int{22}
}
func (m *TextModernMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TextModernMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TextModernMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TextModernMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TextModernMessage.Merge(m, src)
}
func (m *TextModernMessage) XXX_Size() int {
	return m.Size()
}
func (m *TextModernMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_TextModernMessage.DiscardUnknown(m)
}

var xxx_messageInfo_TextModernMessage proto.InternalMessageInfo

func (m *TextModernMessage) GetText() *types.StringValue {
	if m != nil {
		return m.Text
	}
	return nil
}

func (m *TextModernMessage) GetSenderNameOverride() *types.StringValue {
	if m != nil {
		return m.SenderNameOverride
	}
	return nil
}

func (m *TextModernMessage) GetSenderPhotoOverride() *Avatar {
	if m != nil {
		return m.SenderPhotoOverride
	}
	return nil
}

func (m *TextModernMessage) GetStyle() *ParagraphStyle {
	if m != nil {
		return m.Style
	}
	return nil
}

func (m *TextModernMessage) GetAttaches() []*TextModernAttach {
	if m != nil {
		return m.Attaches
	}
	return nil
}

// Paragraph style
type ParagraphStyle struct {
	/// Show quote-like paragraph?
	ShowParagraph *types.BoolValue `protobuf:"bytes,1,opt,name=show_paragraph,json=showParagraph,proto3" json:"show_paragraph,omitempty"`
	/// Override paragraph color
	ParagraphColor *Color `protobuf:"bytes,2,opt,name=paragraph_color,json=paragraphColor,proto3" json:"paragraph_color,omitempty"`
	/// Override background color
	BgColor *Color `protobuf:"bytes,3,opt,name=bg_color,json=bgColor,proto3" json:"bg_color,omitempty"`
}

func (m *ParagraphStyle) Reset()      { *m = ParagraphStyle{} }
func (*ParagraphStyle) ProtoMessage() {}
func (*ParagraphStyle) Descriptor() ([]byte, []int) {
	return fileDescriptor_42a1718997f046ec, []int{23}
}
func (m *ParagraphStyle) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ParagraphStyle) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ParagraphStyle.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ParagraphStyle) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ParagraphStyle.Merge(m, src)
}
func (m *ParagraphStyle) XXX_Size() int {
	return m.Size()
}
func (m *ParagraphStyle) XXX_DiscardUnknown() {
	xxx_messageInfo_ParagraphStyle.DiscardUnknown(m)
}

var xxx_messageInfo_ParagraphStyle proto.InternalMessageInfo

func (m *ParagraphStyle) GetShowParagraph() *types.BoolValue {
	if m != nil {
		return m.ShowParagraph
	}
	return nil
}

func (m *ParagraphStyle) GetParagraphColor() *Color {
	if m != nil {
		return m.ParagraphColor
	}
	return nil
}

func (m *ParagraphStyle) GetBgColor() *Color {
	if m != nil {
		return m.BgColor
	}
	return nil
}

// Attaches to message
type TextModernAttach struct {
	Title     *types.StringValue `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	TitleUrl  *types.StringValue `protobuf:"bytes,2,opt,name=title_url,json=titleUrl,proto3" json:"title_url,omitempty"`
	TitleIcon *ImageLocation     `protobuf:"bytes,3,opt,name=title_icon,json=titleIcon,proto3" json:"title_icon,omitempty"`
	Text      *types.StringValue `protobuf:"bytes,4,opt,name=text,proto3" json:"text,omitempty"`
	Style     *ParagraphStyle    `protobuf:"bytes,5,opt,name=style,proto3" json:"style,omitempty"`
	Fields    []*TextModernField `protobuf:"bytes,6,rep,name=fields,proto3" json:"fields,omitempty"`
}

func (m *TextModernAttach) Reset()      { *m = TextModernAttach{} }
func (*TextModernAttach) ProtoMessage() {}
func (*TextModernAttach) Descriptor() ([]byte, []int) {
	return fileDescriptor_42a1718997f046ec, []int{24}
}
func (m *TextModernAttach) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TextModernAttach) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TextModernAttach.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TextModernAttach) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TextModernAttach.Merge(m, src)
}
func (m *TextModernAttach) XXX_Size() int {
	return m.Size()
}
func (m *TextModernAttach) XXX_DiscardUnknown() {
	xxx_messageInfo_TextModernAttach.DiscardUnknown(m)
}

var xxx_messageInfo_TextModernAttach proto.InternalMessageInfo

func (m *TextModernAttach) GetTitle() *types.StringValue {
	if m != nil {
		return m.Title
	}
	return nil
}

func (m *TextModernAttach) GetTitleUrl() *types.StringValue {
	if m != nil {
		return m.TitleUrl
	}
	return nil
}

func (m *TextModernAttach) GetTitleIcon() *ImageLocation {
	if m != nil {
		return m.TitleIcon
	}
	return nil
}

func (m *TextModernAttach) GetText() *types.StringValue {
	if m != nil {
		return m.Text
	}
	return nil
}

func (m *TextModernAttach) GetStyle() *ParagraphStyle {
	if m != nil {
		return m.Style
	}
	return nil
}

func (m *TextModernAttach) GetFields() []*TextModernField {
	if m != nil {
		return m.Fields
	}
	return nil
}

// Modern message fields
type TextModernField struct {
	Title string `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	Value string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	/// Is field can be shown in compact way (default is TRUE)
	IsShort *types.BoolValue `protobuf:"bytes,3,opt,name=is_short,json=isShort,proto3" json:"is_short,omitempty"`
}

func (m *TextModernField) Reset()      { *m = TextModernField{} }
func (*TextModernField) ProtoMessage() {}
func (*TextModernField) Descriptor() ([]byte, []int) {
	return fileDescriptor_42a1718997f046ec, []int{25}
}
func (m *TextModernField) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TextModernField) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TextModernField.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TextModernField) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TextModernField.Merge(m, src)
}
func (m *TextModernField) XXX_Size() int {
	return m.Size()
}
func (m *TextModernField) XXX_DiscardUnknown() {
	xxx_messageInfo_TextModernField.DiscardUnknown(m)
}

var xxx_messageInfo_TextModernField proto.InternalMessageInfo

func (m *TextModernField) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *TextModernField) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

func (m *TextModernField) GetIsShort() *types.BoolValue {
	if m != nil {
		return m.IsShort
	}
	return nil
}

// Text Command Message for bots
type TextCommand struct {
	/// Slash-Command For execution
	Command string `protobuf:"bytes,1,opt,name=command,proto3" json:"command,omitempty"`
	Args    string `protobuf:"bytes,2,opt,name=args,proto3" json:"args,omitempty"`
}

func (m *TextCommand) Reset()      { *m = TextCommand{} }
func (*TextCommand) ProtoMessage() {}
func (*TextCommand) Descriptor() ([]byte, []int) {
	return fileDescriptor_42a1718997f046ec, []int{26}
}
func (m *TextCommand) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TextCommand) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TextCommand.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TextCommand) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TextCommand.Merge(m, src)
}
func (m *TextCommand) XXX_Size() int {
	return m.Size()
}
func (m *TextCommand) XXX_DiscardUnknown() {
	xxx_messageInfo_TextCommand.DiscardUnknown(m)
}

var xxx_messageInfo_TextCommand proto.InternalMessageInfo

func (m *TextCommand) GetCommand() string {
	if m != nil {
		return m.Command
	}
	return ""
}

func (m *TextCommand) GetArgs() string {
	if m != nil {
		return m.Args
	}
	return ""
}

// Service message
type ServiceMessage struct {
	Text string     `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty"`
	Ext  *ServiceEx `protobuf:"bytes,3,opt,name=ext,proto3" json:"ext,omitempty"`
}

func (m *ServiceMessage) Reset()      { *m = ServiceMessage{} }
func (*ServiceMessage) ProtoMessage() {}
func (*ServiceMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_42a1718997f046ec, []int{27}
}
func (m *ServiceMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ServiceMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ServiceMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ServiceMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ServiceMessage.Merge(m, src)
}
func (m *ServiceMessage) XXX_Size() int {
	return m.Size()
}
func (m *ServiceMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_ServiceMessage.DiscardUnknown(m)
}

var xxx_messageInfo_ServiceMessage proto.InternalMessageInfo

func (m *ServiceMessage) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

func (m *ServiceMessage) GetExt() *ServiceEx {
	if m != nil {
		return m.Ext
	}
	return nil
}

type ServiceEx struct {
	// Types that are valid to be assigned to Body:
	//	*ServiceEx_UserInvited
	//	*ServiceEx_UserJoined
	//	*ServiceEx_UserKicked
	//	*ServiceEx_UserLeft
	//	*ServiceEx_GroupCreated
	//	*ServiceEx_ChangedShortname
	//	*ServiceEx_ChangedTitle
	//	*ServiceEx_ChangedTopic
	//	*ServiceEx_ChangedAbout
	//	*ServiceEx_ChangedAvatar
	//	*ServiceEx_ContactRegistered
	//	*ServiceEx_PhoneMissed
	//	*ServiceEx_PhoneCall
	//	*ServiceEx_PhoneRejected
	//	*ServiceEx_ChatArchived
	//	*ServiceEx_ChatRestored
	Body isServiceEx_Body `protobuf_oneof:"body"`
}

func (m *ServiceEx) Reset()      { *m = ServiceEx{} }
func (*ServiceEx) ProtoMessage() {}
func (*ServiceEx) Descriptor() ([]byte, []int) {
	return fileDescriptor_42a1718997f046ec, []int{28}
}
func (m *ServiceEx) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ServiceEx) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ServiceEx.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ServiceEx) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ServiceEx.Merge(m, src)
}
func (m *ServiceEx) XXX_Size() int {
	return m.Size()
}
func (m *ServiceEx) XXX_DiscardUnknown() {
	xxx_messageInfo_ServiceEx.DiscardUnknown(m)
}

var xxx_messageInfo_ServiceEx proto.InternalMessageInfo

type isServiceEx_Body interface {
	isServiceEx_Body()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type ServiceEx_UserInvited struct {
	UserInvited *ServiceExUserInvited `protobuf:"bytes,1,opt,name=userInvited,proto3,oneof" json:"userInvited,omitempty"`
}
type ServiceEx_UserJoined struct {
	UserJoined *ServiceExUserJoined `protobuf:"bytes,2,opt,name=userJoined,proto3,oneof" json:"userJoined,omitempty"`
}
type ServiceEx_UserKicked struct {
	UserKicked *ServiceExUserKicked `protobuf:"bytes,3,opt,name=userKicked,proto3,oneof" json:"userKicked,omitempty"`
}
type ServiceEx_UserLeft struct {
	UserLeft *ServiceExUserLeft `protobuf:"bytes,4,opt,name=userLeft,proto3,oneof" json:"userLeft,omitempty"`
}
type ServiceEx_GroupCreated struct {
	GroupCreated *ServiceExGroupCreated `protobuf:"bytes,5,opt,name=groupCreated,proto3,oneof" json:"groupCreated,omitempty"`
}
type ServiceEx_ChangedShortname struct {
	ChangedShortname *ServiceExChangedShortname `protobuf:"bytes,16,opt,name=changedShortname,proto3,oneof" json:"changedShortname,omitempty"`
}
type ServiceEx_ChangedTitle struct {
	ChangedTitle *ServiceExChangedTitle `protobuf:"bytes,6,opt,name=changedTitle,proto3,oneof" json:"changedTitle,omitempty"`
}
type ServiceEx_ChangedTopic struct {
	ChangedTopic *ServiceExChangedTopic `protobuf:"bytes,7,opt,name=changedTopic,proto3,oneof" json:"changedTopic,omitempty"`
}
type ServiceEx_ChangedAbout struct {
	ChangedAbout *ServiceExChangedAbout `protobuf:"bytes,8,opt,name=changedAbout,proto3,oneof" json:"changedAbout,omitempty"`
}
type ServiceEx_ChangedAvatar struct {
	ChangedAvatar *ServiceExChangedAvatar `protobuf:"bytes,9,opt,name=changedAvatar,proto3,oneof" json:"changedAvatar,omitempty"`
}
type ServiceEx_ContactRegistered struct {
	ContactRegistered *ServiceExContactRegistered `protobuf:"bytes,10,opt,name=contactRegistered,proto3,oneof" json:"contactRegistered,omitempty"`
}
type ServiceEx_PhoneMissed struct {
	PhoneMissed *ServiceExPhoneMissed `protobuf:"bytes,11,opt,name=phoneMissed,proto3,oneof" json:"phoneMissed,omitempty"`
}
type ServiceEx_PhoneCall struct {
	PhoneCall *ServiceExPhoneCall `protobuf:"bytes,12,opt,name=phoneCall,proto3,oneof" json:"phoneCall,omitempty"`
}
type ServiceEx_PhoneRejected struct {
	PhoneRejected *ServiceExPhoneRejected `protobuf:"bytes,13,opt,name=phoneRejected,proto3,oneof" json:"phoneRejected,omitempty"`
}
type ServiceEx_ChatArchived struct {
	ChatArchived *ServiceExChatArchived `protobuf:"bytes,14,opt,name=chatArchived,proto3,oneof" json:"chatArchived,omitempty"`
}
type ServiceEx_ChatRestored struct {
	ChatRestored *ServiceExChatRestored `protobuf:"bytes,15,opt,name=chatRestored,proto3,oneof" json:"chatRestored,omitempty"`
}

func (*ServiceEx_UserInvited) isServiceEx_Body()       {}
func (*ServiceEx_UserJoined) isServiceEx_Body()        {}
func (*ServiceEx_UserKicked) isServiceEx_Body()        {}
func (*ServiceEx_UserLeft) isServiceEx_Body()          {}
func (*ServiceEx_GroupCreated) isServiceEx_Body()      {}
func (*ServiceEx_ChangedShortname) isServiceEx_Body()  {}
func (*ServiceEx_ChangedTitle) isServiceEx_Body()      {}
func (*ServiceEx_ChangedTopic) isServiceEx_Body()      {}
func (*ServiceEx_ChangedAbout) isServiceEx_Body()      {}
func (*ServiceEx_ChangedAvatar) isServiceEx_Body()     {}
func (*ServiceEx_ContactRegistered) isServiceEx_Body() {}
func (*ServiceEx_PhoneMissed) isServiceEx_Body()       {}
func (*ServiceEx_PhoneCall) isServiceEx_Body()         {}
func (*ServiceEx_PhoneRejected) isServiceEx_Body()     {}
func (*ServiceEx_ChatArchived) isServiceEx_Body()      {}
func (*ServiceEx_ChatRestored) isServiceEx_Body()      {}

func (m *ServiceEx) GetBody() isServiceEx_Body {
	if m != nil {
		return m.Body
	}
	return nil
}

func (m *ServiceEx) GetUserInvited() *ServiceExUserInvited {
	if x, ok := m.GetBody().(*ServiceEx_UserInvited); ok {
		return x.UserInvited
	}
	return nil
}

func (m *ServiceEx) GetUserJoined() *ServiceExUserJoined {
	if x, ok := m.GetBody().(*ServiceEx_UserJoined); ok {
		return x.UserJoined
	}
	return nil
}

func (m *ServiceEx) GetUserKicked() *ServiceExUserKicked {
	if x, ok := m.GetBody().(*ServiceEx_UserKicked); ok {
		return x.UserKicked
	}
	return nil
}

func (m *ServiceEx) GetUserLeft() *ServiceExUserLeft {
	if x, ok := m.GetBody().(*ServiceEx_UserLeft); ok {
		return x.UserLeft
	}
	return nil
}

func (m *ServiceEx) GetGroupCreated() *ServiceExGroupCreated {
	if x, ok := m.GetBody().(*ServiceEx_GroupCreated); ok {
		return x.GroupCreated
	}
	return nil
}

func (m *ServiceEx) GetChangedShortname() *ServiceExChangedShortname {
	if x, ok := m.GetBody().(*ServiceEx_ChangedShortname); ok {
		return x.ChangedShortname
	}
	return nil
}

func (m *ServiceEx) GetChangedTitle() *ServiceExChangedTitle {
	if x, ok := m.GetBody().(*ServiceEx_ChangedTitle); ok {
		return x.ChangedTitle
	}
	return nil
}

func (m *ServiceEx) GetChangedTopic() *ServiceExChangedTopic {
	if x, ok := m.GetBody().(*ServiceEx_ChangedTopic); ok {
		return x.ChangedTopic
	}
	return nil
}

func (m *ServiceEx) GetChangedAbout() *ServiceExChangedAbout {
	if x, ok := m.GetBody().(*ServiceEx_ChangedAbout); ok {
		return x.ChangedAbout
	}
	return nil
}

func (m *ServiceEx) GetChangedAvatar() *ServiceExChangedAvatar {
	if x, ok := m.GetBody().(*ServiceEx_ChangedAvatar); ok {
		return x.ChangedAvatar
	}
	return nil
}

func (m *ServiceEx) GetContactRegistered() *ServiceExContactRegistered {
	if x, ok := m.GetBody().(*ServiceEx_ContactRegistered); ok {
		return x.ContactRegistered
	}
	return nil
}

func (m *ServiceEx) GetPhoneMissed() *ServiceExPhoneMissed {
	if x, ok := m.GetBody().(*ServiceEx_PhoneMissed); ok {
		return x.PhoneMissed
	}
	return nil
}

func (m *ServiceEx) GetPhoneCall() *ServiceExPhoneCall {
	if x, ok := m.GetBody().(*ServiceEx_PhoneCall); ok {
		return x.PhoneCall
	}
	return nil
}

func (m *ServiceEx) GetPhoneRejected() *ServiceExPhoneRejected {
	if x, ok := m.GetBody().(*ServiceEx_PhoneRejected); ok {
		return x.PhoneRejected
	}
	return nil
}

func (m *ServiceEx) GetChatArchived() *ServiceExChatArchived {
	if x, ok := m.GetBody().(*ServiceEx_ChatArchived); ok {
		return x.ChatArchived
	}
	return nil
}

func (m *ServiceEx) GetChatRestored() *ServiceExChatRestored {
	if x, ok := m.GetBody().(*ServiceEx_ChatRestored); ok {
		return x.ChatRestored
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*ServiceEx) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*ServiceEx_UserInvited)(nil),
		(*ServiceEx_UserJoined)(nil),
		(*ServiceEx_UserKicked)(nil),
		(*ServiceEx_UserLeft)(nil),
		(*ServiceEx_GroupCreated)(nil),
		(*ServiceEx_ChangedShortname)(nil),
		(*ServiceEx_ChangedTitle)(nil),
		(*ServiceEx_ChangedTopic)(nil),
		(*ServiceEx_ChangedAbout)(nil),
		(*ServiceEx_ChangedAvatar)(nil),
		(*ServiceEx_ContactRegistered)(nil),
		(*ServiceEx_PhoneMissed)(nil),
		(*ServiceEx_PhoneCall)(nil),
		(*ServiceEx_PhoneRejected)(nil),
		(*ServiceEx_ChatArchived)(nil),
		(*ServiceEx_ChatRestored)(nil),
	}
}

// Service message about adding user to group
type ServiceExUserInvited struct {
	InvitedUid int32 `protobuf:"varint,1,opt,name=invited_uid,json=invitedUid,proto3" json:"invited_uid,omitempty"`
}

func (m *ServiceExUserInvited) Reset()      { *m = ServiceExUserInvited{} }
func (*ServiceExUserInvited) ProtoMessage() {}
func (*ServiceExUserInvited) Descriptor() ([]byte, []int) {
	return fileDescriptor_42a1718997f046ec, []int{29}
}
func (m *ServiceExUserInvited) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ServiceExUserInvited) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ServiceExUserInvited.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ServiceExUserInvited) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ServiceExUserInvited.Merge(m, src)
}
func (m *ServiceExUserInvited) XXX_Size() int {
	return m.Size()
}
func (m *ServiceExUserInvited) XXX_DiscardUnknown() {
	xxx_messageInfo_ServiceExUserInvited.DiscardUnknown(m)
}

var xxx_messageInfo_ServiceExUserInvited proto.InternalMessageInfo

func (m *ServiceExUserInvited) GetInvitedUid() int32 {
	if m != nil {
		return m.InvitedUid
	}
	return 0
}

// Service message about user join to group
type ServiceExUserJoined struct {
	JoinedUserId int32 `protobuf:"varint,1,opt,name=joined_user_id,json=joinedUserId,proto3" json:"joined_user_id,omitempty"`
}

func (m *ServiceExUserJoined) Reset()      { *m = ServiceExUserJoined{} }
func (*ServiceExUserJoined) ProtoMessage() {}
func (*ServiceExUserJoined) Descriptor() ([]byte, []int) {
	return fileDescriptor_42a1718997f046ec, []int{30}
}
func (m *ServiceExUserJoined) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ServiceExUserJoined) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ServiceExUserJoined.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ServiceExUserJoined) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ServiceExUserJoined.Merge(m, src)
}
func (m *ServiceExUserJoined) XXX_Size() int {
	return m.Size()
}
func (m *ServiceExUserJoined) XXX_DiscardUnknown() {
	xxx_messageInfo_ServiceExUserJoined.DiscardUnknown(m)
}

var xxx_messageInfo_ServiceExUserJoined proto.InternalMessageInfo

func (m *ServiceExUserJoined) GetJoinedUserId() int32 {
	if m != nil {
		return m.JoinedUserId
	}
	return 0
}

// Service message about kicking user from group
type ServiceExUserKicked struct {
	KickedUid int32 `protobuf:"varint,1,opt,name=kicked_uid,json=kickedUid,proto3" json:"kicked_uid,omitempty"`
}

func (m *ServiceExUserKicked) Reset()      { *m = ServiceExUserKicked{} }
func (*ServiceExUserKicked) ProtoMessage() {}
func (*ServiceExUserKicked) Descriptor() ([]byte, []int) {
	return fileDescriptor_42a1718997f046ec, []int{31}
}
func (m *ServiceExUserKicked) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ServiceExUserKicked) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ServiceExUserKicked.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ServiceExUserKicked) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ServiceExUserKicked.Merge(m, src)
}
func (m *ServiceExUserKicked) XXX_Size() int {
	return m.Size()
}
func (m *ServiceExUserKicked) XXX_DiscardUnknown() {
	xxx_messageInfo_ServiceExUserKicked.DiscardUnknown(m)
}

var xxx_messageInfo_ServiceExUserKicked proto.InternalMessageInfo

func (m *ServiceExUserKicked) GetKickedUid() int32 {
	if m != nil {
		return m.KickedUid
	}
	return 0
}

// Service message about user left group
type ServiceExUserLeft struct {
	LeftUserId int32 `protobuf:"varint,1,opt,name=left_user_id,json=leftUserId,proto3" json:"left_user_id,omitempty"`
}

func (m *ServiceExUserLeft) Reset()      { *m = ServiceExUserLeft{} }
func (*ServiceExUserLeft) ProtoMessage() {}
func (*ServiceExUserLeft) Descriptor() ([]byte, []int) {
	return fileDescriptor_42a1718997f046ec, []int{32}
}
func (m *ServiceExUserLeft) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ServiceExUserLeft) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ServiceExUserLeft.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ServiceExUserLeft) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ServiceExUserLeft.Merge(m, src)
}
func (m *ServiceExUserLeft) XXX_Size() int {
	return m.Size()
}
func (m *ServiceExUserLeft) XXX_DiscardUnknown() {
	xxx_messageInfo_ServiceExUserLeft.DiscardUnknown(m)
}

var xxx_messageInfo_ServiceExUserLeft proto.InternalMessageInfo

func (m *ServiceExUserLeft) GetLeftUserId() int32 {
	if m != nil {
		return m.LeftUserId
	}
	return 0
}

// Service message about group creating
type ServiceExGroupCreated struct {
}

func (m *ServiceExGroupCreated) Reset()      { *m = ServiceExGroupCreated{} }
func (*ServiceExGroupCreated) ProtoMessage() {}
func (*ServiceExGroupCreated) Descriptor() ([]byte, []int) {
	return fileDescriptor_42a1718997f046ec, []int{33}
}
func (m *ServiceExGroupCreated) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ServiceExGroupCreated) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ServiceExGroupCreated.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ServiceExGroupCreated) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ServiceExGroupCreated.Merge(m, src)
}
func (m *ServiceExGroupCreated) XXX_Size() int {
	return m.Size()
}
func (m *ServiceExGroupCreated) XXX_DiscardUnknown() {
	xxx_messageInfo_ServiceExGroupCreated.DiscardUnknown(m)
}

var xxx_messageInfo_ServiceExGroupCreated proto.InternalMessageInfo

// Service message about group shortname change
type ServiceExChangedShortname struct {
	Shortname string `protobuf:"bytes,1,opt,name=shortname,proto3" json:"shortname,omitempty"`
}

func (m *ServiceExChangedShortname) Reset()      { *m = ServiceExChangedShortname{} }
func (*ServiceExChangedShortname) ProtoMessage() {}
func (*ServiceExChangedShortname) Descriptor() ([]byte, []int) {
	return fileDescriptor_42a1718997f046ec, []int{34}
}
func (m *ServiceExChangedShortname) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ServiceExChangedShortname) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ServiceExChangedShortname.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ServiceExChangedShortname) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ServiceExChangedShortname.Merge(m, src)
}
func (m *ServiceExChangedShortname) XXX_Size() int {
	return m.Size()
}
func (m *ServiceExChangedShortname) XXX_DiscardUnknown() {
	xxx_messageInfo_ServiceExChangedShortname.DiscardUnknown(m)
}

var xxx_messageInfo_ServiceExChangedShortname proto.InternalMessageInfo

func (m *ServiceExChangedShortname) GetShortname() string {
	if m != nil {
		return m.Shortname
	}
	return ""
}

// Service message about group title change
type ServiceExChangedTitle struct {
	Title string `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
}

func (m *ServiceExChangedTitle) Reset()      { *m = ServiceExChangedTitle{} }
func (*ServiceExChangedTitle) ProtoMessage() {}
func (*ServiceExChangedTitle) Descriptor() ([]byte, []int) {
	return fileDescriptor_42a1718997f046ec, []int{35}
}
func (m *ServiceExChangedTitle) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ServiceExChangedTitle) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ServiceExChangedTitle.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ServiceExChangedTitle) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ServiceExChangedTitle.Merge(m, src)
}
func (m *ServiceExChangedTitle) XXX_Size() int {
	return m.Size()
}
func (m *ServiceExChangedTitle) XXX_DiscardUnknown() {
	xxx_messageInfo_ServiceExChangedTitle.DiscardUnknown(m)
}

var xxx_messageInfo_ServiceExChangedTitle proto.InternalMessageInfo

func (m *ServiceExChangedTitle) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

// Service message on group topic change
type ServiceExChangedTopic struct {
	/// New group topic
	Topic *types.StringValue `protobuf:"bytes,1,opt,name=topic,proto3" json:"topic,omitempty"`
}

func (m *ServiceExChangedTopic) Reset()      { *m = ServiceExChangedTopic{} }
func (*ServiceExChangedTopic) ProtoMessage() {}
func (*ServiceExChangedTopic) Descriptor() ([]byte, []int) {
	return fileDescriptor_42a1718997f046ec, []int{36}
}
func (m *ServiceExChangedTopic) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ServiceExChangedTopic) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ServiceExChangedTopic.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ServiceExChangedTopic) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ServiceExChangedTopic.Merge(m, src)
}
func (m *ServiceExChangedTopic) XXX_Size() int {
	return m.Size()
}
func (m *ServiceExChangedTopic) XXX_DiscardUnknown() {
	xxx_messageInfo_ServiceExChangedTopic.DiscardUnknown(m)
}

var xxx_messageInfo_ServiceExChangedTopic proto.InternalMessageInfo

func (m *ServiceExChangedTopic) GetTopic() *types.StringValue {
	if m != nil {
		return m.Topic
	}
	return nil
}

// Service message on group about change
type ServiceExChangedAbout struct {
	/// New group about
	About *types.StringValue `protobuf:"bytes,1,opt,name=about,proto3" json:"about,omitempty"`
}

func (m *ServiceExChangedAbout) Reset()      { *m = ServiceExChangedAbout{} }
func (*ServiceExChangedAbout) ProtoMessage() {}
func (*ServiceExChangedAbout) Descriptor() ([]byte, []int) {
	return fileDescriptor_42a1718997f046ec, []int{37}
}
func (m *ServiceExChangedAbout) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ServiceExChangedAbout) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ServiceExChangedAbout.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ServiceExChangedAbout) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ServiceExChangedAbout.Merge(m, src)
}
func (m *ServiceExChangedAbout) XXX_Size() int {
	return m.Size()
}
func (m *ServiceExChangedAbout) XXX_DiscardUnknown() {
	xxx_messageInfo_ServiceExChangedAbout.DiscardUnknown(m)
}

var xxx_messageInfo_ServiceExChangedAbout proto.InternalMessageInfo

func (m *ServiceExChangedAbout) GetAbout() *types.StringValue {
	if m != nil {
		return m.About
	}
	return nil
}

// Service message about avatar change
type ServiceExChangedAvatar struct {
	Avatar *Avatar `protobuf:"bytes,1,opt,name=avatar,proto3" json:"avatar,omitempty"`
}

func (m *ServiceExChangedAvatar) Reset()      { *m = ServiceExChangedAvatar{} }
func (*ServiceExChangedAvatar) ProtoMessage() {}
func (*ServiceExChangedAvatar) Descriptor() ([]byte, []int) {
	return fileDescriptor_42a1718997f046ec, []int{38}
}
func (m *ServiceExChangedAvatar) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ServiceExChangedAvatar) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ServiceExChangedAvatar.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ServiceExChangedAvatar) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ServiceExChangedAvatar.Merge(m, src)
}
func (m *ServiceExChangedAvatar) XXX_Size() int {
	return m.Size()
}
func (m *ServiceExChangedAvatar) XXX_DiscardUnknown() {
	xxx_messageInfo_ServiceExChangedAvatar.DiscardUnknown(m)
}

var xxx_messageInfo_ServiceExChangedAvatar proto.InternalMessageInfo

func (m *ServiceExChangedAvatar) GetAvatar() *Avatar {
	if m != nil {
		return m.Avatar
	}
	return nil
}

// Service message about user registration
type ServiceExContactRegistered struct {
	Uid int32 `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`
}

func (m *ServiceExContactRegistered) Reset()      { *m = ServiceExContactRegistered{} }
func (*ServiceExContactRegistered) ProtoMessage() {}
func (*ServiceExContactRegistered) Descriptor() ([]byte, []int) {
	return fileDescriptor_42a1718997f046ec, []int{39}
}
func (m *ServiceExContactRegistered) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ServiceExContactRegistered) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ServiceExContactRegistered.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ServiceExContactRegistered) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ServiceExContactRegistered.Merge(m, src)
}
func (m *ServiceExContactRegistered) XXX_Size() int {
	return m.Size()
}
func (m *ServiceExContactRegistered) XXX_DiscardUnknown() {
	xxx_messageInfo_ServiceExContactRegistered.DiscardUnknown(m)
}

var xxx_messageInfo_ServiceExContactRegistered proto.InternalMessageInfo

func (m *ServiceExContactRegistered) GetUid() int32 {
	if m != nil {
		return m.Uid
	}
	return 0
}

// Update about missing phone call
type ServiceExPhoneMissed struct {
}

func (m *ServiceExPhoneMissed) Reset()      { *m = ServiceExPhoneMissed{} }
func (*ServiceExPhoneMissed) ProtoMessage() {}
func (*ServiceExPhoneMissed) Descriptor() ([]byte, []int) {
	return fileDescriptor_42a1718997f046ec, []int{40}
}
func (m *ServiceExPhoneMissed) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ServiceExPhoneMissed) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ServiceExPhoneMissed.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ServiceExPhoneMissed) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ServiceExPhoneMissed.Merge(m, src)
}
func (m *ServiceExPhoneMissed) XXX_Size() int {
	return m.Size()
}
func (m *ServiceExPhoneMissed) XXX_DiscardUnknown() {
	xxx_messageInfo_ServiceExPhoneMissed.DiscardUnknown(m)
}

var xxx_messageInfo_ServiceExPhoneMissed proto.InternalMessageInfo

// Update about phone call
type ServiceExPhoneCall struct {
	Duration int32 `protobuf:"varint,1,opt,name=duration,proto3" json:"duration,omitempty"`
}

func (m *ServiceExPhoneCall) Reset()      { *m = ServiceExPhoneCall{} }
func (*ServiceExPhoneCall) ProtoMessage() {}
func (*ServiceExPhoneCall) Descriptor() ([]byte, []int) {
	return fileDescriptor_42a1718997f046ec, []int{41}
}
func (m *ServiceExPhoneCall) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ServiceExPhoneCall) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ServiceExPhoneCall.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ServiceExPhoneCall) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ServiceExPhoneCall.Merge(m, src)
}
func (m *ServiceExPhoneCall) XXX_Size() int {
	return m.Size()
}
func (m *ServiceExPhoneCall) XXX_DiscardUnknown() {
	xxx_messageInfo_ServiceExPhoneCall.DiscardUnknown(m)
}

var xxx_messageInfo_ServiceExPhoneCall proto.InternalMessageInfo

func (m *ServiceExPhoneCall) GetDuration() int32 {
	if m != nil {
		return m.Duration
	}
	return 0
}

// Update about phone call rejected
type ServiceExPhoneRejected struct {
}

func (m *ServiceExPhoneRejected) Reset()      { *m = ServiceExPhoneRejected{} }
func (*ServiceExPhoneRejected) ProtoMessage() {}
func (*ServiceExPhoneRejected) Descriptor() ([]byte, []int) {
	return fileDescriptor_42a1718997f046ec, []int{42}
}
func (m *ServiceExPhoneRejected) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ServiceExPhoneRejected) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ServiceExPhoneRejected.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ServiceExPhoneRejected) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ServiceExPhoneRejected.Merge(m, src)
}
func (m *ServiceExPhoneRejected) XXX_Size() int {
	return m.Size()
}
func (m *ServiceExPhoneRejected) XXX_DiscardUnknown() {
	xxx_messageInfo_ServiceExPhoneRejected.DiscardUnknown(m)
}

var xxx_messageInfo_ServiceExPhoneRejected proto.InternalMessageInfo

// Message about chat archived
type ServiceExChatArchived struct {
}

func (m *ServiceExChatArchived) Reset()      { *m = ServiceExChatArchived{} }
func (*ServiceExChatArchived) ProtoMessage() {}
func (*ServiceExChatArchived) Descriptor() ([]byte, []int) {
	return fileDescriptor_42a1718997f046ec, []int{43}
}
func (m *ServiceExChatArchived) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ServiceExChatArchived) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ServiceExChatArchived.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ServiceExChatArchived) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ServiceExChatArchived.Merge(m, src)
}
func (m *ServiceExChatArchived) XXX_Size() int {
	return m.Size()
}
func (m *ServiceExChatArchived) XXX_DiscardUnknown() {
	xxx_messageInfo_ServiceExChatArchived.DiscardUnknown(m)
}

var xxx_messageInfo_ServiceExChatArchived proto.InternalMessageInfo

// Message about chat restored
type ServiceExChatRestored struct {
}

func (m *ServiceExChatRestored) Reset()      { *m = ServiceExChatRestored{} }
func (*ServiceExChatRestored) ProtoMessage() {}
func (*ServiceExChatRestored) Descriptor() ([]byte, []int) {
	return fileDescriptor_42a1718997f046ec, []int{44}
}
func (m *ServiceExChatRestored) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ServiceExChatRestored) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ServiceExChatRestored.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ServiceExChatRestored) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ServiceExChatRestored.Merge(m, src)
}
func (m *ServiceExChatRestored) XXX_Size() int {
	return m.Size()
}
func (m *ServiceExChatRestored) XXX_DiscardUnknown() {
	xxx_messageInfo_ServiceExChatRestored.DiscardUnknown(m)
}

var xxx_messageInfo_ServiceExChatRestored proto.InternalMessageInfo

// File message
type DocumentMessage struct {
	FileId     int64  `protobuf:"varint,1,opt,name=file_id,json=fileId,proto3" json:"file_id,omitempty"`
	AccessHash int64  `protobuf:"varint,2,opt,name=access_hash,json=accessHash,proto3" json:"access_hash,omitempty"`
	FileSize   int32  `protobuf:"varint,3,opt,name=file_size,json=fileSize,proto3" json:"file_size,omitempty"`
	Name       string `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	MimeType   string `protobuf:"bytes,5,opt,name=mime_type,json=mimeType,proto3" json:"mime_type,omitempty"`
	/// optional thumb of file. JPEG less that 90x90 with 60-70 quality.
	Thumb *FastThumb  `protobuf:"bytes,6,opt,name=thumb,proto3" json:"thumb,omitempty"`
	Ext   *DocumentEx `protobuf:"bytes,8,opt,name=ext,proto3" json:"ext,omitempty"`
}

func (m *DocumentMessage) Reset()      { *m = DocumentMessage{} }
func (*DocumentMessage) ProtoMessage() {}
func (*DocumentMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_42a1718997f046ec, []int{45}
}
func (m *DocumentMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DocumentMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DocumentMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DocumentMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DocumentMessage.Merge(m, src)
}
func (m *DocumentMessage) XXX_Size() int {
	return m.Size()
}
func (m *DocumentMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_DocumentMessage.DiscardUnknown(m)
}

var xxx_messageInfo_DocumentMessage proto.InternalMessageInfo

func (m *DocumentMessage) GetFileId() int64 {
	if m != nil {
		return m.FileId
	}
	return 0
}

func (m *DocumentMessage) GetAccessHash() int64 {
	if m != nil {
		return m.AccessHash
	}
	return 0
}

func (m *DocumentMessage) GetFileSize() int32 {
	if m != nil {
		return m.FileSize
	}
	return 0
}

func (m *DocumentMessage) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *DocumentMessage) GetMimeType() string {
	if m != nil {
		return m.MimeType
	}
	return ""
}

func (m *DocumentMessage) GetThumb() *FastThumb {
	if m != nil {
		return m.Thumb
	}
	return nil
}

func (m *DocumentMessage) GetExt() *DocumentEx {
	if m != nil {
		return m.Ext
	}
	return nil
}

type DocumentEx struct {
	// Types that are valid to be assigned to Body:
	//	*DocumentEx_Photo
	//	*DocumentEx_Video
	//	*DocumentEx_Voice
	Body isDocumentEx_Body `protobuf_oneof:"body"`
}

func (m *DocumentEx) Reset()      { *m = DocumentEx{} }
func (*DocumentEx) ProtoMessage() {}
func (*DocumentEx) Descriptor() ([]byte, []int) {
	return fileDescriptor_42a1718997f046ec, []int{46}
}
func (m *DocumentEx) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DocumentEx) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DocumentEx.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DocumentEx) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DocumentEx.Merge(m, src)
}
func (m *DocumentEx) XXX_Size() int {
	return m.Size()
}
func (m *DocumentEx) XXX_DiscardUnknown() {
	xxx_messageInfo_DocumentEx.DiscardUnknown(m)
}

var xxx_messageInfo_DocumentEx proto.InternalMessageInfo

type isDocumentEx_Body interface {
	isDocumentEx_Body()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type DocumentEx_Photo struct {
	Photo *DocumentExPhoto `protobuf:"bytes,1,opt,name=photo,proto3,oneof" json:"photo,omitempty"`
}
type DocumentEx_Video struct {
	Video *DocumentExVideo `protobuf:"bytes,2,opt,name=video,proto3,oneof" json:"video,omitempty"`
}
type DocumentEx_Voice struct {
	Voice *DocumentExVoice `protobuf:"bytes,3,opt,name=voice,proto3,oneof" json:"voice,omitempty"`
}

func (*DocumentEx_Photo) isDocumentEx_Body() {}
func (*DocumentEx_Video) isDocumentEx_Body() {}
func (*DocumentEx_Voice) isDocumentEx_Body() {}

func (m *DocumentEx) GetBody() isDocumentEx_Body {
	if m != nil {
		return m.Body
	}
	return nil
}

func (m *DocumentEx) GetPhoto() *DocumentExPhoto {
	if x, ok := m.GetBody().(*DocumentEx_Photo); ok {
		return x.Photo
	}
	return nil
}

func (m *DocumentEx) GetVideo() *DocumentExVideo {
	if x, ok := m.GetBody().(*DocumentEx_Video); ok {
		return x.Video
	}
	return nil
}

func (m *DocumentEx) GetVoice() *DocumentExVoice {
	if x, ok := m.GetBody().(*DocumentEx_Voice); ok {
		return x.Voice
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*DocumentEx) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*DocumentEx_Photo)(nil),
		(*DocumentEx_Video)(nil),
		(*DocumentEx_Voice)(nil),
	}
}

// File photo extension
type DocumentExPhoto struct {
	W int32 `protobuf:"varint,1,opt,name=w,proto3" json:"w,omitempty"`
	H int32 `protobuf:"varint,2,opt,name=h,proto3" json:"h,omitempty"`
}

func (m *DocumentExPhoto) Reset()      { *m = DocumentExPhoto{} }
func (*DocumentExPhoto) ProtoMessage() {}
func (*DocumentExPhoto) Descriptor() ([]byte, []int) {
	return fileDescriptor_42a1718997f046ec, []int{47}
}
func (m *DocumentExPhoto) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DocumentExPhoto) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DocumentExPhoto.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DocumentExPhoto) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DocumentExPhoto.Merge(m, src)
}
func (m *DocumentExPhoto) XXX_Size() int {
	return m.Size()
}
func (m *DocumentExPhoto) XXX_DiscardUnknown() {
	xxx_messageInfo_DocumentExPhoto.DiscardUnknown(m)
}

var xxx_messageInfo_DocumentExPhoto proto.InternalMessageInfo

func (m *DocumentExPhoto) GetW() int32 {
	if m != nil {
		return m.W
	}
	return 0
}

func (m *DocumentExPhoto) GetH() int32 {
	if m != nil {
		return m.H
	}
	return 0
}

// File video extension
type DocumentExVideo struct {
	W        int32 `protobuf:"varint,1,opt,name=w,proto3" json:"w,omitempty"`
	H        int32 `protobuf:"varint,2,opt,name=h,proto3" json:"h,omitempty"`
	Duration int32 `protobuf:"varint,3,opt,name=duration,proto3" json:"duration,omitempty"`
}

func (m *DocumentExVideo) Reset()      { *m = DocumentExVideo{} }
func (*DocumentExVideo) ProtoMessage() {}
func (*DocumentExVideo) Descriptor() ([]byte, []int) {
	return fileDescriptor_42a1718997f046ec, []int{48}
}
func (m *DocumentExVideo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DocumentExVideo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DocumentExVideo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DocumentExVideo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DocumentExVideo.Merge(m, src)
}
func (m *DocumentExVideo) XXX_Size() int {
	return m.Size()
}
func (m *DocumentExVideo) XXX_DiscardUnknown() {
	xxx_messageInfo_DocumentExVideo.DiscardUnknown(m)
}

var xxx_messageInfo_DocumentExVideo proto.InternalMessageInfo

func (m *DocumentExVideo) GetW() int32 {
	if m != nil {
		return m.W
	}
	return 0
}

func (m *DocumentExVideo) GetH() int32 {
	if m != nil {
		return m.H
	}
	return 0
}

func (m *DocumentExVideo) GetDuration() int32 {
	if m != nil {
		return m.Duration
	}
	return 0
}

// File voice extension
type DocumentExVoice struct {
	Duration int32 `protobuf:"varint,1,opt,name=duration,proto3" json:"duration,omitempty"`
}

func (m *DocumentExVoice) Reset()      { *m = DocumentExVoice{} }
func (*DocumentExVoice) ProtoMessage() {}
func (*DocumentExVoice) Descriptor() ([]byte, []int) {
	return fileDescriptor_42a1718997f046ec, []int{49}
}
func (m *DocumentExVoice) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DocumentExVoice) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DocumentExVoice.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DocumentExVoice) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DocumentExVoice.Merge(m, src)
}
func (m *DocumentExVoice) XXX_Size() int {
	return m.Size()
}
func (m *DocumentExVoice) XXX_DiscardUnknown() {
	xxx_messageInfo_DocumentExVoice.DiscardUnknown(m)
}

var xxx_messageInfo_DocumentExVoice proto.InternalMessageInfo

func (m *DocumentExVoice) GetDuration() int32 {
	if m != nil {
		return m.Duration
	}
	return 0
}

// Custom-data JsonMessage
type JsonMessage struct {
	RawJson string `protobuf:"bytes,1,opt,name=raw_json,json=rawJson,proto3" json:"raw_json,omitempty"`
}

func (m *JsonMessage) Reset()      { *m = JsonMessage{} }
func (*JsonMessage) ProtoMessage() {}
func (*JsonMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_42a1718997f046ec, []int{50}
}
func (m *JsonMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *JsonMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_JsonMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *JsonMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JsonMessage.Merge(m, src)
}
func (m *JsonMessage) XXX_Size() int {
	return m.Size()
}
func (m *JsonMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_JsonMessage.DiscardUnknown(m)
}

var xxx_messageInfo_JsonMessage proto.InternalMessageInfo

func (m *JsonMessage) GetRawJson() string {
	if m != nil {
		return m.RawJson
	}
	return ""
}

// Explicit type for unsupported message
type UnsupportedMessage struct {
}

func (m *UnsupportedMessage) Reset()      { *m = UnsupportedMessage{} }
func (*UnsupportedMessage) ProtoMessage() {}
func (*UnsupportedMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_42a1718997f046ec, []int{51}
}
func (m *UnsupportedMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UnsupportedMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UnsupportedMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UnsupportedMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UnsupportedMessage.Merge(m, src)
}
func (m *UnsupportedMessage) XXX_Size() int {
	return m.Size()
}
func (m *UnsupportedMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_UnsupportedMessage.DiscardUnknown(m)
}

var xxx_messageInfo_UnsupportedMessage proto.InternalMessageInfo

// Sticker message
type StickerMessage struct {
	/// Optional Unique ID of sticker
	StickerId *types.Int32Value `protobuf:"bytes,1,opt,name=sticker_id,json=stickerId,proto3" json:"sticker_id,omitempty"`
	/// Optional Fast preview of sticker in webp format
	FastPreview *types.BytesValue `protobuf:"bytes,2,opt,name=fast_preview,json=fastPreview,proto3" json:"fast_preview,omitempty"`
	/// Optional 512x512 sticker image in webp format
	Image_512 *ImageLocation `protobuf:"bytes,3,opt,name=image_512,json=image512,proto3" json:"image_512,omitempty"`
	/// Optional 256x256 sticker image in webp format
	Image_256 *ImageLocation `protobuf:"bytes,4,opt,name=image_256,json=image256,proto3" json:"image_256,omitempty"`
	/// Optional Collection ID
	StickerCollectionId *types.Int32Value `protobuf:"bytes,5,opt,name=sticker_collection_id,json=stickerCollectionId,proto3" json:"sticker_collection_id,omitempty"`
	/// Optional Collection Access Hash
	StickerCollectionAccessHash *types.Int64Value `protobuf:"bytes,6,opt,name=sticker_collection_access_hash,json=stickerCollectionAccessHash,proto3" json:"sticker_collection_access_hash,omitempty"`
	/// Sticker emoji
	Emoji *types.StringValue `protobuf:"bytes,7,opt,name=emoji,proto3" json:"emoji,omitempty"`
	/// Animated sticker json payload
	AnimatedStickerJson *types.StringValue `protobuf:"bytes,8,opt,name=animatedStickerJson,proto3" json:"animatedStickerJson,omitempty"`
}

func (m *StickerMessage) Reset()      { *m = StickerMessage{} }
func (*StickerMessage) ProtoMessage() {}
func (*StickerMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_42a1718997f046ec, []int{52}
}
func (m *StickerMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StickerMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StickerMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StickerMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StickerMessage.Merge(m, src)
}
func (m *StickerMessage) XXX_Size() int {
	return m.Size()
}
func (m *StickerMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_StickerMessage.DiscardUnknown(m)
}

var xxx_messageInfo_StickerMessage proto.InternalMessageInfo

func (m *StickerMessage) GetStickerId() *types.Int32Value {
	if m != nil {
		return m.StickerId
	}
	return nil
}

func (m *StickerMessage) GetFastPreview() *types.BytesValue {
	if m != nil {
		return m.FastPreview
	}
	return nil
}

func (m *StickerMessage) GetImage_512() *ImageLocation {
	if m != nil {
		return m.Image_512
	}
	return nil
}

func (m *StickerMessage) GetImage_256() *ImageLocation {
	if m != nil {
		return m.Image_256
	}
	return nil
}

func (m *StickerMessage) GetStickerCollectionId() *types.Int32Value {
	if m != nil {
		return m.StickerCollectionId
	}
	return nil
}

func (m *StickerMessage) GetStickerCollectionAccessHash() *types.Int64Value {
	if m != nil {
		return m.StickerCollectionAccessHash
	}
	return nil
}

func (m *StickerMessage) GetEmoji() *types.StringValue {
	if m != nil {
		return m.Emoji
	}
	return nil
}

func (m *StickerMessage) GetAnimatedStickerJson() *types.StringValue {
	if m != nil {
		return m.AnimatedStickerJson
	}
	return nil
}

// Binary Message. Useful for implementing your own content types
type BinaryMessage struct {
	ContentTag string `protobuf:"bytes,1,opt,name=content_tag,json=contentTag,proto3" json:"content_tag,omitempty"`
	Msg        []byte `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
}

func (m *BinaryMessage) Reset()      { *m = BinaryMessage{} }
func (*BinaryMessage) ProtoMessage() {}
func (*BinaryMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_42a1718997f046ec, []int{53}
}
func (m *BinaryMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BinaryMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BinaryMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BinaryMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BinaryMessage.Merge(m, src)
}
func (m *BinaryMessage) XXX_Size() int {
	return m.Size()
}
func (m *BinaryMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_BinaryMessage.DiscardUnknown(m)
}

var xxx_messageInfo_BinaryMessage proto.InternalMessageInfo

func (m *BinaryMessage) GetContentTag() string {
	if m != nil {
		return m.ContentTag
	}
	return ""
}

func (m *BinaryMessage) GetMsg() []byte {
	if m != nil {
		return m.Msg
	}
	return nil
}

// Empty Message
type EmptyMessage struct {
}

func (m *EmptyMessage) Reset()      { *m = EmptyMessage{} }
func (*EmptyMessage) ProtoMessage() {}
func (*EmptyMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_42a1718997f046ec, []int{54}
}
func (m *EmptyMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EmptyMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EmptyMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EmptyMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EmptyMessage.Merge(m, src)
}
func (m *EmptyMessage) XXX_Size() int {
	return m.Size()
}
func (m *EmptyMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_EmptyMessage.DiscardUnknown(m)
}

var xxx_messageInfo_EmptyMessage proto.InternalMessageInfo

// Deleted message
type DeletedMessage struct {
	/// Deleted locally message
	IsLocal *types.BoolValue `protobuf:"bytes,1,opt,name=is_local,json=isLocal,proto3" json:"is_local,omitempty"`
}

func (m *DeletedMessage) Reset()      { *m = DeletedMessage{} }
func (*DeletedMessage) ProtoMessage() {}
func (*DeletedMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_42a1718997f046ec, []int{55}
}
func (m *DeletedMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeletedMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeletedMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeletedMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeletedMessage.Merge(m, src)
}
func (m *DeletedMessage) XXX_Size() int {
	return m.Size()
}
func (m *DeletedMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_DeletedMessage.DiscardUnknown(m)
}

var xxx_messageInfo_DeletedMessage proto.InternalMessageInfo

func (m *DeletedMessage) GetIsLocal() *types.BoolValue {
	if m != nil {
		return m.IsLocal
	}
	return nil
}

// Short Dialog from grouped conversation list
type DialogShort struct {
	Peer    *Peer `protobuf:"bytes,1,opt,name=peer,proto3" json:"peer,omitempty"`
	Counter int32 `protobuf:"varint,2,opt,name=counter,proto3" json:"counter,omitempty"`
	Date    int64 `protobuf:"varint,4,opt,name=date,proto3" json:"date,omitempty"`
}

func (m *DialogShort) Reset()      { *m = DialogShort{} }
func (*DialogShort) ProtoMessage() {}
func (*DialogShort) Descriptor() ([]byte, []int) {
	return fileDescriptor_42a1718997f046ec, []int{56}
}
func (m *DialogShort) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DialogShort) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DialogShort.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DialogShort) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DialogShort.Merge(m, src)
}
func (m *DialogShort) XXX_Size() int {
	return m.Size()
}
func (m *DialogShort) XXX_DiscardUnknown() {
	xxx_messageInfo_DialogShort.DiscardUnknown(m)
}

var xxx_messageInfo_DialogShort proto.InternalMessageInfo

func (m *DialogShort) GetPeer() *Peer {
	if m != nil {
		return m.Peer
	}
	return nil
}

func (m *DialogShort) GetCounter() int32 {
	if m != nil {
		return m.Counter
	}
	return 0
}

func (m *DialogShort) GetDate() int64 {
	if m != nil {
		return m.Date
	}
	return 0
}

// Grouped dialog list
type DialogGroup struct {
	Title   string         `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	Key     string         `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
	Dialogs []*DialogShort `protobuf:"bytes,3,rep,name=dialogs,proto3" json:"dialogs,omitempty"`
}

func (m *DialogGroup) Reset()      { *m = DialogGroup{} }
func (*DialogGroup) ProtoMessage() {}
func (*DialogGroup) Descriptor() ([]byte, []int) {
	return fileDescriptor_42a1718997f046ec, []int{57}
}
func (m *DialogGroup) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DialogGroup) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DialogGroup.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DialogGroup) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DialogGroup.Merge(m, src)
}
func (m *DialogGroup) XXX_Size() int {
	return m.Size()
}
func (m *DialogGroup) XXX_DiscardUnknown() {
	xxx_messageInfo_DialogGroup.DiscardUnknown(m)
}

var xxx_messageInfo_DialogGroup proto.InternalMessageInfo

func (m *DialogGroup) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *DialogGroup) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *DialogGroup) GetDialogs() []*DialogShort {
	if m != nil {
		return m.Dialogs
	}
	return nil
}

// Reaction to message
type MessageReaction struct {
	Users []int32 `protobuf:"varint,1,rep,packed,name=users,proto3" json:"users,omitempty"`
	Code  string  `protobuf:"bytes,2,opt,name=code,proto3" json:"code,omitempty"`
}

func (m *MessageReaction) Reset()      { *m = MessageReaction{} }
func (*MessageReaction) ProtoMessage() {}
func (*MessageReaction) Descriptor() ([]byte, []int) {
	return fileDescriptor_42a1718997f046ec, []int{58}
}
func (m *MessageReaction) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MessageReaction) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MessageReaction.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MessageReaction) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MessageReaction.Merge(m, src)
}
func (m *MessageReaction) XXX_Size() int {
	return m.Size()
}
func (m *MessageReaction) XXX_DiscardUnknown() {
	xxx_messageInfo_MessageReaction.DiscardUnknown(m)
}

var xxx_messageInfo_MessageReaction proto.InternalMessageInfo

func (m *MessageReaction) GetUsers() []int32 {
	if m != nil {
		return m.Users
	}
	return nil
}

func (m *MessageReaction) GetCode() string {
	if m != nil {
		return m.Code
	}
	return ""
}

// Predicate for searching in custom profile
type SearchPredicate struct {
	Key    string   `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Values []string `protobuf:"bytes,2,rep,name=values,proto3" json:"values,omitempty"`
}

func (m *SearchPredicate) Reset()      { *m = SearchPredicate{} }
func (*SearchPredicate) ProtoMessage() {}
func (*SearchPredicate) Descriptor() ([]byte, []int) {
	return fileDescriptor_42a1718997f046ec, []int{59}
}
func (m *SearchPredicate) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SearchPredicate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SearchPredicate.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SearchPredicate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SearchPredicate.Merge(m, src)
}
func (m *SearchPredicate) XXX_Size() int {
	return m.Size()
}
func (m *SearchPredicate) XXX_DiscardUnknown() {
	xxx_messageInfo_SearchPredicate.DiscardUnknown(m)
}

var xxx_messageInfo_SearchPredicate proto.InternalMessageInfo

func (m *SearchPredicate) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *SearchPredicate) GetValues() []string {
	if m != nil {
		return m.Values
	}
	return nil
}

// Sending plain message
type RequestSendMessage struct {
	Peer            *OutPeer        `protobuf:"bytes,1,opt,name=peer,proto3" json:"peer,omitempty"`
	DeduplicationId int64           `protobuf:"varint,3,opt,name=deduplication_id,json=deduplicationId,proto3" json:"deduplication_id,omitempty"`
	Message         *MessageContent `protobuf:"bytes,4,opt,name=message,proto3" json:"message,omitempty"`
	/// if not empty, then message will be send to this user only
	IsOnlyForUser int32 `protobuf:"varint,5,opt,name=is_only_for_user,json=isOnlyForUser,proto3" json:"is_only_for_user,omitempty"`
	/// If current message forwards some other
	Forward *ReferencedMessages `protobuf:"bytes,8,opt,name=forward,proto3" json:"forward,omitempty"`
	/// If current message is a reply on some other
	Reply      *ReferencedMessages `protobuf:"bytes,9,opt,name=reply,proto3" json:"reply,omitempty"`
	Predicates []*SearchPredicate  `protobuf:"bytes,10,rep,name=predicates,proto3" json:"predicates,omitempty"`
	WhiteList  []int32             `protobuf:"varint,11,rep,packed,name=white_list,json=whiteList,proto3" json:"white_list,omitempty"`
	BlackList  []int32             `protobuf:"varint,12,rep,packed,name=black_list,json=blackList,proto3" json:"black_list,omitempty"`
}

func (m *RequestSendMessage) Reset()      { *m = RequestSendMessage{} }
func (*RequestSendMessage) ProtoMessage() {}
func (*RequestSendMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_42a1718997f046ec, []int{60}
}
func (m *RequestSendMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RequestSendMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RequestSendMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RequestSendMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RequestSendMessage.Merge(m, src)
}
func (m *RequestSendMessage) XXX_Size() int {
	return m.Size()
}
func (m *RequestSendMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_RequestSendMessage.DiscardUnknown(m)
}

var xxx_messageInfo_RequestSendMessage proto.InternalMessageInfo

func (m *RequestSendMessage) GetPeer() *OutPeer {
	if m != nil {
		return m.Peer
	}
	return nil
}

func (m *RequestSendMessage) GetDeduplicationId() int64 {
	if m != nil {
		return m.DeduplicationId
	}
	return 0
}

func (m *RequestSendMessage) GetMessage() *MessageContent {
	if m != nil {
		return m.Message
	}
	return nil
}

func (m *RequestSendMessage) GetIsOnlyForUser() int32 {
	if m != nil {
		return m.IsOnlyForUser
	}
	return 0
}

func (m *RequestSendMessage) GetForward() *ReferencedMessages {
	if m != nil {
		return m.Forward
	}
	return nil
}

func (m *RequestSendMessage) GetReply() *ReferencedMessages {
	if m != nil {
		return m.Reply
	}
	return nil
}

func (m *RequestSendMessage) GetPredicates() []*SearchPredicate {
	if m != nil {
		return m.Predicates
	}
	return nil
}

func (m *RequestSendMessage) GetWhiteList() []int32 {
	if m != nil {
		return m.WhiteList
	}
	return nil
}

func (m *RequestSendMessage) GetBlackList() []int32 {
	if m != nil {
		return m.BlackList
	}
	return nil
}

// Changing Message content
type RequestUpdateMessage struct {
	Mid            *UUIDValue      `protobuf:"bytes,2,opt,name=mid,proto3" json:"mid,omitempty"`
	UpdatedMessage *MessageContent `protobuf:"bytes,3,opt,name=updated_message,json=updatedMessage,proto3" json:"updated_message,omitempty"`
	/// Date from this message when it was changed last time
	LastEditedAt int64 `protobuf:"varint,4,opt,name=last_edited_at,json=lastEditedAt,proto3" json:"last_edited_at,omitempty"`
}

func (m *RequestUpdateMessage) Reset()      { *m = RequestUpdateMessage{} }
func (*RequestUpdateMessage) ProtoMessage() {}
func (*RequestUpdateMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_42a1718997f046ec, []int{61}
}
func (m *RequestUpdateMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RequestUpdateMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RequestUpdateMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RequestUpdateMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RequestUpdateMessage.Merge(m, src)
}
func (m *RequestUpdateMessage) XXX_Size() int {
	return m.Size()
}
func (m *RequestUpdateMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_RequestUpdateMessage.DiscardUnknown(m)
}

var xxx_messageInfo_RequestUpdateMessage proto.InternalMessageInfo

func (m *RequestUpdateMessage) GetMid() *UUIDValue {
	if m != nil {
		return m.Mid
	}
	return nil
}

func (m *RequestUpdateMessage) GetUpdatedMessage() *MessageContent {
	if m != nil {
		return m.UpdatedMessage
	}
	return nil
}

func (m *RequestUpdateMessage) GetLastEditedAt() int64 {
	if m != nil {
		return m.LastEditedAt
	}
	return 0
}

// Confirmation of plain message receive by device
type RequestMessageReceived struct {
	Peer *OutPeer `protobuf:"bytes,1,opt,name=peer,proto3" json:"peer,omitempty"`
	Date int64    `protobuf:"varint,3,opt,name=date,proto3" json:"date,omitempty"`
}

func (m *RequestMessageReceived) Reset()      { *m = RequestMessageReceived{} }
func (*RequestMessageReceived) ProtoMessage() {}
func (*RequestMessageReceived) Descriptor() ([]byte, []int) {
	return fileDescriptor_42a1718997f046ec, []int{62}
}
func (m *RequestMessageReceived) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RequestMessageReceived) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RequestMessageReceived.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RequestMessageReceived) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RequestMessageReceived.Merge(m, src)
}
func (m *RequestMessageReceived) XXX_Size() int {
	return m.Size()
}
func (m *RequestMessageReceived) XXX_DiscardUnknown() {
	xxx_messageInfo_RequestMessageReceived.DiscardUnknown(m)
}

var xxx_messageInfo_RequestMessageReceived proto.InternalMessageInfo

func (m *RequestMessageReceived) GetPeer() *OutPeer {
	if m != nil {
		return m.Peer
	}
	return nil
}

func (m *RequestMessageReceived) GetDate() int64 {
	if m != nil {
		return m.Date
	}
	return 0
}

// Marking plain messages as read
type RequestMessageRead struct {
	Peer *OutPeer `protobuf:"bytes,1,opt,name=peer,proto3" json:"peer,omitempty"`
	Date int64    `protobuf:"varint,3,opt,name=date,proto3" json:"date,omitempty"`
}

func (m *RequestMessageRead) Reset()      { *m = RequestMessageRead{} }
func (*RequestMessageRead) ProtoMessage() {}
func (*RequestMessageRead) Descriptor() ([]byte, []int) {
	return fileDescriptor_42a1718997f046ec, []int{63}
}
func (m *RequestMessageRead) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RequestMessageRead) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RequestMessageRead.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RequestMessageRead) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RequestMessageRead.Merge(m, src)
}
func (m *RequestMessageRead) XXX_Size() int {
	return m.Size()
}
func (m *RequestMessageRead) XXX_DiscardUnknown() {
	xxx_messageInfo_RequestMessageRead.DiscardUnknown(m)
}

var xxx_messageInfo_RequestMessageRead proto.InternalMessageInfo

func (m *RequestMessageRead) GetPeer() *OutPeer {
	if m != nil {
		return m.Peer
	}
	return nil
}

func (m *RequestMessageRead) GetDate() int64 {
	if m != nil {
		return m.Date
	}
	return 0
}

// Deleting messages
type RequestDeleteMessageObsolete struct {
	Mids []*UUIDValue `protobuf:"bytes,3,rep,name=mids,proto3" json:"mids,omitempty"`
}

func (m *RequestDeleteMessageObsolete) Reset()      { *m = RequestDeleteMessageObsolete{} }
func (*RequestDeleteMessageObsolete) ProtoMessage() {}
func (*RequestDeleteMessageObsolete) Descriptor() ([]byte, []int) {
	return fileDescriptor_42a1718997f046ec, []int{64}
}
func (m *RequestDeleteMessageObsolete) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RequestDeleteMessageObsolete) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RequestDeleteMessageObsolete.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RequestDeleteMessageObsolete) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RequestDeleteMessageObsolete.Merge(m, src)
}
func (m *RequestDeleteMessageObsolete) XXX_Size() int {
	return m.Size()
}
func (m *RequestDeleteMessageObsolete) XXX_DiscardUnknown() {
	xxx_messageInfo_RequestDeleteMessageObsolete.DiscardUnknown(m)
}

var xxx_messageInfo_RequestDeleteMessageObsolete proto.InternalMessageInfo

func (m *RequestDeleteMessageObsolete) GetMids() []*UUIDValue {
	if m != nil {
		return m.Mids
	}
	return nil
}

// Deleting message
type RequestDeleteMessage struct {
	Peer              *Peer      `protobuf:"bytes,1,opt,name=peer,proto3" json:"peer,omitempty"`
	MessageId         *UUIDValue `protobuf:"bytes,2,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"`
	DeleteForUserOnly bool       `protobuf:"varint,3,opt,name=delete_for_user_only,json=deleteForUserOnly,proto3" json:"delete_for_user_only,omitempty"`
}

func (m *RequestDeleteMessage) Reset()      { *m = RequestDeleteMessage{} }
func (*RequestDeleteMessage) ProtoMessage() {}
func (*RequestDeleteMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_42a1718997f046ec, []int{65}
}
func (m *RequestDeleteMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RequestDeleteMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RequestDeleteMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RequestDeleteMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RequestDeleteMessage.Merge(m, src)
}
func (m *RequestDeleteMessage) XXX_Size() int {
	return m.Size()
}
func (m *RequestDeleteMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_RequestDeleteMessage.DiscardUnknown(m)
}

var xxx_messageInfo_RequestDeleteMessage proto.InternalMessageInfo

func (m *RequestDeleteMessage) GetPeer() *Peer {
	if m != nil {
		return m.Peer
	}
	return nil
}

func (m *RequestDeleteMessage) GetMessageId() *UUIDValue {
	if m != nil {
		return m.MessageId
	}
	return nil
}

func (m *RequestDeleteMessage) GetDeleteForUserOnly() bool {
	if m != nil {
		return m.DeleteForUserOnly
	}
	return false
}

// Clearing of conversation (without removing dialog from dialogs list)
type RequestClearChat struct {
	Peer            *OutPeer `protobuf:"bytes,1,opt,name=peer,proto3" json:"peer,omitempty"`
	LastMessageDate int64    `protobuf:"varint,2,opt,name=last_message_date,json=lastMessageDate,proto3" json:"last_message_date,omitempty"`
}

func (m *RequestClearChat) Reset()      { *m = RequestClearChat{} }
func (*RequestClearChat) ProtoMessage() {}
func (*RequestClearChat) Descriptor() ([]byte, []int) {
	return fileDescriptor_42a1718997f046ec, []int{66}
}
func (m *RequestClearChat) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RequestClearChat) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RequestClearChat.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RequestClearChat) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RequestClearChat.Merge(m, src)
}
func (m *RequestClearChat) XXX_Size() int {
	return m.Size()
}
func (m *RequestClearChat) XXX_DiscardUnknown() {
	xxx_messageInfo_RequestClearChat.DiscardUnknown(m)
}

var xxx_messageInfo_RequestClearChat proto.InternalMessageInfo

func (m *RequestClearChat) GetPeer() *OutPeer {
	if m != nil {
		return m.Peer
	}
	return nil
}

func (m *RequestClearChat) GetLastMessageDate() int64 {
	if m != nil {
		return m.LastMessageDate
	}
	return 0
}

// Deleting of conversation (also leave group for group conversations)
type RequestDeleteChat struct {
	Peer            *OutPeer `protobuf:"bytes,1,opt,name=peer,proto3" json:"peer,omitempty"`
	LastMessageDate int64    `protobuf:"varint,2,opt,name=last_message_date,json=lastMessageDate,proto3" json:"last_message_date,omitempty"`
}

func (m *RequestDeleteChat) Reset()      { *m = RequestDeleteChat{} }
func (*RequestDeleteChat) ProtoMessage() {}
func (*RequestDeleteChat) Descriptor() ([]byte, []int) {
	return fileDescriptor_42a1718997f046ec, []int{67}
}
func (m *RequestDeleteChat) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RequestDeleteChat) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RequestDeleteChat.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RequestDeleteChat) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RequestDeleteChat.Merge(m, src)
}
func (m *RequestDeleteChat) XXX_Size() int {
	return m.Size()
}
func (m *RequestDeleteChat) XXX_DiscardUnknown() {
	xxx_messageInfo_RequestDeleteChat.DiscardUnknown(m)
}

var xxx_messageInfo_RequestDeleteChat proto.InternalMessageInfo

func (m *RequestDeleteChat) GetPeer() *OutPeer {
	if m != nil {
		return m.Peer
	}
	return nil
}

func (m *RequestDeleteChat) GetLastMessageDate() int64 {
	if m != nil {
		return m.LastMessageDate
	}
	return 0
}

// Archiving chat
type RequestArchiveChat struct {
	Peer *OutPeer `protobuf:"bytes,1,opt,name=peer,proto3" json:"peer,omitempty"`
}

func (m *RequestArchiveChat) Reset()      { *m = RequestArchiveChat{} }
func (*RequestArchiveChat) ProtoMessage() {}
func (*RequestArchiveChat) Descriptor() ([]byte, []int) {
	return fileDescriptor_42a1718997f046ec, []int{68}
}
func (m *RequestArchiveChat) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RequestArchiveChat) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RequestArchiveChat.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RequestArchiveChat) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RequestArchiveChat.Merge(m, src)
}
func (m *RequestArchiveChat) XXX_Size() int {
	return m.Size()
}
func (m *RequestArchiveChat) XXX_DiscardUnknown() {
	xxx_messageInfo_RequestArchiveChat.DiscardUnknown(m)
}

var xxx_messageInfo_RequestArchiveChat proto.InternalMessageInfo

func (m *RequestArchiveChat) GetPeer() *OutPeer {
	if m != nil {
		return m.Peer
	}
	return nil
}

// Setting Message reaction
type RequestMessageSetReaction struct {
	Peer *OutPeer   `protobuf:"bytes,1,opt,name=peer,proto3" json:"peer,omitempty"`
	Mid  *UUIDValue `protobuf:"bytes,4,opt,name=mid,proto3" json:"mid,omitempty"`
	Code string     `protobuf:"bytes,3,opt,name=code,proto3" json:"code,omitempty"`
}

func (m *RequestMessageSetReaction) Reset()      { *m = RequestMessageSetReaction{} }
func (*RequestMessageSetReaction) ProtoMessage() {}
func (*RequestMessageSetReaction) Descriptor() ([]byte, []int) {
	return fileDescriptor_42a1718997f046ec, []int{69}
}
func (m *RequestMessageSetReaction) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RequestMessageSetReaction) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RequestMessageSetReaction.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RequestMessageSetReaction) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RequestMessageSetReaction.Merge(m, src)
}
func (m *RequestMessageSetReaction) XXX_Size() int {
	return m.Size()
}
func (m *RequestMessageSetReaction) XXX_DiscardUnknown() {
	xxx_messageInfo_RequestMessageSetReaction.DiscardUnknown(m)
}

var xxx_messageInfo_RequestMessageSetReaction proto.InternalMessageInfo

func (m *RequestMessageSetReaction) GetPeer() *OutPeer {
	if m != nil {
		return m.Peer
	}
	return nil
}

func (m *RequestMessageSetReaction) GetMid() *UUIDValue {
	if m != nil {
		return m.Mid
	}
	return nil
}

func (m *RequestMessageSetReaction) GetCode() string {
	if m != nil {
		return m.Code
	}
	return ""
}

// Removing Message reaction
type RequestMessageRemoveReaction struct {
	Peer *OutPeer   `protobuf:"bytes,1,opt,name=peer,proto3" json:"peer,omitempty"`
	Mid  *UUIDValue `protobuf:"bytes,4,opt,name=mid,proto3" json:"mid,omitempty"`
	Code string     `protobuf:"bytes,3,opt,name=code,proto3" json:"code,omitempty"`
}

func (m *RequestMessageRemoveReaction) Reset()      { *m = RequestMessageRemoveReaction{} }
func (*RequestMessageRemoveReaction) ProtoMessage() {}
func (*RequestMessageRemoveReaction) Descriptor() ([]byte, []int) {
	return fileDescriptor_42a1718997f046ec, []int{70}
}
func (m *RequestMessageRemoveReaction) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RequestMessageRemoveReaction) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RequestMessageRemoveReaction.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RequestMessageRemoveReaction) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RequestMessageRemoveReaction.Merge(m, src)
}
func (m *RequestMessageRemoveReaction) XXX_Size() int {
	return m.Size()
}
func (m *RequestMessageRemoveReaction) XXX_DiscardUnknown() {
	xxx_messageInfo_RequestMessageRemoveReaction.DiscardUnknown(m)
}

var xxx_messageInfo_RequestMessageRemoveReaction proto.InternalMessageInfo

func (m *RequestMessageRemoveReaction) GetPeer() *OutPeer {
	if m != nil {
		return m.Peer
	}
	return nil
}

func (m *RequestMessageRemoveReaction) GetMid() *UUIDValue {
	if m != nil {
		return m.Mid
	}
	return nil
}

func (m *RequestMessageRemoveReaction) GetCode() string {
	if m != nil {
		return m.Code
	}
	return ""
}

// Response for reactions change
type ResponseReactionsResponse struct {
	Seq       int32              `protobuf:"varint,1,opt,name=seq,proto3" json:"seq,omitempty"`
	State     []byte             `protobuf:"bytes,2,opt,name=state,proto3" json:"state,omitempty"`
	Reactions []*MessageReaction `protobuf:"bytes,3,rep,name=reactions,proto3" json:"reactions,omitempty"`
}

func (m *ResponseReactionsResponse) Reset()      { *m = ResponseReactionsResponse{} }
func (*ResponseReactionsResponse) ProtoMessage() {}
func (*ResponseReactionsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_42a1718997f046ec, []int{71}
}
func (m *ResponseReactionsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ResponseReactionsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ResponseReactionsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ResponseReactionsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResponseReactionsResponse.Merge(m, src)
}
func (m *ResponseReactionsResponse) XXX_Size() int {
	return m.Size()
}
func (m *ResponseReactionsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ResponseReactionsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ResponseReactionsResponse proto.InternalMessageInfo

func (m *ResponseReactionsResponse) GetSeq() int32 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *ResponseReactionsResponse) GetState() []byte {
	if m != nil {
		return m.State
	}
	return nil
}

func (m *ResponseReactionsResponse) GetReactions() []*MessageReaction {
	if m != nil {
		return m.Reactions
	}
	return nil
}

type ResponseSendMessage struct {
	MessageId         *UUIDValue `protobuf:"bytes,1,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"`
	MessageDate       int64      `protobuf:"varint,2,opt,name=message_date,json=messageDate,proto3" json:"message_date,omitempty"`
	PreviousMessageId *UUIDValue `protobuf:"bytes,3,opt,name=previous_message_id,json=previousMessageId,proto3" json:"previous_message_id,omitempty"`
	CreatorUserId     int64      `protobuf:"varint,4,opt,name=creator_user_id,json=creatorUserId,proto3" json:"creator_user_id,omitempty"`
	Clock             int64      `protobuf:"varint,5,opt,name=clock,proto3" json:"clock,omitempty"`
}

func (m *ResponseSendMessage) Reset()      { *m = ResponseSendMessage{} }
func (*ResponseSendMessage) ProtoMessage() {}
func (*ResponseSendMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_42a1718997f046ec, []int{72}
}
func (m *ResponseSendMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ResponseSendMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ResponseSendMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ResponseSendMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResponseSendMessage.Merge(m, src)
}
func (m *ResponseSendMessage) XXX_Size() int {
	return m.Size()
}
func (m *ResponseSendMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_ResponseSendMessage.DiscardUnknown(m)
}

var xxx_messageInfo_ResponseSendMessage proto.InternalMessageInfo

func (m *ResponseSendMessage) GetMessageId() *UUIDValue {
	if m != nil {
		return m.MessageId
	}
	return nil
}

func (m *ResponseSendMessage) GetMessageDate() int64 {
	if m != nil {
		return m.MessageDate
	}
	return 0
}

func (m *ResponseSendMessage) GetPreviousMessageId() *UUIDValue {
	if m != nil {
		return m.PreviousMessageId
	}
	return nil
}

func (m *ResponseSendMessage) GetCreatorUserId() int64 {
	if m != nil {
		return m.CreatorUserId
	}
	return 0
}

func (m *ResponseSendMessage) GetClock() int64 {
	if m != nil {
		return m.Clock
	}
	return 0
}

// Update about plain message
type UpdateMessage struct {
	Peer      *Peer           `protobuf:"bytes,1,opt,name=peer,proto3" json:"peer,omitempty"`
	SenderUid int32           `protobuf:"varint,2,opt,name=sender_uid,json=senderUid,proto3" json:"sender_uid,omitempty"`
	Date      int64           `protobuf:"varint,3,opt,name=date,proto3" json:"date,omitempty"`
	Mid       *UUIDValue      `protobuf:"bytes,8,opt,name=mid,proto3" json:"mid,omitempty"`
	Message   *MessageContent `protobuf:"bytes,5,opt,name=message,proto3" json:"message,omitempty"`
	/// attributes to help reasoning about message
	Attributes *MessageAttributes `protobuf:"bytes,6,opt,name=attributes,proto3" json:"attributes,omitempty"`
	// Types that are valid to be assigned to Attach:
	//	*UpdateMessage_Forward
	//	*UpdateMessage_Reply
	Attach isUpdateMessage_Attach `protobuf_oneof:"attach"`
	/// Message id of previos message from current conversation
	PreviousMid     *UUIDValue        `protobuf:"bytes,11,opt,name=previous_mid,json=previousMid,proto3" json:"previous_mid,omitempty"`
	PrevMessageDate *types.Int64Value `protobuf:"bytes,15,opt,name=prev_message_date,json=prevMessageDate,proto3" json:"prev_message_date,omitempty"`
	/// counter of the unread messages
	Counter *types.Int32Value `protobuf:"bytes,12,opt,name=counter,proto3" json:"counter,omitempty"`
	/// date of my own read
	MyReadDate *types.Int64Value `protobuf:"bytes,13,opt,name=my_read_date,json=myReadDate,proto3" json:"my_read_date,omitempty"`
	RandomId   int64             `protobuf:"varint,14,opt,name=random_id,json=randomId,proto3" json:"random_id,omitempty"`
	// when greater than date, then message is edited
	ModifiedAt int64 `protobuf:"varint,16,opt,name=modified_at,json=modifiedAt,proto3" json:"modified_at,omitempty"`
	// make sense for edited message only (modified_at > date)
	PrevEditInPeerAt *types.Int64Value `protobuf:"bytes,17,opt,name=prev_edit_in_peer_at,json=prevEditInPeerAt,proto3" json:"prev_edit_in_peer_at,omitempty"`
}

func (m *UpdateMessage) Reset()      { *m = UpdateMessage{} }
func (*UpdateMessage) ProtoMessage() {}
func (*UpdateMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_42a1718997f046ec, []int{73}
}
func (m *UpdateMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateMessage.Merge(m, src)
}
func (m *UpdateMessage) XXX_Size() int {
	return m.Size()
}
func (m *UpdateMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateMessage.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateMessage proto.InternalMessageInfo

type isUpdateMessage_Attach interface {
	isUpdateMessage_Attach()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type UpdateMessage_Forward struct {
	Forward *ReferencedMessages `protobuf:"bytes,9,opt,name=forward,proto3,oneof" json:"forward,omitempty"`
}
type UpdateMessage_Reply struct {
	Reply *ReferencedMessages `protobuf:"bytes,10,opt,name=reply,proto3,oneof" json:"reply,omitempty"`
}

func (*UpdateMessage_Forward) isUpdateMessage_Attach() {}
func (*UpdateMessage_Reply) isUpdateMessage_Attach()   {}

func (m *UpdateMessage) GetAttach() isUpdateMessage_Attach {
	if m != nil {
		return m.Attach
	}
	return nil
}

func (m *UpdateMessage) GetPeer() *Peer {
	if m != nil {
		return m.Peer
	}
	return nil
}

func (m *UpdateMessage) GetSenderUid() int32 {
	if m != nil {
		return m.SenderUid
	}
	return 0
}

func (m *UpdateMessage) GetDate() int64 {
	if m != nil {
		return m.Date
	}
	return 0
}

func (m *UpdateMessage) GetMid() *UUIDValue {
	if m != nil {
		return m.Mid
	}
	return nil
}

func (m *UpdateMessage) GetMessage() *MessageContent {
	if m != nil {
		return m.Message
	}
	return nil
}

func (m *UpdateMessage) GetAttributes() *MessageAttributes {
	if m != nil {
		return m.Attributes
	}
	return nil
}

func (m *UpdateMessage) GetForward() *ReferencedMessages {
	if x, ok := m.GetAttach().(*UpdateMessage_Forward); ok {
		return x.Forward
	}
	return nil
}

func (m *UpdateMessage) GetReply() *ReferencedMessages {
	if x, ok := m.GetAttach().(*UpdateMessage_Reply); ok {
		return x.Reply
	}
	return nil
}

func (m *UpdateMessage) GetPreviousMid() *UUIDValue {
	if m != nil {
		return m.PreviousMid
	}
	return nil
}

func (m *UpdateMessage) GetPrevMessageDate() *types.Int64Value {
	if m != nil {
		return m.PrevMessageDate
	}
	return nil
}

func (m *UpdateMessage) GetCounter() *types.Int32Value {
	if m != nil {
		return m.Counter
	}
	return nil
}

func (m *UpdateMessage) GetMyReadDate() *types.Int64Value {
	if m != nil {
		return m.MyReadDate
	}
	return nil
}

func (m *UpdateMessage) GetRandomId() int64 {
	if m != nil {
		return m.RandomId
	}
	return 0
}

func (m *UpdateMessage) GetModifiedAt() int64 {
	if m != nil {
		return m.ModifiedAt
	}
	return 0
}

func (m *UpdateMessage) GetPrevEditInPeerAt() *types.Int64Value {
	if m != nil {
		return m.PrevEditInPeerAt
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*UpdateMessage) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*UpdateMessage_Forward)(nil),
		(*UpdateMessage_Reply)(nil),
	}
}

// Update about message change
type UpdateMessageContentChanged struct {
	Peer             *Peer           `protobuf:"bytes,1,opt,name=peer,proto3" json:"peer,omitempty"`
	Mid              *UUIDValue      `protobuf:"bytes,4,opt,name=mid,proto3" json:"mid,omitempty"`
	Message          *MessageContent `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
	EditedAt         int64           `protobuf:"varint,5,opt,name=edited_at,json=editedAt,proto3" json:"edited_at,omitempty"`
	PrevEditInPeerAt int64           `protobuf:"varint,6,opt,name=prev_edit_in_peer_at,json=prevEditInPeerAt,proto3" json:"prev_edit_in_peer_at,omitempty"`
}

func (m *UpdateMessageContentChanged) Reset()      { *m = UpdateMessageContentChanged{} }
func (*UpdateMessageContentChanged) ProtoMessage() {}
func (*UpdateMessageContentChanged) Descriptor() ([]byte, []int) {
	return fileDescriptor_42a1718997f046ec, []int{74}
}
func (m *UpdateMessageContentChanged) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateMessageContentChanged) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateMessageContentChanged.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateMessageContentChanged) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateMessageContentChanged.Merge(m, src)
}
func (m *UpdateMessageContentChanged) XXX_Size() int {
	return m.Size()
}
func (m *UpdateMessageContentChanged) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateMessageContentChanged.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateMessageContentChanged proto.InternalMessageInfo

func (m *UpdateMessageContentChanged) GetPeer() *Peer {
	if m != nil {
		return m.Peer
	}
	return nil
}

func (m *UpdateMessageContentChanged) GetMid() *UUIDValue {
	if m != nil {
		return m.Mid
	}
	return nil
}

func (m *UpdateMessageContentChanged) GetMessage() *MessageContent {
	if m != nil {
		return m.Message
	}
	return nil
}

func (m *UpdateMessageContentChanged) GetEditedAt() int64 {
	if m != nil {
		return m.EditedAt
	}
	return 0
}

func (m *UpdateMessageContentChanged) GetPrevEditInPeerAt() int64 {
	if m != nil {
		return m.PrevEditInPeerAt
	}
	return 0
}

// Update about message sent
type UpdateMessageSent struct {
	Peer *Peer `protobuf:"bytes,1,opt,name=peer,proto3" json:"peer,omitempty"`
	Rid  int64 `protobuf:"varint,2,opt,name=rid,proto3" json:"rid,omitempty"`
	Date int64 `protobuf:"varint,3,opt,name=date,proto3" json:"date,omitempty"`
	/// Message id
	Mid *UUIDValue `protobuf:"bytes,4,opt,name=mid,proto3" json:"mid,omitempty"`
	/// Previous message id in current conversation
	PrevMid *UUIDValue `protobuf:"bytes,5,opt,name=prev_mid,json=prevMid,proto3" json:"prev_mid,omitempty"`
	/// counter of unread messages
	UnreadCounter *types.Int32Value `protobuf:"bytes,6,opt,name=unread_counter,json=unreadCounter,proto3" json:"unread_counter,omitempty"`
	MyReadDate    *types.Int64Value `protobuf:"bytes,7,opt,name=myReadDate,proto3" json:"myReadDate,omitempty"`
	// Types that are valid to be assigned to Attach:
	//	*UpdateMessageSent_Forward
	//	*UpdateMessageSent_Reply
	Attach isUpdateMessageSent_Attach `protobuf_oneof:"attach"`
}

func (m *UpdateMessageSent) Reset()      { *m = UpdateMessageSent{} }
func (*UpdateMessageSent) ProtoMessage() {}
func (*UpdateMessageSent) Descriptor() ([]byte, []int) {
	return fileDescriptor_42a1718997f046ec, []int{75}
}
func (m *UpdateMessageSent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateMessageSent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateMessageSent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateMessageSent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateMessageSent.Merge(m, src)
}
func (m *UpdateMessageSent) XXX_Size() int {
	return m.Size()
}
func (m *UpdateMessageSent) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateMessageSent.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateMessageSent proto.InternalMessageInfo

type isUpdateMessageSent_Attach interface {
	isUpdateMessageSent_Attach()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type UpdateMessageSent_Forward struct {
	Forward *ReferencedMessages `protobuf:"bytes,8,opt,name=forward,proto3,oneof" json:"forward,omitempty"`
}
type UpdateMessageSent_Reply struct {
	Reply *ReferencedMessages `protobuf:"bytes,9,opt,name=reply,proto3,oneof" json:"reply,omitempty"`
}

func (*UpdateMessageSent_Forward) isUpdateMessageSent_Attach() {}
func (*UpdateMessageSent_Reply) isUpdateMessageSent_Attach()   {}

func (m *UpdateMessageSent) GetAttach() isUpdateMessageSent_Attach {
	if m != nil {
		return m.Attach
	}
	return nil
}

func (m *UpdateMessageSent) GetPeer() *Peer {
	if m != nil {
		return m.Peer
	}
	return nil
}

func (m *UpdateMessageSent) GetRid() int64 {
	if m != nil {
		return m.Rid
	}
	return 0
}

func (m *UpdateMessageSent) GetDate() int64 {
	if m != nil {
		return m.Date
	}
	return 0
}

func (m *UpdateMessageSent) GetMid() *UUIDValue {
	if m != nil {
		return m.Mid
	}
	return nil
}

func (m *UpdateMessageSent) GetPrevMid() *UUIDValue {
	if m != nil {
		return m.PrevMid
	}
	return nil
}

func (m *UpdateMessageSent) GetUnreadCounter() *types.Int32Value {
	if m != nil {
		return m.UnreadCounter
	}
	return nil
}

func (m *UpdateMessageSent) GetMyReadDate() *types.Int64Value {
	if m != nil {
		return m.MyReadDate
	}
	return nil
}

func (m *UpdateMessageSent) GetForward() *ReferencedMessages {
	if x, ok := m.GetAttach().(*UpdateMessageSent_Forward); ok {
		return x.Forward
	}
	return nil
}

func (m *UpdateMessageSent) GetReply() *ReferencedMessages {
	if x, ok := m.GetAttach().(*UpdateMessageSent_Reply); ok {
		return x.Reply
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*UpdateMessageSent) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*UpdateMessageSent_Forward)(nil),
		(*UpdateMessageSent_Reply)(nil),
	}
}

// Update about message received
type UpdateMessageReceived struct {
	Peer *Peer `protobuf:"bytes,1,opt,name=peer,proto3" json:"peer,omitempty"`
	/// when message was receive
	StartDate    int64 `protobuf:"varint,2,opt,name=start_date,json=startDate,proto3" json:"start_date,omitempty"`
	ReceivedDate int64 `protobuf:"varint,3,opt,name=received_date,json=receivedDate,proto3" json:"received_date,omitempty"`
}

func (m *UpdateMessageReceived) Reset()      { *m = UpdateMessageReceived{} }
func (*UpdateMessageReceived) ProtoMessage() {}
func (*UpdateMessageReceived) Descriptor() ([]byte, []int) {
	return fileDescriptor_42a1718997f046ec, []int{76}
}
func (m *UpdateMessageReceived) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateMessageReceived) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateMessageReceived.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateMessageReceived) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateMessageReceived.Merge(m, src)
}
func (m *UpdateMessageReceived) XXX_Size() int {
	return m.Size()
}
func (m *UpdateMessageReceived) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateMessageReceived.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateMessageReceived proto.InternalMessageInfo

func (m *UpdateMessageReceived) GetPeer() *Peer {
	if m != nil {
		return m.Peer
	}
	return nil
}

func (m *UpdateMessageReceived) GetStartDate() int64 {
	if m != nil {
		return m.StartDate
	}
	return 0
}

func (m *UpdateMessageReceived) GetReceivedDate() int64 {
	if m != nil {
		return m.ReceivedDate
	}
	return 0
}

// Update about message read
type UpdateMessageRead struct {
	Peer *Peer `protobuf:"bytes,1,opt,name=peer,proto3" json:"peer,omitempty"`
	/// when message was read
	StartDate int64 `protobuf:"varint,2,opt,name=start_date,json=startDate,proto3" json:"start_date,omitempty"`
	ReadDate  int64 `protobuf:"varint,3,opt,name=read_date,json=readDate,proto3" json:"read_date,omitempty"`
}

func (m *UpdateMessageRead) Reset()      { *m = UpdateMessageRead{} }
func (*UpdateMessageRead) ProtoMessage() {}
func (*UpdateMessageRead) Descriptor() ([]byte, []int) {
	return fileDescriptor_42a1718997f046ec, []int{77}
}
func (m *UpdateMessageRead) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateMessageRead) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateMessageRead.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateMessageRead) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateMessageRead.Merge(m, src)
}
func (m *UpdateMessageRead) XXX_Size() int {
	return m.Size()
}
func (m *UpdateMessageRead) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateMessageRead.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateMessageRead proto.InternalMessageInfo

func (m *UpdateMessageRead) GetPeer() *Peer {
	if m != nil {
		return m.Peer
	}
	return nil
}

func (m *UpdateMessageRead) GetStartDate() int64 {
	if m != nil {
		return m.StartDate
	}
	return 0
}

func (m *UpdateMessageRead) GetReadDate() int64 {
	if m != nil {
		return m.ReadDate
	}
	return 0
}

// Update about message read by me
type UpdateMessageReadByMe struct {
	Peer *Peer `protobuf:"bytes,1,opt,name=peer,proto3" json:"peer,omitempty"`
	/// when message was read
	StartDate int64 `protobuf:"varint,2,opt,name=start_date,json=startDate,proto3" json:"start_date,omitempty"`
	/// counter of unread messages
	UnreadCounter *types.Int32Value `protobuf:"bytes,3,opt,name=unread_counter,json=unreadCounter,proto3" json:"unread_counter,omitempty"`
}

func (m *UpdateMessageReadByMe) Reset()      { *m = UpdateMessageReadByMe{} }
func (*UpdateMessageReadByMe) ProtoMessage() {}
func (*UpdateMessageReadByMe) Descriptor() ([]byte, []int) {
	return fileDescriptor_42a1718997f046ec, []int{78}
}
func (m *UpdateMessageReadByMe) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateMessageReadByMe) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateMessageReadByMe.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateMessageReadByMe) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateMessageReadByMe.Merge(m, src)
}
func (m *UpdateMessageReadByMe) XXX_Size() int {
	return m.Size()
}
func (m *UpdateMessageReadByMe) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateMessageReadByMe.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateMessageReadByMe proto.InternalMessageInfo

func (m *UpdateMessageReadByMe) GetPeer() *Peer {
	if m != nil {
		return m.Peer
	}
	return nil
}

func (m *UpdateMessageReadByMe) GetStartDate() int64 {
	if m != nil {
		return m.StartDate
	}
	return 0
}

func (m *UpdateMessageReadByMe) GetUnreadCounter() *types.Int32Value {
	if m != nil {
		return m.UnreadCounter
	}
	return nil
}

// Update about message delete
type UpdateMessageDelete struct {
	Peer *Peer        `protobuf:"bytes,1,opt,name=peer,proto3" json:"peer,omitempty"`
	Mids []*UUIDValue `protobuf:"bytes,3,rep,name=mids,proto3" json:"mids,omitempty"`
	/// counter of unread messages
	Counter *types.Int32Value `protobuf:"bytes,4,opt,name=counter,proto3" json:"counter,omitempty"`
	/// date? related for this unread counter
	ActionDate int64 `protobuf:"varint,5,opt,name=action_date,json=actionDate,proto3" json:"action_date,omitempty"`
}

func (m *UpdateMessageDelete) Reset()      { *m = UpdateMessageDelete{} }
func (*UpdateMessageDelete) ProtoMessage() {}
func (*UpdateMessageDelete) Descriptor() ([]byte, []int) {
	return fileDescriptor_42a1718997f046ec, []int{79}
}
func (m *UpdateMessageDelete) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateMessageDelete) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateMessageDelete.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateMessageDelete) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateMessageDelete.Merge(m, src)
}
func (m *UpdateMessageDelete) XXX_Size() int {
	return m.Size()
}
func (m *UpdateMessageDelete) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateMessageDelete.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateMessageDelete proto.InternalMessageInfo

func (m *UpdateMessageDelete) GetPeer() *Peer {
	if m != nil {
		return m.Peer
	}
	return nil
}

func (m *UpdateMessageDelete) GetMids() []*UUIDValue {
	if m != nil {
		return m.Mids
	}
	return nil
}

func (m *UpdateMessageDelete) GetCounter() *types.Int32Value {
	if m != nil {
		return m.Counter
	}
	return nil
}

func (m *UpdateMessageDelete) GetActionDate() int64 {
	if m != nil {
		return m.ActionDate
	}
	return 0
}

// Update about chat clear
type UpdateChatClear struct {
	Peer       *Peer `protobuf:"bytes,1,opt,name=peer,proto3" json:"peer,omitempty"`
	ActionDate int64 `protobuf:"varint,2,opt,name=action_date,json=actionDate,proto3" json:"action_date,omitempty"`
}

func (m *UpdateChatClear) Reset()      { *m = UpdateChatClear{} }
func (*UpdateChatClear) ProtoMessage() {}
func (*UpdateChatClear) Descriptor() ([]byte, []int) {
	return fileDescriptor_42a1718997f046ec, []int{80}
}
func (m *UpdateChatClear) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateChatClear) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateChatClear.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateChatClear) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateChatClear.Merge(m, src)
}
func (m *UpdateChatClear) XXX_Size() int {
	return m.Size()
}
func (m *UpdateChatClear) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateChatClear.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateChatClear proto.InternalMessageInfo

func (m *UpdateChatClear) GetPeer() *Peer {
	if m != nil {
		return m.Peer
	}
	return nil
}

func (m *UpdateChatClear) GetActionDate() int64 {
	if m != nil {
		return m.ActionDate
	}
	return 0
}

// Update about chat delete
type UpdateChatDelete struct {
	Peer       *Peer `protobuf:"bytes,1,opt,name=peer,proto3" json:"peer,omitempty"`
	ActionDate int64 `protobuf:"varint,2,opt,name=action_date,json=actionDate,proto3" json:"action_date,omitempty"`
}

func (m *UpdateChatDelete) Reset()      { *m = UpdateChatDelete{} }
func (*UpdateChatDelete) ProtoMessage() {}
func (*UpdateChatDelete) Descriptor() ([]byte, []int) {
	return fileDescriptor_42a1718997f046ec, []int{81}
}
func (m *UpdateChatDelete) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateChatDelete) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateChatDelete.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateChatDelete) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateChatDelete.Merge(m, src)
}
func (m *UpdateChatDelete) XXX_Size() int {
	return m.Size()
}
func (m *UpdateChatDelete) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateChatDelete.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateChatDelete proto.InternalMessageInfo

func (m *UpdateChatDelete) GetPeer() *Peer {
	if m != nil {
		return m.Peer
	}
	return nil
}

func (m *UpdateChatDelete) GetActionDate() int64 {
	if m != nil {
		return m.ActionDate
	}
	return 0
}

// Update about chat archive
type UpdateChatArchive struct {
	Peer *Peer `protobuf:"bytes,1,opt,name=peer,proto3" json:"peer,omitempty"`
}

func (m *UpdateChatArchive) Reset()      { *m = UpdateChatArchive{} }
func (*UpdateChatArchive) ProtoMessage() {}
func (*UpdateChatArchive) Descriptor() ([]byte, []int) {
	return fileDescriptor_42a1718997f046ec, []int{82}
}
func (m *UpdateChatArchive) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateChatArchive) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateChatArchive.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateChatArchive) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateChatArchive.Merge(m, src)
}
func (m *UpdateChatArchive) XXX_Size() int {
	return m.Size()
}
func (m *UpdateChatArchive) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateChatArchive.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateChatArchive proto.InternalMessageInfo

func (m *UpdateChatArchive) GetPeer() *Peer {
	if m != nil {
		return m.Peer
	}
	return nil
}

// Update about chat groups changed. Called only when adding, removing and reordering of grouped dialog.
type UpdateChatGroupsChanged struct {
	Dialogs []*DialogGroup `protobuf:"bytes,1,rep,name=dialogs,proto3" json:"dialogs,omitempty"`
}

func (m *UpdateChatGroupsChanged) Reset()      { *m = UpdateChatGroupsChanged{} }
func (*UpdateChatGroupsChanged) ProtoMessage() {}
func (*UpdateChatGroupsChanged) Descriptor() ([]byte, []int) {
	return fileDescriptor_42a1718997f046ec, []int{83}
}
func (m *UpdateChatGroupsChanged) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateChatGroupsChanged) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateChatGroupsChanged.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateChatGroupsChanged) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateChatGroupsChanged.Merge(m, src)
}
func (m *UpdateChatGroupsChanged) XXX_Size() int {
	return m.Size()
}
func (m *UpdateChatGroupsChanged) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateChatGroupsChanged.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateChatGroupsChanged proto.InternalMessageInfo

func (m *UpdateChatGroupsChanged) GetDialogs() []*DialogGroup {
	if m != nil {
		return m.Dialogs
	}
	return nil
}

// Update about reactions change
type UpdateReactionsUpdate struct {
	Peer      *Peer              `protobuf:"bytes,1,opt,name=peer,proto3" json:"peer,omitempty"`
	Mid       *UUIDValue         `protobuf:"bytes,4,opt,name=mid,proto3" json:"mid,omitempty"`
	Reactions []*MessageReaction `protobuf:"bytes,3,rep,name=reactions,proto3" json:"reactions,omitempty"`
}

func (m *UpdateReactionsUpdate) Reset()      { *m = UpdateReactionsUpdate{} }
func (*UpdateReactionsUpdate) ProtoMessage() {}
func (*UpdateReactionsUpdate) Descriptor() ([]byte, []int) {
	return fileDescriptor_42a1718997f046ec, []int{84}
}
func (m *UpdateReactionsUpdate) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateReactionsUpdate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateReactionsUpdate.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateReactionsUpdate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateReactionsUpdate.Merge(m, src)
}
func (m *UpdateReactionsUpdate) XXX_Size() int {
	return m.Size()
}
func (m *UpdateReactionsUpdate) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateReactionsUpdate.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateReactionsUpdate proto.InternalMessageInfo

func (m *UpdateReactionsUpdate) GetPeer() *Peer {
	if m != nil {
		return m.Peer
	}
	return nil
}

func (m *UpdateReactionsUpdate) GetMid() *UUIDValue {
	if m != nil {
		return m.Mid
	}
	return nil
}

func (m *UpdateReactionsUpdate) GetReactions() []*MessageReaction {
	if m != nil {
		return m.Reactions
	}
	return nil
}

// Update about rejection of message send request
type UpdateMessageRejectedByHook struct {
	Peer   *Peer              `protobuf:"bytes,1,opt,name=peer,proto3" json:"peer,omitempty"`
	Rid    int64              `protobuf:"varint,2,opt,name=rid,proto3" json:"rid,omitempty"`
	Date   int64              `protobuf:"varint,3,opt,name=date,proto3" json:"date,omitempty"`
	HookId string             `protobuf:"bytes,4,opt,name=hookId,proto3" json:"hookId,omitempty"`
	Reason *types.StringValue `protobuf:"bytes,5,opt,name=reason,proto3" json:"reason,omitempty"`
}

func (m *UpdateMessageRejectedByHook) Reset()      { *m = UpdateMessageRejectedByHook{} }
func (*UpdateMessageRejectedByHook) ProtoMessage() {}
func (*UpdateMessageRejectedByHook) Descriptor() ([]byte, []int) {
	return fileDescriptor_42a1718997f046ec, []int{85}
}
func (m *UpdateMessageRejectedByHook) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateMessageRejectedByHook) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateMessageRejectedByHook.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateMessageRejectedByHook) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateMessageRejectedByHook.Merge(m, src)
}
func (m *UpdateMessageRejectedByHook) XXX_Size() int {
	return m.Size()
}
func (m *UpdateMessageRejectedByHook) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateMessageRejectedByHook.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateMessageRejectedByHook proto.InternalMessageInfo

func (m *UpdateMessageRejectedByHook) GetPeer() *Peer {
	if m != nil {
		return m.Peer
	}
	return nil
}

func (m *UpdateMessageRejectedByHook) GetRid() int64 {
	if m != nil {
		return m.Rid
	}
	return 0
}

func (m *UpdateMessageRejectedByHook) GetDate() int64 {
	if m != nil {
		return m.Date
	}
	return 0
}

func (m *UpdateMessageRejectedByHook) GetHookId() string {
	if m != nil {
		return m.HookId
	}
	return ""
}

func (m *UpdateMessageRejectedByHook) GetReason() *types.StringValue {
	if m != nil {
		return m.Reason
	}
	return nil
}

// Update about rejection of message update request
type UpdateMessageEditRejectedByHook struct {
	Peer   *Peer              `protobuf:"bytes,1,opt,name=peer,proto3" json:"peer,omitempty"`
	Mid    *UUIDValue         `protobuf:"bytes,2,opt,name=mid,proto3" json:"mid,omitempty"`
	Date   int64              `protobuf:"varint,3,opt,name=date,proto3" json:"date,omitempty"`
	HookId string             `protobuf:"bytes,4,opt,name=hookId,proto3" json:"hookId,omitempty"`
	Reason *types.StringValue `protobuf:"bytes,5,opt,name=reason,proto3" json:"reason,omitempty"`
}

func (m *UpdateMessageEditRejectedByHook) Reset()      { *m = UpdateMessageEditRejectedByHook{} }
func (*UpdateMessageEditRejectedByHook) ProtoMessage() {}
func (*UpdateMessageEditRejectedByHook) Descriptor() ([]byte, []int) {
	return fileDescriptor_42a1718997f046ec, []int{86}
}
func (m *UpdateMessageEditRejectedByHook) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateMessageEditRejectedByHook) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateMessageEditRejectedByHook.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateMessageEditRejectedByHook) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateMessageEditRejectedByHook.Merge(m, src)
}
func (m *UpdateMessageEditRejectedByHook) XXX_Size() int {
	return m.Size()
}
func (m *UpdateMessageEditRejectedByHook) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateMessageEditRejectedByHook.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateMessageEditRejectedByHook proto.InternalMessageInfo

func (m *UpdateMessageEditRejectedByHook) GetPeer() *Peer {
	if m != nil {
		return m.Peer
	}
	return nil
}

func (m *UpdateMessageEditRejectedByHook) GetMid() *UUIDValue {
	if m != nil {
		return m.Mid
	}
	return nil
}

func (m *UpdateMessageEditRejectedByHook) GetDate() int64 {
	if m != nil {
		return m.Date
	}
	return 0
}

func (m *UpdateMessageEditRejectedByHook) GetHookId() string {
	if m != nil {
		return m.HookId
	}
	return ""
}

func (m *UpdateMessageEditRejectedByHook) GetReason() *types.StringValue {
	if m != nil {
		return m.Reason
	}
	return nil
}

// Update about new thread inside group
type UpdateThreadCreated struct {
	Peer         *GroupOutPeer `protobuf:"bytes,1,opt,name=peer,proto3" json:"peer,omitempty"`
	StartMessage *UUIDValue    `protobuf:"bytes,2,opt,name=start_message,json=startMessage,proto3" json:"start_message,omitempty"`
}

func (m *UpdateThreadCreated) Reset()      { *m = UpdateThreadCreated{} }
func (*UpdateThreadCreated) ProtoMessage() {}
func (*UpdateThreadCreated) Descriptor() ([]byte, []int) {
	return fileDescriptor_42a1718997f046ec, []int{87}
}
func (m *UpdateThreadCreated) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateThreadCreated) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateThreadCreated.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateThreadCreated) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateThreadCreated.Merge(m, src)
}
func (m *UpdateThreadCreated) XXX_Size() int {
	return m.Size()
}
func (m *UpdateThreadCreated) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateThreadCreated.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateThreadCreated proto.InternalMessageInfo

func (m *UpdateThreadCreated) GetPeer() *GroupOutPeer {
	if m != nil {
		return m.Peer
	}
	return nil
}

func (m *UpdateThreadCreated) GetStartMessage() *UUIDValue {
	if m != nil {
		return m.StartMessage
	}
	return nil
}

// Update about thread converted to group
type UpdateThreadLifted struct {
	Peer *GroupOutPeer `protobuf:"bytes,1,opt,name=peer,proto3" json:"peer,omitempty"`
}

func (m *UpdateThreadLifted) Reset()      { *m = UpdateThreadLifted{} }
func (*UpdateThreadLifted) ProtoMessage() {}
func (*UpdateThreadLifted) Descriptor() ([]byte, []int) {
	return fileDescriptor_42a1718997f046ec, []int{88}
}
func (m *UpdateThreadLifted) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateThreadLifted) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateThreadLifted.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateThreadLifted) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateThreadLifted.Merge(m, src)
}
func (m *UpdateThreadLifted) XXX_Size() int {
	return m.Size()
}
func (m *UpdateThreadLifted) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateThreadLifted.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateThreadLifted proto.InternalMessageInfo

func (m *UpdateThreadLifted) GetPeer() *GroupOutPeer {
	if m != nil {
		return m.Peer
	}
	return nil
}

// mids Referenced message ids
type ReferencedMessages struct {
	Mids []*UUIDValue `protobuf:"bytes,1,rep,name=mids,proto3" json:"mids,omitempty"`
}

func (m *ReferencedMessages) Reset()      { *m = ReferencedMessages{} }
func (*ReferencedMessages) ProtoMessage() {}
func (*ReferencedMessages) Descriptor() ([]byte, []int) {
	return fileDescriptor_42a1718997f046ec, []int{89}
}
func (m *ReferencedMessages) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReferencedMessages) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReferencedMessages.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReferencedMessages) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReferencedMessages.Merge(m, src)
}
func (m *ReferencedMessages) XXX_Size() int {
	return m.Size()
}
func (m *ReferencedMessages) XXX_DiscardUnknown() {
	xxx_messageInfo_ReferencedMessages.DiscardUnknown(m)
}

var xxx_messageInfo_ReferencedMessages proto.InternalMessageInfo

func (m *ReferencedMessages) GetMids() []*UUIDValue {
	if m != nil {
		return m.Mids
	}
	return nil
}

// Message from history
type HistoryMessage struct {
	SenderUid  int32    `protobuf:"varint,1,opt,name=sender_uid,json=senderUid,proto3" json:"sender_uid,omitempty"`
	SenderPeer *OutPeer `protobuf:"bytes,15,opt,name=sender_peer,json=senderPeer,proto3" json:"sender_peer,omitempty"`
	HostPeer   *OutPeer `protobuf:"bytes,12,opt,name=host_peer,json=hostPeer,proto3" json:"host_peer,omitempty"`
	/// Message id generated by server
	Mid       *UUIDValue         `protobuf:"bytes,10,opt,name=mid,proto3" json:"mid,omitempty"`
	PrevMid   *UUIDValue         `protobuf:"bytes,17,opt,name=prev_mid,json=prevMid,proto3" json:"prev_mid,omitempty"`
	Date      int64              `protobuf:"varint,3,opt,name=date,proto3" json:"date,omitempty"`
	Message   *MessageContent    `protobuf:"bytes,5,opt,name=message,proto3" json:"message,omitempty"`
	State     MessageState       `protobuf:"varint,6,opt,name=state,proto3,enum=dialog.MessageState" json:"state,omitempty"`
	Reactions []*MessageReaction `protobuf:"bytes,7,rep,name=reactions,proto3" json:"reactions,omitempty"`
	Attribute *MessageAttributes `protobuf:"bytes,8,opt,name=attribute,proto3" json:"attribute,omitempty"`
	// Types that are valid to be assigned to Attach:
	//	*HistoryMessage_Forward
	//	*HistoryMessage_Reply
	Attach   isHistoryMessage_Attach `protobuf_oneof:"attach"`
	EditedAt *types.Int64Value       `protobuf:"bytes,16,opt,name=edited_at,json=editedAt,proto3" json:"edited_at,omitempty"`
	RandomId int64                   `protobuf:"varint,18,opt,name=random_id,json=randomId,proto3" json:"random_id,omitempty"`
}

func (m *HistoryMessage) Reset()      { *m = HistoryMessage{} }
func (*HistoryMessage) ProtoMessage() {}
func (*HistoryMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_42a1718997f046ec, []int{90}
}
func (m *HistoryMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HistoryMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_HistoryMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *HistoryMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HistoryMessage.Merge(m, src)
}
func (m *HistoryMessage) XXX_Size() int {
	return m.Size()
}
func (m *HistoryMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_HistoryMessage.DiscardUnknown(m)
}

var xxx_messageInfo_HistoryMessage proto.InternalMessageInfo

type isHistoryMessage_Attach interface {
	isHistoryMessage_Attach()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type HistoryMessage_Forward struct {
	Forward *ReferencedMessages `protobuf:"bytes,13,opt,name=forward,proto3,oneof" json:"forward,omitempty"`
}
type HistoryMessage_Reply struct {
	Reply *ReferencedMessages `protobuf:"bytes,14,opt,name=reply,proto3,oneof" json:"reply,omitempty"`
}

func (*HistoryMessage_Forward) isHistoryMessage_Attach() {}
func (*HistoryMessage_Reply) isHistoryMessage_Attach()   {}

func (m *HistoryMessage) GetAttach() isHistoryMessage_Attach {
	if m != nil {
		return m.Attach
	}
	return nil
}

func (m *HistoryMessage) GetSenderUid() int32 {
	if m != nil {
		return m.SenderUid
	}
	return 0
}

func (m *HistoryMessage) GetSenderPeer() *OutPeer {
	if m != nil {
		return m.SenderPeer
	}
	return nil
}

func (m *HistoryMessage) GetHostPeer() *OutPeer {
	if m != nil {
		return m.HostPeer
	}
	return nil
}

func (m *HistoryMessage) GetMid() *UUIDValue {
	if m != nil {
		return m.Mid
	}
	return nil
}

func (m *HistoryMessage) GetPrevMid() *UUIDValue {
	if m != nil {
		return m.PrevMid
	}
	return nil
}

func (m *HistoryMessage) GetDate() int64 {
	if m != nil {
		return m.Date
	}
	return 0
}

func (m *HistoryMessage) GetMessage() *MessageContent {
	if m != nil {
		return m.Message
	}
	return nil
}

func (m *HistoryMessage) GetState() MessageState {
	if m != nil {
		return m.State
	}
	return MESSAGESTATE_UNKNOWN
}

func (m *HistoryMessage) GetReactions() []*MessageReaction {
	if m != nil {
		return m.Reactions
	}
	return nil
}

func (m *HistoryMessage) GetAttribute() *MessageAttributes {
	if m != nil {
		return m.Attribute
	}
	return nil
}

func (m *HistoryMessage) GetForward() *ReferencedMessages {
	if x, ok := m.GetAttach().(*HistoryMessage_Forward); ok {
		return x.Forward
	}
	return nil
}

func (m *HistoryMessage) GetReply() *ReferencedMessages {
	if x, ok := m.GetAttach().(*HistoryMessage_Reply); ok {
		return x.Reply
	}
	return nil
}

func (m *HistoryMessage) GetEditedAt() *types.Int64Value {
	if m != nil {
		return m.EditedAt
	}
	return nil
}

func (m *HistoryMessage) GetRandomId() int64 {
	if m != nil {
		return m.RandomId
	}
	return 0
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*HistoryMessage) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*HistoryMessage_Forward)(nil),
		(*HistoryMessage_Reply)(nil),
	}
}

// Loading history of chat
type RequestLoadHistory struct {
	Peer *OutPeer `protobuf:"bytes,1,opt,name=peer,proto3" json:"peer,omitempty"`
	Date int64    `protobuf:"varint,3,opt,name=date,proto3" json:"date,omitempty"`
	/// forward, backward or both
	LoadMode      ListLoadMode         `protobuf:"varint,5,opt,name=load_mode,json=loadMode,proto3,enum=dialog.ListLoadMode" json:"load_mode,omitempty"`
	Limit         int32                `protobuf:"varint,4,opt,name=limit,proto3" json:"limit,omitempty"`
	Optimizations []UpdateOptimization `protobuf:"varint,6,rep,packed,name=optimizations,proto3,enum=dialog.UpdateOptimization" json:"optimizations,omitempty"`
}

func (m *RequestLoadHistory) Reset()      { *m = RequestLoadHistory{} }
func (*RequestLoadHistory) ProtoMessage() {}
func (*RequestLoadHistory) Descriptor() ([]byte, []int) {
	return fileDescriptor_42a1718997f046ec, []int{91}
}
func (m *RequestLoadHistory) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RequestLoadHistory) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RequestLoadHistory.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RequestLoadHistory) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RequestLoadHistory.Merge(m, src)
}
func (m *RequestLoadHistory) XXX_Size() int {
	return m.Size()
}
func (m *RequestLoadHistory) XXX_DiscardUnknown() {
	xxx_messageInfo_RequestLoadHistory.DiscardUnknown(m)
}

var xxx_messageInfo_RequestLoadHistory proto.InternalMessageInfo

func (m *RequestLoadHistory) GetPeer() *OutPeer {
	if m != nil {
		return m.Peer
	}
	return nil
}

func (m *RequestLoadHistory) GetDate() int64 {
	if m != nil {
		return m.Date
	}
	return 0
}

func (m *RequestLoadHistory) GetLoadMode() ListLoadMode {
	if m != nil {
		return m.LoadMode
	}
	return LISTLOADMODE_UNKNOWN
}

func (m *RequestLoadHistory) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *RequestLoadHistory) GetOptimizations() []UpdateOptimization {
	if m != nil {
		return m.Optimizations
	}
	return nil
}

type ResponseLoadHistory struct {
	History    []*HistoryMessage `protobuf:"bytes,1,rep,name=history,proto3" json:"history,omitempty"`
	UserPeers  []*UserOutPeer    `protobuf:"bytes,4,rep,name=user_peers,json=userPeers,proto3" json:"user_peers,omitempty"`
	GroupPeers []*GroupOutPeer   `protobuf:"bytes,6,rep,name=group_peers,json=groupPeers,proto3" json:"group_peers,omitempty"`
	/// counter of unread messages
	Counter *types.Int32Value `protobuf:"bytes,7,opt,name=counter,proto3" json:"counter,omitempty"`
	/// date, related to this unread counter
	CounterDate int64 `protobuf:"varint,8,opt,name=counter_date,json=counterDate,proto3" json:"counter_date,omitempty"`
	/// last conversation message date
	LastConversationMessageDate *types.Int64Value `protobuf:"bytes,9,opt,name=last_conversation_message_date,json=lastConversationMessageDate,proto3" json:"last_conversation_message_date,omitempty"`
	/// counter of the messages between last conversation message (including it) and last returned in this response
	CountForeignAfterLastReturned int32 `protobuf:"varint,10,opt,name=count_foreign_after_last_returned,json=countForeignAfterLastReturned,proto3" json:"count_foreign_after_last_returned,omitempty"`
}

func (m *ResponseLoadHistory) Reset()      { *m = ResponseLoadHistory{} }
func (*ResponseLoadHistory) ProtoMessage() {}
func (*ResponseLoadHistory) Descriptor() ([]byte, []int) {
	return fileDescriptor_42a1718997f046ec, []int{92}
}
func (m *ResponseLoadHistory) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ResponseLoadHistory) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ResponseLoadHistory.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ResponseLoadHistory) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResponseLoadHistory.Merge(m, src)
}
func (m *ResponseLoadHistory) XXX_Size() int {
	return m.Size()
}
func (m *ResponseLoadHistory) XXX_DiscardUnknown() {
	xxx_messageInfo_ResponseLoadHistory.DiscardUnknown(m)
}

var xxx_messageInfo_ResponseLoadHistory proto.InternalMessageInfo

func (m *ResponseLoadHistory) GetHistory() []*HistoryMessage {
	if m != nil {
		return m.History
	}
	return nil
}

func (m *ResponseLoadHistory) GetUserPeers() []*UserOutPeer {
	if m != nil {
		return m.UserPeers
	}
	return nil
}

func (m *ResponseLoadHistory) GetGroupPeers() []*GroupOutPeer {
	if m != nil {
		return m.GroupPeers
	}
	return nil
}

func (m *ResponseLoadHistory) GetCounter() *types.Int32Value {
	if m != nil {
		return m.Counter
	}
	return nil
}

func (m *ResponseLoadHistory) GetCounterDate() int64 {
	if m != nil {
		return m.CounterDate
	}
	return 0
}

func (m *ResponseLoadHistory) GetLastConversationMessageDate() *types.Int64Value {
	if m != nil {
		return m.LastConversationMessageDate
	}
	return nil
}

func (m *ResponseLoadHistory) GetCountForeignAfterLastReturned() int32 {
	if m != nil {
		return m.CountForeignAfterLastReturned
	}
	return 0
}

type RequestHistoryDifference struct {
	Clock int64 `protobuf:"varint,1,opt,name=clock,proto3" json:"clock,omitempty"`
}

func (m *RequestHistoryDifference) Reset()      { *m = RequestHistoryDifference{} }
func (*RequestHistoryDifference) ProtoMessage() {}
func (*RequestHistoryDifference) Descriptor() ([]byte, []int) {
	return fileDescriptor_42a1718997f046ec, []int{93}
}
func (m *RequestHistoryDifference) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RequestHistoryDifference) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RequestHistoryDifference.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RequestHistoryDifference) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RequestHistoryDifference.Merge(m, src)
}
func (m *RequestHistoryDifference) XXX_Size() int {
	return m.Size()
}
func (m *RequestHistoryDifference) XXX_DiscardUnknown() {
	xxx_messageInfo_RequestHistoryDifference.DiscardUnknown(m)
}

var xxx_messageInfo_RequestHistoryDifference proto.InternalMessageInfo

func (m *RequestHistoryDifference) GetClock() int64 {
	if m != nil {
		return m.Clock
	}
	return 0
}

type ResponseHistoryDifference struct {
	History   []*HistoryMessage `protobuf:"bytes,1,rep,name=history,proto3" json:"history,omitempty"`
	FromClock int64             `protobuf:"varint,2,opt,name=from_clock,json=fromClock,proto3" json:"from_clock,omitempty"`
	Clock     int64             `protobuf:"varint,3,opt,name=clock,proto3" json:"clock,omitempty"`
}

func (m *ResponseHistoryDifference) Reset()      { *m = ResponseHistoryDifference{} }
func (*ResponseHistoryDifference) ProtoMessage() {}
func (*ResponseHistoryDifference) Descriptor() ([]byte, []int) {
	return fileDescriptor_42a1718997f046ec, []int{94}
}
func (m *ResponseHistoryDifference) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ResponseHistoryDifference) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ResponseHistoryDifference.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ResponseHistoryDifference) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResponseHistoryDifference.Merge(m, src)
}
func (m *ResponseHistoryDifference) XXX_Size() int {
	return m.Size()
}
func (m *ResponseHistoryDifference) XXX_DiscardUnknown() {
	xxx_messageInfo_ResponseHistoryDifference.DiscardUnknown(m)
}

var xxx_messageInfo_ResponseHistoryDifference proto.InternalMessageInfo

func (m *ResponseHistoryDifference) GetHistory() []*HistoryMessage {
	if m != nil {
		return m.History
	}
	return nil
}

func (m *ResponseHistoryDifference) GetFromClock() int64 {
	if m != nil {
		return m.FromClock
	}
	return 0
}

func (m *ResponseHistoryDifference) GetClock() int64 {
	if m != nil {
		return m.Clock
	}
	return 0
}

// Conversation from history
// peer
// unreadCount
// sortDate date of conversation for sorting
// senderUid Sender of top message (may be zero)
// isFavourite Is dialog favourite
// rid Random ID of top message (may be zero)
// mid Message id
// date Date of top message (can't be zero)
// message Content of message
// firstUnreadDate Date of first unread message
// attributes Optional top message attributes
// pinnedMessages Optional pinned messages
// historyMessage Optional last messages
type Dialog struct {
	Peer        *Peer            `protobuf:"bytes,1,opt,name=peer,proto3" json:"peer,omitempty"`
	UnreadCount int32            `protobuf:"varint,3,opt,name=unread_count,json=unreadCount,proto3" json:"unread_count,omitempty"`
	SortDate    int64            `protobuf:"varint,4,opt,name=sort_date,json=sortDate,proto3" json:"sort_date,omitempty"`
	SenderUid   int32            `protobuf:"varint,5,opt,name=sender_uid,json=senderUid,proto3" json:"sender_uid,omitempty"`
	IsFavourite *types.BoolValue `protobuf:"bytes,13,opt,name=is_favourite,json=isFavourite,proto3" json:"is_favourite,omitempty"`
	/// Message id
	Mid *UUIDValue `protobuf:"bytes,12,opt,name=mid,proto3" json:"mid,omitempty"`
	/// last action date
	Date int64 `protobuf:"varint,7,opt,name=date,proto3" json:"date,omitempty"`
	/// last message content
	Message         *MessageContent    `protobuf:"bytes,8,opt,name=message,proto3" json:"message,omitempty"`
	State           MessageState       `protobuf:"varint,9,opt,name=state,proto3,enum=dialog.MessageState" json:"state,omitempty"`
	FirstUnreadDate int64              `protobuf:"varint,10,opt,name=first_unread_date,json=firstUnreadDate,proto3" json:"first_unread_date,omitempty"`
	Attributes      *MessageAttributes `protobuf:"bytes,11,opt,name=attributes,proto3" json:"attributes,omitempty"`
	PinnedMessages  *PinnedMessages    `protobuf:"bytes,14,opt,name=pinned_messages,json=pinnedMessages,proto3" json:"pinned_messages,omitempty"`
	/// last message in this dialog
	HistoryMessage *HistoryMessage `protobuf:"bytes,15,opt,name=history_message,json=historyMessage,proto3" json:"history_message,omitempty"`
	LastReceive    int64           `protobuf:"varint,16,opt,name=last_receive,json=lastReceive,proto3" json:"last_receive,omitempty"`
	LastRead       int64           `protobuf:"varint,17,opt,name=last_read,json=lastRead,proto3" json:"last_read,omitempty"`
	LastReactionAt int64           `protobuf:"varint,18,opt,name=last_reaction_at,json=lastReactionAt,proto3" json:"last_reaction_at,omitempty"`
}

func (m *Dialog) Reset()      { *m = Dialog{} }
func (*Dialog) ProtoMessage() {}
func (*Dialog) Descriptor() ([]byte, []int) {
	return fileDescriptor_42a1718997f046ec, []int{95}
}
func (m *Dialog) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Dialog) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Dialog.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Dialog) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Dialog.Merge(m, src)
}
func (m *Dialog) XXX_Size() int {
	return m.Size()
}
func (m *Dialog) XXX_DiscardUnknown() {
	xxx_messageInfo_Dialog.DiscardUnknown(m)
}

var xxx_messageInfo_Dialog proto.InternalMessageInfo

func (m *Dialog) GetPeer() *Peer {
	if m != nil {
		return m.Peer
	}
	return nil
}

func (m *Dialog) GetUnreadCount() int32 {
	if m != nil {
		return m.UnreadCount
	}
	return 0
}

func (m *Dialog) GetSortDate() int64 {
	if m != nil {
		return m.SortDate
	}
	return 0
}

func (m *Dialog) GetSenderUid() int32 {
	if m != nil {
		return m.SenderUid
	}
	return 0
}

func (m *Dialog) GetIsFavourite() *types.BoolValue {
	if m != nil {
		return m.IsFavourite
	}
	return nil
}

func (m *Dialog) GetMid() *UUIDValue {
	if m != nil {
		return m.Mid
	}
	return nil
}

func (m *Dialog) GetDate() int64 {
	if m != nil {
		return m.Date
	}
	return 0
}

func (m *Dialog) GetMessage() *MessageContent {
	if m != nil {
		return m.Message
	}
	return nil
}

func (m *Dialog) GetState() MessageState {
	if m != nil {
		return m.State
	}
	return MESSAGESTATE_UNKNOWN
}

func (m *Dialog) GetFirstUnreadDate() int64 {
	if m != nil {
		return m.FirstUnreadDate
	}
	return 0
}

func (m *Dialog) GetAttributes() *MessageAttributes {
	if m != nil {
		return m.Attributes
	}
	return nil
}

func (m *Dialog) GetPinnedMessages() *PinnedMessages {
	if m != nil {
		return m.PinnedMessages
	}
	return nil
}

func (m *Dialog) GetHistoryMessage() *HistoryMessage {
	if m != nil {
		return m.HistoryMessage
	}
	return nil
}

func (m *Dialog) GetLastReceive() int64 {
	if m != nil {
		return m.LastReceive
	}
	return 0
}

func (m *Dialog) GetLastRead() int64 {
	if m != nil {
		return m.LastRead
	}
	return 0
}

func (m *Dialog) GetLastReactionAt() int64 {
	if m != nil {
		return m.LastReactionAt
	}
	return 0
}

// Loading conversation history
type RequestLoadDialogs struct {
	MinDate       int64                `protobuf:"varint,1,opt,name=min_date,json=minDate,proto3" json:"min_date,omitempty"`
	Limit         int32                `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
	Optimizations []UpdateOptimization `protobuf:"varint,3,rep,packed,name=optimizations,proto3,enum=dialog.UpdateOptimization" json:"optimizations,omitempty"`
	Filters       []DialogsFilter      `protobuf:"varint,4,rep,packed,name=filters,proto3,enum=dialog.DialogsFilter" json:"filters,omitempty"`
	PeersToLoad   []*Peer              `protobuf:"bytes,5,rep,name=peers_to_load,json=peersToLoad,proto3" json:"peers_to_load,omitempty"`
}

func (m *RequestLoadDialogs) Reset()      { *m = RequestLoadDialogs{} }
func (*RequestLoadDialogs) ProtoMessage() {}
func (*RequestLoadDialogs) Descriptor() ([]byte, []int) {
	return fileDescriptor_42a1718997f046ec, []int{96}
}
func (m *RequestLoadDialogs) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RequestLoadDialogs) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RequestLoadDialogs.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RequestLoadDialogs) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RequestLoadDialogs.Merge(m, src)
}
func (m *RequestLoadDialogs) XXX_Size() int {
	return m.Size()
}
func (m *RequestLoadDialogs) XXX_DiscardUnknown() {
	xxx_messageInfo_RequestLoadDialogs.DiscardUnknown(m)
}

var xxx_messageInfo_RequestLoadDialogs proto.InternalMessageInfo

func (m *RequestLoadDialogs) GetMinDate() int64 {
	if m != nil {
		return m.MinDate
	}
	return 0
}

func (m *RequestLoadDialogs) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *RequestLoadDialogs) GetOptimizations() []UpdateOptimization {
	if m != nil {
		return m.Optimizations
	}
	return nil
}

func (m *RequestLoadDialogs) GetFilters() []DialogsFilter {
	if m != nil {
		return m.Filters
	}
	return nil
}

func (m *RequestLoadDialogs) GetPeersToLoad() []*Peer {
	if m != nil {
		return m.PeersToLoad
	}
	return nil
}

/// Contains dialogs and related peers and entities
type ResponseLoadDialogs struct {
	Dialogs    []*Dialog       `protobuf:"bytes,3,rep,name=dialogs,proto3" json:"dialogs,omitempty"`
	UserPeers  []*UserOutPeer  `protobuf:"bytes,4,rep,name=user_peers,json=userPeers,proto3" json:"user_peers,omitempty"`
	GroupPeers []*GroupOutPeer `protobuf:"bytes,5,rep,name=group_peers,json=groupPeers,proto3" json:"group_peers,omitempty"`
}

func (m *ResponseLoadDialogs) Reset()      { *m = ResponseLoadDialogs{} }
func (*ResponseLoadDialogs) ProtoMessage() {}
func (*ResponseLoadDialogs) Descriptor() ([]byte, []int) {
	return fileDescriptor_42a1718997f046ec, []int{97}
}
func (m *ResponseLoadDialogs) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ResponseLoadDialogs) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ResponseLoadDialogs.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ResponseLoadDialogs) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResponseLoadDialogs.Merge(m, src)
}
func (m *ResponseLoadDialogs) XXX_Size() int {
	return m.Size()
}
func (m *ResponseLoadDialogs) XXX_DiscardUnknown() {
	xxx_messageInfo_ResponseLoadDialogs.DiscardUnknown(m)
}

var xxx_messageInfo_ResponseLoadDialogs proto.InternalMessageInfo

func (m *ResponseLoadDialogs) GetDialogs() []*Dialog {
	if m != nil {
		return m.Dialogs
	}
	return nil
}

func (m *ResponseLoadDialogs) GetUserPeers() []*UserOutPeer {
	if m != nil {
		return m.UserPeers
	}
	return nil
}

func (m *ResponseLoadDialogs) GetGroupPeers() []*GroupOutPeer {
	if m != nil {
		return m.GroupPeers
	}
	return nil
}

// Data related to dialog entity
type DialogData struct {
	IsFavourite bool  `protobuf:"varint,2,opt,name=is_favourite,json=isFavourite,proto3" json:"is_favourite,omitempty"`
	CreatedAt   int64 `protobuf:"varint,3,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	/// When dialog was changed last time
	Clock int64 `protobuf:"varint,4,opt,name=clock,proto3" json:"clock,omitempty"`
}

func (m *DialogData) Reset()      { *m = DialogData{} }
func (*DialogData) ProtoMessage() {}
func (*DialogData) Descriptor() ([]byte, []int) {
	return fileDescriptor_42a1718997f046ec, []int{98}
}
func (m *DialogData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DialogData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DialogData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DialogData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DialogData.Merge(m, src)
}
func (m *DialogData) XXX_Size() int {
	return m.Size()
}
func (m *DialogData) XXX_DiscardUnknown() {
	xxx_messageInfo_DialogData.DiscardUnknown(m)
}

var xxx_messageInfo_DialogData proto.InternalMessageInfo

func (m *DialogData) GetIsFavourite() bool {
	if m != nil {
		return m.IsFavourite
	}
	return false
}

func (m *DialogData) GetCreatedAt() int64 {
	if m != nil {
		return m.CreatedAt
	}
	return 0
}

func (m *DialogData) GetClock() int64 {
	if m != nil {
		return m.Clock
	}
	return 0
}

type DialogIndex struct {
	/// The peer for the conversation
	Peer *Peer `protobuf:"bytes,1,opt,name=peer,proto3" json:"peer,omitempty"`
	/// Last message date of a dialog
	LastMessageDate int64       `protobuf:"varint,2,opt,name=last_message_date,json=lastMessageDate,proto3" json:"last_message_date,omitempty"`
	Data            *DialogData `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *DialogIndex) Reset()      { *m = DialogIndex{} }
func (*DialogIndex) ProtoMessage() {}
func (*DialogIndex) Descriptor() ([]byte, []int) {
	return fileDescriptor_42a1718997f046ec, []int{99}
}
func (m *DialogIndex) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DialogIndex) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DialogIndex.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DialogIndex) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DialogIndex.Merge(m, src)
}
func (m *DialogIndex) XXX_Size() int {
	return m.Size()
}
func (m *DialogIndex) XXX_DiscardUnknown() {
	xxx_messageInfo_DialogIndex.DiscardUnknown(m)
}

var xxx_messageInfo_DialogIndex proto.InternalMessageInfo

func (m *DialogIndex) GetPeer() *Peer {
	if m != nil {
		return m.Peer
	}
	return nil
}

func (m *DialogIndex) GetLastMessageDate() int64 {
	if m != nil {
		return m.LastMessageDate
	}
	return 0
}

func (m *DialogIndex) GetData() *DialogData {
	if m != nil {
		return m.Data
	}
	return nil
}

// Compound info of a one of the dialogs in dialog list SDK 2.0
//
// peer
// unread_count count of the unread messages in dialog
// my_read_date date of the last own read
// last_message_date date of the last message
// receive_date date of the last received message
// read_date date of the last read message
// entry_clock shared clock across all datas which required for making a dialog entry
// data data related to dialog itself
type DialogListEntry struct {
	Peer                    *Peer       `protobuf:"bytes,1,opt,name=peer,proto3" json:"peer,omitempty"`
	UnreadCount             int32       `protobuf:"varint,2,opt,name=unread_count,json=unreadCount,proto3" json:"unread_count,omitempty"`
	MyReadDate              int64       `protobuf:"varint,3,opt,name=my_read_date,json=myReadDate,proto3" json:"my_read_date,omitempty"`
	LastMessageDate         int64       `protobuf:"varint,4,opt,name=last_message_date,json=lastMessageDate,proto3" json:"last_message_date,omitempty"`
	ReceiveDate             int64       `protobuf:"varint,5,opt,name=receive_date,json=receiveDate,proto3" json:"receive_date,omitempty"`
	ReadDate                int64       `protobuf:"varint,6,opt,name=read_date,json=readDate,proto3" json:"read_date,omitempty"`
	EntryClock              int64       `protobuf:"varint,7,opt,name=entry_clock,json=entryClock,proto3" json:"entry_clock,omitempty"`
	LastUpdateOfMessageDate int64       `protobuf:"varint,9,opt,name=last_update_of_message_date,json=lastUpdateOfMessageDate,proto3" json:"last_update_of_message_date,omitempty"`
	LastReactionDate        int64       `protobuf:"varint,10,opt,name=last_reaction_date,json=lastReactionDate,proto3" json:"last_reaction_date,omitempty"`
	Data                    *DialogData `protobuf:"bytes,8,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *DialogListEntry) Reset()      { *m = DialogListEntry{} }
func (*DialogListEntry) ProtoMessage() {}
func (*DialogListEntry) Descriptor() ([]byte, []int) {
	return fileDescriptor_42a1718997f046ec, []int{100}
}
func (m *DialogListEntry) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DialogListEntry) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DialogListEntry.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DialogListEntry) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DialogListEntry.Merge(m, src)
}
func (m *DialogListEntry) XXX_Size() int {
	return m.Size()
}
func (m *DialogListEntry) XXX_DiscardUnknown() {
	xxx_messageInfo_DialogListEntry.DiscardUnknown(m)
}

var xxx_messageInfo_DialogListEntry proto.InternalMessageInfo

func (m *DialogListEntry) GetPeer() *Peer {
	if m != nil {
		return m.Peer
	}
	return nil
}

func (m *DialogListEntry) GetUnreadCount() int32 {
	if m != nil {
		return m.UnreadCount
	}
	return 0
}

func (m *DialogListEntry) GetMyReadDate() int64 {
	if m != nil {
		return m.MyReadDate
	}
	return 0
}

func (m *DialogListEntry) GetLastMessageDate() int64 {
	if m != nil {
		return m.LastMessageDate
	}
	return 0
}

func (m *DialogListEntry) GetReceiveDate() int64 {
	if m != nil {
		return m.ReceiveDate
	}
	return 0
}

func (m *DialogListEntry) GetReadDate() int64 {
	if m != nil {
		return m.ReadDate
	}
	return 0
}

func (m *DialogListEntry) GetEntryClock() int64 {
	if m != nil {
		return m.EntryClock
	}
	return 0
}

func (m *DialogListEntry) GetLastUpdateOfMessageDate() int64 {
	if m != nil {
		return m.LastUpdateOfMessageDate
	}
	return 0
}

func (m *DialogListEntry) GetLastReactionDate() int64 {
	if m != nil {
		return m.LastReactionDate
	}
	return 0
}

func (m *DialogListEntry) GetData() *DialogData {
	if m != nil {
		return m.Data
	}
	return nil
}

//*
// Fetches dialog index (short info about all user's dialogs).
// Used in client side pagination.
type RequestFetchDialogIndex struct {
}

func (m *RequestFetchDialogIndex) Reset()      { *m = RequestFetchDialogIndex{} }
func (*RequestFetchDialogIndex) ProtoMessage() {}
func (*RequestFetchDialogIndex) Descriptor() ([]byte, []int) {
	return fileDescriptor_42a1718997f046ec, []int{101}
}
func (m *RequestFetchDialogIndex) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RequestFetchDialogIndex) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RequestFetchDialogIndex.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RequestFetchDialogIndex) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RequestFetchDialogIndex.Merge(m, src)
}
func (m *RequestFetchDialogIndex) XXX_Size() int {
	return m.Size()
}
func (m *RequestFetchDialogIndex) XXX_DiscardUnknown() {
	xxx_messageInfo_RequestFetchDialogIndex.DiscardUnknown(m)
}

var xxx_messageInfo_RequestFetchDialogIndex proto.InternalMessageInfo

type ResponseFetchDialogIndex struct {
	DialogIndices []*DialogIndex `protobuf:"bytes,1,rep,name=dialog_indices,json=dialogIndices,proto3" json:"dialog_indices,omitempty"`
}

func (m *ResponseFetchDialogIndex) Reset()      { *m = ResponseFetchDialogIndex{} }
func (*ResponseFetchDialogIndex) ProtoMessage() {}
func (*ResponseFetchDialogIndex) Descriptor() ([]byte, []int) {
	return fileDescriptor_42a1718997f046ec, []int{102}
}
func (m *ResponseFetchDialogIndex) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ResponseFetchDialogIndex) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ResponseFetchDialogIndex.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ResponseFetchDialogIndex) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResponseFetchDialogIndex.Merge(m, src)
}
func (m *ResponseFetchDialogIndex) XXX_Size() int {
	return m.Size()
}
func (m *ResponseFetchDialogIndex) XXX_DiscardUnknown() {
	xxx_messageInfo_ResponseFetchDialogIndex.DiscardUnknown(m)
}

var xxx_messageInfo_ResponseFetchDialogIndex proto.InternalMessageInfo

func (m *ResponseFetchDialogIndex) GetDialogIndices() []*DialogIndex {
	if m != nil {
		return m.DialogIndices
	}
	return nil
}

// Loading compound difference (all dialogs after from_clock) as DialogListEntries
// Use it to request difference in dialog list
type RequestDialogListDifference struct {
	/// Shared clock across all states which required for making a dialog entry (e.g. max clock among those dates)
	/// Conceptually you have to set this to sync all including datas after reconnect or authorization
	FromClock int64 `protobuf:"varint,1,opt,name=from_clock,json=fromClock,proto3" json:"from_clock,omitempty"`
}

func (m *RequestDialogListDifference) Reset()      { *m = RequestDialogListDifference{} }
func (*RequestDialogListDifference) ProtoMessage() {}
func (*RequestDialogListDifference) Descriptor() ([]byte, []int) {
	return fileDescriptor_42a1718997f046ec, []int{103}
}
func (m *RequestDialogListDifference) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RequestDialogListDifference) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RequestDialogListDifference.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RequestDialogListDifference) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RequestDialogListDifference.Merge(m, src)
}
func (m *RequestDialogListDifference) XXX_Size() int {
	return m.Size()
}
func (m *RequestDialogListDifference) XXX_DiscardUnknown() {
	xxx_messageInfo_RequestDialogListDifference.DiscardUnknown(m)
}

var xxx_messageInfo_RequestDialogListDifference proto.InternalMessageInfo

func (m *RequestDialogListDifference) GetFromClock() int64 {
	if m != nil {
		return m.FromClock
	}
	return 0
}

/// Contains dialogs that was change after from_clock
type ResponseDialogListDifference struct {
	Entries []*DialogListEntry `protobuf:"bytes,1,rep,name=entries,proto3" json:"entries,omitempty"`
	/// Start and the end of the compound history data interval
	Clock     int64 `protobuf:"varint,2,opt,name=clock,proto3" json:"clock,omitempty"`
	PrevClock int64 `protobuf:"varint,3,opt,name=prev_clock,json=prevClock,proto3" json:"prev_clock,omitempty"`
}

func (m *ResponseDialogListDifference) Reset()      { *m = ResponseDialogListDifference{} }
func (*ResponseDialogListDifference) ProtoMessage() {}
func (*ResponseDialogListDifference) Descriptor() ([]byte, []int) {
	return fileDescriptor_42a1718997f046ec, []int{104}
}
func (m *ResponseDialogListDifference) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ResponseDialogListDifference) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ResponseDialogListDifference.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ResponseDialogListDifference) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResponseDialogListDifference.Merge(m, src)
}
func (m *ResponseDialogListDifference) XXX_Size() int {
	return m.Size()
}
func (m *ResponseDialogListDifference) XXX_DiscardUnknown() {
	xxx_messageInfo_ResponseDialogListDifference.DiscardUnknown(m)
}

var xxx_messageInfo_ResponseDialogListDifference proto.InternalMessageInfo

func (m *ResponseDialogListDifference) GetEntries() []*DialogListEntry {
	if m != nil {
		return m.Entries
	}
	return nil
}

func (m *ResponseDialogListDifference) GetClock() int64 {
	if m != nil {
		return m.Clock
	}
	return 0
}

func (m *ResponseDialogListDifference) GetPrevClock() int64 {
	if m != nil {
		return m.PrevClock
	}
	return 0
}

// Use it to receive messages for visible dialogs after FetchDialogsIndex
type RequestGetLastConversationMessages struct {
	Peers []*Peer `protobuf:"bytes,1,rep,name=peers,proto3" json:"peers,omitempty"`
}

func (m *RequestGetLastConversationMessages) Reset()      { *m = RequestGetLastConversationMessages{} }
func (*RequestGetLastConversationMessages) ProtoMessage() {}
func (*RequestGetLastConversationMessages) Descriptor() ([]byte, []int) {
	return fileDescriptor_42a1718997f046ec, []int{105}
}
func (m *RequestGetLastConversationMessages) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RequestGetLastConversationMessages) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RequestGetLastConversationMessages.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RequestGetLastConversationMessages) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RequestGetLastConversationMessages.Merge(m, src)
}
func (m *RequestGetLastConversationMessages) XXX_Size() int {
	return m.Size()
}
func (m *RequestGetLastConversationMessages) XXX_DiscardUnknown() {
	xxx_messageInfo_RequestGetLastConversationMessages.DiscardUnknown(m)
}

var xxx_messageInfo_RequestGetLastConversationMessages proto.InternalMessageInfo

func (m *RequestGetLastConversationMessages) GetPeers() []*Peer {
	if m != nil {
		return m.Peers
	}
	return nil
}

type ResponseGetLastConversationMessages struct {
	Messages []*ResponseGetLastConversationMessages_Pair `protobuf:"bytes,1,rep,name=messages,proto3" json:"messages,omitempty"`
}

func (m *ResponseGetLastConversationMessages) Reset()      { *m = ResponseGetLastConversationMessages{} }
func (*ResponseGetLastConversationMessages) ProtoMessage() {}
func (*ResponseGetLastConversationMessages) Descriptor() ([]byte, []int) {
	return fileDescriptor_42a1718997f046ec, []int{106}
}
func (m *ResponseGetLastConversationMessages) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ResponseGetLastConversationMessages) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ResponseGetLastConversationMessages.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ResponseGetLastConversationMessages) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResponseGetLastConversationMessages.Merge(m, src)
}
func (m *ResponseGetLastConversationMessages) XXX_Size() int {
	return m.Size()
}
func (m *ResponseGetLastConversationMessages) XXX_DiscardUnknown() {
	xxx_messageInfo_ResponseGetLastConversationMessages.DiscardUnknown(m)
}

var xxx_messageInfo_ResponseGetLastConversationMessages proto.InternalMessageInfo

func (m *ResponseGetLastConversationMessages) GetMessages() []*ResponseGetLastConversationMessages_Pair {
	if m != nil {
		return m.Messages
	}
	return nil
}

type ResponseGetLastConversationMessages_Pair struct {
	Peer    *Peer           `protobuf:"bytes,1,opt,name=peer,proto3" json:"peer,omitempty"`
	Message *HistoryMessage `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (m *ResponseGetLastConversationMessages_Pair) Reset() {
	*m = ResponseGetLastConversationMessages_Pair{}
}
func (*ResponseGetLastConversationMessages_Pair) ProtoMessage() {}
func (*ResponseGetLastConversationMessages_Pair) Descriptor() ([]byte, []int) {
	return fileDescriptor_42a1718997f046ec, []int{106, 0}
}
func (m *ResponseGetLastConversationMessages_Pair) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ResponseGetLastConversationMessages_Pair) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ResponseGetLastConversationMessages_Pair.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ResponseGetLastConversationMessages_Pair) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResponseGetLastConversationMessages_Pair.Merge(m, src)
}
func (m *ResponseGetLastConversationMessages_Pair) XXX_Size() int {
	return m.Size()
}
func (m *ResponseGetLastConversationMessages_Pair) XXX_DiscardUnknown() {
	xxx_messageInfo_ResponseGetLastConversationMessages_Pair.DiscardUnknown(m)
}

var xxx_messageInfo_ResponseGetLastConversationMessages_Pair proto.InternalMessageInfo

func (m *ResponseGetLastConversationMessages_Pair) GetPeer() *Peer {
	if m != nil {
		return m.Peer
	}
	return nil
}

func (m *ResponseGetLastConversationMessages_Pair) GetMessage() *HistoryMessage {
	if m != nil {
		return m.Message
	}
	return nil
}

// Loading archived messages - deprecated
type RequestLoadArchived struct {
	NextOffset    *types.BytesValue    `protobuf:"bytes,1,opt,name=next_offset,json=nextOffset,proto3" json:"next_offset,omitempty"`
	Limit         int32                `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
	Optimizations []UpdateOptimization `protobuf:"varint,3,rep,packed,name=optimizations,proto3,enum=dialog.UpdateOptimization" json:"optimizations,omitempty"`
}

func (m *RequestLoadArchived) Reset()      { *m = RequestLoadArchived{} }
func (*RequestLoadArchived) ProtoMessage() {}
func (*RequestLoadArchived) Descriptor() ([]byte, []int) {
	return fileDescriptor_42a1718997f046ec, []int{107}
}
func (m *RequestLoadArchived) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RequestLoadArchived) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RequestLoadArchived.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RequestLoadArchived) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RequestLoadArchived.Merge(m, src)
}
func (m *RequestLoadArchived) XXX_Size() int {
	return m.Size()
}
func (m *RequestLoadArchived) XXX_DiscardUnknown() {
	xxx_messageInfo_RequestLoadArchived.DiscardUnknown(m)
}

var xxx_messageInfo_RequestLoadArchived proto.InternalMessageInfo

func (m *RequestLoadArchived) GetNextOffset() *types.BytesValue {
	if m != nil {
		return m.NextOffset
	}
	return nil
}

func (m *RequestLoadArchived) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *RequestLoadArchived) GetOptimizations() []UpdateOptimization {
	if m != nil {
		return m.Optimizations
	}
	return nil
}

/// deprecated
type ResponseLoadArchived struct {
	Dialogs    []*Dialog         `protobuf:"bytes,3,rep,name=dialogs,proto3" json:"dialogs,omitempty"`
	UserPeers  []*UserOutPeer    `protobuf:"bytes,5,rep,name=user_peers,json=userPeers,proto3" json:"user_peers,omitempty"`
	GroupPeers []*GroupOutPeer   `protobuf:"bytes,6,rep,name=group_peers,json=groupPeers,proto3" json:"group_peers,omitempty"`
	NextOffset *types.BytesValue `protobuf:"bytes,4,opt,name=next_offset,json=nextOffset,proto3" json:"next_offset,omitempty"`
}

func (m *ResponseLoadArchived) Reset()      { *m = ResponseLoadArchived{} }
func (*ResponseLoadArchived) ProtoMessage() {}
func (*ResponseLoadArchived) Descriptor() ([]byte, []int) {
	return fileDescriptor_42a1718997f046ec, []int{108}
}
func (m *ResponseLoadArchived) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ResponseLoadArchived) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ResponseLoadArchived.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ResponseLoadArchived) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResponseLoadArchived.Merge(m, src)
}
func (m *ResponseLoadArchived) XXX_Size() int {
	return m.Size()
}
func (m *ResponseLoadArchived) XXX_DiscardUnknown() {
	xxx_messageInfo_ResponseLoadArchived.DiscardUnknown(m)
}

var xxx_messageInfo_ResponseLoadArchived proto.InternalMessageInfo

func (m *ResponseLoadArchived) GetDialogs() []*Dialog {
	if m != nil {
		return m.Dialogs
	}
	return nil
}

func (m *ResponseLoadArchived) GetUserPeers() []*UserOutPeer {
	if m != nil {
		return m.UserPeers
	}
	return nil
}

func (m *ResponseLoadArchived) GetGroupPeers() []*GroupOutPeer {
	if m != nil {
		return m.GroupPeers
	}
	return nil
}

func (m *ResponseLoadArchived) GetNextOffset() *types.BytesValue {
	if m != nil {
		return m.NextOffset
	}
	return nil
}

// Load all dialogs from grouped list - deprecated
type RequestLoadGroupedDialogs struct {
	Optimizations []UpdateOptimization `protobuf:"varint,1,rep,packed,name=optimizations,proto3,enum=dialog.UpdateOptimization" json:"optimizations,omitempty"`
}

func (m *RequestLoadGroupedDialogs) Reset()      { *m = RequestLoadGroupedDialogs{} }
func (*RequestLoadGroupedDialogs) ProtoMessage() {}
func (*RequestLoadGroupedDialogs) Descriptor() ([]byte, []int) {
	return fileDescriptor_42a1718997f046ec, []int{109}
}
func (m *RequestLoadGroupedDialogs) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RequestLoadGroupedDialogs) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RequestLoadGroupedDialogs.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RequestLoadGroupedDialogs) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RequestLoadGroupedDialogs.Merge(m, src)
}
func (m *RequestLoadGroupedDialogs) XXX_Size() int {
	return m.Size()
}
func (m *RequestLoadGroupedDialogs) XXX_DiscardUnknown() {
	xxx_messageInfo_RequestLoadGroupedDialogs.DiscardUnknown(m)
}

var xxx_messageInfo_RequestLoadGroupedDialogs proto.InternalMessageInfo

func (m *RequestLoadGroupedDialogs) GetOptimizations() []UpdateOptimization {
	if m != nil {
		return m.Optimizations
	}
	return nil
}

/// deprecated
type ResponseLoadGroupedDialogs struct {
	Dialogs      []*DialogGroup   `protobuf:"bytes,1,rep,name=dialogs,proto3" json:"dialogs,omitempty"`
	ShowArchived *types.BoolValue `protobuf:"bytes,4,opt,name=show_archived,json=showArchived,proto3" json:"show_archived,omitempty"`
	ShowInvite   *types.BoolValue `protobuf:"bytes,5,opt,name=show_invite,json=showInvite,proto3" json:"show_invite,omitempty"`
	UserPeers    []*UserOutPeer   `protobuf:"bytes,6,rep,name=user_peers,json=userPeers,proto3" json:"user_peers,omitempty"`
	GroupPeers   []*GroupOutPeer  `protobuf:"bytes,7,rep,name=group_peers,json=groupPeers,proto3" json:"group_peers,omitempty"`
}

func (m *ResponseLoadGroupedDialogs) Reset()      { *m = ResponseLoadGroupedDialogs{} }
func (*ResponseLoadGroupedDialogs) ProtoMessage() {}
func (*ResponseLoadGroupedDialogs) Descriptor() ([]byte, []int) {
	return fileDescriptor_42a1718997f046ec, []int{110}
}
func (m *ResponseLoadGroupedDialogs) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ResponseLoadGroupedDialogs) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ResponseLoadGroupedDialogs.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ResponseLoadGroupedDialogs) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResponseLoadGroupedDialogs.Merge(m, src)
}
func (m *ResponseLoadGroupedDialogs) XXX_Size() int {
	return m.Size()
}
func (m *ResponseLoadGroupedDialogs) XXX_DiscardUnknown() {
	xxx_messageInfo_ResponseLoadGroupedDialogs.DiscardUnknown(m)
}

var xxx_messageInfo_ResponseLoadGroupedDialogs proto.InternalMessageInfo

func (m *ResponseLoadGroupedDialogs) GetDialogs() []*DialogGroup {
	if m != nil {
		return m.Dialogs
	}
	return nil
}

func (m *ResponseLoadGroupedDialogs) GetShowArchived() *types.BoolValue {
	if m != nil {
		return m.ShowArchived
	}
	return nil
}

func (m *ResponseLoadGroupedDialogs) GetShowInvite() *types.BoolValue {
	if m != nil {
		return m.ShowInvite
	}
	return nil
}

func (m *ResponseLoadGroupedDialogs) GetUserPeers() []*UserOutPeer {
	if m != nil {
		return m.UserPeers
	}
	return nil
}

func (m *ResponseLoadGroupedDialogs) GetGroupPeers() []*GroupOutPeer {
	if m != nil {
		return m.GroupPeers
	}
	return nil
}

// Dialogs order response - deprecated
type ResponseDialogsOrder struct {
	Seq    int32          `protobuf:"varint,1,opt,name=seq,proto3" json:"seq,omitempty"`
	State  []byte         `protobuf:"bytes,2,opt,name=state,proto3" json:"state,omitempty"`
	Groups []*DialogGroup `protobuf:"bytes,3,rep,name=groups,proto3" json:"groups,omitempty"`
}

func (m *ResponseDialogsOrder) Reset()      { *m = ResponseDialogsOrder{} }
func (*ResponseDialogsOrder) ProtoMessage() {}
func (*ResponseDialogsOrder) Descriptor() ([]byte, []int) {
	return fileDescriptor_42a1718997f046ec, []int{111}
}
func (m *ResponseDialogsOrder) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ResponseDialogsOrder) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ResponseDialogsOrder.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ResponseDialogsOrder) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResponseDialogsOrder.Merge(m, src)
}
func (m *ResponseDialogsOrder) XXX_Size() int {
	return m.Size()
}
func (m *ResponseDialogsOrder) XXX_DiscardUnknown() {
	xxx_messageInfo_ResponseDialogsOrder.DiscardUnknown(m)
}

var xxx_messageInfo_ResponseDialogsOrder proto.InternalMessageInfo

func (m *ResponseDialogsOrder) GetSeq() int32 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *ResponseDialogsOrder) GetState() []byte {
	if m != nil {
		return m.State
	}
	return nil
}

func (m *ResponseDialogsOrder) GetGroups() []*DialogGroup {
	if m != nil {
		return m.Groups
	}
	return nil
}

// Hide Dialog from grouped list
type RequestHideDialog struct {
	Peer *OutPeer `protobuf:"bytes,1,opt,name=peer,proto3" json:"peer,omitempty"`
}

func (m *RequestHideDialog) Reset()      { *m = RequestHideDialog{} }
func (*RequestHideDialog) ProtoMessage() {}
func (*RequestHideDialog) Descriptor() ([]byte, []int) {
	return fileDescriptor_42a1718997f046ec, []int{112}
}
func (m *RequestHideDialog) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RequestHideDialog) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RequestHideDialog.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RequestHideDialog) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RequestHideDialog.Merge(m, src)
}
func (m *RequestHideDialog) XXX_Size() int {
	return m.Size()
}
func (m *RequestHideDialog) XXX_DiscardUnknown() {
	xxx_messageInfo_RequestHideDialog.DiscardUnknown(m)
}

var xxx_messageInfo_RequestHideDialog proto.InternalMessageInfo

func (m *RequestHideDialog) GetPeer() *OutPeer {
	if m != nil {
		return m.Peer
	}
	return nil
}

// Show Dialog in grouped list
type RequestShowDialog struct {
	Peer *OutPeer `protobuf:"bytes,1,opt,name=peer,proto3" json:"peer,omitempty"`
}

func (m *RequestShowDialog) Reset()      { *m = RequestShowDialog{} }
func (*RequestShowDialog) ProtoMessage() {}
func (*RequestShowDialog) Descriptor() ([]byte, []int) {
	return fileDescriptor_42a1718997f046ec, []int{113}
}
func (m *RequestShowDialog) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RequestShowDialog) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RequestShowDialog.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RequestShowDialog) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RequestShowDialog.Merge(m, src)
}
func (m *RequestShowDialog) XXX_Size() int {
	return m.Size()
}
func (m *RequestShowDialog) XXX_DiscardUnknown() {
	xxx_messageInfo_RequestShowDialog.DiscardUnknown(m)
}

var xxx_messageInfo_RequestShowDialog proto.InternalMessageInfo

func (m *RequestShowDialog) GetPeer() *OutPeer {
	if m != nil {
		return m.Peer
	}
	return nil
}

// Marking dialog as favourite
type RequestFavouriteDialog struct {
	Peer *OutPeer `protobuf:"bytes,1,opt,name=peer,proto3" json:"peer,omitempty"`
}

func (m *RequestFavouriteDialog) Reset()      { *m = RequestFavouriteDialog{} }
func (*RequestFavouriteDialog) ProtoMessage() {}
func (*RequestFavouriteDialog) Descriptor() ([]byte, []int) {
	return fileDescriptor_42a1718997f046ec, []int{114}
}
func (m *RequestFavouriteDialog) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RequestFavouriteDialog) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RequestFavouriteDialog.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RequestFavouriteDialog) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RequestFavouriteDialog.Merge(m, src)
}
func (m *RequestFavouriteDialog) XXX_Size() int {
	return m.Size()
}
func (m *RequestFavouriteDialog) XXX_DiscardUnknown() {
	xxx_messageInfo_RequestFavouriteDialog.DiscardUnknown(m)
}

var xxx_messageInfo_RequestFavouriteDialog proto.InternalMessageInfo

func (m *RequestFavouriteDialog) GetPeer() *OutPeer {
	if m != nil {
		return m.Peer
	}
	return nil
}

// Making dialog as unfavourite
type RequestUnfavouriteDialog struct {
	Peer *OutPeer `protobuf:"bytes,1,opt,name=peer,proto3" json:"peer,omitempty"`
}

func (m *RequestUnfavouriteDialog) Reset()      { *m = RequestUnfavouriteDialog{} }
func (*RequestUnfavouriteDialog) ProtoMessage() {}
func (*RequestUnfavouriteDialog) Descriptor() ([]byte, []int) {
	return fileDescriptor_42a1718997f046ec, []int{115}
}
func (m *RequestUnfavouriteDialog) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RequestUnfavouriteDialog) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RequestUnfavouriteDialog.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RequestUnfavouriteDialog) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RequestUnfavouriteDialog.Merge(m, src)
}
func (m *RequestUnfavouriteDialog) XXX_Size() int {
	return m.Size()
}
func (m *RequestUnfavouriteDialog) XXX_DiscardUnknown() {
	xxx_messageInfo_RequestUnfavouriteDialog.DiscardUnknown(m)
}

var xxx_messageInfo_RequestUnfavouriteDialog proto.InternalMessageInfo

func (m *RequestUnfavouriteDialog) GetPeer() *OutPeer {
	if m != nil {
		return m.Peer
	}
	return nil
}

// Update about dialog favourite changed
type UpdateDialogFavouriteChanged struct {
	Peer        *Peer            `protobuf:"bytes,1,opt,name=peer,proto3" json:"peer,omitempty"`
	IsFavourite *types.BoolValue `protobuf:"bytes,2,opt,name=is_favourite,json=isFavourite,proto3" json:"is_favourite,omitempty"`
}

func (m *UpdateDialogFavouriteChanged) Reset()      { *m = UpdateDialogFavouriteChanged{} }
func (*UpdateDialogFavouriteChanged) ProtoMessage() {}
func (*UpdateDialogFavouriteChanged) Descriptor() ([]byte, []int) {
	return fileDescriptor_42a1718997f046ec, []int{116}
}
func (m *UpdateDialogFavouriteChanged) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateDialogFavouriteChanged) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateDialogFavouriteChanged.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateDialogFavouriteChanged) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateDialogFavouriteChanged.Merge(m, src)
}
func (m *UpdateDialogFavouriteChanged) XXX_Size() int {
	return m.Size()
}
func (m *UpdateDialogFavouriteChanged) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateDialogFavouriteChanged.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateDialogFavouriteChanged proto.InternalMessageInfo

func (m *UpdateDialogFavouriteChanged) GetPeer() *Peer {
	if m != nil {
		return m.Peer
	}
	return nil
}

func (m *UpdateDialogFavouriteChanged) GetIsFavourite() *types.BoolValue {
	if m != nil {
		return m.IsFavourite
	}
	return nil
}

// Notifying about dialog open
type RequestNotifyDialogOpened struct {
	Peer *OutPeer `protobuf:"bytes,1,opt,name=peer,proto3" json:"peer,omitempty"`
}

func (m *RequestNotifyDialogOpened) Reset()      { *m = RequestNotifyDialogOpened{} }
func (*RequestNotifyDialogOpened) ProtoMessage() {}
func (*RequestNotifyDialogOpened) Descriptor() ([]byte, []int) {
	return fileDescriptor_42a1718997f046ec, []int{117}
}
func (m *RequestNotifyDialogOpened) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RequestNotifyDialogOpened) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RequestNotifyDialogOpened.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RequestNotifyDialogOpened) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RequestNotifyDialogOpened.Merge(m, src)
}
func (m *RequestNotifyDialogOpened) XXX_Size() int {
	return m.Size()
}
func (m *RequestNotifyDialogOpened) XXX_DiscardUnknown() {
	xxx_messageInfo_RequestNotifyDialogOpened.DiscardUnknown(m)
}

var xxx_messageInfo_RequestNotifyDialogOpened proto.InternalMessageInfo

func (m *RequestNotifyDialogOpened) GetPeer() *OutPeer {
	if m != nil {
		return m.Peer
	}
	return nil
}

// Pinned messages
type PinnedMessages struct {
	/// Messages ids
	Mids []*UUIDValue `protobuf:"bytes,1,rep,name=mids,proto3" json:"mids,omitempty"`
}

func (m *PinnedMessages) Reset()      { *m = PinnedMessages{} }
func (*PinnedMessages) ProtoMessage() {}
func (*PinnedMessages) Descriptor() ([]byte, []int) {
	return fileDescriptor_42a1718997f046ec, []int{118}
}
func (m *PinnedMessages) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PinnedMessages) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PinnedMessages.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PinnedMessages) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PinnedMessages.Merge(m, src)
}
func (m *PinnedMessages) XXX_Size() int {
	return m.Size()
}
func (m *PinnedMessages) XXX_DiscardUnknown() {
	xxx_messageInfo_PinnedMessages.DiscardUnknown(m)
}

var xxx_messageInfo_PinnedMessages proto.InternalMessageInfo

func (m *PinnedMessages) GetMids() []*UUIDValue {
	if m != nil {
		return m.Mids
	}
	return nil
}

// Pin message in conversation
type RequestPinMessage struct {
	Peer        *OutPeer   `protobuf:"bytes,1,opt,name=peer,proto3" json:"peer,omitempty"`
	Mid         *UUIDValue `protobuf:"bytes,2,opt,name=mid,proto3" json:"mid,omitempty"`
	LastPinDate int64      `protobuf:"varint,3,opt,name=last_pin_date,json=lastPinDate,proto3" json:"last_pin_date,omitempty"`
}

func (m *RequestPinMessage) Reset()      { *m = RequestPinMessage{} }
func (*RequestPinMessage) ProtoMessage() {}
func (*RequestPinMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_42a1718997f046ec, []int{119}
}
func (m *RequestPinMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RequestPinMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RequestPinMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RequestPinMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RequestPinMessage.Merge(m, src)
}
func (m *RequestPinMessage) XXX_Size() int {
	return m.Size()
}
func (m *RequestPinMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_RequestPinMessage.DiscardUnknown(m)
}

var xxx_messageInfo_RequestPinMessage proto.InternalMessageInfo

func (m *RequestPinMessage) GetPeer() *OutPeer {
	if m != nil {
		return m.Peer
	}
	return nil
}

func (m *RequestPinMessage) GetMid() *UUIDValue {
	if m != nil {
		return m.Mid
	}
	return nil
}

func (m *RequestPinMessage) GetLastPinDate() int64 {
	if m != nil {
		return m.LastPinDate
	}
	return 0
}

// Unpin message in conversation
type RequestUnpinMessage struct {
	Peer        *OutPeer   `protobuf:"bytes,1,opt,name=peer,proto3" json:"peer,omitempty"`
	Mid         *UUIDValue `protobuf:"bytes,2,opt,name=mid,proto3" json:"mid,omitempty"`
	LastPinDate int64      `protobuf:"varint,3,opt,name=last_pin_date,json=lastPinDate,proto3" json:"last_pin_date,omitempty"`
}

func (m *RequestUnpinMessage) Reset()      { *m = RequestUnpinMessage{} }
func (*RequestUnpinMessage) ProtoMessage() {}
func (*RequestUnpinMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_42a1718997f046ec, []int{120}
}
func (m *RequestUnpinMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RequestUnpinMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RequestUnpinMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RequestUnpinMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RequestUnpinMessage.Merge(m, src)
}
func (m *RequestUnpinMessage) XXX_Size() int {
	return m.Size()
}
func (m *RequestUnpinMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_RequestUnpinMessage.DiscardUnknown(m)
}

var xxx_messageInfo_RequestUnpinMessage proto.InternalMessageInfo

func (m *RequestUnpinMessage) GetPeer() *OutPeer {
	if m != nil {
		return m.Peer
	}
	return nil
}

func (m *RequestUnpinMessage) GetMid() *UUIDValue {
	if m != nil {
		return m.Mid
	}
	return nil
}

func (m *RequestUnpinMessage) GetLastPinDate() int64 {
	if m != nil {
		return m.LastPinDate
	}
	return 0
}

// Update about pinned messages changed in conversation
type UpdatePinnedMessagesChanged struct {
	Peer           *Peer           `protobuf:"bytes,1,opt,name=peer,proto3" json:"peer,omitempty"`
	PinnedMessages *PinnedMessages `protobuf:"bytes,2,opt,name=pinned_messages,json=pinnedMessages,proto3" json:"pinned_messages,omitempty"`
	ActionDate     int64           `protobuf:"varint,3,opt,name=action_date,json=actionDate,proto3" json:"action_date,omitempty"`
}

func (m *UpdatePinnedMessagesChanged) Reset()      { *m = UpdatePinnedMessagesChanged{} }
func (*UpdatePinnedMessagesChanged) ProtoMessage() {}
func (*UpdatePinnedMessagesChanged) Descriptor() ([]byte, []int) {
	return fileDescriptor_42a1718997f046ec, []int{121}
}
func (m *UpdatePinnedMessagesChanged) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdatePinnedMessagesChanged) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdatePinnedMessagesChanged.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdatePinnedMessagesChanged) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdatePinnedMessagesChanged.Merge(m, src)
}
func (m *UpdatePinnedMessagesChanged) XXX_Size() int {
	return m.Size()
}
func (m *UpdatePinnedMessagesChanged) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdatePinnedMessagesChanged.DiscardUnknown(m)
}

var xxx_messageInfo_UpdatePinnedMessagesChanged proto.InternalMessageInfo

func (m *UpdatePinnedMessagesChanged) GetPeer() *Peer {
	if m != nil {
		return m.Peer
	}
	return nil
}

func (m *UpdatePinnedMessagesChanged) GetPinnedMessages() *PinnedMessages {
	if m != nil {
		return m.PinnedMessages
	}
	return nil
}

func (m *UpdatePinnedMessagesChanged) GetActionDate() int64 {
	if m != nil {
		return m.ActionDate
	}
	return 0
}

type RequestGetUpdatedMessages struct {
	Peer      *Peer `protobuf:"bytes,1,opt,name=peer,proto3" json:"peer,omitempty"`
	FromClock int64 `protobuf:"varint,2,opt,name=from_clock,json=fromClock,proto3" json:"from_clock,omitempty"`
}

func (m *RequestGetUpdatedMessages) Reset()      { *m = RequestGetUpdatedMessages{} }
func (*RequestGetUpdatedMessages) ProtoMessage() {}
func (*RequestGetUpdatedMessages) Descriptor() ([]byte, []int) {
	return fileDescriptor_42a1718997f046ec, []int{122}
}
func (m *RequestGetUpdatedMessages) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RequestGetUpdatedMessages) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RequestGetUpdatedMessages.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RequestGetUpdatedMessages) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RequestGetUpdatedMessages.Merge(m, src)
}
func (m *RequestGetUpdatedMessages) XXX_Size() int {
	return m.Size()
}
func (m *RequestGetUpdatedMessages) XXX_DiscardUnknown() {
	xxx_messageInfo_RequestGetUpdatedMessages.DiscardUnknown(m)
}

var xxx_messageInfo_RequestGetUpdatedMessages proto.InternalMessageInfo

func (m *RequestGetUpdatedMessages) GetPeer() *Peer {
	if m != nil {
		return m.Peer
	}
	return nil
}

func (m *RequestGetUpdatedMessages) GetFromClock() int64 {
	if m != nil {
		return m.FromClock
	}
	return 0
}

type ResponseGetUpdatedMessages struct {
	Messages      []*ResponseGetUpdatedMessages_UpdatedMessage `protobuf:"bytes,1,rep,name=messages,proto3" json:"messages,omitempty"`
	PeerClock     int64                                        `protobuf:"varint,2,opt,name=peer_clock,json=peerClock,proto3" json:"peer_clock,omitempty"`
	NextAvailable bool                                         `protobuf:"varint,3,opt,name=next_available,json=nextAvailable,proto3" json:"next_available,omitempty"`
}

func (m *ResponseGetUpdatedMessages) Reset()      { *m = ResponseGetUpdatedMessages{} }
func (*ResponseGetUpdatedMessages) ProtoMessage() {}
func (*ResponseGetUpdatedMessages) Descriptor() ([]byte, []int) {
	return fileDescriptor_42a1718997f046ec, []int{123}
}
func (m *ResponseGetUpdatedMessages) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ResponseGetUpdatedMessages) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ResponseGetUpdatedMessages.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ResponseGetUpdatedMessages) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResponseGetUpdatedMessages.Merge(m, src)
}
func (m *ResponseGetUpdatedMessages) XXX_Size() int {
	return m.Size()
}
func (m *ResponseGetUpdatedMessages) XXX_DiscardUnknown() {
	xxx_messageInfo_ResponseGetUpdatedMessages.DiscardUnknown(m)
}

var xxx_messageInfo_ResponseGetUpdatedMessages proto.InternalMessageInfo

func (m *ResponseGetUpdatedMessages) GetMessages() []*ResponseGetUpdatedMessages_UpdatedMessage {
	if m != nil {
		return m.Messages
	}
	return nil
}

func (m *ResponseGetUpdatedMessages) GetPeerClock() int64 {
	if m != nil {
		return m.PeerClock
	}
	return 0
}

func (m *ResponseGetUpdatedMessages) GetNextAvailable() bool {
	if m != nil {
		return m.NextAvailable
	}
	return false
}

type ResponseGetUpdatedMessages_UpdatedMessage struct {
	Mid        *UUIDValue      `protobuf:"bytes,1,opt,name=mid,proto3" json:"mid,omitempty"`
	Message    *MessageContent `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	ModifiedAt int64           `protobuf:"varint,3,opt,name=modified_at,json=modifiedAt,proto3" json:"modified_at,omitempty"`
}

func (m *ResponseGetUpdatedMessages_UpdatedMessage) Reset() {
	*m = ResponseGetUpdatedMessages_UpdatedMessage{}
}
func (*ResponseGetUpdatedMessages_UpdatedMessage) ProtoMessage() {}
func (*ResponseGetUpdatedMessages_UpdatedMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_42a1718997f046ec, []int{123, 0}
}
func (m *ResponseGetUpdatedMessages_UpdatedMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ResponseGetUpdatedMessages_UpdatedMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ResponseGetUpdatedMessages_UpdatedMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ResponseGetUpdatedMessages_UpdatedMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResponseGetUpdatedMessages_UpdatedMessage.Merge(m, src)
}
func (m *ResponseGetUpdatedMessages_UpdatedMessage) XXX_Size() int {
	return m.Size()
}
func (m *ResponseGetUpdatedMessages_UpdatedMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_ResponseGetUpdatedMessages_UpdatedMessage.DiscardUnknown(m)
}

var xxx_messageInfo_ResponseGetUpdatedMessages_UpdatedMessage proto.InternalMessageInfo

func (m *ResponseGetUpdatedMessages_UpdatedMessage) GetMid() *UUIDValue {
	if m != nil {
		return m.Mid
	}
	return nil
}

func (m *ResponseGetUpdatedMessages_UpdatedMessage) GetMessage() *MessageContent {
	if m != nil {
		return m.Message
	}
	return nil
}

func (m *ResponseGetUpdatedMessages_UpdatedMessage) GetModifiedAt() int64 {
	if m != nil {
		return m.ModifiedAt
	}
	return 0
}

// The model describing when a user received or read a message
type MessageStatus struct {
	Clock  int64 `protobuf:"varint,1,opt,name=clock,proto3" json:"clock,omitempty"`
	UserId int32 `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (m *MessageStatus) Reset()      { *m = MessageStatus{} }
func (*MessageStatus) ProtoMessage() {}
func (*MessageStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_42a1718997f046ec, []int{124}
}
func (m *MessageStatus) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MessageStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MessageStatus.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MessageStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MessageStatus.Merge(m, src)
}
func (m *MessageStatus) XXX_Size() int {
	return m.Size()
}
func (m *MessageStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_MessageStatus.DiscardUnknown(m)
}

var xxx_messageInfo_MessageStatus proto.InternalMessageInfo

func (m *MessageStatus) GetClock() int64 {
	if m != nil {
		return m.Clock
	}
	return 0
}

func (m *MessageStatus) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

// Load message statuses for every user in conversation reads
type RequestMessageReads struct {
	Mid           *UUIDValue `protobuf:"bytes,1,opt,name=mid,proto3" json:"mid,omitempty"`
	Limit         int32      `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
	TimestampFrom int64      `protobuf:"varint,3,opt,name=timestamp_from,json=timestampFrom,proto3" json:"timestamp_from,omitempty"`
}

func (m *RequestMessageReads) Reset()      { *m = RequestMessageReads{} }
func (*RequestMessageReads) ProtoMessage() {}
func (*RequestMessageReads) Descriptor() ([]byte, []int) {
	return fileDescriptor_42a1718997f046ec, []int{125}
}
func (m *RequestMessageReads) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RequestMessageReads) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RequestMessageReads.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RequestMessageReads) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RequestMessageReads.Merge(m, src)
}
func (m *RequestMessageReads) XXX_Size() int {
	return m.Size()
}
func (m *RequestMessageReads) XXX_DiscardUnknown() {
	xxx_messageInfo_RequestMessageReads.DiscardUnknown(m)
}

var xxx_messageInfo_RequestMessageReads proto.InternalMessageInfo

func (m *RequestMessageReads) GetMid() *UUIDValue {
	if m != nil {
		return m.Mid
	}
	return nil
}

func (m *RequestMessageReads) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *RequestMessageReads) GetTimestampFrom() int64 {
	if m != nil {
		return m.TimestampFrom
	}
	return 0
}

// Load message statuses for every user in conversation receives
type RequestMessageReceives struct {
	Mid           *UUIDValue `protobuf:"bytes,1,opt,name=mid,proto3" json:"mid,omitempty"`
	Limit         int32      `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
	TimestampFrom int64      `protobuf:"varint,3,opt,name=timestamp_from,json=timestampFrom,proto3" json:"timestamp_from,omitempty"`
}

func (m *RequestMessageReceives) Reset()      { *m = RequestMessageReceives{} }
func (*RequestMessageReceives) ProtoMessage() {}
func (*RequestMessageReceives) Descriptor() ([]byte, []int) {
	return fileDescriptor_42a1718997f046ec, []int{126}
}
func (m *RequestMessageReceives) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RequestMessageReceives) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RequestMessageReceives.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RequestMessageReceives) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RequestMessageReceives.Merge(m, src)
}
func (m *RequestMessageReceives) XXX_Size() int {
	return m.Size()
}
func (m *RequestMessageReceives) XXX_DiscardUnknown() {
	xxx_messageInfo_RequestMessageReceives.DiscardUnknown(m)
}

var xxx_messageInfo_RequestMessageReceives proto.InternalMessageInfo

func (m *RequestMessageReceives) GetMid() *UUIDValue {
	if m != nil {
		return m.Mid
	}
	return nil
}

func (m *RequestMessageReceives) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *RequestMessageReceives) GetTimestampFrom() int64 {
	if m != nil {
		return m.TimestampFrom
	}
	return 0
}

// Response with the list of message statuses reads
type ResponseMessageReads struct {
	Status        []*MessageStatus `protobuf:"bytes,1,rep,name=status,proto3" json:"status,omitempty"`
	TimestampTill int64            `protobuf:"varint,2,opt,name=timestamp_till,json=timestampTill,proto3" json:"timestamp_till,omitempty"`
}

func (m *ResponseMessageReads) Reset()      { *m = ResponseMessageReads{} }
func (*ResponseMessageReads) ProtoMessage() {}
func (*ResponseMessageReads) Descriptor() ([]byte, []int) {
	return fileDescriptor_42a1718997f046ec, []int{127}
}
func (m *ResponseMessageReads) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ResponseMessageReads) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ResponseMessageReads.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ResponseMessageReads) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResponseMessageReads.Merge(m, src)
}
func (m *ResponseMessageReads) XXX_Size() int {
	return m.Size()
}
func (m *ResponseMessageReads) XXX_DiscardUnknown() {
	xxx_messageInfo_ResponseMessageReads.DiscardUnknown(m)
}

var xxx_messageInfo_ResponseMessageReads proto.InternalMessageInfo

func (m *ResponseMessageReads) GetStatus() []*MessageStatus {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *ResponseMessageReads) GetTimestampTill() int64 {
	if m != nil {
		return m.TimestampTill
	}
	return 0
}

// Response with the list of message statuses receives
type ResponseMessageReceives struct {
	Status        []*MessageStatus `protobuf:"bytes,1,rep,name=status,proto3" json:"status,omitempty"`
	TimestampTill int64            `protobuf:"varint,2,opt,name=timestamp_till,json=timestampTill,proto3" json:"timestamp_till,omitempty"`
}

func (m *ResponseMessageReceives) Reset()      { *m = ResponseMessageReceives{} }
func (*ResponseMessageReceives) ProtoMessage() {}
func (*ResponseMessageReceives) Descriptor() ([]byte, []int) {
	return fileDescriptor_42a1718997f046ec, []int{128}
}
func (m *ResponseMessageReceives) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ResponseMessageReceives) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ResponseMessageReceives.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ResponseMessageReceives) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResponseMessageReceives.Merge(m, src)
}
func (m *ResponseMessageReceives) XXX_Size() int {
	return m.Size()
}
func (m *ResponseMessageReceives) XXX_DiscardUnknown() {
	xxx_messageInfo_ResponseMessageReceives.DiscardUnknown(m)
}

var xxx_messageInfo_ResponseMessageReceives proto.InternalMessageInfo

func (m *ResponseMessageReceives) GetStatus() []*MessageStatus {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *ResponseMessageReceives) GetTimestampTill() int64 {
	if m != nil {
		return m.TimestampTill
	}
	return 0
}

func init() {
	proto.RegisterEnum("dialog.InteractiveMediaStyle", InteractiveMediaStyle_name, InteractiveMediaStyle_value)
	proto.RegisterEnum("dialog.MessageState", MessageState_name, MessageState_value)
	proto.RegisterEnum("dialog.ListLoadMode", ListLoadMode_name, ListLoadMode_value)
	proto.RegisterEnum("dialog.DialogsFilter", DialogsFilter_name, DialogsFilter_value)
	proto.RegisterType((*MessageAttributes)(nil), "dialog.MessageAttributes")
	proto.RegisterType((*QuotedMessage)(nil), "dialog.QuotedMessage")
	proto.RegisterType((*MessageMedia)(nil), "dialog.MessageMedia")
	proto.RegisterType((*WebpageMedia)(nil), "dialog.WebpageMedia")
	proto.RegisterType((*ImageMedia)(nil), "dialog.ImageMedia")
	proto.RegisterType((*AudioMedia)(nil), "dialog.AudioMedia")
	proto.RegisterType((*InteractiveMediaWidget)(nil), "dialog.InteractiveMediaWidget")
	proto.RegisterType((*InteractiveMediaButton)(nil), "dialog.InteractiveMediaButton")
	proto.RegisterType((*InteractiveMediaSelect)(nil), "dialog.InteractiveMediaSelect")
	proto.RegisterType((*InteractiveMediaSelectOption)(nil), "dialog.InteractiveMediaSelectOption")
	proto.RegisterType((*InteractiveMedia)(nil), "dialog.InteractiveMedia")
	proto.RegisterType((*InteractiveMediaTranslation)(nil), "dialog.InteractiveMediaTranslation")
	proto.RegisterType((*InteractiveMediaTranslationGroup)(nil), "dialog.InteractiveMediaTranslationGroup")
	proto.RegisterType((*InteractiveMediaGroup)(nil), "dialog.InteractiveMediaGroup")
	proto.RegisterType((*InteractiveMediaConfirm)(nil), "dialog.InteractiveMediaConfirm")
	proto.RegisterType((*UpdateInteractiveMediaEvent)(nil), "dialog.UpdateInteractiveMediaEvent")
	proto.RegisterType((*RequestDoInteractiveMediaAction)(nil), "dialog.RequestDoInteractiveMediaAction")
	proto.RegisterType((*MessageContent)(nil), "dialog.MessageContent")
	proto.RegisterType((*TextMessage)(nil), "dialog.TextMessage")
	proto.RegisterType((*Mention)(nil), "dialog.Mention")
	proto.RegisterType((*TextMessageEx)(nil), "dialog.TextMessageEx")
	proto.RegisterType((*TextExMarkdown)(nil), "dialog.TextExMarkdown")
	proto.RegisterType((*TextModernMessage)(nil), "dialog.TextModernMessage")
	proto.RegisterType((*ParagraphStyle)(nil), "dialog.ParagraphStyle")
	proto.RegisterType((*TextModernAttach)(nil), "dialog.TextModernAttach")
	proto.RegisterType((*TextModernField)(nil), "dialog.TextModernField")
	proto.RegisterType((*TextCommand)(nil), "dialog.TextCommand")
	proto.RegisterType((*ServiceMessage)(nil), "dialog.ServiceMessage")
	proto.RegisterType((*ServiceEx)(nil), "dialog.ServiceEx")
	proto.RegisterType((*ServiceExUserInvited)(nil), "dialog.ServiceExUserInvited")
	proto.RegisterType((*ServiceExUserJoined)(nil), "dialog.ServiceExUserJoined")
	proto.RegisterType((*ServiceExUserKicked)(nil), "dialog.ServiceExUserKicked")
	proto.RegisterType((*ServiceExUserLeft)(nil), "dialog.ServiceExUserLeft")
	proto.RegisterType((*ServiceExGroupCreated)(nil), "dialog.ServiceExGroupCreated")
	proto.RegisterType((*ServiceExChangedShortname)(nil), "dialog.ServiceExChangedShortname")
	proto.RegisterType((*ServiceExChangedTitle)(nil), "dialog.ServiceExChangedTitle")
	proto.RegisterType((*ServiceExChangedTopic)(nil), "dialog.ServiceExChangedTopic")
	proto.RegisterType((*ServiceExChangedAbout)(nil), "dialog.ServiceExChangedAbout")
	proto.RegisterType((*ServiceExChangedAvatar)(nil), "dialog.ServiceExChangedAvatar")
	proto.RegisterType((*ServiceExContactRegistered)(nil), "dialog.ServiceExContactRegistered")
	proto.RegisterType((*ServiceExPhoneMissed)(nil), "dialog.ServiceExPhoneMissed")
	proto.RegisterType((*ServiceExPhoneCall)(nil), "dialog.ServiceExPhoneCall")
	proto.RegisterType((*ServiceExPhoneRejected)(nil), "dialog.ServiceExPhoneRejected")
	proto.RegisterType((*ServiceExChatArchived)(nil), "dialog.ServiceExChatArchived")
	proto.RegisterType((*ServiceExChatRestored)(nil), "dialog.ServiceExChatRestored")
	proto.RegisterType((*DocumentMessage)(nil), "dialog.DocumentMessage")
	proto.RegisterType((*DocumentEx)(nil), "dialog.DocumentEx")
	proto.RegisterType((*DocumentExPhoto)(nil), "dialog.DocumentExPhoto")
	proto.RegisterType((*DocumentExVideo)(nil), "dialog.DocumentExVideo")
	proto.RegisterType((*DocumentExVoice)(nil), "dialog.DocumentExVoice")
	proto.RegisterType((*JsonMessage)(nil), "dialog.JsonMessage")
	proto.RegisterType((*UnsupportedMessage)(nil), "dialog.UnsupportedMessage")
	proto.RegisterType((*StickerMessage)(nil), "dialog.StickerMessage")
	proto.RegisterType((*BinaryMessage)(nil), "dialog.BinaryMessage")
	proto.RegisterType((*EmptyMessage)(nil), "dialog.EmptyMessage")
	proto.RegisterType((*DeletedMessage)(nil), "dialog.DeletedMessage")
	proto.RegisterType((*DialogShort)(nil), "dialog.DialogShort")
	proto.RegisterType((*DialogGroup)(nil), "dialog.DialogGroup")
	proto.RegisterType((*MessageReaction)(nil), "dialog.MessageReaction")
	proto.RegisterType((*SearchPredicate)(nil), "dialog.SearchPredicate")
	proto.RegisterType((*RequestSendMessage)(nil), "dialog.RequestSendMessage")
	proto.RegisterType((*RequestUpdateMessage)(nil), "dialog.RequestUpdateMessage")
	proto.RegisterType((*RequestMessageReceived)(nil), "dialog.RequestMessageReceived")
	proto.RegisterType((*RequestMessageRead)(nil), "dialog.RequestMessageRead")
	proto.RegisterType((*RequestDeleteMessageObsolete)(nil), "dialog.RequestDeleteMessageObsolete")
	proto.RegisterType((*RequestDeleteMessage)(nil), "dialog.RequestDeleteMessage")
	proto.RegisterType((*RequestClearChat)(nil), "dialog.RequestClearChat")
	proto.RegisterType((*RequestDeleteChat)(nil), "dialog.RequestDeleteChat")
	proto.RegisterType((*RequestArchiveChat)(nil), "dialog.RequestArchiveChat")
	proto.RegisterType((*RequestMessageSetReaction)(nil), "dialog.RequestMessageSetReaction")
	proto.RegisterType((*RequestMessageRemoveReaction)(nil), "dialog.RequestMessageRemoveReaction")
	proto.RegisterType((*ResponseReactionsResponse)(nil), "dialog.ResponseReactionsResponse")
	proto.RegisterType((*ResponseSendMessage)(nil), "dialog.ResponseSendMessage")
	proto.RegisterType((*UpdateMessage)(nil), "dialog.UpdateMessage")
	proto.RegisterType((*UpdateMessageContentChanged)(nil), "dialog.UpdateMessageContentChanged")
	proto.RegisterType((*UpdateMessageSent)(nil), "dialog.UpdateMessageSent")
	proto.RegisterType((*UpdateMessageReceived)(nil), "dialog.UpdateMessageReceived")
	proto.RegisterType((*UpdateMessageRead)(nil), "dialog.UpdateMessageRead")
	proto.RegisterType((*UpdateMessageReadByMe)(nil), "dialog.UpdateMessageReadByMe")
	proto.RegisterType((*UpdateMessageDelete)(nil), "dialog.UpdateMessageDelete")
	proto.RegisterType((*UpdateChatClear)(nil), "dialog.UpdateChatClear")
	proto.RegisterType((*UpdateChatDelete)(nil), "dialog.UpdateChatDelete")
	proto.RegisterType((*UpdateChatArchive)(nil), "dialog.UpdateChatArchive")
	proto.RegisterType((*UpdateChatGroupsChanged)(nil), "dialog.UpdateChatGroupsChanged")
	proto.RegisterType((*UpdateReactionsUpdate)(nil), "dialog.UpdateReactionsUpdate")
	proto.RegisterType((*UpdateMessageRejectedByHook)(nil), "dialog.UpdateMessageRejectedByHook")
	proto.RegisterType((*UpdateMessageEditRejectedByHook)(nil), "dialog.UpdateMessageEditRejectedByHook")
	proto.RegisterType((*UpdateThreadCreated)(nil), "dialog.UpdateThreadCreated")
	proto.RegisterType((*UpdateThreadLifted)(nil), "dialog.UpdateThreadLifted")
	proto.RegisterType((*ReferencedMessages)(nil), "dialog.ReferencedMessages")
	proto.RegisterType((*HistoryMessage)(nil), "dialog.HistoryMessage")
	proto.RegisterType((*RequestLoadHistory)(nil), "dialog.RequestLoadHistory")
	proto.RegisterType((*ResponseLoadHistory)(nil), "dialog.ResponseLoadHistory")
	proto.RegisterType((*RequestHistoryDifference)(nil), "dialog.RequestHistoryDifference")
	proto.RegisterType((*ResponseHistoryDifference)(nil), "dialog.ResponseHistoryDifference")
	proto.RegisterType((*Dialog)(nil), "dialog.Dialog")
	proto.RegisterType((*RequestLoadDialogs)(nil), "dialog.RequestLoadDialogs")
	proto.RegisterType((*ResponseLoadDialogs)(nil), "dialog.ResponseLoadDialogs")
	proto.RegisterType((*DialogData)(nil), "dialog.DialogData")
	proto.RegisterType((*DialogIndex)(nil), "dialog.DialogIndex")
	proto.RegisterType((*DialogListEntry)(nil), "dialog.DialogListEntry")
	proto.RegisterType((*RequestFetchDialogIndex)(nil), "dialog.RequestFetchDialogIndex")
	proto.RegisterType((*ResponseFetchDialogIndex)(nil), "dialog.ResponseFetchDialogIndex")
	proto.RegisterType((*RequestDialogListDifference)(nil), "dialog.RequestDialogListDifference")
	proto.RegisterType((*ResponseDialogListDifference)(nil), "dialog.ResponseDialogListDifference")
	proto.RegisterType((*RequestGetLastConversationMessages)(nil), "dialog.RequestGetLastConversationMessages")
	proto.RegisterType((*ResponseGetLastConversationMessages)(nil), "dialog.ResponseGetLastConversationMessages")
	proto.RegisterType((*ResponseGetLastConversationMessages_Pair)(nil), "dialog.ResponseGetLastConversationMessages.Pair")
	proto.RegisterType((*RequestLoadArchived)(nil), "dialog.RequestLoadArchived")
	proto.RegisterType((*ResponseLoadArchived)(nil), "dialog.ResponseLoadArchived")
	proto.RegisterType((*RequestLoadGroupedDialogs)(nil), "dialog.RequestLoadGroupedDialogs")
	proto.RegisterType((*ResponseLoadGroupedDialogs)(nil), "dialog.ResponseLoadGroupedDialogs")
	proto.RegisterType((*ResponseDialogsOrder)(nil), "dialog.ResponseDialogsOrder")
	proto.RegisterType((*RequestHideDialog)(nil), "dialog.RequestHideDialog")
	proto.RegisterType((*RequestShowDialog)(nil), "dialog.RequestShowDialog")
	proto.RegisterType((*RequestFavouriteDialog)(nil), "dialog.RequestFavouriteDialog")
	proto.RegisterType((*RequestUnfavouriteDialog)(nil), "dialog.RequestUnfavouriteDialog")
	proto.RegisterType((*UpdateDialogFavouriteChanged)(nil), "dialog.UpdateDialogFavouriteChanged")
	proto.RegisterType((*RequestNotifyDialogOpened)(nil), "dialog.RequestNotifyDialogOpened")
	proto.RegisterType((*PinnedMessages)(nil), "dialog.PinnedMessages")
	proto.RegisterType((*RequestPinMessage)(nil), "dialog.RequestPinMessage")
	proto.RegisterType((*RequestUnpinMessage)(nil), "dialog.RequestUnpinMessage")
	proto.RegisterType((*UpdatePinnedMessagesChanged)(nil), "dialog.UpdatePinnedMessagesChanged")
	proto.RegisterType((*RequestGetUpdatedMessages)(nil), "dialog.RequestGetUpdatedMessages")
	proto.RegisterType((*ResponseGetUpdatedMessages)(nil), "dialog.ResponseGetUpdatedMessages")
	proto.RegisterType((*ResponseGetUpdatedMessages_UpdatedMessage)(nil), "dialog.ResponseGetUpdatedMessages.UpdatedMessage")
	proto.RegisterType((*MessageStatus)(nil), "dialog.MessageStatus")
	proto.RegisterType((*RequestMessageReads)(nil), "dialog.RequestMessageReads")
	proto.RegisterType((*RequestMessageReceives)(nil), "dialog.RequestMessageReceives")
	proto.RegisterType((*ResponseMessageReads)(nil), "dialog.ResponseMessageReads")
	proto.RegisterType((*ResponseMessageReceives)(nil), "dialog.ResponseMessageReceives")
}

func init() { proto.RegisterFile("messaging.proto", fileDescriptor_42a1718997f046ec) }

var fileDescriptor_42a1718997f046ec = []byte{
	// 7075 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xdc, 0x7d, 0x4d, 0x6c, 0x1c, 0xc9,
	0x75, 0x30, 0x7b, 0x86, 0x3f, 0x33, 0x6f, 0x86, 0x43, 0xb2, 0x44, 0x49, 0x14, 0x25, 0x51, 0x52,
	0x6b, 0xd7, 0xab, 0x95, 0xb5, 0x94, 0x56, 0x6b, 0x69, 0xbd, 0xda, 0x5d, 0x4b, 0x23, 0xfe, 0x88,
	0xdc, 0x25, 0x45, 0x7a, 0x48, 0x69, 0xbd, 0xb6, 0xbf, 0x6f, 0xdc, 0x9c, 0xae, 0x21, 0x5b, 0x9a,
	0xe9, 0x1e, 0x75, 0xf7, 0x50, 0xa2, 0x0d, 0x24, 0x46, 0xe0, 0xc4, 0xf1, 0x22, 0x06, 0xbc, 0x48,
	0x0c, 0xc4, 0x48, 0x1c, 0x7b, 0x73, 0x48, 0x82, 0x20, 0x87, 0xe4, 0x12, 0xe7, 0x10, 0xe4, 0xe0,
	0x24, 0x70, 0x02, 0x04, 0x89, 0x13, 0xc7, 0x88, 0x2f, 0x4e, 0x62, 0x6d, 0x0e, 0x81, 0x81, 0x00,
	0x86, 0x0f, 0x39, 0x05, 0x41, 0x50, 0x7f, 0xdd, 0xd5, 0xdd, 0xd5, 0xf3, 0x27, 0x6f, 0xd6, 0xce,
	0x89, 0xd3, 0x5d, 0xef, 0xaf, 0x5e, 0xbd, 0x7a, 0xef, 0xd5, 0xab, 0xaa, 0x26, 0x4c, 0x34, 0xb1,
	0xe7, 0x19, 0xbb, 0x96, 0xbd, 0x3b, 0xdf, 0x72, 0x1d, 0xdf, 0x41, 0xa3, 0xa6, 0x65, 0x34, 0x9c,
	0xdd, 0xd9, 0xb9, 0x5d, 0xc7, 0xd9, 0x6d, 0xe0, 0x8b, 0xf4, 0xed, 0x4e, 0xbb, 0x7e, 0xf1, 0xa1,
	0x6b, 0xb4, 0x5a, 0xd8, 0xf5, 0x18, 0xdc, 0xec, 0x09, 0xde, 0x6e, 0xb4, 0xac, 0x8b, 0x86, 0x6d,
	0x3b, 0xbe, 0xe1, 0x5b, 0x8e, 0x2d, 0x5a, 0xa7, 0x4c, 0x5c, 0xb7, 0x6c, 0x4b, 0x7e, 0x75, 0xa8,
	0x69, 0x79, 0x35, 0xdc, 0x68, 0x18, 0x36, 0x76, 0xda, 0xe2, 0x65, 0xa1, 0x85, 0x43, 0x92, 0x87,
	0x9b, 0xd8, 0xb4, 0x8c, 0xaa, 0x61, 0x9b, 0xd5, 0xba, 0xd5, 0xc0, 0xc1, 0x6b, 0xaf, 0x66, 0x34,
	0x8c, 0xd6, 0xce, 0x45, 0xfe, 0x97, 0xbd, 0xd6, 0xff, 0x3e, 0x03, 0x53, 0xeb, 0x54, 0x78, 0x5c,
	0xf6, 0x7d, 0xd7, 0xda, 0x69, 0xfb, 0xd8, 0x43, 0x6b, 0x50, 0xb4, 0xbc, 0x6a, 0x13, 0xdb, 0x84,
	0x35, 0x36, 0x67, 0xb4, 0xd3, 0xda, 0xb9, 0xc2, 0xe5, 0xd9, 0x79, 0x26, 0xed, 0xbc, 0xe8, 0xcd,
	0xfc, 0x4d, 0xc7, 0x69, 0xdc, 0x35, 0x1a, 0x6d, 0x7c, 0x73, 0xfc, 0xad, 0x1f, 0x5e, 0xca, 0xc3,
	0xd8, 0xbe, 0xe5, 0x59, 0x3b, 0x0d, 0x5c, 0x29, 0x58, 0xde, 0xba, 0xc0, 0x46, 0x9b, 0x50, 0xb2,
	0xbc, 0xea, 0x9e, 0xb5, 0xbb, 0xd7, 0xb0, 0x76, 0xf7, 0x7c, 0x6c, 0xce, 0x64, 0xfa, 0xa5, 0x37,
	0x6e, 0x79, 0x2b, 0x21, 0x3e, 0x7a, 0x0d, 0x0a, 0x96, 0x57, 0xb5, 0x1d, 0xdf, 0xaa, 0x5b, 0xd8,
	0x9c, 0xc9, 0xf6, 0x4b, 0x0e, 0x2c, 0xef, 0x36, 0x47, 0x46, 0x9b, 0x30, 0x61, 0x79, 0x55, 0xc7,
	0x6e, 0x1c, 0x54, 0xeb, 0x8e, 0x5b, 0x3d, 0x70, 0xda, 0x33, 0xc3, 0xfd, 0xd2, 0x2b, 0x5a, 0xde,
	0x86, 0xdd, 0x38, 0x58, 0x76, 0xdc, 0x37, 0x9d, 0xb6, 0xfe, 0x27, 0x19, 0x18, 0xff, 0x68, 0xdb,
	0xf1, 0xb1, 0xc9, 0x35, 0x8b, 0x2e, 0x00, 0x30, 0x0b, 0xc1, 0x55, 0x8b, 0x69, 0x33, 0x1b, 0x27,
	0x91, 0xe7, 0x00, 0xab, 0x26, 0xba, 0x02, 0x13, 0xad, 0xf6, 0x4e, 0xc3, 0xaa, 0x55, 0x77, 0x5d,
	0xa7, 0xdd, 0x22, 0x28, 0x44, 0x61, 0x23, 0x09, 0xa5, 0x30, 0xa8, 0x5b, 0x04, 0x68, 0xd5, 0x44,
	0x2f, 0x40, 0xc9, 0xc3, 0xb6, 0x89, 0xdd, 0x6a, 0xdb, 0xc3, 0x2e, 0xc1, 0xca, 0xaa, 0xb0, 0x8a,
	0x0c, 0xe8, 0x8e, 0x87, 0xdd, 0x55, 0x13, 0x5d, 0x82, 0xa2, 0x90, 0xcc, 0x34, 0x7c, 0x4c, 0xbb,
	0x9e, 0x90, 0xad, 0xc0, 0x41, 0x16, 0x0d, 0x1f, 0xa3, 0x4f, 0xc0, 0x91, 0x07, 0xb4, 0x73, 0x55,
	0x81, 0x58, 0x73, 0x6c, 0x1f, 0xdb, 0xfe, 0xcc, 0x08, 0x55, 0xdb, 0x91, 0x79, 0x66, 0xfb, 0xf3,
	0xbc, 0xf3, 0x0b, 0xac, 0x35, 0x4e, 0x73, 0xfa, 0x81, 0xac, 0x21, 0x0e, 0xa4, 0x7f, 0x3e, 0x03,
	0x45, 0xfe, 0x6a, 0x9d, 0x98, 0x31, 0x7a, 0x15, 0xc6, 0x1e, 0xe2, 0x9d, 0x96, 0xb1, 0x8b, 0xb9,
	0x11, 0x4e, 0x0b, 0xf2, 0x6f, 0xb0, 0xd7, 0x14, 0x2c, 0x4e, 0x5c, 0xe0, 0xa0, 0x17, 0x61, 0xc4,
	0x6a, 0x12, 0x64, 0x66, 0x71, 0x48, 0x20, 0xaf, 0x36, 0xd3, 0x50, 0x19, 0x3c, 0x41, 0x34, 0xda,
	0xa6, 0xe5, 0x70, 0xdb, 0x0a, 0x10, 0xcb, 0xe4, 0xa5, 0x1a, 0x91, 0xc2, 0xa3, 0x65, 0x18, 0x33,
	0x6a, 0x74, 0xc6, 0xce, 0x8c, 0x9e, 0xce, 0x9e, 0x2b, 0x5c, 0x3e, 0x19, 0xf0, 0xb4, 0x7d, 0xec,
	0x92, 0xb6, 0x7d, 0xc6, 0x99, 0x8e, 0x5b, 0x42, 0x72, 0x8e, 0xac, 0xff, 0x7a, 0x06, 0x8a, 0x72,
	0x17, 0xd1, 0x2b, 0x90, 0x6d, 0xbb, 0x0d, 0xae, 0x85, 0x13, 0x09, 0xdb, 0xdc, 0xf2, 0x5d, 0xcb,
	0xde, 0x65, 0xd6, 0x59, 0x7c, 0xeb, 0x87, 0x97, 0x72, 0x30, 0xba, 0x67, 0x99, 0x26, 0xb6, 0x2b,
	0x04, 0x0d, 0xdd, 0x80, 0x11, 0xdf, 0xf2, 0x1b, 0x42, 0x11, 0xfd, 0xe0, 0x33, 0x44, 0xb4, 0x06,
	0x05, 0x13, 0x7b, 0x35, 0xd7, 0x6a, 0x11, 0x01, 0xb9, 0x5e, 0xfa, 0xa1, 0x23, 0xa3, 0xa3, 0x6b,
	0x62, 0x60, 0xd8, 0x5c, 0x3b, 0x1c, 0x19, 0x98, 0x35, 0xa7, 0x46, 0xfd, 0xa0, 0x7a, 0x6c, 0xf4,
	0x15, 0x80, 0x70, 0xfc, 0x42, 0x4a, 0xda, 0x40, 0x94, 0xc2, 0x01, 0x25, 0x94, 0xd8, 0x98, 0xc7,
	0x28, 0x51, 0x90, 0x54, 0x4a, 0x14, 0x45, 0xff, 0x47, 0x0d, 0x8e, 0xc4, 0x07, 0xf8, 0x0d, 0xcb,
	0xdc, 0xc5, 0x3e, 0xfa, 0x18, 0x1c, 0xb1, 0x62, 0x2d, 0x37, 0xdb, 0xbe, 0xef, 0xd8, 0x9c, 0xcf,
	0x5c, 0x9a, 0x81, 0x30, 0xa8, 0x95, 0xa1, 0x4a, 0x0a, 0xbe, 0x8a, 0xf2, 0x16, 0x6e, 0xe0, 0x9a,
	0xcf, 0x47, 0x39, 0x95, 0x32, 0x83, 0x52, 0x51, 0x66, 0x2d, 0x37, 0x47, 0x61, 0x78, 0xc7, 0x31,
	0x0f, 0xf4, 0xcf, 0x2a, 0xba, 0xc5, 0x99, 0x9f, 0x85, 0x91, 0x7d, 0x32, 0xca, 0xb4, 0x17, 0xf9,
	0x84, 0x5a, 0x68, 0x1b, 0x2a, 0xc3, 0x48, 0xc3, 0xd8, 0xc1, 0x8d, 0x9e, 0xcc, 0x2e, 0x4e, 0x82,
	0x62, 0xea, 0xff, 0xa5, 0x10, 0x81, 0x49, 0x89, 0xd6, 0x61, 0xcc, 0x69, 0xb1, 0xb9, 0xa6, 0xd1,
	0xb9, 0xf6, 0x54, 0xe7, 0x0e, 0x6f, 0xb4, 0x54, 0x23, 0x28, 0x68, 0xfc, 0x04, 0x84, 0x45, 0x9b,
	0x30, 0x6e, 0xe2, 0xba, 0xd1, 0x6e, 0xf8, 0x55, 0xa6, 0x9c, 0x6c, 0xff, 0xa4, 0x8a, 0x9c, 0x02,
	0x6d, 0xd4, 0xf7, 0xe0, 0x44, 0xa7, 0xce, 0xf4, 0x36, 0x0c, 0x67, 0xe5, 0x9e, 0xe5, 0x53, 0x14,
	0xfd, 0x4b, 0x19, 0x98, 0x8c, 0xb3, 0x42, 0x27, 0x21, 0xc3, 0x23, 0x56, 0x02, 0x2d, 0x63, 0x99,
	0x68, 0x09, 0x46, 0x1f, 0x52, 0x2b, 0xef, 0x66, 0x71, 0x6c, 0x2e, 0xc4, 0x49, 0x70, 0x64, 0x74,
	0x13, 0x46, 0x3c, 0xff, 0xa0, 0xc1, 0xd4, 0x55, 0x4a, 0x77, 0x99, 0x5b, 0x04, 0x28, 0x21, 0x3e,
	0x45, 0x45, 0x2b, 0x30, 0x56, 0x73, 0xec, 0xba, 0xe5, 0x36, 0xb9, 0x4f, 0x39, 0x95, 0x46, 0x65,
	0x81, 0x81, 0x25, 0xec, 0x80, 0xa3, 0xeb, 0x06, 0x1c, 0x8f, 0xa3, 0x6c, 0xbb, 0x86, 0xed, 0x35,
	0xa8, 0x03, 0xe8, 0xa6, 0x92, 0x60, 0x40, 0x32, 0xe9, 0x03, 0xa2, 0x7f, 0x55, 0x83, 0xd3, 0x1d,
	0x78, 0xd0, 0xd0, 0x80, 0x9e, 0x85, 0x5c, 0xc3, 0xb0, 0x77, 0xdb, 0xc2, 0xb9, 0x25, 0x88, 0x05,
	0xcd, 0xe8, 0x36, 0xe4, 0x78, 0x34, 0xf6, 0x66, 0x32, 0x74, 0x2a, 0x9c, 0x4d, 0xeb, 0xbd, 0xc4,
	0x26, 0x41, 0x4f, 0xd0, 0xd0, 0xbf, 0x95, 0x81, 0xc3, 0xca, 0x78, 0x85, 0xca, 0x61, 0x7c, 0x63,
	0x73, 0x6e, 0x26, 0xd5, 0x7d, 0xa5, 0x84, 0xb6, 0x9f, 0xba, 0x58, 0xf4, 0x09, 0x28, 0xfa, 0xa1,
	0x52, 0xbc, 0x99, 0x61, 0xda, 0xaf, 0x73, 0x3d, 0x28, 0x50, 0x19, 0xc2, 0x23, 0xc4, 0xf4, 0x77,
	0x32, 0x70, 0x34, 0xc5, 0x00, 0xd1, 0x75, 0x18, 0xf6, 0xf1, 0x23, 0xbf, 0xa7, 0x98, 0x1e, 0x63,
	0x42, 0x11, 0x89, 0xc7, 0xea, 0x5d, 0x93, 0x71, 0x4b, 0x64, 0xaa, 0x7c, 0x19, 0x32, 0xce, 0xfd,
	0x41, 0xdc, 0x54, 0xc6, 0xb9, 0x8f, 0x96, 0x60, 0xcc, 0xb4, 0xbc, 0xa6, 0xe5, 0x79, 0x7c, 0xce,
	0xf5, 0x45, 0x41, 0xe0, 0xea, 0x7f, 0xac, 0xc1, 0xf1, 0x3b, 0x2d, 0x92, 0x7f, 0xc6, 0x35, 0xb5,
	0xb4, 0x8f, 0x6d, 0x1f, 0x5d, 0x86, 0x6c, 0xd3, 0x12, 0xab, 0x90, 0x29, 0x31, 0x2e, 0x77, 0xee,
	0xac, 0x2e, 0x2a, 0xe9, 0x12, 0x60, 0x3e, 0x4b, 0x33, 0x5d, 0x67, 0x69, 0xb6, 0x83, 0xdb, 0x3c,
	0x05, 0xd9, 0xb6, 0x65, 0xd2, 0xae, 0x25, 0xd2, 0x68, 0xd2, 0xa2, 0x7f, 0x43, 0x83, 0x53, 0x15,
	0xfc, 0xa0, 0x8d, 0x3d, 0x7f, 0xd1, 0x89, 0xcb, 0x5e, 0xa6, 0xe6, 0xfe, 0x7e, 0x09, 0x7f, 0xed,
	0xc4, 0xe3, 0xeb, 0xc7, 0xe0, 0xa8, 0xd5, 0x9c, 0x37, 0x1b, 0xbb, 0xf3, 0xbb, 0x6e, 0xab, 0x36,
	0x7f, 0xcb, 0x6d, 0xd5, 0xb8, 0xb4, 0xfa, 0x3f, 0x0f, 0x43, 0x29, 0x9a, 0x7b, 0xa3, 0x17, 0xa1,
	0x40, 0x8c, 0x8a, 0xbf, 0xe5, 0x02, 0x1f, 0x12, 0x02, 0x6f, 0x87, 0x4d, 0x2b, 0x43, 0x15, 0x19,
	0x12, 0xdd, 0x20, 0x0b, 0x0f, 0x77, 0xdf, 0xaa, 0x61, 0x81, 0x9b, 0x89, 0xae, 0x04, 0xb6, 0x22,
	0xad, 0x2b, 0x43, 0x95, 0x18, 0x3c, 0x5a, 0x80, 0x09, 0xd3, 0xa9, 0xb5, 0xc9, 0x82, 0x53, 0x90,
	0x60, 0x16, 0x79, 0x54, 0x90, 0x58, 0x8c, 0x36, 0xaf, 0x0c, 0x55, 0xe2, 0x18, 0x44, 0xfe, 0x7b,
	0x9e, 0x63, 0x0b, 0x02, 0xc3, 0x51, 0xf9, 0x5f, 0x0b, 0x9b, 0x88, 0xfc, 0x12, 0x24, 0x5a, 0x03,
	0xd4, 0xb6, 0xbd, 0x76, 0xab, 0xe5, 0xb8, 0xe1, 0x8a, 0x84, 0xaf, 0x66, 0x66, 0x83, 0x01, 0x4b,
	0x40, 0xac, 0x0c, 0x55, 0x14, 0x78, 0x54, 0x1b, 0xbe, 0x55, 0xbb, 0x8f, 0x5d, 0x41, 0x69, 0x34,
	0xa6, 0x8d, 0x48, 0x2b, 0xd5, 0x46, 0xe4, 0x0d, 0x7a, 0x15, 0xc6, 0x77, 0x2c, 0xdb, 0x70, 0x0f,
	0x04, 0x81, 0xb1, 0x68, 0x3e, 0x7a, 0x53, 0x6e, 0x5c, 0x19, 0xaa, 0x44, 0xa1, 0xd1, 0x35, 0x28,
	0xe2, 0x66, 0xcb, 0x0f, 0xb0, 0x73, 0xd1, 0x75, 0xd3, 0x92, 0xd4, 0xb6, 0x32, 0x54, 0x89, 0xc0,
	0x12, 0xe1, 0x4d, 0xdc, 0xc0, 0x92, 0x1a, 0xf2, 0x51, 0xe1, 0x17, 0x23, 0xad, 0x44, 0xf8, 0x28,
	0x7c, 0x90, 0x39, 0x7e, 0x3d, 0x03, 0x05, 0xc9, 0x66, 0xd0, 0x69, 0xc9, 0xd7, 0xe5, 0x63, 0xde,
	0x98, 0x39, 0xb3, 0xab, 0x90, 0x25, 0x00, 0xd9, 0x68, 0x67, 0x25, 0x1a, 0x4b, 0x8f, 0x12, 0x93,
	0x85, 0xe0, 0xbd, 0x04, 0x23, 0xb4, 0xe4, 0xc1, 0xfd, 0xf6, 0x74, 0x6c, 0xfd, 0xa9, 0x5e, 0xac,
	0x35, 0x79, 0xc6, 0x0f, 0xf8, 0x91, 0x8f, 0x6d, 0x8f, 0xfa, 0xfd, 0x11, 0x8a, 0x5f, 0x08, 0xd2,
	0x7e, 0xfb, 0x20, 0x51, 0x37, 0x08, 0xa1, 0xd1, 0x35, 0x12, 0x72, 0x6d, 0x79, 0xa5, 0x37, 0x11,
	0x72, 0xb6, 0x53, 0xc2, 0x2b, 0x83, 0x7f, 0x6d, 0x38, 0x97, 0x99, 0xcc, 0xea, 0xaf, 0xc2, 0x18,
	0x87, 0x24, 0xda, 0x69, 0x61, 0xec, 0xf2, 0x49, 0x57, 0x14, 0x84, 0x36, 0x31, 0x76, 0x2b, 0xb4,
	0x05, 0x4d, 0x42, 0xd6, 0x68, 0xb0, 0x04, 0x2e, 0x57, 0x21, 0x3f, 0xf5, 0xef, 0x6b, 0x30, 0x1e,
	0xd1, 0x0e, 0x19, 0x3d, 0xa2, 0xc9, 0xa5, 0x47, 0xeb, 0x86, 0x7b, 0xdf, 0x74, 0x1e, 0x8a, 0x15,
	0xc6, 0x11, 0x59, 0x99, 0x61, 0x2b, 0x19, 0xbd, 0x28, 0x3c, 0x5a, 0x85, 0x29, 0x3a, 0xb3, 0x1d,
	0x13, 0xbb, 0x76, 0x74, 0x36, 0x1f, 0x8b, 0x8c, 0x88, 0x0c, 0xb0, 0x32, 0x54, 0x49, 0x62, 0x09,
	0x77, 0xb2, 0xe0, 0x34, 0x9b, 0x86, 0x2d, 0x6a, 0x34, 0x11, 0x77, 0xc2, 0x9b, 0x84, 0x3b, 0xe1,
	0x8f, 0x81, 0x05, 0x5d, 0x83, 0x52, 0x54, 0x5e, 0x74, 0x0e, 0x72, 0x4d, 0xd1, 0xb3, 0x8c, 0xc2,
	0x8e, 0x82, 0x56, 0xfd, 0xf3, 0x59, 0x98, 0x4a, 0xc8, 0x89, 0x3e, 0xd2, 0x47, 0xbc, 0x55, 0x59,
	0xe8, 0xff, 0x83, 0x69, 0x5e, 0x61, 0xb1, 0x8d, 0x26, 0xae, 0x3a, 0xfb, 0xd8, 0x75, 0x2d, 0x73,
	0xa0, 0xe8, 0x8b, 0x18, 0xa1, 0xdb, 0x46, 0x13, 0x6f, 0x70, 0x32, 0xe8, 0xa3, 0x70, 0x98, 0x93,
	0x6f, 0xed, 0x39, 0xbe, 0x13, 0xd2, 0x67, 0xba, 0x2b, 0x05, 0x86, 0xb9, 0x6f, 0xf8, 0x86, 0x1b,
	0xa7, 0x78, 0x88, 0xe1, 0x6e, 0x12, 0xd4, 0x80, 0xe4, 0xcb, 0x22, 0xb1, 0x1e, 0x8e, 0x1a, 0xc2,
	0xa6, 0xe1, 0x1a, 0xbb, 0xae, 0xd1, 0xda, 0xeb, 0x94, 0x51, 0x2f, 0x40, 0xce, 0xf0, 0x7d, 0xa3,
	0xb6, 0x87, 0xc5, 0xdc, 0x98, 0x49, 0xda, 0x40, 0x99, 0x42, 0x24, 0x4c, 0x5d, 0x20, 0xea, 0x8f,
	0x35, 0x28, 0x45, 0xb9, 0xa1, 0x4d, 0x28, 0x79, 0x7b, 0xce, 0xc3, 0x6a, 0x4b, 0xbc, 0xee, 0xbf,
	0xbe, 0x38, 0x4e, 0x08, 0x04, 0x64, 0xd1, 0x12, 0x4c, 0x04, 0xc4, 0xaa, 0x35, 0xa7, 0xe1, 0xb8,
	0x7c, 0x4c, 0xc6, 0x85, 0xc0, 0x0b, 0xe4, 0x65, 0x9c, 0x4a, 0x29, 0x40, 0xa2, 0xcd, 0xe8, 0x45,
	0xc8, 0xed, 0xec, 0x72, 0xfc, 0x6c, 0x0f, 0xf8, 0x63, 0x3b, 0xbb, 0xf4, 0xbd, 0xfe, 0x76, 0x16,
	0x26, 0xe3, 0x2a, 0x09, 0xd3, 0x5c, 0x6d, 0xd0, 0x34, 0x77, 0x05, 0xf2, 0xf4, 0x47, 0xb5, 0xed,
	0x0e, 0xb4, 0x28, 0xcd, 0x51, 0xec, 0x3b, 0x6e, 0x03, 0x2d, 0x00, 0x30, 0x4a, 0x56, 0x2d, 0xc8,
	0x97, 0x7b, 0xab, 0x94, 0x30, 0x09, 0x56, 0x6b, 0x8e, 0x1d, 0x4c, 0x9f, 0xe1, 0x01, 0xa7, 0x4f,
	0x60, 0x8c, 0x23, 0x03, 0x18, 0xe3, 0x45, 0x18, 0xad, 0x5b, 0xb8, 0x61, 0x0a, 0x67, 0x7b, 0x34,
	0x69, 0x8a, 0xcb, 0xa4, 0xbd, 0xc2, 0xc1, 0xf4, 0x77, 0x34, 0x98, 0x88, 0xb5, 0x91, 0xc4, 0x29,
	0x1c, 0x92, 0x7c, 0x4a, 0x46, 0xdc, 0xcb, 0x02, 0x0e, 0x2d, 0x42, 0xce, 0xf2, 0xaa, 0xde, 0x9e,
	0xe3, 0xfa, 0xfd, 0x97, 0x9f, 0xc7, 0x2c, 0x6f, 0x8b, 0x60, 0xea, 0x6f, 0xb2, 0x18, 0xc9, 0x3d,
	0x1f, 0x7a, 0x86, 0x2c, 0x61, 0x99, 0xbb, 0x54, 0x0a, 0x28, 0x5a, 0xd1, 0x19, 0x18, 0x36, 0xdc,
	0x5d, 0x4f, 0x2d, 0x21, 0x6d, 0xd2, 0xeb, 0x50, 0x8a, 0xa6, 0x5d, 0x3d, 0x44, 0xe0, 0xcb, 0x72,
	0x04, 0x9e, 0x8a, 0x65, 0x6f, 0x61, 0xf4, 0xad, 0x39, 0xcd, 0x96, 0x51, 0xf3, 0x69, 0xf4, 0xd5,
	0xbf, 0x9f, 0x83, 0x7c, 0x00, 0x81, 0x6e, 0x40, 0xa1, 0xed, 0x61, 0x77, 0xd5, 0xde, 0xb7, 0xfc,
	0x60, 0xdf, 0xe0, 0x44, 0x82, 0xd2, 0x9d, 0x10, 0x86, 0x78, 0x7f, 0x09, 0x05, 0xbd, 0x0a, 0x40,
	0x1e, 0x5f, 0x73, 0x2c, 0x3b, 0xd8, 0x28, 0x38, 0xae, 0x24, 0xc0, 0x40, 0x56, 0x86, 0x2a, 0x12,
	0x82, 0x40, 0x7f, 0x9d, 0x24, 0x54, 0x22, 0xe8, 0xa8, 0xd1, 0x19, 0x88, 0x40, 0x67, 0x4f, 0xc4,
	0x03, 0x90, 0xa7, 0x35, 0x5c, 0x17, 0x66, 0x7e, 0x4c, 0x89, 0x4c, 0x00, 0x56, 0x86, 0x2a, 0x01,
	0x30, 0x5a, 0x80, 0x22, 0x2d, 0xd6, 0x2f, 0xb8, 0xd8, 0x20, 0x3d, 0x67, 0x26, 0x7e, 0x32, 0x81,
	0x7c, 0x4b, 0x02, 0x22, 0xd9, 0x97, 0x8c, 0x84, 0x36, 0x60, 0xb2, 0xb6, 0x67, 0xd8, 0xbb, 0xd8,
	0xa4, 0xe6, 0x41, 0x82, 0xcc, 0xcc, 0x24, 0x25, 0x74, 0x26, 0x41, 0x68, 0x21, 0x06, 0xb8, 0x32,
	0x54, 0x49, 0x20, 0x13, 0xa9, 0xf8, 0xbb, 0x6d, 0x6a, 0xf6, 0xa3, 0x29, 0x52, 0x2d, 0x48, 0x40,
	0x44, 0x2a, 0x19, 0x49, 0x26, 0xe2, 0xb4, 0xac, 0x1a, 0xcf, 0x46, 0xd3, 0x89, 0x10, 0x20, 0x99,
	0x08, 0x79, 0x96, 0x88, 0x94, 0x77, 0x9c, 0xb6, 0xcf, 0x93, 0xd2, 0x54, 0x22, 0x14, 0x48, 0x22,
	0x42, 0x9f, 0xd1, 0x32, 0x8c, 0x8b, 0x67, 0x1a, 0x02, 0x79, 0x72, 0x3a, 0x97, 0x4a, 0x85, 0x42,
	0x91, 0x0c, 0x39, 0x82, 0x86, 0x2a, 0x30, 0x55, 0x73, 0x6c, 0x9f, 0xd8, 0x30, 0xde, 0xb5, 0x3c,
	0x1f, 0xbb, 0xd8, 0x9c, 0x01, 0x4a, 0x4b, 0x4f, 0xd2, 0x8a, 0x43, 0x92, 0x74, 0x27, 0x81, 0x4e,
	0x2c, 0xbf, 0xb5, 0xe7, 0xd8, 0x78, 0xdd, 0xf2, 0x3c, 0x6c, 0xce, 0x14, 0x52, 0x2c, 0x7f, 0x33,
	0x84, 0x21, 0x96, 0x2f, 0xa1, 0xa0, 0x6b, 0x90, 0xa7, 0x8f, 0x0b, 0x24, 0xcf, 0x2b, 0x46, 0x57,
	0x1f, 0x51, 0x7c, 0x02, 0xb1, 0x32, 0x54, 0x09, 0xc1, 0x89, 0x66, 0xe8, 0x43, 0x05, 0xdf, 0xc3,
	0x35, 0x62, 0x7f, 0xe3, 0x29, 0x9a, 0xd9, 0x94, 0xa1, 0x88, 0x66, 0x22, 0x68, 0x7c, 0x98, 0xfc,
	0xb2, 0x5b, 0xdb, 0xb3, 0xf6, 0xb1, 0x39, 0x53, 0x4a, 0x1f, 0xa6, 0x00, 0x88, 0x0f, 0x53, 0xf0,
	0x2c, 0x88, 0x54, 0xb0, 0xe7, 0x3b, 0x44, 0xb3, 0x13, 0x1d, 0x88, 0x08, 0x20, 0x41, 0x44, 0x3c,
	0x07, 0x59, 0xe0, 0x32, 0x4c, 0xab, 0xdc, 0x06, 0x9a, 0x87, 0x82, 0xc5, 0x7e, 0x56, 0xdb, 0x7c,
	0x79, 0x3d, 0x92, 0xdc, 0xe6, 0x63, 0x10, 0x77, 0x2c, 0x53, 0x7f, 0x19, 0x0e, 0x29, 0xbc, 0x07,
	0x7a, 0x0a, 0x4a, 0xf7, 0xe8, 0xaf, 0x60, 0xd3, 0x8c, 0x52, 0xaa, 0x14, 0xd9, 0x5b, 0xb6, 0x4b,
	0xa6, 0x2f, 0xc4, 0x90, 0xb9, 0xb7, 0xb8, 0x00, 0x70, 0x9f, 0xfe, 0x4a, 0x17, 0x21, 0xcf, 0x00,
	0x88, 0x04, 0x57, 0x60, 0x2a, 0xe1, 0x43, 0xd0, 0x69, 0x28, 0x36, 0x70, 0xdd, 0x8f, 0x71, 0x07,
	0xf2, 0x8e, 0xf3, 0x3e, 0x0a, 0x87, 0x95, 0xde, 0x43, 0xbf, 0x05, 0xc7, 0x52, 0xbd, 0x01, 0x3a,
	0x0f, 0x79, 0x2f, 0xf0, 0x21, 0x2a, 0x8f, 0x1f, 0x36, 0xeb, 0x2f, 0x4b, 0x1c, 0x64, 0x4f, 0x80,
	0xf4, 0x68, 0xb8, 0x54, 0xe5, 0x28, 0xfa, 0x9b, 0x0a, 0x64, 0x3a, 0xe3, 0x49, 0xfa, 0x43, 0xfd,
	0xc5, 0x20, 0xe9, 0x0f, 0x41, 0x54, 0x91, 0x66, 0x7e, 0xe0, 0x06, 0x8c, 0x18, 0xd4, 0x8b, 0x0c,
	0x40, 0x9a, 0x22, 0xea, 0x1b, 0x70, 0x44, 0xed, 0x2c, 0xd0, 0x15, 0x18, 0x35, 0x98, 0x73, 0xd1,
	0x3a, 0x65, 0xdd, 0x22, 0x06, 0x72, 0x60, 0xfd, 0x55, 0x98, 0x4d, 0xf7, 0x18, 0xa2, 0x90, 0xa4,
	0xa5, 0x16, 0x92, 0x8e, 0x48, 0x56, 0x2e, 0xb9, 0x08, 0xfd, 0x3a, 0xa0, 0xe4, 0xd4, 0x47, 0xcf,
	0x42, 0xce, 0x6c, 0xbb, 0x34, 0x5d, 0x53, 0xd3, 0x0c, 0x9a, 0xf5, 0x19, 0xa9, 0xa3, 0x91, 0xb9,
	0x1f, 0xb1, 0x2b, 0x79, 0x3a, 0x27, 0x1a, 0xc4, 0x94, 0xd4, 0xff, 0x2e, 0x03, 0x13, 0xb1, 0x3a,
	0x0c, 0xfa, 0x00, 0x8c, 0xd5, 0xad, 0x46, 0xfa, 0xb6, 0xf6, 0x28, 0x69, 0x5d, 0x35, 0xd1, 0x73,
	0x50, 0x30, 0x6a, 0x35, 0xec, 0x79, 0xd5, 0x3d, 0xc3, 0xdb, 0xa3, 0x71, 0x3d, 0x2b, 0x86, 0xc6,
	0x24, 0xfa, 0x77, 0x2b, 0xc0, 0x00, 0x56, 0x0c, 0x6f, 0x8f, 0x98, 0x2f, 0x25, 0xeb, 0x59, 0x9f,
	0xc6, 0xea, 0x6d, 0xec, 0x1c, 0x69, 0xdf, 0xb2, 0x3e, 0x4d, 0xf3, 0x1a, 0x6a, 0xe5, 0xc3, 0xaa,
	0xbc, 0x46, 0x4c, 0x86, 0xa6, 0xd5, 0xc4, 0x55, 0xff, 0xa0, 0xc5, 0x92, 0xcf, 0x64, 0x25, 0x9d,
	0xb4, 0x6f, 0x1f, 0xb4, 0x30, 0xba, 0x0a, 0x23, 0xfe, 0x5e, 0xbb, 0xb9, 0xc3, 0x63, 0x65, 0x90,
	0x05, 0x2d, 0x1b, 0x9e, 0xbf, 0x4d, 0x1a, 0xe2, 0x16, 0xc0, 0xc0, 0xd1, 0x0b, 0x2c, 0x77, 0xca,
	0x45, 0xb7, 0x8b, 0x85, 0xba, 0x52, 0x92, 0xa7, 0xdf, 0xd5, 0x00, 0x42, 0x10, 0x74, 0x11, 0x46,
	0xe8, 0xca, 0x8f, 0x9b, 0xde, 0xd1, 0x24, 0x15, 0xba, 0xba, 0x5b, 0x19, 0xaa, 0x30, 0x38, 0x82,
	0xb0, 0x6f, 0x99, 0xd8, 0xe1, 0x79, 0x92, 0x02, 0xe1, 0x2e, 0x69, 0x26, 0x08, 0x14, 0x8e, 0x22,
	0x38, 0x56, 0x2d, 0xb5, 0xbc, 0xb6, 0xf4, 0xe8, 0x2e, 0x69, 0xa6, 0x08, 0xe4, 0x47, 0xe0, 0x86,
	0x5f, 0x0f, 0x87, 0x9e, 0x4b, 0x81, 0x8e, 0x83, 0xf6, 0x50, 0x6d, 0x7e, 0xda, 0x43, 0xd2, 0xb8,
	0xa7, 0x3e, 0xb5, 0xa0, 0xed, 0xe9, 0xfb, 0x32, 0x31, 0x2a, 0xe1, 0xe0, 0xc4, 0x22, 0x93, 0x21,
	0xdb, 0x79, 0x32, 0xbc, 0x12, 0xe1, 0x4b, 0xfa, 0xd7, 0xcf, 0x54, 0xba, 0x0a, 0x05, 0xa9, 0x88,
	0x88, 0x9e, 0x81, 0x9c, 0x6b, 0x3c, 0xac, 0xde, 0xf3, 0x38, 0x66, 0xdc, 0xf4, 0xc6, 0x5c, 0xe3,
	0x21, 0x81, 0xd7, 0xa7, 0x01, 0x25, 0x8b, 0x87, 0xfa, 0x3b, 0x23, 0x50, 0x8a, 0x56, 0x02, 0xd1,
	0x2a, 0x00, 0xaf, 0x04, 0x56, 0x83, 0x82, 0xf1, 0xf1, 0x84, 0x6f, 0x5b, 0xb5, 0xfd, 0x17, 0x2e,
	0x2b, 0x97, 0x15, 0x79, 0x8e, 0xbd, 0x6a, 0xa2, 0x75, 0x28, 0xd6, 0x0d, 0xcf, 0xaf, 0xb6, 0x5c,
	0xbc, 0x6f, 0xe1, 0x87, 0x41, 0x1e, 0x9d, 0x58, 0xa2, 0x1c, 0xf8, 0xd8, 0x53, 0x9f, 0xe0, 0x21,
	0xf8, 0x9b, 0x0c, 0x1d, 0x95, 0x21, 0x4f, 0x37, 0xcc, 0xab, 0x57, 0x9e, 0xbf, 0xdc, 0xd7, 0xea,
	0x31, 0x47, 0xd1, 0xae, 0x3c, 0x7f, 0x39, 0x24, 0x71, 0xf9, 0xca, 0xd5, 0xbe, 0x36, 0xfd, 0x19,
	0x89, 0xcb, 0x57, 0xae, 0xa2, 0xff, 0x0f, 0x87, 0x85, 0x7e, 0x6a, 0x4e, 0xa3, 0x81, 0x69, 0x7d,
	0x9d, 0xa8, 0x6a, 0xa4, 0x6f, 0x55, 0x1d, 0xe2, 0x84, 0x16, 0x02, 0x3a, 0xab, 0x26, 0x72, 0x60,
	0x4e, 0x41, 0x5f, 0x76, 0x5b, 0xa3, 0xe9, 0x8c, 0xae, 0x7e, 0x48, 0xc9, 0xe8, 0x78, 0x82, 0x51,
	0x39, 0xf4, 0x72, 0x37, 0x60, 0x04, 0x37, 0x9d, 0x7b, 0x16, 0x4f, 0xa9, 0xfb, 0x8a, 0x63, 0x14,
	0x11, 0x7d, 0x12, 0x0e, 0x19, 0xb6, 0xd5, 0x24, 0xf9, 0x00, 0x37, 0x26, 0x62, 0x72, 0xdc, 0x0b,
	0xf5, 0x43, 0x4f, 0x45, 0x46, 0xff, 0x14, 0x8c, 0x47, 0x6a, 0xcd, 0x24, 0xe9, 0xe2, 0x87, 0x7d,
	0xaa, 0xbe, 0xb1, 0xab, 0x5e, 0xa4, 0x02, 0x87, 0xd8, 0x36, 0x76, 0x49, 0xdc, 0x6b, 0x7a, 0xbb,
	0xd4, 0xfa, 0x8a, 0x09, 0x07, 0xd8, 0xf4, 0x76, 0xf5, 0x12, 0x14, 0xe5, 0x7a, 0xb4, 0x7e, 0x17,
	0x4a, 0xd1, 0x0a, 0x33, 0x5f, 0x68, 0x37, 0x9c, 0x9a, 0xd1, 0xe8, 0xbd, 0x4c, 0x24, 0x78, 0x8c,
	0x59, 0x1e, 0x31, 0xab, 0x86, 0xfe, 0x96, 0x06, 0x85, 0x45, 0x6a, 0x6c, 0x34, 0x45, 0x42, 0x17,
	0xd3, 0xeb, 0xad, 0x89, 0xe5, 0x34, 0x2d, 0xbf, 0xd2, 0xa5, 0x79, 0xdb, 0xf6, 0xb1, 0xab, 0x76,
	0x44, 0xa2, 0x95, 0x2c, 0xcd, 0xd3, 0x0f, 0x52, 0xd1, 0x26, 0xfd, 0x4b, 0x81, 0x30, 0x6c, 0x4b,
	0xb5, 0x87, 0x34, 0x8b, 0x68, 0xf2, 0x3e, 0x3e, 0x50, 0x2f, 0xf8, 0x49, 0x0b, 0x7a, 0x05, 0xc6,
	0x58, 0x27, 0xbc, 0x99, 0x2c, 0x2d, 0x90, 0x04, 0xa5, 0x56, 0xa9, 0xdf, 0x8a, 0x1d, 0x38, 0x8a,
	0xa2, 0xbf, 0x09, 0x13, 0x5c, 0xe1, 0x15, 0xcc, 0xb6, 0x69, 0xd1, 0x59, 0x18, 0x21, 0x49, 0x29,
	0xdb, 0xe6, 0x4d, 0xf4, 0x97, 0xb5, 0x91, 0xde, 0xd6, 0x1c, 0x33, 0xa5, 0x54, 0x42, 0x9b, 0x08,
	0xe9, 0x2d, 0x6c, 0xb8, 0xb5, 0xbd, 0x4d, 0x17, 0x9b, 0x56, 0xcd, 0xf0, 0x83, 0xce, 0x68, 0xa9,
	0x9d, 0x79, 0x1a, 0x46, 0x69, 0x99, 0x85, 0x6d, 0x66, 0x27, 0x60, 0x78, 0xa3, 0xfe, 0xe7, 0xc3,
	0x80, 0xf8, 0x86, 0xd6, 0x16, 0xb6, 0x03, 0x93, 0xb9, 0x1c, 0x19, 0xdc, 0xa0, 0x2a, 0xbf, 0xd1,
	0xf6, 0xd3, 0xc7, 0xf7, 0xc3, 0x30, 0x69, 0x62, 0xb3, 0xdd, 0x6a, 0x58, 0xcc, 0x0b, 0x89, 0xe3,
	0x73, 0x89, 0x21, 0x9c, 0x88, 0x80, 0xad, 0x9a, 0xe8, 0x3a, 0x8c, 0x35, 0x23, 0x5b, 0x4e, 0x3d,
	0x1e, 0x80, 0x13, 0x58, 0xe8, 0x2a, 0x4c, 0xca, 0x07, 0x10, 0x89, 0x62, 0xa9, 0x47, 0x1b, 0x51,
	0x1c, 0x82, 0xe4, 0xa7, 0x0c, 0xc9, 0xd2, 0x00, 0x2d, 0xc0, 0x58, 0xdd, 0x71, 0x1f, 0x1a, 0xae,
	0xc9, 0xe7, 0x7b, 0xb0, 0x5a, 0xac, 0xe0, 0x3a, 0x76, 0xb1, 0x5d, 0x0b, 0x66, 0x91, 0x97, 0x60,
	0xce, 0x31, 0xd1, 0x75, 0x18, 0x71, 0x71, 0xab, 0x71, 0xc0, 0x97, 0xd2, 0x7d, 0x90, 0x60, 0x78,
	0x68, 0x19, 0xa0, 0x25, 0x06, 0xd6, 0x9b, 0x81, 0x68, 0x6d, 0x2e, 0x36, 0xf0, 0x09, 0x57, 0x11,
	0x62, 0x92, 0xb5, 0xd4, 0xc3, 0x3d, 0xcb, 0xc7, 0xd5, 0x86, 0xe5, 0xf9, 0x33, 0x05, 0x95, 0xcd,
	0xe5, 0x29, 0xc0, 0x9a, 0xe5, 0xf9, 0x04, 0x7a, 0xa7, 0x61, 0xd4, 0xee, 0x33, 0xe8, 0xa2, 0x12,
	0x9a, 0x02, 0x10, 0xe8, 0x2e, 0x5b, 0xa1, 0xff, 0xa1, 0xc1, 0x34, 0xff, 0xcd, 0x36, 0xa1, 0x43,
	0x3b, 0xa2, 0x3b, 0xb7, 0x99, 0x7e, 0x76, 0x6e, 0x6f, 0xc3, 0x44, 0x9b, 0x12, 0x09, 0x8e, 0x47,
	0xf2, 0x78, 0xd9, 0xa3, 0x55, 0x94, 0x38, 0xb6, 0x90, 0xe1, 0x05, 0x28, 0x35, 0x48, 0x20, 0xc7,
	0x26, 0x5d, 0xea, 0x1a, 0xbe, 0xda, 0xb1, 0x14, 0x09, 0xd0, 0x12, 0x85, 0x29, 0x77, 0xeb, 0xef,
	0x17, 0x35, 0x38, 0xc2, 0x7f, 0x07, 0x73, 0xbe, 0x86, 0xe9, 0xca, 0x7d, 0x90, 0x99, 0x23, 0x1c,
	0x5e, 0x36, 0xd5, 0xe1, 0x75, 0x91, 0xe7, 0x0b, 0x5a, 0x30, 0x8b, 0x43, 0x1f, 0xf4, 0x3e, 0xc9,
	0xe2, 0xc2, 0x09, 0xb1, 0x9f, 0x4f, 0xc3, 0x10, 0x17, 0x68, 0x63, 0xc7, 0x73, 0xc8, 0x23, 0xfa,
	0x10, 0x0c, 0x37, 0x2d, 0x53, 0xb8, 0xd8, 0xee, 0x36, 0x41, 0xa1, 0xbb, 0xf0, 0xfc, 0xa7, 0xd0,
	0xfe, 0x22, 0x4c, 0xfb, 0x0f, 0x52, 0xd7, 0x23, 0xc7, 0x8c, 0x7b, 0xb5, 0x5b, 0xe9, 0xe4, 0xf1,
	0x45, 0x98, 0x66, 0xdb, 0xb9, 0x81, 0x27, 0xa2, 0x7e, 0x89, 0xea, 0x33, 0x57, 0x99, 0x62, 0x6d,
	0xdc, 0xff, 0x10, 0x57, 0xd4, 0xa5, 0x67, 0x5f, 0xd3, 0x60, 0x92, 0xff, 0x5e, 0x68, 0x60, 0xc3,
	0x25, 0xab, 0xc9, 0x81, 0xc6, 0xf5, 0x25, 0x98, 0xa2, 0xb3, 0x20, 0x72, 0x54, 0x39, 0xa3, 0x74,
	0xcf, 0x04, 0x6e, 0x3d, 0x3c, 0xae, 0xdc, 0x45, 0xc2, 0xaf, 0x6b, 0x30, 0x15, 0xd1, 0xfd, 0x4f,
	0x9f, 0x88, 0xf5, 0x60, 0x76, 0xf0, 0x15, 0xfa, 0xa0, 0x22, 0x76, 0xe1, 0xf3, 0x17, 0x1a, 0x1c,
	0x8b, 0x4e, 0xc3, 0x2d, 0xec, 0x07, 0xd9, 0xc0, 0x20, 0x2a, 0xe1, 0xfe, 0x73, 0xb8, 0x1f, 0xff,
	0x29, 0x12, 0x8a, 0x6c, 0x6a, 0x42, 0xd1, 0xa5, 0x1b, 0xdf, 0xd2, 0x82, 0x29, 0x1c, 0x78, 0x93,
	0xa6, 0xb3, 0x8f, 0x7f, 0xf6, 0x7a, 0xf2, 0x15, 0x3a, 0x20, 0x5e, 0xcb, 0xb1, 0xbd, 0x40, 0x7a,
	0x4f, 0xbc, 0x40, 0x93, 0x90, 0xf5, 0xf0, 0x03, 0x5e, 0x2f, 0x24, 0x3f, 0xd1, 0x34, 0x8c, 0x78,
	0xbe, 0xb0, 0xba, 0x62, 0x85, 0x3d, 0xa0, 0x2b, 0x90, 0x77, 0x05, 0x32, 0x77, 0x5b, 0x47, 0x63,
	0xa1, 0x48, 0x10, 0xaf, 0x84, 0x90, 0xd7, 0x4e, 0x3e, 0xbe, 0x3e, 0x0b, 0x33, 0x49, 0xd1, 0x18,
	0x77, 0xfd, 0xbb, 0x19, 0x38, 0x24, 0x1e, 0xe4, 0xd4, 0xeb, 0x7a, 0xe2, 0xa2, 0x43, 0x9f, 0x1e,
	0x28, 0x7e, 0x1f, 0x21, 0xd3, 0xf5, 0x3e, 0xc2, 0x26, 0x1c, 0xa2, 0xab, 0x5c, 0xa7, 0xed, 0x55,
	0x25, 0xde, 0xd9, 0x1e, 0x79, 0x4f, 0x09, 0xe4, 0x75, 0xf9, 0xfe, 0x45, 0xcd, 0xc5, 0x86, 0xef,
	0x84, 0x37, 0x29, 0x94, 0x41, 0x77, 0x9c, 0x43, 0xf1, 0xab, 0x14, 0x67, 0x61, 0xa4, 0xd6, 0x70,
	0x6a, 0xf7, 0x69, 0xf2, 0x96, 0x00, 0x66, 0x6d, 0xdd, 0xf4, 0xfa, 0x67, 0x63, 0x30, 0x1e, 0x4d,
	0x42, 0xfa, 0x0e, 0x02, 0x17, 0x00, 0xc4, 0x35, 0x90, 0xb4, 0x8b, 0x23, 0x79, 0x7e, 0x05, 0x84,
	0x59, 0x69, 0x97, 0x88, 0x29, 0x8c, 0x3f, 0xd7, 0x8f, 0xf1, 0x4b, 0x49, 0xf1, 0xc8, 0x40, 0x49,
	0xf1, 0x0a, 0x80, 0x11, 0xdc, 0x47, 0xe2, 0xeb, 0xee, 0x63, 0x31, 0x1a, 0xe1, 0x85, 0xa5, 0x44,
	0x62, 0x19, 0xe2, 0xa2, 0xa5, 0x30, 0x4d, 0xee, 0x37, 0xc7, 0x5d, 0x19, 0x0a, 0x13, 0xe5, 0xb2,
	0x48, 0x94, 0xa1, 0x7f, 0x22, 0x3c, 0x55, 0x5e, 0x80, 0x62, 0x68, 0xa9, 0x96, 0xd8, 0x23, 0xea,
	0xae, 0xd1, 0x42, 0x60, 0xa2, 0x96, 0x89, 0x6e, 0x01, 0xb5, 0xd8, 0x68, 0x9c, 0x99, 0xe8, 0x5a,
	0x97, 0xa8, 0x4c, 0x10, 0x2c, 0x29, 0xea, 0xa0, 0xc5, 0x70, 0x45, 0x5b, 0xec, 0xbb, 0x7e, 0x12,
	0x2c, 0x77, 0xd7, 0xa0, 0xd8, 0x3c, 0xa8, 0xba, 0xd8, 0x30, 0x99, 0x24, 0xe3, 0x7d, 0x57, 0x48,
	0xa0, 0x79, 0x40, 0xf2, 0x3d, 0x2a, 0xd3, 0x79, 0xc8, 0xbb, 0x86, 0x6d, 0x3a, 0x4d, 0x32, 0xe7,
	0x4a, 0x2a, 0x93, 0xcc, 0xb1, 0xf6, 0x55, 0xba, 0x01, 0xd4, 0x74, 0x4c, 0x7a, 0x87, 0x8b, 0xa4,
	0xc5, 0x93, 0x2a, 0x68, 0x10, 0x10, 0x65, 0x1f, 0x7d, 0x1c, 0xa6, 0xa9, 0xe2, 0x48, 0x26, 0x5d,
	0xb5, 0xec, 0x2a, 0x99, 0x2c, 0x04, 0x71, 0xaa, 0x6f, 0x89, 0x27, 0x09, 0x1d, 0x92, 0x6c, 0xaf,
	0xda, 0x64, 0x1a, 0x96, 0xfd, 0x9b, 0x39, 0x18, 0x65, 0x07, 0x5e, 0xf4, 0xaf, 0x65, 0xc4, 0x51,
	0xd6, 0xa8, 0xa1, 0xf3, 0x4d, 0x86, 0xfe, 0xa7, 0xf3, 0x20, 0xa1, 0x47, 0x9a, 0x7d, 0xd9, 0x81,
	0x66, 0xdf, 0x79, 0xc8, 0x87, 0x0b, 0x0e, 0xa5, 0x3b, 0xcb, 0x61, 0xbe, 0xd8, 0x40, 0xf3, 0x29,
	0x7a, 0x25, 0x73, 0x36, 0x9b, 0xd4, 0x95, 0xfe, 0x07, 0xc3, 0x30, 0x15, 0xd1, 0xd0, 0x16, 0xb6,
	0x07, 0x28, 0xc8, 0x9c, 0x82, 0xac, 0xcb, 0xfd, 0x5b, 0x42, 0x38, 0xd2, 0xd2, 0x87, 0x67, 0xeb,
	0x4b, 0xb7, 0x2f, 0x43, 0x8e, 0xcd, 0xbf, 0xa0, 0xee, 0xd8, 0x1d, 0x71, 0x8c, 0xce, 0x3d, 0xcb,
	0x44, 0x1f, 0x85, 0x52, 0xdb, 0xa6, 0x93, 0x45, 0x4c, 0xbd, 0xd1, 0xbe, 0xa7, 0xde, 0x38, 0xa3,
	0xb0, 0xc0, 0x27, 0xe0, 0x6b, 0x20, 0x4d, 0x20, 0x5e, 0x48, 0x1c, 0x74, 0xfa, 0x2d, 0x0d, 0x5e,
	0x51, 0x50, 0xba, 0xca, 0xfc, 0xa0, 0xae, 0x52, 0x9a, 0x50, 0xbf, 0xaf, 0xc1, 0xe1, 0x88, 0xb9,
	0x04, 0x8b, 0xd5, 0x81, 0x22, 0xa3, 0x6f, 0xb8, 0x7e, 0x87, 0xcc, 0x22, 0x4f, 0x01, 0x16, 0x99,
	0x71, 0x8c, 0xbb, 0x9c, 0x55, 0x35, 0xdd, 0x90, 0x8a, 0x02, 0x86, 0xe0, 0xe8, 0xbf, 0xa5, 0xc5,
	0x6c, 0x9b, 0xae, 0x64, 0xdf, 0x63, 0x41, 0xcf, 0xd3, 0x0c, 0xaf, 0x93, 0x90, 0x39, 0x97, 0x8f,
	0xb0, 0xfe, 0xd7, 0x49, 0x6d, 0x1a, 0xe6, 0xcd, 0x83, 0x75, 0xfc, 0x5e, 0x0b, 0x99, 0xb4, 0xfc,
	0xec, 0x13, 0x5a, 0xbe, 0xfe, 0x63, 0x0d, 0x0e, 0x45, 0xfa, 0xc2, 0x56, 0x70, 0xfd, 0xf7, 0x64,
	0xa0, 0x45, 0xbd, 0x1c, 0x3f, 0x87, 0x07, 0x8f, 0x9f, 0xf3, 0x50, 0x60, 0x29, 0x37, 0x53, 0xa3,
	0xd2, 0xd7, 0x02, 0x83, 0xa0, 0x03, 0xe8, 0xc2, 0x04, 0xeb, 0x33, 0x59, 0x05, 0xd2, 0x45, 0x75,
	0xff, 0xfd, 0x8d, 0xf1, 0xcc, 0x74, 0xe3, 0xe9, 0xc1, 0x64, 0xc8, 0x73, 0x50, 0x25, 0xf7, 0xcb,
	0x74, 0x51, 0xcc, 0x24, 0x69, 0x6f, 0xba, 0x6f, 0xae, 0xfa, 0x1b, 0x70, 0x34, 0xa4, 0x42, 0xab,
	0xed, 0x9e, 0x88, 0xc4, 0x52, 0xc1, 0x5c, 0x53, 0x15, 0xcc, 0xd5, 0xd7, 0x73, 0x45, 0xc1, 0xfc,
	0x9b, 0xc1, 0x44, 0x0a, 0x96, 0x66, 0xec, 0xf1, 0x7f, 0x27, 0xc2, 0x2f, 0xf6, 0xbe, 0xaa, 0x4b,
	0x4c, 0xca, 0x00, 0x51, 0xff, 0x6f, 0x2d, 0x96, 0xac, 0x88, 0xc3, 0x01, 0x37, 0x0f, 0x56, 0x1c,
	0xe7, 0xfe, 0xfb, 0x13, 0x94, 0x9f, 0x86, 0xd1, 0x3d, 0xc7, 0xb9, 0xbf, 0x6a, 0xf2, 0x0d, 0xfd,
	0x78, 0xed, 0x9f, 0x35, 0xa2, 0x05, 0x18, 0x75, 0xb1, 0xe1, 0x39, 0x36, 0x8f, 0xc2, 0x7d, 0x1d,
	0x8c, 0xe5, 0xa8, 0xfa, 0x97, 0x33, 0x70, 0x2a, 0xa2, 0x00, 0x92, 0xa9, 0x3c, 0xa9, 0x12, 0x06,
	0x29, 0x1b, 0xff, 0xb4, 0xe9, 0x25, 0x70, 0xad, 0xdb, 0x7b, 0xd4, 0xe5, 0xf2, 0x03, 0x8a, 0x2f,
	0x46, 0x74, 0x11, 0xdc, 0xb4, 0xa0, 0x53, 0xa5, 0x63, 0x01, 0x65, 0x09, 0xc6, 0x59, 0xb0, 0x68,
	0x46, 0xee, 0x14, 0x74, 0xd7, 0x4e, 0x91, 0xa2, 0x89, 0xed, 0xc1, 0x75, 0x40, 0xb2, 0x58, 0x6b,
	0x56, 0xfd, 0x49, 0xa4, 0xd2, 0x5f, 0x03, 0x94, 0xcc, 0x49, 0x82, 0x70, 0xa0, 0x75, 0x09, 0x07,
	0x62, 0x93, 0x91, 0x42, 0xeb, 0xbf, 0x33, 0x0a, 0xa5, 0x15, 0xcb, 0xf3, 0x9d, 0x70, 0xb7, 0x34,
	0xba, 0x12, 0xd7, 0xba, 0xac, 0xc4, 0x2f, 0x41, 0x41, 0x9c, 0xfe, 0x27, 0x9d, 0x99, 0x50, 0x96,
	0xa7, 0x2a, 0x9c, 0x22, 0xf9, 0x8d, 0x5e, 0x86, 0xfc, 0x9e, 0xe3, 0xf9, 0x0c, 0xbe, 0xd8, 0x53,
	0x39, 0x2b, 0x47, 0x10, 0x36, 0x25, 0x2b, 0x85, 0x7e, 0xac, 0xf4, 0x82, 0x94, 0xfb, 0x4e, 0xa5,
	0x20, 0x86, 0xc9, 0x6e, 0x0f, 0x36, 0xfd, 0x91, 0x5e, 0xcb, 0x04, 0xb1, 0xa3, 0x15, 0x62, 0x9d,
	0xf2, 0x92, 0x28, 0x79, 0x8d, 0xd2, 0x7b, 0xc3, 0xf1, 0xab, 0x3f, 0x5b, 0xbe, 0x62, 0xd3, 0x89,
	0xd7, 0xc5, 0x22, 0x1e, 0x74, 0x6c, 0x40, 0x0f, 0x8a, 0x96, 0x21, 0x1f, 0x94, 0x1a, 0x78, 0xce,
	0xdc, 0x7b, 0x95, 0x22, 0x44, 0x45, 0x57, 0xc3, 0xcc, 0x7b, 0xbc, 0x5b, 0xd2, 0x2c, 0xa7, 0xda,
	0x97, 0x45, 0xaa, 0x5d, 0xea, 0x01, 0x8b, 0x97, 0x21, 0x6e, 0xc9, 0x8b, 0xbb, 0xc9, 0xbe, 0x17,
	0x0c, 0xe1, 0xca, 0x2f, 0xb2, 0x5a, 0x47, 0x1d, 0x57, 0xeb, 0x52, 0x42, 0xff, 0xad, 0x4c, 0x50,
	0xd0, 0x5e, 0x73, 0x0c, 0x93, 0xcf, 0x19, 0xf4, 0xe1, 0xce, 0x65, 0xd9, 0x43, 0x11, 0xc2, 0x6f,
	0xfd, 0xf0, 0x52, 0x66, 0x52, 0xeb, 0x79, 0xd3, 0x07, 0xdd, 0x80, 0x7c, 0xc3, 0x31, 0xcc, 0x6a,
	0xd3, 0x31, 0x99, 0xa5, 0x49, 0xb6, 0xb2, 0x66, 0x31, 0x41, 0xd6, 0x1d, 0x33, 0xd9, 0xd7, 0x06,
	0x6f, 0xa0, 0x37, 0xe8, 0xad, 0xa6, 0xe5, 0xab, 0x2f, 0x83, 0xb2, 0x36, 0xb4, 0x01, 0xe3, 0x4e,
	0xcb, 0xb7, 0x9a, 0xd6, 0xa7, 0x8d, 0xf0, 0x5e, 0x58, 0x49, 0xba, 0x43, 0x48, 0x7d, 0xd7, 0x86,
	0x04, 0x92, 0x48, 0x71, 0x23, 0xf8, 0x5d, 0x0a, 0xc4, 0xef, 0x66, 0xc3, 0x22, 0xac, 0xac, 0xca,
	0x4b, 0x30, 0xb6, 0xc7, 0x7e, 0x72, 0x1f, 0x16, 0xcc, 0xaa, 0xa8, 0x83, 0xaa, 0x08, 0x30, 0x74,
	0x99, 0x9d, 0x9a, 0xa7, 0x9e, 0x44, 0xdc, 0x7f, 0x0e, 0xd2, 0x21, 0xba, 0xd9, 0xc3, 0xdd, 0x4f,
	0x9e, 0x80, 0x91, 0x5f, 0x1e, 0xba, 0x02, 0x05, 0xf6, 0x79, 0x1a, 0x86, 0x34, 0x1a, 0xbd, 0x7c,
	0x27, 0x3b, 0xdf, 0x0a, 0x50, 0x40, 0x81, 0x16, 0xa4, 0xcd, 0x63, 0x5d, 0xd3, 0x66, 0xf9, 0x58,
	0x45, 0x91, 0xff, 0x64, 0xf9, 0x63, 0x8e, 0x56, 0x17, 0x0a, 0xfc, 0x1d, 0x5d, 0x62, 0x7c, 0x0a,
	0xe6, 0xe8, 0x0e, 0x4c, 0xcd, 0xb1, 0xf7, 0xb1, 0xeb, 0xb1, 0x6d, 0xfc, 0x48, 0x99, 0x2c, 0xdf,
	0xbd, 0x4c, 0x76, 0x9c, 0x90, 0x58, 0x90, 0x28, 0xc8, 0x25, 0xb3, 0x15, 0x38, 0x43, 0x19, 0x56,
	0xeb, 0x8e, 0x8b, 0xad, 0x5d, 0xbb, 0x6a, 0xd4, 0x89, 0x40, 0x94, 0xab, 0x8b, 0xfd, 0xb6, 0x6b,
	0xf3, 0x73, 0xe4, 0x23, 0x95, 0x93, 0x14, 0x70, 0x99, 0xc1, 0x95, 0x09, 0xd8, 0x9a, 0xe1, 0xf9,
	0x15, 0x0e, 0xd4, 0xa5, 0x0c, 0xcc, 0xee, 0x07, 0xbe, 0x36, 0x9c, 0x1b, 0x99, 0x1c, 0xd5, 0x6f,
	0xc3, 0x0c, 0x1f, 0x70, 0x3e, 0x7a, 0x8b, 0x56, 0x9d, 0x4f, 0x6e, 0x34, 0x2d, 0x4a, 0xce, 0xf4,
	0xec, 0xa5, 0xa8, 0x31, 0x77, 0xb6, 0x9a, 0x77, 0xa4, 0x6d, 0x85, 0x24, 0xc5, 0xfe, 0x6d, 0xe7,
	0x24, 0x40, 0xdd, 0x75, 0x9a, 0x55, 0x26, 0x08, 0x4d, 0xfd, 0x2a, 0x79, 0xf2, 0x66, 0x81, 0xbc,
	0x08, 0x45, 0xcc, 0xca, 0x22, 0x76, 0x29, 0x83, 0x7f, 0x6e, 0x0c, 0x46, 0x59, 0x16, 0xde, 0x7f,
	0xfa, 0x75, 0x09, 0x8a, 0xf2, 0x4a, 0x53, 0x7d, 0x26, 0xb0, 0x20, 0x2d, 0x25, 0xe9, 0x59, 0x69,
	0x47, 0x2c, 0x64, 0x95, 0x95, 0xfe, 0x1c, 0x69, 0xa7, 0x26, 0x10, 0x8d, 0xe9, 0x23, 0x5d, 0x62,
	0x3a, 0xfb, 0x8e, 0x56, 0xdd, 0xd8, 0x77, 0xda, 0xae, 0x15, 0x54, 0x47, 0xfb, 0xfb, 0x8e, 0xd6,
	0xb2, 0xc0, 0x16, 0x21, 0xbb, 0x38, 0x48, 0x62, 0x39, 0x96, 0xee, 0x1c, 0xa5, 0x6a, 0x61, 0x6e,
	0xc0, 0x6a, 0x21, 0x8f, 0xc2, 0xf9, 0xf4, 0x28, 0x2c, 0xc2, 0xee, 0x4b, 0x30, 0x55, 0xb7, 0x5c,
	0xcf, 0xaf, 0xf2, 0x31, 0xa2, 0xc2, 0x81, 0x72, 0x9b, 0x94, 0xc2, 0xdd, 0xb1, 0x45, 0xed, 0x22,
	0xb6, 0x25, 0x50, 0x78, 0x82, 0x2d, 0x81, 0xdb, 0x30, 0xd1, 0xb2, 0x6c, 0x3b, 0x3c, 0xa3, 0xe1,
	0xf1, 0xf8, 0x19, 0x5e, 0x49, 0xa3, 0xcd, 0x69, 0x47, 0x5f, 0x4a, 0xad, 0x48, 0x33, 0xa1, 0xc7,
	0x67, 0x43, 0x90, 0xdf, 0x4e, 0x44, 0xe9, 0x45, 0x27, 0x4f, 0x82, 0xde, 0x5e, 0x34, 0x71, 0xbc,
	0x04, 0x45, 0xee, 0x53, 0x68, 0x6d, 0x49, 0x5d, 0xdb, 0x2e, 0x34, 0xa8, 0x43, 0xa1, 0x10, 0xc4,
	0x84, 0x39, 0x86, 0xc1, 0x52, 0xb3, 0xac, 0xe2, 0x5b, 0x21, 0x04, 0xdc, 0x30, 0xd1, 0x39, 0x98,
	0x14, 0xb0, 0xfc, 0x84, 0xa3, 0xcf, 0xa2, 0x77, 0xa5, 0xc4, 0x61, 0xd8, 0x39, 0x45, 0x5f, 0xff,
	0x4e, 0x34, 0x54, 0xb3, 0x19, 0xe9, 0xd1, 0x6b, 0xb8, 0x16, 0x5f, 0xc7, 0x2b, 0x0f, 0x7d, 0x8f,
	0x35, 0x2d, 0xba, 0x88, 0x0f, 0xa3, 0x66, 0xa6, 0x9f, 0xa8, 0x99, 0x7d, 0xb2, 0xa8, 0x49, 0xb2,
	0xca, 0xba, 0xd5, 0xf0, 0x45, 0x28, 0x2b, 0x85, 0x07, 0x4d, 0x79, 0x0f, 0x96, 0x69, 0x6b, 0xf2,
	0x4c, 0x14, 0x43, 0x42, 0xd7, 0x61, 0x9c, 0xc6, 0xb4, 0xaa, 0xef, 0x54, 0x49, 0x02, 0xc0, 0x2f,
	0xbf, 0x76, 0xf4, 0x3d, 0xec, 0x13, 0x7c, 0xdb, 0x0e, 0xd1, 0x53, 0x17, 0x07, 0xfc, 0x5d, 0x2d,
	0x1a, 0xb6, 0x43, 0xb5, 0xc6, 0x4e, 0xf0, 0x95, 0xa2, 0x62, 0x07, 0xc5, 0x87, 0x9f, 0x44, 0xb8,
	0x1e, 0xe9, 0x2d, 0x5c, 0x77, 0x0f, 0x54, 0xda, 0x64, 0x86, 0x5f, 0x67, 0x7f, 0x5b, 0x03, 0x60,
	0x92, 0x2e, 0x1a, 0xbe, 0x41, 0x8c, 0x38, 0xe2, 0xfb, 0xe8, 0xcd, 0xf5, 0x8e, 0xfe, 0xed, 0x02,
	0x40, 0x8d, 0x2d, 0x34, 0x89, 0x49, 0x2a, 0xd3, 0xb9, 0x3c, 0x07, 0x28, 0xfb, 0xe1, 0x76, 0xeb,
	0x70, 0xfa, 0x76, 0xab, 0xfe, 0x87, 0xc1, 0x51, 0xcb, 0x55, 0xdb, 0xc4, 0x8f, 0xfa, 0x8f, 0x26,
	0x83, 0x1f, 0xeb, 0x40, 0x57, 0xa8, 0xeb, 0x35, 0xe2, 0x5f, 0x90, 0x0b, 0x55, 0xa4, 0x72, 0xc7,
	0x86, 0xfe, 0xf6, 0x30, 0x4c, 0x30, 0x18, 0x92, 0x99, 0x2e, 0xd9, 0xbe, 0x7b, 0xf0, 0xe4, 0x41,
	0x30, 0xd3, 0x35, 0x08, 0x5e, 0x8c, 0x6d, 0xe4, 0x65, 0xd5, 0xfb, 0x69, 0xe1, 0x66, 0x81, 0x52,
	0x33, 0xc3, 0x3d, 0x69, 0xe6, 0x12, 0x88, 0xb2, 0x79, 0x87, 0xaa, 0x67, 0x81, 0x83, 0x24, 0x6b,
	0xdc, 0xa3, 0x1d, 0x6b, 0xdc, 0x68, 0x1e, 0x0a, 0x98, 0x68, 0x8d, 0x67, 0x24, 0xca, 0xc8, 0x07,
	0x14, 0x82, 0x65, 0x28, 0xaf, 0x00, 0x4d, 0xfa, 0xaa, 0xec, 0xe4, 0x5d, 0xd5, 0xa9, 0x27, 0x93,
	0xc6, 0x6c, 0xe5, 0x28, 0x01, 0xe1, 0x9e, 0xa8, 0x2e, 0xf7, 0xe5, 0x02, 0xa0, 0xa8, 0x37, 0x0d,
	0x23, 0x5a, 0x65, 0x52, 0xf6, 0xa7, 0x11, 0x9b, 0xc8, 0xf5, 0x67, 0x13, 0x2f, 0xc2, 0x51, 0xee,
	0x3d, 0x96, 0xb1, 0x5f, 0xdb, 0x93, 0x2c, 0xba, 0x8b, 0xaf, 0x69, 0x93, 0xe4, 0x91, 0xcd, 0xd5,
	0x38, 0x26, 0xba, 0x06, 0x25, 0xc6, 0xbe, 0x6a, 0xd9, 0xa6, 0x55, 0xc3, 0x29, 0x75, 0x50, 0x0a,
	0x5c, 0x19, 0x37, 0xc5, 0x03, 0x81, 0xec, 0x96, 0xbf, 0x59, 0x70, 0x5c, 0x9c, 0xaa, 0x0a, 0x2c,
	0x59, 0x4a, 0x32, 0x2f, 0x44, 0x52, 0x46, 0xf5, 0xe7, 0x30, 0x83, 0x0c, 0xb2, 0x4b, 0x0f, 0xff,
	0x81, 0x9e, 0xf7, 0x61, 0x7c, 0x95, 0xcc, 0x6e, 0xc0, 0x18, 0x19, 0x6c, 0x2b, 0xe8, 0xdf, 0xd1,
	0x68, 0xff, 0x82, 0x59, 0x96, 0x88, 0x07, 0x1c, 0x2d, 0xf4, 0x34, 0x99, 0x74, 0x4f, 0x43, 0xfa,
	0x44, 0x6b, 0x23, 0x52, 0xb2, 0x9b, 0xe8, 0x13, 0x01, 0x58, 0xe8, 0x25, 0xff, 0x6d, 0x83, 0xce,
	0xfb, 0x77, 0x0b, 0xfb, 0x6b, 0xea, 0x15, 0x89, 0x87, 0x9e, 0x87, 0x11, 0xe6, 0xcc, 0xb5, 0xee,
	0xf1, 0x89, 0x41, 0x76, 0xd1, 0xe5, 0x6f, 0x64, 0xe0, 0xac, 0x90, 0xa1, 0x13, 0xe3, 0x4f, 0x48,
	0x5f, 0x1b, 0x63, 0xbc, 0x2f, 0x85, 0x85, 0x87, 0xae, 0xe8, 0xf3, 0x9b, 0x86, 0xe5, 0xa6, 0x7e,
	0x7a, 0x6c, 0xf6, 0x11, 0x0c, 0x13, 0x80, 0x41, 0x4e, 0x3f, 0x8e, 0x35, 0xd5, 0xdf, 0x1f, 0xea,
	0x9c, 0x7d, 0x09, 0xac, 0x6e, 0x83, 0xf2, 0x9f, 0x34, 0x6e, 0x07, 0xd9, 0x50, 0x70, 0xdd, 0xf5,
	0x75, 0x28, 0xd8, 0xf8, 0x91, 0x5f, 0x75, 0xea, 0x75, 0x0f, 0xfb, 0xa9, 0xf7, 0x76, 0x92, 0x57,
	0x6d, 0x44, 0x01, 0x11, 0x08, 0xfa, 0x06, 0xc5, 0x7e, 0x7f, 0x32, 0xa6, 0x2e, 0x66, 0xf1, 0x6b,
	0x19, 0x98, 0x96, 0x13, 0x96, 0xa0, 0xe7, 0x83, 0x66, 0x2c, 0x23, 0xef, 0x65, 0x81, 0xe1, 0x95,
	0xe8, 0x70, 0x0c, 0x77, 0x1d, 0x0e, 0x59, 0xff, 0xfd, 0xe4, 0x3b, 0x9f, 0x09, 0xce, 0x4b, 0x12,
	0xa5, 0x50, 0x79, 0x70, 0x90, 0xcc, 0xdd, 0x88, 0x0f, 0x91, 0xd6, 0x6d, 0x88, 0xfa, 0x1b, 0x93,
	0x7f, 0xc9, 0xc0, 0xac, 0x3c, 0x26, 0x31, 0xf6, 0xcf, 0xf5, 0xb2, 0xb9, 0x15, 0x0e, 0xcf, 0x75,
	0xa0, 0x1f, 0x54, 0xa9, 0x1a, 0xe2, 0xde, 0x77, 0xd7, 0x2f, 0x20, 0x57, 0x8a, 0x04, 0x21, 0xb0,
	0x84, 0x97, 0xa1, 0x40, 0x09, 0xb0, 0x0b, 0xd7, 0xc1, 0xb7, 0xb3, 0xd2, 0xd1, 0x81, 0x80, 0xb3,
	0xbb, 0xdc, 0x31, 0xe3, 0x18, 0x1d, 0xc4, 0x38, 0xc6, 0x7e, 0x52, 0xe9, 0x2c, 0xab, 0xbb, 0x64,
	0x27, 0x87, 0xf5, 0x6f, 0x68, 0xa1, 0xd5, 0x73, 0xb5, 0x6e, 0xb8, 0x26, 0xdb, 0xe4, 0x0a, 0x4e,
	0x5e, 0x26, 0xd6, 0xdc, 0x1e, 0x7e, 0x40, 0xe6, 0xb0, 0x74, 0x10, 0x33, 0xa5, 0xfe, 0x7c, 0x0d,
	0x46, 0xa9, 0x5c, 0x29, 0xd7, 0x75, 0x94, 0xbb, 0x8f, 0x1c, 0xa3, 0x9b, 0xa3, 0xc2, 0xc1, 0x99,
	0xe6, 0x15, 0xcb, 0xe4, 0xb2, 0xbf, 0x07, 0x07, 0x86, 0xef, 0x06, 0x6c, 0xb6, 0xf6, 0x9c, 0x87,
	0x9c, 0xcd, 0xd9, 0x8e, 0x6c, 0x7a, 0xa2, 0x7b, 0x2f, 0xb8, 0x9e, 0x10, 0x2c, 0x0d, 0xde, 0xb3,
	0x3e, 0x34, 0x82, 0xe2, 0xda, 0x1d, 0xbb, 0xfe, 0x9e, 0x73, 0xfb, 0xaa, 0x06, 0x27, 0xd8, 0xc4,
	0x67, 0x2c, 0x82, 0xfe, 0x0d, 0x7c, 0x3a, 0x6c, 0x4d, 0xb1, 0xc8, 0x1a, 0xb8, 0xc0, 0xa4, 0x37,
	0x03, 0x8f, 0x46, 0xbf, 0x8e, 0x7e, 0xc0, 0xa4, 0xdc, 0x68, 0x61, 0x7b, 0xb0, 0xbb, 0x21, 0x5d,
	0xd4, 0xb1, 0x0c, 0xa5, 0x68, 0x9d, 0xa5, 0xe7, 0xad, 0xb7, 0xc8, 0x49, 0x0c, 0xfd, 0x6f, 0xc2,
	0x43, 0xfc, 0x9b, 0x96, 0xfd, 0x24, 0xb7, 0xc0, 0x06, 0xd9, 0xba, 0x7d, 0x1e, 0xc6, 0xe9, 0x02,
	0xa0, 0x25, 0x4a, 0x22, 0xd9, 0xd4, 0x6a, 0xcd, 0x26, 0x2b, 0x8b, 0x74, 0x51, 0xcb, 0xdf, 0x86,
	0x79, 0xc6, 0x1d, 0xbb, 0xf5, 0x7f, 0xa3, 0x43, 0xfc, 0x98, 0x41, 0x74, 0xb8, 0x07, 0xb6, 0x7a,
	0x45, 0xfd, 0x2e, 0xf3, 0x24, 0xf5, 0xbb, 0xd8, 0xd9, 0x94, 0x6c, 0xb7, 0xb3, 0x29, 0x9f, 0x0c,
	0xe6, 0xc9, 0x2d, 0xcc, 0x17, 0x85, 0x21, 0xb1, 0xee, 0x9f, 0xf2, 0xeb, 0x5c, 0x31, 0xd7, 0xff,
	0x54, 0x0a, 0xed, 0x0a, 0xfa, 0xeb, 0x89, 0xe4, 0xfb, 0x79, 0x45, 0xf2, 0x1d, 0xc3, 0x9a, 0x8f,
	0x3e, 0x87, 0xe9, 0x36, 0x11, 0x86, 0x9e, 0xd8, 0x8c, 0x08, 0x43, 0xde, 0xb0, 0xc5, 0xf1, 0xd3,
	0x50, 0xa2, 0xd9, 0x94, 0xb1, 0x6f, 0x58, 0x0d, 0x63, 0x87, 0x7f, 0xa2, 0x39, 0x57, 0x19, 0x27,
	0x6f, 0xcb, 0xe2, 0xe5, 0xec, 0x2f, 0x6b, 0x50, 0x8a, 0xb2, 0x40, 0x67, 0x3b, 0x7f, 0xf7, 0x94,
	0xd9, 0xda, 0xa5, 0xd4, 0x9c, 0x3d, 0x5a, 0x7b, 0x0e, 0x8b, 0xcd, 0xa7, 0xa2, 0xc7, 0x7e, 0xd9,
	0xae, 0x82, 0x74, 0xce, 0x57, 0xff, 0x24, 0x8c, 0x4b, 0x85, 0xe7, 0xb6, 0xb4, 0x7c, 0xd3, 0x3a,
	0x2c, 0xdf, 0x3e, 0x00, 0x63, 0xe2, 0xac, 0xbf, 0x32, 0xf3, 0x1e, 0x6d, 0xb3, 0xaf, 0xb1, 0x7c,
	0x33, 0x9c, 0x9c, 0xd2, 0x09, 0x3a, 0x6f, 0xa0, 0xaf, 0xbc, 0xf6, 0x94, 0xeb, 0x7f, 0x08, 0x4a,
	0xbe, 0xd5, 0xc4, 0x9e, 0x6f, 0x34, 0x5b, 0x55, 0x62, 0x24, 0x6a, 0xf3, 0x1c, 0x0f, 0x80, 0x96,
	0x5d, 0xa7, 0xd9, 0x65, 0x42, 0xfe, 0x65, 0xda, 0x0d, 0xc0, 0x9f, 0xb1, 0x7e, 0x7c, 0x45, 0x4a,
	0xd1, 0x22, 0xa3, 0xf1, 0x1c, 0x8c, 0x7a, 0x74, 0xf0, 0xf9, 0x0c, 0x39, 0xac, 0xd8, 0x92, 0x68,
	0x7b, 0x15, 0x0e, 0x14, 0x95, 0xcd, 0xb7, 0xf8, 0x67, 0x36, 0x3b, 0xc8, 0xb6, 0x6d, 0x35, 0x1a,
	0x5d, 0x64, 0xfb, 0x4d, 0x0d, 0x8e, 0x26, 0x64, 0xe3, 0x4a, 0x7e, 0xff, 0xc5, 0x3b, 0xff, 0xdb,
	0x5a, 0xf2, 0x03, 0xdf, 0xec, 0xeb, 0x8c, 0x67, 0xe0, 0xe4, 0xea, 0xed, 0xed, 0xa5, 0x4a, 0x79,
	0x61, 0x7b, 0xf5, 0xee, 0xd2, 0xfa, 0xd2, 0xe2, 0x6a, 0x79, 0x6b, 0xfb, 0xcd, 0xb5, 0xa5, 0xea,
	0x9d, 0xdb, 0xaf, 0xdf, 0xde, 0x78, 0xe3, 0xf6, 0xe4, 0x50, 0x3a, 0xc8, 0xe2, 0xd2, 0x72, 0xf9,
	0xce, 0xda, 0xf6, 0xa4, 0x96, 0x0e, 0xb2, 0x59, 0x59, 0x5d, 0x2f, 0x57, 0xde, 0x9c, 0xcc, 0xa0,
	0xd3, 0x70, 0x22, 0x85, 0x4a, 0xf9, 0xf6, 0xad, 0xa5, 0xca, 0x64, 0xf6, 0xfc, 0x83, 0xe0, 0x9f,
	0x81, 0xd0, 0x3d, 0x24, 0x34, 0x03, 0xd3, 0xeb, 0x4b, 0x5b, 0x5b, 0xe5, 0x5b, 0x4b, 0x5b, 0xdb,
	0xe5, 0x6d, 0x59, 0xa2, 0xc3, 0x30, 0x15, 0x69, 0xd9, 0x5a, 0xba, 0x4d, 0xa4, 0x38, 0x06, 0x87,
	0x23, 0xaf, 0x2b, 0x4b, 0x0b, 0x4b, 0xab, 0x77, 0x97, 0x16, 0x27, 0x33, 0x09, 0x8c, 0xca, 0x52,
	0x79, 0x71, 0x32, 0x7b, 0xde, 0x87, 0xa2, 0x7c, 0x20, 0x80, 0xb0, 0x5c, 0x5b, 0xdd, 0xda, 0x5e,
	0xdb, 0x28, 0x2f, 0xae, 0x6f, 0x2c, 0xca, 0x2c, 0xe3, 0x2d, 0xcb, 0x1b, 0x95, 0x37, 0xca, 0x95,
	0x45, 0xc6, 0x35, 0xd2, 0x72, 0xb3, 0xbc, 0xf0, 0x3a, 0x6d, 0xa2, 0x5c, 0xa3, 0x4d, 0x1b, 0xdb,
	0x2b, 0x93, 0xd9, 0xf3, 0x2e, 0x8c, 0x47, 0xb6, 0x26, 0x08, 0x89, 0xc5, 0xd5, 0xf2, 0xda, 0xc6,
	0xad, 0xad, 0xe5, 0xd5, 0xb5, 0xed, 0xa5, 0x8a, 0xc4, 0xf7, 0x2c, 0x9c, 0x8a, 0x36, 0x2d, 0x7d,
	0x6c, 0x61, 0xed, 0x0e, 0xd1, 0xfc, 0xdd, 0x8d, 0x3b, 0x95, 0xd5, 0xed, 0xa5, 0x2d, 0xa6, 0x7e,
	0x25, 0x50, 0xb9, 0xb2, 0xb0, 0xc2, 0x14, 0x70, 0xf9, 0xc7, 0x27, 0x21, 0xbf, 0x2e, 0xfe, 0x6d,
	0x11, 0x7a, 0x5b, 0x83, 0x99, 0xd4, 0x4f, 0x58, 0x3f, 0x13, 0x06, 0x98, 0x8e, 0xdf, 0xba, 0x9e,
	0x9d, 0x8e, 0x47, 0xa2, 0xbb, 0x8e, 0x65, 0xea, 0x57, 0x7f, 0xe1, 0x3b, 0xff, 0xf6, 0xab, 0x99,
	0x4b, 0xfa, 0x07, 0x2f, 0xee, 0x3f, 0x7f, 0x91, 0x58, 0xe2, 0xc5, 0x80, 0xef, 0xc5, 0x34, 0x52,
	0xd7, 0xb4, 0xf3, 0xe8, 0x01, 0x14, 0xe4, 0xbb, 0x65, 0xb3, 0x31, 0x29, 0xa4, 0xb6, 0xd9, 0xe3,
	0x71, 0xc6, 0x52, 0xa3, 0xfe, 0x2c, 0xe5, 0x7f, 0x56, 0x9f, 0x53, 0xf0, 0x97, 0xe0, 0x08, 0x4b,
	0x2f, 0x7e, 0xfd, 0xea, 0x44, 0x8c, 0x69, 0xa4, 0x75, 0xf6, 0x68, 0x92, 0xed, 0x03, 0x9a, 0x21,
	0x7c, 0x90, 0xb2, 0x7c, 0x5a, 0x3f, 0xad, 0x60, 0x19, 0x21, 0x41, 0x98, 0xee, 0x4b, 0x1f, 0x5f,
	0xe0, 0x67, 0xdb, 0xe7, 0x62, 0x6c, 0x63, 0xed, 0x29, 0x8a, 0x7e, 0x8e, 0x72, 0x7d, 0x46, 0xd7,
	0x15, 0x5c, 0x63, 0x14, 0x08, 0xdf, 0x7b, 0x50, 0x90, 0x8f, 0xa9, 0xcf, 0xa6, 0xf1, 0x34, 0xd2,
	0xf8, 0x75, 0x52, 0xac, 0x84, 0x4d, 0x78, 0x7d, 0x5e, 0x83, 0xc3, 0xea, 0x2b, 0xd5, 0x4f, 0xc5,
	0x8d, 0x4b, 0x05, 0x35, 0x7b, 0x48, 0xa1, 0x69, 0xfd, 0x05, 0xca, 0xff, 0x39, 0xfd, 0x9c, 0xca,
	0xb0, 0x54, 0x64, 0x88, 0x24, 0x2d, 0x18, 0x8f, 0x5e, 0xb3, 0x3e, 0xd1, 0x49, 0x80, 0x94, 0x9e,
	0x77, 0x1a, 0xdf, 0x08, 0x3e, 0xe1, 0x58, 0x83, 0x7c, 0x78, 0xfd, 0x79, 0x26, 0xc6, 0x2d, 0x68,
	0x51, 0x77, 0xf1, 0x19, 0xca, 0xe8, 0x8c, 0x7e, 0x42, 0xc1, 0x28, 0x40, 0x25, 0x4c, 0xea, 0x00,
	0xd2, 0x0d, 0xe6, 0x63, 0xca, 0x3e, 0xa5, 0xb3, 0x39, 0x47, 0xd9, 0xe8, 0xfa, 0xc9, 0xd4, 0xfe,
	0x08, 0x3e, 0x16, 0x14, 0xe4, 0x7b, 0xc8, 0x71, 0xa3, 0x91, 0xda, 0xd4, 0x9c, 0x3a, 0xd9, 0x8c,
	0x84, 0x4c, 0x58, 0xfd, 0x8a, 0x06, 0x48, 0x71, 0x15, 0xf9, 0x8c, 0xda, 0x4e, 0x25, 0x90, 0xd9,
	0x33, 0x71, 0xce, 0x89, 0xfb, 0xb3, 0xfa, 0x25, 0x2a, 0xc7, 0x79, 0xfd, 0xe9, 0x74, 0xdb, 0x95,
	0x28, 0x12, 0x71, 0xbe, 0xac, 0xc1, 0x61, 0xf5, 0x95, 0xe2, 0xa7, 0xd2, 0x66, 0x8e, 0x0c, 0xd5,
	0x8b, 0x50, 0x9d, 0x0c, 0x5a, 0x49, 0x94, 0xbb, 0x49, 0xf9, 0xf4, 0x57, 0x7c, 0x44, 0xa4, 0xb6,
	0xa4, 0x9b, 0x94, 0x1a, 0x3b, 0x8e, 0x8c, 0x04, 0x47, 0x58, 0x7e, 0x41, 0x83, 0xa9, 0xe4, 0xd9,
	0xa1, 0xd3, 0x31, 0xce, 0x09, 0x88, 0xa4, 0x0a, 0x12, 0x20, 0xfa, 0x45, 0x2a, 0xc5, 0xb3, 0xfa,
	0x53, 0x0a, 0x29, 0x12, 0xd0, 0x52, 0xf7, 0x45, 0xe5, 0x53, 0xd5, 0x7d, 0xde, 0xa6, 0xee, 0x3e,
	0x6f, 0xec, 0xda, 0x7d, 0x0e, 0x47, 0x58, 0xfe, 0xa2, 0x06, 0x93, 0x89, 0xed, 0xb4, 0x53, 0x31,
	0xc6, 0x71, 0x80, 0xd9, 0xd3, 0x71, 0xee, 0x71, 0x08, 0x7d, 0x9e, 0x8a, 0x70, 0x4e, 0x3f, 0xab,
	0x10, 0x21, 0xb1, 0xf1, 0xc7, 0x2c, 0x72, 0x5a, 0xb9, 0xe7, 0x75, 0x36, 0x3e, 0xfd, 0x15, 0x40,
	0xb3, 0x4f, 0xc5, 0xe5, 0x51, 0x41, 0xe9, 0x97, 0xa9, 0x4c, 0x17, 0xf4, 0x67, 0x54, 0x9e, 0x41,
	0x81, 0x40, 0xe4, 0xfa, 0x23, 0x0d, 0x8e, 0x77, 0xda, 0x3f, 0x3a, 0x1f, 0x13, 0xaf, 0x03, 0xec,
	0xec, 0x07, 0xfb, 0xd8, 0x59, 0xd2, 0x5f, 0xa2, 0xc2, 0xbe, 0xa0, 0xcf, 0x2b, 0x84, 0xed, 0x80,
	0x47, 0x64, 0x6e, 0x43, 0x31, 0xb2, 0xb7, 0x71, 0x5c, 0x61, 0x47, 0xa2, 0x71, 0xf6, 0x84, 0xca,
	0x90, 0x82, 0x0f, 0x28, 0x9e, 0xa7, 0x52, 0x3c, 0xa5, 0x9f, 0x4a, 0xb1, 0x24, 0x01, 0x48, 0xd8,
	0x7e, 0x51, 0x03, 0xa4, 0xa8, 0xdf, 0x9f, 0x51, 0x70, 0x8f, 0x82, 0xcc, 0xea, 0x2a, 0x19, 0xa2,
	0x30, 0x1d, 0x9d, 0x5c, 0x12, 0x9c, 0xc8, 0xe3, 0x00, 0x48, 0x45, 0xe3, 0x63, 0x89, 0x19, 0x2d,
	0x9a, 0x92, 0x2a, 0x90, 0x6b, 0xe4, 0x1d, 0xe3, 0x49, 0x48, 0x84, 0x33, 0x94, 0xca, 0xc7, 0x71,
	0x86, 0x61, 0xd3, 0x13, 0x30, 0x0c, 0x89, 0x10, 0x86, 0x3f, 0x07, 0x13, 0xf1, 0xba, 0x72, 0x3c,
	0xdb, 0x8a, 0xb5, 0x77, 0x61, 0xdd, 0x29, 0xeb, 0x8a, 0x51, 0x22, 0xfc, 0x3f, 0xa7, 0xc1, 0x54,
	0xb2, 0xd8, 0x1c, 0xf7, 0x9d, 0x09, 0x88, 0x2e, 0x42, 0x74, 0x72, 0x9b, 0x09, 0x5a, 0x44, 0x8c,
	0x9f, 0x07, 0xa4, 0x28, 0xf2, 0xc6, 0xed, 0x2e, 0x09, 0x92, 0x92, 0x10, 0x75, 0xb2, 0xb4, 0x24,
	0x11, 0x96, 0x7d, 0x82, 0x54, 0xad, 0x8d, 0x0f, 0x7c, 0xd8, 0x94, 0x9e, 0x64, 0x77, 0x1a, 0xf3,
	0x10, 0x9f, 0xe5, 0x7c, 0xc5, 0x48, 0x29, 0xf5, 0x78, 0x42, 0xdb, 0xad, 0x1e, 0xf8, 0x75, 0x9a,
	0xd7, 0x32, 0x05, 0x31, 0xaf, 0x15, 0xc5, 0xbb, 0x33, 0x49, 0xcf, 0x17, 0x03, 0x49, 0xce, 0xeb,
	0x24, 0x4c, 0x47, 0x6d, 0x27, 0xc1, 0x89, 0x3c, 0x9f, 0x81, 0x89, 0x5b, 0x38, 0x5a, 0xb2, 0x3a,
	0x9e, 0x9e, 0xef, 0x7b, 0x49, 0x6b, 0x93, 0x5b, 0x3b, 0x9a, 0x7c, 0x8c, 0x0d, 0x4f, 0xfe, 0x91,
	0xfc, 0x9a, 0x97, 0x41, 0x3a, 0x2f, 0x72, 0xbc, 0xd9, 0x53, 0xa9, 0x32, 0x30, 0x80, 0x6e, 0x6a,
	0x88, 0x81, 0x5f, 0xd3, 0xce, 0xdf, 0xac, 0x7c, 0xfb, 0x07, 0x73, 0x43, 0xdf, 0xfb, 0xc1, 0xdc,
	0xd0, 0x8f, 0x7e, 0x30, 0xa7, 0x7d, 0xf6, 0xf1, 0x9c, 0xf6, 0x7b, 0x8f, 0xe7, 0xb4, 0xbf, 0x7a,
	0x3c, 0xa7, 0x7d, 0xfb, 0xf1, 0x9c, 0xf6, 0xaf, 0x8f, 0xe7, 0xb4, 0x7f, 0x7f, 0x3c, 0x37, 0xf4,
	0xa3, 0xc7, 0x73, 0xda, 0x97, 0xde, 0x9d, 0x1b, 0xfa, 0xf6, 0xbb, 0x73, 0x43, 0xdf, 0x7b, 0x77,
	0x6e, 0x08, 0xa6, 0xe5, 0x2a, 0x0a, 0xff, 0xd7, 0x45, 0xde, 0xc7, 0xf9, 0xff, 0xf8, 0xdd, 0x19,
	0xa5, 0xbb, 0x2c, 0x2f, 0xfc, 0x4f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x6d, 0x9f, 0xb9, 0x31, 0x05,
	0x78, 0x00, 0x00,
}

func (x InteractiveMediaStyle) String() string {
	s, ok := InteractiveMediaStyle_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x MessageState) String() string {
	s, ok := MessageState_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x ListLoadMode) String() string {
	s, ok := ListLoadMode_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x DialogsFilter) String() string {
	s, ok := DialogsFilter_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *MessageAttributes) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MessageAttributes)
	if !ok {
		that2, ok := that.(MessageAttributes)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.IsMentioned.Equal(that1.IsMentioned) {
		return false
	}
	if !this.IsHighlighted.Equal(that1.IsHighlighted) {
		return false
	}
	if !this.IsNotified.Equal(that1.IsNotified) {
		return false
	}
	if !this.IsOnlyForYou.Equal(that1.IsOnlyForYou) {
		return false
	}
	return true
}
func (this *QuotedMessage) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*QuotedMessage)
	if !ok {
		that2, ok := that.(QuotedMessage)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.MessageId != that1.MessageId {
		return false
	}
	if this.PublicGroupId != that1.PublicGroupId {
		return false
	}
	if this.SenderUserId != that1.SenderUserId {
		return false
	}
	if this.MessageDate != that1.MessageDate {
		return false
	}
	if !this.QuotedMessageContent.Equal(that1.QuotedMessageContent) {
		return false
	}
	return true
}
func (this *MessageMedia) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MessageMedia)
	if !ok {
		that2, ok := that.(MessageMedia)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Webpage.Equal(that1.Webpage) {
		return false
	}
	if !this.Image.Equal(that1.Image) {
		return false
	}
	if !this.Audio.Equal(that1.Audio) {
		return false
	}
	if len(this.Actions) != len(that1.Actions) {
		return false
	}
	for i := range this.Actions {
		if !this.Actions[i].Equal(that1.Actions[i]) {
			return false
		}
	}
	return true
}
func (this *WebpageMedia) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*WebpageMedia)
	if !ok {
		that2, ok := that.(WebpageMedia)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Url.Equal(that1.Url) {
		return false
	}
	if !this.Title.Equal(that1.Title) {
		return false
	}
	if !this.Description.Equal(that1.Description) {
		return false
	}
	if !this.Image.Equal(that1.Image) {
		return false
	}
	return true
}
func (this *ImageMedia) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ImageMedia)
	if !ok {
		that2, ok := that.(ImageMedia)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Image.Equal(that1.Image) {
		return false
	}
	return true
}
func (this *AudioMedia) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AudioMedia)
	if !ok {
		that2, ok := that.(AudioMedia)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Audio.Equal(that1.Audio) {
		return false
	}
	return true
}
func (this *InteractiveMediaWidget) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*InteractiveMediaWidget)
	if !ok {
		that2, ok := that.(InteractiveMediaWidget)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.Body == nil {
		if this.Body != nil {
			return false
		}
	} else if this.Body == nil {
		return false
	} else if !this.Body.Equal(that1.Body) {
		return false
	}
	return true
}
func (this *InteractiveMediaWidget_InteractiveMediaButton) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*InteractiveMediaWidget_InteractiveMediaButton)
	if !ok {
		that2, ok := that.(InteractiveMediaWidget_InteractiveMediaButton)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.InteractiveMediaButton.Equal(that1.InteractiveMediaButton) {
		return false
	}
	return true
}
func (this *InteractiveMediaWidget_InteractiveMediaSelect) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*InteractiveMediaWidget_InteractiveMediaSelect)
	if !ok {
		that2, ok := that.(InteractiveMediaWidget_InteractiveMediaSelect)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.InteractiveMediaSelect.Equal(that1.InteractiveMediaSelect) {
		return false
	}
	return true
}
func (this *InteractiveMediaButton) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*InteractiveMediaButton)
	if !ok {
		that2, ok := that.(InteractiveMediaButton)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Value != that1.Value {
		return false
	}
	if !this.Label.Equal(that1.Label) {
		return false
	}
	return true
}
func (this *InteractiveMediaSelect) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*InteractiveMediaSelect)
	if !ok {
		that2, ok := that.(InteractiveMediaSelect)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Options) != len(that1.Options) {
		return false
	}
	for i := range this.Options {
		if !this.Options[i].Equal(that1.Options[i]) {
			return false
		}
	}
	if !this.Label.Equal(that1.Label) {
		return false
	}
	if !this.DefaultValue.Equal(that1.DefaultValue) {
		return false
	}
	return true
}
func (this *InteractiveMediaSelectOption) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*InteractiveMediaSelectOption)
	if !ok {
		that2, ok := that.(InteractiveMediaSelectOption)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Value != that1.Value {
		return false
	}
	if this.Label != that1.Label {
		return false
	}
	return true
}
func (this *InteractiveMedia) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*InteractiveMedia)
	if !ok {
		that2, ok := that.(InteractiveMedia)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if !this.Widget.Equal(that1.Widget) {
		return false
	}
	if this.Style != that1.Style {
		return false
	}
	if !this.Confirm.Equal(that1.Confirm) {
		return false
	}
	return true
}
func (this *InteractiveMediaTranslation) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*InteractiveMediaTranslation)
	if !ok {
		that2, ok := that.(InteractiveMediaTranslation)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if this.Value != that1.Value {
		return false
	}
	return true
}
func (this *InteractiveMediaTranslationGroup) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*InteractiveMediaTranslationGroup)
	if !ok {
		that2, ok := that.(InteractiveMediaTranslationGroup)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Language != that1.Language {
		return false
	}
	if len(this.Messages) != len(that1.Messages) {
		return false
	}
	for i := range this.Messages {
		if !this.Messages[i].Equal(that1.Messages[i]) {
			return false
		}
	}
	return true
}
func (this *InteractiveMediaGroup) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*InteractiveMediaGroup)
	if !ok {
		that2, ok := that.(InteractiveMediaGroup)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Actions) != len(that1.Actions) {
		return false
	}
	for i := range this.Actions {
		if !this.Actions[i].Equal(that1.Actions[i]) {
			return false
		}
	}
	if !this.Title.Equal(that1.Title) {
		return false
	}
	if !this.Description.Equal(that1.Description) {
		return false
	}
	if len(this.Translations) != len(that1.Translations) {
		return false
	}
	for i := range this.Translations {
		if !this.Translations[i].Equal(that1.Translations[i]) {
			return false
		}
	}
	return true
}
func (this *InteractiveMediaConfirm) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*InteractiveMediaConfirm)
	if !ok {
		that2, ok := that.(InteractiveMediaConfirm)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Text.Equal(that1.Text) {
		return false
	}
	if !this.Title.Equal(that1.Title) {
		return false
	}
	if !this.Ok.Equal(that1.Ok) {
		return false
	}
	if !this.Dismiss.Equal(that1.Dismiss) {
		return false
	}
	return true
}
func (this *UpdateInteractiveMediaEvent) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpdateInteractiveMediaEvent)
	if !ok {
		that2, ok := that.(UpdateInteractiveMediaEvent)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Mid.Equal(that1.Mid) {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if this.Value != that1.Value {
		return false
	}
	if this.Uid != that1.Uid {
		return false
	}
	return true
}
func (this *RequestDoInteractiveMediaAction) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RequestDoInteractiveMediaAction)
	if !ok {
		that2, ok := that.(RequestDoInteractiveMediaAction)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Mid.Equal(that1.Mid) {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if this.Value != that1.Value {
		return false
	}
	return true
}
func (this *MessageContent) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MessageContent)
	if !ok {
		that2, ok := that.(MessageContent)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.Body == nil {
		if this.Body != nil {
			return false
		}
	} else if this.Body == nil {
		return false
	} else if !this.Body.Equal(that1.Body) {
		return false
	}
	return true
}
func (this *MessageContent_TextMessage) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MessageContent_TextMessage)
	if !ok {
		that2, ok := that.(MessageContent_TextMessage)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.TextMessage.Equal(that1.TextMessage) {
		return false
	}
	return true
}
func (this *MessageContent_ServiceMessage) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MessageContent_ServiceMessage)
	if !ok {
		that2, ok := that.(MessageContent_ServiceMessage)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ServiceMessage.Equal(that1.ServiceMessage) {
		return false
	}
	return true
}
func (this *MessageContent_DocumentMessage) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MessageContent_DocumentMessage)
	if !ok {
		that2, ok := that.(MessageContent_DocumentMessage)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DocumentMessage.Equal(that1.DocumentMessage) {
		return false
	}
	return true
}
func (this *MessageContent_JsonMessage) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MessageContent_JsonMessage)
	if !ok {
		that2, ok := that.(MessageContent_JsonMessage)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.JsonMessage.Equal(that1.JsonMessage) {
		return false
	}
	return true
}
func (this *MessageContent_UnsupportedMessage) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MessageContent_UnsupportedMessage)
	if !ok {
		that2, ok := that.(MessageContent_UnsupportedMessage)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.UnsupportedMessage.Equal(that1.UnsupportedMessage) {
		return false
	}
	return true
}
func (this *MessageContent_StickerMessage) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MessageContent_StickerMessage)
	if !ok {
		that2, ok := that.(MessageContent_StickerMessage)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.StickerMessage.Equal(that1.StickerMessage) {
		return false
	}
	return true
}
func (this *MessageContent_BinaryMessage) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MessageContent_BinaryMessage)
	if !ok {
		that2, ok := that.(MessageContent_BinaryMessage)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.BinaryMessage.Equal(that1.BinaryMessage) {
		return false
	}
	return true
}
func (this *MessageContent_EmptyMessage) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MessageContent_EmptyMessage)
	if !ok {
		that2, ok := that.(MessageContent_EmptyMessage)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.EmptyMessage.Equal(that1.EmptyMessage) {
		return false
	}
	return true
}
func (this *MessageContent_DeletedMessage) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MessageContent_DeletedMessage)
	if !ok {
		that2, ok := that.(MessageContent_DeletedMessage)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DeletedMessage.Equal(that1.DeletedMessage) {
		return false
	}
	return true
}
func (this *TextMessage) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TextMessage)
	if !ok {
		that2, ok := that.(TextMessage)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Text != that1.Text {
		return false
	}
	if !this.Ext.Equal(that1.Ext) {
		return false
	}
	if len(this.Media) != len(that1.Media) {
		return false
	}
	for i := range this.Media {
		if !this.Media[i].Equal(that1.Media[i]) {
			return false
		}
	}
	if len(this.Extensions) != len(that1.Extensions) {
		return false
	}
	for i := range this.Extensions {
		if !this.Extensions[i].Equal(that1.Extensions[i]) {
			return false
		}
	}
	if len(this.Mentions) != len(that1.Mentions) {
		return false
	}
	for i := range this.Mentions {
		if !this.Mentions[i].Equal(that1.Mentions[i]) {
			return false
		}
	}
	return true
}
func (this *Mention) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Mention)
	if !ok {
		that2, ok := that.(Mention)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Peer.Equal(that1.Peer) {
		return false
	}
	if this.All != that1.All {
		return false
	}
	return true
}
func (this *TextMessageEx) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TextMessageEx)
	if !ok {
		that2, ok := that.(TextMessageEx)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.Body == nil {
		if this.Body != nil {
			return false
		}
	} else if this.Body == nil {
		return false
	} else if !this.Body.Equal(that1.Body) {
		return false
	}
	return true
}
func (this *TextMessageEx_TextExMarkdown) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TextMessageEx_TextExMarkdown)
	if !ok {
		that2, ok := that.(TextMessageEx_TextExMarkdown)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.TextExMarkdown.Equal(that1.TextExMarkdown) {
		return false
	}
	return true
}
func (this *TextMessageEx_TextModernMessage) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TextMessageEx_TextModernMessage)
	if !ok {
		that2, ok := that.(TextMessageEx_TextModernMessage)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.TextModernMessage.Equal(that1.TextModernMessage) {
		return false
	}
	return true
}
func (this *TextMessageEx_TextCommand) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TextMessageEx_TextCommand)
	if !ok {
		that2, ok := that.(TextMessageEx_TextCommand)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.TextCommand.Equal(that1.TextCommand) {
		return false
	}
	return true
}
func (this *TextExMarkdown) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TextExMarkdown)
	if !ok {
		that2, ok := that.(TextExMarkdown)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Markdown != that1.Markdown {
		return false
	}
	return true
}
func (this *TextModernMessage) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TextModernMessage)
	if !ok {
		that2, ok := that.(TextModernMessage)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Text.Equal(that1.Text) {
		return false
	}
	if !this.SenderNameOverride.Equal(that1.SenderNameOverride) {
		return false
	}
	if !this.SenderPhotoOverride.Equal(that1.SenderPhotoOverride) {
		return false
	}
	if !this.Style.Equal(that1.Style) {
		return false
	}
	if len(this.Attaches) != len(that1.Attaches) {
		return false
	}
	for i := range this.Attaches {
		if !this.Attaches[i].Equal(that1.Attaches[i]) {
			return false
		}
	}
	return true
}
func (this *ParagraphStyle) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ParagraphStyle)
	if !ok {
		that2, ok := that.(ParagraphStyle)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ShowParagraph.Equal(that1.ShowParagraph) {
		return false
	}
	if !this.ParagraphColor.Equal(that1.ParagraphColor) {
		return false
	}
	if !this.BgColor.Equal(that1.BgColor) {
		return false
	}
	return true
}
func (this *TextModernAttach) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TextModernAttach)
	if !ok {
		that2, ok := that.(TextModernAttach)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Title.Equal(that1.Title) {
		return false
	}
	if !this.TitleUrl.Equal(that1.TitleUrl) {
		return false
	}
	if !this.TitleIcon.Equal(that1.TitleIcon) {
		return false
	}
	if !this.Text.Equal(that1.Text) {
		return false
	}
	if !this.Style.Equal(that1.Style) {
		return false
	}
	if len(this.Fields) != len(that1.Fields) {
		return false
	}
	for i := range this.Fields {
		if !this.Fields[i].Equal(that1.Fields[i]) {
			return false
		}
	}
	return true
}
func (this *TextModernField) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TextModernField)
	if !ok {
		that2, ok := that.(TextModernField)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Title != that1.Title {
		return false
	}
	if this.Value != that1.Value {
		return false
	}
	if !this.IsShort.Equal(that1.IsShort) {
		return false
	}
	return true
}
func (this *TextCommand) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TextCommand)
	if !ok {
		that2, ok := that.(TextCommand)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Command != that1.Command {
		return false
	}
	if this.Args != that1.Args {
		return false
	}
	return true
}
func (this *ServiceMessage) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ServiceMessage)
	if !ok {
		that2, ok := that.(ServiceMessage)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Text != that1.Text {
		return false
	}
	if !this.Ext.Equal(that1.Ext) {
		return false
	}
	return true
}
func (this *ServiceEx) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ServiceEx)
	if !ok {
		that2, ok := that.(ServiceEx)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.Body == nil {
		if this.Body != nil {
			return false
		}
	} else if this.Body == nil {
		return false
	} else if !this.Body.Equal(that1.Body) {
		return false
	}
	return true
}
func (this *ServiceEx_UserInvited) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ServiceEx_UserInvited)
	if !ok {
		that2, ok := that.(ServiceEx_UserInvited)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.UserInvited.Equal(that1.UserInvited) {
		return false
	}
	return true
}
func (this *ServiceEx_UserJoined) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ServiceEx_UserJoined)
	if !ok {
		that2, ok := that.(ServiceEx_UserJoined)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.UserJoined.Equal(that1.UserJoined) {
		return false
	}
	return true
}
func (this *ServiceEx_UserKicked) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ServiceEx_UserKicked)
	if !ok {
		that2, ok := that.(ServiceEx_UserKicked)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.UserKicked.Equal(that1.UserKicked) {
		return false
	}
	return true
}
func (this *ServiceEx_UserLeft) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ServiceEx_UserLeft)
	if !ok {
		that2, ok := that.(ServiceEx_UserLeft)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.UserLeft.Equal(that1.UserLeft) {
		return false
	}
	return true
}
func (this *ServiceEx_GroupCreated) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ServiceEx_GroupCreated)
	if !ok {
		that2, ok := that.(ServiceEx_GroupCreated)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.GroupCreated.Equal(that1.GroupCreated) {
		return false
	}
	return true
}
func (this *ServiceEx_ChangedShortname) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ServiceEx_ChangedShortname)
	if !ok {
		that2, ok := that.(ServiceEx_ChangedShortname)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ChangedShortname.Equal(that1.ChangedShortname) {
		return false
	}
	return true
}
func (this *ServiceEx_ChangedTitle) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ServiceEx_ChangedTitle)
	if !ok {
		that2, ok := that.(ServiceEx_ChangedTitle)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ChangedTitle.Equal(that1.ChangedTitle) {
		return false
	}
	return true
}
func (this *ServiceEx_ChangedTopic) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ServiceEx_ChangedTopic)
	if !ok {
		that2, ok := that.(ServiceEx_ChangedTopic)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ChangedTopic.Equal(that1.ChangedTopic) {
		return false
	}
	return true
}
func (this *ServiceEx_ChangedAbout) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ServiceEx_ChangedAbout)
	if !ok {
		that2, ok := that.(ServiceEx_ChangedAbout)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ChangedAbout.Equal(that1.ChangedAbout) {
		return false
	}
	return true
}
func (this *ServiceEx_ChangedAvatar) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ServiceEx_ChangedAvatar)
	if !ok {
		that2, ok := that.(ServiceEx_ChangedAvatar)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ChangedAvatar.Equal(that1.ChangedAvatar) {
		return false
	}
	return true
}
func (this *ServiceEx_ContactRegistered) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ServiceEx_ContactRegistered)
	if !ok {
		that2, ok := that.(ServiceEx_ContactRegistered)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ContactRegistered.Equal(that1.ContactRegistered) {
		return false
	}
	return true
}
func (this *ServiceEx_PhoneMissed) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ServiceEx_PhoneMissed)
	if !ok {
		that2, ok := that.(ServiceEx_PhoneMissed)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.PhoneMissed.Equal(that1.PhoneMissed) {
		return false
	}
	return true
}
func (this *ServiceEx_PhoneCall) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ServiceEx_PhoneCall)
	if !ok {
		that2, ok := that.(ServiceEx_PhoneCall)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.PhoneCall.Equal(that1.PhoneCall) {
		return false
	}
	return true
}
func (this *ServiceEx_PhoneRejected) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ServiceEx_PhoneRejected)
	if !ok {
		that2, ok := that.(ServiceEx_PhoneRejected)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.PhoneRejected.Equal(that1.PhoneRejected) {
		return false
	}
	return true
}
func (this *ServiceEx_ChatArchived) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ServiceEx_ChatArchived)
	if !ok {
		that2, ok := that.(ServiceEx_ChatArchived)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ChatArchived.Equal(that1.ChatArchived) {
		return false
	}
	return true
}
func (this *ServiceEx_ChatRestored) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ServiceEx_ChatRestored)
	if !ok {
		that2, ok := that.(ServiceEx_ChatRestored)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ChatRestored.Equal(that1.ChatRestored) {
		return false
	}
	return true
}
func (this *ServiceExUserInvited) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ServiceExUserInvited)
	if !ok {
		that2, ok := that.(ServiceExUserInvited)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.InvitedUid != that1.InvitedUid {
		return false
	}
	return true
}
func (this *ServiceExUserJoined) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ServiceExUserJoined)
	if !ok {
		that2, ok := that.(ServiceExUserJoined)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.JoinedUserId != that1.JoinedUserId {
		return false
	}
	return true
}
func (this *ServiceExUserKicked) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ServiceExUserKicked)
	if !ok {
		that2, ok := that.(ServiceExUserKicked)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.KickedUid != that1.KickedUid {
		return false
	}
	return true
}
func (this *ServiceExUserLeft) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ServiceExUserLeft)
	if !ok {
		that2, ok := that.(ServiceExUserLeft)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.LeftUserId != that1.LeftUserId {
		return false
	}
	return true
}
func (this *ServiceExGroupCreated) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ServiceExGroupCreated)
	if !ok {
		that2, ok := that.(ServiceExGroupCreated)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *ServiceExChangedShortname) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ServiceExChangedShortname)
	if !ok {
		that2, ok := that.(ServiceExChangedShortname)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Shortname != that1.Shortname {
		return false
	}
	return true
}
func (this *ServiceExChangedTitle) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ServiceExChangedTitle)
	if !ok {
		that2, ok := that.(ServiceExChangedTitle)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Title != that1.Title {
		return false
	}
	return true
}
func (this *ServiceExChangedTopic) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ServiceExChangedTopic)
	if !ok {
		that2, ok := that.(ServiceExChangedTopic)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Topic.Equal(that1.Topic) {
		return false
	}
	return true
}
func (this *ServiceExChangedAbout) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ServiceExChangedAbout)
	if !ok {
		that2, ok := that.(ServiceExChangedAbout)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.About.Equal(that1.About) {
		return false
	}
	return true
}
func (this *ServiceExChangedAvatar) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ServiceExChangedAvatar)
	if !ok {
		that2, ok := that.(ServiceExChangedAvatar)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Avatar.Equal(that1.Avatar) {
		return false
	}
	return true
}
func (this *ServiceExContactRegistered) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ServiceExContactRegistered)
	if !ok {
		that2, ok := that.(ServiceExContactRegistered)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Uid != that1.Uid {
		return false
	}
	return true
}
func (this *ServiceExPhoneMissed) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ServiceExPhoneMissed)
	if !ok {
		that2, ok := that.(ServiceExPhoneMissed)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *ServiceExPhoneCall) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ServiceExPhoneCall)
	if !ok {
		that2, ok := that.(ServiceExPhoneCall)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Duration != that1.Duration {
		return false
	}
	return true
}
func (this *ServiceExPhoneRejected) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ServiceExPhoneRejected)
	if !ok {
		that2, ok := that.(ServiceExPhoneRejected)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *ServiceExChatArchived) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ServiceExChatArchived)
	if !ok {
		that2, ok := that.(ServiceExChatArchived)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *ServiceExChatRestored) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ServiceExChatRestored)
	if !ok {
		that2, ok := that.(ServiceExChatRestored)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *DocumentMessage) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DocumentMessage)
	if !ok {
		that2, ok := that.(DocumentMessage)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.FileId != that1.FileId {
		return false
	}
	if this.AccessHash != that1.AccessHash {
		return false
	}
	if this.FileSize != that1.FileSize {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.MimeType != that1.MimeType {
		return false
	}
	if !this.Thumb.Equal(that1.Thumb) {
		return false
	}
	if !this.Ext.Equal(that1.Ext) {
		return false
	}
	return true
}
func (this *DocumentEx) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DocumentEx)
	if !ok {
		that2, ok := that.(DocumentEx)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.Body == nil {
		if this.Body != nil {
			return false
		}
	} else if this.Body == nil {
		return false
	} else if !this.Body.Equal(that1.Body) {
		return false
	}
	return true
}
func (this *DocumentEx_Photo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DocumentEx_Photo)
	if !ok {
		that2, ok := that.(DocumentEx_Photo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Photo.Equal(that1.Photo) {
		return false
	}
	return true
}
func (this *DocumentEx_Video) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DocumentEx_Video)
	if !ok {
		that2, ok := that.(DocumentEx_Video)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Video.Equal(that1.Video) {
		return false
	}
	return true
}
func (this *DocumentEx_Voice) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DocumentEx_Voice)
	if !ok {
		that2, ok := that.(DocumentEx_Voice)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Voice.Equal(that1.Voice) {
		return false
	}
	return true
}
func (this *DocumentExPhoto) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DocumentExPhoto)
	if !ok {
		that2, ok := that.(DocumentExPhoto)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.W != that1.W {
		return false
	}
	if this.H != that1.H {
		return false
	}
	return true
}
func (this *DocumentExVideo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DocumentExVideo)
	if !ok {
		that2, ok := that.(DocumentExVideo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.W != that1.W {
		return false
	}
	if this.H != that1.H {
		return false
	}
	if this.Duration != that1.Duration {
		return false
	}
	return true
}
func (this *DocumentExVoice) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DocumentExVoice)
	if !ok {
		that2, ok := that.(DocumentExVoice)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Duration != that1.Duration {
		return false
	}
	return true
}
func (this *JsonMessage) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*JsonMessage)
	if !ok {
		that2, ok := that.(JsonMessage)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.RawJson != that1.RawJson {
		return false
	}
	return true
}
func (this *UnsupportedMessage) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UnsupportedMessage)
	if !ok {
		that2, ok := that.(UnsupportedMessage)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *StickerMessage) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*StickerMessage)
	if !ok {
		that2, ok := that.(StickerMessage)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.StickerId.Equal(that1.StickerId) {
		return false
	}
	if !this.FastPreview.Equal(that1.FastPreview) {
		return false
	}
	if !this.Image_512.Equal(that1.Image_512) {
		return false
	}
	if !this.Image_256.Equal(that1.Image_256) {
		return false
	}
	if !this.StickerCollectionId.Equal(that1.StickerCollectionId) {
		return false
	}
	if !this.StickerCollectionAccessHash.Equal(that1.StickerCollectionAccessHash) {
		return false
	}
	if !this.Emoji.Equal(that1.Emoji) {
		return false
	}
	if !this.AnimatedStickerJson.Equal(that1.AnimatedStickerJson) {
		return false
	}
	return true
}
func (this *BinaryMessage) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*BinaryMessage)
	if !ok {
		that2, ok := that.(BinaryMessage)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ContentTag != that1.ContentTag {
		return false
	}
	if !bytes.Equal(this.Msg, that1.Msg) {
		return false
	}
	return true
}
func (this *EmptyMessage) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*EmptyMessage)
	if !ok {
		that2, ok := that.(EmptyMessage)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *DeletedMessage) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DeletedMessage)
	if !ok {
		that2, ok := that.(DeletedMessage)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.IsLocal.Equal(that1.IsLocal) {
		return false
	}
	return true
}
func (this *DialogShort) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DialogShort)
	if !ok {
		that2, ok := that.(DialogShort)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Peer.Equal(that1.Peer) {
		return false
	}
	if this.Counter != that1.Counter {
		return false
	}
	if this.Date != that1.Date {
		return false
	}
	return true
}
func (this *DialogGroup) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DialogGroup)
	if !ok {
		that2, ok := that.(DialogGroup)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Title != that1.Title {
		return false
	}
	if this.Key != that1.Key {
		return false
	}
	if len(this.Dialogs) != len(that1.Dialogs) {
		return false
	}
	for i := range this.Dialogs {
		if !this.Dialogs[i].Equal(that1.Dialogs[i]) {
			return false
		}
	}
	return true
}
func (this *MessageReaction) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MessageReaction)
	if !ok {
		that2, ok := that.(MessageReaction)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Users) != len(that1.Users) {
		return false
	}
	for i := range this.Users {
		if this.Users[i] != that1.Users[i] {
			return false
		}
	}
	if this.Code != that1.Code {
		return false
	}
	return true
}
func (this *SearchPredicate) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SearchPredicate)
	if !ok {
		that2, ok := that.(SearchPredicate)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Key != that1.Key {
		return false
	}
	if len(this.Values) != len(that1.Values) {
		return false
	}
	for i := range this.Values {
		if this.Values[i] != that1.Values[i] {
			return false
		}
	}
	return true
}
func (this *RequestSendMessage) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RequestSendMessage)
	if !ok {
		that2, ok := that.(RequestSendMessage)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Peer.Equal(that1.Peer) {
		return false
	}
	if this.DeduplicationId != that1.DeduplicationId {
		return false
	}
	if !this.Message.Equal(that1.Message) {
		return false
	}
	if this.IsOnlyForUser != that1.IsOnlyForUser {
		return false
	}
	if !this.Forward.Equal(that1.Forward) {
		return false
	}
	if !this.Reply.Equal(that1.Reply) {
		return false
	}
	if len(this.Predicates) != len(that1.Predicates) {
		return false
	}
	for i := range this.Predicates {
		if !this.Predicates[i].Equal(that1.Predicates[i]) {
			return false
		}
	}
	if len(this.WhiteList) != len(that1.WhiteList) {
		return false
	}
	for i := range this.WhiteList {
		if this.WhiteList[i] != that1.WhiteList[i] {
			return false
		}
	}
	if len(this.BlackList) != len(that1.BlackList) {
		return false
	}
	for i := range this.BlackList {
		if this.BlackList[i] != that1.BlackList[i] {
			return false
		}
	}
	return true
}
func (this *RequestUpdateMessage) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RequestUpdateMessage)
	if !ok {
		that2, ok := that.(RequestUpdateMessage)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Mid.Equal(that1.Mid) {
		return false
	}
	if !this.UpdatedMessage.Equal(that1.UpdatedMessage) {
		return false
	}
	if this.LastEditedAt != that1.LastEditedAt {
		return false
	}
	return true
}
func (this *RequestMessageReceived) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RequestMessageReceived)
	if !ok {
		that2, ok := that.(RequestMessageReceived)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Peer.Equal(that1.Peer) {
		return false
	}
	if this.Date != that1.Date {
		return false
	}
	return true
}
func (this *RequestMessageRead) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RequestMessageRead)
	if !ok {
		that2, ok := that.(RequestMessageRead)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Peer.Equal(that1.Peer) {
		return false
	}
	if this.Date != that1.Date {
		return false
	}
	return true
}
func (this *RequestDeleteMessageObsolete) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RequestDeleteMessageObsolete)
	if !ok {
		that2, ok := that.(RequestDeleteMessageObsolete)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Mids) != len(that1.Mids) {
		return false
	}
	for i := range this.Mids {
		if !this.Mids[i].Equal(that1.Mids[i]) {
			return false
		}
	}
	return true
}
func (this *RequestDeleteMessage) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RequestDeleteMessage)
	if !ok {
		that2, ok := that.(RequestDeleteMessage)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Peer.Equal(that1.Peer) {
		return false
	}
	if !this.MessageId.Equal(that1.MessageId) {
		return false
	}
	if this.DeleteForUserOnly != that1.DeleteForUserOnly {
		return false
	}
	return true
}
func (this *RequestClearChat) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RequestClearChat)
	if !ok {
		that2, ok := that.(RequestClearChat)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Peer.Equal(that1.Peer) {
		return false
	}
	if this.LastMessageDate != that1.LastMessageDate {
		return false
	}
	return true
}
func (this *RequestDeleteChat) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RequestDeleteChat)
	if !ok {
		that2, ok := that.(RequestDeleteChat)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Peer.Equal(that1.Peer) {
		return false
	}
	if this.LastMessageDate != that1.LastMessageDate {
		return false
	}
	return true
}
func (this *RequestArchiveChat) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RequestArchiveChat)
	if !ok {
		that2, ok := that.(RequestArchiveChat)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Peer.Equal(that1.Peer) {
		return false
	}
	return true
}
func (this *RequestMessageSetReaction) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RequestMessageSetReaction)
	if !ok {
		that2, ok := that.(RequestMessageSetReaction)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Peer.Equal(that1.Peer) {
		return false
	}
	if !this.Mid.Equal(that1.Mid) {
		return false
	}
	if this.Code != that1.Code {
		return false
	}
	return true
}
func (this *RequestMessageRemoveReaction) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RequestMessageRemoveReaction)
	if !ok {
		that2, ok := that.(RequestMessageRemoveReaction)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Peer.Equal(that1.Peer) {
		return false
	}
	if !this.Mid.Equal(that1.Mid) {
		return false
	}
	if this.Code != that1.Code {
		return false
	}
	return true
}
func (this *ResponseReactionsResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ResponseReactionsResponse)
	if !ok {
		that2, ok := that.(ResponseReactionsResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Seq != that1.Seq {
		return false
	}
	if !bytes.Equal(this.State, that1.State) {
		return false
	}
	if len(this.Reactions) != len(that1.Reactions) {
		return false
	}
	for i := range this.Reactions {
		if !this.Reactions[i].Equal(that1.Reactions[i]) {
			return false
		}
	}
	return true
}
func (this *ResponseSendMessage) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ResponseSendMessage)
	if !ok {
		that2, ok := that.(ResponseSendMessage)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.MessageId.Equal(that1.MessageId) {
		return false
	}
	if this.MessageDate != that1.MessageDate {
		return false
	}
	if !this.PreviousMessageId.Equal(that1.PreviousMessageId) {
		return false
	}
	if this.CreatorUserId != that1.CreatorUserId {
		return false
	}
	if this.Clock != that1.Clock {
		return false
	}
	return true
}
func (this *UpdateMessage) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpdateMessage)
	if !ok {
		that2, ok := that.(UpdateMessage)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Peer.Equal(that1.Peer) {
		return false
	}
	if this.SenderUid != that1.SenderUid {
		return false
	}
	if this.Date != that1.Date {
		return false
	}
	if !this.Mid.Equal(that1.Mid) {
		return false
	}
	if !this.Message.Equal(that1.Message) {
		return false
	}
	if !this.Attributes.Equal(that1.Attributes) {
		return false
	}
	if that1.Attach == nil {
		if this.Attach != nil {
			return false
		}
	} else if this.Attach == nil {
		return false
	} else if !this.Attach.Equal(that1.Attach) {
		return false
	}
	if !this.PreviousMid.Equal(that1.PreviousMid) {
		return false
	}
	if !this.PrevMessageDate.Equal(that1.PrevMessageDate) {
		return false
	}
	if !this.Counter.Equal(that1.Counter) {
		return false
	}
	if !this.MyReadDate.Equal(that1.MyReadDate) {
		return false
	}
	if this.RandomId != that1.RandomId {
		return false
	}
	if this.ModifiedAt != that1.ModifiedAt {
		return false
	}
	if !this.PrevEditInPeerAt.Equal(that1.PrevEditInPeerAt) {
		return false
	}
	return true
}
func (this *UpdateMessage_Forward) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpdateMessage_Forward)
	if !ok {
		that2, ok := that.(UpdateMessage_Forward)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Forward.Equal(that1.Forward) {
		return false
	}
	return true
}
func (this *UpdateMessage_Reply) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpdateMessage_Reply)
	if !ok {
		that2, ok := that.(UpdateMessage_Reply)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Reply.Equal(that1.Reply) {
		return false
	}
	return true
}
func (this *UpdateMessageContentChanged) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpdateMessageContentChanged)
	if !ok {
		that2, ok := that.(UpdateMessageContentChanged)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Peer.Equal(that1.Peer) {
		return false
	}
	if !this.Mid.Equal(that1.Mid) {
		return false
	}
	if !this.Message.Equal(that1.Message) {
		return false
	}
	if this.EditedAt != that1.EditedAt {
		return false
	}
	if this.PrevEditInPeerAt != that1.PrevEditInPeerAt {
		return false
	}
	return true
}
func (this *UpdateMessageSent) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpdateMessageSent)
	if !ok {
		that2, ok := that.(UpdateMessageSent)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Peer.Equal(that1.Peer) {
		return false
	}
	if this.Rid != that1.Rid {
		return false
	}
	if this.Date != that1.Date {
		return false
	}
	if !this.Mid.Equal(that1.Mid) {
		return false
	}
	if !this.PrevMid.Equal(that1.PrevMid) {
		return false
	}
	if !this.UnreadCounter.Equal(that1.UnreadCounter) {
		return false
	}
	if !this.MyReadDate.Equal(that1.MyReadDate) {
		return false
	}
	if that1.Attach == nil {
		if this.Attach != nil {
			return false
		}
	} else if this.Attach == nil {
		return false
	} else if !this.Attach.Equal(that1.Attach) {
		return false
	}
	return true
}
func (this *UpdateMessageSent_Forward) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpdateMessageSent_Forward)
	if !ok {
		that2, ok := that.(UpdateMessageSent_Forward)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Forward.Equal(that1.Forward) {
		return false
	}
	return true
}
func (this *UpdateMessageSent_Reply) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpdateMessageSent_Reply)
	if !ok {
		that2, ok := that.(UpdateMessageSent_Reply)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Reply.Equal(that1.Reply) {
		return false
	}
	return true
}
func (this *UpdateMessageReceived) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpdateMessageReceived)
	if !ok {
		that2, ok := that.(UpdateMessageReceived)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Peer.Equal(that1.Peer) {
		return false
	}
	if this.StartDate != that1.StartDate {
		return false
	}
	if this.ReceivedDate != that1.ReceivedDate {
		return false
	}
	return true
}
func (this *UpdateMessageRead) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpdateMessageRead)
	if !ok {
		that2, ok := that.(UpdateMessageRead)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Peer.Equal(that1.Peer) {
		return false
	}
	if this.StartDate != that1.StartDate {
		return false
	}
	if this.ReadDate != that1.ReadDate {
		return false
	}
	return true
}
func (this *UpdateMessageReadByMe) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpdateMessageReadByMe)
	if !ok {
		that2, ok := that.(UpdateMessageReadByMe)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Peer.Equal(that1.Peer) {
		return false
	}
	if this.StartDate != that1.StartDate {
		return false
	}
	if !this.UnreadCounter.Equal(that1.UnreadCounter) {
		return false
	}
	return true
}
func (this *UpdateMessageDelete) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpdateMessageDelete)
	if !ok {
		that2, ok := that.(UpdateMessageDelete)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Peer.Equal(that1.Peer) {
		return false
	}
	if len(this.Mids) != len(that1.Mids) {
		return false
	}
	for i := range this.Mids {
		if !this.Mids[i].Equal(that1.Mids[i]) {
			return false
		}
	}
	if !this.Counter.Equal(that1.Counter) {
		return false
	}
	if this.ActionDate != that1.ActionDate {
		return false
	}
	return true
}
func (this *UpdateChatClear) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpdateChatClear)
	if !ok {
		that2, ok := that.(UpdateChatClear)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Peer.Equal(that1.Peer) {
		return false
	}
	if this.ActionDate != that1.ActionDate {
		return false
	}
	return true
}
func (this *UpdateChatDelete) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpdateChatDelete)
	if !ok {
		that2, ok := that.(UpdateChatDelete)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Peer.Equal(that1.Peer) {
		return false
	}
	if this.ActionDate != that1.ActionDate {
		return false
	}
	return true
}
func (this *UpdateChatArchive) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpdateChatArchive)
	if !ok {
		that2, ok := that.(UpdateChatArchive)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Peer.Equal(that1.Peer) {
		return false
	}
	return true
}
func (this *UpdateChatGroupsChanged) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpdateChatGroupsChanged)
	if !ok {
		that2, ok := that.(UpdateChatGroupsChanged)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Dialogs) != len(that1.Dialogs) {
		return false
	}
	for i := range this.Dialogs {
		if !this.Dialogs[i].Equal(that1.Dialogs[i]) {
			return false
		}
	}
	return true
}
func (this *UpdateReactionsUpdate) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpdateReactionsUpdate)
	if !ok {
		that2, ok := that.(UpdateReactionsUpdate)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Peer.Equal(that1.Peer) {
		return false
	}
	if !this.Mid.Equal(that1.Mid) {
		return false
	}
	if len(this.Reactions) != len(that1.Reactions) {
		return false
	}
	for i := range this.Reactions {
		if !this.Reactions[i].Equal(that1.Reactions[i]) {
			return false
		}
	}
	return true
}
func (this *UpdateMessageRejectedByHook) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpdateMessageRejectedByHook)
	if !ok {
		that2, ok := that.(UpdateMessageRejectedByHook)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Peer.Equal(that1.Peer) {
		return false
	}
	if this.Rid != that1.Rid {
		return false
	}
	if this.Date != that1.Date {
		return false
	}
	if this.HookId != that1.HookId {
		return false
	}
	if !this.Reason.Equal(that1.Reason) {
		return false
	}
	return true
}
func (this *UpdateMessageEditRejectedByHook) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpdateMessageEditRejectedByHook)
	if !ok {
		that2, ok := that.(UpdateMessageEditRejectedByHook)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Peer.Equal(that1.Peer) {
		return false
	}
	if !this.Mid.Equal(that1.Mid) {
		return false
	}
	if this.Date != that1.Date {
		return false
	}
	if this.HookId != that1.HookId {
		return false
	}
	if !this.Reason.Equal(that1.Reason) {
		return false
	}
	return true
}
func (this *UpdateThreadCreated) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpdateThreadCreated)
	if !ok {
		that2, ok := that.(UpdateThreadCreated)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Peer.Equal(that1.Peer) {
		return false
	}
	if !this.StartMessage.Equal(that1.StartMessage) {
		return false
	}
	return true
}
func (this *UpdateThreadLifted) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpdateThreadLifted)
	if !ok {
		that2, ok := that.(UpdateThreadLifted)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Peer.Equal(that1.Peer) {
		return false
	}
	return true
}
func (this *ReferencedMessages) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReferencedMessages)
	if !ok {
		that2, ok := that.(ReferencedMessages)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Mids) != len(that1.Mids) {
		return false
	}
	for i := range this.Mids {
		if !this.Mids[i].Equal(that1.Mids[i]) {
			return false
		}
	}
	return true
}
func (this *HistoryMessage) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*HistoryMessage)
	if !ok {
		that2, ok := that.(HistoryMessage)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.SenderUid != that1.SenderUid {
		return false
	}
	if !this.SenderPeer.Equal(that1.SenderPeer) {
		return false
	}
	if !this.HostPeer.Equal(that1.HostPeer) {
		return false
	}
	if !this.Mid.Equal(that1.Mid) {
		return false
	}
	if !this.PrevMid.Equal(that1.PrevMid) {
		return false
	}
	if this.Date != that1.Date {
		return false
	}
	if !this.Message.Equal(that1.Message) {
		return false
	}
	if this.State != that1.State {
		return false
	}
	if len(this.Reactions) != len(that1.Reactions) {
		return false
	}
	for i := range this.Reactions {
		if !this.Reactions[i].Equal(that1.Reactions[i]) {
			return false
		}
	}
	if !this.Attribute.Equal(that1.Attribute) {
		return false
	}
	if that1.Attach == nil {
		if this.Attach != nil {
			return false
		}
	} else if this.Attach == nil {
		return false
	} else if !this.Attach.Equal(that1.Attach) {
		return false
	}
	if !this.EditedAt.Equal(that1.EditedAt) {
		return false
	}
	if this.RandomId != that1.RandomId {
		return false
	}
	return true
}
func (this *HistoryMessage_Forward) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*HistoryMessage_Forward)
	if !ok {
		that2, ok := that.(HistoryMessage_Forward)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Forward.Equal(that1.Forward) {
		return false
	}
	return true
}
func (this *HistoryMessage_Reply) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*HistoryMessage_Reply)
	if !ok {
		that2, ok := that.(HistoryMessage_Reply)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Reply.Equal(that1.Reply) {
		return false
	}
	return true
}
func (this *RequestLoadHistory) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RequestLoadHistory)
	if !ok {
		that2, ok := that.(RequestLoadHistory)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Peer.Equal(that1.Peer) {
		return false
	}
	if this.Date != that1.Date {
		return false
	}
	if this.LoadMode != that1.LoadMode {
		return false
	}
	if this.Limit != that1.Limit {
		return false
	}
	if len(this.Optimizations) != len(that1.Optimizations) {
		return false
	}
	for i := range this.Optimizations {
		if this.Optimizations[i] != that1.Optimizations[i] {
			return false
		}
	}
	return true
}
func (this *ResponseLoadHistory) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ResponseLoadHistory)
	if !ok {
		that2, ok := that.(ResponseLoadHistory)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.History) != len(that1.History) {
		return false
	}
	for i := range this.History {
		if !this.History[i].Equal(that1.History[i]) {
			return false
		}
	}
	if len(this.UserPeers) != len(that1.UserPeers) {
		return false
	}
	for i := range this.UserPeers {
		if !this.UserPeers[i].Equal(that1.UserPeers[i]) {
			return false
		}
	}
	if len(this.GroupPeers) != len(that1.GroupPeers) {
		return false
	}
	for i := range this.GroupPeers {
		if !this.GroupPeers[i].Equal(that1.GroupPeers[i]) {
			return false
		}
	}
	if !this.Counter.Equal(that1.Counter) {
		return false
	}
	if this.CounterDate != that1.CounterDate {
		return false
	}
	if !this.LastConversationMessageDate.Equal(that1.LastConversationMessageDate) {
		return false
	}
	if this.CountForeignAfterLastReturned != that1.CountForeignAfterLastReturned {
		return false
	}
	return true
}
func (this *RequestHistoryDifference) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RequestHistoryDifference)
	if !ok {
		that2, ok := that.(RequestHistoryDifference)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Clock != that1.Clock {
		return false
	}
	return true
}
func (this *ResponseHistoryDifference) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ResponseHistoryDifference)
	if !ok {
		that2, ok := that.(ResponseHistoryDifference)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.History) != len(that1.History) {
		return false
	}
	for i := range this.History {
		if !this.History[i].Equal(that1.History[i]) {
			return false
		}
	}
	if this.FromClock != that1.FromClock {
		return false
	}
	if this.Clock != that1.Clock {
		return false
	}
	return true
}
func (this *Dialog) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Dialog)
	if !ok {
		that2, ok := that.(Dialog)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Peer.Equal(that1.Peer) {
		return false
	}
	if this.UnreadCount != that1.UnreadCount {
		return false
	}
	if this.SortDate != that1.SortDate {
		return false
	}
	if this.SenderUid != that1.SenderUid {
		return false
	}
	if !this.IsFavourite.Equal(that1.IsFavourite) {
		return false
	}
	if !this.Mid.Equal(that1.Mid) {
		return false
	}
	if this.Date != that1.Date {
		return false
	}
	if !this.Message.Equal(that1.Message) {
		return false
	}
	if this.State != that1.State {
		return false
	}
	if this.FirstUnreadDate != that1.FirstUnreadDate {
		return false
	}
	if !this.Attributes.Equal(that1.Attributes) {
		return false
	}
	if !this.PinnedMessages.Equal(that1.PinnedMessages) {
		return false
	}
	if !this.HistoryMessage.Equal(that1.HistoryMessage) {
		return false
	}
	if this.LastReceive != that1.LastReceive {
		return false
	}
	if this.LastRead != that1.LastRead {
		return false
	}
	if this.LastReactionAt != that1.LastReactionAt {
		return false
	}
	return true
}
func (this *RequestLoadDialogs) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RequestLoadDialogs)
	if !ok {
		that2, ok := that.(RequestLoadDialogs)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.MinDate != that1.MinDate {
		return false
	}
	if this.Limit != that1.Limit {
		return false
	}
	if len(this.Optimizations) != len(that1.Optimizations) {
		return false
	}
	for i := range this.Optimizations {
		if this.Optimizations[i] != that1.Optimizations[i] {
			return false
		}
	}
	if len(this.Filters) != len(that1.Filters) {
		return false
	}
	for i := range this.Filters {
		if this.Filters[i] != that1.Filters[i] {
			return false
		}
	}
	if len(this.PeersToLoad) != len(that1.PeersToLoad) {
		return false
	}
	for i := range this.PeersToLoad {
		if !this.PeersToLoad[i].Equal(that1.PeersToLoad[i]) {
			return false
		}
	}
	return true
}
func (this *ResponseLoadDialogs) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ResponseLoadDialogs)
	if !ok {
		that2, ok := that.(ResponseLoadDialogs)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Dialogs) != len(that1.Dialogs) {
		return false
	}
	for i := range this.Dialogs {
		if !this.Dialogs[i].Equal(that1.Dialogs[i]) {
			return false
		}
	}
	if len(this.UserPeers) != len(that1.UserPeers) {
		return false
	}
	for i := range this.UserPeers {
		if !this.UserPeers[i].Equal(that1.UserPeers[i]) {
			return false
		}
	}
	if len(this.GroupPeers) != len(that1.GroupPeers) {
		return false
	}
	for i := range this.GroupPeers {
		if !this.GroupPeers[i].Equal(that1.GroupPeers[i]) {
			return false
		}
	}
	return true
}
func (this *DialogData) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DialogData)
	if !ok {
		that2, ok := that.(DialogData)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.IsFavourite != that1.IsFavourite {
		return false
	}
	if this.CreatedAt != that1.CreatedAt {
		return false
	}
	if this.Clock != that1.Clock {
		return false
	}
	return true
}
func (this *DialogIndex) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DialogIndex)
	if !ok {
		that2, ok := that.(DialogIndex)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Peer.Equal(that1.Peer) {
		return false
	}
	if this.LastMessageDate != that1.LastMessageDate {
		return false
	}
	if !this.Data.Equal(that1.Data) {
		return false
	}
	return true
}
func (this *DialogListEntry) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DialogListEntry)
	if !ok {
		that2, ok := that.(DialogListEntry)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Peer.Equal(that1.Peer) {
		return false
	}
	if this.UnreadCount != that1.UnreadCount {
		return false
	}
	if this.MyReadDate != that1.MyReadDate {
		return false
	}
	if this.LastMessageDate != that1.LastMessageDate {
		return false
	}
	if this.ReceiveDate != that1.ReceiveDate {
		return false
	}
	if this.ReadDate != that1.ReadDate {
		return false
	}
	if this.EntryClock != that1.EntryClock {
		return false
	}
	if this.LastUpdateOfMessageDate != that1.LastUpdateOfMessageDate {
		return false
	}
	if this.LastReactionDate != that1.LastReactionDate {
		return false
	}
	if !this.Data.Equal(that1.Data) {
		return false
	}
	return true
}
func (this *RequestFetchDialogIndex) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RequestFetchDialogIndex)
	if !ok {
		that2, ok := that.(RequestFetchDialogIndex)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *ResponseFetchDialogIndex) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ResponseFetchDialogIndex)
	if !ok {
		that2, ok := that.(ResponseFetchDialogIndex)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.DialogIndices) != len(that1.DialogIndices) {
		return false
	}
	for i := range this.DialogIndices {
		if !this.DialogIndices[i].Equal(that1.DialogIndices[i]) {
			return false
		}
	}
	return true
}
func (this *RequestDialogListDifference) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RequestDialogListDifference)
	if !ok {
		that2, ok := that.(RequestDialogListDifference)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.FromClock != that1.FromClock {
		return false
	}
	return true
}
func (this *ResponseDialogListDifference) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ResponseDialogListDifference)
	if !ok {
		that2, ok := that.(ResponseDialogListDifference)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Entries) != len(that1.Entries) {
		return false
	}
	for i := range this.Entries {
		if !this.Entries[i].Equal(that1.Entries[i]) {
			return false
		}
	}
	if this.Clock != that1.Clock {
		return false
	}
	if this.PrevClock != that1.PrevClock {
		return false
	}
	return true
}
func (this *RequestGetLastConversationMessages) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RequestGetLastConversationMessages)
	if !ok {
		that2, ok := that.(RequestGetLastConversationMessages)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Peers) != len(that1.Peers) {
		return false
	}
	for i := range this.Peers {
		if !this.Peers[i].Equal(that1.Peers[i]) {
			return false
		}
	}
	return true
}
func (this *ResponseGetLastConversationMessages) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ResponseGetLastConversationMessages)
	if !ok {
		that2, ok := that.(ResponseGetLastConversationMessages)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Messages) != len(that1.Messages) {
		return false
	}
	for i := range this.Messages {
		if !this.Messages[i].Equal(that1.Messages[i]) {
			return false
		}
	}
	return true
}
func (this *ResponseGetLastConversationMessages_Pair) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ResponseGetLastConversationMessages_Pair)
	if !ok {
		that2, ok := that.(ResponseGetLastConversationMessages_Pair)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Peer.Equal(that1.Peer) {
		return false
	}
	if !this.Message.Equal(that1.Message) {
		return false
	}
	return true
}
func (this *RequestLoadArchived) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RequestLoadArchived)
	if !ok {
		that2, ok := that.(RequestLoadArchived)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.NextOffset.Equal(that1.NextOffset) {
		return false
	}
	if this.Limit != that1.Limit {
		return false
	}
	if len(this.Optimizations) != len(that1.Optimizations) {
		return false
	}
	for i := range this.Optimizations {
		if this.Optimizations[i] != that1.Optimizations[i] {
			return false
		}
	}
	return true
}
func (this *ResponseLoadArchived) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ResponseLoadArchived)
	if !ok {
		that2, ok := that.(ResponseLoadArchived)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Dialogs) != len(that1.Dialogs) {
		return false
	}
	for i := range this.Dialogs {
		if !this.Dialogs[i].Equal(that1.Dialogs[i]) {
			return false
		}
	}
	if len(this.UserPeers) != len(that1.UserPeers) {
		return false
	}
	for i := range this.UserPeers {
		if !this.UserPeers[i].Equal(that1.UserPeers[i]) {
			return false
		}
	}
	if len(this.GroupPeers) != len(that1.GroupPeers) {
		return false
	}
	for i := range this.GroupPeers {
		if !this.GroupPeers[i].Equal(that1.GroupPeers[i]) {
			return false
		}
	}
	if !this.NextOffset.Equal(that1.NextOffset) {
		return false
	}
	return true
}
func (this *RequestLoadGroupedDialogs) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RequestLoadGroupedDialogs)
	if !ok {
		that2, ok := that.(RequestLoadGroupedDialogs)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Optimizations) != len(that1.Optimizations) {
		return false
	}
	for i := range this.Optimizations {
		if this.Optimizations[i] != that1.Optimizations[i] {
			return false
		}
	}
	return true
}
func (this *ResponseLoadGroupedDialogs) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ResponseLoadGroupedDialogs)
	if !ok {
		that2, ok := that.(ResponseLoadGroupedDialogs)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Dialogs) != len(that1.Dialogs) {
		return false
	}
	for i := range this.Dialogs {
		if !this.Dialogs[i].Equal(that1.Dialogs[i]) {
			return false
		}
	}
	if !this.ShowArchived.Equal(that1.ShowArchived) {
		return false
	}
	if !this.ShowInvite.Equal(that1.ShowInvite) {
		return false
	}
	if len(this.UserPeers) != len(that1.UserPeers) {
		return false
	}
	for i := range this.UserPeers {
		if !this.UserPeers[i].Equal(that1.UserPeers[i]) {
			return false
		}
	}
	if len(this.GroupPeers) != len(that1.GroupPeers) {
		return false
	}
	for i := range this.GroupPeers {
		if !this.GroupPeers[i].Equal(that1.GroupPeers[i]) {
			return false
		}
	}
	return true
}
func (this *ResponseDialogsOrder) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ResponseDialogsOrder)
	if !ok {
		that2, ok := that.(ResponseDialogsOrder)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Seq != that1.Seq {
		return false
	}
	if !bytes.Equal(this.State, that1.State) {
		return false
	}
	if len(this.Groups) != len(that1.Groups) {
		return false
	}
	for i := range this.Groups {
		if !this.Groups[i].Equal(that1.Groups[i]) {
			return false
		}
	}
	return true
}
func (this *RequestHideDialog) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RequestHideDialog)
	if !ok {
		that2, ok := that.(RequestHideDialog)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Peer.Equal(that1.Peer) {
		return false
	}
	return true
}
func (this *RequestShowDialog) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RequestShowDialog)
	if !ok {
		that2, ok := that.(RequestShowDialog)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Peer.Equal(that1.Peer) {
		return false
	}
	return true
}
func (this *RequestFavouriteDialog) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RequestFavouriteDialog)
	if !ok {
		that2, ok := that.(RequestFavouriteDialog)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Peer.Equal(that1.Peer) {
		return false
	}
	return true
}
func (this *RequestUnfavouriteDialog) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RequestUnfavouriteDialog)
	if !ok {
		that2, ok := that.(RequestUnfavouriteDialog)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Peer.Equal(that1.Peer) {
		return false
	}
	return true
}
func (this *UpdateDialogFavouriteChanged) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpdateDialogFavouriteChanged)
	if !ok {
		that2, ok := that.(UpdateDialogFavouriteChanged)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Peer.Equal(that1.Peer) {
		return false
	}
	if !this.IsFavourite.Equal(that1.IsFavourite) {
		return false
	}
	return true
}
func (this *RequestNotifyDialogOpened) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RequestNotifyDialogOpened)
	if !ok {
		that2, ok := that.(RequestNotifyDialogOpened)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Peer.Equal(that1.Peer) {
		return false
	}
	return true
}
func (this *PinnedMessages) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PinnedMessages)
	if !ok {
		that2, ok := that.(PinnedMessages)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Mids) != len(that1.Mids) {
		return false
	}
	for i := range this.Mids {
		if !this.Mids[i].Equal(that1.Mids[i]) {
			return false
		}
	}
	return true
}
func (this *RequestPinMessage) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RequestPinMessage)
	if !ok {
		that2, ok := that.(RequestPinMessage)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Peer.Equal(that1.Peer) {
		return false
	}
	if !this.Mid.Equal(that1.Mid) {
		return false
	}
	if this.LastPinDate != that1.LastPinDate {
		return false
	}
	return true
}
func (this *RequestUnpinMessage) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RequestUnpinMessage)
	if !ok {
		that2, ok := that.(RequestUnpinMessage)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Peer.Equal(that1.Peer) {
		return false
	}
	if !this.Mid.Equal(that1.Mid) {
		return false
	}
	if this.LastPinDate != that1.LastPinDate {
		return false
	}
	return true
}
func (this *UpdatePinnedMessagesChanged) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpdatePinnedMessagesChanged)
	if !ok {
		that2, ok := that.(UpdatePinnedMessagesChanged)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Peer.Equal(that1.Peer) {
		return false
	}
	if !this.PinnedMessages.Equal(that1.PinnedMessages) {
		return false
	}
	if this.ActionDate != that1.ActionDate {
		return false
	}
	return true
}
func (this *RequestGetUpdatedMessages) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RequestGetUpdatedMessages)
	if !ok {
		that2, ok := that.(RequestGetUpdatedMessages)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Peer.Equal(that1.Peer) {
		return false
	}
	if this.FromClock != that1.FromClock {
		return false
	}
	return true
}
func (this *ResponseGetUpdatedMessages) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ResponseGetUpdatedMessages)
	if !ok {
		that2, ok := that.(ResponseGetUpdatedMessages)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Messages) != len(that1.Messages) {
		return false
	}
	for i := range this.Messages {
		if !this.Messages[i].Equal(that1.Messages[i]) {
			return false
		}
	}
	if this.PeerClock != that1.PeerClock {
		return false
	}
	if this.NextAvailable != that1.NextAvailable {
		return false
	}
	return true
}
func (this *ResponseGetUpdatedMessages_UpdatedMessage) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ResponseGetUpdatedMessages_UpdatedMessage)
	if !ok {
		that2, ok := that.(ResponseGetUpdatedMessages_UpdatedMessage)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Mid.Equal(that1.Mid) {
		return false
	}
	if !this.Message.Equal(that1.Message) {
		return false
	}
	if this.ModifiedAt != that1.ModifiedAt {
		return false
	}
	return true
}
func (this *MessageStatus) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MessageStatus)
	if !ok {
		that2, ok := that.(MessageStatus)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Clock != that1.Clock {
		return false
	}
	if this.UserId != that1.UserId {
		return false
	}
	return true
}
func (this *RequestMessageReads) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RequestMessageReads)
	if !ok {
		that2, ok := that.(RequestMessageReads)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Mid.Equal(that1.Mid) {
		return false
	}
	if this.Limit != that1.Limit {
		return false
	}
	if this.TimestampFrom != that1.TimestampFrom {
		return false
	}
	return true
}
func (this *RequestMessageReceives) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RequestMessageReceives)
	if !ok {
		that2, ok := that.(RequestMessageReceives)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Mid.Equal(that1.Mid) {
		return false
	}
	if this.Limit != that1.Limit {
		return false
	}
	if this.TimestampFrom != that1.TimestampFrom {
		return false
	}
	return true
}
func (this *ResponseMessageReads) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ResponseMessageReads)
	if !ok {
		that2, ok := that.(ResponseMessageReads)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Status) != len(that1.Status) {
		return false
	}
	for i := range this.Status {
		if !this.Status[i].Equal(that1.Status[i]) {
			return false
		}
	}
	if this.TimestampTill != that1.TimestampTill {
		return false
	}
	return true
}
func (this *ResponseMessageReceives) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ResponseMessageReceives)
	if !ok {
		that2, ok := that.(ResponseMessageReceives)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Status) != len(that1.Status) {
		return false
	}
	for i := range this.Status {
		if !this.Status[i].Equal(that1.Status[i]) {
			return false
		}
	}
	if this.TimestampTill != that1.TimestampTill {
		return false
	}
	return true
}
func (this *MessageAttributes) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&dialog.MessageAttributes{")
	if this.IsMentioned != nil {
		s = append(s, "IsMentioned: "+fmt.Sprintf("%#v", this.IsMentioned)+",\n")
	}
	if this.IsHighlighted != nil {
		s = append(s, "IsHighlighted: "+fmt.Sprintf("%#v", this.IsHighlighted)+",\n")
	}
	if this.IsNotified != nil {
		s = append(s, "IsNotified: "+fmt.Sprintf("%#v", this.IsNotified)+",\n")
	}
	if this.IsOnlyForYou != nil {
		s = append(s, "IsOnlyForYou: "+fmt.Sprintf("%#v", this.IsOnlyForYou)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *QuotedMessage) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&dialog.QuotedMessage{")
	s = append(s, "MessageId: "+fmt.Sprintf("%#v", this.MessageId)+",\n")
	s = append(s, "PublicGroupId: "+fmt.Sprintf("%#v", this.PublicGroupId)+",\n")
	s = append(s, "SenderUserId: "+fmt.Sprintf("%#v", this.SenderUserId)+",\n")
	s = append(s, "MessageDate: "+fmt.Sprintf("%#v", this.MessageDate)+",\n")
	if this.QuotedMessageContent != nil {
		s = append(s, "QuotedMessageContent: "+fmt.Sprintf("%#v", this.QuotedMessageContent)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *MessageMedia) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&dialog.MessageMedia{")
	if this.Webpage != nil {
		s = append(s, "Webpage: "+fmt.Sprintf("%#v", this.Webpage)+",\n")
	}
	if this.Image != nil {
		s = append(s, "Image: "+fmt.Sprintf("%#v", this.Image)+",\n")
	}
	if this.Audio != nil {
		s = append(s, "Audio: "+fmt.Sprintf("%#v", this.Audio)+",\n")
	}
	if this.Actions != nil {
		s = append(s, "Actions: "+fmt.Sprintf("%#v", this.Actions)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *WebpageMedia) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&dialog.WebpageMedia{")
	if this.Url != nil {
		s = append(s, "Url: "+fmt.Sprintf("%#v", this.Url)+",\n")
	}
	if this.Title != nil {
		s = append(s, "Title: "+fmt.Sprintf("%#v", this.Title)+",\n")
	}
	if this.Description != nil {
		s = append(s, "Description: "+fmt.Sprintf("%#v", this.Description)+",\n")
	}
	if this.Image != nil {
		s = append(s, "Image: "+fmt.Sprintf("%#v", this.Image)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ImageMedia) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&dialog.ImageMedia{")
	if this.Image != nil {
		s = append(s, "Image: "+fmt.Sprintf("%#v", this.Image)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *AudioMedia) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&dialog.AudioMedia{")
	if this.Audio != nil {
		s = append(s, "Audio: "+fmt.Sprintf("%#v", this.Audio)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *InteractiveMediaWidget) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&dialog.InteractiveMediaWidget{")
	if this.Body != nil {
		s = append(s, "Body: "+fmt.Sprintf("%#v", this.Body)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *InteractiveMediaWidget_InteractiveMediaButton) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dialog.InteractiveMediaWidget_InteractiveMediaButton{` +
		`InteractiveMediaButton:` + fmt.Sprintf("%#v", this.InteractiveMediaButton) + `}`}, ", ")
	return s
}
func (this *InteractiveMediaWidget_InteractiveMediaSelect) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dialog.InteractiveMediaWidget_InteractiveMediaSelect{` +
		`InteractiveMediaSelect:` + fmt.Sprintf("%#v", this.InteractiveMediaSelect) + `}`}, ", ")
	return s
}
func (this *InteractiveMediaButton) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&dialog.InteractiveMediaButton{")
	s = append(s, "Value: "+fmt.Sprintf("%#v", this.Value)+",\n")
	if this.Label != nil {
		s = append(s, "Label: "+fmt.Sprintf("%#v", this.Label)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *InteractiveMediaSelect) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&dialog.InteractiveMediaSelect{")
	if this.Options != nil {
		s = append(s, "Options: "+fmt.Sprintf("%#v", this.Options)+",\n")
	}
	if this.Label != nil {
		s = append(s, "Label: "+fmt.Sprintf("%#v", this.Label)+",\n")
	}
	if this.DefaultValue != nil {
		s = append(s, "DefaultValue: "+fmt.Sprintf("%#v", this.DefaultValue)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *InteractiveMediaSelectOption) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&dialog.InteractiveMediaSelectOption{")
	s = append(s, "Value: "+fmt.Sprintf("%#v", this.Value)+",\n")
	s = append(s, "Label: "+fmt.Sprintf("%#v", this.Label)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *InteractiveMedia) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&dialog.InteractiveMedia{")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	if this.Widget != nil {
		s = append(s, "Widget: "+fmt.Sprintf("%#v", this.Widget)+",\n")
	}
	s = append(s, "Style: "+fmt.Sprintf("%#v", this.Style)+",\n")
	if this.Confirm != nil {
		s = append(s, "Confirm: "+fmt.Sprintf("%#v", this.Confirm)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *InteractiveMediaTranslation) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&dialog.InteractiveMediaTranslation{")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	s = append(s, "Value: "+fmt.Sprintf("%#v", this.Value)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *InteractiveMediaTranslationGroup) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&dialog.InteractiveMediaTranslationGroup{")
	s = append(s, "Language: "+fmt.Sprintf("%#v", this.Language)+",\n")
	if this.Messages != nil {
		s = append(s, "Messages: "+fmt.Sprintf("%#v", this.Messages)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *InteractiveMediaGroup) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&dialog.InteractiveMediaGroup{")
	if this.Actions != nil {
		s = append(s, "Actions: "+fmt.Sprintf("%#v", this.Actions)+",\n")
	}
	if this.Title != nil {
		s = append(s, "Title: "+fmt.Sprintf("%#v", this.Title)+",\n")
	}
	if this.Description != nil {
		s = append(s, "Description: "+fmt.Sprintf("%#v", this.Description)+",\n")
	}
	if this.Translations != nil {
		s = append(s, "Translations: "+fmt.Sprintf("%#v", this.Translations)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *InteractiveMediaConfirm) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&dialog.InteractiveMediaConfirm{")
	if this.Text != nil {
		s = append(s, "Text: "+fmt.Sprintf("%#v", this.Text)+",\n")
	}
	if this.Title != nil {
		s = append(s, "Title: "+fmt.Sprintf("%#v", this.Title)+",\n")
	}
	if this.Ok != nil {
		s = append(s, "Ok: "+fmt.Sprintf("%#v", this.Ok)+",\n")
	}
	if this.Dismiss != nil {
		s = append(s, "Dismiss: "+fmt.Sprintf("%#v", this.Dismiss)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UpdateInteractiveMediaEvent) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&dialog.UpdateInteractiveMediaEvent{")
	if this.Mid != nil {
		s = append(s, "Mid: "+fmt.Sprintf("%#v", this.Mid)+",\n")
	}
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	s = append(s, "Value: "+fmt.Sprintf("%#v", this.Value)+",\n")
	s = append(s, "Uid: "+fmt.Sprintf("%#v", this.Uid)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RequestDoInteractiveMediaAction) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&dialog.RequestDoInteractiveMediaAction{")
	if this.Mid != nil {
		s = append(s, "Mid: "+fmt.Sprintf("%#v", this.Mid)+",\n")
	}
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	s = append(s, "Value: "+fmt.Sprintf("%#v", this.Value)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *MessageContent) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 13)
	s = append(s, "&dialog.MessageContent{")
	if this.Body != nil {
		s = append(s, "Body: "+fmt.Sprintf("%#v", this.Body)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *MessageContent_TextMessage) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dialog.MessageContent_TextMessage{` +
		`TextMessage:` + fmt.Sprintf("%#v", this.TextMessage) + `}`}, ", ")
	return s
}
func (this *MessageContent_ServiceMessage) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dialog.MessageContent_ServiceMessage{` +
		`ServiceMessage:` + fmt.Sprintf("%#v", this.ServiceMessage) + `}`}, ", ")
	return s
}
func (this *MessageContent_DocumentMessage) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dialog.MessageContent_DocumentMessage{` +
		`DocumentMessage:` + fmt.Sprintf("%#v", this.DocumentMessage) + `}`}, ", ")
	return s
}
func (this *MessageContent_JsonMessage) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dialog.MessageContent_JsonMessage{` +
		`JsonMessage:` + fmt.Sprintf("%#v", this.JsonMessage) + `}`}, ", ")
	return s
}
func (this *MessageContent_UnsupportedMessage) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dialog.MessageContent_UnsupportedMessage{` +
		`UnsupportedMessage:` + fmt.Sprintf("%#v", this.UnsupportedMessage) + `}`}, ", ")
	return s
}
func (this *MessageContent_StickerMessage) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dialog.MessageContent_StickerMessage{` +
		`StickerMessage:` + fmt.Sprintf("%#v", this.StickerMessage) + `}`}, ", ")
	return s
}
func (this *MessageContent_BinaryMessage) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dialog.MessageContent_BinaryMessage{` +
		`BinaryMessage:` + fmt.Sprintf("%#v", this.BinaryMessage) + `}`}, ", ")
	return s
}
func (this *MessageContent_EmptyMessage) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dialog.MessageContent_EmptyMessage{` +
		`EmptyMessage:` + fmt.Sprintf("%#v", this.EmptyMessage) + `}`}, ", ")
	return s
}
func (this *MessageContent_DeletedMessage) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dialog.MessageContent_DeletedMessage{` +
		`DeletedMessage:` + fmt.Sprintf("%#v", this.DeletedMessage) + `}`}, ", ")
	return s
}
func (this *TextMessage) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&dialog.TextMessage{")
	s = append(s, "Text: "+fmt.Sprintf("%#v", this.Text)+",\n")
	if this.Ext != nil {
		s = append(s, "Ext: "+fmt.Sprintf("%#v", this.Ext)+",\n")
	}
	if this.Media != nil {
		s = append(s, "Media: "+fmt.Sprintf("%#v", this.Media)+",\n")
	}
	if this.Extensions != nil {
		s = append(s, "Extensions: "+fmt.Sprintf("%#v", this.Extensions)+",\n")
	}
	if this.Mentions != nil {
		s = append(s, "Mentions: "+fmt.Sprintf("%#v", this.Mentions)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Mention) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&dialog.Mention{")
	if this.Peer != nil {
		s = append(s, "Peer: "+fmt.Sprintf("%#v", this.Peer)+",\n")
	}
	s = append(s, "All: "+fmt.Sprintf("%#v", this.All)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TextMessageEx) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&dialog.TextMessageEx{")
	if this.Body != nil {
		s = append(s, "Body: "+fmt.Sprintf("%#v", this.Body)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TextMessageEx_TextExMarkdown) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dialog.TextMessageEx_TextExMarkdown{` +
		`TextExMarkdown:` + fmt.Sprintf("%#v", this.TextExMarkdown) + `}`}, ", ")
	return s
}
func (this *TextMessageEx_TextModernMessage) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dialog.TextMessageEx_TextModernMessage{` +
		`TextModernMessage:` + fmt.Sprintf("%#v", this.TextModernMessage) + `}`}, ", ")
	return s
}
func (this *TextMessageEx_TextCommand) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dialog.TextMessageEx_TextCommand{` +
		`TextCommand:` + fmt.Sprintf("%#v", this.TextCommand) + `}`}, ", ")
	return s
}
func (this *TextExMarkdown) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&dialog.TextExMarkdown{")
	s = append(s, "Markdown: "+fmt.Sprintf("%#v", this.Markdown)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TextModernMessage) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&dialog.TextModernMessage{")
	if this.Text != nil {
		s = append(s, "Text: "+fmt.Sprintf("%#v", this.Text)+",\n")
	}
	if this.SenderNameOverride != nil {
		s = append(s, "SenderNameOverride: "+fmt.Sprintf("%#v", this.SenderNameOverride)+",\n")
	}
	if this.SenderPhotoOverride != nil {
		s = append(s, "SenderPhotoOverride: "+fmt.Sprintf("%#v", this.SenderPhotoOverride)+",\n")
	}
	if this.Style != nil {
		s = append(s, "Style: "+fmt.Sprintf("%#v", this.Style)+",\n")
	}
	if this.Attaches != nil {
		s = append(s, "Attaches: "+fmt.Sprintf("%#v", this.Attaches)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ParagraphStyle) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&dialog.ParagraphStyle{")
	if this.ShowParagraph != nil {
		s = append(s, "ShowParagraph: "+fmt.Sprintf("%#v", this.ShowParagraph)+",\n")
	}
	if this.ParagraphColor != nil {
		s = append(s, "ParagraphColor: "+fmt.Sprintf("%#v", this.ParagraphColor)+",\n")
	}
	if this.BgColor != nil {
		s = append(s, "BgColor: "+fmt.Sprintf("%#v", this.BgColor)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TextModernAttach) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 10)
	s = append(s, "&dialog.TextModernAttach{")
	if this.Title != nil {
		s = append(s, "Title: "+fmt.Sprintf("%#v", this.Title)+",\n")
	}
	if this.TitleUrl != nil {
		s = append(s, "TitleUrl: "+fmt.Sprintf("%#v", this.TitleUrl)+",\n")
	}
	if this.TitleIcon != nil {
		s = append(s, "TitleIcon: "+fmt.Sprintf("%#v", this.TitleIcon)+",\n")
	}
	if this.Text != nil {
		s = append(s, "Text: "+fmt.Sprintf("%#v", this.Text)+",\n")
	}
	if this.Style != nil {
		s = append(s, "Style: "+fmt.Sprintf("%#v", this.Style)+",\n")
	}
	if this.Fields != nil {
		s = append(s, "Fields: "+fmt.Sprintf("%#v", this.Fields)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TextModernField) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&dialog.TextModernField{")
	s = append(s, "Title: "+fmt.Sprintf("%#v", this.Title)+",\n")
	s = append(s, "Value: "+fmt.Sprintf("%#v", this.Value)+",\n")
	if this.IsShort != nil {
		s = append(s, "IsShort: "+fmt.Sprintf("%#v", this.IsShort)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TextCommand) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&dialog.TextCommand{")
	s = append(s, "Command: "+fmt.Sprintf("%#v", this.Command)+",\n")
	s = append(s, "Args: "+fmt.Sprintf("%#v", this.Args)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ServiceMessage) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&dialog.ServiceMessage{")
	s = append(s, "Text: "+fmt.Sprintf("%#v", this.Text)+",\n")
	if this.Ext != nil {
		s = append(s, "Ext: "+fmt.Sprintf("%#v", this.Ext)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ServiceEx) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 20)
	s = append(s, "&dialog.ServiceEx{")
	if this.Body != nil {
		s = append(s, "Body: "+fmt.Sprintf("%#v", this.Body)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ServiceEx_UserInvited) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dialog.ServiceEx_UserInvited{` +
		`UserInvited:` + fmt.Sprintf("%#v", this.UserInvited) + `}`}, ", ")
	return s
}
func (this *ServiceEx_UserJoined) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dialog.ServiceEx_UserJoined{` +
		`UserJoined:` + fmt.Sprintf("%#v", this.UserJoined) + `}`}, ", ")
	return s
}
func (this *ServiceEx_UserKicked) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dialog.ServiceEx_UserKicked{` +
		`UserKicked:` + fmt.Sprintf("%#v", this.UserKicked) + `}`}, ", ")
	return s
}
func (this *ServiceEx_UserLeft) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dialog.ServiceEx_UserLeft{` +
		`UserLeft:` + fmt.Sprintf("%#v", this.UserLeft) + `}`}, ", ")
	return s
}
func (this *ServiceEx_GroupCreated) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dialog.ServiceEx_GroupCreated{` +
		`GroupCreated:` + fmt.Sprintf("%#v", this.GroupCreated) + `}`}, ", ")
	return s
}
func (this *ServiceEx_ChangedShortname) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dialog.ServiceEx_ChangedShortname{` +
		`ChangedShortname:` + fmt.Sprintf("%#v", this.ChangedShortname) + `}`}, ", ")
	return s
}
func (this *ServiceEx_ChangedTitle) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dialog.ServiceEx_ChangedTitle{` +
		`ChangedTitle:` + fmt.Sprintf("%#v", this.ChangedTitle) + `}`}, ", ")
	return s
}
func (this *ServiceEx_ChangedTopic) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dialog.ServiceEx_ChangedTopic{` +
		`ChangedTopic:` + fmt.Sprintf("%#v", this.ChangedTopic) + `}`}, ", ")
	return s
}
func (this *ServiceEx_ChangedAbout) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dialog.ServiceEx_ChangedAbout{` +
		`ChangedAbout:` + fmt.Sprintf("%#v", this.ChangedAbout) + `}`}, ", ")
	return s
}
func (this *ServiceEx_ChangedAvatar) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dialog.ServiceEx_ChangedAvatar{` +
		`ChangedAvatar:` + fmt.Sprintf("%#v", this.ChangedAvatar) + `}`}, ", ")
	return s
}
func (this *ServiceEx_ContactRegistered) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dialog.ServiceEx_ContactRegistered{` +
		`ContactRegistered:` + fmt.Sprintf("%#v", this.ContactRegistered) + `}`}, ", ")
	return s
}
func (this *ServiceEx_PhoneMissed) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dialog.ServiceEx_PhoneMissed{` +
		`PhoneMissed:` + fmt.Sprintf("%#v", this.PhoneMissed) + `}`}, ", ")
	return s
}
func (this *ServiceEx_PhoneCall) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dialog.ServiceEx_PhoneCall{` +
		`PhoneCall:` + fmt.Sprintf("%#v", this.PhoneCall) + `}`}, ", ")
	return s
}
func (this *ServiceEx_PhoneRejected) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dialog.ServiceEx_PhoneRejected{` +
		`PhoneRejected:` + fmt.Sprintf("%#v", this.PhoneRejected) + `}`}, ", ")
	return s
}
func (this *ServiceEx_ChatArchived) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dialog.ServiceEx_ChatArchived{` +
		`ChatArchived:` + fmt.Sprintf("%#v", this.ChatArchived) + `}`}, ", ")
	return s
}
func (this *ServiceEx_ChatRestored) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dialog.ServiceEx_ChatRestored{` +
		`ChatRestored:` + fmt.Sprintf("%#v", this.ChatRestored) + `}`}, ", ")
	return s
}
func (this *ServiceExUserInvited) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&dialog.ServiceExUserInvited{")
	s = append(s, "InvitedUid: "+fmt.Sprintf("%#v", this.InvitedUid)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ServiceExUserJoined) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&dialog.ServiceExUserJoined{")
	s = append(s, "JoinedUserId: "+fmt.Sprintf("%#v", this.JoinedUserId)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ServiceExUserKicked) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&dialog.ServiceExUserKicked{")
	s = append(s, "KickedUid: "+fmt.Sprintf("%#v", this.KickedUid)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ServiceExUserLeft) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&dialog.ServiceExUserLeft{")
	s = append(s, "LeftUserId: "+fmt.Sprintf("%#v", this.LeftUserId)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ServiceExGroupCreated) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&dialog.ServiceExGroupCreated{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ServiceExChangedShortname) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&dialog.ServiceExChangedShortname{")
	s = append(s, "Shortname: "+fmt.Sprintf("%#v", this.Shortname)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ServiceExChangedTitle) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&dialog.ServiceExChangedTitle{")
	s = append(s, "Title: "+fmt.Sprintf("%#v", this.Title)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ServiceExChangedTopic) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&dialog.ServiceExChangedTopic{")
	if this.Topic != nil {
		s = append(s, "Topic: "+fmt.Sprintf("%#v", this.Topic)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ServiceExChangedAbout) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&dialog.ServiceExChangedAbout{")
	if this.About != nil {
		s = append(s, "About: "+fmt.Sprintf("%#v", this.About)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ServiceExChangedAvatar) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&dialog.ServiceExChangedAvatar{")
	if this.Avatar != nil {
		s = append(s, "Avatar: "+fmt.Sprintf("%#v", this.Avatar)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ServiceExContactRegistered) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&dialog.ServiceExContactRegistered{")
	s = append(s, "Uid: "+fmt.Sprintf("%#v", this.Uid)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ServiceExPhoneMissed) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&dialog.ServiceExPhoneMissed{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ServiceExPhoneCall) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&dialog.ServiceExPhoneCall{")
	s = append(s, "Duration: "+fmt.Sprintf("%#v", this.Duration)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ServiceExPhoneRejected) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&dialog.ServiceExPhoneRejected{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ServiceExChatArchived) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&dialog.ServiceExChatArchived{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ServiceExChatRestored) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&dialog.ServiceExChatRestored{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DocumentMessage) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 11)
	s = append(s, "&dialog.DocumentMessage{")
	s = append(s, "FileId: "+fmt.Sprintf("%#v", this.FileId)+",\n")
	s = append(s, "AccessHash: "+fmt.Sprintf("%#v", this.AccessHash)+",\n")
	s = append(s, "FileSize: "+fmt.Sprintf("%#v", this.FileSize)+",\n")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "MimeType: "+fmt.Sprintf("%#v", this.MimeType)+",\n")
	if this.Thumb != nil {
		s = append(s, "Thumb: "+fmt.Sprintf("%#v", this.Thumb)+",\n")
	}
	if this.Ext != nil {
		s = append(s, "Ext: "+fmt.Sprintf("%#v", this.Ext)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DocumentEx) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&dialog.DocumentEx{")
	if this.Body != nil {
		s = append(s, "Body: "+fmt.Sprintf("%#v", this.Body)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DocumentEx_Photo) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dialog.DocumentEx_Photo{` +
		`Photo:` + fmt.Sprintf("%#v", this.Photo) + `}`}, ", ")
	return s
}
func (this *DocumentEx_Video) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dialog.DocumentEx_Video{` +
		`Video:` + fmt.Sprintf("%#v", this.Video) + `}`}, ", ")
	return s
}
func (this *DocumentEx_Voice) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dialog.DocumentEx_Voice{` +
		`Voice:` + fmt.Sprintf("%#v", this.Voice) + `}`}, ", ")
	return s
}
func (this *DocumentExPhoto) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&dialog.DocumentExPhoto{")
	s = append(s, "W: "+fmt.Sprintf("%#v", this.W)+",\n")
	s = append(s, "H: "+fmt.Sprintf("%#v", this.H)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DocumentExVideo) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&dialog.DocumentExVideo{")
	s = append(s, "W: "+fmt.Sprintf("%#v", this.W)+",\n")
	s = append(s, "H: "+fmt.Sprintf("%#v", this.H)+",\n")
	s = append(s, "Duration: "+fmt.Sprintf("%#v", this.Duration)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DocumentExVoice) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&dialog.DocumentExVoice{")
	s = append(s, "Duration: "+fmt.Sprintf("%#v", this.Duration)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *JsonMessage) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&dialog.JsonMessage{")
	s = append(s, "RawJson: "+fmt.Sprintf("%#v", this.RawJson)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UnsupportedMessage) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&dialog.UnsupportedMessage{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *StickerMessage) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 12)
	s = append(s, "&dialog.StickerMessage{")
	if this.StickerId != nil {
		s = append(s, "StickerId: "+fmt.Sprintf("%#v", this.StickerId)+",\n")
	}
	if this.FastPreview != nil {
		s = append(s, "FastPreview: "+fmt.Sprintf("%#v", this.FastPreview)+",\n")
	}
	if this.Image_512 != nil {
		s = append(s, "Image_512: "+fmt.Sprintf("%#v", this.Image_512)+",\n")
	}
	if this.Image_256 != nil {
		s = append(s, "Image_256: "+fmt.Sprintf("%#v", this.Image_256)+",\n")
	}
	if this.StickerCollectionId != nil {
		s = append(s, "StickerCollectionId: "+fmt.Sprintf("%#v", this.StickerCollectionId)+",\n")
	}
	if this.StickerCollectionAccessHash != nil {
		s = append(s, "StickerCollectionAccessHash: "+fmt.Sprintf("%#v", this.StickerCollectionAccessHash)+",\n")
	}
	if this.Emoji != nil {
		s = append(s, "Emoji: "+fmt.Sprintf("%#v", this.Emoji)+",\n")
	}
	if this.AnimatedStickerJson != nil {
		s = append(s, "AnimatedStickerJson: "+fmt.Sprintf("%#v", this.AnimatedStickerJson)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *BinaryMessage) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&dialog.BinaryMessage{")
	s = append(s, "ContentTag: "+fmt.Sprintf("%#v", this.ContentTag)+",\n")
	s = append(s, "Msg: "+fmt.Sprintf("%#v", this.Msg)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *EmptyMessage) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&dialog.EmptyMessage{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DeletedMessage) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&dialog.DeletedMessage{")
	if this.IsLocal != nil {
		s = append(s, "IsLocal: "+fmt.Sprintf("%#v", this.IsLocal)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DialogShort) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&dialog.DialogShort{")
	if this.Peer != nil {
		s = append(s, "Peer: "+fmt.Sprintf("%#v", this.Peer)+",\n")
	}
	s = append(s, "Counter: "+fmt.Sprintf("%#v", this.Counter)+",\n")
	s = append(s, "Date: "+fmt.Sprintf("%#v", this.Date)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DialogGroup) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&dialog.DialogGroup{")
	s = append(s, "Title: "+fmt.Sprintf("%#v", this.Title)+",\n")
	s = append(s, "Key: "+fmt.Sprintf("%#v", this.Key)+",\n")
	if this.Dialogs != nil {
		s = append(s, "Dialogs: "+fmt.Sprintf("%#v", this.Dialogs)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *MessageReaction) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&dialog.MessageReaction{")
	s = append(s, "Users: "+fmt.Sprintf("%#v", this.Users)+",\n")
	s = append(s, "Code: "+fmt.Sprintf("%#v", this.Code)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SearchPredicate) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&dialog.SearchPredicate{")
	s = append(s, "Key: "+fmt.Sprintf("%#v", this.Key)+",\n")
	s = append(s, "Values: "+fmt.Sprintf("%#v", this.Values)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RequestSendMessage) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 13)
	s = append(s, "&dialog.RequestSendMessage{")
	if this.Peer != nil {
		s = append(s, "Peer: "+fmt.Sprintf("%#v", this.Peer)+",\n")
	}
	s = append(s, "DeduplicationId: "+fmt.Sprintf("%#v", this.DeduplicationId)+",\n")
	if this.Message != nil {
		s = append(s, "Message: "+fmt.Sprintf("%#v", this.Message)+",\n")
	}
	s = append(s, "IsOnlyForUser: "+fmt.Sprintf("%#v", this.IsOnlyForUser)+",\n")
	if this.Forward != nil {
		s = append(s, "Forward: "+fmt.Sprintf("%#v", this.Forward)+",\n")
	}
	if this.Reply != nil {
		s = append(s, "Reply: "+fmt.Sprintf("%#v", this.Reply)+",\n")
	}
	if this.Predicates != nil {
		s = append(s, "Predicates: "+fmt.Sprintf("%#v", this.Predicates)+",\n")
	}
	s = append(s, "WhiteList: "+fmt.Sprintf("%#v", this.WhiteList)+",\n")
	s = append(s, "BlackList: "+fmt.Sprintf("%#v", this.BlackList)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RequestUpdateMessage) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&dialog.RequestUpdateMessage{")
	if this.Mid != nil {
		s = append(s, "Mid: "+fmt.Sprintf("%#v", this.Mid)+",\n")
	}
	if this.UpdatedMessage != nil {
		s = append(s, "UpdatedMessage: "+fmt.Sprintf("%#v", this.UpdatedMessage)+",\n")
	}
	s = append(s, "LastEditedAt: "+fmt.Sprintf("%#v", this.LastEditedAt)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RequestMessageReceived) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&dialog.RequestMessageReceived{")
	if this.Peer != nil {
		s = append(s, "Peer: "+fmt.Sprintf("%#v", this.Peer)+",\n")
	}
	s = append(s, "Date: "+fmt.Sprintf("%#v", this.Date)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RequestMessageRead) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&dialog.RequestMessageRead{")
	if this.Peer != nil {
		s = append(s, "Peer: "+fmt.Sprintf("%#v", this.Peer)+",\n")
	}
	s = append(s, "Date: "+fmt.Sprintf("%#v", this.Date)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RequestDeleteMessageObsolete) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&dialog.RequestDeleteMessageObsolete{")
	if this.Mids != nil {
		s = append(s, "Mids: "+fmt.Sprintf("%#v", this.Mids)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RequestDeleteMessage) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&dialog.RequestDeleteMessage{")
	if this.Peer != nil {
		s = append(s, "Peer: "+fmt.Sprintf("%#v", this.Peer)+",\n")
	}
	if this.MessageId != nil {
		s = append(s, "MessageId: "+fmt.Sprintf("%#v", this.MessageId)+",\n")
	}
	s = append(s, "DeleteForUserOnly: "+fmt.Sprintf("%#v", this.DeleteForUserOnly)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RequestClearChat) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&dialog.RequestClearChat{")
	if this.Peer != nil {
		s = append(s, "Peer: "+fmt.Sprintf("%#v", this.Peer)+",\n")
	}
	s = append(s, "LastMessageDate: "+fmt.Sprintf("%#v", this.LastMessageDate)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RequestDeleteChat) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&dialog.RequestDeleteChat{")
	if this.Peer != nil {
		s = append(s, "Peer: "+fmt.Sprintf("%#v", this.Peer)+",\n")
	}
	s = append(s, "LastMessageDate: "+fmt.Sprintf("%#v", this.LastMessageDate)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RequestArchiveChat) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&dialog.RequestArchiveChat{")
	if this.Peer != nil {
		s = append(s, "Peer: "+fmt.Sprintf("%#v", this.Peer)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RequestMessageSetReaction) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&dialog.RequestMessageSetReaction{")
	if this.Peer != nil {
		s = append(s, "Peer: "+fmt.Sprintf("%#v", this.Peer)+",\n")
	}
	if this.Mid != nil {
		s = append(s, "Mid: "+fmt.Sprintf("%#v", this.Mid)+",\n")
	}
	s = append(s, "Code: "+fmt.Sprintf("%#v", this.Code)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RequestMessageRemoveReaction) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&dialog.RequestMessageRemoveReaction{")
	if this.Peer != nil {
		s = append(s, "Peer: "+fmt.Sprintf("%#v", this.Peer)+",\n")
	}
	if this.Mid != nil {
		s = append(s, "Mid: "+fmt.Sprintf("%#v", this.Mid)+",\n")
	}
	s = append(s, "Code: "+fmt.Sprintf("%#v", this.Code)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ResponseReactionsResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&dialog.ResponseReactionsResponse{")
	s = append(s, "Seq: "+fmt.Sprintf("%#v", this.Seq)+",\n")
	s = append(s, "State: "+fmt.Sprintf("%#v", this.State)+",\n")
	if this.Reactions != nil {
		s = append(s, "Reactions: "+fmt.Sprintf("%#v", this.Reactions)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ResponseSendMessage) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&dialog.ResponseSendMessage{")
	if this.MessageId != nil {
		s = append(s, "MessageId: "+fmt.Sprintf("%#v", this.MessageId)+",\n")
	}
	s = append(s, "MessageDate: "+fmt.Sprintf("%#v", this.MessageDate)+",\n")
	if this.PreviousMessageId != nil {
		s = append(s, "PreviousMessageId: "+fmt.Sprintf("%#v", this.PreviousMessageId)+",\n")
	}
	s = append(s, "CreatorUserId: "+fmt.Sprintf("%#v", this.CreatorUserId)+",\n")
	s = append(s, "Clock: "+fmt.Sprintf("%#v", this.Clock)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UpdateMessage) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 19)
	s = append(s, "&dialog.UpdateMessage{")
	if this.Peer != nil {
		s = append(s, "Peer: "+fmt.Sprintf("%#v", this.Peer)+",\n")
	}
	s = append(s, "SenderUid: "+fmt.Sprintf("%#v", this.SenderUid)+",\n")
	s = append(s, "Date: "+fmt.Sprintf("%#v", this.Date)+",\n")
	if this.Mid != nil {
		s = append(s, "Mid: "+fmt.Sprintf("%#v", this.Mid)+",\n")
	}
	if this.Message != nil {
		s = append(s, "Message: "+fmt.Sprintf("%#v", this.Message)+",\n")
	}
	if this.Attributes != nil {
		s = append(s, "Attributes: "+fmt.Sprintf("%#v", this.Attributes)+",\n")
	}
	if this.Attach != nil {
		s = append(s, "Attach: "+fmt.Sprintf("%#v", this.Attach)+",\n")
	}
	if this.PreviousMid != nil {
		s = append(s, "PreviousMid: "+fmt.Sprintf("%#v", this.PreviousMid)+",\n")
	}
	if this.PrevMessageDate != nil {
		s = append(s, "PrevMessageDate: "+fmt.Sprintf("%#v", this.PrevMessageDate)+",\n")
	}
	if this.Counter != nil {
		s = append(s, "Counter: "+fmt.Sprintf("%#v", this.Counter)+",\n")
	}
	if this.MyReadDate != nil {
		s = append(s, "MyReadDate: "+fmt.Sprintf("%#v", this.MyReadDate)+",\n")
	}
	s = append(s, "RandomId: "+fmt.Sprintf("%#v", this.RandomId)+",\n")
	s = append(s, "ModifiedAt: "+fmt.Sprintf("%#v", this.ModifiedAt)+",\n")
	if this.PrevEditInPeerAt != nil {
		s = append(s, "PrevEditInPeerAt: "+fmt.Sprintf("%#v", this.PrevEditInPeerAt)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UpdateMessage_Forward) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dialog.UpdateMessage_Forward{` +
		`Forward:` + fmt.Sprintf("%#v", this.Forward) + `}`}, ", ")
	return s
}
func (this *UpdateMessage_Reply) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dialog.UpdateMessage_Reply{` +
		`Reply:` + fmt.Sprintf("%#v", this.Reply) + `}`}, ", ")
	return s
}
func (this *UpdateMessageContentChanged) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&dialog.UpdateMessageContentChanged{")
	if this.Peer != nil {
		s = append(s, "Peer: "+fmt.Sprintf("%#v", this.Peer)+",\n")
	}
	if this.Mid != nil {
		s = append(s, "Mid: "+fmt.Sprintf("%#v", this.Mid)+",\n")
	}
	if this.Message != nil {
		s = append(s, "Message: "+fmt.Sprintf("%#v", this.Message)+",\n")
	}
	s = append(s, "EditedAt: "+fmt.Sprintf("%#v", this.EditedAt)+",\n")
	s = append(s, "PrevEditInPeerAt: "+fmt.Sprintf("%#v", this.PrevEditInPeerAt)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UpdateMessageSent) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 13)
	s = append(s, "&dialog.UpdateMessageSent{")
	if this.Peer != nil {
		s = append(s, "Peer: "+fmt.Sprintf("%#v", this.Peer)+",\n")
	}
	s = append(s, "Rid: "+fmt.Sprintf("%#v", this.Rid)+",\n")
	s = append(s, "Date: "+fmt.Sprintf("%#v", this.Date)+",\n")
	if this.Mid != nil {
		s = append(s, "Mid: "+fmt.Sprintf("%#v", this.Mid)+",\n")
	}
	if this.PrevMid != nil {
		s = append(s, "PrevMid: "+fmt.Sprintf("%#v", this.PrevMid)+",\n")
	}
	if this.UnreadCounter != nil {
		s = append(s, "UnreadCounter: "+fmt.Sprintf("%#v", this.UnreadCounter)+",\n")
	}
	if this.MyReadDate != nil {
		s = append(s, "MyReadDate: "+fmt.Sprintf("%#v", this.MyReadDate)+",\n")
	}
	if this.Attach != nil {
		s = append(s, "Attach: "+fmt.Sprintf("%#v", this.Attach)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UpdateMessageSent_Forward) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dialog.UpdateMessageSent_Forward{` +
		`Forward:` + fmt.Sprintf("%#v", this.Forward) + `}`}, ", ")
	return s
}
func (this *UpdateMessageSent_Reply) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dialog.UpdateMessageSent_Reply{` +
		`Reply:` + fmt.Sprintf("%#v", this.Reply) + `}`}, ", ")
	return s
}
func (this *UpdateMessageReceived) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&dialog.UpdateMessageReceived{")
	if this.Peer != nil {
		s = append(s, "Peer: "+fmt.Sprintf("%#v", this.Peer)+",\n")
	}
	s = append(s, "StartDate: "+fmt.Sprintf("%#v", this.StartDate)+",\n")
	s = append(s, "ReceivedDate: "+fmt.Sprintf("%#v", this.ReceivedDate)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UpdateMessageRead) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&dialog.UpdateMessageRead{")
	if this.Peer != nil {
		s = append(s, "Peer: "+fmt.Sprintf("%#v", this.Peer)+",\n")
	}
	s = append(s, "StartDate: "+fmt.Sprintf("%#v", this.StartDate)+",\n")
	s = append(s, "ReadDate: "+fmt.Sprintf("%#v", this.ReadDate)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UpdateMessageReadByMe) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&dialog.UpdateMessageReadByMe{")
	if this.Peer != nil {
		s = append(s, "Peer: "+fmt.Sprintf("%#v", this.Peer)+",\n")
	}
	s = append(s, "StartDate: "+fmt.Sprintf("%#v", this.StartDate)+",\n")
	if this.UnreadCounter != nil {
		s = append(s, "UnreadCounter: "+fmt.Sprintf("%#v", this.UnreadCounter)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UpdateMessageDelete) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&dialog.UpdateMessageDelete{")
	if this.Peer != nil {
		s = append(s, "Peer: "+fmt.Sprintf("%#v", this.Peer)+",\n")
	}
	if this.Mids != nil {
		s = append(s, "Mids: "+fmt.Sprintf("%#v", this.Mids)+",\n")
	}
	if this.Counter != nil {
		s = append(s, "Counter: "+fmt.Sprintf("%#v", this.Counter)+",\n")
	}
	s = append(s, "ActionDate: "+fmt.Sprintf("%#v", this.ActionDate)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UpdateChatClear) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&dialog.UpdateChatClear{")
	if this.Peer != nil {
		s = append(s, "Peer: "+fmt.Sprintf("%#v", this.Peer)+",\n")
	}
	s = append(s, "ActionDate: "+fmt.Sprintf("%#v", this.ActionDate)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UpdateChatDelete) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&dialog.UpdateChatDelete{")
	if this.Peer != nil {
		s = append(s, "Peer: "+fmt.Sprintf("%#v", this.Peer)+",\n")
	}
	s = append(s, "ActionDate: "+fmt.Sprintf("%#v", this.ActionDate)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UpdateChatArchive) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&dialog.UpdateChatArchive{")
	if this.Peer != nil {
		s = append(s, "Peer: "+fmt.Sprintf("%#v", this.Peer)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UpdateChatGroupsChanged) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&dialog.UpdateChatGroupsChanged{")
	if this.Dialogs != nil {
		s = append(s, "Dialogs: "+fmt.Sprintf("%#v", this.Dialogs)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UpdateReactionsUpdate) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&dialog.UpdateReactionsUpdate{")
	if this.Peer != nil {
		s = append(s, "Peer: "+fmt.Sprintf("%#v", this.Peer)+",\n")
	}
	if this.Mid != nil {
		s = append(s, "Mid: "+fmt.Sprintf("%#v", this.Mid)+",\n")
	}
	if this.Reactions != nil {
		s = append(s, "Reactions: "+fmt.Sprintf("%#v", this.Reactions)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UpdateMessageRejectedByHook) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&dialog.UpdateMessageRejectedByHook{")
	if this.Peer != nil {
		s = append(s, "Peer: "+fmt.Sprintf("%#v", this.Peer)+",\n")
	}
	s = append(s, "Rid: "+fmt.Sprintf("%#v", this.Rid)+",\n")
	s = append(s, "Date: "+fmt.Sprintf("%#v", this.Date)+",\n")
	s = append(s, "HookId: "+fmt.Sprintf("%#v", this.HookId)+",\n")
	if this.Reason != nil {
		s = append(s, "Reason: "+fmt.Sprintf("%#v", this.Reason)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UpdateMessageEditRejectedByHook) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&dialog.UpdateMessageEditRejectedByHook{")
	if this.Peer != nil {
		s = append(s, "Peer: "+fmt.Sprintf("%#v", this.Peer)+",\n")
	}
	if this.Mid != nil {
		s = append(s, "Mid: "+fmt.Sprintf("%#v", this.Mid)+",\n")
	}
	s = append(s, "Date: "+fmt.Sprintf("%#v", this.Date)+",\n")
	s = append(s, "HookId: "+fmt.Sprintf("%#v", this.HookId)+",\n")
	if this.Reason != nil {
		s = append(s, "Reason: "+fmt.Sprintf("%#v", this.Reason)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UpdateThreadCreated) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&dialog.UpdateThreadCreated{")
	if this.Peer != nil {
		s = append(s, "Peer: "+fmt.Sprintf("%#v", this.Peer)+",\n")
	}
	if this.StartMessage != nil {
		s = append(s, "StartMessage: "+fmt.Sprintf("%#v", this.StartMessage)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UpdateThreadLifted) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&dialog.UpdateThreadLifted{")
	if this.Peer != nil {
		s = append(s, "Peer: "+fmt.Sprintf("%#v", this.Peer)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ReferencedMessages) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&dialog.ReferencedMessages{")
	if this.Mids != nil {
		s = append(s, "Mids: "+fmt.Sprintf("%#v", this.Mids)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *HistoryMessage) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 18)
	s = append(s, "&dialog.HistoryMessage{")
	s = append(s, "SenderUid: "+fmt.Sprintf("%#v", this.SenderUid)+",\n")
	if this.SenderPeer != nil {
		s = append(s, "SenderPeer: "+fmt.Sprintf("%#v", this.SenderPeer)+",\n")
	}
	if this.HostPeer != nil {
		s = append(s, "HostPeer: "+fmt.Sprintf("%#v", this.HostPeer)+",\n")
	}
	if this.Mid != nil {
		s = append(s, "Mid: "+fmt.Sprintf("%#v", this.Mid)+",\n")
	}
	if this.PrevMid != nil {
		s = append(s, "PrevMid: "+fmt.Sprintf("%#v", this.PrevMid)+",\n")
	}
	s = append(s, "Date: "+fmt.Sprintf("%#v", this.Date)+",\n")
	if this.Message != nil {
		s = append(s, "Message: "+fmt.Sprintf("%#v", this.Message)+",\n")
	}
	s = append(s, "State: "+fmt.Sprintf("%#v", this.State)+",\n")
	if this.Reactions != nil {
		s = append(s, "Reactions: "+fmt.Sprintf("%#v", this.Reactions)+",\n")
	}
	if this.Attribute != nil {
		s = append(s, "Attribute: "+fmt.Sprintf("%#v", this.Attribute)+",\n")
	}
	if this.Attach != nil {
		s = append(s, "Attach: "+fmt.Sprintf("%#v", this.Attach)+",\n")
	}
	if this.EditedAt != nil {
		s = append(s, "EditedAt: "+fmt.Sprintf("%#v", this.EditedAt)+",\n")
	}
	s = append(s, "RandomId: "+fmt.Sprintf("%#v", this.RandomId)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *HistoryMessage_Forward) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dialog.HistoryMessage_Forward{` +
		`Forward:` + fmt.Sprintf("%#v", this.Forward) + `}`}, ", ")
	return s
}
func (this *HistoryMessage_Reply) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dialog.HistoryMessage_Reply{` +
		`Reply:` + fmt.Sprintf("%#v", this.Reply) + `}`}, ", ")
	return s
}
func (this *RequestLoadHistory) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&dialog.RequestLoadHistory{")
	if this.Peer != nil {
		s = append(s, "Peer: "+fmt.Sprintf("%#v", this.Peer)+",\n")
	}
	s = append(s, "Date: "+fmt.Sprintf("%#v", this.Date)+",\n")
	s = append(s, "LoadMode: "+fmt.Sprintf("%#v", this.LoadMode)+",\n")
	s = append(s, "Limit: "+fmt.Sprintf("%#v", this.Limit)+",\n")
	s = append(s, "Optimizations: "+fmt.Sprintf("%#v", this.Optimizations)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ResponseLoadHistory) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 11)
	s = append(s, "&dialog.ResponseLoadHistory{")
	if this.History != nil {
		s = append(s, "History: "+fmt.Sprintf("%#v", this.History)+",\n")
	}
	if this.UserPeers != nil {
		s = append(s, "UserPeers: "+fmt.Sprintf("%#v", this.UserPeers)+",\n")
	}
	if this.GroupPeers != nil {
		s = append(s, "GroupPeers: "+fmt.Sprintf("%#v", this.GroupPeers)+",\n")
	}
	if this.Counter != nil {
		s = append(s, "Counter: "+fmt.Sprintf("%#v", this.Counter)+",\n")
	}
	s = append(s, "CounterDate: "+fmt.Sprintf("%#v", this.CounterDate)+",\n")
	if this.LastConversationMessageDate != nil {
		s = append(s, "LastConversationMessageDate: "+fmt.Sprintf("%#v", this.LastConversationMessageDate)+",\n")
	}
	s = append(s, "CountForeignAfterLastReturned: "+fmt.Sprintf("%#v", this.CountForeignAfterLastReturned)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RequestHistoryDifference) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&dialog.RequestHistoryDifference{")
	s = append(s, "Clock: "+fmt.Sprintf("%#v", this.Clock)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ResponseHistoryDifference) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&dialog.ResponseHistoryDifference{")
	if this.History != nil {
		s = append(s, "History: "+fmt.Sprintf("%#v", this.History)+",\n")
	}
	s = append(s, "FromClock: "+fmt.Sprintf("%#v", this.FromClock)+",\n")
	s = append(s, "Clock: "+fmt.Sprintf("%#v", this.Clock)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Dialog) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 20)
	s = append(s, "&dialog.Dialog{")
	if this.Peer != nil {
		s = append(s, "Peer: "+fmt.Sprintf("%#v", this.Peer)+",\n")
	}
	s = append(s, "UnreadCount: "+fmt.Sprintf("%#v", this.UnreadCount)+",\n")
	s = append(s, "SortDate: "+fmt.Sprintf("%#v", this.SortDate)+",\n")
	s = append(s, "SenderUid: "+fmt.Sprintf("%#v", this.SenderUid)+",\n")
	if this.IsFavourite != nil {
		s = append(s, "IsFavourite: "+fmt.Sprintf("%#v", this.IsFavourite)+",\n")
	}
	if this.Mid != nil {
		s = append(s, "Mid: "+fmt.Sprintf("%#v", this.Mid)+",\n")
	}
	s = append(s, "Date: "+fmt.Sprintf("%#v", this.Date)+",\n")
	if this.Message != nil {
		s = append(s, "Message: "+fmt.Sprintf("%#v", this.Message)+",\n")
	}
	s = append(s, "State: "+fmt.Sprintf("%#v", this.State)+",\n")
	s = append(s, "FirstUnreadDate: "+fmt.Sprintf("%#v", this.FirstUnreadDate)+",\n")
	if this.Attributes != nil {
		s = append(s, "Attributes: "+fmt.Sprintf("%#v", this.Attributes)+",\n")
	}
	if this.PinnedMessages != nil {
		s = append(s, "PinnedMessages: "+fmt.Sprintf("%#v", this.PinnedMessages)+",\n")
	}
	if this.HistoryMessage != nil {
		s = append(s, "HistoryMessage: "+fmt.Sprintf("%#v", this.HistoryMessage)+",\n")
	}
	s = append(s, "LastReceive: "+fmt.Sprintf("%#v", this.LastReceive)+",\n")
	s = append(s, "LastRead: "+fmt.Sprintf("%#v", this.LastRead)+",\n")
	s = append(s, "LastReactionAt: "+fmt.Sprintf("%#v", this.LastReactionAt)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RequestLoadDialogs) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&dialog.RequestLoadDialogs{")
	s = append(s, "MinDate: "+fmt.Sprintf("%#v", this.MinDate)+",\n")
	s = append(s, "Limit: "+fmt.Sprintf("%#v", this.Limit)+",\n")
	s = append(s, "Optimizations: "+fmt.Sprintf("%#v", this.Optimizations)+",\n")
	s = append(s, "Filters: "+fmt.Sprintf("%#v", this.Filters)+",\n")
	if this.PeersToLoad != nil {
		s = append(s, "PeersToLoad: "+fmt.Sprintf("%#v", this.PeersToLoad)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ResponseLoadDialogs) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&dialog.ResponseLoadDialogs{")
	if this.Dialogs != nil {
		s = append(s, "Dialogs: "+fmt.Sprintf("%#v", this.Dialogs)+",\n")
	}
	if this.UserPeers != nil {
		s = append(s, "UserPeers: "+fmt.Sprintf("%#v", this.UserPeers)+",\n")
	}
	if this.GroupPeers != nil {
		s = append(s, "GroupPeers: "+fmt.Sprintf("%#v", this.GroupPeers)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DialogData) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&dialog.DialogData{")
	s = append(s, "IsFavourite: "+fmt.Sprintf("%#v", this.IsFavourite)+",\n")
	s = append(s, "CreatedAt: "+fmt.Sprintf("%#v", this.CreatedAt)+",\n")
	s = append(s, "Clock: "+fmt.Sprintf("%#v", this.Clock)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DialogIndex) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&dialog.DialogIndex{")
	if this.Peer != nil {
		s = append(s, "Peer: "+fmt.Sprintf("%#v", this.Peer)+",\n")
	}
	s = append(s, "LastMessageDate: "+fmt.Sprintf("%#v", this.LastMessageDate)+",\n")
	if this.Data != nil {
		s = append(s, "Data: "+fmt.Sprintf("%#v", this.Data)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DialogListEntry) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 14)
	s = append(s, "&dialog.DialogListEntry{")
	if this.Peer != nil {
		s = append(s, "Peer: "+fmt.Sprintf("%#v", this.Peer)+",\n")
	}
	s = append(s, "UnreadCount: "+fmt.Sprintf("%#v", this.UnreadCount)+",\n")
	s = append(s, "MyReadDate: "+fmt.Sprintf("%#v", this.MyReadDate)+",\n")
	s = append(s, "LastMessageDate: "+fmt.Sprintf("%#v", this.LastMessageDate)+",\n")
	s = append(s, "ReceiveDate: "+fmt.Sprintf("%#v", this.ReceiveDate)+",\n")
	s = append(s, "ReadDate: "+fmt.Sprintf("%#v", this.ReadDate)+",\n")
	s = append(s, "EntryClock: "+fmt.Sprintf("%#v", this.EntryClock)+",\n")
	s = append(s, "LastUpdateOfMessageDate: "+fmt.Sprintf("%#v", this.LastUpdateOfMessageDate)+",\n")
	s = append(s, "LastReactionDate: "+fmt.Sprintf("%#v", this.LastReactionDate)+",\n")
	if this.Data != nil {
		s = append(s, "Data: "+fmt.Sprintf("%#v", this.Data)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RequestFetchDialogIndex) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&dialog.RequestFetchDialogIndex{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ResponseFetchDialogIndex) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&dialog.ResponseFetchDialogIndex{")
	if this.DialogIndices != nil {
		s = append(s, "DialogIndices: "+fmt.Sprintf("%#v", this.DialogIndices)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RequestDialogListDifference) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&dialog.RequestDialogListDifference{")
	s = append(s, "FromClock: "+fmt.Sprintf("%#v", this.FromClock)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ResponseDialogListDifference) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&dialog.ResponseDialogListDifference{")
	if this.Entries != nil {
		s = append(s, "Entries: "+fmt.Sprintf("%#v", this.Entries)+",\n")
	}
	s = append(s, "Clock: "+fmt.Sprintf("%#v", this.Clock)+",\n")
	s = append(s, "PrevClock: "+fmt.Sprintf("%#v", this.PrevClock)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RequestGetLastConversationMessages) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&dialog.RequestGetLastConversationMessages{")
	if this.Peers != nil {
		s = append(s, "Peers: "+fmt.Sprintf("%#v", this.Peers)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ResponseGetLastConversationMessages) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&dialog.ResponseGetLastConversationMessages{")
	if this.Messages != nil {
		s = append(s, "Messages: "+fmt.Sprintf("%#v", this.Messages)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ResponseGetLastConversationMessages_Pair) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&dialog.ResponseGetLastConversationMessages_Pair{")
	if this.Peer != nil {
		s = append(s, "Peer: "+fmt.Sprintf("%#v", this.Peer)+",\n")
	}
	if this.Message != nil {
		s = append(s, "Message: "+fmt.Sprintf("%#v", this.Message)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RequestLoadArchived) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&dialog.RequestLoadArchived{")
	if this.NextOffset != nil {
		s = append(s, "NextOffset: "+fmt.Sprintf("%#v", this.NextOffset)+",\n")
	}
	s = append(s, "Limit: "+fmt.Sprintf("%#v", this.Limit)+",\n")
	s = append(s, "Optimizations: "+fmt.Sprintf("%#v", this.Optimizations)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ResponseLoadArchived) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&dialog.ResponseLoadArchived{")
	if this.Dialogs != nil {
		s = append(s, "Dialogs: "+fmt.Sprintf("%#v", this.Dialogs)+",\n")
	}
	if this.UserPeers != nil {
		s = append(s, "UserPeers: "+fmt.Sprintf("%#v", this.UserPeers)+",\n")
	}
	if this.GroupPeers != nil {
		s = append(s, "GroupPeers: "+fmt.Sprintf("%#v", this.GroupPeers)+",\n")
	}
	if this.NextOffset != nil {
		s = append(s, "NextOffset: "+fmt.Sprintf("%#v", this.NextOffset)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RequestLoadGroupedDialogs) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&dialog.RequestLoadGroupedDialogs{")
	s = append(s, "Optimizations: "+fmt.Sprintf("%#v", this.Optimizations)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ResponseLoadGroupedDialogs) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&dialog.ResponseLoadGroupedDialogs{")
	if this.Dialogs != nil {
		s = append(s, "Dialogs: "+fmt.Sprintf("%#v", this.Dialogs)+",\n")
	}
	if this.ShowArchived != nil {
		s = append(s, "ShowArchived: "+fmt.Sprintf("%#v", this.ShowArchived)+",\n")
	}
	if this.ShowInvite != nil {
		s = append(s, "ShowInvite: "+fmt.Sprintf("%#v", this.ShowInvite)+",\n")
	}
	if this.UserPeers != nil {
		s = append(s, "UserPeers: "+fmt.Sprintf("%#v", this.UserPeers)+",\n")
	}
	if this.GroupPeers != nil {
		s = append(s, "GroupPeers: "+fmt.Sprintf("%#v", this.GroupPeers)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ResponseDialogsOrder) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&dialog.ResponseDialogsOrder{")
	s = append(s, "Seq: "+fmt.Sprintf("%#v", this.Seq)+",\n")
	s = append(s, "State: "+fmt.Sprintf("%#v", this.State)+",\n")
	if this.Groups != nil {
		s = append(s, "Groups: "+fmt.Sprintf("%#v", this.Groups)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RequestHideDialog) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&dialog.RequestHideDialog{")
	if this.Peer != nil {
		s = append(s, "Peer: "+fmt.Sprintf("%#v", this.Peer)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RequestShowDialog) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&dialog.RequestShowDialog{")
	if this.Peer != nil {
		s = append(s, "Peer: "+fmt.Sprintf("%#v", this.Peer)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RequestFavouriteDialog) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&dialog.RequestFavouriteDialog{")
	if this.Peer != nil {
		s = append(s, "Peer: "+fmt.Sprintf("%#v", this.Peer)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RequestUnfavouriteDialog) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&dialog.RequestUnfavouriteDialog{")
	if this.Peer != nil {
		s = append(s, "Peer: "+fmt.Sprintf("%#v", this.Peer)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UpdateDialogFavouriteChanged) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&dialog.UpdateDialogFavouriteChanged{")
	if this.Peer != nil {
		s = append(s, "Peer: "+fmt.Sprintf("%#v", this.Peer)+",\n")
	}
	if this.IsFavourite != nil {
		s = append(s, "IsFavourite: "+fmt.Sprintf("%#v", this.IsFavourite)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RequestNotifyDialogOpened) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&dialog.RequestNotifyDialogOpened{")
	if this.Peer != nil {
		s = append(s, "Peer: "+fmt.Sprintf("%#v", this.Peer)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *PinnedMessages) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&dialog.PinnedMessages{")
	if this.Mids != nil {
		s = append(s, "Mids: "+fmt.Sprintf("%#v", this.Mids)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RequestPinMessage) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&dialog.RequestPinMessage{")
	if this.Peer != nil {
		s = append(s, "Peer: "+fmt.Sprintf("%#v", this.Peer)+",\n")
	}
	if this.Mid != nil {
		s = append(s, "Mid: "+fmt.Sprintf("%#v", this.Mid)+",\n")
	}
	s = append(s, "LastPinDate: "+fmt.Sprintf("%#v", this.LastPinDate)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RequestUnpinMessage) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&dialog.RequestUnpinMessage{")
	if this.Peer != nil {
		s = append(s, "Peer: "+fmt.Sprintf("%#v", this.Peer)+",\n")
	}
	if this.Mid != nil {
		s = append(s, "Mid: "+fmt.Sprintf("%#v", this.Mid)+",\n")
	}
	s = append(s, "LastPinDate: "+fmt.Sprintf("%#v", this.LastPinDate)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UpdatePinnedMessagesChanged) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&dialog.UpdatePinnedMessagesChanged{")
	if this.Peer != nil {
		s = append(s, "Peer: "+fmt.Sprintf("%#v", this.Peer)+",\n")
	}
	if this.PinnedMessages != nil {
		s = append(s, "PinnedMessages: "+fmt.Sprintf("%#v", this.PinnedMessages)+",\n")
	}
	s = append(s, "ActionDate: "+fmt.Sprintf("%#v", this.ActionDate)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RequestGetUpdatedMessages) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&dialog.RequestGetUpdatedMessages{")
	if this.Peer != nil {
		s = append(s, "Peer: "+fmt.Sprintf("%#v", this.Peer)+",\n")
	}
	s = append(s, "FromClock: "+fmt.Sprintf("%#v", this.FromClock)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ResponseGetUpdatedMessages) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&dialog.ResponseGetUpdatedMessages{")
	if this.Messages != nil {
		s = append(s, "Messages: "+fmt.Sprintf("%#v", this.Messages)+",\n")
	}
	s = append(s, "PeerClock: "+fmt.Sprintf("%#v", this.PeerClock)+",\n")
	s = append(s, "NextAvailable: "+fmt.Sprintf("%#v", this.NextAvailable)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ResponseGetUpdatedMessages_UpdatedMessage) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&dialog.ResponseGetUpdatedMessages_UpdatedMessage{")
	if this.Mid != nil {
		s = append(s, "Mid: "+fmt.Sprintf("%#v", this.Mid)+",\n")
	}
	if this.Message != nil {
		s = append(s, "Message: "+fmt.Sprintf("%#v", this.Message)+",\n")
	}
	s = append(s, "ModifiedAt: "+fmt.Sprintf("%#v", this.ModifiedAt)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *MessageStatus) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&dialog.MessageStatus{")
	s = append(s, "Clock: "+fmt.Sprintf("%#v", this.Clock)+",\n")
	s = append(s, "UserId: "+fmt.Sprintf("%#v", this.UserId)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RequestMessageReads) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&dialog.RequestMessageReads{")
	if this.Mid != nil {
		s = append(s, "Mid: "+fmt.Sprintf("%#v", this.Mid)+",\n")
	}
	s = append(s, "Limit: "+fmt.Sprintf("%#v", this.Limit)+",\n")
	s = append(s, "TimestampFrom: "+fmt.Sprintf("%#v", this.TimestampFrom)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RequestMessageReceives) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&dialog.RequestMessageReceives{")
	if this.Mid != nil {
		s = append(s, "Mid: "+fmt.Sprintf("%#v", this.Mid)+",\n")
	}
	s = append(s, "Limit: "+fmt.Sprintf("%#v", this.Limit)+",\n")
	s = append(s, "TimestampFrom: "+fmt.Sprintf("%#v", this.TimestampFrom)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ResponseMessageReads) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&dialog.ResponseMessageReads{")
	if this.Status != nil {
		s = append(s, "Status: "+fmt.Sprintf("%#v", this.Status)+",\n")
	}
	s = append(s, "TimestampTill: "+fmt.Sprintf("%#v", this.TimestampTill)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ResponseMessageReceives) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&dialog.ResponseMessageReceives{")
	if this.Status != nil {
		s = append(s, "Status: "+fmt.Sprintf("%#v", this.Status)+",\n")
	}
	s = append(s, "TimestampTill: "+fmt.Sprintf("%#v", this.TimestampTill)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringMessaging(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MessagingClient is the client API for Messaging service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MessagingClient interface {
	/// Interact with a message media (click on button for example)
	DoInteractiveMediaAction(ctx context.Context, in *RequestDoInteractiveMediaAction, opts ...grpc.CallOption) (*ResponseVoid, error)
	SendMessage(ctx context.Context, in *RequestSendMessage, opts ...grpc.CallOption) (*ResponseSendMessage, error)
	UpdateMessage(ctx context.Context, in *RequestUpdateMessage, opts ...grpc.CallOption) (*ResponseSeqDate, error)
	/// Mark message as received by self
	MessageReceived(ctx context.Context, in *RequestMessageReceived, opts ...grpc.CallOption) (*ResponseVoid, error)
	/// Mark message as read by self
	MessageRead(ctx context.Context, in *RequestMessageRead, opts ...grpc.CallOption) (*ResponseVoid, error)
	/// deprecated
	DeleteMessageObsolete(ctx context.Context, in *RequestDeleteMessageObsolete, opts ...grpc.CallOption) (*ResponseSeq, error)
	DeleteMessage(ctx context.Context, in *RequestDeleteMessage, opts ...grpc.CallOption) (*ResponseVoid, error)
	/// Clear chat history
	ClearChat(ctx context.Context, in *RequestClearChat, opts ...grpc.CallOption) (*ResponseSeq, error)
	DeleteChat(ctx context.Context, in *RequestDeleteChat, opts ...grpc.CallOption) (*ResponseSeq, error)
	/// deprecated
	ArchiveChat(ctx context.Context, in *RequestArchiveChat, opts ...grpc.CallOption) (*ResponseSeq, error)
	/// Add reaction on message (emoji)
	MessageSetReaction(ctx context.Context, in *RequestMessageSetReaction, opts ...grpc.CallOption) (*ResponseReactionsResponse, error)
	MessageRemoveReaction(ctx context.Context, in *RequestMessageRemoveReaction, opts ...grpc.CallOption) (*ResponseReactionsResponse, error)
	/// Load conversation history
	LoadHistory(ctx context.Context, in *RequestLoadHistory, opts ...grpc.CallOption) (*ResponseLoadHistory, error)
	/// Load total history difference for all user's conversations
	HistoryDifference(ctx context.Context, in *RequestHistoryDifference, opts ...grpc.CallOption) (*ResponseHistoryDifference, error)
	/// Load user's dialogs
	LoadDialogs(ctx context.Context, in *RequestLoadDialogs, opts ...grpc.CallOption) (*ResponseLoadDialogs, error)
	/// Load short info about all user's dialogs
	FetchDialogIndex(ctx context.Context, in *RequestFetchDialogIndex, opts ...grpc.CallOption) (*ResponseFetchDialogIndex, error)
	/// Load dialogs by peers
	DialogListDifference(ctx context.Context, in *RequestDialogListDifference, opts ...grpc.CallOption) (*ResponseDialogListDifference, error)
	/// Load last messages of the given conversations
	GetLastConversationMessages(ctx context.Context, in *RequestGetLastConversationMessages, opts ...grpc.CallOption) (*ResponseGetLastConversationMessages, error)
	/// deprecated
	LoadArchived(ctx context.Context, in *RequestLoadArchived, opts ...grpc.CallOption) (*ResponseLoadArchived, error)
	/// deprecated
	LoadGroupedDialogs(ctx context.Context, in *RequestLoadGroupedDialogs, opts ...grpc.CallOption) (*ResponseLoadGroupedDialogs, error)
	/// deprecated
	HideDialog(ctx context.Context, in *RequestHideDialog, opts ...grpc.CallOption) (*ResponseDialogsOrder, error)
	/// deprecated
	ShowDialog(ctx context.Context, in *RequestShowDialog, opts ...grpc.CallOption) (*ResponseDialogsOrder, error)
	FavouriteDialog(ctx context.Context, in *RequestFavouriteDialog, opts ...grpc.CallOption) (*ResponseDialogsOrder, error)
	UnfavouriteDialog(ctx context.Context, in *RequestUnfavouriteDialog, opts ...grpc.CallOption) (*ResponseDialogsOrder, error)
	NotifyDialogOpened(ctx context.Context, in *RequestNotifyDialogOpened, opts ...grpc.CallOption) (*ResponseVoid, error)
	PinMessage(ctx context.Context, in *RequestPinMessage, opts ...grpc.CallOption) (*ResponseSeqDate, error)
	UnpinMessage(ctx context.Context, in *RequestUnpinMessage, opts ...grpc.CallOption) (*ResponseSeqDate, error)
	GetUpdatedMessages(ctx context.Context, in *RequestGetUpdatedMessages, opts ...grpc.CallOption) (*ResponseGetUpdatedMessages, error)
	// Returns read status of the message per user
	GetMessageReads(ctx context.Context, in *RequestMessageReads, opts ...grpc.CallOption) (*ResponseMessageReads, error)
	// Returns receive status of the message per user
	GetMessageReceives(ctx context.Context, in *RequestMessageReceives, opts ...grpc.CallOption) (*ResponseMessageReceives, error)
}

type messagingClient struct {
	cc *grpc.ClientConn
}

func NewMessagingClient(cc *grpc.ClientConn) MessagingClient {
	return &messagingClient{cc}
}

func (c *messagingClient) DoInteractiveMediaAction(ctx context.Context, in *RequestDoInteractiveMediaAction, opts ...grpc.CallOption) (*ResponseVoid, error) {
	out := new(ResponseVoid)
	err := c.cc.Invoke(ctx, "/dialog.Messaging/DoInteractiveMediaAction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messagingClient) SendMessage(ctx context.Context, in *RequestSendMessage, opts ...grpc.CallOption) (*ResponseSendMessage, error) {
	out := new(ResponseSendMessage)
	err := c.cc.Invoke(ctx, "/dialog.Messaging/SendMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messagingClient) UpdateMessage(ctx context.Context, in *RequestUpdateMessage, opts ...grpc.CallOption) (*ResponseSeqDate, error) {
	out := new(ResponseSeqDate)
	err := c.cc.Invoke(ctx, "/dialog.Messaging/UpdateMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messagingClient) MessageReceived(ctx context.Context, in *RequestMessageReceived, opts ...grpc.CallOption) (*ResponseVoid, error) {
	out := new(ResponseVoid)
	err := c.cc.Invoke(ctx, "/dialog.Messaging/MessageReceived", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messagingClient) MessageRead(ctx context.Context, in *RequestMessageRead, opts ...grpc.CallOption) (*ResponseVoid, error) {
	out := new(ResponseVoid)
	err := c.cc.Invoke(ctx, "/dialog.Messaging/MessageRead", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messagingClient) DeleteMessageObsolete(ctx context.Context, in *RequestDeleteMessageObsolete, opts ...grpc.CallOption) (*ResponseSeq, error) {
	out := new(ResponseSeq)
	err := c.cc.Invoke(ctx, "/dialog.Messaging/DeleteMessageObsolete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messagingClient) DeleteMessage(ctx context.Context, in *RequestDeleteMessage, opts ...grpc.CallOption) (*ResponseVoid, error) {
	out := new(ResponseVoid)
	err := c.cc.Invoke(ctx, "/dialog.Messaging/DeleteMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messagingClient) ClearChat(ctx context.Context, in *RequestClearChat, opts ...grpc.CallOption) (*ResponseSeq, error) {
	out := new(ResponseSeq)
	err := c.cc.Invoke(ctx, "/dialog.Messaging/ClearChat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messagingClient) DeleteChat(ctx context.Context, in *RequestDeleteChat, opts ...grpc.CallOption) (*ResponseSeq, error) {
	out := new(ResponseSeq)
	err := c.cc.Invoke(ctx, "/dialog.Messaging/DeleteChat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messagingClient) ArchiveChat(ctx context.Context, in *RequestArchiveChat, opts ...grpc.CallOption) (*ResponseSeq, error) {
	out := new(ResponseSeq)
	err := c.cc.Invoke(ctx, "/dialog.Messaging/ArchiveChat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messagingClient) MessageSetReaction(ctx context.Context, in *RequestMessageSetReaction, opts ...grpc.CallOption) (*ResponseReactionsResponse, error) {
	out := new(ResponseReactionsResponse)
	err := c.cc.Invoke(ctx, "/dialog.Messaging/MessageSetReaction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messagingClient) MessageRemoveReaction(ctx context.Context, in *RequestMessageRemoveReaction, opts ...grpc.CallOption) (*ResponseReactionsResponse, error) {
	out := new(ResponseReactionsResponse)
	err := c.cc.Invoke(ctx, "/dialog.Messaging/MessageRemoveReaction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messagingClient) LoadHistory(ctx context.Context, in *RequestLoadHistory, opts ...grpc.CallOption) (*ResponseLoadHistory, error) {
	out := new(ResponseLoadHistory)
	err := c.cc.Invoke(ctx, "/dialog.Messaging/LoadHistory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messagingClient) HistoryDifference(ctx context.Context, in *RequestHistoryDifference, opts ...grpc.CallOption) (*ResponseHistoryDifference, error) {
	out := new(ResponseHistoryDifference)
	err := c.cc.Invoke(ctx, "/dialog.Messaging/HistoryDifference", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messagingClient) LoadDialogs(ctx context.Context, in *RequestLoadDialogs, opts ...grpc.CallOption) (*ResponseLoadDialogs, error) {
	out := new(ResponseLoadDialogs)
	err := c.cc.Invoke(ctx, "/dialog.Messaging/LoadDialogs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messagingClient) FetchDialogIndex(ctx context.Context, in *RequestFetchDialogIndex, opts ...grpc.CallOption) (*ResponseFetchDialogIndex, error) {
	out := new(ResponseFetchDialogIndex)
	err := c.cc.Invoke(ctx, "/dialog.Messaging/FetchDialogIndex", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messagingClient) DialogListDifference(ctx context.Context, in *RequestDialogListDifference, opts ...grpc.CallOption) (*ResponseDialogListDifference, error) {
	out := new(ResponseDialogListDifference)
	err := c.cc.Invoke(ctx, "/dialog.Messaging/DialogListDifference", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messagingClient) GetLastConversationMessages(ctx context.Context, in *RequestGetLastConversationMessages, opts ...grpc.CallOption) (*ResponseGetLastConversationMessages, error) {
	out := new(ResponseGetLastConversationMessages)
	err := c.cc.Invoke(ctx, "/dialog.Messaging/GetLastConversationMessages", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messagingClient) LoadArchived(ctx context.Context, in *RequestLoadArchived, opts ...grpc.CallOption) (*ResponseLoadArchived, error) {
	out := new(ResponseLoadArchived)
	err := c.cc.Invoke(ctx, "/dialog.Messaging/LoadArchived", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messagingClient) LoadGroupedDialogs(ctx context.Context, in *RequestLoadGroupedDialogs, opts ...grpc.CallOption) (*ResponseLoadGroupedDialogs, error) {
	out := new(ResponseLoadGroupedDialogs)
	err := c.cc.Invoke(ctx, "/dialog.Messaging/LoadGroupedDialogs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messagingClient) HideDialog(ctx context.Context, in *RequestHideDialog, opts ...grpc.CallOption) (*ResponseDialogsOrder, error) {
	out := new(ResponseDialogsOrder)
	err := c.cc.Invoke(ctx, "/dialog.Messaging/HideDialog", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messagingClient) ShowDialog(ctx context.Context, in *RequestShowDialog, opts ...grpc.CallOption) (*ResponseDialogsOrder, error) {
	out := new(ResponseDialogsOrder)
	err := c.cc.Invoke(ctx, "/dialog.Messaging/ShowDialog", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messagingClient) FavouriteDialog(ctx context.Context, in *RequestFavouriteDialog, opts ...grpc.CallOption) (*ResponseDialogsOrder, error) {
	out := new(ResponseDialogsOrder)
	err := c.cc.Invoke(ctx, "/dialog.Messaging/FavouriteDialog", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messagingClient) UnfavouriteDialog(ctx context.Context, in *RequestUnfavouriteDialog, opts ...grpc.CallOption) (*ResponseDialogsOrder, error) {
	out := new(ResponseDialogsOrder)
	err := c.cc.Invoke(ctx, "/dialog.Messaging/UnfavouriteDialog", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messagingClient) NotifyDialogOpened(ctx context.Context, in *RequestNotifyDialogOpened, opts ...grpc.CallOption) (*ResponseVoid, error) {
	out := new(ResponseVoid)
	err := c.cc.Invoke(ctx, "/dialog.Messaging/NotifyDialogOpened", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messagingClient) PinMessage(ctx context.Context, in *RequestPinMessage, opts ...grpc.CallOption) (*ResponseSeqDate, error) {
	out := new(ResponseSeqDate)
	err := c.cc.Invoke(ctx, "/dialog.Messaging/PinMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messagingClient) UnpinMessage(ctx context.Context, in *RequestUnpinMessage, opts ...grpc.CallOption) (*ResponseSeqDate, error) {
	out := new(ResponseSeqDate)
	err := c.cc.Invoke(ctx, "/dialog.Messaging/UnpinMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messagingClient) GetUpdatedMessages(ctx context.Context, in *RequestGetUpdatedMessages, opts ...grpc.CallOption) (*ResponseGetUpdatedMessages, error) {
	out := new(ResponseGetUpdatedMessages)
	err := c.cc.Invoke(ctx, "/dialog.Messaging/GetUpdatedMessages", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messagingClient) GetMessageReads(ctx context.Context, in *RequestMessageReads, opts ...grpc.CallOption) (*ResponseMessageReads, error) {
	out := new(ResponseMessageReads)
	err := c.cc.Invoke(ctx, "/dialog.Messaging/GetMessageReads", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messagingClient) GetMessageReceives(ctx context.Context, in *RequestMessageReceives, opts ...grpc.CallOption) (*ResponseMessageReceives, error) {
	out := new(ResponseMessageReceives)
	err := c.cc.Invoke(ctx, "/dialog.Messaging/GetMessageReceives", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MessagingServer is the server API for Messaging service.
type MessagingServer interface {
	/// Interact with a message media (click on button for example)
	DoInteractiveMediaAction(context.Context, *RequestDoInteractiveMediaAction) (*ResponseVoid, error)
	SendMessage(context.Context, *RequestSendMessage) (*ResponseSendMessage, error)
	UpdateMessage(context.Context, *RequestUpdateMessage) (*ResponseSeqDate, error)
	/// Mark message as received by self
	MessageReceived(context.Context, *RequestMessageReceived) (*ResponseVoid, error)
	/// Mark message as read by self
	MessageRead(context.Context, *RequestMessageRead) (*ResponseVoid, error)
	/// deprecated
	DeleteMessageObsolete(context.Context, *RequestDeleteMessageObsolete) (*ResponseSeq, error)
	DeleteMessage(context.Context, *RequestDeleteMessage) (*ResponseVoid, error)
	/// Clear chat history
	ClearChat(context.Context, *RequestClearChat) (*ResponseSeq, error)
	DeleteChat(context.Context, *RequestDeleteChat) (*ResponseSeq, error)
	/// deprecated
	ArchiveChat(context.Context, *RequestArchiveChat) (*ResponseSeq, error)
	/// Add reaction on message (emoji)
	MessageSetReaction(context.Context, *RequestMessageSetReaction) (*ResponseReactionsResponse, error)
	MessageRemoveReaction(context.Context, *RequestMessageRemoveReaction) (*ResponseReactionsResponse, error)
	/// Load conversation history
	LoadHistory(context.Context, *RequestLoadHistory) (*ResponseLoadHistory, error)
	/// Load total history difference for all user's conversations
	HistoryDifference(context.Context, *RequestHistoryDifference) (*ResponseHistoryDifference, error)
	/// Load user's dialogs
	LoadDialogs(context.Context, *RequestLoadDialogs) (*ResponseLoadDialogs, error)
	/// Load short info about all user's dialogs
	FetchDialogIndex(context.Context, *RequestFetchDialogIndex) (*ResponseFetchDialogIndex, error)
	/// Load dialogs by peers
	DialogListDifference(context.Context, *RequestDialogListDifference) (*ResponseDialogListDifference, error)
	/// Load last messages of the given conversations
	GetLastConversationMessages(context.Context, *RequestGetLastConversationMessages) (*ResponseGetLastConversationMessages, error)
	/// deprecated
	LoadArchived(context.Context, *RequestLoadArchived) (*ResponseLoadArchived, error)
	/// deprecated
	LoadGroupedDialogs(context.Context, *RequestLoadGroupedDialogs) (*ResponseLoadGroupedDialogs, error)
	/// deprecated
	HideDialog(context.Context, *RequestHideDialog) (*ResponseDialogsOrder, error)
	/// deprecated
	ShowDialog(context.Context, *RequestShowDialog) (*ResponseDialogsOrder, error)
	FavouriteDialog(context.Context, *RequestFavouriteDialog) (*ResponseDialogsOrder, error)
	UnfavouriteDialog(context.Context, *RequestUnfavouriteDialog) (*ResponseDialogsOrder, error)
	NotifyDialogOpened(context.Context, *RequestNotifyDialogOpened) (*ResponseVoid, error)
	PinMessage(context.Context, *RequestPinMessage) (*ResponseSeqDate, error)
	UnpinMessage(context.Context, *RequestUnpinMessage) (*ResponseSeqDate, error)
	GetUpdatedMessages(context.Context, *RequestGetUpdatedMessages) (*ResponseGetUpdatedMessages, error)
	// Returns read status of the message per user
	GetMessageReads(context.Context, *RequestMessageReads) (*ResponseMessageReads, error)
	// Returns receive status of the message per user
	GetMessageReceives(context.Context, *RequestMessageReceives) (*ResponseMessageReceives, error)
}

// UnimplementedMessagingServer can be embedded to have forward compatible implementations.
type UnimplementedMessagingServer struct {
}

func (*UnimplementedMessagingServer) DoInteractiveMediaAction(ctx context.Context, req *RequestDoInteractiveMediaAction) (*ResponseVoid, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DoInteractiveMediaAction not implemented")
}
func (*UnimplementedMessagingServer) SendMessage(ctx context.Context, req *RequestSendMessage) (*ResponseSendMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendMessage not implemented")
}
func (*UnimplementedMessagingServer) UpdateMessage(ctx context.Context, req *RequestUpdateMessage) (*ResponseSeqDate, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMessage not implemented")
}
func (*UnimplementedMessagingServer) MessageReceived(ctx context.Context, req *RequestMessageReceived) (*ResponseVoid, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessageReceived not implemented")
}
func (*UnimplementedMessagingServer) MessageRead(ctx context.Context, req *RequestMessageRead) (*ResponseVoid, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessageRead not implemented")
}
func (*UnimplementedMessagingServer) DeleteMessageObsolete(ctx context.Context, req *RequestDeleteMessageObsolete) (*ResponseSeq, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMessageObsolete not implemented")
}
func (*UnimplementedMessagingServer) DeleteMessage(ctx context.Context, req *RequestDeleteMessage) (*ResponseVoid, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMessage not implemented")
}
func (*UnimplementedMessagingServer) ClearChat(ctx context.Context, req *RequestClearChat) (*ResponseSeq, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClearChat not implemented")
}
func (*UnimplementedMessagingServer) DeleteChat(ctx context.Context, req *RequestDeleteChat) (*ResponseSeq, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteChat not implemented")
}
func (*UnimplementedMessagingServer) ArchiveChat(ctx context.Context, req *RequestArchiveChat) (*ResponseSeq, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ArchiveChat not implemented")
}
func (*UnimplementedMessagingServer) MessageSetReaction(ctx context.Context, req *RequestMessageSetReaction) (*ResponseReactionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessageSetReaction not implemented")
}
func (*UnimplementedMessagingServer) MessageRemoveReaction(ctx context.Context, req *RequestMessageRemoveReaction) (*ResponseReactionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessageRemoveReaction not implemented")
}
func (*UnimplementedMessagingServer) LoadHistory(ctx context.Context, req *RequestLoadHistory) (*ResponseLoadHistory, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoadHistory not implemented")
}
func (*UnimplementedMessagingServer) HistoryDifference(ctx context.Context, req *RequestHistoryDifference) (*ResponseHistoryDifference, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HistoryDifference not implemented")
}
func (*UnimplementedMessagingServer) LoadDialogs(ctx context.Context, req *RequestLoadDialogs) (*ResponseLoadDialogs, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoadDialogs not implemented")
}
func (*UnimplementedMessagingServer) FetchDialogIndex(ctx context.Context, req *RequestFetchDialogIndex) (*ResponseFetchDialogIndex, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchDialogIndex not implemented")
}
func (*UnimplementedMessagingServer) DialogListDifference(ctx context.Context, req *RequestDialogListDifference) (*ResponseDialogListDifference, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DialogListDifference not implemented")
}
func (*UnimplementedMessagingServer) GetLastConversationMessages(ctx context.Context, req *RequestGetLastConversationMessages) (*ResponseGetLastConversationMessages, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLastConversationMessages not implemented")
}
func (*UnimplementedMessagingServer) LoadArchived(ctx context.Context, req *RequestLoadArchived) (*ResponseLoadArchived, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoadArchived not implemented")
}
func (*UnimplementedMessagingServer) LoadGroupedDialogs(ctx context.Context, req *RequestLoadGroupedDialogs) (*ResponseLoadGroupedDialogs, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoadGroupedDialogs not implemented")
}
func (*UnimplementedMessagingServer) HideDialog(ctx context.Context, req *RequestHideDialog) (*ResponseDialogsOrder, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HideDialog not implemented")
}
func (*UnimplementedMessagingServer) ShowDialog(ctx context.Context, req *RequestShowDialog) (*ResponseDialogsOrder, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShowDialog not implemented")
}
func (*UnimplementedMessagingServer) FavouriteDialog(ctx context.Context, req *RequestFavouriteDialog) (*ResponseDialogsOrder, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FavouriteDialog not implemented")
}
func (*UnimplementedMessagingServer) UnfavouriteDialog(ctx context.Context, req *RequestUnfavouriteDialog) (*ResponseDialogsOrder, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnfavouriteDialog not implemented")
}
func (*UnimplementedMessagingServer) NotifyDialogOpened(ctx context.Context, req *RequestNotifyDialogOpened) (*ResponseVoid, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NotifyDialogOpened not implemented")
}
func (*UnimplementedMessagingServer) PinMessage(ctx context.Context, req *RequestPinMessage) (*ResponseSeqDate, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PinMessage not implemented")
}
func (*UnimplementedMessagingServer) UnpinMessage(ctx context.Context, req *RequestUnpinMessage) (*ResponseSeqDate, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnpinMessage not implemented")
}
func (*UnimplementedMessagingServer) GetUpdatedMessages(ctx context.Context, req *RequestGetUpdatedMessages) (*ResponseGetUpdatedMessages, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUpdatedMessages not implemented")
}
func (*UnimplementedMessagingServer) GetMessageReads(ctx context.Context, req *RequestMessageReads) (*ResponseMessageReads, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMessageReads not implemented")
}
func (*UnimplementedMessagingServer) GetMessageReceives(ctx context.Context, req *RequestMessageReceives) (*ResponseMessageReceives, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMessageReceives not implemented")
}

func RegisterMessagingServer(s *grpc.Server, srv MessagingServer) {
	s.RegisterService(&_Messaging_serviceDesc, srv)
}

func _Messaging_DoInteractiveMediaAction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestDoInteractiveMediaAction)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessagingServer).DoInteractiveMediaAction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dialog.Messaging/DoInteractiveMediaAction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessagingServer).DoInteractiveMediaAction(ctx, req.(*RequestDoInteractiveMediaAction))
	}
	return interceptor(ctx, in, info, handler)
}

func _Messaging_SendMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestSendMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessagingServer).SendMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dialog.Messaging/SendMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessagingServer).SendMessage(ctx, req.(*RequestSendMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Messaging_UpdateMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestUpdateMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessagingServer).UpdateMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dialog.Messaging/UpdateMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessagingServer).UpdateMessage(ctx, req.(*RequestUpdateMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Messaging_MessageReceived_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestMessageReceived)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessagingServer).MessageReceived(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dialog.Messaging/MessageReceived",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessagingServer).MessageReceived(ctx, req.(*RequestMessageReceived))
	}
	return interceptor(ctx, in, info, handler)
}

func _Messaging_MessageRead_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestMessageRead)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessagingServer).MessageRead(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dialog.Messaging/MessageRead",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessagingServer).MessageRead(ctx, req.(*RequestMessageRead))
	}
	return interceptor(ctx, in, info, handler)
}

func _Messaging_DeleteMessageObsolete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestDeleteMessageObsolete)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessagingServer).DeleteMessageObsolete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dialog.Messaging/DeleteMessageObsolete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessagingServer).DeleteMessageObsolete(ctx, req.(*RequestDeleteMessageObsolete))
	}
	return interceptor(ctx, in, info, handler)
}

func _Messaging_DeleteMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestDeleteMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessagingServer).DeleteMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dialog.Messaging/DeleteMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessagingServer).DeleteMessage(ctx, req.(*RequestDeleteMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Messaging_ClearChat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestClearChat)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessagingServer).ClearChat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dialog.Messaging/ClearChat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessagingServer).ClearChat(ctx, req.(*RequestClearChat))
	}
	return interceptor(ctx, in, info, handler)
}

func _Messaging_DeleteChat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestDeleteChat)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessagingServer).DeleteChat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dialog.Messaging/DeleteChat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessagingServer).DeleteChat(ctx, req.(*RequestDeleteChat))
	}
	return interceptor(ctx, in, info, handler)
}

func _Messaging_ArchiveChat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestArchiveChat)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessagingServer).ArchiveChat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dialog.Messaging/ArchiveChat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessagingServer).ArchiveChat(ctx, req.(*RequestArchiveChat))
	}
	return interceptor(ctx, in, info, handler)
}

func _Messaging_MessageSetReaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestMessageSetReaction)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessagingServer).MessageSetReaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dialog.Messaging/MessageSetReaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessagingServer).MessageSetReaction(ctx, req.(*RequestMessageSetReaction))
	}
	return interceptor(ctx, in, info, handler)
}

func _Messaging_MessageRemoveReaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestMessageRemoveReaction)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessagingServer).MessageRemoveReaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dialog.Messaging/MessageRemoveReaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessagingServer).MessageRemoveReaction(ctx, req.(*RequestMessageRemoveReaction))
	}
	return interceptor(ctx, in, info, handler)
}

func _Messaging_LoadHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestLoadHistory)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessagingServer).LoadHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dialog.Messaging/LoadHistory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessagingServer).LoadHistory(ctx, req.(*RequestLoadHistory))
	}
	return interceptor(ctx, in, info, handler)
}

func _Messaging_HistoryDifference_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestHistoryDifference)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessagingServer).HistoryDifference(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dialog.Messaging/HistoryDifference",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessagingServer).HistoryDifference(ctx, req.(*RequestHistoryDifference))
	}
	return interceptor(ctx, in, info, handler)
}

func _Messaging_LoadDialogs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestLoadDialogs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessagingServer).LoadDialogs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dialog.Messaging/LoadDialogs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessagingServer).LoadDialogs(ctx, req.(*RequestLoadDialogs))
	}
	return interceptor(ctx, in, info, handler)
}

func _Messaging_FetchDialogIndex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestFetchDialogIndex)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessagingServer).FetchDialogIndex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dialog.Messaging/FetchDialogIndex",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessagingServer).FetchDialogIndex(ctx, req.(*RequestFetchDialogIndex))
	}
	return interceptor(ctx, in, info, handler)
}

func _Messaging_DialogListDifference_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestDialogListDifference)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessagingServer).DialogListDifference(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dialog.Messaging/DialogListDifference",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessagingServer).DialogListDifference(ctx, req.(*RequestDialogListDifference))
	}
	return interceptor(ctx, in, info, handler)
}

func _Messaging_GetLastConversationMessages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestGetLastConversationMessages)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessagingServer).GetLastConversationMessages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dialog.Messaging/GetLastConversationMessages",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessagingServer).GetLastConversationMessages(ctx, req.(*RequestGetLastConversationMessages))
	}
	return interceptor(ctx, in, info, handler)
}

func _Messaging_LoadArchived_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestLoadArchived)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessagingServer).LoadArchived(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dialog.Messaging/LoadArchived",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessagingServer).LoadArchived(ctx, req.(*RequestLoadArchived))
	}
	return interceptor(ctx, in, info, handler)
}

func _Messaging_LoadGroupedDialogs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestLoadGroupedDialogs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessagingServer).LoadGroupedDialogs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dialog.Messaging/LoadGroupedDialogs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessagingServer).LoadGroupedDialogs(ctx, req.(*RequestLoadGroupedDialogs))
	}
	return interceptor(ctx, in, info, handler)
}

func _Messaging_HideDialog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestHideDialog)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessagingServer).HideDialog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dialog.Messaging/HideDialog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessagingServer).HideDialog(ctx, req.(*RequestHideDialog))
	}
	return interceptor(ctx, in, info, handler)
}

func _Messaging_ShowDialog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestShowDialog)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessagingServer).ShowDialog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dialog.Messaging/ShowDialog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessagingServer).ShowDialog(ctx, req.(*RequestShowDialog))
	}
	return interceptor(ctx, in, info, handler)
}

func _Messaging_FavouriteDialog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestFavouriteDialog)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessagingServer).FavouriteDialog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dialog.Messaging/FavouriteDialog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessagingServer).FavouriteDialog(ctx, req.(*RequestFavouriteDialog))
	}
	return interceptor(ctx, in, info, handler)
}

func _Messaging_UnfavouriteDialog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestUnfavouriteDialog)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessagingServer).UnfavouriteDialog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dialog.Messaging/UnfavouriteDialog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessagingServer).UnfavouriteDialog(ctx, req.(*RequestUnfavouriteDialog))
	}
	return interceptor(ctx, in, info, handler)
}

func _Messaging_NotifyDialogOpened_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestNotifyDialogOpened)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessagingServer).NotifyDialogOpened(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dialog.Messaging/NotifyDialogOpened",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessagingServer).NotifyDialogOpened(ctx, req.(*RequestNotifyDialogOpened))
	}
	return interceptor(ctx, in, info, handler)
}

func _Messaging_PinMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestPinMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessagingServer).PinMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dialog.Messaging/PinMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessagingServer).PinMessage(ctx, req.(*RequestPinMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Messaging_UnpinMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestUnpinMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessagingServer).UnpinMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dialog.Messaging/UnpinMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessagingServer).UnpinMessage(ctx, req.(*RequestUnpinMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Messaging_GetUpdatedMessages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestGetUpdatedMessages)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessagingServer).GetUpdatedMessages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dialog.Messaging/GetUpdatedMessages",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessagingServer).GetUpdatedMessages(ctx, req.(*RequestGetUpdatedMessages))
	}
	return interceptor(ctx, in, info, handler)
}

func _Messaging_GetMessageReads_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestMessageReads)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessagingServer).GetMessageReads(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dialog.Messaging/GetMessageReads",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessagingServer).GetMessageReads(ctx, req.(*RequestMessageReads))
	}
	return interceptor(ctx, in, info, handler)
}

func _Messaging_GetMessageReceives_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestMessageReceives)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessagingServer).GetMessageReceives(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dialog.Messaging/GetMessageReceives",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessagingServer).GetMessageReceives(ctx, req.(*RequestMessageReceives))
	}
	return interceptor(ctx, in, info, handler)
}

var _Messaging_serviceDesc = grpc.ServiceDesc{
	ServiceName: "dialog.Messaging",
	HandlerType: (*MessagingServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DoInteractiveMediaAction",
			Handler:    _Messaging_DoInteractiveMediaAction_Handler,
		},
		{
			MethodName: "SendMessage",
			Handler:    _Messaging_SendMessage_Handler,
		},
		{
			MethodName: "UpdateMessage",
			Handler:    _Messaging_UpdateMessage_Handler,
		},
		{
			MethodName: "MessageReceived",
			Handler:    _Messaging_MessageReceived_Handler,
		},
		{
			MethodName: "MessageRead",
			Handler:    _Messaging_MessageRead_Handler,
		},
		{
			MethodName: "DeleteMessageObsolete",
			Handler:    _Messaging_DeleteMessageObsolete_Handler,
		},
		{
			MethodName: "DeleteMessage",
			Handler:    _Messaging_DeleteMessage_Handler,
		},
		{
			MethodName: "ClearChat",
			Handler:    _Messaging_ClearChat_Handler,
		},
		{
			MethodName: "DeleteChat",
			Handler:    _Messaging_DeleteChat_Handler,
		},
		{
			MethodName: "ArchiveChat",
			Handler:    _Messaging_ArchiveChat_Handler,
		},
		{
			MethodName: "MessageSetReaction",
			Handler:    _Messaging_MessageSetReaction_Handler,
		},
		{
			MethodName: "MessageRemoveReaction",
			Handler:    _Messaging_MessageRemoveReaction_Handler,
		},
		{
			MethodName: "LoadHistory",
			Handler:    _Messaging_LoadHistory_Handler,
		},
		{
			MethodName: "HistoryDifference",
			Handler:    _Messaging_HistoryDifference_Handler,
		},
		{
			MethodName: "LoadDialogs",
			Handler:    _Messaging_LoadDialogs_Handler,
		},
		{
			MethodName: "FetchDialogIndex",
			Handler:    _Messaging_FetchDialogIndex_Handler,
		},
		{
			MethodName: "DialogListDifference",
			Handler:    _Messaging_DialogListDifference_Handler,
		},
		{
			MethodName: "GetLastConversationMessages",
			Handler:    _Messaging_GetLastConversationMessages_Handler,
		},
		{
			MethodName: "LoadArchived",
			Handler:    _Messaging_LoadArchived_Handler,
		},
		{
			MethodName: "LoadGroupedDialogs",
			Handler:    _Messaging_LoadGroupedDialogs_Handler,
		},
		{
			MethodName: "HideDialog",
			Handler:    _Messaging_HideDialog_Handler,
		},
		{
			MethodName: "ShowDialog",
			Handler:    _Messaging_ShowDialog_Handler,
		},
		{
			MethodName: "FavouriteDialog",
			Handler:    _Messaging_FavouriteDialog_Handler,
		},
		{
			MethodName: "UnfavouriteDialog",
			Handler:    _Messaging_UnfavouriteDialog_Handler,
		},
		{
			MethodName: "NotifyDialogOpened",
			Handler:    _Messaging_NotifyDialogOpened_Handler,
		},
		{
			MethodName: "PinMessage",
			Handler:    _Messaging_PinMessage_Handler,
		},
		{
			MethodName: "UnpinMessage",
			Handler:    _Messaging_UnpinMessage_Handler,
		},
		{
			MethodName: "GetUpdatedMessages",
			Handler:    _Messaging_GetUpdatedMessages_Handler,
		},
		{
			MethodName: "GetMessageReads",
			Handler:    _Messaging_GetMessageReads_Handler,
		},
		{
			MethodName: "GetMessageReceives",
			Handler:    _Messaging_GetMessageReceives_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "messaging.proto",
}

func (m *MessageAttributes) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MessageAttributes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MessageAttributes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.IsOnlyForYou != nil {
		{
			size, err := m.IsOnlyForYou.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessaging(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.IsNotified != nil {
		{
			size, err := m.IsNotified.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessaging(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.IsHighlighted != nil {
		{
			size, err := m.IsHighlighted.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessaging(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.IsMentioned != nil {
		{
			size, err := m.IsMentioned.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessaging(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QuotedMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QuotedMessage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QuotedMessage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.QuotedMessageContent != nil {
		{
			size, err := m.QuotedMessageContent.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessaging(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.MessageDate != 0 {
		i = encodeVarintMessaging(dAtA, i, uint64(m.MessageDate))
		i--
		dAtA[i] = 0x20
	}
	if m.SenderUserId != 0 {
		i = encodeVarintMessaging(dAtA, i, uint64(m.SenderUserId))
		i--
		dAtA[i] = 0x18
	}
	if m.PublicGroupId != 0 {
		i = encodeVarintMessaging(dAtA, i, uint64(m.PublicGroupId))
		i--
		dAtA[i] = 0x10
	}
	if m.MessageId != 0 {
		i = encodeVarintMessaging(dAtA, i, uint64(m.MessageId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MessageMedia) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MessageMedia) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MessageMedia) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Actions) > 0 {
		for iNdEx := len(m.Actions) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Actions[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMessaging(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	if m.Audio != nil {
		{
			size, err := m.Audio.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessaging(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Image != nil {
		{
			size, err := m.Image.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessaging(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Webpage != nil {
		{
			size, err := m.Webpage.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessaging(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *WebpageMedia) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WebpageMedia) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WebpageMedia) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Image != nil {
		{
			size, err := m.Image.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessaging(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.Description != nil {
		{
			size, err := m.Description.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessaging(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Title != nil {
		{
			size, err := m.Title.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessaging(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Url != nil {
		{
			size, err := m.Url.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessaging(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ImageMedia) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ImageMedia) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ImageMedia) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Image != nil {
		{
			size, err := m.Image.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessaging(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AudioMedia) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AudioMedia) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AudioMedia) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Audio != nil {
		{
			size, err := m.Audio.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessaging(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *InteractiveMediaWidget) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InteractiveMediaWidget) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InteractiveMediaWidget) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Body != nil {
		{
			size := m.Body.Size()
			i -= size
			if _, err := m.Body.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *InteractiveMediaWidget_InteractiveMediaButton) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InteractiveMediaWidget_InteractiveMediaButton) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.InteractiveMediaButton != nil {
		{
			size, err := m.InteractiveMediaButton.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessaging(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}
func (m *InteractiveMediaWidget_InteractiveMediaSelect) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InteractiveMediaWidget_InteractiveMediaSelect) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.InteractiveMediaSelect != nil {
		{
			size, err := m.InteractiveMediaSelect.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessaging(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *InteractiveMediaButton) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InteractiveMediaButton) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InteractiveMediaButton) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Label != nil {
		{
			size, err := m.Label.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessaging(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Value) > 0 {
		i -= len(m.Value)
		copy(dAtA[i:], m.Value)
		i = encodeVarintMessaging(dAtA, i, uint64(len(m.Value)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *InteractiveMediaSelect) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InteractiveMediaSelect) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InteractiveMediaSelect) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.DefaultValue != nil {
		{
			size, err := m.DefaultValue.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessaging(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Label != nil {
		{
			size, err := m.Label.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessaging(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Options) > 0 {
		for iNdEx := len(m.Options) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Options[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMessaging(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *InteractiveMediaSelectOption) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InteractiveMediaSelectOption) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InteractiveMediaSelectOption) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Label) > 0 {
		i -= len(m.Label)
		copy(dAtA[i:], m.Label)
		i = encodeVarintMessaging(dAtA, i, uint64(len(m.Label)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Value) > 0 {
		i -= len(m.Value)
		copy(dAtA[i:], m.Value)
		i = encodeVarintMessaging(dAtA, i, uint64(len(m.Value)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *InteractiveMedia) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InteractiveMedia) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InteractiveMedia) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Confirm != nil {
		{
			size, err := m.Confirm.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessaging(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.Style != 0 {
		i = encodeVarintMessaging(dAtA, i, uint64(m.Style))
		i--
		dAtA[i] = 0x18
	}
	if m.Widget != nil {
		{
			size, err := m.Widget.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessaging(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintMessaging(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *InteractiveMediaTranslation) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InteractiveMediaTranslation) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InteractiveMediaTranslation) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Value) > 0 {
		i -= len(m.Value)
		copy(dAtA[i:], m.Value)
		i = encodeVarintMessaging(dAtA, i, uint64(len(m.Value)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintMessaging(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *InteractiveMediaTranslationGroup) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InteractiveMediaTranslationGroup) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InteractiveMediaTranslationGroup) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Messages) > 0 {
		for iNdEx := len(m.Messages) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Messages[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMessaging(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Language) > 0 {
		i -= len(m.Language)
		copy(dAtA[i:], m.Language)
		i = encodeVarintMessaging(dAtA, i, uint64(len(m.Language)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *InteractiveMediaGroup) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InteractiveMediaGroup) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InteractiveMediaGroup) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Translations) > 0 {
		for iNdEx := len(m.Translations) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Translations[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMessaging(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if m.Description != nil {
		{
			size, err := m.Description.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessaging(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Title != nil {
		{
			size, err := m.Title.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessaging(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Actions) > 0 {
		for iNdEx := len(m.Actions) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Actions[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMessaging(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *InteractiveMediaConfirm) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InteractiveMediaConfirm) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InteractiveMediaConfirm) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Dismiss != nil {
		{
			size, err := m.Dismiss.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessaging(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.Ok != nil {
		{
			size, err := m.Ok.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessaging(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Title != nil {
		{
			size, err := m.Title.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessaging(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Text != nil {
		{
			size, err := m.Text.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessaging(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UpdateInteractiveMediaEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateInteractiveMediaEvent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateInteractiveMediaEvent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Uid != 0 {
		i = encodeVarintMessaging(dAtA, i, uint64(m.Uid))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Value) > 0 {
		i -= len(m.Value)
		copy(dAtA[i:], m.Value)
		i = encodeVarintMessaging(dAtA, i, uint64(len(m.Value)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintMessaging(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0x12
	}
	if m.Mid != nil {
		{
			size, err := m.Mid.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessaging(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RequestDoInteractiveMediaAction) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestDoInteractiveMediaAction) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RequestDoInteractiveMediaAction) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Value) > 0 {
		i -= len(m.Value)
		copy(dAtA[i:], m.Value)
		i = encodeVarintMessaging(dAtA, i, uint64(len(m.Value)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintMessaging(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0x12
	}
	if m.Mid != nil {
		{
			size, err := m.Mid.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessaging(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MessageContent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MessageContent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MessageContent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Body != nil {
		{
			size := m.Body.Size()
			i -= size
			if _, err := m.Body.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *MessageContent_TextMessage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MessageContent_TextMessage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.TextMessage != nil {
		{
			size, err := m.TextMessage.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessaging(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}
func (m *MessageContent_ServiceMessage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MessageContent_ServiceMessage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ServiceMessage != nil {
		{
			size, err := m.ServiceMessage.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessaging(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *MessageContent_DocumentMessage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MessageContent_DocumentMessage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DocumentMessage != nil {
		{
			size, err := m.DocumentMessage.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessaging(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *MessageContent_JsonMessage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MessageContent_JsonMessage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.JsonMessage != nil {
		{
			size, err := m.JsonMessage.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessaging(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *MessageContent_UnsupportedMessage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MessageContent_UnsupportedMessage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.UnsupportedMessage != nil {
		{
			size, err := m.UnsupportedMessage.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessaging(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	return len(dAtA) - i, nil
}
func (m *MessageContent_StickerMessage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MessageContent_StickerMessage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.StickerMessage != nil {
		{
			size, err := m.StickerMessage.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessaging(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	return len(dAtA) - i, nil
}
func (m *MessageContent_BinaryMessage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MessageContent_BinaryMessage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.BinaryMessage != nil {
		{
			size, err := m.BinaryMessage.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessaging(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	return len(dAtA) - i, nil
}
func (m *MessageContent_EmptyMessage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MessageContent_EmptyMessage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.EmptyMessage != nil {
		{
			size, err := m.EmptyMessage.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessaging(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	return len(dAtA) - i, nil
}
func (m *MessageContent_DeletedMessage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MessageContent_DeletedMessage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DeletedMessage != nil {
		{
			size, err := m.DeletedMessage.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessaging(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	return len(dAtA) - i, nil
}
func (m *TextMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TextMessage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TextMessage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Mentions) > 0 {
		for iNdEx := len(m.Mentions) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Mentions[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMessaging(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.Extensions) > 0 {
		for iNdEx := len(m.Extensions) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Extensions[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMessaging(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.Media) > 0 {
		for iNdEx := len(m.Media) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Media[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMessaging(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if m.Ext != nil {
		{
			size, err := m.Ext.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessaging(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Text) > 0 {
		i -= len(m.Text)
		copy(dAtA[i:], m.Text)
		i = encodeVarintMessaging(dAtA, i, uint64(len(m.Text)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Mention) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Mention) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Mention) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.All {
		i--
		if m.All {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if m.Peer != nil {
		{
			size, err := m.Peer.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessaging(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TextMessageEx) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TextMessageEx) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TextMessageEx) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Body != nil {
		{
			size := m.Body.Size()
			i -= size
			if _, err := m.Body.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *TextMessageEx_TextExMarkdown) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TextMessageEx_TextExMarkdown) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.TextExMarkdown != nil {
		{
			size, err := m.TextExMarkdown.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessaging(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}
func (m *TextMessageEx_TextModernMessage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TextMessageEx_TextModernMessage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.TextModernMessage != nil {
		{
			size, err := m.TextModernMessage.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessaging(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *TextMessageEx_TextCommand) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TextMessageEx_TextCommand) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.TextCommand != nil {
		{
			size, err := m.TextCommand.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessaging(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *TextExMarkdown) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TextExMarkdown) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TextExMarkdown) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Markdown) > 0 {
		i -= len(m.Markdown)
		copy(dAtA[i:], m.Markdown)
		i = encodeVarintMessaging(dAtA, i, uint64(len(m.Markdown)))
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}

func (m *TextModernMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TextModernMessage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TextModernMessage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Attaches) > 0 {
		for iNdEx := len(m.Attaches) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Attaches[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMessaging(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if m.Style != nil {
		{
			size, err := m.Style.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessaging(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.SenderPhotoOverride != nil {
		{
			size, err := m.SenderPhotoOverride.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessaging(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.SenderNameOverride != nil {
		{
			size, err := m.SenderNameOverride.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessaging(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Text != nil {
		{
			size, err := m.Text.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessaging(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ParagraphStyle) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ParagraphStyle) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ParagraphStyle) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BgColor != nil {
		{
			size, err := m.BgColor.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessaging(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.ParagraphColor != nil {
		{
			size, err := m.ParagraphColor.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessaging(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.ShowParagraph != nil {
		{
			size, err := m.ShowParagraph.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessaging(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TextModernAttach) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TextModernAttach) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TextModernAttach) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Fields) > 0 {
		for iNdEx := len(m.Fields) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Fields[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMessaging(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	if m.Style != nil {
		{
			size, err := m.Style.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessaging(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.Text != nil {
		{
			size, err := m.Text.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessaging(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.TitleIcon != nil {
		{
			size, err := m.TitleIcon.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessaging(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.TitleUrl != nil {
		{
			size, err := m.TitleUrl.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessaging(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Title != nil {
		{
			size, err := m.Title.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessaging(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TextModernField) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TextModernField) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TextModernField) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.IsShort != nil {
		{
			size, err := m.IsShort.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessaging(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Value) > 0 {
		i -= len(m.Value)
		copy(dAtA[i:], m.Value)
		i = encodeVarintMessaging(dAtA, i, uint64(len(m.Value)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintMessaging(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TextCommand) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TextCommand) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TextCommand) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Args) > 0 {
		i -= len(m.Args)
		copy(dAtA[i:], m.Args)
		i = encodeVarintMessaging(dAtA, i, uint64(len(m.Args)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Command) > 0 {
		i -= len(m.Command)
		copy(dAtA[i:], m.Command)
		i = encodeVarintMessaging(dAtA, i, uint64(len(m.Command)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ServiceMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ServiceMessage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ServiceMessage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Ext != nil {
		{
			size, err := m.Ext.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessaging(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Text) > 0 {
		i -= len(m.Text)
		copy(dAtA[i:], m.Text)
		i = encodeVarintMessaging(dAtA, i, uint64(len(m.Text)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ServiceEx) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ServiceEx) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ServiceEx) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Body != nil {
		{
			size := m.Body.Size()
			i -= size
			if _, err := m.Body.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *ServiceEx_UserInvited) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ServiceEx_UserInvited) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.UserInvited != nil {
		{
			size, err := m.UserInvited.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessaging(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}
func (m *ServiceEx_UserJoined) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ServiceEx_UserJoined) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.UserJoined != nil {
		{
			size, err := m.UserJoined.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessaging(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *ServiceEx_UserKicked) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ServiceEx_UserKicked) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.UserKicked != nil {
		{
			size, err := m.UserKicked.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessaging(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *ServiceEx_UserLeft) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ServiceEx_UserLeft) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.UserLeft != nil {
		{
			size, err := m.UserLeft.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessaging(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *ServiceEx_GroupCreated) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ServiceEx_GroupCreated) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.GroupCreated != nil {
		{
			size, err := m.GroupCreated.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessaging(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	return len(dAtA) - i, nil
}
func (m *ServiceEx_ChangedTitle) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ServiceEx_ChangedTitle) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ChangedTitle != nil {
		{
			size, err := m.ChangedTitle.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessaging(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	return len(dAtA) - i, nil
}
func (m *ServiceEx_ChangedTopic) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ServiceEx_ChangedTopic) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ChangedTopic != nil {
		{
			size, err := m.ChangedTopic.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessaging(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	return len(dAtA) - i, nil
}
func (m *ServiceEx_ChangedAbout) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ServiceEx_ChangedAbout) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ChangedAbout != nil {
		{
			size, err := m.ChangedAbout.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessaging(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	return len(dAtA) - i, nil
}
func (m *ServiceEx_ChangedAvatar) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ServiceEx_ChangedAvatar) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ChangedAvatar != nil {
		{
			size, err := m.ChangedAvatar.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessaging(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	return len(dAtA) - i, nil
}
func (m *ServiceEx_ContactRegistered) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ServiceEx_ContactRegistered) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ContactRegistered != nil {
		{
			size, err := m.ContactRegistered.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessaging(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x52
	}
	return len(dAtA) - i, nil
}
func (m *ServiceEx_PhoneMissed) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ServiceEx_PhoneMissed) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.PhoneMissed != nil {
		{
			size, err := m.PhoneMissed.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessaging(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5a
	}
	return len(dAtA) - i, nil
}
func (m *ServiceEx_PhoneCall) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ServiceEx_PhoneCall) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.PhoneCall != nil {
		{
			size, err := m.PhoneCall.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessaging(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x62
	}
	return len(dAtA) - i, nil
}
func (m *ServiceEx_PhoneRejected) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ServiceEx_PhoneRejected) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.PhoneRejected != nil {
		{
			size, err := m.PhoneRejected.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessaging(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6a
	}
	return len(dAtA) - i, nil
}
func (m *ServiceEx_ChatArchived) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ServiceEx_ChatArchived) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ChatArchived != nil {
		{
			size, err := m.ChatArchived.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessaging(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x72
	}
	return len(dAtA) - i, nil
}
func (m *ServiceEx_ChatRestored) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ServiceEx_ChatRestored) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ChatRestored != nil {
		{
			size, err := m.ChatRestored.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessaging(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x7a
	}
	return len(dAtA) - i, nil
}
func (m *ServiceEx_ChangedShortname) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ServiceEx_ChangedShortname) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ChangedShortname != nil {
		{
			size, err := m.ChangedShortname.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessaging(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x82
	}
	return len(dAtA) - i, nil
}
func (m *ServiceExUserInvited) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ServiceExUserInvited) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ServiceExUserInvited) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.InvitedUid != 0 {
		i = encodeVarintMessaging(dAtA, i, uint64(m.InvitedUid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ServiceExUserJoined) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ServiceExUserJoined) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ServiceExUserJoined) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.JoinedUserId != 0 {
		i = encodeVarintMessaging(dAtA, i, uint64(m.JoinedUserId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ServiceExUserKicked) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ServiceExUserKicked) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ServiceExUserKicked) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.KickedUid != 0 {
		i = encodeVarintMessaging(dAtA, i, uint64(m.KickedUid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ServiceExUserLeft) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ServiceExUserLeft) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ServiceExUserLeft) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.LeftUserId != 0 {
		i = encodeVarintMessaging(dAtA, i, uint64(m.LeftUserId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ServiceExGroupCreated) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ServiceExGroupCreated) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ServiceExGroupCreated) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *ServiceExChangedShortname) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ServiceExChangedShortname) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ServiceExChangedShortname) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Shortname) > 0 {
		i -= len(m.Shortname)
		copy(dAtA[i:], m.Shortname)
		i = encodeVarintMessaging(dAtA, i, uint64(len(m.Shortname)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ServiceExChangedTitle) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ServiceExChangedTitle) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ServiceExChangedTitle) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintMessaging(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ServiceExChangedTopic) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ServiceExChangedTopic) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ServiceExChangedTopic) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Topic != nil {
		{
			size, err := m.Topic.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessaging(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ServiceExChangedAbout) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ServiceExChangedAbout) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ServiceExChangedAbout) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.About != nil {
		{
			size, err := m.About.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessaging(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ServiceExChangedAvatar) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ServiceExChangedAvatar) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ServiceExChangedAvatar) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Avatar != nil {
		{
			size, err := m.Avatar.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessaging(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ServiceExContactRegistered) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ServiceExContactRegistered) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ServiceExContactRegistered) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Uid != 0 {
		i = encodeVarintMessaging(dAtA, i, uint64(m.Uid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ServiceExPhoneMissed) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ServiceExPhoneMissed) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ServiceExPhoneMissed) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *ServiceExPhoneCall) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ServiceExPhoneCall) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ServiceExPhoneCall) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Duration != 0 {
		i = encodeVarintMessaging(dAtA, i, uint64(m.Duration))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ServiceExPhoneRejected) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ServiceExPhoneRejected) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ServiceExPhoneRejected) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *ServiceExChatArchived) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ServiceExChatArchived) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ServiceExChatArchived) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *ServiceExChatRestored) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ServiceExChatRestored) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ServiceExChatRestored) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *DocumentMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DocumentMessage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DocumentMessage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Ext != nil {
		{
			size, err := m.Ext.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessaging(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	if m.Thumb != nil {
		{
			size, err := m.Thumb.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessaging(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if len(m.MimeType) > 0 {
		i -= len(m.MimeType)
		copy(dAtA[i:], m.MimeType)
		i = encodeVarintMessaging(dAtA, i, uint64(len(m.MimeType)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintMessaging(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x22
	}
	if m.FileSize != 0 {
		i = encodeVarintMessaging(dAtA, i, uint64(m.FileSize))
		i--
		dAtA[i] = 0x18
	}
	if m.AccessHash != 0 {
		i = encodeVarintMessaging(dAtA, i, uint64(m.AccessHash))
		i--
		dAtA[i] = 0x10
	}
	if m.FileId != 0 {
		i = encodeVarintMessaging(dAtA, i, uint64(m.FileId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *DocumentEx) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DocumentEx) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DocumentEx) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Body != nil {
		{
			size := m.Body.Size()
			i -= size
			if _, err := m.Body.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *DocumentEx_Photo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DocumentEx_Photo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Photo != nil {
		{
			size, err := m.Photo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessaging(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}
func (m *DocumentEx_Video) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DocumentEx_Video) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Video != nil {
		{
			size, err := m.Video.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessaging(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *DocumentEx_Voice) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DocumentEx_Voice) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Voice != nil {
		{
			size, err := m.Voice.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessaging(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *DocumentExPhoto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DocumentExPhoto) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DocumentExPhoto) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.H != 0 {
		i = encodeVarintMessaging(dAtA, i, uint64(m.H))
		i--
		dAtA[i] = 0x10
	}
	if m.W != 0 {
		i = encodeVarintMessaging(dAtA, i, uint64(m.W))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *DocumentExVideo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DocumentExVideo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DocumentExVideo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Duration != 0 {
		i = encodeVarintMessaging(dAtA, i, uint64(m.Duration))
		i--
		dAtA[i] = 0x18
	}
	if m.H != 0 {
		i = encodeVarintMessaging(dAtA, i, uint64(m.H))
		i--
		dAtA[i] = 0x10
	}
	if m.W != 0 {
		i = encodeVarintMessaging(dAtA, i, uint64(m.W))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *DocumentExVoice) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DocumentExVoice) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DocumentExVoice) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Duration != 0 {
		i = encodeVarintMessaging(dAtA, i, uint64(m.Duration))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *JsonMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *JsonMessage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *JsonMessage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.RawJson) > 0 {
		i -= len(m.RawJson)
		copy(dAtA[i:], m.RawJson)
		i = encodeVarintMessaging(dAtA, i, uint64(len(m.RawJson)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UnsupportedMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UnsupportedMessage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UnsupportedMessage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *StickerMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StickerMessage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StickerMessage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AnimatedStickerJson != nil {
		{
			size, err := m.AnimatedStickerJson.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessaging(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	if m.Emoji != nil {
		{
			size, err := m.Emoji.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessaging(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if m.StickerCollectionAccessHash != nil {
		{
			size, err := m.StickerCollectionAccessHash.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessaging(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if m.StickerCollectionId != nil {
		{
			size, err := m.StickerCollectionId.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessaging(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.Image_256 != nil {
		{
			size, err := m.Image_256.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessaging(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.Image_512 != nil {
		{
			size, err := m.Image_512.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessaging(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.FastPreview != nil {
		{
			size, err := m.FastPreview.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessaging(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.StickerId != nil {
		{
			size, err := m.StickerId.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessaging(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *BinaryMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BinaryMessage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BinaryMessage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Msg) > 0 {
		i -= len(m.Msg)
		copy(dAtA[i:], m.Msg)
		i = encodeVarintMessaging(dAtA, i, uint64(len(m.Msg)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ContentTag) > 0 {
		i -= len(m.ContentTag)
		copy(dAtA[i:], m.ContentTag)
		i = encodeVarintMessaging(dAtA, i, uint64(len(m.ContentTag)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EmptyMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EmptyMessage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EmptyMessage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *DeletedMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeletedMessage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeletedMessage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.IsLocal != nil {
		{
			size, err := m.IsLocal.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessaging(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DialogShort) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DialogShort) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DialogShort) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Date != 0 {
		i = encodeVarintMessaging(dAtA, i, uint64(m.Date))
		i--
		dAtA[i] = 0x20
	}
	if m.Counter != 0 {
		i = encodeVarintMessaging(dAtA, i, uint64(m.Counter))
		i--
		dAtA[i] = 0x10
	}
	if m.Peer != nil {
		{
			size, err := m.Peer.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessaging(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DialogGroup) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DialogGroup) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DialogGroup) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Dialogs) > 0 {
		for iNdEx := len(m.Dialogs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Dialogs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMessaging(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Key) > 0 {
		i -= len(m.Key)
		copy(dAtA[i:], m.Key)
		i = encodeVarintMessaging(dAtA, i, uint64(len(m.Key)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintMessaging(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MessageReaction) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MessageReaction) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MessageReaction) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Code) > 0 {
		i -= len(m.Code)
		copy(dAtA[i:], m.Code)
		i = encodeVarintMessaging(dAtA, i, uint64(len(m.Code)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Users) > 0 {
		dAtA93 := make([]byte, len(m.Users)*10)
		var j92 int
		for _, num1 := range m.Users {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA93[j92] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j92++
			}
			dAtA93[j92] = uint8(num)
			j92++
		}
		i -= j92
		copy(dAtA[i:], dAtA93[:j92])
		i = encodeVarintMessaging(dAtA, i, uint64(j92))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SearchPredicate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SearchPredicate) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SearchPredicate) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Values) > 0 {
		for iNdEx := len(m.Values) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Values[iNdEx])
			copy(dAtA[i:], m.Values[iNdEx])
			i = encodeVarintMessaging(dAtA, i, uint64(len(m.Values[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Key) > 0 {
		i -= len(m.Key)
		copy(dAtA[i:], m.Key)
		i = encodeVarintMessaging(dAtA, i, uint64(len(m.Key)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RequestSendMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestSendMessage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RequestSendMessage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.BlackList) > 0 {
		dAtA95 := make([]byte, len(m.BlackList)*10)
		var j94 int
		for _, num1 := range m.BlackList {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA95[j94] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j94++
			}
			dAtA95[j94] = uint8(num)
			j94++
		}
		i -= j94
		copy(dAtA[i:], dAtA95[:j94])
		i = encodeVarintMessaging(dAtA, i, uint64(j94))
		i--
		dAtA[i] = 0x62
	}
	if len(m.WhiteList) > 0 {
		dAtA97 := make([]byte, len(m.WhiteList)*10)
		var j96 int
		for _, num1 := range m.WhiteList {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA97[j96] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j96++
			}
			dAtA97[j96] = uint8(num)
			j96++
		}
		i -= j96
		copy(dAtA[i:], dAtA97[:j96])
		i = encodeVarintMessaging(dAtA, i, uint64(j96))
		i--
		dAtA[i] = 0x5a
	}
	if len(m.Predicates) > 0 {
		for iNdEx := len(m.Predicates) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Predicates[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMessaging(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x52
		}
	}
	if m.Reply != nil {
		{
			size, err := m.Reply.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessaging(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	if m.Forward != nil {
		{
			size, err := m.Forward.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessaging(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	if m.IsOnlyForUser != 0 {
		i = encodeVarintMessaging(dAtA, i, uint64(m.IsOnlyForUser))
		i--
		dAtA[i] = 0x28
	}
	if m.Message != nil {
		{
			size, err := m.Message.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessaging(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.DeduplicationId != 0 {
		i = encodeVarintMessaging(dAtA, i, uint64(m.DeduplicationId))
		i--
		dAtA[i] = 0x18
	}
	if m.Peer != nil {
		{
			size, err := m.Peer.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessaging(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RequestUpdateMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestUpdateMessage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RequestUpdateMessage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.LastEditedAt != 0 {
		i = encodeVarintMessaging(dAtA, i, uint64(m.LastEditedAt))
		i--
		dAtA[i] = 0x20
	}
	if m.UpdatedMessage != nil {
		{
			size, err := m.UpdatedMessage.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessaging(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Mid != nil {
		{
			size, err := m.Mid.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessaging(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}

func (m *RequestMessageReceived) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestMessageReceived) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RequestMessageReceived) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Date != 0 {
		i = encodeVarintMessaging(dAtA, i, uint64(m.Date))
		i--
		dAtA[i] = 0x18
	}
	if m.Peer != nil {
		{
			size, err := m.Peer.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessaging(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RequestMessageRead) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestMessageRead) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RequestMessageRead) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Date != 0 {
		i = encodeVarintMessaging(dAtA, i, uint64(m.Date))
		i--
		dAtA[i] = 0x18
	}
	if m.Peer != nil {
		{
			size, err := m.Peer.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessaging(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RequestDeleteMessageObsolete) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestDeleteMessageObsolete) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RequestDeleteMessageObsolete) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Mids) > 0 {
		for iNdEx := len(m.Mids) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Mids[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMessaging(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	return len(dAtA) - i, nil
}

func (m *RequestDeleteMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestDeleteMessage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RequestDeleteMessage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.DeleteForUserOnly {
		i--
		if m.DeleteForUserOnly {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.MessageId != nil {
		{
			size, err := m.MessageId.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessaging(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Peer != nil {
		{
			size, err := m.Peer.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessaging(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RequestClearChat) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestClearChat) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RequestClearChat) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.LastMessageDate != 0 {
		i = encodeVarintMessaging(dAtA, i, uint64(m.LastMessageDate))
		i--
		dAtA[i] = 0x10
	}
	if m.Peer != nil {
		{
			size, err := m.Peer.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessaging(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RequestDeleteChat) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestDeleteChat) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RequestDeleteChat) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.LastMessageDate != 0 {
		i = encodeVarintMessaging(dAtA, i, uint64(m.LastMessageDate))
		i--
		dAtA[i] = 0x10
	}
	if m.Peer != nil {
		{
			size, err := m.Peer.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessaging(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RequestArchiveChat) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestArchiveChat) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RequestArchiveChat) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Peer != nil {
		{
			size, err := m.Peer.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessaging(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RequestMessageSetReaction) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestMessageSetReaction) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RequestMessageSetReaction) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Mid != nil {
		{
			size, err := m.Mid.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessaging(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if len(m.Code) > 0 {
		i -= len(m.Code)
		copy(dAtA[i:], m.Code)
		i = encodeVarintMessaging(dAtA, i, uint64(len(m.Code)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Peer != nil {
		{
			size, err := m.Peer.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessaging(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RequestMessageRemoveReaction) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestMessageRemoveReaction) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RequestMessageRemoveReaction) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Mid != nil {
		{
			size, err := m.Mid.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessaging(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if len(m.Code) > 0 {
		i -= len(m.Code)
		copy(dAtA[i:], m.Code)
		i = encodeVarintMessaging(dAtA, i, uint64(len(m.Code)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Peer != nil {
		{
			size, err := m.Peer.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessaging(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ResponseReactionsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResponseReactionsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ResponseReactionsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Reactions) > 0 {
		for iNdEx := len(m.Reactions) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Reactions[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMessaging(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.State) > 0 {
		i -= len(m.State)
		copy(dAtA[i:], m.State)
		i = encodeVarintMessaging(dAtA, i, uint64(len(m.State)))
		i--
		dAtA[i] = 0x12
	}
	if m.Seq != 0 {
		i = encodeVarintMessaging(dAtA, i, uint64(m.Seq))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ResponseSendMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResponseSendMessage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ResponseSendMessage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Clock != 0 {
		i = encodeVarintMessaging(dAtA, i, uint64(m.Clock))
		i--
		dAtA[i] = 0x28
	}
	if m.CreatorUserId != 0 {
		i = encodeVarintMessaging(dAtA, i, uint64(m.CreatorUserId))
		i--
		dAtA[i] = 0x20
	}
	if m.PreviousMessageId != nil {
		{
			size, err := m.PreviousMessageId.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessaging(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.MessageDate != 0 {
		i = encodeVarintMessaging(dAtA, i, uint64(m.MessageDate))
		i--
		dAtA[i] = 0x10
	}
	if m.MessageId != nil {
		{
			size, err := m.MessageId.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessaging(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UpdateMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateMessage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateMessage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.PrevEditInPeerAt != nil {
		{
			size, err := m.PrevEditInPeerAt.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessaging(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x8a
	}
	if m.ModifiedAt != 0 {
		i = encodeVarintMessaging(dAtA, i, uint64(m.ModifiedAt))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x80
	}
	if m.PrevMessageDate != nil {
		{
			size, err := m.PrevMessageDate.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessaging(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x7a
	}
	if m.RandomId != 0 {
		i = encodeVarintMessaging(dAtA, i, uint64(m.RandomId))
		i--
		dAtA[i] = 0x70
	}
	if m.MyReadDate != nil {
		{
			size, err := m.MyReadDate.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessaging(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6a
	}
	if m.Counter != nil {
		{
			size, err := m.Counter.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessaging(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x62
	}
	if m.PreviousMid != nil {
		{
			size, err := m.PreviousMid.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessaging(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5a
	}
	if m.Attach != nil {
		{
			size := m.Attach.Size()
			i -= size
			if _, err := m.Attach.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.Mid != nil {
		{
			size, err := m.Mid.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessaging(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	if m.Attributes != nil {
		{
			size, err := m.Attributes.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessaging(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if m.Message != nil {
		{
			size, err := m.Message.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessaging(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.Date != 0 {
		i = encodeVarintMessaging(dAtA, i, uint64(m.Date))
		i--
		dAtA[i] = 0x18
	}
	if m.SenderUid != 0 {
		i = encodeVarintMessaging(dAtA, i, uint64(m.SenderUid))
		i--
		dAtA[i] = 0x10
	}
	if m.Peer != nil {
		{
			size, err := m.Peer.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessaging(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UpdateMessage_Forward) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateMessage_Forward) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Forward != nil {
		{
			size, err := m.Forward.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessaging(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	return len(dAtA) - i, nil
}
func (m *UpdateMessage_Reply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateMessage_Reply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Reply != nil {
		{
			size, err := m.Reply.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessaging(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x52
	}
	return len(dAtA) - i, nil
}
func (m *UpdateMessageContentChanged) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateMessageContentChanged) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateMessageContentChanged) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.PrevEditInPeerAt != 0 {
		i = encodeVarintMessaging(dAtA, i, uint64(m.PrevEditInPeerAt))
		i--
		dAtA[i] = 0x30
	}
	if m.EditedAt != 0 {
		i = encodeVarintMessaging(dAtA, i, uint64(m.EditedAt))
		i--
		dAtA[i] = 0x28
	}
	if m.Mid != nil {
		{
			size, err := m.Mid.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessaging(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.Message != nil {
		{
			size, err := m.Message.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessaging(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Peer != nil {
		{
			size, err := m.Peer.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessaging(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UpdateMessageSent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateMessageSent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateMessageSent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Attach != nil {
		{
			size := m.Attach.Size()
			i -= size
			if _, err := m.Attach.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.MyReadDate != nil {
		{
			size, err := m.MyReadDate.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessaging(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if m.UnreadCounter != nil {
		{
			size, err := m.UnreadCounter.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessaging(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if m.PrevMid != nil {
		{
			size, err := m.PrevMid.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessaging(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.Mid != nil {
		{
			size, err := m.Mid.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessaging(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.Date != 0 {
		i = encodeVarintMessaging(dAtA, i, uint64(m.Date))
		i--
		dAtA[i] = 0x18
	}
	if m.Rid != 0 {
		i = encodeVarintMessaging(dAtA, i, uint64(m.Rid))
		i--
		dAtA[i] = 0x10
	}
	if m.Peer != nil {
		{
			size, err := m.Peer.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessaging(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UpdateMessageSent_Forward) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateMessageSent_Forward) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Forward != nil {
		{
			size, err := m.Forward.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessaging(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	return len(dAtA) - i, nil
}
func (m *UpdateMessageSent_Reply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateMessageSent_Reply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Reply != nil {
		{
			size, err := m.Reply.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessaging(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	return len(dAtA) - i, nil
}
func (m *UpdateMessageReceived) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateMessageReceived) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateMessageReceived) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ReceivedDate != 0 {
		i = encodeVarintMessaging(dAtA, i, uint64(m.ReceivedDate))
		i--
		dAtA[i] = 0x18
	}
	if m.StartDate != 0 {
		i = encodeVarintMessaging(dAtA, i, uint64(m.StartDate))
		i--
		dAtA[i] = 0x10
	}
	if m.Peer != nil {
		{
			size, err := m.Peer.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessaging(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UpdateMessageRead) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateMessageRead) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateMessageRead) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ReadDate != 0 {
		i = encodeVarintMessaging(dAtA, i, uint64(m.ReadDate))
		i--
		dAtA[i] = 0x18
	}
	if m.StartDate != 0 {
		i = encodeVarintMessaging(dAtA, i, uint64(m.StartDate))
		i--
		dAtA[i] = 0x10
	}
	if m.Peer != nil {
		{
			size, err := m.Peer.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessaging(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UpdateMessageReadByMe) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateMessageReadByMe) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateMessageReadByMe) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.UnreadCounter != nil {
		{
			size, err := m.UnreadCounter.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessaging(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.StartDate != 0 {
		i = encodeVarintMessaging(dAtA, i, uint64(m.StartDate))
		i--
		dAtA[i] = 0x10
	}
	if m.Peer != nil {
		{
			size, err := m.Peer.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessaging(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UpdateMessageDelete) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateMessageDelete) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateMessageDelete) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ActionDate != 0 {
		i = encodeVarintMessaging(dAtA, i, uint64(m.ActionDate))
		i--
		dAtA[i] = 0x28
	}
	if m.Counter != nil {
		{
			size, err := m.Counter.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessaging(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if len(m.Mids) > 0 {
		for iNdEx := len(m.Mids) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Mids[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMessaging(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.Peer != nil {
		{
			size, err := m.Peer.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessaging(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UpdateChatClear) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateChatClear) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateChatClear) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ActionDate != 0 {
		i = encodeVarintMessaging(dAtA, i, uint64(m.ActionDate))
		i--
		dAtA[i] = 0x10
	}
	if m.Peer != nil {
		{
			size, err := m.Peer.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessaging(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UpdateChatDelete) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateChatDelete) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateChatDelete) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ActionDate != 0 {
		i = encodeVarintMessaging(dAtA, i, uint64(m.ActionDate))
		i--
		dAtA[i] = 0x10
	}
	if m.Peer != nil {
		{
			size, err := m.Peer.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessaging(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UpdateChatArchive) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateChatArchive) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateChatArchive) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Peer != nil {
		{
			size, err := m.Peer.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessaging(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UpdateChatGroupsChanged) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateChatGroupsChanged) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateChatGroupsChanged) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Dialogs) > 0 {
		for iNdEx := len(m.Dialogs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Dialogs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMessaging(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *UpdateReactionsUpdate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateReactionsUpdate) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateReactionsUpdate) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Mid != nil {
		{
			size, err := m.Mid.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessaging(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if len(m.Reactions) > 0 {
		for iNdEx := len(m.Reactions) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Reactions[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMessaging(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.Peer != nil {
		{
			size, err := m.Peer.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessaging(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UpdateMessageRejectedByHook) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateMessageRejectedByHook) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateMessageRejectedByHook) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Reason != nil {
		{
			size, err := m.Reason.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessaging(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if len(m.HookId) > 0 {
		i -= len(m.HookId)
		copy(dAtA[i:], m.HookId)
		i = encodeVarintMessaging(dAtA, i, uint64(len(m.HookId)))
		i--
		dAtA[i] = 0x22
	}
	if m.Date != 0 {
		i = encodeVarintMessaging(dAtA, i, uint64(m.Date))
		i--
		dAtA[i] = 0x18
	}
	if m.Rid != 0 {
		i = encodeVarintMessaging(dAtA, i, uint64(m.Rid))
		i--
		dAtA[i] = 0x10
	}
	if m.Peer != nil {
		{
			size, err := m.Peer.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessaging(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UpdateMessageEditRejectedByHook) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateMessageEditRejectedByHook) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateMessageEditRejectedByHook) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Reason != nil {
		{
			size, err := m.Reason.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessaging(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if len(m.HookId) > 0 {
		i -= len(m.HookId)
		copy(dAtA[i:], m.HookId)
		i = encodeVarintMessaging(dAtA, i, uint64(len(m.HookId)))
		i--
		dAtA[i] = 0x22
	}
	if m.Date != 0 {
		i = encodeVarintMessaging(dAtA, i, uint64(m.Date))
		i--
		dAtA[i] = 0x18
	}
	if m.Mid != nil {
		{
			size, err := m.Mid.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessaging(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Peer != nil {
		{
			size, err := m.Peer.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessaging(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UpdateThreadCreated) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateThreadCreated) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateThreadCreated) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.StartMessage != nil {
		{
			size, err := m.StartMessage.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessaging(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Peer != nil {
		{
			size, err := m.Peer.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessaging(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UpdateThreadLifted) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateThreadLifted) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateThreadLifted) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Peer != nil {
		{
			size, err := m.Peer.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessaging(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ReferencedMessages) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReferencedMessages) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReferencedMessages) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Mids) > 0 {
		for iNdEx := len(m.Mids) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Mids[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMessaging(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *HistoryMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HistoryMessage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HistoryMessage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.RandomId != 0 {
		i = encodeVarintMessaging(dAtA, i, uint64(m.RandomId))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x90
	}
	if m.PrevMid != nil {
		{
			size, err := m.PrevMid.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessaging(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x8a
	}
	if m.EditedAt != nil {
		{
			size, err := m.EditedAt.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessaging(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x82
	}
	if m.SenderPeer != nil {
		{
			size, err := m.SenderPeer.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessaging(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x7a
	}
	if m.Attach != nil {
		{
			size := m.Attach.Size()
			i -= size
			if _, err := m.Attach.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.HostPeer != nil {
		{
			size, err := m.HostPeer.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessaging(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x62
	}
	if m.Mid != nil {
		{
			size, err := m.Mid.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessaging(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x52
	}
	if m.Attribute != nil {
		{
			size, err := m.Attribute.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessaging(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	if len(m.Reactions) > 0 {
		for iNdEx := len(m.Reactions) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Reactions[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMessaging(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3a
		}
	}
	if m.State != 0 {
		i = encodeVarintMessaging(dAtA, i, uint64(m.State))
		i--
		dAtA[i] = 0x30
	}
	if m.Message != nil {
		{
			size, err := m.Message.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessaging(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.Date != 0 {
		i = encodeVarintMessaging(dAtA, i, uint64(m.Date))
		i--
		dAtA[i] = 0x18
	}
	if m.SenderUid != 0 {
		i = encodeVarintMessaging(dAtA, i, uint64(m.SenderUid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *HistoryMessage_Forward) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HistoryMessage_Forward) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Forward != nil {
		{
			size, err := m.Forward.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessaging(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6a
	}
	return len(dAtA) - i, nil
}
func (m *HistoryMessage_Reply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HistoryMessage_Reply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Reply != nil {
		{
			size, err := m.Reply.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessaging(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x72
	}
	return len(dAtA) - i, nil
}
func (m *RequestLoadHistory) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestLoadHistory) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RequestLoadHistory) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Optimizations) > 0 {
		dAtA167 := make([]byte, len(m.Optimizations)*10)
		var j166 int
		for _, num := range m.Optimizations {
			for num >= 1<<7 {
				dAtA167[j166] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j166++
			}
			dAtA167[j166] = uint8(num)
			j166++
		}
		i -= j166
		copy(dAtA[i:], dAtA167[:j166])
		i = encodeVarintMessaging(dAtA, i, uint64(j166))
		i--
		dAtA[i] = 0x32
	}
	if m.LoadMode != 0 {
		i = encodeVarintMessaging(dAtA, i, uint64(m.LoadMode))
		i--
		dAtA[i] = 0x28
	}
	if m.Limit != 0 {
		i = encodeVarintMessaging(dAtA, i, uint64(m.Limit))
		i--
		dAtA[i] = 0x20
	}
	if m.Date != 0 {
		i = encodeVarintMessaging(dAtA, i, uint64(m.Date))
		i--
		dAtA[i] = 0x18
	}
	if m.Peer != nil {
		{
			size, err := m.Peer.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessaging(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ResponseLoadHistory) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResponseLoadHistory) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ResponseLoadHistory) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CountForeignAfterLastReturned != 0 {
		i = encodeVarintMessaging(dAtA, i, uint64(m.CountForeignAfterLastReturned))
		i--
		dAtA[i] = 0x50
	}
	if m.LastConversationMessageDate != nil {
		{
			size, err := m.LastConversationMessageDate.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessaging(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	if m.CounterDate != 0 {
		i = encodeVarintMessaging(dAtA, i, uint64(m.CounterDate))
		i--
		dAtA[i] = 0x40
	}
	if m.Counter != nil {
		{
			size, err := m.Counter.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessaging(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if len(m.GroupPeers) > 0 {
		for iNdEx := len(m.GroupPeers) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.GroupPeers[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMessaging(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.UserPeers) > 0 {
		for iNdEx := len(m.UserPeers) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.UserPeers[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMessaging(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.History) > 0 {
		for iNdEx := len(m.History) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.History[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMessaging(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *RequestHistoryDifference) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestHistoryDifference) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RequestHistoryDifference) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Clock != 0 {
		i = encodeVarintMessaging(dAtA, i, uint64(m.Clock))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ResponseHistoryDifference) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResponseHistoryDifference) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ResponseHistoryDifference) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Clock != 0 {
		i = encodeVarintMessaging(dAtA, i, uint64(m.Clock))
		i--
		dAtA[i] = 0x18
	}
	if m.FromClock != 0 {
		i = encodeVarintMessaging(dAtA, i, uint64(m.FromClock))
		i--
		dAtA[i] = 0x10
	}
	if len(m.History) > 0 {
		for iNdEx := len(m.History) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.History[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMessaging(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *Dialog) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Dialog) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Dialog) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.LastReactionAt != 0 {
		i = encodeVarintMessaging(dAtA, i, uint64(m.LastReactionAt))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x90
	}
	if m.LastRead != 0 {
		i = encodeVarintMessaging(dAtA, i, uint64(m.LastRead))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x88
	}
	if m.LastReceive != 0 {
		i = encodeVarintMessaging(dAtA, i, uint64(m.LastReceive))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x80
	}
	if m.HistoryMessage != nil {
		{
			size, err := m.HistoryMessage.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessaging(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x7a
	}
	if m.PinnedMessages != nil {
		{
			size, err := m.PinnedMessages.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessaging(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x72
	}
	if m.IsFavourite != nil {
		{
			size, err := m.IsFavourite.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessaging(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6a
	}
	if m.Mid != nil {
		{
			size, err := m.Mid.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessaging(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x62
	}
	if m.Attributes != nil {
		{
			size, err := m.Attributes.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessaging(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5a
	}
	if m.FirstUnreadDate != 0 {
		i = encodeVarintMessaging(dAtA, i, uint64(m.FirstUnreadDate))
		i--
		dAtA[i] = 0x50
	}
	if m.State != 0 {
		i = encodeVarintMessaging(dAtA, i, uint64(m.State))
		i--
		dAtA[i] = 0x48
	}
	if m.Message != nil {
		{
			size, err := m.Message.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessaging(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	if m.Date != 0 {
		i = encodeVarintMessaging(dAtA, i, uint64(m.Date))
		i--
		dAtA[i] = 0x38
	}
	if m.SenderUid != 0 {
		i = encodeVarintMessaging(dAtA, i, uint64(m.SenderUid))
		i--
		dAtA[i] = 0x28
	}
	if m.SortDate != 0 {
		i = encodeVarintMessaging(dAtA, i, uint64(m.SortDate))
		i--
		dAtA[i] = 0x20
	}
	if m.UnreadCount != 0 {
		i = encodeVarintMessaging(dAtA, i, uint64(m.UnreadCount))
		i--
		dAtA[i] = 0x18
	}
	if m.Peer != nil {
		{
			size, err := m.Peer.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessaging(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RequestLoadDialogs) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestLoadDialogs) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RequestLoadDialogs) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PeersToLoad) > 0 {
		for iNdEx := len(m.PeersToLoad) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.PeersToLoad[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMessaging(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.Filters) > 0 {
		dAtA179 := make([]byte, len(m.Filters)*10)
		var j178 int
		for _, num := range m.Filters {
			for num >= 1<<7 {
				dAtA179[j178] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j178++
			}
			dAtA179[j178] = uint8(num)
			j178++
		}
		i -= j178
		copy(dAtA[i:], dAtA179[:j178])
		i = encodeVarintMessaging(dAtA, i, uint64(j178))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Optimizations) > 0 {
		dAtA181 := make([]byte, len(m.Optimizations)*10)
		var j180 int
		for _, num := range m.Optimizations {
			for num >= 1<<7 {
				dAtA181[j180] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j180++
			}
			dAtA181[j180] = uint8(num)
			j180++
		}
		i -= j180
		copy(dAtA[i:], dAtA181[:j180])
		i = encodeVarintMessaging(dAtA, i, uint64(j180))
		i--
		dAtA[i] = 0x1a
	}
	if m.Limit != 0 {
		i = encodeVarintMessaging(dAtA, i, uint64(m.Limit))
		i--
		dAtA[i] = 0x10
	}
	if m.MinDate != 0 {
		i = encodeVarintMessaging(dAtA, i, uint64(m.MinDate))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ResponseLoadDialogs) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResponseLoadDialogs) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ResponseLoadDialogs) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.GroupPeers) > 0 {
		for iNdEx := len(m.GroupPeers) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.GroupPeers[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMessaging(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.UserPeers) > 0 {
		for iNdEx := len(m.UserPeers) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.UserPeers[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMessaging(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.Dialogs) > 0 {
		for iNdEx := len(m.Dialogs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Dialogs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMessaging(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	return len(dAtA) - i, nil
}

func (m *DialogData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DialogData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DialogData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Clock != 0 {
		i = encodeVarintMessaging(dAtA, i, uint64(m.Clock))
		i--
		dAtA[i] = 0x20
	}
	if m.CreatedAt != 0 {
		i = encodeVarintMessaging(dAtA, i, uint64(m.CreatedAt))
		i--
		dAtA[i] = 0x18
	}
	if m.IsFavourite {
		i--
		if m.IsFavourite {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	return len(dAtA) - i, nil
}

func (m *DialogIndex) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DialogIndex) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DialogIndex) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Data != nil {
		{
			size, err := m.Data.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessaging(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.LastMessageDate != 0 {
		i = encodeVarintMessaging(dAtA, i, uint64(m.LastMessageDate))
		i--
		dAtA[i] = 0x10
	}
	if m.Peer != nil {
		{
			size, err := m.Peer.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessaging(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DialogListEntry) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DialogListEntry) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DialogListEntry) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.LastReactionDate != 0 {
		i = encodeVarintMessaging(dAtA, i, uint64(m.LastReactionDate))
		i--
		dAtA[i] = 0x50
	}
	if m.LastUpdateOfMessageDate != 0 {
		i = encodeVarintMessaging(dAtA, i, uint64(m.LastUpdateOfMessageDate))
		i--
		dAtA[i] = 0x48
	}
	if m.Data != nil {
		{
			size, err := m.Data.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessaging(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	if m.EntryClock != 0 {
		i = encodeVarintMessaging(dAtA, i, uint64(m.EntryClock))
		i--
		dAtA[i] = 0x38
	}
	if m.ReadDate != 0 {
		i = encodeVarintMessaging(dAtA, i, uint64(m.ReadDate))
		i--
		dAtA[i] = 0x30
	}
	if m.ReceiveDate != 0 {
		i = encodeVarintMessaging(dAtA, i, uint64(m.ReceiveDate))
		i--
		dAtA[i] = 0x28
	}
	if m.LastMessageDate != 0 {
		i = encodeVarintMessaging(dAtA, i, uint64(m.LastMessageDate))
		i--
		dAtA[i] = 0x20
	}
	if m.MyReadDate != 0 {
		i = encodeVarintMessaging(dAtA, i, uint64(m.MyReadDate))
		i--
		dAtA[i] = 0x18
	}
	if m.UnreadCount != 0 {
		i = encodeVarintMessaging(dAtA, i, uint64(m.UnreadCount))
		i--
		dAtA[i] = 0x10
	}
	if m.Peer != nil {
		{
			size, err := m.Peer.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessaging(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RequestFetchDialogIndex) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestFetchDialogIndex) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RequestFetchDialogIndex) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *ResponseFetchDialogIndex) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResponseFetchDialogIndex) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ResponseFetchDialogIndex) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.DialogIndices) > 0 {
		for iNdEx := len(m.DialogIndices) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.DialogIndices[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMessaging(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *RequestDialogListDifference) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestDialogListDifference) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RequestDialogListDifference) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.FromClock != 0 {
		i = encodeVarintMessaging(dAtA, i, uint64(m.FromClock))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ResponseDialogListDifference) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResponseDialogListDifference) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ResponseDialogListDifference) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.PrevClock != 0 {
		i = encodeVarintMessaging(dAtA, i, uint64(m.PrevClock))
		i--
		dAtA[i] = 0x18
	}
	if m.Clock != 0 {
		i = encodeVarintMessaging(dAtA, i, uint64(m.Clock))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Entries) > 0 {
		for iNdEx := len(m.Entries) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Entries[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMessaging(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *RequestGetLastConversationMessages) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestGetLastConversationMessages) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RequestGetLastConversationMessages) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Peers) > 0 {
		for iNdEx := len(m.Peers) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Peers[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMessaging(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ResponseGetLastConversationMessages) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResponseGetLastConversationMessages) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ResponseGetLastConversationMessages) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Messages) > 0 {
		for iNdEx := len(m.Messages) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Messages[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMessaging(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ResponseGetLastConversationMessages_Pair) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResponseGetLastConversationMessages_Pair) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ResponseGetLastConversationMessages_Pair) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Message != nil {
		{
			size, err := m.Message.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessaging(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Peer != nil {
		{
			size, err := m.Peer.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessaging(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RequestLoadArchived) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestLoadArchived) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RequestLoadArchived) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Optimizations) > 0 {
		dAtA189 := make([]byte, len(m.Optimizations)*10)
		var j188 int
		for _, num := range m.Optimizations {
			for num >= 1<<7 {
				dAtA189[j188] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j188++
			}
			dAtA189[j188] = uint8(num)
			j188++
		}
		i -= j188
		copy(dAtA[i:], dAtA189[:j188])
		i = encodeVarintMessaging(dAtA, i, uint64(j188))
		i--
		dAtA[i] = 0x1a
	}
	if m.Limit != 0 {
		i = encodeVarintMessaging(dAtA, i, uint64(m.Limit))
		i--
		dAtA[i] = 0x10
	}
	if m.NextOffset != nil {
		{
			size, err := m.NextOffset.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessaging(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ResponseLoadArchived) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResponseLoadArchived) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ResponseLoadArchived) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.GroupPeers) > 0 {
		for iNdEx := len(m.GroupPeers) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.GroupPeers[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMessaging(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.UserPeers) > 0 {
		for iNdEx := len(m.UserPeers) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.UserPeers[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMessaging(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if m.NextOffset != nil {
		{
			size, err := m.NextOffset.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessaging(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if len(m.Dialogs) > 0 {
		for iNdEx := len(m.Dialogs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Dialogs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMessaging(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	return len(dAtA) - i, nil
}

func (m *RequestLoadGroupedDialogs) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestLoadGroupedDialogs) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RequestLoadGroupedDialogs) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Optimizations) > 0 {
		dAtA193 := make([]byte, len(m.Optimizations)*10)
		var j192 int
		for _, num := range m.Optimizations {
			for num >= 1<<7 {
				dAtA193[j192] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j192++
			}
			dAtA193[j192] = uint8(num)
			j192++
		}
		i -= j192
		copy(dAtA[i:], dAtA193[:j192])
		i = encodeVarintMessaging(dAtA, i, uint64(j192))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ResponseLoadGroupedDialogs) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResponseLoadGroupedDialogs) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ResponseLoadGroupedDialogs) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.GroupPeers) > 0 {
		for iNdEx := len(m.GroupPeers) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.GroupPeers[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMessaging(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3a
		}
	}
	if len(m.UserPeers) > 0 {
		for iNdEx := len(m.UserPeers) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.UserPeers[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMessaging(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	if m.ShowInvite != nil {
		{
			size, err := m.ShowInvite.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessaging(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.ShowArchived != nil {
		{
			size, err := m.ShowArchived.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessaging(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if len(m.Dialogs) > 0 {
		for iNdEx := len(m.Dialogs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Dialogs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMessaging(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ResponseDialogsOrder) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResponseDialogsOrder) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ResponseDialogsOrder) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Groups) > 0 {
		for iNdEx := len(m.Groups) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Groups[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMessaging(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.State) > 0 {
		i -= len(m.State)
		copy(dAtA[i:], m.State)
		i = encodeVarintMessaging(dAtA, i, uint64(len(m.State)))
		i--
		dAtA[i] = 0x12
	}
	if m.Seq != 0 {
		i = encodeVarintMessaging(dAtA, i, uint64(m.Seq))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *RequestHideDialog) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestHideDialog) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RequestHideDialog) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Peer != nil {
		{
			size, err := m.Peer.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessaging(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RequestShowDialog) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestShowDialog) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RequestShowDialog) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Peer != nil {
		{
			size, err := m.Peer.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessaging(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RequestFavouriteDialog) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestFavouriteDialog) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RequestFavouriteDialog) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Peer != nil {
		{
			size, err := m.Peer.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessaging(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RequestUnfavouriteDialog) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestUnfavouriteDialog) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RequestUnfavouriteDialog) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Peer != nil {
		{
			size, err := m.Peer.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessaging(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UpdateDialogFavouriteChanged) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateDialogFavouriteChanged) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateDialogFavouriteChanged) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.IsFavourite != nil {
		{
			size, err := m.IsFavourite.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessaging(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Peer != nil {
		{
			size, err := m.Peer.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessaging(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RequestNotifyDialogOpened) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestNotifyDialogOpened) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RequestNotifyDialogOpened) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Peer != nil {
		{
			size, err := m.Peer.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessaging(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PinnedMessages) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PinnedMessages) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PinnedMessages) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Mids) > 0 {
		for iNdEx := len(m.Mids) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Mids[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMessaging(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *RequestPinMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestPinMessage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RequestPinMessage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.LastPinDate != 0 {
		i = encodeVarintMessaging(dAtA, i, uint64(m.LastPinDate))
		i--
		dAtA[i] = 0x18
	}
	if m.Mid != nil {
		{
			size, err := m.Mid.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessaging(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Peer != nil {
		{
			size, err := m.Peer.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessaging(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RequestUnpinMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestUnpinMessage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RequestUnpinMessage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.LastPinDate != 0 {
		i = encodeVarintMessaging(dAtA, i, uint64(m.LastPinDate))
		i--
		dAtA[i] = 0x18
	}
	if m.Mid != nil {
		{
			size, err := m.Mid.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessaging(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Peer != nil {
		{
			size, err := m.Peer.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessaging(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UpdatePinnedMessagesChanged) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdatePinnedMessagesChanged) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdatePinnedMessagesChanged) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ActionDate != 0 {
		i = encodeVarintMessaging(dAtA, i, uint64(m.ActionDate))
		i--
		dAtA[i] = 0x18
	}
	if m.PinnedMessages != nil {
		{
			size, err := m.PinnedMessages.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessaging(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Peer != nil {
		{
			size, err := m.Peer.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessaging(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RequestGetUpdatedMessages) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestGetUpdatedMessages) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RequestGetUpdatedMessages) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.FromClock != 0 {
		i = encodeVarintMessaging(dAtA, i, uint64(m.FromClock))
		i--
		dAtA[i] = 0x10
	}
	if m.Peer != nil {
		{
			size, err := m.Peer.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessaging(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ResponseGetUpdatedMessages) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResponseGetUpdatedMessages) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ResponseGetUpdatedMessages) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.NextAvailable {
		i--
		if m.NextAvailable {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.PeerClock != 0 {
		i = encodeVarintMessaging(dAtA, i, uint64(m.PeerClock))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Messages) > 0 {
		for iNdEx := len(m.Messages) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Messages[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMessaging(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ResponseGetUpdatedMessages_UpdatedMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResponseGetUpdatedMessages_UpdatedMessage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ResponseGetUpdatedMessages_UpdatedMessage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ModifiedAt != 0 {
		i = encodeVarintMessaging(dAtA, i, uint64(m.ModifiedAt))
		i--
		dAtA[i] = 0x18
	}
	if m.Message != nil {
		{
			size, err := m.Message.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessaging(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Mid != nil {
		{
			size, err := m.Mid.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessaging(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MessageStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MessageStatus) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MessageStatus) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.UserId != 0 {
		i = encodeVarintMessaging(dAtA, i, uint64(m.UserId))
		i--
		dAtA[i] = 0x10
	}
	if m.Clock != 0 {
		i = encodeVarintMessaging(dAtA, i, uint64(m.Clock))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *RequestMessageReads) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestMessageReads) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RequestMessageReads) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TimestampFrom != 0 {
		i = encodeVarintMessaging(dAtA, i, uint64(m.TimestampFrom))
		i--
		dAtA[i] = 0x18
	}
	if m.Limit != 0 {
		i = encodeVarintMessaging(dAtA, i, uint64(m.Limit))
		i--
		dAtA[i] = 0x10
	}
	if m.Mid != nil {
		{
			size, err := m.Mid.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessaging(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RequestMessageReceives) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestMessageReceives) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RequestMessageReceives) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TimestampFrom != 0 {
		i = encodeVarintMessaging(dAtA, i, uint64(m.TimestampFrom))
		i--
		dAtA[i] = 0x18
	}
	if m.Limit != 0 {
		i = encodeVarintMessaging(dAtA, i, uint64(m.Limit))
		i--
		dAtA[i] = 0x10
	}
	if m.Mid != nil {
		{
			size, err := m.Mid.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessaging(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ResponseMessageReads) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResponseMessageReads) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ResponseMessageReads) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TimestampTill != 0 {
		i = encodeVarintMessaging(dAtA, i, uint64(m.TimestampTill))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Status) > 0 {
		for iNdEx := len(m.Status) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Status[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMessaging(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ResponseMessageReceives) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResponseMessageReceives) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ResponseMessageReceives) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TimestampTill != 0 {
		i = encodeVarintMessaging(dAtA, i, uint64(m.TimestampTill))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Status) > 0 {
		for iNdEx := len(m.Status) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Status[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMessaging(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintMessaging(dAtA []byte, offset int, v uint64) int {
	offset -= sovMessaging(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MessageAttributes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IsMentioned != nil {
		l = m.IsMentioned.Size()
		n += 1 + l + sovMessaging(uint64(l))
	}
	if m.IsHighlighted != nil {
		l = m.IsHighlighted.Size()
		n += 1 + l + sovMessaging(uint64(l))
	}
	if m.IsNotified != nil {
		l = m.IsNotified.Size()
		n += 1 + l + sovMessaging(uint64(l))
	}
	if m.IsOnlyForYou != nil {
		l = m.IsOnlyForYou.Size()
		n += 1 + l + sovMessaging(uint64(l))
	}
	return n
}

func (m *QuotedMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MessageId != 0 {
		n += 1 + sovMessaging(uint64(m.MessageId))
	}
	if m.PublicGroupId != 0 {
		n += 1 + sovMessaging(uint64(m.PublicGroupId))
	}
	if m.SenderUserId != 0 {
		n += 1 + sovMessaging(uint64(m.SenderUserId))
	}
	if m.MessageDate != 0 {
		n += 1 + sovMessaging(uint64(m.MessageDate))
	}
	if m.QuotedMessageContent != nil {
		l = m.QuotedMessageContent.Size()
		n += 1 + l + sovMessaging(uint64(l))
	}
	return n
}

func (m *MessageMedia) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Webpage != nil {
		l = m.Webpage.Size()
		n += 1 + l + sovMessaging(uint64(l))
	}
	if m.Image != nil {
		l = m.Image.Size()
		n += 1 + l + sovMessaging(uint64(l))
	}
	if m.Audio != nil {
		l = m.Audio.Size()
		n += 1 + l + sovMessaging(uint64(l))
	}
	if len(m.Actions) > 0 {
		for _, e := range m.Actions {
			l = e.Size()
			n += 1 + l + sovMessaging(uint64(l))
		}
	}
	return n
}

func (m *WebpageMedia) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Url != nil {
		l = m.Url.Size()
		n += 1 + l + sovMessaging(uint64(l))
	}
	if m.Title != nil {
		l = m.Title.Size()
		n += 1 + l + sovMessaging(uint64(l))
	}
	if m.Description != nil {
		l = m.Description.Size()
		n += 1 + l + sovMessaging(uint64(l))
	}
	if m.Image != nil {
		l = m.Image.Size()
		n += 1 + l + sovMessaging(uint64(l))
	}
	return n
}

func (m *ImageMedia) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Image != nil {
		l = m.Image.Size()
		n += 1 + l + sovMessaging(uint64(l))
	}
	return n
}

func (m *AudioMedia) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Audio != nil {
		l = m.Audio.Size()
		n += 1 + l + sovMessaging(uint64(l))
	}
	return n
}

func (m *InteractiveMediaWidget) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Body != nil {
		n += m.Body.Size()
	}
	return n
}

func (m *InteractiveMediaWidget_InteractiveMediaButton) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.InteractiveMediaButton != nil {
		l = m.InteractiveMediaButton.Size()
		n += 1 + l + sovMessaging(uint64(l))
	}
	return n
}
func (m *InteractiveMediaWidget_InteractiveMediaSelect) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.InteractiveMediaSelect != nil {
		l = m.InteractiveMediaSelect.Size()
		n += 1 + l + sovMessaging(uint64(l))
	}
	return n
}
func (m *InteractiveMediaButton) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovMessaging(uint64(l))
	}
	if m.Label != nil {
		l = m.Label.Size()
		n += 1 + l + sovMessaging(uint64(l))
	}
	return n
}

func (m *InteractiveMediaSelect) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Options) > 0 {
		for _, e := range m.Options {
			l = e.Size()
			n += 1 + l + sovMessaging(uint64(l))
		}
	}
	if m.Label != nil {
		l = m.Label.Size()
		n += 1 + l + sovMessaging(uint64(l))
	}
	if m.DefaultValue != nil {
		l = m.DefaultValue.Size()
		n += 1 + l + sovMessaging(uint64(l))
	}
	return n
}

func (m *InteractiveMediaSelectOption) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovMessaging(uint64(l))
	}
	l = len(m.Label)
	if l > 0 {
		n += 1 + l + sovMessaging(uint64(l))
	}
	return n
}

func (m *InteractiveMedia) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovMessaging(uint64(l))
	}
	if m.Widget != nil {
		l = m.Widget.Size()
		n += 1 + l + sovMessaging(uint64(l))
	}
	if m.Style != 0 {
		n += 1 + sovMessaging(uint64(m.Style))
	}
	if m.Confirm != nil {
		l = m.Confirm.Size()
		n += 1 + l + sovMessaging(uint64(l))
	}
	return n
}

func (m *InteractiveMediaTranslation) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovMessaging(uint64(l))
	}
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovMessaging(uint64(l))
	}
	return n
}

func (m *InteractiveMediaTranslationGroup) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Language)
	if l > 0 {
		n += 1 + l + sovMessaging(uint64(l))
	}
	if len(m.Messages) > 0 {
		for _, e := range m.Messages {
			l = e.Size()
			n += 1 + l + sovMessaging(uint64(l))
		}
	}
	return n
}

func (m *InteractiveMediaGroup) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Actions) > 0 {
		for _, e := range m.Actions {
			l = e.Size()
			n += 1 + l + sovMessaging(uint64(l))
		}
	}
	if m.Title != nil {
		l = m.Title.Size()
		n += 1 + l + sovMessaging(uint64(l))
	}
	if m.Description != nil {
		l = m.Description.Size()
		n += 1 + l + sovMessaging(uint64(l))
	}
	if len(m.Translations) > 0 {
		for _, e := range m.Translations {
			l = e.Size()
			n += 1 + l + sovMessaging(uint64(l))
		}
	}
	return n
}

func (m *InteractiveMediaConfirm) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Text != nil {
		l = m.Text.Size()
		n += 1 + l + sovMessaging(uint64(l))
	}
	if m.Title != nil {
		l = m.Title.Size()
		n += 1 + l + sovMessaging(uint64(l))
	}
	if m.Ok != nil {
		l = m.Ok.Size()
		n += 1 + l + sovMessaging(uint64(l))
	}
	if m.Dismiss != nil {
		l = m.Dismiss.Size()
		n += 1 + l + sovMessaging(uint64(l))
	}
	return n
}

func (m *UpdateInteractiveMediaEvent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Mid != nil {
		l = m.Mid.Size()
		n += 1 + l + sovMessaging(uint64(l))
	}
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovMessaging(uint64(l))
	}
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovMessaging(uint64(l))
	}
	if m.Uid != 0 {
		n += 1 + sovMessaging(uint64(m.Uid))
	}
	return n
}

func (m *RequestDoInteractiveMediaAction) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Mid != nil {
		l = m.Mid.Size()
		n += 1 + l + sovMessaging(uint64(l))
	}
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovMessaging(uint64(l))
	}
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovMessaging(uint64(l))
	}
	return n
}

func (m *MessageContent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Body != nil {
		n += m.Body.Size()
	}
	return n
}

func (m *MessageContent_TextMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TextMessage != nil {
		l = m.TextMessage.Size()
		n += 1 + l + sovMessaging(uint64(l))
	}
	return n
}
func (m *MessageContent_ServiceMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ServiceMessage != nil {
		l = m.ServiceMessage.Size()
		n += 1 + l + sovMessaging(uint64(l))
	}
	return n
}
func (m *MessageContent_DocumentMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DocumentMessage != nil {
		l = m.DocumentMessage.Size()
		n += 1 + l + sovMessaging(uint64(l))
	}
	return n
}
func (m *MessageContent_JsonMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.JsonMessage != nil {
		l = m.JsonMessage.Size()
		n += 1 + l + sovMessaging(uint64(l))
	}
	return n
}
func (m *MessageContent_UnsupportedMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UnsupportedMessage != nil {
		l = m.UnsupportedMessage.Size()
		n += 1 + l + sovMessaging(uint64(l))
	}
	return n
}
func (m *MessageContent_StickerMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.StickerMessage != nil {
		l = m.StickerMessage.Size()
		n += 1 + l + sovMessaging(uint64(l))
	}
	return n
}
func (m *MessageContent_BinaryMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BinaryMessage != nil {
		l = m.BinaryMessage.Size()
		n += 1 + l + sovMessaging(uint64(l))
	}
	return n
}
func (m *MessageContent_EmptyMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EmptyMessage != nil {
		l = m.EmptyMessage.Size()
		n += 1 + l + sovMessaging(uint64(l))
	}
	return n
}
func (m *MessageContent_DeletedMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DeletedMessage != nil {
		l = m.DeletedMessage.Size()
		n += 1 + l + sovMessaging(uint64(l))
	}
	return n
}
func (m *TextMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Text)
	if l > 0 {
		n += 1 + l + sovMessaging(uint64(l))
	}
	if m.Ext != nil {
		l = m.Ext.Size()
		n += 1 + l + sovMessaging(uint64(l))
	}
	if len(m.Media) > 0 {
		for _, e := range m.Media {
			l = e.Size()
			n += 1 + l + sovMessaging(uint64(l))
		}
	}
	if len(m.Extensions) > 0 {
		for _, e := range m.Extensions {
			l = e.Size()
			n += 1 + l + sovMessaging(uint64(l))
		}
	}
	if len(m.Mentions) > 0 {
		for _, e := range m.Mentions {
			l = e.Size()
			n += 1 + l + sovMessaging(uint64(l))
		}
	}
	return n
}

func (m *Mention) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Peer != nil {
		l = m.Peer.Size()
		n += 1 + l + sovMessaging(uint64(l))
	}
	if m.All {
		n += 2
	}
	return n
}

func (m *TextMessageEx) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Body != nil {
		n += m.Body.Size()
	}
	return n
}

func (m *TextMessageEx_TextExMarkdown) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TextExMarkdown != nil {
		l = m.TextExMarkdown.Size()
		n += 1 + l + sovMessaging(uint64(l))
	}
	return n
}
func (m *TextMessageEx_TextModernMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TextModernMessage != nil {
		l = m.TextModernMessage.Size()
		n += 1 + l + sovMessaging(uint64(l))
	}
	return n
}
func (m *TextMessageEx_TextCommand) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TextCommand != nil {
		l = m.TextCommand.Size()
		n += 1 + l + sovMessaging(uint64(l))
	}
	return n
}
func (m *TextExMarkdown) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Markdown)
	if l > 0 {
		n += 1 + l + sovMessaging(uint64(l))
	}
	return n
}

func (m *TextModernMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Text != nil {
		l = m.Text.Size()
		n += 1 + l + sovMessaging(uint64(l))
	}
	if m.SenderNameOverride != nil {
		l = m.SenderNameOverride.Size()
		n += 1 + l + sovMessaging(uint64(l))
	}
	if m.SenderPhotoOverride != nil {
		l = m.SenderPhotoOverride.Size()
		n += 1 + l + sovMessaging(uint64(l))
	}
	if m.Style != nil {
		l = m.Style.Size()
		n += 1 + l + sovMessaging(uint64(l))
	}
	if len(m.Attaches) > 0 {
		for _, e := range m.Attaches {
			l = e.Size()
			n += 1 + l + sovMessaging(uint64(l))
		}
	}
	return n
}

func (m *ParagraphStyle) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ShowParagraph != nil {
		l = m.ShowParagraph.Size()
		n += 1 + l + sovMessaging(uint64(l))
	}
	if m.ParagraphColor != nil {
		l = m.ParagraphColor.Size()
		n += 1 + l + sovMessaging(uint64(l))
	}
	if m.BgColor != nil {
		l = m.BgColor.Size()
		n += 1 + l + sovMessaging(uint64(l))
	}
	return n
}

func (m *TextModernAttach) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Title != nil {
		l = m.Title.Size()
		n += 1 + l + sovMessaging(uint64(l))
	}
	if m.TitleUrl != nil {
		l = m.TitleUrl.Size()
		n += 1 + l + sovMessaging(uint64(l))
	}
	if m.TitleIcon != nil {
		l = m.TitleIcon.Size()
		n += 1 + l + sovMessaging(uint64(l))
	}
	if m.Text != nil {
		l = m.Text.Size()
		n += 1 + l + sovMessaging(uint64(l))
	}
	if m.Style != nil {
		l = m.Style.Size()
		n += 1 + l + sovMessaging(uint64(l))
	}
	if len(m.Fields) > 0 {
		for _, e := range m.Fields {
			l = e.Size()
			n += 1 + l + sovMessaging(uint64(l))
		}
	}
	return n
}

func (m *TextModernField) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovMessaging(uint64(l))
	}
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovMessaging(uint64(l))
	}
	if m.IsShort != nil {
		l = m.IsShort.Size()
		n += 1 + l + sovMessaging(uint64(l))
	}
	return n
}

func (m *TextCommand) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Command)
	if l > 0 {
		n += 1 + l + sovMessaging(uint64(l))
	}
	l = len(m.Args)
	if l > 0 {
		n += 1 + l + sovMessaging(uint64(l))
	}
	return n
}

func (m *ServiceMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Text)
	if l > 0 {
		n += 1 + l + sovMessaging(uint64(l))
	}
	if m.Ext != nil {
		l = m.Ext.Size()
		n += 1 + l + sovMessaging(uint64(l))
	}
	return n
}

func (m *ServiceEx) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Body != nil {
		n += m.Body.Size()
	}
	return n
}

func (m *ServiceEx_UserInvited) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UserInvited != nil {
		l = m.UserInvited.Size()
		n += 1 + l + sovMessaging(uint64(l))
	}
	return n
}
func (m *ServiceEx_UserJoined) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UserJoined != nil {
		l = m.UserJoined.Size()
		n += 1 + l + sovMessaging(uint64(l))
	}
	return n
}
func (m *ServiceEx_UserKicked) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UserKicked != nil {
		l = m.UserKicked.Size()
		n += 1 + l + sovMessaging(uint64(l))
	}
	return n
}
func (m *ServiceEx_UserLeft) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UserLeft != nil {
		l = m.UserLeft.Size()
		n += 1 + l + sovMessaging(uint64(l))
	}
	return n
}
func (m *ServiceEx_GroupCreated) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.GroupCreated != nil {
		l = m.GroupCreated.Size()
		n += 1 + l + sovMessaging(uint64(l))
	}
	return n
}
func (m *ServiceEx_ChangedTitle) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ChangedTitle != nil {
		l = m.ChangedTitle.Size()
		n += 1 + l + sovMessaging(uint64(l))
	}
	return n
}
func (m *ServiceEx_ChangedTopic) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ChangedTopic != nil {
		l = m.ChangedTopic.Size()
		n += 1 + l + sovMessaging(uint64(l))
	}
	return n
}
func (m *ServiceEx_ChangedAbout) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ChangedAbout != nil {
		l = m.ChangedAbout.Size()
		n += 1 + l + sovMessaging(uint64(l))
	}
	return n
}
func (m *ServiceEx_ChangedAvatar) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ChangedAvatar != nil {
		l = m.ChangedAvatar.Size()
		n += 1 + l + sovMessaging(uint64(l))
	}
	return n
}
func (m *ServiceEx_ContactRegistered) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ContactRegistered != nil {
		l = m.ContactRegistered.Size()
		n += 1 + l + sovMessaging(uint64(l))
	}
	return n
}
func (m *ServiceEx_PhoneMissed) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PhoneMissed != nil {
		l = m.PhoneMissed.Size()
		n += 1 + l + sovMessaging(uint64(l))
	}
	return n
}
func (m *ServiceEx_PhoneCall) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PhoneCall != nil {
		l = m.PhoneCall.Size()
		n += 1 + l + sovMessaging(uint64(l))
	}
	return n
}
func (m *ServiceEx_PhoneRejected) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PhoneRejected != nil {
		l = m.PhoneRejected.Size()
		n += 1 + l + sovMessaging(uint64(l))
	}
	return n
}
func (m *ServiceEx_ChatArchived) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ChatArchived != nil {
		l = m.ChatArchived.Size()
		n += 1 + l + sovMessaging(uint64(l))
	}
	return n
}
func (m *ServiceEx_ChatRestored) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ChatRestored != nil {
		l = m.ChatRestored.Size()
		n += 1 + l + sovMessaging(uint64(l))
	}
	return n
}
func (m *ServiceEx_ChangedShortname) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ChangedShortname != nil {
		l = m.ChangedShortname.Size()
		n += 2 + l + sovMessaging(uint64(l))
	}
	return n
}
func (m *ServiceExUserInvited) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.InvitedUid != 0 {
		n += 1 + sovMessaging(uint64(m.InvitedUid))
	}
	return n
}

func (m *ServiceExUserJoined) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.JoinedUserId != 0 {
		n += 1 + sovMessaging(uint64(m.JoinedUserId))
	}
	return n
}

func (m *ServiceExUserKicked) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.KickedUid != 0 {
		n += 1 + sovMessaging(uint64(m.KickedUid))
	}
	return n
}

func (m *ServiceExUserLeft) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.LeftUserId != 0 {
		n += 1 + sovMessaging(uint64(m.LeftUserId))
	}
	return n
}

func (m *ServiceExGroupCreated) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *ServiceExChangedShortname) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Shortname)
	if l > 0 {
		n += 1 + l + sovMessaging(uint64(l))
	}
	return n
}

func (m *ServiceExChangedTitle) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovMessaging(uint64(l))
	}
	return n
}

func (m *ServiceExChangedTopic) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Topic != nil {
		l = m.Topic.Size()
		n += 1 + l + sovMessaging(uint64(l))
	}
	return n
}

func (m *ServiceExChangedAbout) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.About != nil {
		l = m.About.Size()
		n += 1 + l + sovMessaging(uint64(l))
	}
	return n
}

func (m *ServiceExChangedAvatar) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Avatar != nil {
		l = m.Avatar.Size()
		n += 1 + l + sovMessaging(uint64(l))
	}
	return n
}

func (m *ServiceExContactRegistered) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Uid != 0 {
		n += 1 + sovMessaging(uint64(m.Uid))
	}
	return n
}

func (m *ServiceExPhoneMissed) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *ServiceExPhoneCall) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Duration != 0 {
		n += 1 + sovMessaging(uint64(m.Duration))
	}
	return n
}

func (m *ServiceExPhoneRejected) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *ServiceExChatArchived) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *ServiceExChatRestored) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *DocumentMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.FileId != 0 {
		n += 1 + sovMessaging(uint64(m.FileId))
	}
	if m.AccessHash != 0 {
		n += 1 + sovMessaging(uint64(m.AccessHash))
	}
	if m.FileSize != 0 {
		n += 1 + sovMessaging(uint64(m.FileSize))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovMessaging(uint64(l))
	}
	l = len(m.MimeType)
	if l > 0 {
		n += 1 + l + sovMessaging(uint64(l))
	}
	if m.Thumb != nil {
		l = m.Thumb.Size()
		n += 1 + l + sovMessaging(uint64(l))
	}
	if m.Ext != nil {
		l = m.Ext.Size()
		n += 1 + l + sovMessaging(uint64(l))
	}
	return n
}

func (m *DocumentEx) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Body != nil {
		n += m.Body.Size()
	}
	return n
}

func (m *DocumentEx_Photo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Photo != nil {
		l = m.Photo.Size()
		n += 1 + l + sovMessaging(uint64(l))
	}
	return n
}
func (m *DocumentEx_Video) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Video != nil {
		l = m.Video.Size()
		n += 1 + l + sovMessaging(uint64(l))
	}
	return n
}
func (m *DocumentEx_Voice) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Voice != nil {
		l = m.Voice.Size()
		n += 1 + l + sovMessaging(uint64(l))
	}
	return n
}
func (m *DocumentExPhoto) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.W != 0 {
		n += 1 + sovMessaging(uint64(m.W))
	}
	if m.H != 0 {
		n += 1 + sovMessaging(uint64(m.H))
	}
	return n
}

func (m *DocumentExVideo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.W != 0 {
		n += 1 + sovMessaging(uint64(m.W))
	}
	if m.H != 0 {
		n += 1 + sovMessaging(uint64(m.H))
	}
	if m.Duration != 0 {
		n += 1 + sovMessaging(uint64(m.Duration))
	}
	return n
}

func (m *DocumentExVoice) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Duration != 0 {
		n += 1 + sovMessaging(uint64(m.Duration))
	}
	return n
}

func (m *JsonMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RawJson)
	if l > 0 {
		n += 1 + l + sovMessaging(uint64(l))
	}
	return n
}

func (m *UnsupportedMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *StickerMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.StickerId != nil {
		l = m.StickerId.Size()
		n += 1 + l + sovMessaging(uint64(l))
	}
	if m.FastPreview != nil {
		l = m.FastPreview.Size()
		n += 1 + l + sovMessaging(uint64(l))
	}
	if m.Image_512 != nil {
		l = m.Image_512.Size()
		n += 1 + l + sovMessaging(uint64(l))
	}
	if m.Image_256 != nil {
		l = m.Image_256.Size()
		n += 1 + l + sovMessaging(uint64(l))
	}
	if m.StickerCollectionId != nil {
		l = m.StickerCollectionId.Size()
		n += 1 + l + sovMessaging(uint64(l))
	}
	if m.StickerCollectionAccessHash != nil {
		l = m.StickerCollectionAccessHash.Size()
		n += 1 + l + sovMessaging(uint64(l))
	}
	if m.Emoji != nil {
		l = m.Emoji.Size()
		n += 1 + l + sovMessaging(uint64(l))
	}
	if m.AnimatedStickerJson != nil {
		l = m.AnimatedStickerJson.Size()
		n += 1 + l + sovMessaging(uint64(l))
	}
	return n
}

func (m *BinaryMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ContentTag)
	if l > 0 {
		n += 1 + l + sovMessaging(uint64(l))
	}
	l = len(m.Msg)
	if l > 0 {
		n += 1 + l + sovMessaging(uint64(l))
	}
	return n
}

func (m *EmptyMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *DeletedMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IsLocal != nil {
		l = m.IsLocal.Size()
		n += 1 + l + sovMessaging(uint64(l))
	}
	return n
}

func (m *DialogShort) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Peer != nil {
		l = m.Peer.Size()
		n += 1 + l + sovMessaging(uint64(l))
	}
	if m.Counter != 0 {
		n += 1 + sovMessaging(uint64(m.Counter))
	}
	if m.Date != 0 {
		n += 1 + sovMessaging(uint64(m.Date))
	}
	return n
}

func (m *DialogGroup) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovMessaging(uint64(l))
	}
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovMessaging(uint64(l))
	}
	if len(m.Dialogs) > 0 {
		for _, e := range m.Dialogs {
			l = e.Size()
			n += 1 + l + sovMessaging(uint64(l))
		}
	}
	return n
}

func (m *MessageReaction) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Users) > 0 {
		l = 0
		for _, e := range m.Users {
			l += sovMessaging(uint64(e))
		}
		n += 1 + sovMessaging(uint64(l)) + l
	}
	l = len(m.Code)
	if l > 0 {
		n += 1 + l + sovMessaging(uint64(l))
	}
	return n
}

func (m *SearchPredicate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovMessaging(uint64(l))
	}
	if len(m.Values) > 0 {
		for _, s := range m.Values {
			l = len(s)
			n += 1 + l + sovMessaging(uint64(l))
		}
	}
	return n
}

func (m *RequestSendMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Peer != nil {
		l = m.Peer.Size()
		n += 1 + l + sovMessaging(uint64(l))
	}
	if m.DeduplicationId != 0 {
		n += 1 + sovMessaging(uint64(m.DeduplicationId))
	}
	if m.Message != nil {
		l = m.Message.Size()
		n += 1 + l + sovMessaging(uint64(l))
	}
	if m.IsOnlyForUser != 0 {
		n += 1 + sovMessaging(uint64(m.IsOnlyForUser))
	}
	if m.Forward != nil {
		l = m.Forward.Size()
		n += 1 + l + sovMessaging(uint64(l))
	}
	if m.Reply != nil {
		l = m.Reply.Size()
		n += 1 + l + sovMessaging(uint64(l))
	}
	if len(m.Predicates) > 0 {
		for _, e := range m.Predicates {
			l = e.Size()
			n += 1 + l + sovMessaging(uint64(l))
		}
	}
	if len(m.WhiteList) > 0 {
		l = 0
		for _, e := range m.WhiteList {
			l += sovMessaging(uint64(e))
		}
		n += 1 + sovMessaging(uint64(l)) + l
	}
	if len(m.BlackList) > 0 {
		l = 0
		for _, e := range m.BlackList {
			l += sovMessaging(uint64(e))
		}
		n += 1 + sovMessaging(uint64(l)) + l
	}
	return n
}

func (m *RequestUpdateMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Mid != nil {
		l = m.Mid.Size()
		n += 1 + l + sovMessaging(uint64(l))
	}
	if m.UpdatedMessage != nil {
		l = m.UpdatedMessage.Size()
		n += 1 + l + sovMessaging(uint64(l))
	}
	if m.LastEditedAt != 0 {
		n += 1 + sovMessaging(uint64(m.LastEditedAt))
	}
	return n
}

func (m *RequestMessageReceived) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Peer != nil {
		l = m.Peer.Size()
		n += 1 + l + sovMessaging(uint64(l))
	}
	if m.Date != 0 {
		n += 1 + sovMessaging(uint64(m.Date))
	}
	return n
}

func (m *RequestMessageRead) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Peer != nil {
		l = m.Peer.Size()
		n += 1 + l + sovMessaging(uint64(l))
	}
	if m.Date != 0 {
		n += 1 + sovMessaging(uint64(m.Date))
	}
	return n
}

func (m *RequestDeleteMessageObsolete) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Mids) > 0 {
		for _, e := range m.Mids {
			l = e.Size()
			n += 1 + l + sovMessaging(uint64(l))
		}
	}
	return n
}

func (m *RequestDeleteMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Peer != nil {
		l = m.Peer.Size()
		n += 1 + l + sovMessaging(uint64(l))
	}
	if m.MessageId != nil {
		l = m.MessageId.Size()
		n += 1 + l + sovMessaging(uint64(l))
	}
	if m.DeleteForUserOnly {
		n += 2
	}
	return n
}

func (m *RequestClearChat) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Peer != nil {
		l = m.Peer.Size()
		n += 1 + l + sovMessaging(uint64(l))
	}
	if m.LastMessageDate != 0 {
		n += 1 + sovMessaging(uint64(m.LastMessageDate))
	}
	return n
}

func (m *RequestDeleteChat) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Peer != nil {
		l = m.Peer.Size()
		n += 1 + l + sovMessaging(uint64(l))
	}
	if m.LastMessageDate != 0 {
		n += 1 + sovMessaging(uint64(m.LastMessageDate))
	}
	return n
}

func (m *RequestArchiveChat) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Peer != nil {
		l = m.Peer.Size()
		n += 1 + l + sovMessaging(uint64(l))
	}
	return n
}

func (m *RequestMessageSetReaction) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Peer != nil {
		l = m.Peer.Size()
		n += 1 + l + sovMessaging(uint64(l))
	}
	l = len(m.Code)
	if l > 0 {
		n += 1 + l + sovMessaging(uint64(l))
	}
	if m.Mid != nil {
		l = m.Mid.Size()
		n += 1 + l + sovMessaging(uint64(l))
	}
	return n
}

func (m *RequestMessageRemoveReaction) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Peer != nil {
		l = m.Peer.Size()
		n += 1 + l + sovMessaging(uint64(l))
	}
	l = len(m.Code)
	if l > 0 {
		n += 1 + l + sovMessaging(uint64(l))
	}
	if m.Mid != nil {
		l = m.Mid.Size()
		n += 1 + l + sovMessaging(uint64(l))
	}
	return n
}

func (m *ResponseReactionsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Seq != 0 {
		n += 1 + sovMessaging(uint64(m.Seq))
	}
	l = len(m.State)
	if l > 0 {
		n += 1 + l + sovMessaging(uint64(l))
	}
	if len(m.Reactions) > 0 {
		for _, e := range m.Reactions {
			l = e.Size()
			n += 1 + l + sovMessaging(uint64(l))
		}
	}
	return n
}

func (m *ResponseSendMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MessageId != nil {
		l = m.MessageId.Size()
		n += 1 + l + sovMessaging(uint64(l))
	}
	if m.MessageDate != 0 {
		n += 1 + sovMessaging(uint64(m.MessageDate))
	}
	if m.PreviousMessageId != nil {
		l = m.PreviousMessageId.Size()
		n += 1 + l + sovMessaging(uint64(l))
	}
	if m.CreatorUserId != 0 {
		n += 1 + sovMessaging(uint64(m.CreatorUserId))
	}
	if m.Clock != 0 {
		n += 1 + sovMessaging(uint64(m.Clock))
	}
	return n
}

func (m *UpdateMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Peer != nil {
		l = m.Peer.Size()
		n += 1 + l + sovMessaging(uint64(l))
	}
	if m.SenderUid != 0 {
		n += 1 + sovMessaging(uint64(m.SenderUid))
	}
	if m.Date != 0 {
		n += 1 + sovMessaging(uint64(m.Date))
	}
	if m.Message != nil {
		l = m.Message.Size()
		n += 1 + l + sovMessaging(uint64(l))
	}
	if m.Attributes != nil {
		l = m.Attributes.Size()
		n += 1 + l + sovMessaging(uint64(l))
	}
	if m.Mid != nil {
		l = m.Mid.Size()
		n += 1 + l + sovMessaging(uint64(l))
	}
	if m.Attach != nil {
		n += m.Attach.Size()
	}
	if m.PreviousMid != nil {
		l = m.PreviousMid.Size()
		n += 1 + l + sovMessaging(uint64(l))
	}
	if m.Counter != nil {
		l = m.Counter.Size()
		n += 1 + l + sovMessaging(uint64(l))
	}
	if m.MyReadDate != nil {
		l = m.MyReadDate.Size()
		n += 1 + l + sovMessaging(uint64(l))
	}
	if m.RandomId != 0 {
		n += 1 + sovMessaging(uint64(m.RandomId))
	}
	if m.PrevMessageDate != nil {
		l = m.PrevMessageDate.Size()
		n += 1 + l + sovMessaging(uint64(l))
	}
	if m.ModifiedAt != 0 {
		n += 2 + sovMessaging(uint64(m.ModifiedAt))
	}
	if m.PrevEditInPeerAt != nil {
		l = m.PrevEditInPeerAt.Size()
		n += 2 + l + sovMessaging(uint64(l))
	}
	return n
}

func (m *UpdateMessage_Forward) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Forward != nil {
		l = m.Forward.Size()
		n += 1 + l + sovMessaging(uint64(l))
	}
	return n
}
func (m *UpdateMessage_Reply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Reply != nil {
		l = m.Reply.Size()
		n += 1 + l + sovMessaging(uint64(l))
	}
	return n
}
func (m *UpdateMessageContentChanged) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Peer != nil {
		l = m.Peer.Size()
		n += 1 + l + sovMessaging(uint64(l))
	}
	if m.Message != nil {
		l = m.Message.Size()
		n += 1 + l + sovMessaging(uint64(l))
	}
	if m.Mid != nil {
		l = m.Mid.Size()
		n += 1 + l + sovMessaging(uint64(l))
	}
	if m.EditedAt != 0 {
		n += 1 + sovMessaging(uint64(m.EditedAt))
	}
	if m.PrevEditInPeerAt != 0 {
		n += 1 + sovMessaging(uint64(m.PrevEditInPeerAt))
	}
	return n
}

func (m *UpdateMessageSent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Peer != nil {
		l = m.Peer.Size()
		n += 1 + l + sovMessaging(uint64(l))
	}
	if m.Rid != 0 {
		n += 1 + sovMessaging(uint64(m.Rid))
	}
	if m.Date != 0 {
		n += 1 + sovMessaging(uint64(m.Date))
	}
	if m.Mid != nil {
		l = m.Mid.Size()
		n += 1 + l + sovMessaging(uint64(l))
	}
	if m.PrevMid != nil {
		l = m.PrevMid.Size()
		n += 1 + l + sovMessaging(uint64(l))
	}
	if m.UnreadCounter != nil {
		l = m.UnreadCounter.Size()
		n += 1 + l + sovMessaging(uint64(l))
	}
	if m.MyReadDate != nil {
		l = m.MyReadDate.Size()
		n += 1 + l + sovMessaging(uint64(l))
	}
	if m.Attach != nil {
		n += m.Attach.Size()
	}
	return n
}

func (m *UpdateMessageSent_Forward) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Forward != nil {
		l = m.Forward.Size()
		n += 1 + l + sovMessaging(uint64(l))
	}
	return n
}
func (m *UpdateMessageSent_Reply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Reply != nil {
		l = m.Reply.Size()
		n += 1 + l + sovMessaging(uint64(l))
	}
	return n
}
func (m *UpdateMessageReceived) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Peer != nil {
		l = m.Peer.Size()
		n += 1 + l + sovMessaging(uint64(l))
	}
	if m.StartDate != 0 {
		n += 1 + sovMessaging(uint64(m.StartDate))
	}
	if m.ReceivedDate != 0 {
		n += 1 + sovMessaging(uint64(m.ReceivedDate))
	}
	return n
}

func (m *UpdateMessageRead) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Peer != nil {
		l = m.Peer.Size()
		n += 1 + l + sovMessaging(uint64(l))
	}
	if m.StartDate != 0 {
		n += 1 + sovMessaging(uint64(m.StartDate))
	}
	if m.ReadDate != 0 {
		n += 1 + sovMessaging(uint64(m.ReadDate))
	}
	return n
}

func (m *UpdateMessageReadByMe) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Peer != nil {
		l = m.Peer.Size()
		n += 1 + l + sovMessaging(uint64(l))
	}
	if m.StartDate != 0 {
		n += 1 + sovMessaging(uint64(m.StartDate))
	}
	if m.UnreadCounter != nil {
		l = m.UnreadCounter.Size()
		n += 1 + l + sovMessaging(uint64(l))
	}
	return n
}

func (m *UpdateMessageDelete) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Peer != nil {
		l = m.Peer.Size()
		n += 1 + l + sovMessaging(uint64(l))
	}
	if len(m.Mids) > 0 {
		for _, e := range m.Mids {
			l = e.Size()
			n += 1 + l + sovMessaging(uint64(l))
		}
	}
	if m.Counter != nil {
		l = m.Counter.Size()
		n += 1 + l + sovMessaging(uint64(l))
	}
	if m.ActionDate != 0 {
		n += 1 + sovMessaging(uint64(m.ActionDate))
	}
	return n
}

func (m *UpdateChatClear) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Peer != nil {
		l = m.Peer.Size()
		n += 1 + l + sovMessaging(uint64(l))
	}
	if m.ActionDate != 0 {
		n += 1 + sovMessaging(uint64(m.ActionDate))
	}
	return n
}

func (m *UpdateChatDelete) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Peer != nil {
		l = m.Peer.Size()
		n += 1 + l + sovMessaging(uint64(l))
	}
	if m.ActionDate != 0 {
		n += 1 + sovMessaging(uint64(m.ActionDate))
	}
	return n
}

func (m *UpdateChatArchive) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Peer != nil {
		l = m.Peer.Size()
		n += 1 + l + sovMessaging(uint64(l))
	}
	return n
}

func (m *UpdateChatGroupsChanged) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Dialogs) > 0 {
		for _, e := range m.Dialogs {
			l = e.Size()
			n += 1 + l + sovMessaging(uint64(l))
		}
	}
	return n
}

func (m *UpdateReactionsUpdate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Peer != nil {
		l = m.Peer.Size()
		n += 1 + l + sovMessaging(uint64(l))
	}
	if len(m.Reactions) > 0 {
		for _, e := range m.Reactions {
			l = e.Size()
			n += 1 + l + sovMessaging(uint64(l))
		}
	}
	if m.Mid != nil {
		l = m.Mid.Size()
		n += 1 + l + sovMessaging(uint64(l))
	}
	return n
}

func (m *UpdateMessageRejectedByHook) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Peer != nil {
		l = m.Peer.Size()
		n += 1 + l + sovMessaging(uint64(l))
	}
	if m.Rid != 0 {
		n += 1 + sovMessaging(uint64(m.Rid))
	}
	if m.Date != 0 {
		n += 1 + sovMessaging(uint64(m.Date))
	}
	l = len(m.HookId)
	if l > 0 {
		n += 1 + l + sovMessaging(uint64(l))
	}
	if m.Reason != nil {
		l = m.Reason.Size()
		n += 1 + l + sovMessaging(uint64(l))
	}
	return n
}

func (m *UpdateMessageEditRejectedByHook) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Peer != nil {
		l = m.Peer.Size()
		n += 1 + l + sovMessaging(uint64(l))
	}
	if m.Mid != nil {
		l = m.Mid.Size()
		n += 1 + l + sovMessaging(uint64(l))
	}
	if m.Date != 0 {
		n += 1 + sovMessaging(uint64(m.Date))
	}
	l = len(m.HookId)
	if l > 0 {
		n += 1 + l + sovMessaging(uint64(l))
	}
	if m.Reason != nil {
		l = m.Reason.Size()
		n += 1 + l + sovMessaging(uint64(l))
	}
	return n
}

func (m *UpdateThreadCreated) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Peer != nil {
		l = m.Peer.Size()
		n += 1 + l + sovMessaging(uint64(l))
	}
	if m.StartMessage != nil {
		l = m.StartMessage.Size()
		n += 1 + l + sovMessaging(uint64(l))
	}
	return n
}

func (m *UpdateThreadLifted) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Peer != nil {
		l = m.Peer.Size()
		n += 1 + l + sovMessaging(uint64(l))
	}
	return n
}

func (m *ReferencedMessages) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Mids) > 0 {
		for _, e := range m.Mids {
			l = e.Size()
			n += 1 + l + sovMessaging(uint64(l))
		}
	}
	return n
}

func (m *HistoryMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SenderUid != 0 {
		n += 1 + sovMessaging(uint64(m.SenderUid))
	}
	if m.Date != 0 {
		n += 1 + sovMessaging(uint64(m.Date))
	}
	if m.Message != nil {
		l = m.Message.Size()
		n += 1 + l + sovMessaging(uint64(l))
	}
	if m.State != 0 {
		n += 1 + sovMessaging(uint64(m.State))
	}
	if len(m.Reactions) > 0 {
		for _, e := range m.Reactions {
			l = e.Size()
			n += 1 + l + sovMessaging(uint64(l))
		}
	}
	if m.Attribute != nil {
		l = m.Attribute.Size()
		n += 1 + l + sovMessaging(uint64(l))
	}
	if m.Mid != nil {
		l = m.Mid.Size()
		n += 1 + l + sovMessaging(uint64(l))
	}
	if m.HostPeer != nil {
		l = m.HostPeer.Size()
		n += 1 + l + sovMessaging(uint64(l))
	}
	if m.Attach != nil {
		n += m.Attach.Size()
	}
	if m.SenderPeer != nil {
		l = m.SenderPeer.Size()
		n += 1 + l + sovMessaging(uint64(l))
	}
	if m.EditedAt != nil {
		l = m.EditedAt.Size()
		n += 2 + l + sovMessaging(uint64(l))
	}
	if m.PrevMid != nil {
		l = m.PrevMid.Size()
		n += 2 + l + sovMessaging(uint64(l))
	}
	if m.RandomId != 0 {
		n += 2 + sovMessaging(uint64(m.RandomId))
	}
	return n
}

func (m *HistoryMessage_Forward) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Forward != nil {
		l = m.Forward.Size()
		n += 1 + l + sovMessaging(uint64(l))
	}
	return n
}
func (m *HistoryMessage_Reply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Reply != nil {
		l = m.Reply.Size()
		n += 1 + l + sovMessaging(uint64(l))
	}
	return n
}
func (m *RequestLoadHistory) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Peer != nil {
		l = m.Peer.Size()
		n += 1 + l + sovMessaging(uint64(l))
	}
	if m.Date != 0 {
		n += 1 + sovMessaging(uint64(m.Date))
	}
	if m.Limit != 0 {
		n += 1 + sovMessaging(uint64(m.Limit))
	}
	if m.LoadMode != 0 {
		n += 1 + sovMessaging(uint64(m.LoadMode))
	}
	if len(m.Optimizations) > 0 {
		l = 0
		for _, e := range m.Optimizations {
			l += sovMessaging(uint64(e))
		}
		n += 1 + sovMessaging(uint64(l)) + l
	}
	return n
}

func (m *ResponseLoadHistory) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.History) > 0 {
		for _, e := range m.History {
			l = e.Size()
			n += 1 + l + sovMessaging(uint64(l))
		}
	}
	if len(m.UserPeers) > 0 {
		for _, e := range m.UserPeers {
			l = e.Size()
			n += 1 + l + sovMessaging(uint64(l))
		}
	}
	if len(m.GroupPeers) > 0 {
		for _, e := range m.GroupPeers {
			l = e.Size()
			n += 1 + l + sovMessaging(uint64(l))
		}
	}
	if m.Counter != nil {
		l = m.Counter.Size()
		n += 1 + l + sovMessaging(uint64(l))
	}
	if m.CounterDate != 0 {
		n += 1 + sovMessaging(uint64(m.CounterDate))
	}
	if m.LastConversationMessageDate != nil {
		l = m.LastConversationMessageDate.Size()
		n += 1 + l + sovMessaging(uint64(l))
	}
	if m.CountForeignAfterLastReturned != 0 {
		n += 1 + sovMessaging(uint64(m.CountForeignAfterLastReturned))
	}
	return n
}

func (m *RequestHistoryDifference) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Clock != 0 {
		n += 1 + sovMessaging(uint64(m.Clock))
	}
	return n
}

func (m *ResponseHistoryDifference) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.History) > 0 {
		for _, e := range m.History {
			l = e.Size()
			n += 1 + l + sovMessaging(uint64(l))
		}
	}
	if m.FromClock != 0 {
		n += 1 + sovMessaging(uint64(m.FromClock))
	}
	if m.Clock != 0 {
		n += 1 + sovMessaging(uint64(m.Clock))
	}
	return n
}

func (m *Dialog) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Peer != nil {
		l = m.Peer.Size()
		n += 1 + l + sovMessaging(uint64(l))
	}
	if m.UnreadCount != 0 {
		n += 1 + sovMessaging(uint64(m.UnreadCount))
	}
	if m.SortDate != 0 {
		n += 1 + sovMessaging(uint64(m.SortDate))
	}
	if m.SenderUid != 0 {
		n += 1 + sovMessaging(uint64(m.SenderUid))
	}
	if m.Date != 0 {
		n += 1 + sovMessaging(uint64(m.Date))
	}
	if m.Message != nil {
		l = m.Message.Size()
		n += 1 + l + sovMessaging(uint64(l))
	}
	if m.State != 0 {
		n += 1 + sovMessaging(uint64(m.State))
	}
	if m.FirstUnreadDate != 0 {
		n += 1 + sovMessaging(uint64(m.FirstUnreadDate))
	}
	if m.Attributes != nil {
		l = m.Attributes.Size()
		n += 1 + l + sovMessaging(uint64(l))
	}
	if m.Mid != nil {
		l = m.Mid.Size()
		n += 1 + l + sovMessaging(uint64(l))
	}
	if m.IsFavourite != nil {
		l = m.IsFavourite.Size()
		n += 1 + l + sovMessaging(uint64(l))
	}
	if m.PinnedMessages != nil {
		l = m.PinnedMessages.Size()
		n += 1 + l + sovMessaging(uint64(l))
	}
	if m.HistoryMessage != nil {
		l = m.HistoryMessage.Size()
		n += 1 + l + sovMessaging(uint64(l))
	}
	if m.LastReceive != 0 {
		n += 2 + sovMessaging(uint64(m.LastReceive))
	}
	if m.LastRead != 0 {
		n += 2 + sovMessaging(uint64(m.LastRead))
	}
	if m.LastReactionAt != 0 {
		n += 2 + sovMessaging(uint64(m.LastReactionAt))
	}
	return n
}

func (m *RequestLoadDialogs) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MinDate != 0 {
		n += 1 + sovMessaging(uint64(m.MinDate))
	}
	if m.Limit != 0 {
		n += 1 + sovMessaging(uint64(m.Limit))
	}
	if len(m.Optimizations) > 0 {
		l = 0
		for _, e := range m.Optimizations {
			l += sovMessaging(uint64(e))
		}
		n += 1 + sovMessaging(uint64(l)) + l
	}
	if len(m.Filters) > 0 {
		l = 0
		for _, e := range m.Filters {
			l += sovMessaging(uint64(e))
		}
		n += 1 + sovMessaging(uint64(l)) + l
	}
	if len(m.PeersToLoad) > 0 {
		for _, e := range m.PeersToLoad {
			l = e.Size()
			n += 1 + l + sovMessaging(uint64(l))
		}
	}
	return n
}

func (m *ResponseLoadDialogs) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Dialogs) > 0 {
		for _, e := range m.Dialogs {
			l = e.Size()
			n += 1 + l + sovMessaging(uint64(l))
		}
	}
	if len(m.UserPeers) > 0 {
		for _, e := range m.UserPeers {
			l = e.Size()
			n += 1 + l + sovMessaging(uint64(l))
		}
	}
	if len(m.GroupPeers) > 0 {
		for _, e := range m.GroupPeers {
			l = e.Size()
			n += 1 + l + sovMessaging(uint64(l))
		}
	}
	return n
}

func (m *DialogData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IsFavourite {
		n += 2
	}
	if m.CreatedAt != 0 {
		n += 1 + sovMessaging(uint64(m.CreatedAt))
	}
	if m.Clock != 0 {
		n += 1 + sovMessaging(uint64(m.Clock))
	}
	return n
}

func (m *DialogIndex) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Peer != nil {
		l = m.Peer.Size()
		n += 1 + l + sovMessaging(uint64(l))
	}
	if m.LastMessageDate != 0 {
		n += 1 + sovMessaging(uint64(m.LastMessageDate))
	}
	if m.Data != nil {
		l = m.Data.Size()
		n += 1 + l + sovMessaging(uint64(l))
	}
	return n
}

func (m *DialogListEntry) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Peer != nil {
		l = m.Peer.Size()
		n += 1 + l + sovMessaging(uint64(l))
	}
	if m.UnreadCount != 0 {
		n += 1 + sovMessaging(uint64(m.UnreadCount))
	}
	if m.MyReadDate != 0 {
		n += 1 + sovMessaging(uint64(m.MyReadDate))
	}
	if m.LastMessageDate != 0 {
		n += 1 + sovMessaging(uint64(m.LastMessageDate))
	}
	if m.ReceiveDate != 0 {
		n += 1 + sovMessaging(uint64(m.ReceiveDate))
	}
	if m.ReadDate != 0 {
		n += 1 + sovMessaging(uint64(m.ReadDate))
	}
	if m.EntryClock != 0 {
		n += 1 + sovMessaging(uint64(m.EntryClock))
	}
	if m.Data != nil {
		l = m.Data.Size()
		n += 1 + l + sovMessaging(uint64(l))
	}
	if m.LastUpdateOfMessageDate != 0 {
		n += 1 + sovMessaging(uint64(m.LastUpdateOfMessageDate))
	}
	if m.LastReactionDate != 0 {
		n += 1 + sovMessaging(uint64(m.LastReactionDate))
	}
	return n
}

func (m *RequestFetchDialogIndex) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *ResponseFetchDialogIndex) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.DialogIndices) > 0 {
		for _, e := range m.DialogIndices {
			l = e.Size()
			n += 1 + l + sovMessaging(uint64(l))
		}
	}
	return n
}

func (m *RequestDialogListDifference) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.FromClock != 0 {
		n += 1 + sovMessaging(uint64(m.FromClock))
	}
	return n
}

func (m *ResponseDialogListDifference) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Entries) > 0 {
		for _, e := range m.Entries {
			l = e.Size()
			n += 1 + l + sovMessaging(uint64(l))
		}
	}
	if m.Clock != 0 {
		n += 1 + sovMessaging(uint64(m.Clock))
	}
	if m.PrevClock != 0 {
		n += 1 + sovMessaging(uint64(m.PrevClock))
	}
	return n
}

func (m *RequestGetLastConversationMessages) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Peers) > 0 {
		for _, e := range m.Peers {
			l = e.Size()
			n += 1 + l + sovMessaging(uint64(l))
		}
	}
	return n
}

func (m *ResponseGetLastConversationMessages) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Messages) > 0 {
		for _, e := range m.Messages {
			l = e.Size()
			n += 1 + l + sovMessaging(uint64(l))
		}
	}
	return n
}

func (m *ResponseGetLastConversationMessages_Pair) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Peer != nil {
		l = m.Peer.Size()
		n += 1 + l + sovMessaging(uint64(l))
	}
	if m.Message != nil {
		l = m.Message.Size()
		n += 1 + l + sovMessaging(uint64(l))
	}
	return n
}

func (m *RequestLoadArchived) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NextOffset != nil {
		l = m.NextOffset.Size()
		n += 1 + l + sovMessaging(uint64(l))
	}
	if m.Limit != 0 {
		n += 1 + sovMessaging(uint64(m.Limit))
	}
	if len(m.Optimizations) > 0 {
		l = 0
		for _, e := range m.Optimizations {
			l += sovMessaging(uint64(e))
		}
		n += 1 + sovMessaging(uint64(l)) + l
	}
	return n
}

func (m *ResponseLoadArchived) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Dialogs) > 0 {
		for _, e := range m.Dialogs {
			l = e.Size()
			n += 1 + l + sovMessaging(uint64(l))
		}
	}
	if m.NextOffset != nil {
		l = m.NextOffset.Size()
		n += 1 + l + sovMessaging(uint64(l))
	}
	if len(m.UserPeers) > 0 {
		for _, e := range m.UserPeers {
			l = e.Size()
			n += 1 + l + sovMessaging(uint64(l))
		}
	}
	if len(m.GroupPeers) > 0 {
		for _, e := range m.GroupPeers {
			l = e.Size()
			n += 1 + l + sovMessaging(uint64(l))
		}
	}
	return n
}

func (m *RequestLoadGroupedDialogs) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Optimizations) > 0 {
		l = 0
		for _, e := range m.Optimizations {
			l += sovMessaging(uint64(e))
		}
		n += 1 + sovMessaging(uint64(l)) + l
	}
	return n
}

func (m *ResponseLoadGroupedDialogs) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Dialogs) > 0 {
		for _, e := range m.Dialogs {
			l = e.Size()
			n += 1 + l + sovMessaging(uint64(l))
		}
	}
	if m.ShowArchived != nil {
		l = m.ShowArchived.Size()
		n += 1 + l + sovMessaging(uint64(l))
	}
	if m.ShowInvite != nil {
		l = m.ShowInvite.Size()
		n += 1 + l + sovMessaging(uint64(l))
	}
	if len(m.UserPeers) > 0 {
		for _, e := range m.UserPeers {
			l = e.Size()
			n += 1 + l + sovMessaging(uint64(l))
		}
	}
	if len(m.GroupPeers) > 0 {
		for _, e := range m.GroupPeers {
			l = e.Size()
			n += 1 + l + sovMessaging(uint64(l))
		}
	}
	return n
}

func (m *ResponseDialogsOrder) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Seq != 0 {
		n += 1 + sovMessaging(uint64(m.Seq))
	}
	l = len(m.State)
	if l > 0 {
		n += 1 + l + sovMessaging(uint64(l))
	}
	if len(m.Groups) > 0 {
		for _, e := range m.Groups {
			l = e.Size()
			n += 1 + l + sovMessaging(uint64(l))
		}
	}
	return n
}

func (m *RequestHideDialog) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Peer != nil {
		l = m.Peer.Size()
		n += 1 + l + sovMessaging(uint64(l))
	}
	return n
}

func (m *RequestShowDialog) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Peer != nil {
		l = m.Peer.Size()
		n += 1 + l + sovMessaging(uint64(l))
	}
	return n
}

func (m *RequestFavouriteDialog) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Peer != nil {
		l = m.Peer.Size()
		n += 1 + l + sovMessaging(uint64(l))
	}
	return n
}

func (m *RequestUnfavouriteDialog) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Peer != nil {
		l = m.Peer.Size()
		n += 1 + l + sovMessaging(uint64(l))
	}
	return n
}

func (m *UpdateDialogFavouriteChanged) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Peer != nil {
		l = m.Peer.Size()
		n += 1 + l + sovMessaging(uint64(l))
	}
	if m.IsFavourite != nil {
		l = m.IsFavourite.Size()
		n += 1 + l + sovMessaging(uint64(l))
	}
	return n
}

func (m *RequestNotifyDialogOpened) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Peer != nil {
		l = m.Peer.Size()
		n += 1 + l + sovMessaging(uint64(l))
	}
	return n
}

func (m *PinnedMessages) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Mids) > 0 {
		for _, e := range m.Mids {
			l = e.Size()
			n += 1 + l + sovMessaging(uint64(l))
		}
	}
	return n
}

func (m *RequestPinMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Peer != nil {
		l = m.Peer.Size()
		n += 1 + l + sovMessaging(uint64(l))
	}
	if m.Mid != nil {
		l = m.Mid.Size()
		n += 1 + l + sovMessaging(uint64(l))
	}
	if m.LastPinDate != 0 {
		n += 1 + sovMessaging(uint64(m.LastPinDate))
	}
	return n
}

func (m *RequestUnpinMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Peer != nil {
		l = m.Peer.Size()
		n += 1 + l + sovMessaging(uint64(l))
	}
	if m.Mid != nil {
		l = m.Mid.Size()
		n += 1 + l + sovMessaging(uint64(l))
	}
	if m.LastPinDate != 0 {
		n += 1 + sovMessaging(uint64(m.LastPinDate))
	}
	return n
}

func (m *UpdatePinnedMessagesChanged) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Peer != nil {
		l = m.Peer.Size()
		n += 1 + l + sovMessaging(uint64(l))
	}
	if m.PinnedMessages != nil {
		l = m.PinnedMessages.Size()
		n += 1 + l + sovMessaging(uint64(l))
	}
	if m.ActionDate != 0 {
		n += 1 + sovMessaging(uint64(m.ActionDate))
	}
	return n
}

func (m *RequestGetUpdatedMessages) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Peer != nil {
		l = m.Peer.Size()
		n += 1 + l + sovMessaging(uint64(l))
	}
	if m.FromClock != 0 {
		n += 1 + sovMessaging(uint64(m.FromClock))
	}
	return n
}

func (m *ResponseGetUpdatedMessages) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Messages) > 0 {
		for _, e := range m.Messages {
			l = e.Size()
			n += 1 + l + sovMessaging(uint64(l))
		}
	}
	if m.PeerClock != 0 {
		n += 1 + sovMessaging(uint64(m.PeerClock))
	}
	if m.NextAvailable {
		n += 2
	}
	return n
}

func (m *ResponseGetUpdatedMessages_UpdatedMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Mid != nil {
		l = m.Mid.Size()
		n += 1 + l + sovMessaging(uint64(l))
	}
	if m.Message != nil {
		l = m.Message.Size()
		n += 1 + l + sovMessaging(uint64(l))
	}
	if m.ModifiedAt != 0 {
		n += 1 + sovMessaging(uint64(m.ModifiedAt))
	}
	return n
}

func (m *MessageStatus) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Clock != 0 {
		n += 1 + sovMessaging(uint64(m.Clock))
	}
	if m.UserId != 0 {
		n += 1 + sovMessaging(uint64(m.UserId))
	}
	return n
}

func (m *RequestMessageReads) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Mid != nil {
		l = m.Mid.Size()
		n += 1 + l + sovMessaging(uint64(l))
	}
	if m.Limit != 0 {
		n += 1 + sovMessaging(uint64(m.Limit))
	}
	if m.TimestampFrom != 0 {
		n += 1 + sovMessaging(uint64(m.TimestampFrom))
	}
	return n
}

func (m *RequestMessageReceives) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Mid != nil {
		l = m.Mid.Size()
		n += 1 + l + sovMessaging(uint64(l))
	}
	if m.Limit != 0 {
		n += 1 + sovMessaging(uint64(m.Limit))
	}
	if m.TimestampFrom != 0 {
		n += 1 + sovMessaging(uint64(m.TimestampFrom))
	}
	return n
}

func (m *ResponseMessageReads) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Status) > 0 {
		for _, e := range m.Status {
			l = e.Size()
			n += 1 + l + sovMessaging(uint64(l))
		}
	}
	if m.TimestampTill != 0 {
		n += 1 + sovMessaging(uint64(m.TimestampTill))
	}
	return n
}

func (m *ResponseMessageReceives) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Status) > 0 {
		for _, e := range m.Status {
			l = e.Size()
			n += 1 + l + sovMessaging(uint64(l))
		}
	}
	if m.TimestampTill != 0 {
		n += 1 + sovMessaging(uint64(m.TimestampTill))
	}
	return n
}

func sovMessaging(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozMessaging(x uint64) (n int) {
	return sovMessaging(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *MessageAttributes) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&MessageAttributes{`,
		`IsMentioned:` + strings.Replace(fmt.Sprintf("%v", this.IsMentioned), "BoolValue", "types.BoolValue", 1) + `,`,
		`IsHighlighted:` + strings.Replace(fmt.Sprintf("%v", this.IsHighlighted), "BoolValue", "types.BoolValue", 1) + `,`,
		`IsNotified:` + strings.Replace(fmt.Sprintf("%v", this.IsNotified), "BoolValue", "types.BoolValue", 1) + `,`,
		`IsOnlyForYou:` + strings.Replace(fmt.Sprintf("%v", this.IsOnlyForYou), "BoolValue", "types.BoolValue", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *QuotedMessage) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&QuotedMessage{`,
		`MessageId:` + fmt.Sprintf("%v", this.MessageId) + `,`,
		`PublicGroupId:` + fmt.Sprintf("%v", this.PublicGroupId) + `,`,
		`SenderUserId:` + fmt.Sprintf("%v", this.SenderUserId) + `,`,
		`MessageDate:` + fmt.Sprintf("%v", this.MessageDate) + `,`,
		`QuotedMessageContent:` + strings.Replace(this.QuotedMessageContent.String(), "MessageContent", "MessageContent", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *MessageMedia) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForActions := "[]*InteractiveMediaGroup{"
	for _, f := range this.Actions {
		repeatedStringForActions += strings.Replace(f.String(), "InteractiveMediaGroup", "InteractiveMediaGroup", 1) + ","
	}
	repeatedStringForActions += "}"
	s := strings.Join([]string{`&MessageMedia{`,
		`Webpage:` + strings.Replace(this.Webpage.String(), "WebpageMedia", "WebpageMedia", 1) + `,`,
		`Image:` + strings.Replace(this.Image.String(), "ImageMedia", "ImageMedia", 1) + `,`,
		`Audio:` + strings.Replace(this.Audio.String(), "AudioMedia", "AudioMedia", 1) + `,`,
		`Actions:` + repeatedStringForActions + `,`,
		`}`,
	}, "")
	return s
}
func (this *WebpageMedia) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&WebpageMedia{`,
		`Url:` + strings.Replace(fmt.Sprintf("%v", this.Url), "StringValue", "types.StringValue", 1) + `,`,
		`Title:` + strings.Replace(fmt.Sprintf("%v", this.Title), "StringValue", "types.StringValue", 1) + `,`,
		`Description:` + strings.Replace(fmt.Sprintf("%v", this.Description), "StringValue", "types.StringValue", 1) + `,`,
		`Image:` + strings.Replace(fmt.Sprintf("%v", this.Image), "ImageLocation", "ImageLocation", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ImageMedia) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ImageMedia{`,
		`Image:` + strings.Replace(fmt.Sprintf("%v", this.Image), "ImageLocation", "ImageLocation", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AudioMedia) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AudioMedia{`,
		`Audio:` + strings.Replace(fmt.Sprintf("%v", this.Audio), "AudioLocation", "AudioLocation", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *InteractiveMediaWidget) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&InteractiveMediaWidget{`,
		`Body:` + fmt.Sprintf("%v", this.Body) + `,`,
		`}`,
	}, "")
	return s
}
func (this *InteractiveMediaWidget_InteractiveMediaButton) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&InteractiveMediaWidget_InteractiveMediaButton{`,
		`InteractiveMediaButton:` + strings.Replace(fmt.Sprintf("%v", this.InteractiveMediaButton), "InteractiveMediaButton", "InteractiveMediaButton", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *InteractiveMediaWidget_InteractiveMediaSelect) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&InteractiveMediaWidget_InteractiveMediaSelect{`,
		`InteractiveMediaSelect:` + strings.Replace(fmt.Sprintf("%v", this.InteractiveMediaSelect), "InteractiveMediaSelect", "InteractiveMediaSelect", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *InteractiveMediaButton) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&InteractiveMediaButton{`,
		`Value:` + fmt.Sprintf("%v", this.Value) + `,`,
		`Label:` + strings.Replace(fmt.Sprintf("%v", this.Label), "StringValue", "types.StringValue", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *InteractiveMediaSelect) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForOptions := "[]*InteractiveMediaSelectOption{"
	for _, f := range this.Options {
		repeatedStringForOptions += strings.Replace(f.String(), "InteractiveMediaSelectOption", "InteractiveMediaSelectOption", 1) + ","
	}
	repeatedStringForOptions += "}"
	s := strings.Join([]string{`&InteractiveMediaSelect{`,
		`Options:` + repeatedStringForOptions + `,`,
		`Label:` + strings.Replace(fmt.Sprintf("%v", this.Label), "StringValue", "types.StringValue", 1) + `,`,
		`DefaultValue:` + strings.Replace(fmt.Sprintf("%v", this.DefaultValue), "StringValue", "types.StringValue", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *InteractiveMediaSelectOption) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&InteractiveMediaSelectOption{`,
		`Value:` + fmt.Sprintf("%v", this.Value) + `,`,
		`Label:` + fmt.Sprintf("%v", this.Label) + `,`,
		`}`,
	}, "")
	return s
}
func (this *InteractiveMedia) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&InteractiveMedia{`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`Widget:` + strings.Replace(this.Widget.String(), "InteractiveMediaWidget", "InteractiveMediaWidget", 1) + `,`,
		`Style:` + fmt.Sprintf("%v", this.Style) + `,`,
		`Confirm:` + strings.Replace(this.Confirm.String(), "InteractiveMediaConfirm", "InteractiveMediaConfirm", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *InteractiveMediaTranslation) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&InteractiveMediaTranslation{`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`Value:` + fmt.Sprintf("%v", this.Value) + `,`,
		`}`,
	}, "")
	return s
}
func (this *InteractiveMediaTranslationGroup) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForMessages := "[]*InteractiveMediaTranslation{"
	for _, f := range this.Messages {
		repeatedStringForMessages += strings.Replace(f.String(), "InteractiveMediaTranslation", "InteractiveMediaTranslation", 1) + ","
	}
	repeatedStringForMessages += "}"
	s := strings.Join([]string{`&InteractiveMediaTranslationGroup{`,
		`Language:` + fmt.Sprintf("%v", this.Language) + `,`,
		`Messages:` + repeatedStringForMessages + `,`,
		`}`,
	}, "")
	return s
}
func (this *InteractiveMediaGroup) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForActions := "[]*InteractiveMedia{"
	for _, f := range this.Actions {
		repeatedStringForActions += strings.Replace(f.String(), "InteractiveMedia", "InteractiveMedia", 1) + ","
	}
	repeatedStringForActions += "}"
	repeatedStringForTranslations := "[]*InteractiveMediaTranslationGroup{"
	for _, f := range this.Translations {
		repeatedStringForTranslations += strings.Replace(f.String(), "InteractiveMediaTranslationGroup", "InteractiveMediaTranslationGroup", 1) + ","
	}
	repeatedStringForTranslations += "}"
	s := strings.Join([]string{`&InteractiveMediaGroup{`,
		`Actions:` + repeatedStringForActions + `,`,
		`Title:` + strings.Replace(fmt.Sprintf("%v", this.Title), "StringValue", "types.StringValue", 1) + `,`,
		`Description:` + strings.Replace(fmt.Sprintf("%v", this.Description), "StringValue", "types.StringValue", 1) + `,`,
		`Translations:` + repeatedStringForTranslations + `,`,
		`}`,
	}, "")
	return s
}
func (this *InteractiveMediaConfirm) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&InteractiveMediaConfirm{`,
		`Text:` + strings.Replace(fmt.Sprintf("%v", this.Text), "StringValue", "types.StringValue", 1) + `,`,
		`Title:` + strings.Replace(fmt.Sprintf("%v", this.Title), "StringValue", "types.StringValue", 1) + `,`,
		`Ok:` + strings.Replace(fmt.Sprintf("%v", this.Ok), "StringValue", "types.StringValue", 1) + `,`,
		`Dismiss:` + strings.Replace(fmt.Sprintf("%v", this.Dismiss), "StringValue", "types.StringValue", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateInteractiveMediaEvent) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateInteractiveMediaEvent{`,
		`Mid:` + strings.Replace(fmt.Sprintf("%v", this.Mid), "UUIDValue", "UUIDValue", 1) + `,`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`Value:` + fmt.Sprintf("%v", this.Value) + `,`,
		`Uid:` + fmt.Sprintf("%v", this.Uid) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RequestDoInteractiveMediaAction) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RequestDoInteractiveMediaAction{`,
		`Mid:` + strings.Replace(fmt.Sprintf("%v", this.Mid), "UUIDValue", "UUIDValue", 1) + `,`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`Value:` + fmt.Sprintf("%v", this.Value) + `,`,
		`}`,
	}, "")
	return s
}
func (this *MessageContent) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&MessageContent{`,
		`Body:` + fmt.Sprintf("%v", this.Body) + `,`,
		`}`,
	}, "")
	return s
}
func (this *MessageContent_TextMessage) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&MessageContent_TextMessage{`,
		`TextMessage:` + strings.Replace(fmt.Sprintf("%v", this.TextMessage), "TextMessage", "TextMessage", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *MessageContent_ServiceMessage) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&MessageContent_ServiceMessage{`,
		`ServiceMessage:` + strings.Replace(fmt.Sprintf("%v", this.ServiceMessage), "ServiceMessage", "ServiceMessage", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *MessageContent_DocumentMessage) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&MessageContent_DocumentMessage{`,
		`DocumentMessage:` + strings.Replace(fmt.Sprintf("%v", this.DocumentMessage), "DocumentMessage", "DocumentMessage", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *MessageContent_JsonMessage) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&MessageContent_JsonMessage{`,
		`JsonMessage:` + strings.Replace(fmt.Sprintf("%v", this.JsonMessage), "JsonMessage", "JsonMessage", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *MessageContent_UnsupportedMessage) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&MessageContent_UnsupportedMessage{`,
		`UnsupportedMessage:` + strings.Replace(fmt.Sprintf("%v", this.UnsupportedMessage), "UnsupportedMessage", "UnsupportedMessage", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *MessageContent_StickerMessage) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&MessageContent_StickerMessage{`,
		`StickerMessage:` + strings.Replace(fmt.Sprintf("%v", this.StickerMessage), "StickerMessage", "StickerMessage", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *MessageContent_BinaryMessage) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&MessageContent_BinaryMessage{`,
		`BinaryMessage:` + strings.Replace(fmt.Sprintf("%v", this.BinaryMessage), "BinaryMessage", "BinaryMessage", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *MessageContent_EmptyMessage) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&MessageContent_EmptyMessage{`,
		`EmptyMessage:` + strings.Replace(fmt.Sprintf("%v", this.EmptyMessage), "EmptyMessage", "EmptyMessage", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *MessageContent_DeletedMessage) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&MessageContent_DeletedMessage{`,
		`DeletedMessage:` + strings.Replace(fmt.Sprintf("%v", this.DeletedMessage), "DeletedMessage", "DeletedMessage", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *TextMessage) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForMedia := "[]*MessageMedia{"
	for _, f := range this.Media {
		repeatedStringForMedia += strings.Replace(f.String(), "MessageMedia", "MessageMedia", 1) + ","
	}
	repeatedStringForMedia += "}"
	repeatedStringForExtensions := "[]*Any{"
	for _, f := range this.Extensions {
		repeatedStringForExtensions += strings.Replace(fmt.Sprintf("%v", f), "Any", "Any", 1) + ","
	}
	repeatedStringForExtensions += "}"
	repeatedStringForMentions := "[]*Mention{"
	for _, f := range this.Mentions {
		repeatedStringForMentions += strings.Replace(f.String(), "Mention", "Mention", 1) + ","
	}
	repeatedStringForMentions += "}"
	s := strings.Join([]string{`&TextMessage{`,
		`Text:` + fmt.Sprintf("%v", this.Text) + `,`,
		`Ext:` + strings.Replace(this.Ext.String(), "TextMessageEx", "TextMessageEx", 1) + `,`,
		`Media:` + repeatedStringForMedia + `,`,
		`Extensions:` + repeatedStringForExtensions + `,`,
		`Mentions:` + repeatedStringForMentions + `,`,
		`}`,
	}, "")
	return s
}
func (this *Mention) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Mention{`,
		`Peer:` + strings.Replace(fmt.Sprintf("%v", this.Peer), "Peer", "Peer", 1) + `,`,
		`All:` + fmt.Sprintf("%v", this.All) + `,`,
		`}`,
	}, "")
	return s
}
func (this *TextMessageEx) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TextMessageEx{`,
		`Body:` + fmt.Sprintf("%v", this.Body) + `,`,
		`}`,
	}, "")
	return s
}
func (this *TextMessageEx_TextExMarkdown) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TextMessageEx_TextExMarkdown{`,
		`TextExMarkdown:` + strings.Replace(fmt.Sprintf("%v", this.TextExMarkdown), "TextExMarkdown", "TextExMarkdown", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *TextMessageEx_TextModernMessage) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TextMessageEx_TextModernMessage{`,
		`TextModernMessage:` + strings.Replace(fmt.Sprintf("%v", this.TextModernMessage), "TextModernMessage", "TextModernMessage", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *TextMessageEx_TextCommand) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TextMessageEx_TextCommand{`,
		`TextCommand:` + strings.Replace(fmt.Sprintf("%v", this.TextCommand), "TextCommand", "TextCommand", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *TextExMarkdown) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TextExMarkdown{`,
		`Markdown:` + fmt.Sprintf("%v", this.Markdown) + `,`,
		`}`,
	}, "")
	return s
}
func (this *TextModernMessage) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForAttaches := "[]*TextModernAttach{"
	for _, f := range this.Attaches {
		repeatedStringForAttaches += strings.Replace(f.String(), "TextModernAttach", "TextModernAttach", 1) + ","
	}
	repeatedStringForAttaches += "}"
	s := strings.Join([]string{`&TextModernMessage{`,
		`Text:` + strings.Replace(fmt.Sprintf("%v", this.Text), "StringValue", "types.StringValue", 1) + `,`,
		`SenderNameOverride:` + strings.Replace(fmt.Sprintf("%v", this.SenderNameOverride), "StringValue", "types.StringValue", 1) + `,`,
		`SenderPhotoOverride:` + strings.Replace(fmt.Sprintf("%v", this.SenderPhotoOverride), "Avatar", "Avatar", 1) + `,`,
		`Style:` + strings.Replace(this.Style.String(), "ParagraphStyle", "ParagraphStyle", 1) + `,`,
		`Attaches:` + repeatedStringForAttaches + `,`,
		`}`,
	}, "")
	return s
}
func (this *ParagraphStyle) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ParagraphStyle{`,
		`ShowParagraph:` + strings.Replace(fmt.Sprintf("%v", this.ShowParagraph), "BoolValue", "types.BoolValue", 1) + `,`,
		`ParagraphColor:` + strings.Replace(fmt.Sprintf("%v", this.ParagraphColor), "Color", "Color", 1) + `,`,
		`BgColor:` + strings.Replace(fmt.Sprintf("%v", this.BgColor), "Color", "Color", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *TextModernAttach) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForFields := "[]*TextModernField{"
	for _, f := range this.Fields {
		repeatedStringForFields += strings.Replace(f.String(), "TextModernField", "TextModernField", 1) + ","
	}
	repeatedStringForFields += "}"
	s := strings.Join([]string{`&TextModernAttach{`,
		`Title:` + strings.Replace(fmt.Sprintf("%v", this.Title), "StringValue", "types.StringValue", 1) + `,`,
		`TitleUrl:` + strings.Replace(fmt.Sprintf("%v", this.TitleUrl), "StringValue", "types.StringValue", 1) + `,`,
		`TitleIcon:` + strings.Replace(fmt.Sprintf("%v", this.TitleIcon), "ImageLocation", "ImageLocation", 1) + `,`,
		`Text:` + strings.Replace(fmt.Sprintf("%v", this.Text), "StringValue", "types.StringValue", 1) + `,`,
		`Style:` + strings.Replace(this.Style.String(), "ParagraphStyle", "ParagraphStyle", 1) + `,`,
		`Fields:` + repeatedStringForFields + `,`,
		`}`,
	}, "")
	return s
}
func (this *TextModernField) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TextModernField{`,
		`Title:` + fmt.Sprintf("%v", this.Title) + `,`,
		`Value:` + fmt.Sprintf("%v", this.Value) + `,`,
		`IsShort:` + strings.Replace(fmt.Sprintf("%v", this.IsShort), "BoolValue", "types.BoolValue", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *TextCommand) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TextCommand{`,
		`Command:` + fmt.Sprintf("%v", this.Command) + `,`,
		`Args:` + fmt.Sprintf("%v", this.Args) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ServiceMessage) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ServiceMessage{`,
		`Text:` + fmt.Sprintf("%v", this.Text) + `,`,
		`Ext:` + strings.Replace(this.Ext.String(), "ServiceEx", "ServiceEx", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ServiceEx) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ServiceEx{`,
		`Body:` + fmt.Sprintf("%v", this.Body) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ServiceEx_UserInvited) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ServiceEx_UserInvited{`,
		`UserInvited:` + strings.Replace(fmt.Sprintf("%v", this.UserInvited), "ServiceExUserInvited", "ServiceExUserInvited", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ServiceEx_UserJoined) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ServiceEx_UserJoined{`,
		`UserJoined:` + strings.Replace(fmt.Sprintf("%v", this.UserJoined), "ServiceExUserJoined", "ServiceExUserJoined", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ServiceEx_UserKicked) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ServiceEx_UserKicked{`,
		`UserKicked:` + strings.Replace(fmt.Sprintf("%v", this.UserKicked), "ServiceExUserKicked", "ServiceExUserKicked", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ServiceEx_UserLeft) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ServiceEx_UserLeft{`,
		`UserLeft:` + strings.Replace(fmt.Sprintf("%v", this.UserLeft), "ServiceExUserLeft", "ServiceExUserLeft", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ServiceEx_GroupCreated) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ServiceEx_GroupCreated{`,
		`GroupCreated:` + strings.Replace(fmt.Sprintf("%v", this.GroupCreated), "ServiceExGroupCreated", "ServiceExGroupCreated", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ServiceEx_ChangedTitle) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ServiceEx_ChangedTitle{`,
		`ChangedTitle:` + strings.Replace(fmt.Sprintf("%v", this.ChangedTitle), "ServiceExChangedTitle", "ServiceExChangedTitle", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ServiceEx_ChangedTopic) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ServiceEx_ChangedTopic{`,
		`ChangedTopic:` + strings.Replace(fmt.Sprintf("%v", this.ChangedTopic), "ServiceExChangedTopic", "ServiceExChangedTopic", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ServiceEx_ChangedAbout) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ServiceEx_ChangedAbout{`,
		`ChangedAbout:` + strings.Replace(fmt.Sprintf("%v", this.ChangedAbout), "ServiceExChangedAbout", "ServiceExChangedAbout", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ServiceEx_ChangedAvatar) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ServiceEx_ChangedAvatar{`,
		`ChangedAvatar:` + strings.Replace(fmt.Sprintf("%v", this.ChangedAvatar), "ServiceExChangedAvatar", "ServiceExChangedAvatar", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ServiceEx_ContactRegistered) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ServiceEx_ContactRegistered{`,
		`ContactRegistered:` + strings.Replace(fmt.Sprintf("%v", this.ContactRegistered), "ServiceExContactRegistered", "ServiceExContactRegistered", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ServiceEx_PhoneMissed) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ServiceEx_PhoneMissed{`,
		`PhoneMissed:` + strings.Replace(fmt.Sprintf("%v", this.PhoneMissed), "ServiceExPhoneMissed", "ServiceExPhoneMissed", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ServiceEx_PhoneCall) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ServiceEx_PhoneCall{`,
		`PhoneCall:` + strings.Replace(fmt.Sprintf("%v", this.PhoneCall), "ServiceExPhoneCall", "ServiceExPhoneCall", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ServiceEx_PhoneRejected) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ServiceEx_PhoneRejected{`,
		`PhoneRejected:` + strings.Replace(fmt.Sprintf("%v", this.PhoneRejected), "ServiceExPhoneRejected", "ServiceExPhoneRejected", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ServiceEx_ChatArchived) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ServiceEx_ChatArchived{`,
		`ChatArchived:` + strings.Replace(fmt.Sprintf("%v", this.ChatArchived), "ServiceExChatArchived", "ServiceExChatArchived", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ServiceEx_ChatRestored) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ServiceEx_ChatRestored{`,
		`ChatRestored:` + strings.Replace(fmt.Sprintf("%v", this.ChatRestored), "ServiceExChatRestored", "ServiceExChatRestored", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ServiceEx_ChangedShortname) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ServiceEx_ChangedShortname{`,
		`ChangedShortname:` + strings.Replace(fmt.Sprintf("%v", this.ChangedShortname), "ServiceExChangedShortname", "ServiceExChangedShortname", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ServiceExUserInvited) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ServiceExUserInvited{`,
		`InvitedUid:` + fmt.Sprintf("%v", this.InvitedUid) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ServiceExUserJoined) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ServiceExUserJoined{`,
		`JoinedUserId:` + fmt.Sprintf("%v", this.JoinedUserId) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ServiceExUserKicked) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ServiceExUserKicked{`,
		`KickedUid:` + fmt.Sprintf("%v", this.KickedUid) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ServiceExUserLeft) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ServiceExUserLeft{`,
		`LeftUserId:` + fmt.Sprintf("%v", this.LeftUserId) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ServiceExGroupCreated) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ServiceExGroupCreated{`,
		`}`,
	}, "")
	return s
}
func (this *ServiceExChangedShortname) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ServiceExChangedShortname{`,
		`Shortname:` + fmt.Sprintf("%v", this.Shortname) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ServiceExChangedTitle) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ServiceExChangedTitle{`,
		`Title:` + fmt.Sprintf("%v", this.Title) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ServiceExChangedTopic) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ServiceExChangedTopic{`,
		`Topic:` + strings.Replace(fmt.Sprintf("%v", this.Topic), "StringValue", "types.StringValue", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ServiceExChangedAbout) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ServiceExChangedAbout{`,
		`About:` + strings.Replace(fmt.Sprintf("%v", this.About), "StringValue", "types.StringValue", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ServiceExChangedAvatar) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ServiceExChangedAvatar{`,
		`Avatar:` + strings.Replace(fmt.Sprintf("%v", this.Avatar), "Avatar", "Avatar", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ServiceExContactRegistered) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ServiceExContactRegistered{`,
		`Uid:` + fmt.Sprintf("%v", this.Uid) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ServiceExPhoneMissed) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ServiceExPhoneMissed{`,
		`}`,
	}, "")
	return s
}
func (this *ServiceExPhoneCall) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ServiceExPhoneCall{`,
		`Duration:` + fmt.Sprintf("%v", this.Duration) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ServiceExPhoneRejected) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ServiceExPhoneRejected{`,
		`}`,
	}, "")
	return s
}
func (this *ServiceExChatArchived) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ServiceExChatArchived{`,
		`}`,
	}, "")
	return s
}
func (this *ServiceExChatRestored) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ServiceExChatRestored{`,
		`}`,
	}, "")
	return s
}
func (this *DocumentMessage) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DocumentMessage{`,
		`FileId:` + fmt.Sprintf("%v", this.FileId) + `,`,
		`AccessHash:` + fmt.Sprintf("%v", this.AccessHash) + `,`,
		`FileSize:` + fmt.Sprintf("%v", this.FileSize) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`MimeType:` + fmt.Sprintf("%v", this.MimeType) + `,`,
		`Thumb:` + strings.Replace(fmt.Sprintf("%v", this.Thumb), "FastThumb", "FastThumb", 1) + `,`,
		`Ext:` + strings.Replace(this.Ext.String(), "DocumentEx", "DocumentEx", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DocumentEx) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DocumentEx{`,
		`Body:` + fmt.Sprintf("%v", this.Body) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DocumentEx_Photo) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DocumentEx_Photo{`,
		`Photo:` + strings.Replace(fmt.Sprintf("%v", this.Photo), "DocumentExPhoto", "DocumentExPhoto", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DocumentEx_Video) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DocumentEx_Video{`,
		`Video:` + strings.Replace(fmt.Sprintf("%v", this.Video), "DocumentExVideo", "DocumentExVideo", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DocumentEx_Voice) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DocumentEx_Voice{`,
		`Voice:` + strings.Replace(fmt.Sprintf("%v", this.Voice), "DocumentExVoice", "DocumentExVoice", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DocumentExPhoto) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DocumentExPhoto{`,
		`W:` + fmt.Sprintf("%v", this.W) + `,`,
		`H:` + fmt.Sprintf("%v", this.H) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DocumentExVideo) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DocumentExVideo{`,
		`W:` + fmt.Sprintf("%v", this.W) + `,`,
		`H:` + fmt.Sprintf("%v", this.H) + `,`,
		`Duration:` + fmt.Sprintf("%v", this.Duration) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DocumentExVoice) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DocumentExVoice{`,
		`Duration:` + fmt.Sprintf("%v", this.Duration) + `,`,
		`}`,
	}, "")
	return s
}
func (this *JsonMessage) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&JsonMessage{`,
		`RawJson:` + fmt.Sprintf("%v", this.RawJson) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UnsupportedMessage) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UnsupportedMessage{`,
		`}`,
	}, "")
	return s
}
func (this *StickerMessage) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&StickerMessage{`,
		`StickerId:` + strings.Replace(fmt.Sprintf("%v", this.StickerId), "Int32Value", "types.Int32Value", 1) + `,`,
		`FastPreview:` + strings.Replace(fmt.Sprintf("%v", this.FastPreview), "BytesValue", "types.BytesValue", 1) + `,`,
		`Image_512:` + strings.Replace(fmt.Sprintf("%v", this.Image_512), "ImageLocation", "ImageLocation", 1) + `,`,
		`Image_256:` + strings.Replace(fmt.Sprintf("%v", this.Image_256), "ImageLocation", "ImageLocation", 1) + `,`,
		`StickerCollectionId:` + strings.Replace(fmt.Sprintf("%v", this.StickerCollectionId), "Int32Value", "types.Int32Value", 1) + `,`,
		`StickerCollectionAccessHash:` + strings.Replace(fmt.Sprintf("%v", this.StickerCollectionAccessHash), "Int64Value", "types.Int64Value", 1) + `,`,
		`Emoji:` + strings.Replace(fmt.Sprintf("%v", this.Emoji), "StringValue", "types.StringValue", 1) + `,`,
		`AnimatedStickerJson:` + strings.Replace(fmt.Sprintf("%v", this.AnimatedStickerJson), "StringValue", "types.StringValue", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *BinaryMessage) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&BinaryMessage{`,
		`ContentTag:` + fmt.Sprintf("%v", this.ContentTag) + `,`,
		`Msg:` + fmt.Sprintf("%v", this.Msg) + `,`,
		`}`,
	}, "")
	return s
}
func (this *EmptyMessage) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&EmptyMessage{`,
		`}`,
	}, "")
	return s
}
func (this *DeletedMessage) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DeletedMessage{`,
		`IsLocal:` + strings.Replace(fmt.Sprintf("%v", this.IsLocal), "BoolValue", "types.BoolValue", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DialogShort) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DialogShort{`,
		`Peer:` + strings.Replace(fmt.Sprintf("%v", this.Peer), "Peer", "Peer", 1) + `,`,
		`Counter:` + fmt.Sprintf("%v", this.Counter) + `,`,
		`Date:` + fmt.Sprintf("%v", this.Date) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DialogGroup) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForDialogs := "[]*DialogShort{"
	for _, f := range this.Dialogs {
		repeatedStringForDialogs += strings.Replace(f.String(), "DialogShort", "DialogShort", 1) + ","
	}
	repeatedStringForDialogs += "}"
	s := strings.Join([]string{`&DialogGroup{`,
		`Title:` + fmt.Sprintf("%v", this.Title) + `,`,
		`Key:` + fmt.Sprintf("%v", this.Key) + `,`,
		`Dialogs:` + repeatedStringForDialogs + `,`,
		`}`,
	}, "")
	return s
}
func (this *MessageReaction) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&MessageReaction{`,
		`Users:` + fmt.Sprintf("%v", this.Users) + `,`,
		`Code:` + fmt.Sprintf("%v", this.Code) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SearchPredicate) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SearchPredicate{`,
		`Key:` + fmt.Sprintf("%v", this.Key) + `,`,
		`Values:` + fmt.Sprintf("%v", this.Values) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RequestSendMessage) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForPredicates := "[]*SearchPredicate{"
	for _, f := range this.Predicates {
		repeatedStringForPredicates += strings.Replace(f.String(), "SearchPredicate", "SearchPredicate", 1) + ","
	}
	repeatedStringForPredicates += "}"
	s := strings.Join([]string{`&RequestSendMessage{`,
		`Peer:` + strings.Replace(fmt.Sprintf("%v", this.Peer), "OutPeer", "OutPeer", 1) + `,`,
		`DeduplicationId:` + fmt.Sprintf("%v", this.DeduplicationId) + `,`,
		`Message:` + strings.Replace(this.Message.String(), "MessageContent", "MessageContent", 1) + `,`,
		`IsOnlyForUser:` + fmt.Sprintf("%v", this.IsOnlyForUser) + `,`,
		`Forward:` + strings.Replace(this.Forward.String(), "ReferencedMessages", "ReferencedMessages", 1) + `,`,
		`Reply:` + strings.Replace(this.Reply.String(), "ReferencedMessages", "ReferencedMessages", 1) + `,`,
		`Predicates:` + repeatedStringForPredicates + `,`,
		`WhiteList:` + fmt.Sprintf("%v", this.WhiteList) + `,`,
		`BlackList:` + fmt.Sprintf("%v", this.BlackList) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RequestUpdateMessage) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RequestUpdateMessage{`,
		`Mid:` + strings.Replace(fmt.Sprintf("%v", this.Mid), "UUIDValue", "UUIDValue", 1) + `,`,
		`UpdatedMessage:` + strings.Replace(this.UpdatedMessage.String(), "MessageContent", "MessageContent", 1) + `,`,
		`LastEditedAt:` + fmt.Sprintf("%v", this.LastEditedAt) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RequestMessageReceived) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RequestMessageReceived{`,
		`Peer:` + strings.Replace(fmt.Sprintf("%v", this.Peer), "OutPeer", "OutPeer", 1) + `,`,
		`Date:` + fmt.Sprintf("%v", this.Date) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RequestMessageRead) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RequestMessageRead{`,
		`Peer:` + strings.Replace(fmt.Sprintf("%v", this.Peer), "OutPeer", "OutPeer", 1) + `,`,
		`Date:` + fmt.Sprintf("%v", this.Date) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RequestDeleteMessageObsolete) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForMids := "[]*UUIDValue{"
	for _, f := range this.Mids {
		repeatedStringForMids += strings.Replace(fmt.Sprintf("%v", f), "UUIDValue", "UUIDValue", 1) + ","
	}
	repeatedStringForMids += "}"
	s := strings.Join([]string{`&RequestDeleteMessageObsolete{`,
		`Mids:` + repeatedStringForMids + `,`,
		`}`,
	}, "")
	return s
}
func (this *RequestDeleteMessage) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RequestDeleteMessage{`,
		`Peer:` + strings.Replace(fmt.Sprintf("%v", this.Peer), "Peer", "Peer", 1) + `,`,
		`MessageId:` + strings.Replace(fmt.Sprintf("%v", this.MessageId), "UUIDValue", "UUIDValue", 1) + `,`,
		`DeleteForUserOnly:` + fmt.Sprintf("%v", this.DeleteForUserOnly) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RequestClearChat) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RequestClearChat{`,
		`Peer:` + strings.Replace(fmt.Sprintf("%v", this.Peer), "OutPeer", "OutPeer", 1) + `,`,
		`LastMessageDate:` + fmt.Sprintf("%v", this.LastMessageDate) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RequestDeleteChat) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RequestDeleteChat{`,
		`Peer:` + strings.Replace(fmt.Sprintf("%v", this.Peer), "OutPeer", "OutPeer", 1) + `,`,
		`LastMessageDate:` + fmt.Sprintf("%v", this.LastMessageDate) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RequestArchiveChat) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RequestArchiveChat{`,
		`Peer:` + strings.Replace(fmt.Sprintf("%v", this.Peer), "OutPeer", "OutPeer", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RequestMessageSetReaction) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RequestMessageSetReaction{`,
		`Peer:` + strings.Replace(fmt.Sprintf("%v", this.Peer), "OutPeer", "OutPeer", 1) + `,`,
		`Code:` + fmt.Sprintf("%v", this.Code) + `,`,
		`Mid:` + strings.Replace(fmt.Sprintf("%v", this.Mid), "UUIDValue", "UUIDValue", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RequestMessageRemoveReaction) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RequestMessageRemoveReaction{`,
		`Peer:` + strings.Replace(fmt.Sprintf("%v", this.Peer), "OutPeer", "OutPeer", 1) + `,`,
		`Code:` + fmt.Sprintf("%v", this.Code) + `,`,
		`Mid:` + strings.Replace(fmt.Sprintf("%v", this.Mid), "UUIDValue", "UUIDValue", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ResponseReactionsResponse) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForReactions := "[]*MessageReaction{"
	for _, f := range this.Reactions {
		repeatedStringForReactions += strings.Replace(f.String(), "MessageReaction", "MessageReaction", 1) + ","
	}
	repeatedStringForReactions += "}"
	s := strings.Join([]string{`&ResponseReactionsResponse{`,
		`Seq:` + fmt.Sprintf("%v", this.Seq) + `,`,
		`State:` + fmt.Sprintf("%v", this.State) + `,`,
		`Reactions:` + repeatedStringForReactions + `,`,
		`}`,
	}, "")
	return s
}
func (this *ResponseSendMessage) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ResponseSendMessage{`,
		`MessageId:` + strings.Replace(fmt.Sprintf("%v", this.MessageId), "UUIDValue", "UUIDValue", 1) + `,`,
		`MessageDate:` + fmt.Sprintf("%v", this.MessageDate) + `,`,
		`PreviousMessageId:` + strings.Replace(fmt.Sprintf("%v", this.PreviousMessageId), "UUIDValue", "UUIDValue", 1) + `,`,
		`CreatorUserId:` + fmt.Sprintf("%v", this.CreatorUserId) + `,`,
		`Clock:` + fmt.Sprintf("%v", this.Clock) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateMessage) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateMessage{`,
		`Peer:` + strings.Replace(fmt.Sprintf("%v", this.Peer), "Peer", "Peer", 1) + `,`,
		`SenderUid:` + fmt.Sprintf("%v", this.SenderUid) + `,`,
		`Date:` + fmt.Sprintf("%v", this.Date) + `,`,
		`Message:` + strings.Replace(this.Message.String(), "MessageContent", "MessageContent", 1) + `,`,
		`Attributes:` + strings.Replace(this.Attributes.String(), "MessageAttributes", "MessageAttributes", 1) + `,`,
		`Mid:` + strings.Replace(fmt.Sprintf("%v", this.Mid), "UUIDValue", "UUIDValue", 1) + `,`,
		`Attach:` + fmt.Sprintf("%v", this.Attach) + `,`,
		`PreviousMid:` + strings.Replace(fmt.Sprintf("%v", this.PreviousMid), "UUIDValue", "UUIDValue", 1) + `,`,
		`Counter:` + strings.Replace(fmt.Sprintf("%v", this.Counter), "Int32Value", "types.Int32Value", 1) + `,`,
		`MyReadDate:` + strings.Replace(fmt.Sprintf("%v", this.MyReadDate), "Int64Value", "types.Int64Value", 1) + `,`,
		`RandomId:` + fmt.Sprintf("%v", this.RandomId) + `,`,
		`PrevMessageDate:` + strings.Replace(fmt.Sprintf("%v", this.PrevMessageDate), "Int64Value", "types.Int64Value", 1) + `,`,
		`ModifiedAt:` + fmt.Sprintf("%v", this.ModifiedAt) + `,`,
		`PrevEditInPeerAt:` + strings.Replace(fmt.Sprintf("%v", this.PrevEditInPeerAt), "Int64Value", "types.Int64Value", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateMessage_Forward) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateMessage_Forward{`,
		`Forward:` + strings.Replace(fmt.Sprintf("%v", this.Forward), "ReferencedMessages", "ReferencedMessages", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateMessage_Reply) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateMessage_Reply{`,
		`Reply:` + strings.Replace(fmt.Sprintf("%v", this.Reply), "ReferencedMessages", "ReferencedMessages", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateMessageContentChanged) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateMessageContentChanged{`,
		`Peer:` + strings.Replace(fmt.Sprintf("%v", this.Peer), "Peer", "Peer", 1) + `,`,
		`Message:` + strings.Replace(this.Message.String(), "MessageContent", "MessageContent", 1) + `,`,
		`Mid:` + strings.Replace(fmt.Sprintf("%v", this.Mid), "UUIDValue", "UUIDValue", 1) + `,`,
		`EditedAt:` + fmt.Sprintf("%v", this.EditedAt) + `,`,
		`PrevEditInPeerAt:` + fmt.Sprintf("%v", this.PrevEditInPeerAt) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateMessageSent) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateMessageSent{`,
		`Peer:` + strings.Replace(fmt.Sprintf("%v", this.Peer), "Peer", "Peer", 1) + `,`,
		`Rid:` + fmt.Sprintf("%v", this.Rid) + `,`,
		`Date:` + fmt.Sprintf("%v", this.Date) + `,`,
		`Mid:` + strings.Replace(fmt.Sprintf("%v", this.Mid), "UUIDValue", "UUIDValue", 1) + `,`,
		`PrevMid:` + strings.Replace(fmt.Sprintf("%v", this.PrevMid), "UUIDValue", "UUIDValue", 1) + `,`,
		`UnreadCounter:` + strings.Replace(fmt.Sprintf("%v", this.UnreadCounter), "Int32Value", "types.Int32Value", 1) + `,`,
		`MyReadDate:` + strings.Replace(fmt.Sprintf("%v", this.MyReadDate), "Int64Value", "types.Int64Value", 1) + `,`,
		`Attach:` + fmt.Sprintf("%v", this.Attach) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateMessageSent_Forward) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateMessageSent_Forward{`,
		`Forward:` + strings.Replace(fmt.Sprintf("%v", this.Forward), "ReferencedMessages", "ReferencedMessages", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateMessageSent_Reply) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateMessageSent_Reply{`,
		`Reply:` + strings.Replace(fmt.Sprintf("%v", this.Reply), "ReferencedMessages", "ReferencedMessages", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateMessageReceived) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateMessageReceived{`,
		`Peer:` + strings.Replace(fmt.Sprintf("%v", this.Peer), "Peer", "Peer", 1) + `,`,
		`StartDate:` + fmt.Sprintf("%v", this.StartDate) + `,`,
		`ReceivedDate:` + fmt.Sprintf("%v", this.ReceivedDate) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateMessageRead) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateMessageRead{`,
		`Peer:` + strings.Replace(fmt.Sprintf("%v", this.Peer), "Peer", "Peer", 1) + `,`,
		`StartDate:` + fmt.Sprintf("%v", this.StartDate) + `,`,
		`ReadDate:` + fmt.Sprintf("%v", this.ReadDate) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateMessageReadByMe) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateMessageReadByMe{`,
		`Peer:` + strings.Replace(fmt.Sprintf("%v", this.Peer), "Peer", "Peer", 1) + `,`,
		`StartDate:` + fmt.Sprintf("%v", this.StartDate) + `,`,
		`UnreadCounter:` + strings.Replace(fmt.Sprintf("%v", this.UnreadCounter), "Int32Value", "types.Int32Value", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateMessageDelete) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForMids := "[]*UUIDValue{"
	for _, f := range this.Mids {
		repeatedStringForMids += strings.Replace(fmt.Sprintf("%v", f), "UUIDValue", "UUIDValue", 1) + ","
	}
	repeatedStringForMids += "}"
	s := strings.Join([]string{`&UpdateMessageDelete{`,
		`Peer:` + strings.Replace(fmt.Sprintf("%v", this.Peer), "Peer", "Peer", 1) + `,`,
		`Mids:` + repeatedStringForMids + `,`,
		`Counter:` + strings.Replace(fmt.Sprintf("%v", this.Counter), "Int32Value", "types.Int32Value", 1) + `,`,
		`ActionDate:` + fmt.Sprintf("%v", this.ActionDate) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateChatClear) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateChatClear{`,
		`Peer:` + strings.Replace(fmt.Sprintf("%v", this.Peer), "Peer", "Peer", 1) + `,`,
		`ActionDate:` + fmt.Sprintf("%v", this.ActionDate) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateChatDelete) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateChatDelete{`,
		`Peer:` + strings.Replace(fmt.Sprintf("%v", this.Peer), "Peer", "Peer", 1) + `,`,
		`ActionDate:` + fmt.Sprintf("%v", this.ActionDate) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateChatArchive) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateChatArchive{`,
		`Peer:` + strings.Replace(fmt.Sprintf("%v", this.Peer), "Peer", "Peer", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateChatGroupsChanged) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForDialogs := "[]*DialogGroup{"
	for _, f := range this.Dialogs {
		repeatedStringForDialogs += strings.Replace(f.String(), "DialogGroup", "DialogGroup", 1) + ","
	}
	repeatedStringForDialogs += "}"
	s := strings.Join([]string{`&UpdateChatGroupsChanged{`,
		`Dialogs:` + repeatedStringForDialogs + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateReactionsUpdate) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForReactions := "[]*MessageReaction{"
	for _, f := range this.Reactions {
		repeatedStringForReactions += strings.Replace(f.String(), "MessageReaction", "MessageReaction", 1) + ","
	}
	repeatedStringForReactions += "}"
	s := strings.Join([]string{`&UpdateReactionsUpdate{`,
		`Peer:` + strings.Replace(fmt.Sprintf("%v", this.Peer), "Peer", "Peer", 1) + `,`,
		`Reactions:` + repeatedStringForReactions + `,`,
		`Mid:` + strings.Replace(fmt.Sprintf("%v", this.Mid), "UUIDValue", "UUIDValue", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateMessageRejectedByHook) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateMessageRejectedByHook{`,
		`Peer:` + strings.Replace(fmt.Sprintf("%v", this.Peer), "Peer", "Peer", 1) + `,`,
		`Rid:` + fmt.Sprintf("%v", this.Rid) + `,`,
		`Date:` + fmt.Sprintf("%v", this.Date) + `,`,
		`HookId:` + fmt.Sprintf("%v", this.HookId) + `,`,
		`Reason:` + strings.Replace(fmt.Sprintf("%v", this.Reason), "StringValue", "types.StringValue", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateMessageEditRejectedByHook) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateMessageEditRejectedByHook{`,
		`Peer:` + strings.Replace(fmt.Sprintf("%v", this.Peer), "Peer", "Peer", 1) + `,`,
		`Mid:` + strings.Replace(fmt.Sprintf("%v", this.Mid), "UUIDValue", "UUIDValue", 1) + `,`,
		`Date:` + fmt.Sprintf("%v", this.Date) + `,`,
		`HookId:` + fmt.Sprintf("%v", this.HookId) + `,`,
		`Reason:` + strings.Replace(fmt.Sprintf("%v", this.Reason), "StringValue", "types.StringValue", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateThreadCreated) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateThreadCreated{`,
		`Peer:` + strings.Replace(fmt.Sprintf("%v", this.Peer), "GroupOutPeer", "GroupOutPeer", 1) + `,`,
		`StartMessage:` + strings.Replace(fmt.Sprintf("%v", this.StartMessage), "UUIDValue", "UUIDValue", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateThreadLifted) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateThreadLifted{`,
		`Peer:` + strings.Replace(fmt.Sprintf("%v", this.Peer), "GroupOutPeer", "GroupOutPeer", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReferencedMessages) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForMids := "[]*UUIDValue{"
	for _, f := range this.Mids {
		repeatedStringForMids += strings.Replace(fmt.Sprintf("%v", f), "UUIDValue", "UUIDValue", 1) + ","
	}
	repeatedStringForMids += "}"
	s := strings.Join([]string{`&ReferencedMessages{`,
		`Mids:` + repeatedStringForMids + `,`,
		`}`,
	}, "")
	return s
}
func (this *HistoryMessage) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForReactions := "[]*MessageReaction{"
	for _, f := range this.Reactions {
		repeatedStringForReactions += strings.Replace(f.String(), "MessageReaction", "MessageReaction", 1) + ","
	}
	repeatedStringForReactions += "}"
	s := strings.Join([]string{`&HistoryMessage{`,
		`SenderUid:` + fmt.Sprintf("%v", this.SenderUid) + `,`,
		`Date:` + fmt.Sprintf("%v", this.Date) + `,`,
		`Message:` + strings.Replace(this.Message.String(), "MessageContent", "MessageContent", 1) + `,`,
		`State:` + fmt.Sprintf("%v", this.State) + `,`,
		`Reactions:` + repeatedStringForReactions + `,`,
		`Attribute:` + strings.Replace(this.Attribute.String(), "MessageAttributes", "MessageAttributes", 1) + `,`,
		`Mid:` + strings.Replace(fmt.Sprintf("%v", this.Mid), "UUIDValue", "UUIDValue", 1) + `,`,
		`HostPeer:` + strings.Replace(fmt.Sprintf("%v", this.HostPeer), "OutPeer", "OutPeer", 1) + `,`,
		`Attach:` + fmt.Sprintf("%v", this.Attach) + `,`,
		`SenderPeer:` + strings.Replace(fmt.Sprintf("%v", this.SenderPeer), "OutPeer", "OutPeer", 1) + `,`,
		`EditedAt:` + strings.Replace(fmt.Sprintf("%v", this.EditedAt), "Int64Value", "types.Int64Value", 1) + `,`,
		`PrevMid:` + strings.Replace(fmt.Sprintf("%v", this.PrevMid), "UUIDValue", "UUIDValue", 1) + `,`,
		`RandomId:` + fmt.Sprintf("%v", this.RandomId) + `,`,
		`}`,
	}, "")
	return s
}
func (this *HistoryMessage_Forward) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&HistoryMessage_Forward{`,
		`Forward:` + strings.Replace(fmt.Sprintf("%v", this.Forward), "ReferencedMessages", "ReferencedMessages", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *HistoryMessage_Reply) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&HistoryMessage_Reply{`,
		`Reply:` + strings.Replace(fmt.Sprintf("%v", this.Reply), "ReferencedMessages", "ReferencedMessages", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RequestLoadHistory) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RequestLoadHistory{`,
		`Peer:` + strings.Replace(fmt.Sprintf("%v", this.Peer), "OutPeer", "OutPeer", 1) + `,`,
		`Date:` + fmt.Sprintf("%v", this.Date) + `,`,
		`Limit:` + fmt.Sprintf("%v", this.Limit) + `,`,
		`LoadMode:` + fmt.Sprintf("%v", this.LoadMode) + `,`,
		`Optimizations:` + fmt.Sprintf("%v", this.Optimizations) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ResponseLoadHistory) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForHistory := "[]*HistoryMessage{"
	for _, f := range this.History {
		repeatedStringForHistory += strings.Replace(f.String(), "HistoryMessage", "HistoryMessage", 1) + ","
	}
	repeatedStringForHistory += "}"
	repeatedStringForUserPeers := "[]*UserOutPeer{"
	for _, f := range this.UserPeers {
		repeatedStringForUserPeers += strings.Replace(fmt.Sprintf("%v", f), "UserOutPeer", "UserOutPeer", 1) + ","
	}
	repeatedStringForUserPeers += "}"
	repeatedStringForGroupPeers := "[]*GroupOutPeer{"
	for _, f := range this.GroupPeers {
		repeatedStringForGroupPeers += strings.Replace(fmt.Sprintf("%v", f), "GroupOutPeer", "GroupOutPeer", 1) + ","
	}
	repeatedStringForGroupPeers += "}"
	s := strings.Join([]string{`&ResponseLoadHistory{`,
		`History:` + repeatedStringForHistory + `,`,
		`UserPeers:` + repeatedStringForUserPeers + `,`,
		`GroupPeers:` + repeatedStringForGroupPeers + `,`,
		`Counter:` + strings.Replace(fmt.Sprintf("%v", this.Counter), "Int32Value", "types.Int32Value", 1) + `,`,
		`CounterDate:` + fmt.Sprintf("%v", this.CounterDate) + `,`,
		`LastConversationMessageDate:` + strings.Replace(fmt.Sprintf("%v", this.LastConversationMessageDate), "Int64Value", "types.Int64Value", 1) + `,`,
		`CountForeignAfterLastReturned:` + fmt.Sprintf("%v", this.CountForeignAfterLastReturned) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RequestHistoryDifference) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RequestHistoryDifference{`,
		`Clock:` + fmt.Sprintf("%v", this.Clock) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ResponseHistoryDifference) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForHistory := "[]*HistoryMessage{"
	for _, f := range this.History {
		repeatedStringForHistory += strings.Replace(f.String(), "HistoryMessage", "HistoryMessage", 1) + ","
	}
	repeatedStringForHistory += "}"
	s := strings.Join([]string{`&ResponseHistoryDifference{`,
		`History:` + repeatedStringForHistory + `,`,
		`FromClock:` + fmt.Sprintf("%v", this.FromClock) + `,`,
		`Clock:` + fmt.Sprintf("%v", this.Clock) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Dialog) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Dialog{`,
		`Peer:` + strings.Replace(fmt.Sprintf("%v", this.Peer), "Peer", "Peer", 1) + `,`,
		`UnreadCount:` + fmt.Sprintf("%v", this.UnreadCount) + `,`,
		`SortDate:` + fmt.Sprintf("%v", this.SortDate) + `,`,
		`SenderUid:` + fmt.Sprintf("%v", this.SenderUid) + `,`,
		`Date:` + fmt.Sprintf("%v", this.Date) + `,`,
		`Message:` + strings.Replace(this.Message.String(), "MessageContent", "MessageContent", 1) + `,`,
		`State:` + fmt.Sprintf("%v", this.State) + `,`,
		`FirstUnreadDate:` + fmt.Sprintf("%v", this.FirstUnreadDate) + `,`,
		`Attributes:` + strings.Replace(this.Attributes.String(), "MessageAttributes", "MessageAttributes", 1) + `,`,
		`Mid:` + strings.Replace(fmt.Sprintf("%v", this.Mid), "UUIDValue", "UUIDValue", 1) + `,`,
		`IsFavourite:` + strings.Replace(fmt.Sprintf("%v", this.IsFavourite), "BoolValue", "types.BoolValue", 1) + `,`,
		`PinnedMessages:` + strings.Replace(this.PinnedMessages.String(), "PinnedMessages", "PinnedMessages", 1) + `,`,
		`HistoryMessage:` + strings.Replace(this.HistoryMessage.String(), "HistoryMessage", "HistoryMessage", 1) + `,`,
		`LastReceive:` + fmt.Sprintf("%v", this.LastReceive) + `,`,
		`LastRead:` + fmt.Sprintf("%v", this.LastRead) + `,`,
		`LastReactionAt:` + fmt.Sprintf("%v", this.LastReactionAt) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RequestLoadDialogs) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForPeersToLoad := "[]*Peer{"
	for _, f := range this.PeersToLoad {
		repeatedStringForPeersToLoad += strings.Replace(fmt.Sprintf("%v", f), "Peer", "Peer", 1) + ","
	}
	repeatedStringForPeersToLoad += "}"
	s := strings.Join([]string{`&RequestLoadDialogs{`,
		`MinDate:` + fmt.Sprintf("%v", this.MinDate) + `,`,
		`Limit:` + fmt.Sprintf("%v", this.Limit) + `,`,
		`Optimizations:` + fmt.Sprintf("%v", this.Optimizations) + `,`,
		`Filters:` + fmt.Sprintf("%v", this.Filters) + `,`,
		`PeersToLoad:` + repeatedStringForPeersToLoad + `,`,
		`}`,
	}, "")
	return s
}
func (this *ResponseLoadDialogs) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForDialogs := "[]*Dialog{"
	for _, f := range this.Dialogs {
		repeatedStringForDialogs += strings.Replace(f.String(), "Dialog", "Dialog", 1) + ","
	}
	repeatedStringForDialogs += "}"
	repeatedStringForUserPeers := "[]*UserOutPeer{"
	for _, f := range this.UserPeers {
		repeatedStringForUserPeers += strings.Replace(fmt.Sprintf("%v", f), "UserOutPeer", "UserOutPeer", 1) + ","
	}
	repeatedStringForUserPeers += "}"
	repeatedStringForGroupPeers := "[]*GroupOutPeer{"
	for _, f := range this.GroupPeers {
		repeatedStringForGroupPeers += strings.Replace(fmt.Sprintf("%v", f), "GroupOutPeer", "GroupOutPeer", 1) + ","
	}
	repeatedStringForGroupPeers += "}"
	s := strings.Join([]string{`&ResponseLoadDialogs{`,
		`Dialogs:` + repeatedStringForDialogs + `,`,
		`UserPeers:` + repeatedStringForUserPeers + `,`,
		`GroupPeers:` + repeatedStringForGroupPeers + `,`,
		`}`,
	}, "")
	return s
}
func (this *DialogData) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DialogData{`,
		`IsFavourite:` + fmt.Sprintf("%v", this.IsFavourite) + `,`,
		`CreatedAt:` + fmt.Sprintf("%v", this.CreatedAt) + `,`,
		`Clock:` + fmt.Sprintf("%v", this.Clock) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DialogIndex) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DialogIndex{`,
		`Peer:` + strings.Replace(fmt.Sprintf("%v", this.Peer), "Peer", "Peer", 1) + `,`,
		`LastMessageDate:` + fmt.Sprintf("%v", this.LastMessageDate) + `,`,
		`Data:` + strings.Replace(this.Data.String(), "DialogData", "DialogData", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DialogListEntry) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DialogListEntry{`,
		`Peer:` + strings.Replace(fmt.Sprintf("%v", this.Peer), "Peer", "Peer", 1) + `,`,
		`UnreadCount:` + fmt.Sprintf("%v", this.UnreadCount) + `,`,
		`MyReadDate:` + fmt.Sprintf("%v", this.MyReadDate) + `,`,
		`LastMessageDate:` + fmt.Sprintf("%v", this.LastMessageDate) + `,`,
		`ReceiveDate:` + fmt.Sprintf("%v", this.ReceiveDate) + `,`,
		`ReadDate:` + fmt.Sprintf("%v", this.ReadDate) + `,`,
		`EntryClock:` + fmt.Sprintf("%v", this.EntryClock) + `,`,
		`Data:` + strings.Replace(this.Data.String(), "DialogData", "DialogData", 1) + `,`,
		`LastUpdateOfMessageDate:` + fmt.Sprintf("%v", this.LastUpdateOfMessageDate) + `,`,
		`LastReactionDate:` + fmt.Sprintf("%v", this.LastReactionDate) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RequestFetchDialogIndex) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RequestFetchDialogIndex{`,
		`}`,
	}, "")
	return s
}
func (this *ResponseFetchDialogIndex) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForDialogIndices := "[]*DialogIndex{"
	for _, f := range this.DialogIndices {
		repeatedStringForDialogIndices += strings.Replace(f.String(), "DialogIndex", "DialogIndex", 1) + ","
	}
	repeatedStringForDialogIndices += "}"
	s := strings.Join([]string{`&ResponseFetchDialogIndex{`,
		`DialogIndices:` + repeatedStringForDialogIndices + `,`,
		`}`,
	}, "")
	return s
}
func (this *RequestDialogListDifference) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RequestDialogListDifference{`,
		`FromClock:` + fmt.Sprintf("%v", this.FromClock) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ResponseDialogListDifference) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForEntries := "[]*DialogListEntry{"
	for _, f := range this.Entries {
		repeatedStringForEntries += strings.Replace(f.String(), "DialogListEntry", "DialogListEntry", 1) + ","
	}
	repeatedStringForEntries += "}"
	s := strings.Join([]string{`&ResponseDialogListDifference{`,
		`Entries:` + repeatedStringForEntries + `,`,
		`Clock:` + fmt.Sprintf("%v", this.Clock) + `,`,
		`PrevClock:` + fmt.Sprintf("%v", this.PrevClock) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RequestGetLastConversationMessages) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForPeers := "[]*Peer{"
	for _, f := range this.Peers {
		repeatedStringForPeers += strings.Replace(fmt.Sprintf("%v", f), "Peer", "Peer", 1) + ","
	}
	repeatedStringForPeers += "}"
	s := strings.Join([]string{`&RequestGetLastConversationMessages{`,
		`Peers:` + repeatedStringForPeers + `,`,
		`}`,
	}, "")
	return s
}
func (this *ResponseGetLastConversationMessages) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForMessages := "[]*ResponseGetLastConversationMessages_Pair{"
	for _, f := range this.Messages {
		repeatedStringForMessages += strings.Replace(fmt.Sprintf("%v", f), "ResponseGetLastConversationMessages_Pair", "ResponseGetLastConversationMessages_Pair", 1) + ","
	}
	repeatedStringForMessages += "}"
	s := strings.Join([]string{`&ResponseGetLastConversationMessages{`,
		`Messages:` + repeatedStringForMessages + `,`,
		`}`,
	}, "")
	return s
}
func (this *ResponseGetLastConversationMessages_Pair) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ResponseGetLastConversationMessages_Pair{`,
		`Peer:` + strings.Replace(fmt.Sprintf("%v", this.Peer), "Peer", "Peer", 1) + `,`,
		`Message:` + strings.Replace(this.Message.String(), "HistoryMessage", "HistoryMessage", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RequestLoadArchived) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RequestLoadArchived{`,
		`NextOffset:` + strings.Replace(fmt.Sprintf("%v", this.NextOffset), "BytesValue", "types.BytesValue", 1) + `,`,
		`Limit:` + fmt.Sprintf("%v", this.Limit) + `,`,
		`Optimizations:` + fmt.Sprintf("%v", this.Optimizations) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ResponseLoadArchived) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForDialogs := "[]*Dialog{"
	for _, f := range this.Dialogs {
		repeatedStringForDialogs += strings.Replace(f.String(), "Dialog", "Dialog", 1) + ","
	}
	repeatedStringForDialogs += "}"
	repeatedStringForUserPeers := "[]*UserOutPeer{"
	for _, f := range this.UserPeers {
		repeatedStringForUserPeers += strings.Replace(fmt.Sprintf("%v", f), "UserOutPeer", "UserOutPeer", 1) + ","
	}
	repeatedStringForUserPeers += "}"
	repeatedStringForGroupPeers := "[]*GroupOutPeer{"
	for _, f := range this.GroupPeers {
		repeatedStringForGroupPeers += strings.Replace(fmt.Sprintf("%v", f), "GroupOutPeer", "GroupOutPeer", 1) + ","
	}
	repeatedStringForGroupPeers += "}"
	s := strings.Join([]string{`&ResponseLoadArchived{`,
		`Dialogs:` + repeatedStringForDialogs + `,`,
		`NextOffset:` + strings.Replace(fmt.Sprintf("%v", this.NextOffset), "BytesValue", "types.BytesValue", 1) + `,`,
		`UserPeers:` + repeatedStringForUserPeers + `,`,
		`GroupPeers:` + repeatedStringForGroupPeers + `,`,
		`}`,
	}, "")
	return s
}
func (this *RequestLoadGroupedDialogs) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RequestLoadGroupedDialogs{`,
		`Optimizations:` + fmt.Sprintf("%v", this.Optimizations) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ResponseLoadGroupedDialogs) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForDialogs := "[]*DialogGroup{"
	for _, f := range this.Dialogs {
		repeatedStringForDialogs += strings.Replace(f.String(), "DialogGroup", "DialogGroup", 1) + ","
	}
	repeatedStringForDialogs += "}"
	repeatedStringForUserPeers := "[]*UserOutPeer{"
	for _, f := range this.UserPeers {
		repeatedStringForUserPeers += strings.Replace(fmt.Sprintf("%v", f), "UserOutPeer", "UserOutPeer", 1) + ","
	}
	repeatedStringForUserPeers += "}"
	repeatedStringForGroupPeers := "[]*GroupOutPeer{"
	for _, f := range this.GroupPeers {
		repeatedStringForGroupPeers += strings.Replace(fmt.Sprintf("%v", f), "GroupOutPeer", "GroupOutPeer", 1) + ","
	}
	repeatedStringForGroupPeers += "}"
	s := strings.Join([]string{`&ResponseLoadGroupedDialogs{`,
		`Dialogs:` + repeatedStringForDialogs + `,`,
		`ShowArchived:` + strings.Replace(fmt.Sprintf("%v", this.ShowArchived), "BoolValue", "types.BoolValue", 1) + `,`,
		`ShowInvite:` + strings.Replace(fmt.Sprintf("%v", this.ShowInvite), "BoolValue", "types.BoolValue", 1) + `,`,
		`UserPeers:` + repeatedStringForUserPeers + `,`,
		`GroupPeers:` + repeatedStringForGroupPeers + `,`,
		`}`,
	}, "")
	return s
}
func (this *ResponseDialogsOrder) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForGroups := "[]*DialogGroup{"
	for _, f := range this.Groups {
		repeatedStringForGroups += strings.Replace(f.String(), "DialogGroup", "DialogGroup", 1) + ","
	}
	repeatedStringForGroups += "}"
	s := strings.Join([]string{`&ResponseDialogsOrder{`,
		`Seq:` + fmt.Sprintf("%v", this.Seq) + `,`,
		`State:` + fmt.Sprintf("%v", this.State) + `,`,
		`Groups:` + repeatedStringForGroups + `,`,
		`}`,
	}, "")
	return s
}
func (this *RequestHideDialog) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RequestHideDialog{`,
		`Peer:` + strings.Replace(fmt.Sprintf("%v", this.Peer), "OutPeer", "OutPeer", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RequestShowDialog) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RequestShowDialog{`,
		`Peer:` + strings.Replace(fmt.Sprintf("%v", this.Peer), "OutPeer", "OutPeer", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RequestFavouriteDialog) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RequestFavouriteDialog{`,
		`Peer:` + strings.Replace(fmt.Sprintf("%v", this.Peer), "OutPeer", "OutPeer", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RequestUnfavouriteDialog) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RequestUnfavouriteDialog{`,
		`Peer:` + strings.Replace(fmt.Sprintf("%v", this.Peer), "OutPeer", "OutPeer", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateDialogFavouriteChanged) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateDialogFavouriteChanged{`,
		`Peer:` + strings.Replace(fmt.Sprintf("%v", this.Peer), "Peer", "Peer", 1) + `,`,
		`IsFavourite:` + strings.Replace(fmt.Sprintf("%v", this.IsFavourite), "BoolValue", "types.BoolValue", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RequestNotifyDialogOpened) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RequestNotifyDialogOpened{`,
		`Peer:` + strings.Replace(fmt.Sprintf("%v", this.Peer), "OutPeer", "OutPeer", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PinnedMessages) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForMids := "[]*UUIDValue{"
	for _, f := range this.Mids {
		repeatedStringForMids += strings.Replace(fmt.Sprintf("%v", f), "UUIDValue", "UUIDValue", 1) + ","
	}
	repeatedStringForMids += "}"
	s := strings.Join([]string{`&PinnedMessages{`,
		`Mids:` + repeatedStringForMids + `,`,
		`}`,
	}, "")
	return s
}
func (this *RequestPinMessage) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RequestPinMessage{`,
		`Peer:` + strings.Replace(fmt.Sprintf("%v", this.Peer), "OutPeer", "OutPeer", 1) + `,`,
		`Mid:` + strings.Replace(fmt.Sprintf("%v", this.Mid), "UUIDValue", "UUIDValue", 1) + `,`,
		`LastPinDate:` + fmt.Sprintf("%v", this.LastPinDate) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RequestUnpinMessage) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RequestUnpinMessage{`,
		`Peer:` + strings.Replace(fmt.Sprintf("%v", this.Peer), "OutPeer", "OutPeer", 1) + `,`,
		`Mid:` + strings.Replace(fmt.Sprintf("%v", this.Mid), "UUIDValue", "UUIDValue", 1) + `,`,
		`LastPinDate:` + fmt.Sprintf("%v", this.LastPinDate) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdatePinnedMessagesChanged) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdatePinnedMessagesChanged{`,
		`Peer:` + strings.Replace(fmt.Sprintf("%v", this.Peer), "Peer", "Peer", 1) + `,`,
		`PinnedMessages:` + strings.Replace(this.PinnedMessages.String(), "PinnedMessages", "PinnedMessages", 1) + `,`,
		`ActionDate:` + fmt.Sprintf("%v", this.ActionDate) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RequestGetUpdatedMessages) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RequestGetUpdatedMessages{`,
		`Peer:` + strings.Replace(fmt.Sprintf("%v", this.Peer), "Peer", "Peer", 1) + `,`,
		`FromClock:` + fmt.Sprintf("%v", this.FromClock) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ResponseGetUpdatedMessages) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForMessages := "[]*ResponseGetUpdatedMessages_UpdatedMessage{"
	for _, f := range this.Messages {
		repeatedStringForMessages += strings.Replace(fmt.Sprintf("%v", f), "ResponseGetUpdatedMessages_UpdatedMessage", "ResponseGetUpdatedMessages_UpdatedMessage", 1) + ","
	}
	repeatedStringForMessages += "}"
	s := strings.Join([]string{`&ResponseGetUpdatedMessages{`,
		`Messages:` + repeatedStringForMessages + `,`,
		`PeerClock:` + fmt.Sprintf("%v", this.PeerClock) + `,`,
		`NextAvailable:` + fmt.Sprintf("%v", this.NextAvailable) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ResponseGetUpdatedMessages_UpdatedMessage) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ResponseGetUpdatedMessages_UpdatedMessage{`,
		`Mid:` + strings.Replace(fmt.Sprintf("%v", this.Mid), "UUIDValue", "UUIDValue", 1) + `,`,
		`Message:` + strings.Replace(this.Message.String(), "MessageContent", "MessageContent", 1) + `,`,
		`ModifiedAt:` + fmt.Sprintf("%v", this.ModifiedAt) + `,`,
		`}`,
	}, "")
	return s
}
func (this *MessageStatus) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&MessageStatus{`,
		`Clock:` + fmt.Sprintf("%v", this.Clock) + `,`,
		`UserId:` + fmt.Sprintf("%v", this.UserId) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RequestMessageReads) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RequestMessageReads{`,
		`Mid:` + strings.Replace(fmt.Sprintf("%v", this.Mid), "UUIDValue", "UUIDValue", 1) + `,`,
		`Limit:` + fmt.Sprintf("%v", this.Limit) + `,`,
		`TimestampFrom:` + fmt.Sprintf("%v", this.TimestampFrom) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RequestMessageReceives) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RequestMessageReceives{`,
		`Mid:` + strings.Replace(fmt.Sprintf("%v", this.Mid), "UUIDValue", "UUIDValue", 1) + `,`,
		`Limit:` + fmt.Sprintf("%v", this.Limit) + `,`,
		`TimestampFrom:` + fmt.Sprintf("%v", this.TimestampFrom) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ResponseMessageReads) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForStatus := "[]*MessageStatus{"
	for _, f := range this.Status {
		repeatedStringForStatus += strings.Replace(f.String(), "MessageStatus", "MessageStatus", 1) + ","
	}
	repeatedStringForStatus += "}"
	s := strings.Join([]string{`&ResponseMessageReads{`,
		`Status:` + repeatedStringForStatus + `,`,
		`TimestampTill:` + fmt.Sprintf("%v", this.TimestampTill) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ResponseMessageReceives) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForStatus := "[]*MessageStatus{"
	for _, f := range this.Status {
		repeatedStringForStatus += strings.Replace(f.String(), "MessageStatus", "MessageStatus", 1) + ","
	}
	repeatedStringForStatus += "}"
	s := strings.Join([]string{`&ResponseMessageReceives{`,
		`Status:` + repeatedStringForStatus + `,`,
		`TimestampTill:` + fmt.Sprintf("%v", this.TimestampTill) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringMessaging(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *MessageAttributes) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessaging
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MessageAttributes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MessageAttributes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsMentioned", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessaging
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.IsMentioned == nil {
				m.IsMentioned = &types.BoolValue{}
			}
			if err := m.IsMentioned.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsHighlighted", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessaging
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.IsHighlighted == nil {
				m.IsHighlighted = &types.BoolValue{}
			}
			if err := m.IsHighlighted.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsNotified", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessaging
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.IsNotified == nil {
				m.IsNotified = &types.BoolValue{}
			}
			if err := m.IsNotified.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsOnlyForYou", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessaging
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.IsOnlyForYou == nil {
				m.IsOnlyForYou = &types.BoolValue{}
			}
			if err := m.IsOnlyForYou.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessaging(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessaging
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessaging
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QuotedMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessaging
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QuotedMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QuotedMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MessageId", wireType)
			}
			m.MessageId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MessageId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PublicGroupId", wireType)
			}
			m.PublicGroupId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PublicGroupId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SenderUserId", wireType)
			}
			m.SenderUserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SenderUserId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MessageDate", wireType)
			}
			m.MessageDate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MessageDate |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field QuotedMessageContent", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessaging
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.QuotedMessageContent == nil {
				m.QuotedMessageContent = &MessageContent{}
			}
			if err := m.QuotedMessageContent.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessaging(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessaging
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessaging
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MessageMedia) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessaging
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MessageMedia: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MessageMedia: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Webpage", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessaging
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Webpage == nil {
				m.Webpage = &WebpageMedia{}
			}
			if err := m.Webpage.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Image", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessaging
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Image == nil {
				m.Image = &ImageMedia{}
			}
			if err := m.Image.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Audio", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessaging
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Audio == nil {
				m.Audio = &AudioMedia{}
			}
			if err := m.Audio.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Actions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessaging
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Actions = append(m.Actions, &InteractiveMediaGroup{})
			if err := m.Actions[len(m.Actions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessaging(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessaging
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessaging
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WebpageMedia) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessaging
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WebpageMedia: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WebpageMedia: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Url", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessaging
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Url == nil {
				m.Url = &types.StringValue{}
			}
			if err := m.Url.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessaging
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Title == nil {
				m.Title = &types.StringValue{}
			}
			if err := m.Title.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessaging
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Description == nil {
				m.Description = &types.StringValue{}
			}
			if err := m.Description.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Image", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessaging
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Image == nil {
				m.Image = &ImageLocation{}
			}
			if err := m.Image.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessaging(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessaging
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessaging
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ImageMedia) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessaging
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ImageMedia: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ImageMedia: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Image", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessaging
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Image == nil {
				m.Image = &ImageLocation{}
			}
			if err := m.Image.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessaging(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessaging
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessaging
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AudioMedia) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessaging
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AudioMedia: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AudioMedia: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Audio", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessaging
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Audio == nil {
				m.Audio = &AudioLocation{}
			}
			if err := m.Audio.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessaging(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessaging
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessaging
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InteractiveMediaWidget) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessaging
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InteractiveMediaWidget: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InteractiveMediaWidget: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InteractiveMediaButton", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessaging
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &InteractiveMediaButton{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Body = &InteractiveMediaWidget_InteractiveMediaButton{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InteractiveMediaSelect", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessaging
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &InteractiveMediaSelect{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Body = &InteractiveMediaWidget_InteractiveMediaSelect{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessaging(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessaging
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessaging
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InteractiveMediaButton) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessaging
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InteractiveMediaButton: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InteractiveMediaButton: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessaging
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Label", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessaging
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Label == nil {
				m.Label = &types.StringValue{}
			}
			if err := m.Label.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessaging(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessaging
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessaging
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InteractiveMediaSelect) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessaging
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InteractiveMediaSelect: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InteractiveMediaSelect: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Options", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessaging
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Options = append(m.Options, &InteractiveMediaSelectOption{})
			if err := m.Options[len(m.Options)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Label", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessaging
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Label == nil {
				m.Label = &types.StringValue{}
			}
			if err := m.Label.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultValue", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessaging
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DefaultValue == nil {
				m.DefaultValue = &types.StringValue{}
			}
			if err := m.DefaultValue.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessaging(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessaging
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessaging
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InteractiveMediaSelectOption) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessaging
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InteractiveMediaSelectOption: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InteractiveMediaSelectOption: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessaging
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Label", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessaging
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Label = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessaging(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessaging
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessaging
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InteractiveMedia) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessaging
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InteractiveMedia: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InteractiveMedia: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessaging
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Widget", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessaging
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Widget == nil {
				m.Widget = &InteractiveMediaWidget{}
			}
			if err := m.Widget.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Style", wireType)
			}
			m.Style = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Style |= InteractiveMediaStyle(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Confirm", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessaging
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Confirm == nil {
				m.Confirm = &InteractiveMediaConfirm{}
			}
			if err := m.Confirm.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessaging(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessaging
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessaging
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InteractiveMediaTranslation) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessaging
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InteractiveMediaTranslation: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InteractiveMediaTranslation: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessaging
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessaging
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessaging(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessaging
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessaging
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InteractiveMediaTranslationGroup) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessaging
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InteractiveMediaTranslationGroup: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InteractiveMediaTranslationGroup: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Language", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessaging
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Language = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Messages", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessaging
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Messages = append(m.Messages, &InteractiveMediaTranslation{})
			if err := m.Messages[len(m.Messages)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessaging(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessaging
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessaging
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InteractiveMediaGroup) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessaging
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InteractiveMediaGroup: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InteractiveMediaGroup: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Actions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessaging
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Actions = append(m.Actions, &InteractiveMedia{})
			if err := m.Actions[len(m.Actions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessaging
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Title == nil {
				m.Title = &types.StringValue{}
			}
			if err := m.Title.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessaging
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Description == nil {
				m.Description = &types.StringValue{}
			}
			if err := m.Description.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Translations", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessaging
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Translations = append(m.Translations, &InteractiveMediaTranslationGroup{})
			if err := m.Translations[len(m.Translations)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessaging(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessaging
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessaging
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InteractiveMediaConfirm) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessaging
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InteractiveMediaConfirm: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InteractiveMediaConfirm: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Text", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessaging
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Text == nil {
				m.Text = &types.StringValue{}
			}
			if err := m.Text.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessaging
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Title == nil {
				m.Title = &types.StringValue{}
			}
			if err := m.Title.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ok", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessaging
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Ok == nil {
				m.Ok = &types.StringValue{}
			}
			if err := m.Ok.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dismiss", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessaging
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Dismiss == nil {
				m.Dismiss = &types.StringValue{}
			}
			if err := m.Dismiss.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessaging(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessaging
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessaging
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateInteractiveMediaEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessaging
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateInteractiveMediaEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateInteractiveMediaEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessaging
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Mid == nil {
				m.Mid = &UUIDValue{}
			}
			if err := m.Mid.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessaging
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessaging
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			m.Uid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uid |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMessaging(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessaging
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessaging
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestDoInteractiveMediaAction) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessaging
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestDoInteractiveMediaAction: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestDoInteractiveMediaAction: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessaging
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Mid == nil {
				m.Mid = &UUIDValue{}
			}
			if err := m.Mid.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessaging
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessaging
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessaging(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessaging
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessaging
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MessageContent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessaging
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MessageContent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MessageContent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TextMessage", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessaging
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &TextMessage{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Body = &MessageContent_TextMessage{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServiceMessage", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessaging
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ServiceMessage{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Body = &MessageContent_ServiceMessage{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DocumentMessage", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessaging
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &DocumentMessage{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Body = &MessageContent_DocumentMessage{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JsonMessage", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessaging
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &JsonMessage{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Body = &MessageContent_JsonMessage{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnsupportedMessage", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessaging
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &UnsupportedMessage{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Body = &MessageContent_UnsupportedMessage{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StickerMessage", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessaging
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &StickerMessage{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Body = &MessageContent_StickerMessage{v}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BinaryMessage", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessaging
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &BinaryMessage{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Body = &MessageContent_BinaryMessage{v}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EmptyMessage", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessaging
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &EmptyMessage{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Body = &MessageContent_EmptyMessage{v}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeletedMessage", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessaging
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &DeletedMessage{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Body = &MessageContent_DeletedMessage{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessaging(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessaging
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessaging
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TextMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessaging
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TextMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TextMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Text", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessaging
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Text = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ext", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessaging
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Ext == nil {
				m.Ext = &TextMessageEx{}
			}
			if err := m.Ext.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Media", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessaging
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Media = append(m.Media, &MessageMedia{})
			if err := m.Media[len(m.Media)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Extensions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessaging
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Extensions = append(m.Extensions, &Any{})
			if err := m.Extensions[len(m.Extensions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mentions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessaging
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Mentions = append(m.Mentions, &Mention{})
			if err := m.Mentions[len(m.Mentions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessaging(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessaging
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessaging
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Mention) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessaging
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Mention: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Mention: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Peer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessaging
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Peer == nil {
				m.Peer = &Peer{}
			}
			if err := m.Peer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field All", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.All = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipMessaging(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessaging
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessaging
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TextMessageEx) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessaging
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TextMessageEx: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TextMessageEx: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TextExMarkdown", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessaging
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &TextExMarkdown{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Body = &TextMessageEx_TextExMarkdown{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TextModernMessage", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessaging
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &TextModernMessage{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Body = &TextMessageEx_TextModernMessage{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TextCommand", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessaging
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &TextCommand{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Body = &TextMessageEx_TextCommand{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessaging(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessaging
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessaging
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TextExMarkdown) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessaging
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TextExMarkdown: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TextExMarkdown: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Markdown", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessaging
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Markdown = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessaging(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessaging
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessaging
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TextModernMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessaging
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TextModernMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TextModernMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Text", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessaging
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Text == nil {
				m.Text = &types.StringValue{}
			}
			if err := m.Text.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SenderNameOverride", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessaging
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SenderNameOverride == nil {
				m.SenderNameOverride = &types.StringValue{}
			}
			if err := m.SenderNameOverride.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SenderPhotoOverride", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessaging
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SenderPhotoOverride == nil {
				m.SenderPhotoOverride = &Avatar{}
			}
			if err := m.SenderPhotoOverride.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Style", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessaging
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Style == nil {
				m.Style = &ParagraphStyle{}
			}
			if err := m.Style.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Attaches", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessaging
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Attaches = append(m.Attaches, &TextModernAttach{})
			if err := m.Attaches[len(m.Attaches)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessaging(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessaging
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessaging
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ParagraphStyle) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessaging
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ParagraphStyle: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ParagraphStyle: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShowParagraph", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessaging
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ShowParagraph == nil {
				m.ShowParagraph = &types.BoolValue{}
			}
			if err := m.ShowParagraph.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ParagraphColor", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessaging
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ParagraphColor == nil {
				m.ParagraphColor = &Color{}
			}
			if err := m.ParagraphColor.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BgColor", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessaging
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BgColor == nil {
				m.BgColor = &Color{}
			}
			if err := m.BgColor.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessaging(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessaging
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessaging
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TextModernAttach) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessaging
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TextModernAttach: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TextModernAttach: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessaging
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Title == nil {
				m.Title = &types.StringValue{}
			}
			if err := m.Title.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TitleUrl", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessaging
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TitleUrl == nil {
				m.TitleUrl = &types.StringValue{}
			}
			if err := m.TitleUrl.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TitleIcon", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessaging
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TitleIcon == nil {
				m.TitleIcon = &ImageLocation{}
			}
			if err := m.TitleIcon.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Text", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessaging
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Text == nil {
				m.Text = &types.StringValue{}
			}
			if err := m.Text.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Style", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessaging
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Style == nil {
				m.Style = &ParagraphStyle{}
			}
			if err := m.Style.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fields", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessaging
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Fields = append(m.Fields, &TextModernField{})
			if err := m.Fields[len(m.Fields)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessaging(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessaging
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessaging
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TextModernField) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessaging
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TextModernField: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TextModernField: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessaging
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessaging
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsShort", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessaging
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.IsShort == nil {
				m.IsShort = &types.BoolValue{}
			}
			if err := m.IsShort.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessaging(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessaging
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessaging
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TextCommand) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessaging
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TextCommand: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TextCommand: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Command", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessaging
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Command = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Args", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessaging
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Args = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessaging(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessaging
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessaging
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ServiceMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessaging
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ServiceMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ServiceMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Text", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessaging
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Text = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ext", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessaging
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Ext == nil {
				m.Ext = &ServiceEx{}
			}
			if err := m.Ext.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessaging(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessaging
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessaging
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ServiceEx) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessaging
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ServiceEx: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ServiceEx: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserInvited", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessaging
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ServiceExUserInvited{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Body = &ServiceEx_UserInvited{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserJoined", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessaging
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ServiceExUserJoined{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Body = &ServiceEx_UserJoined{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserKicked", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessaging
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ServiceExUserKicked{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Body = &ServiceEx_UserKicked{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserLeft", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessaging
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ServiceExUserLeft{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Body = &ServiceEx_UserLeft{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupCreated", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessaging
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ServiceExGroupCreated{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Body = &ServiceEx_GroupCreated{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChangedTitle", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessaging
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ServiceExChangedTitle{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Body = &ServiceEx_ChangedTitle{v}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChangedTopic", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessaging
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ServiceExChangedTopic{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Body = &ServiceEx_ChangedTopic{v}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChangedAbout", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessaging
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ServiceExChangedAbout{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Body = &ServiceEx_ChangedAbout{v}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChangedAvatar", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessaging
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ServiceExChangedAvatar{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Body = &ServiceEx_ChangedAvatar{v}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContactRegistered", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessaging
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ServiceExContactRegistered{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Body = &ServiceEx_ContactRegistered{v}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PhoneMissed", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessaging
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ServiceExPhoneMissed{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Body = &ServiceEx_PhoneMissed{v}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PhoneCall", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessaging
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ServiceExPhoneCall{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Body = &ServiceEx_PhoneCall{v}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PhoneRejected", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessaging
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ServiceExPhoneRejected{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Body = &ServiceEx_PhoneRejected{v}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChatArchived", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessaging
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ServiceExChatArchived{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Body = &ServiceEx_ChatArchived{v}
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChatRestored", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessaging
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ServiceExChatRestored{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Body = &ServiceEx_ChatRestored{v}
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChangedShortname", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessaging
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ServiceExChangedShortname{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Body = &ServiceEx_ChangedShortname{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessaging(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessaging
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessaging
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ServiceExUserInvited) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessaging
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ServiceExUserInvited: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ServiceExUserInvited: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InvitedUid", wireType)
			}
			m.InvitedUid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InvitedUid |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMessaging(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessaging
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessaging
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ServiceExUserJoined) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessaging
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ServiceExUserJoined: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ServiceExUserJoined: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field JoinedUserId", wireType)
			}
			m.JoinedUserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.JoinedUserId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMessaging(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessaging
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessaging
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ServiceExUserKicked) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessaging
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ServiceExUserKicked: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ServiceExUserKicked: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field KickedUid", wireType)
			}
			m.KickedUid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.KickedUid |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMessaging(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessaging
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessaging
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ServiceExUserLeft) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessaging
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ServiceExUserLeft: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ServiceExUserLeft: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LeftUserId", wireType)
			}
			m.LeftUserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LeftUserId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMessaging(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessaging
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessaging
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ServiceExGroupCreated) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessaging
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ServiceExGroupCreated: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ServiceExGroupCreated: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMessaging(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessaging
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessaging
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ServiceExChangedShortname) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessaging
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ServiceExChangedShortname: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ServiceExChangedShortname: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Shortname", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessaging
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Shortname = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessaging(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessaging
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessaging
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ServiceExChangedTitle) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessaging
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ServiceExChangedTitle: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ServiceExChangedTitle: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessaging
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessaging(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessaging
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessaging
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ServiceExChangedTopic) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessaging
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ServiceExChangedTopic: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ServiceExChangedTopic: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Topic", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessaging
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Topic == nil {
				m.Topic = &types.StringValue{}
			}
			if err := m.Topic.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessaging(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessaging
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessaging
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ServiceExChangedAbout) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessaging
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ServiceExChangedAbout: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ServiceExChangedAbout: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field About", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessaging
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.About == nil {
				m.About = &types.StringValue{}
			}
			if err := m.About.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessaging(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessaging
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessaging
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ServiceExChangedAvatar) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessaging
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ServiceExChangedAvatar: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ServiceExChangedAvatar: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Avatar", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessaging
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Avatar == nil {
				m.Avatar = &Avatar{}
			}
			if err := m.Avatar.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessaging(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessaging
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessaging
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ServiceExContactRegistered) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessaging
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ServiceExContactRegistered: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ServiceExContactRegistered: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			m.Uid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uid |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMessaging(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessaging
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessaging
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ServiceExPhoneMissed) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessaging
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ServiceExPhoneMissed: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ServiceExPhoneMissed: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMessaging(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessaging
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessaging
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ServiceExPhoneCall) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessaging
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ServiceExPhoneCall: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ServiceExPhoneCall: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Duration", wireType)
			}
			m.Duration = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Duration |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMessaging(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessaging
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessaging
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ServiceExPhoneRejected) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessaging
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ServiceExPhoneRejected: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ServiceExPhoneRejected: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMessaging(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessaging
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessaging
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ServiceExChatArchived) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessaging
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ServiceExChatArchived: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ServiceExChatArchived: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMessaging(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessaging
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessaging
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ServiceExChatRestored) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessaging
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ServiceExChatRestored: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ServiceExChatRestored: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMessaging(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessaging
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessaging
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DocumentMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessaging
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DocumentMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DocumentMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FileId", wireType)
			}
			m.FileId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FileId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccessHash", wireType)
			}
			m.AccessHash = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AccessHash |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FileSize", wireType)
			}
			m.FileSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FileSize |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessaging
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MimeType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessaging
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MimeType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Thumb", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessaging
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Thumb == nil {
				m.Thumb = &FastThumb{}
			}
			if err := m.Thumb.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ext", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessaging
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Ext == nil {
				m.Ext = &DocumentEx{}
			}
			if err := m.Ext.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessaging(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessaging
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessaging
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DocumentEx) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessaging
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DocumentEx: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DocumentEx: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Photo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessaging
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &DocumentExPhoto{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Body = &DocumentEx_Photo{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Video", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessaging
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &DocumentExVideo{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Body = &DocumentEx_Video{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Voice", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessaging
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &DocumentExVoice{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Body = &DocumentEx_Voice{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessaging(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessaging
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessaging
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DocumentExPhoto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessaging
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DocumentExPhoto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DocumentExPhoto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field W", wireType)
			}
			m.W = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.W |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field H", wireType)
			}
			m.H = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.H |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMessaging(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessaging
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessaging
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DocumentExVideo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessaging
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DocumentExVideo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DocumentExVideo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field W", wireType)
			}
			m.W = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.W |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field H", wireType)
			}
			m.H = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.H |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Duration", wireType)
			}
			m.Duration = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Duration |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMessaging(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessaging
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessaging
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DocumentExVoice) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessaging
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DocumentExVoice: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DocumentExVoice: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Duration", wireType)
			}
			m.Duration = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Duration |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMessaging(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessaging
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessaging
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *JsonMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessaging
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: JsonMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: JsonMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RawJson", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessaging
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RawJson = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessaging(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessaging
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessaging
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UnsupportedMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessaging
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UnsupportedMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UnsupportedMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMessaging(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessaging
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessaging
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StickerMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessaging
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StickerMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StickerMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StickerId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessaging
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.StickerId == nil {
				m.StickerId = &types.Int32Value{}
			}
			if err := m.StickerId.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FastPreview", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessaging
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FastPreview == nil {
				m.FastPreview = &types.BytesValue{}
			}
			if err := m.FastPreview.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Image_512", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessaging
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Image_512 == nil {
				m.Image_512 = &ImageLocation{}
			}
			if err := m.Image_512.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Image_256", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessaging
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Image_256 == nil {
				m.Image_256 = &ImageLocation{}
			}
			if err := m.Image_256.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StickerCollectionId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessaging
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.StickerCollectionId == nil {
				m.StickerCollectionId = &types.Int32Value{}
			}
			if err := m.StickerCollectionId.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StickerCollectionAccessHash", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessaging
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.StickerCollectionAccessHash == nil {
				m.StickerCollectionAccessHash = &types.Int64Value{}
			}
			if err := m.StickerCollectionAccessHash.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Emoji", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessaging
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Emoji == nil {
				m.Emoji = &types.StringValue{}
			}
			if err := m.Emoji.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AnimatedStickerJson", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessaging
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AnimatedStickerJson == nil {
				m.AnimatedStickerJson = &types.StringValue{}
			}
			if err := m.AnimatedStickerJson.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessaging(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessaging
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessaging
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BinaryMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessaging
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BinaryMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BinaryMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContentTag", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessaging
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContentTag = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMessaging
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Msg = append(m.Msg[:0], dAtA[iNdEx:postIndex]...)
			if m.Msg == nil {
				m.Msg = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessaging(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessaging
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessaging
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EmptyMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessaging
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EmptyMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EmptyMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMessaging(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessaging
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessaging
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeletedMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessaging
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeletedMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeletedMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsLocal", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessaging
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.IsLocal == nil {
				m.IsLocal = &types.BoolValue{}
			}
			if err := m.IsLocal.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessaging(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessaging
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessaging
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DialogShort) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessaging
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DialogShort: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DialogShort: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Peer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessaging
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Peer == nil {
				m.Peer = &Peer{}
			}
			if err := m.Peer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Counter", wireType)
			}
			m.Counter = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Counter |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Date", wireType)
			}
			m.Date = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Date |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMessaging(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessaging
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessaging
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DialogGroup) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessaging
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DialogGroup: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DialogGroup: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessaging
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessaging
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dialogs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessaging
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Dialogs = append(m.Dialogs, &DialogShort{})
			if err := m.Dialogs[len(m.Dialogs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessaging(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessaging
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessaging
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MessageReaction) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessaging
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MessageReaction: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MessageReaction: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMessaging
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Users = append(m.Users, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMessaging
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthMessaging
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthMessaging
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Users) == 0 {
					m.Users = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMessaging
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Users = append(m.Users, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Users", wireType)
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessaging
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Code = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessaging(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessaging
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessaging
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SearchPredicate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessaging
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SearchPredicate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SearchPredicate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessaging
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Values", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessaging
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Values = append(m.Values, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessaging(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessaging
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessaging
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestSendMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessaging
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestSendMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestSendMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Peer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessaging
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Peer == nil {
				m.Peer = &OutPeer{}
			}
			if err := m.Peer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeduplicationId", wireType)
			}
			m.DeduplicationId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DeduplicationId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessaging
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Message == nil {
				m.Message = &MessageContent{}
			}
			if err := m.Message.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsOnlyForUser", wireType)
			}
			m.IsOnlyForUser = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IsOnlyForUser |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Forward", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessaging
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Forward == nil {
				m.Forward = &ReferencedMessages{}
			}
			if err := m.Forward.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reply", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessaging
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Reply == nil {
				m.Reply = &ReferencedMessages{}
			}
			if err := m.Reply.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Predicates", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessaging
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Predicates = append(m.Predicates, &SearchPredicate{})
			if err := m.Predicates[len(m.Predicates)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMessaging
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.WhiteList = append(m.WhiteList, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMessaging
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthMessaging
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthMessaging
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.WhiteList) == 0 {
					m.WhiteList = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMessaging
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.WhiteList = append(m.WhiteList, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field WhiteList", wireType)
			}
		case 12:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMessaging
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.BlackList = append(m.BlackList, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMessaging
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthMessaging
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthMessaging
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.BlackList) == 0 {
					m.BlackList = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMessaging
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.BlackList = append(m.BlackList, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field BlackList", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMessaging(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessaging
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessaging
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestUpdateMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessaging
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestUpdateMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestUpdateMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessaging
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Mid == nil {
				m.Mid = &UUIDValue{}
			}
			if err := m.Mid.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatedMessage", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessaging
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UpdatedMessage == nil {
				m.UpdatedMessage = &MessageContent{}
			}
			if err := m.UpdatedMessage.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastEditedAt", wireType)
			}
			m.LastEditedAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastEditedAt |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMessaging(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessaging
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessaging
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestMessageReceived) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessaging
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestMessageReceived: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestMessageReceived: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Peer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessaging
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Peer == nil {
				m.Peer = &OutPeer{}
			}
			if err := m.Peer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Date", wireType)
			}
			m.Date = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Date |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMessaging(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessaging
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessaging
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestMessageRead) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessaging
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestMessageRead: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestMessageRead: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Peer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessaging
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Peer == nil {
				m.Peer = &OutPeer{}
			}
			if err := m.Peer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Date", wireType)
			}
			m.Date = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Date |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMessaging(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessaging
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessaging
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestDeleteMessageObsolete) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessaging
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestDeleteMessageObsolete: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestDeleteMessageObsolete: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mids", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessaging
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Mids = append(m.Mids, &UUIDValue{})
			if err := m.Mids[len(m.Mids)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessaging(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessaging
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessaging
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestDeleteMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessaging
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestDeleteMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestDeleteMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Peer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessaging
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Peer == nil {
				m.Peer = &Peer{}
			}
			if err := m.Peer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MessageId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessaging
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MessageId == nil {
				m.MessageId = &UUIDValue{}
			}
			if err := m.MessageId.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeleteForUserOnly", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DeleteForUserOnly = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipMessaging(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessaging
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessaging
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestClearChat) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessaging
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestClearChat: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestClearChat: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Peer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessaging
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Peer == nil {
				m.Peer = &OutPeer{}
			}
			if err := m.Peer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastMessageDate", wireType)
			}
			m.LastMessageDate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastMessageDate |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMessaging(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessaging
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessaging
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestDeleteChat) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessaging
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestDeleteChat: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestDeleteChat: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Peer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessaging
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Peer == nil {
				m.Peer = &OutPeer{}
			}
			if err := m.Peer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastMessageDate", wireType)
			}
			m.LastMessageDate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastMessageDate |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMessaging(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessaging
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessaging
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestArchiveChat) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessaging
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestArchiveChat: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestArchiveChat: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Peer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessaging
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Peer == nil {
				m.Peer = &OutPeer{}
			}
			if err := m.Peer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessaging(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessaging
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessaging
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestMessageSetReaction) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessaging
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestMessageSetReaction: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestMessageSetReaction: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Peer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessaging
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Peer == nil {
				m.Peer = &OutPeer{}
			}
			if err := m.Peer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessaging
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Code = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessaging
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Mid == nil {
				m.Mid = &UUIDValue{}
			}
			if err := m.Mid.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessaging(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessaging
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessaging
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestMessageRemoveReaction) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessaging
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestMessageRemoveReaction: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestMessageRemoveReaction: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Peer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessaging
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Peer == nil {
				m.Peer = &OutPeer{}
			}
			if err := m.Peer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessaging
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Code = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessaging
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Mid == nil {
				m.Mid = &UUIDValue{}
			}
			if err := m.Mid.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessaging(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessaging
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessaging
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResponseReactionsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessaging
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResponseReactionsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResponseReactionsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Seq", wireType)
			}
			m.Seq = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Seq |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMessaging
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.State = append(m.State[:0], dAtA[iNdEx:postIndex]...)
			if m.State == nil {
				m.State = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reactions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessaging
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reactions = append(m.Reactions, &MessageReaction{})
			if err := m.Reactions[len(m.Reactions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessaging(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessaging
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessaging
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResponseSendMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessaging
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResponseSendMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResponseSendMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MessageId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessaging
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MessageId == nil {
				m.MessageId = &UUIDValue{}
			}
			if err := m.MessageId.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MessageDate", wireType)
			}
			m.MessageDate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MessageDate |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PreviousMessageId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessaging
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PreviousMessageId == nil {
				m.PreviousMessageId = &UUIDValue{}
			}
			if err := m.PreviousMessageId.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatorUserId", wireType)
			}
			m.CreatorUserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreatorUserId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Clock", wireType)
			}
			m.Clock = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Clock |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMessaging(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessaging
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessaging
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessaging
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Peer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessaging
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Peer == nil {
				m.Peer = &Peer{}
			}
			if err := m.Peer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SenderUid", wireType)
			}
			m.SenderUid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SenderUid |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Date", wireType)
			}
			m.Date = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Date |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessaging
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Message == nil {
				m.Message = &MessageContent{}
			}
			if err := m.Message.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Attributes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessaging
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Attributes == nil {
				m.Attributes = &MessageAttributes{}
			}
			if err := m.Attributes.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessaging
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Mid == nil {
				m.Mid = &UUIDValue{}
			}
			if err := m.Mid.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Forward", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessaging
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ReferencedMessages{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Attach = &UpdateMessage_Forward{v}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reply", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessaging
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ReferencedMessages{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Attach = &UpdateMessage_Reply{v}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PreviousMid", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessaging
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PreviousMid == nil {
				m.PreviousMid = &UUIDValue{}
			}
			if err := m.PreviousMid.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Counter", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessaging
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Counter == nil {
				m.Counter = &types.Int32Value{}
			}
			if err := m.Counter.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MyReadDate", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessaging
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MyReadDate == nil {
				m.MyReadDate = &types.Int64Value{}
			}
			if err := m.MyReadDate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RandomId", wireType)
			}
			m.RandomId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RandomId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrevMessageDate", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessaging
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PrevMessageDate == nil {
				m.PrevMessageDate = &types.Int64Value{}
			}
			if err := m.PrevMessageDate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ModifiedAt", wireType)
			}
			m.ModifiedAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ModifiedAt |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrevEditInPeerAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessaging
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PrevEditInPeerAt == nil {
				m.PrevEditInPeerAt = &types.Int64Value{}
			}
			if err := m.PrevEditInPeerAt.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessaging(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessaging
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessaging
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateMessageContentChanged) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessaging
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateMessageContentChanged: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateMessageContentChanged: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Peer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessaging
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Peer == nil {
				m.Peer = &Peer{}
			}
			if err := m.Peer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessaging
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Message == nil {
				m.Message = &MessageContent{}
			}
			if err := m.Message.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessaging
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Mid == nil {
				m.Mid = &UUIDValue{}
			}
			if err := m.Mid.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EditedAt", wireType)
			}
			m.EditedAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EditedAt |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrevEditInPeerAt", wireType)
			}
			m.PrevEditInPeerAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PrevEditInPeerAt |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMessaging(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessaging
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessaging
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateMessageSent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessaging
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateMessageSent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateMessageSent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Peer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessaging
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Peer == nil {
				m.Peer = &Peer{}
			}
			if err := m.Peer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rid", wireType)
			}
			m.Rid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Rid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Date", wireType)
			}
			m.Date = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Date |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessaging
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Mid == nil {
				m.Mid = &UUIDValue{}
			}
			if err := m.Mid.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrevMid", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessaging
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PrevMid == nil {
				m.PrevMid = &UUIDValue{}
			}
			if err := m.PrevMid.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnreadCounter", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessaging
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UnreadCounter == nil {
				m.UnreadCounter = &types.Int32Value{}
			}
			if err := m.UnreadCounter.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MyReadDate", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessaging
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MyReadDate == nil {
				m.MyReadDate = &types.Int64Value{}
			}
			if err := m.MyReadDate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Forward", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessaging
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ReferencedMessages{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Attach = &UpdateMessageSent_Forward{v}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reply", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessaging
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ReferencedMessages{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Attach = &UpdateMessageSent_Reply{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessaging(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessaging
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessaging
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateMessageReceived) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessaging
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateMessageReceived: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateMessageReceived: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Peer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessaging
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Peer == nil {
				m.Peer = &Peer{}
			}
			if err := m.Peer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartDate", wireType)
			}
			m.StartDate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartDate |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReceivedDate", wireType)
			}
			m.ReceivedDate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReceivedDate |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMessaging(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessaging
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessaging
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateMessageRead) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessaging
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateMessageRead: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateMessageRead: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Peer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessaging
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Peer == nil {
				m.Peer = &Peer{}
			}
			if err := m.Peer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartDate", wireType)
			}
			m.StartDate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartDate |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReadDate", wireType)
			}
			m.ReadDate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReadDate |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMessaging(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessaging
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessaging
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateMessageReadByMe) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessaging
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateMessageReadByMe: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateMessageReadByMe: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Peer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessaging
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Peer == nil {
				m.Peer = &Peer{}
			}
			if err := m.Peer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartDate", wireType)
			}
			m.StartDate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartDate |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnreadCounter", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessaging
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UnreadCounter == nil {
				m.UnreadCounter = &types.Int32Value{}
			}
			if err := m.UnreadCounter.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessaging(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessaging
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessaging
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateMessageDelete) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessaging
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateMessageDelete: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateMessageDelete: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Peer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessaging
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Peer == nil {
				m.Peer = &Peer{}
			}
			if err := m.Peer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mids", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessaging
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Mids = append(m.Mids, &UUIDValue{})
			if err := m.Mids[len(m.Mids)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Counter", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessaging
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Counter == nil {
				m.Counter = &types.Int32Value{}
			}
			if err := m.Counter.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActionDate", wireType)
			}
			m.ActionDate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ActionDate |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMessaging(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessaging
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessaging
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateChatClear) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessaging
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateChatClear: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateChatClear: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Peer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessaging
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Peer == nil {
				m.Peer = &Peer{}
			}
			if err := m.Peer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActionDate", wireType)
			}
			m.ActionDate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ActionDate |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMessaging(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessaging
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessaging
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateChatDelete) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessaging
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateChatDelete: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateChatDelete: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Peer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessaging
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Peer == nil {
				m.Peer = &Peer{}
			}
			if err := m.Peer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActionDate", wireType)
			}
			m.ActionDate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ActionDate |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMessaging(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessaging
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessaging
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateChatArchive) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessaging
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateChatArchive: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateChatArchive: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Peer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessaging
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Peer == nil {
				m.Peer = &Peer{}
			}
			if err := m.Peer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessaging(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessaging
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessaging
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateChatGroupsChanged) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessaging
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateChatGroupsChanged: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateChatGroupsChanged: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dialogs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessaging
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Dialogs = append(m.Dialogs, &DialogGroup{})
			if err := m.Dialogs[len(m.Dialogs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessaging(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessaging
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessaging
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateReactionsUpdate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessaging
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateReactionsUpdate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateReactionsUpdate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Peer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessaging
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Peer == nil {
				m.Peer = &Peer{}
			}
			if err := m.Peer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reactions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessaging
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reactions = append(m.Reactions, &MessageReaction{})
			if err := m.Reactions[len(m.Reactions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessaging
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Mid == nil {
				m.Mid = &UUIDValue{}
			}
			if err := m.Mid.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessaging(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessaging
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessaging
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateMessageRejectedByHook) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessaging
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateMessageRejectedByHook: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateMessageRejectedByHook: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Peer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessaging
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Peer == nil {
				m.Peer = &Peer{}
			}
			if err := m.Peer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rid", wireType)
			}
			m.Rid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Rid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Date", wireType)
			}
			m.Date = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Date |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HookId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessaging
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HookId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reason", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessaging
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Reason == nil {
				m.Reason = &types.StringValue{}
			}
			if err := m.Reason.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessaging(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessaging
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessaging
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateMessageEditRejectedByHook) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessaging
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateMessageEditRejectedByHook: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateMessageEditRejectedByHook: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Peer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessaging
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Peer == nil {
				m.Peer = &Peer{}
			}
			if err := m.Peer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessaging
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Mid == nil {
				m.Mid = &UUIDValue{}
			}
			if err := m.Mid.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Date", wireType)
			}
			m.Date = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Date |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HookId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessaging
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HookId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reason", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessaging
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Reason == nil {
				m.Reason = &types.StringValue{}
			}
			if err := m.Reason.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessaging(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessaging
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessaging
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateThreadCreated) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessaging
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateThreadCreated: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateThreadCreated: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Peer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessaging
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Peer == nil {
				m.Peer = &GroupOutPeer{}
			}
			if err := m.Peer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartMessage", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessaging
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.StartMessage == nil {
				m.StartMessage = &UUIDValue{}
			}
			if err := m.StartMessage.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessaging(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessaging
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessaging
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateThreadLifted) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessaging
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateThreadLifted: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateThreadLifted: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Peer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessaging
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Peer == nil {
				m.Peer = &GroupOutPeer{}
			}
			if err := m.Peer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessaging(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessaging
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessaging
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReferencedMessages) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessaging
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReferencedMessages: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReferencedMessages: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mids", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessaging
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Mids = append(m.Mids, &UUIDValue{})
			if err := m.Mids[len(m.Mids)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessaging(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessaging
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessaging
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HistoryMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessaging
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HistoryMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HistoryMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SenderUid", wireType)
			}
			m.SenderUid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SenderUid |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Date", wireType)
			}
			m.Date = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Date |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessaging
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Message == nil {
				m.Message = &MessageContent{}
			}
			if err := m.Message.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= MessageState(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reactions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessaging
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reactions = append(m.Reactions, &MessageReaction{})
			if err := m.Reactions[len(m.Reactions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Attribute", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessaging
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Attribute == nil {
				m.Attribute = &MessageAttributes{}
			}
			if err := m.Attribute.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessaging
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Mid == nil {
				m.Mid = &UUIDValue{}
			}
			if err := m.Mid.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HostPeer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessaging
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.HostPeer == nil {
				m.HostPeer = &OutPeer{}
			}
			if err := m.HostPeer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Forward", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessaging
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ReferencedMessages{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Attach = &HistoryMessage_Forward{v}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reply", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessaging
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ReferencedMessages{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Attach = &HistoryMessage_Reply{v}
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SenderPeer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessaging
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SenderPeer == nil {
				m.SenderPeer = &OutPeer{}
			}
			if err := m.SenderPeer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EditedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessaging
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.EditedAt == nil {
				m.EditedAt = &types.Int64Value{}
			}
			if err := m.EditedAt.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrevMid", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessaging
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PrevMid == nil {
				m.PrevMid = &UUIDValue{}
			}
			if err := m.PrevMid.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 18:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RandomId", wireType)
			}
			m.RandomId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RandomId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMessaging(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessaging
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessaging
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestLoadHistory) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessaging
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestLoadHistory: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestLoadHistory: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Peer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessaging
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Peer == nil {
				m.Peer = &OutPeer{}
			}
			if err := m.Peer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Date", wireType)
			}
			m.Date = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Date |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LoadMode", wireType)
			}
			m.LoadMode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LoadMode |= ListLoadMode(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType == 0 {
				var v UpdateOptimization
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMessaging
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= UpdateOptimization(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Optimizations = append(m.Optimizations, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMessaging
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthMessaging
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthMessaging
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				if elementCount != 0 && len(m.Optimizations) == 0 {
					m.Optimizations = make([]UpdateOptimization, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v UpdateOptimization
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMessaging
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= UpdateOptimization(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Optimizations = append(m.Optimizations, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Optimizations", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMessaging(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessaging
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessaging
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResponseLoadHistory) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessaging
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResponseLoadHistory: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResponseLoadHistory: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field History", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessaging
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.History = append(m.History, &HistoryMessage{})
			if err := m.History[len(m.History)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserPeers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessaging
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserPeers = append(m.UserPeers, &UserOutPeer{})
			if err := m.UserPeers[len(m.UserPeers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupPeers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessaging
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GroupPeers = append(m.GroupPeers, &GroupOutPeer{})
			if err := m.GroupPeers[len(m.GroupPeers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Counter", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessaging
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Counter == nil {
				m.Counter = &types.Int32Value{}
			}
			if err := m.Counter.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CounterDate", wireType)
			}
			m.CounterDate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CounterDate |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastConversationMessageDate", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessaging
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LastConversationMessageDate == nil {
				m.LastConversationMessageDate = &types.Int64Value{}
			}
			if err := m.LastConversationMessageDate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CountForeignAfterLastReturned", wireType)
			}
			m.CountForeignAfterLastReturned = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CountForeignAfterLastReturned |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMessaging(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessaging
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessaging
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestHistoryDifference) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessaging
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestHistoryDifference: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestHistoryDifference: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Clock", wireType)
			}
			m.Clock = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Clock |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMessaging(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessaging
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessaging
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResponseHistoryDifference) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessaging
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResponseHistoryDifference: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResponseHistoryDifference: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field History", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessaging
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.History = append(m.History, &HistoryMessage{})
			if err := m.History[len(m.History)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromClock", wireType)
			}
			m.FromClock = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FromClock |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Clock", wireType)
			}
			m.Clock = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Clock |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMessaging(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessaging
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessaging
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Dialog) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessaging
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Dialog: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Dialog: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Peer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessaging
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Peer == nil {
				m.Peer = &Peer{}
			}
			if err := m.Peer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnreadCount", wireType)
			}
			m.UnreadCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UnreadCount |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SortDate", wireType)
			}
			m.SortDate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SortDate |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SenderUid", wireType)
			}
			m.SenderUid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SenderUid |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Date", wireType)
			}
			m.Date = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Date |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessaging
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Message == nil {
				m.Message = &MessageContent{}
			}
			if err := m.Message.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= MessageState(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FirstUnreadDate", wireType)
			}
			m.FirstUnreadDate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FirstUnreadDate |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Attributes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessaging
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Attributes == nil {
				m.Attributes = &MessageAttributes{}
			}
			if err := m.Attributes.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessaging
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Mid == nil {
				m.Mid = &UUIDValue{}
			}
			if err := m.Mid.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsFavourite", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessaging
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.IsFavourite == nil {
				m.IsFavourite = &types.BoolValue{}
			}
			if err := m.IsFavourite.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PinnedMessages", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessaging
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PinnedMessages == nil {
				m.PinnedMessages = &PinnedMessages{}
			}
			if err := m.PinnedMessages.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HistoryMessage", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessaging
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.HistoryMessage == nil {
				m.HistoryMessage = &HistoryMessage{}
			}
			if err := m.HistoryMessage.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastReceive", wireType)
			}
			m.LastReceive = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastReceive |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastRead", wireType)
			}
			m.LastRead = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastRead |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 18:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastReactionAt", wireType)
			}
			m.LastReactionAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastReactionAt |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMessaging(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessaging
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessaging
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestLoadDialogs) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessaging
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestLoadDialogs: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestLoadDialogs: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinDate", wireType)
			}
			m.MinDate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MinDate |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType == 0 {
				var v UpdateOptimization
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMessaging
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= UpdateOptimization(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Optimizations = append(m.Optimizations, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMessaging
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthMessaging
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthMessaging
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				if elementCount != 0 && len(m.Optimizations) == 0 {
					m.Optimizations = make([]UpdateOptimization, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v UpdateOptimization
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMessaging
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= UpdateOptimization(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Optimizations = append(m.Optimizations, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Optimizations", wireType)
			}
		case 4:
			if wireType == 0 {
				var v DialogsFilter
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMessaging
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= DialogsFilter(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Filters = append(m.Filters, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMessaging
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthMessaging
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthMessaging
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				if elementCount != 0 && len(m.Filters) == 0 {
					m.Filters = make([]DialogsFilter, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v DialogsFilter
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMessaging
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= DialogsFilter(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Filters = append(m.Filters, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Filters", wireType)
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PeersToLoad", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessaging
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PeersToLoad = append(m.PeersToLoad, &Peer{})
			if err := m.PeersToLoad[len(m.PeersToLoad)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessaging(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessaging
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessaging
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResponseLoadDialogs) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessaging
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResponseLoadDialogs: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResponseLoadDialogs: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dialogs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessaging
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Dialogs = append(m.Dialogs, &Dialog{})
			if err := m.Dialogs[len(m.Dialogs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserPeers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessaging
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserPeers = append(m.UserPeers, &UserOutPeer{})
			if err := m.UserPeers[len(m.UserPeers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupPeers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessaging
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GroupPeers = append(m.GroupPeers, &GroupOutPeer{})
			if err := m.GroupPeers[len(m.GroupPeers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessaging(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessaging
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessaging
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DialogData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessaging
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DialogData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DialogData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsFavourite", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsFavourite = bool(v != 0)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			m.CreatedAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreatedAt |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Clock", wireType)
			}
			m.Clock = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Clock |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMessaging(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessaging
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessaging
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DialogIndex) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessaging
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DialogIndex: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DialogIndex: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Peer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessaging
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Peer == nil {
				m.Peer = &Peer{}
			}
			if err := m.Peer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastMessageDate", wireType)
			}
			m.LastMessageDate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastMessageDate |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessaging
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data == nil {
				m.Data = &DialogData{}
			}
			if err := m.Data.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessaging(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessaging
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessaging
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DialogListEntry) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessaging
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DialogListEntry: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DialogListEntry: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Peer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessaging
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Peer == nil {
				m.Peer = &Peer{}
			}
			if err := m.Peer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnreadCount", wireType)
			}
			m.UnreadCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UnreadCount |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MyReadDate", wireType)
			}
			m.MyReadDate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MyReadDate |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastMessageDate", wireType)
			}
			m.LastMessageDate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastMessageDate |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReceiveDate", wireType)
			}
			m.ReceiveDate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReceiveDate |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReadDate", wireType)
			}
			m.ReadDate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReadDate |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EntryClock", wireType)
			}
			m.EntryClock = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EntryClock |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessaging
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data == nil {
				m.Data = &DialogData{}
			}
			if err := m.Data.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastUpdateOfMessageDate", wireType)
			}
			m.LastUpdateOfMessageDate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastUpdateOfMessageDate |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastReactionDate", wireType)
			}
			m.LastReactionDate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastReactionDate |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMessaging(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessaging
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessaging
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestFetchDialogIndex) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessaging
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestFetchDialogIndex: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestFetchDialogIndex: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMessaging(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessaging
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessaging
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResponseFetchDialogIndex) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessaging
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResponseFetchDialogIndex: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResponseFetchDialogIndex: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DialogIndices", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessaging
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DialogIndices = append(m.DialogIndices, &DialogIndex{})
			if err := m.DialogIndices[len(m.DialogIndices)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessaging(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessaging
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessaging
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestDialogListDifference) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessaging
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestDialogListDifference: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestDialogListDifference: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromClock", wireType)
			}
			m.FromClock = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FromClock |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMessaging(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessaging
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessaging
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResponseDialogListDifference) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessaging
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResponseDialogListDifference: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResponseDialogListDifference: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Entries", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessaging
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Entries = append(m.Entries, &DialogListEntry{})
			if err := m.Entries[len(m.Entries)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Clock", wireType)
			}
			m.Clock = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Clock |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrevClock", wireType)
			}
			m.PrevClock = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PrevClock |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMessaging(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessaging
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessaging
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestGetLastConversationMessages) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessaging
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestGetLastConversationMessages: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestGetLastConversationMessages: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Peers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessaging
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Peers = append(m.Peers, &Peer{})
			if err := m.Peers[len(m.Peers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessaging(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessaging
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessaging
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResponseGetLastConversationMessages) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessaging
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResponseGetLastConversationMessages: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResponseGetLastConversationMessages: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Messages", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessaging
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Messages = append(m.Messages, &ResponseGetLastConversationMessages_Pair{})
			if err := m.Messages[len(m.Messages)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessaging(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessaging
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessaging
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResponseGetLastConversationMessages_Pair) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessaging
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Pair: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Pair: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Peer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessaging
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Peer == nil {
				m.Peer = &Peer{}
			}
			if err := m.Peer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessaging
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Message == nil {
				m.Message = &HistoryMessage{}
			}
			if err := m.Message.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessaging(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessaging
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessaging
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestLoadArchived) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessaging
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestLoadArchived: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestLoadArchived: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NextOffset", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessaging
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.NextOffset == nil {
				m.NextOffset = &types.BytesValue{}
			}
			if err := m.NextOffset.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType == 0 {
				var v UpdateOptimization
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMessaging
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= UpdateOptimization(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Optimizations = append(m.Optimizations, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMessaging
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthMessaging
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthMessaging
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				if elementCount != 0 && len(m.Optimizations) == 0 {
					m.Optimizations = make([]UpdateOptimization, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v UpdateOptimization
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMessaging
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= UpdateOptimization(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Optimizations = append(m.Optimizations, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Optimizations", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMessaging(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessaging
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessaging
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResponseLoadArchived) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessaging
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResponseLoadArchived: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResponseLoadArchived: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dialogs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessaging
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Dialogs = append(m.Dialogs, &Dialog{})
			if err := m.Dialogs[len(m.Dialogs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NextOffset", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessaging
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.NextOffset == nil {
				m.NextOffset = &types.BytesValue{}
			}
			if err := m.NextOffset.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserPeers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessaging
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserPeers = append(m.UserPeers, &UserOutPeer{})
			if err := m.UserPeers[len(m.UserPeers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupPeers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessaging
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GroupPeers = append(m.GroupPeers, &GroupOutPeer{})
			if err := m.GroupPeers[len(m.GroupPeers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessaging(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessaging
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessaging
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestLoadGroupedDialogs) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessaging
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestLoadGroupedDialogs: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestLoadGroupedDialogs: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v UpdateOptimization
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMessaging
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= UpdateOptimization(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Optimizations = append(m.Optimizations, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMessaging
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthMessaging
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthMessaging
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				if elementCount != 0 && len(m.Optimizations) == 0 {
					m.Optimizations = make([]UpdateOptimization, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v UpdateOptimization
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMessaging
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= UpdateOptimization(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Optimizations = append(m.Optimizations, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Optimizations", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMessaging(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessaging
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessaging
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResponseLoadGroupedDialogs) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessaging
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResponseLoadGroupedDialogs: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResponseLoadGroupedDialogs: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dialogs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessaging
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Dialogs = append(m.Dialogs, &DialogGroup{})
			if err := m.Dialogs[len(m.Dialogs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShowArchived", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessaging
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ShowArchived == nil {
				m.ShowArchived = &types.BoolValue{}
			}
			if err := m.ShowArchived.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShowInvite", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessaging
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ShowInvite == nil {
				m.ShowInvite = &types.BoolValue{}
			}
			if err := m.ShowInvite.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserPeers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessaging
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserPeers = append(m.UserPeers, &UserOutPeer{})
			if err := m.UserPeers[len(m.UserPeers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupPeers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessaging
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GroupPeers = append(m.GroupPeers, &GroupOutPeer{})
			if err := m.GroupPeers[len(m.GroupPeers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessaging(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessaging
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessaging
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResponseDialogsOrder) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessaging
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResponseDialogsOrder: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResponseDialogsOrder: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Seq", wireType)
			}
			m.Seq = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Seq |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMessaging
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.State = append(m.State[:0], dAtA[iNdEx:postIndex]...)
			if m.State == nil {
				m.State = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Groups", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessaging
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Groups = append(m.Groups, &DialogGroup{})
			if err := m.Groups[len(m.Groups)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessaging(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessaging
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessaging
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestHideDialog) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessaging
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestHideDialog: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestHideDialog: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Peer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessaging
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Peer == nil {
				m.Peer = &OutPeer{}
			}
			if err := m.Peer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessaging(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessaging
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessaging
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestShowDialog) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessaging
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestShowDialog: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestShowDialog: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Peer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessaging
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Peer == nil {
				m.Peer = &OutPeer{}
			}
			if err := m.Peer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessaging(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessaging
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessaging
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestFavouriteDialog) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessaging
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestFavouriteDialog: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestFavouriteDialog: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Peer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessaging
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Peer == nil {
				m.Peer = &OutPeer{}
			}
			if err := m.Peer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessaging(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessaging
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessaging
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestUnfavouriteDialog) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessaging
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestUnfavouriteDialog: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestUnfavouriteDialog: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Peer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessaging
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Peer == nil {
				m.Peer = &OutPeer{}
			}
			if err := m.Peer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessaging(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessaging
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessaging
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateDialogFavouriteChanged) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessaging
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateDialogFavouriteChanged: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateDialogFavouriteChanged: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Peer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessaging
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Peer == nil {
				m.Peer = &Peer{}
			}
			if err := m.Peer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsFavourite", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessaging
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.IsFavourite == nil {
				m.IsFavourite = &types.BoolValue{}
			}
			if err := m.IsFavourite.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessaging(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessaging
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessaging
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestNotifyDialogOpened) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessaging
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestNotifyDialogOpened: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestNotifyDialogOpened: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Peer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessaging
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Peer == nil {
				m.Peer = &OutPeer{}
			}
			if err := m.Peer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessaging(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessaging
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessaging
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PinnedMessages) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessaging
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PinnedMessages: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PinnedMessages: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mids", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessaging
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Mids = append(m.Mids, &UUIDValue{})
			if err := m.Mids[len(m.Mids)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessaging(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessaging
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessaging
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestPinMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessaging
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestPinMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestPinMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Peer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessaging
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Peer == nil {
				m.Peer = &OutPeer{}
			}
			if err := m.Peer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessaging
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Mid == nil {
				m.Mid = &UUIDValue{}
			}
			if err := m.Mid.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastPinDate", wireType)
			}
			m.LastPinDate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastPinDate |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMessaging(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessaging
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessaging
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestUnpinMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessaging
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestUnpinMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestUnpinMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Peer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessaging
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Peer == nil {
				m.Peer = &OutPeer{}
			}
			if err := m.Peer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessaging
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Mid == nil {
				m.Mid = &UUIDValue{}
			}
			if err := m.Mid.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastPinDate", wireType)
			}
			m.LastPinDate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastPinDate |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMessaging(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessaging
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessaging
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdatePinnedMessagesChanged) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessaging
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdatePinnedMessagesChanged: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdatePinnedMessagesChanged: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Peer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessaging
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Peer == nil {
				m.Peer = &Peer{}
			}
			if err := m.Peer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PinnedMessages", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessaging
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PinnedMessages == nil {
				m.PinnedMessages = &PinnedMessages{}
			}
			if err := m.PinnedMessages.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActionDate", wireType)
			}
			m.ActionDate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ActionDate |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMessaging(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessaging
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessaging
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestGetUpdatedMessages) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessaging
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestGetUpdatedMessages: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestGetUpdatedMessages: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Peer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessaging
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Peer == nil {
				m.Peer = &Peer{}
			}
			if err := m.Peer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromClock", wireType)
			}
			m.FromClock = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FromClock |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMessaging(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessaging
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessaging
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResponseGetUpdatedMessages) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessaging
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResponseGetUpdatedMessages: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResponseGetUpdatedMessages: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Messages", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessaging
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Messages = append(m.Messages, &ResponseGetUpdatedMessages_UpdatedMessage{})
			if err := m.Messages[len(m.Messages)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PeerClock", wireType)
			}
			m.PeerClock = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PeerClock |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NextAvailable", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.NextAvailable = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipMessaging(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessaging
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessaging
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResponseGetUpdatedMessages_UpdatedMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessaging
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdatedMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdatedMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessaging
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Mid == nil {
				m.Mid = &UUIDValue{}
			}
			if err := m.Mid.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessaging
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Message == nil {
				m.Message = &MessageContent{}
			}
			if err := m.Message.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ModifiedAt", wireType)
			}
			m.ModifiedAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ModifiedAt |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMessaging(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessaging
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessaging
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MessageStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessaging
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MessageStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MessageStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Clock", wireType)
			}
			m.Clock = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Clock |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMessaging(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessaging
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessaging
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestMessageReads) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessaging
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestMessageReads: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestMessageReads: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessaging
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Mid == nil {
				m.Mid = &UUIDValue{}
			}
			if err := m.Mid.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimestampFrom", wireType)
			}
			m.TimestampFrom = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TimestampFrom |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMessaging(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessaging
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessaging
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestMessageReceives) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessaging
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestMessageReceives: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestMessageReceives: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessaging
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Mid == nil {
				m.Mid = &UUIDValue{}
			}
			if err := m.Mid.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimestampFrom", wireType)
			}
			m.TimestampFrom = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TimestampFrom |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMessaging(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessaging
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessaging
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResponseMessageReads) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessaging
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResponseMessageReads: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResponseMessageReads: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessaging
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Status = append(m.Status, &MessageStatus{})
			if err := m.Status[len(m.Status)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimestampTill", wireType)
			}
			m.TimestampTill = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TimestampTill |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMessaging(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessaging
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessaging
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResponseMessageReceives) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessaging
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResponseMessageReceives: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResponseMessageReceives: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessaging
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessaging
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Status = append(m.Status, &MessageStatus{})
			if err := m.Status[len(m.Status)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimestampTill", wireType)
			}
			m.TimestampTill = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TimestampTill |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMessaging(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessaging
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessaging
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMessaging(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMessaging
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMessaging
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthMessaging
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupMessaging
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthMessaging
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthMessaging        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMessaging          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupMessaging = fmt.Errorf("proto: unexpected end of group")
)
