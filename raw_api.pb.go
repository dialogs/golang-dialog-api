// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: raw_api.proto

package dialog

import (
	context "context"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	types "github.com/gogo/protobuf/types"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type RequestRawRequest struct {
	Service *types.StringValue `protobuf:"bytes,1,opt,name=service,proto3" json:"service,omitempty"`
	Body    *types.BytesValue  `protobuf:"bytes,2,opt,name=body,proto3" json:"body,omitempty"`
}

func (m *RequestRawRequest) Reset()      { *m = RequestRawRequest{} }
func (*RequestRawRequest) ProtoMessage() {}
func (*RequestRawRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d0909ae2206258f1, []int{0}
}
func (m *RequestRawRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RequestRawRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RequestRawRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RequestRawRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RequestRawRequest.Merge(m, src)
}
func (m *RequestRawRequest) XXX_Size() int {
	return m.Size()
}
func (m *RequestRawRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RequestRawRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RequestRawRequest proto.InternalMessageInfo

func (m *RequestRawRequest) GetService() *types.StringValue {
	if m != nil {
		return m.Service
	}
	return nil
}

func (m *RequestRawRequest) GetBody() *types.BytesValue {
	if m != nil {
		return m.Body
	}
	return nil
}

type ResponseRawRequest struct {
	Body *types.BytesValue `protobuf:"bytes,1,opt,name=body,proto3" json:"body,omitempty"`
}

func (m *ResponseRawRequest) Reset()      { *m = ResponseRawRequest{} }
func (*ResponseRawRequest) ProtoMessage() {}
func (*ResponseRawRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d0909ae2206258f1, []int{1}
}
func (m *ResponseRawRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ResponseRawRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ResponseRawRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ResponseRawRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResponseRawRequest.Merge(m, src)
}
func (m *ResponseRawRequest) XXX_Size() int {
	return m.Size()
}
func (m *ResponseRawRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ResponseRawRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ResponseRawRequest proto.InternalMessageInfo

func (m *ResponseRawRequest) GetBody() *types.BytesValue {
	if m != nil {
		return m.Body
	}
	return nil
}

func init() {
	proto.RegisterType((*RequestRawRequest)(nil), "dialog.RequestRawRequest")
	proto.RegisterType((*ResponseRawRequest)(nil), "dialog.ResponseRawRequest")
}

func init() { proto.RegisterFile("raw_api.proto", fileDescriptor_d0909ae2206258f1) }

var fileDescriptor_d0909ae2206258f1 = []byte{
	// 406 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x92, 0x4d, 0x0b, 0xd3, 0x30,
	0x1c, 0xc6, 0x9b, 0x21, 0x9d, 0x46, 0x77, 0x58, 0xf1, 0x65, 0xab, 0x33, 0x4a, 0x41, 0x10, 0x0f,
	0xc9, 0x9c, 0xb7, 0x81, 0x0c, 0x07, 0x22, 0xde, 0xa4, 0xa2, 0x07, 0x2f, 0x92, 0xb6, 0x59, 0x8d,
	0xd4, 0x26, 0x26, 0xdd, 0xca, 0x6e, 0xe2, 0x71, 0x27, 0xc1, 0x2f, 0xe1, 0x37, 0xf0, 0x2b, 0x78,
	0x1c, 0x78, 0xd9, 0xd1, 0x65, 0x1e, 0x64, 0xa7, 0x7d, 0x04, 0xb1, 0xcd, 0x58, 0x71, 0x07, 0x4f,
	0x09, 0xff, 0x97, 0xe7, 0xf7, 0xf0, 0x24, 0xb0, 0xa3, 0x68, 0xf9, 0x86, 0x4a, 0x8e, 0xa5, 0x12,
	0x85, 0xf0, 0xdc, 0x84, 0xd3, 0x4c, 0xa4, 0x3e, 0x4a, 0x85, 0x48, 0x33, 0x46, 0xaa, 0x6a, 0x34,
	0x9f, 0x91, 0x52, 0x51, 0x29, 0x99, 0xd2, 0xf5, 0x9c, 0x3f, 0xb0, 0x7d, 0x2a, 0x39, 0xa1, 0x79,
	0x2e, 0x0a, 0x5a, 0x70, 0x91, 0x1f, 0xbb, 0xdd, 0x84, 0xcd, 0x78, 0xce, 0x9b, 0xa5, 0x6b, 0x3a,
	0xa6, 0x19, 0x95, 0x11, 0xb1, 0x67, 0x5d, 0x0e, 0xbe, 0x01, 0xd8, 0x0d, 0xd9, 0x87, 0x39, 0xd3,
	0x45, 0x48, 0x4b, 0x7b, 0xf3, 0x9e, 0xc0, 0xb6, 0x66, 0x6a, 0xc1, 0x63, 0xd6, 0x03, 0x77, 0xc0,
	0xbd, 0xcb, 0xa3, 0x01, 0xae, 0x79, 0xf8, 0xe8, 0x07, 0xbf, 0x28, 0x14, 0xcf, 0xd3, 0x57, 0x34,
	0x9b, 0xb3, 0x69, 0x67, 0xb5, 0x1f, 0x5e, 0x82, 0xed, 0x05, 0xd7, 0x3c, 0xca, 0x58, 0x78, 0xdc,
	0xf5, 0x1e, 0xc1, 0x0b, 0x91, 0x48, 0x96, 0xbd, 0x56, 0xa5, 0x71, 0xf3, 0x4c, 0x63, 0xba, 0x2c,
	0x98, 0xae, 0x25, 0xae, 0xac, 0xf6, 0xc3, 0x8b, 0xd0, 0x7d, 0xcb, 0x93, 0x84, 0xe5, 0x61, 0xb5,
	0x36, 0x1e, 0x98, 0x49, 0x1f, 0xde, 0xe0, 0xef, 0x71, 0x92, 0xa5, 0x38, 0x55, 0x32, 0xc6, 0x4f,
	0x95, 0x8c, 0xad, 0xc7, 0x20, 0x81, 0x5e, 0xc8, 0xb4, 0x14, 0xb9, 0x66, 0x0d, 0xe7, 0xc4, 0x22,
	0xc1, 0x7f, 0x91, 0x16, 0x72, 0xcb, 0x4c, 0x7c, 0xd8, 0x3b, 0x87, 0xd4, 0xca, 0xa3, 0x02, 0xba,
	0x21, 0x2d, 0x1f, 0x3f, 0x7f, 0xe6, 0xbd, 0x83, 0xb0, 0xc1, 0xe9, 0xe3, 0xfa, 0xa1, 0xf0, 0x59,
	0x78, 0xbe, 0x7f, 0x6a, 0xfd, 0x6b, 0x2f, 0xb8, 0xfb, 0xe9, 0xc7, 0xaf, 0x2f, 0xad, 0xdb, 0x81,
	0x4f, 0x16, 0x0f, 0xc8, 0x5f, 0x1a, 0xa9, 0xd5, 0xc9, 0x69, 0x66, 0x0c, 0xee, 0x4f, 0x5f, 0x9a,
	0xc9, 0x75, 0x78, 0xb5, 0x69, 0xca, 0x46, 0xaa, 0xd7, 0x5b, 0xe4, 0x6c, 0xb6, 0xc8, 0x39, 0x6c,
	0x11, 0xf8, 0x68, 0x10, 0xf8, 0x6a, 0x10, 0xf8, 0x6e, 0x10, 0x58, 0x1b, 0x04, 0x7e, 0x1a, 0x04,
	0x7e, 0x1b, 0xe4, 0x1c, 0x0c, 0x02, 0x9f, 0x77, 0xc8, 0x59, 0xef, 0x90, 0xb3, 0xd9, 0x21, 0xe7,
	0xb5, 0xfd, 0x54, 0x91, 0x5b, 0xc5, 0xf0, 0xf0, 0x4f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x4e, 0x55,
	0x22, 0xef, 0x74, 0x02, 0x00, 0x00,
}

func (this *RequestRawRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RequestRawRequest)
	if !ok {
		that2, ok := that.(RequestRawRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Service.Equal(that1.Service) {
		return false
	}
	if !this.Body.Equal(that1.Body) {
		return false
	}
	return true
}
func (this *ResponseRawRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ResponseRawRequest)
	if !ok {
		that2, ok := that.(ResponseRawRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Body.Equal(that1.Body) {
		return false
	}
	return true
}
func (this *RequestRawRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&dialog.RequestRawRequest{")
	if this.Service != nil {
		s = append(s, "Service: "+fmt.Sprintf("%#v", this.Service)+",\n")
	}
	if this.Body != nil {
		s = append(s, "Body: "+fmt.Sprintf("%#v", this.Body)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ResponseRawRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&dialog.ResponseRawRequest{")
	if this.Body != nil {
		s = append(s, "Body: "+fmt.Sprintf("%#v", this.Body)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringRawApi(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// RawAPIClient is the client API for RawAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RawAPIClient interface {
	RawRequest(ctx context.Context, in *RequestRawRequest, opts ...grpc.CallOption) (*ResponseRawRequest, error)
}

type rawAPIClient struct {
	cc *grpc.ClientConn
}

func NewRawAPIClient(cc *grpc.ClientConn) RawAPIClient {
	return &rawAPIClient{cc}
}

func (c *rawAPIClient) RawRequest(ctx context.Context, in *RequestRawRequest, opts ...grpc.CallOption) (*ResponseRawRequest, error) {
	out := new(ResponseRawRequest)
	err := c.cc.Invoke(ctx, "/dialog.RawAPI/RawRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RawAPIServer is the server API for RawAPI service.
type RawAPIServer interface {
	RawRequest(context.Context, *RequestRawRequest) (*ResponseRawRequest, error)
}

// UnimplementedRawAPIServer can be embedded to have forward compatible implementations.
type UnimplementedRawAPIServer struct {
}

func (*UnimplementedRawAPIServer) RawRequest(ctx context.Context, req *RequestRawRequest) (*ResponseRawRequest, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RawRequest not implemented")
}

func RegisterRawAPIServer(s *grpc.Server, srv RawAPIServer) {
	s.RegisterService(&_RawAPI_serviceDesc, srv)
}

func _RawAPI_RawRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestRawRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RawAPIServer).RawRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dialog.RawAPI/RawRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RawAPIServer).RawRequest(ctx, req.(*RequestRawRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _RawAPI_serviceDesc = grpc.ServiceDesc{
	ServiceName: "dialog.RawAPI",
	HandlerType: (*RawAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RawRequest",
			Handler:    _RawAPI_RawRequest_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "raw_api.proto",
}

func (m *RequestRawRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestRawRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RequestRawRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Body != nil {
		{
			size, err := m.Body.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRawApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Service != nil {
		{
			size, err := m.Service.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRawApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ResponseRawRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResponseRawRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ResponseRawRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Body != nil {
		{
			size, err := m.Body.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRawApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintRawApi(dAtA []byte, offset int, v uint64) int {
	offset -= sovRawApi(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *RequestRawRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Service != nil {
		l = m.Service.Size()
		n += 1 + l + sovRawApi(uint64(l))
	}
	if m.Body != nil {
		l = m.Body.Size()
		n += 1 + l + sovRawApi(uint64(l))
	}
	return n
}

func (m *ResponseRawRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Body != nil {
		l = m.Body.Size()
		n += 1 + l + sovRawApi(uint64(l))
	}
	return n
}

func sovRawApi(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozRawApi(x uint64) (n int) {
	return sovRawApi(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *RequestRawRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RequestRawRequest{`,
		`Service:` + strings.Replace(fmt.Sprintf("%v", this.Service), "StringValue", "types.StringValue", 1) + `,`,
		`Body:` + strings.Replace(fmt.Sprintf("%v", this.Body), "BytesValue", "types.BytesValue", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ResponseRawRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ResponseRawRequest{`,
		`Body:` + strings.Replace(fmt.Sprintf("%v", this.Body), "BytesValue", "types.BytesValue", 1) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringRawApi(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *RequestRawRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRawApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestRawRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestRawRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Service", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRawApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRawApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRawApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Service == nil {
				m.Service = &types.StringValue{}
			}
			if err := m.Service.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Body", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRawApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRawApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRawApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Body == nil {
				m.Body = &types.BytesValue{}
			}
			if err := m.Body.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRawApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRawApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRawApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResponseRawRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRawApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResponseRawRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResponseRawRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Body", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRawApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRawApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRawApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Body == nil {
				m.Body = &types.BytesValue{}
			}
			if err := m.Body.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRawApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRawApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRawApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipRawApi(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowRawApi
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRawApi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRawApi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthRawApi
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupRawApi
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthRawApi
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthRawApi        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowRawApi          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupRawApi = fmt.Errorf("proto: unexpected end of group")
)
