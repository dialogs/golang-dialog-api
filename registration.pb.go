// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: registration.proto

package dialog

import (
	bytes "bytes"
	context "context"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	_ "github.com/gogo/protobuf/types"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strconv "strconv"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type AuthorizationMethod int32

const (
	AUTHORIZATION_METHOD_NOTHING     AuthorizationMethod = 0
	AUTHORIZATION_METHOD_USERNAME    AuthorizationMethod = 1
	AUTHORIZATION_METHOD_PHONE       AuthorizationMethod = 2
	AUTHORIZATION_METHOD_EMAIL       AuthorizationMethod = 3
	AUTHORIZATION_METHOD_CERTIFICATE AuthorizationMethod = 4
	AUTHORIZATION_METHOD_OAUTH       AuthorizationMethod = 5
)

var AuthorizationMethod_name = map[int32]string{
	0: "AUTHORIZATION_METHOD_NOTHING",
	1: "AUTHORIZATION_METHOD_USERNAME",
	2: "AUTHORIZATION_METHOD_PHONE",
	3: "AUTHORIZATION_METHOD_EMAIL",
	4: "AUTHORIZATION_METHOD_CERTIFICATE",
	5: "AUTHORIZATION_METHOD_OAUTH",
}

var AuthorizationMethod_value = map[string]int32{
	"AUTHORIZATION_METHOD_NOTHING":     0,
	"AUTHORIZATION_METHOD_USERNAME":    1,
	"AUTHORIZATION_METHOD_PHONE":       2,
	"AUTHORIZATION_METHOD_EMAIL":       3,
	"AUTHORIZATION_METHOD_CERTIFICATE": 4,
	"AUTHORIZATION_METHOD_OAUTH":       5,
}

func (AuthorizationMethod) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_199f7aef77c18626, []int{0}
}

type RequestRegisterDevice struct {
	ClientPk    []byte `protobuf:"bytes,1,opt,name=client_pk,json=clientPk,proto3" json:"client_pk,omitempty"`
	AppId       int32  `protobuf:"varint,2,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty"`
	AppTitle    string `protobuf:"bytes,3,opt,name=app_title,json=appTitle,proto3" json:"app_title,omitempty"`
	DeviceTitle string `protobuf:"bytes,4,opt,name=device_title,json=deviceTitle,proto3" json:"device_title,omitempty"`
}

func (m *RequestRegisterDevice) Reset()      { *m = RequestRegisterDevice{} }
func (*RequestRegisterDevice) ProtoMessage() {}
func (*RequestRegisterDevice) Descriptor() ([]byte, []int) {
	return fileDescriptor_199f7aef77c18626, []int{0}
}
func (m *RequestRegisterDevice) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RequestRegisterDevice) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RequestRegisterDevice.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RequestRegisterDevice) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RequestRegisterDevice.Merge(m, src)
}
func (m *RequestRegisterDevice) XXX_Size() int {
	return m.Size()
}
func (m *RequestRegisterDevice) XXX_DiscardUnknown() {
	xxx_messageInfo_RequestRegisterDevice.DiscardUnknown(m)
}

var xxx_messageInfo_RequestRegisterDevice proto.InternalMessageInfo

func (m *RequestRegisterDevice) GetClientPk() []byte {
	if m != nil {
		return m.ClientPk
	}
	return nil
}

func (m *RequestRegisterDevice) GetAppId() int32 {
	if m != nil {
		return m.AppId
	}
	return 0
}

func (m *RequestRegisterDevice) GetAppTitle() string {
	if m != nil {
		return m.AppTitle
	}
	return ""
}

func (m *RequestRegisterDevice) GetDeviceTitle() string {
	if m != nil {
		return m.DeviceTitle
	}
	return ""
}

type ResponseDeviceRequest struct {
	ServerPk      []byte                `protobuf:"bytes,1,opt,name=server_pk,json=serverPk,proto3" json:"server_pk,omitempty"`
	AuthId        int64                 `protobuf:"varint,2,opt,name=auth_id,json=authId,proto3" json:"auth_id,omitempty"`
	Token         string                `protobuf:"bytes,3,opt,name=token,proto3" json:"token,omitempty"`
	AuthMethodSeq []AuthorizationMethod `protobuf:"varint,4,rep,packed,name=auth_method_seq,json=authMethodSeq,proto3,enum=dialog.AuthorizationMethod" json:"auth_method_seq,omitempty"`
}

func (m *ResponseDeviceRequest) Reset()      { *m = ResponseDeviceRequest{} }
func (*ResponseDeviceRequest) ProtoMessage() {}
func (*ResponseDeviceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_199f7aef77c18626, []int{1}
}
func (m *ResponseDeviceRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ResponseDeviceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ResponseDeviceRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ResponseDeviceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResponseDeviceRequest.Merge(m, src)
}
func (m *ResponseDeviceRequest) XXX_Size() int {
	return m.Size()
}
func (m *ResponseDeviceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ResponseDeviceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ResponseDeviceRequest proto.InternalMessageInfo

func (m *ResponseDeviceRequest) GetServerPk() []byte {
	if m != nil {
		return m.ServerPk
	}
	return nil
}

func (m *ResponseDeviceRequest) GetAuthId() int64 {
	if m != nil {
		return m.AuthId
	}
	return 0
}

func (m *ResponseDeviceRequest) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func (m *ResponseDeviceRequest) GetAuthMethodSeq() []AuthorizationMethod {
	if m != nil {
		return m.AuthMethodSeq
	}
	return nil
}

type RegisterDeprecatedDeviceRequest struct {
}

func (m *RegisterDeprecatedDeviceRequest) Reset()      { *m = RegisterDeprecatedDeviceRequest{} }
func (*RegisterDeprecatedDeviceRequest) ProtoMessage() {}
func (*RegisterDeprecatedDeviceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_199f7aef77c18626, []int{2}
}
func (m *RegisterDeprecatedDeviceRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RegisterDeprecatedDeviceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RegisterDeprecatedDeviceRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RegisterDeprecatedDeviceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RegisterDeprecatedDeviceRequest.Merge(m, src)
}
func (m *RegisterDeprecatedDeviceRequest) XXX_Size() int {
	return m.Size()
}
func (m *RegisterDeprecatedDeviceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RegisterDeprecatedDeviceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RegisterDeprecatedDeviceRequest proto.InternalMessageInfo

type RequestExchangeAuthIdForToken struct {
	AuthId    int64  `protobuf:"varint,1,opt,name=auth_id,json=authId,proto3" json:"auth_id,omitempty"`
	Signature []byte `protobuf:"bytes,2,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (m *RequestExchangeAuthIdForToken) Reset()      { *m = RequestExchangeAuthIdForToken{} }
func (*RequestExchangeAuthIdForToken) ProtoMessage() {}
func (*RequestExchangeAuthIdForToken) Descriptor() ([]byte, []int) {
	return fileDescriptor_199f7aef77c18626, []int{3}
}
func (m *RequestExchangeAuthIdForToken) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RequestExchangeAuthIdForToken) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RequestExchangeAuthIdForToken.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RequestExchangeAuthIdForToken) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RequestExchangeAuthIdForToken.Merge(m, src)
}
func (m *RequestExchangeAuthIdForToken) XXX_Size() int {
	return m.Size()
}
func (m *RequestExchangeAuthIdForToken) XXX_DiscardUnknown() {
	xxx_messageInfo_RequestExchangeAuthIdForToken.DiscardUnknown(m)
}

var xxx_messageInfo_RequestExchangeAuthIdForToken proto.InternalMessageInfo

func (m *RequestExchangeAuthIdForToken) GetAuthId() int64 {
	if m != nil {
		return m.AuthId
	}
	return 0
}

func (m *RequestExchangeAuthIdForToken) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

func init() {
	proto.RegisterEnum("dialog.AuthorizationMethod", AuthorizationMethod_name, AuthorizationMethod_value)
	proto.RegisterType((*RequestRegisterDevice)(nil), "dialog.RequestRegisterDevice")
	proto.RegisterType((*ResponseDeviceRequest)(nil), "dialog.ResponseDeviceRequest")
	proto.RegisterType((*RegisterDeprecatedDeviceRequest)(nil), "dialog.RegisterDeprecatedDeviceRequest")
	proto.RegisterType((*RequestExchangeAuthIdForToken)(nil), "dialog.RequestExchangeAuthIdForToken")
}

func init() { proto.RegisterFile("registration.proto", fileDescriptor_199f7aef77c18626) }

var fileDescriptor_199f7aef77c18626 = []byte{
	// 676 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x94, 0x4f, 0x4f, 0x13, 0x41,
	0x18, 0xc6, 0x3b, 0x94, 0x56, 0x18, 0x2b, 0x36, 0x23, 0x48, 0x2d, 0xed, 0x58, 0x36, 0x18, 0x2b,
	0x31, 0xdd, 0x00, 0x07, 0x63, 0x2f, 0xa4, 0xc2, 0x42, 0x37, 0xb1, 0x2d, 0x59, 0x16, 0x0f, 0x5c,
	0x9a, 0x65, 0x77, 0xb2, 0xdd, 0xb4, 0xec, 0x0e, 0xbb, 0x53, 0x62, 0xbc, 0x68, 0xfc, 0x04, 0x26,
	0x1e, 0x3c, 0x79, 0xd7, 0x4f, 0xa2, 0xde, 0x48, 0xbc, 0x70, 0x84, 0xc5, 0x83, 0x47, 0x3e, 0x82,
	0xd9, 0xd9, 0x25, 0x6d, 0x71, 0x0b, 0xa7, 0xdd, 0x79, 0x9f, 0x77, 0xde, 0xf9, 0x3d, 0xef, 0xfc,
	0x81, 0xc8, 0x25, 0xa6, 0xe5, 0x31, 0x57, 0x63, 0x96, 0x63, 0x57, 0xa8, 0xeb, 0x30, 0x07, 0xa5,
	0x0d, 0x4b, 0xeb, 0x39, 0x66, 0x7e, 0xce, 0xd3, 0xb5, 0x9e, 0x46, 0x0f, 0xc4, 0xe8, 0x1b, 0xca,
	0xf9, 0x82, 0xe9, 0x38, 0x66, 0x8f, 0x88, 0x1a, 0xb5, 0x44, 0xcd, 0xb6, 0x1d, 0xc6, 0xe7, 0x7a,
	0xa1, 0x2a, 0x7c, 0x07, 0x70, 0x4e, 0x21, 0x47, 0x7d, 0xe2, 0x31, 0x85, 0x97, 0x26, 0xee, 0x26,
	0x39, 0xb6, 0x74, 0x82, 0x16, 0xe0, 0xb4, 0xde, 0xb3, 0x88, 0xcd, 0xda, 0xb4, 0x9b, 0x03, 0x25,
	0x50, 0xce, 0x28, 0x53, 0x61, 0x60, 0xa7, 0x8b, 0xe6, 0x60, 0x5a, 0xa3, 0xb4, 0x6d, 0x19, 0xb9,
	0x89, 0x12, 0x28, 0xa7, 0x94, 0x94, 0x46, 0xa9, 0x6c, 0x04, 0x73, 0x82, 0x30, 0xb3, 0x58, 0x8f,
	0xe4, 0x92, 0x25, 0x50, 0x9e, 0x56, 0xa6, 0x34, 0x4a, 0xd5, 0x60, 0x8c, 0x16, 0x61, 0xc6, 0xe0,
	0xa5, 0x23, 0x7d, 0x92, 0xeb, 0x77, 0xc3, 0x18, 0x4f, 0xa9, 0x16, 0xfc, 0xf5, 0x47, 0x70, 0xde,
	0x3a, 0xac, 0x18, 0x3d, 0xb3, 0x62, 0xba, 0x54, 0xaf, 0x6c, 0xbb, 0x54, 0x8f, 0xf8, 0x84, 0x1f,
	0x9c, 0xd5, 0xa3, 0x8e, 0xed, 0x91, 0x10, 0x32, 0x52, 0x82, 0x75, 0x3d, 0xe2, 0x1e, 0x13, 0x77,
	0x88, 0x35, 0x0c, 0xec, 0x74, 0xd1, 0x3c, 0xbc, 0xa3, 0xf5, 0x59, 0xe7, 0x0a, 0x36, 0xa9, 0xa4,
	0x83, 0xa1, 0x6c, 0xa0, 0x59, 0x98, 0x62, 0x4e, 0x97, 0xd8, 0x11, 0x69, 0x38, 0x40, 0x1b, 0xf0,
	0x3e, 0x4f, 0x3f, 0x24, 0xac, 0xe3, 0x18, 0x6d, 0x8f, 0x1c, 0xe5, 0x26, 0x4b, 0xc9, 0xf2, 0xcc,
	0xea, 0x42, 0x25, 0x6c, 0x74, 0xa5, 0xd6, 0x67, 0x1d, 0xc7, 0xb5, 0xde, 0xf1, 0x46, 0x36, 0x78,
	0x9a, 0x72, 0x2f, 0x98, 0x13, 0xfe, 0xef, 0x92, 0xa3, 0x6a, 0xd1, 0x5f, 0xcf, 0xc3, 0xdc, 0xff,
	0x46, 0x42, 0x78, 0x61, 0x11, 0x3e, 0x1e, 0x74, 0x9b, 0xba, 0x44, 0xd7, 0x18, 0x31, 0x46, 0x2c,
	0x09, 0x6f, 0x60, 0x31, 0xfa, 0x95, 0xde, 0xea, 0x1d, 0xcd, 0x36, 0x49, 0x8d, 0x53, 0x6f, 0x39,
	0xae, 0xca, 0x39, 0x87, 0x6c, 0x81, 0x11, 0x5b, 0x05, 0x38, 0xed, 0x59, 0xa6, 0xad, 0xb1, 0xbe,
	0x4b, 0xb8, 0xe3, 0x8c, 0x32, 0x08, 0x2c, 0x9f, 0x01, 0xf8, 0x20, 0xc6, 0x00, 0x2a, 0xc1, 0x42,
	0x6d, 0x4f, 0xad, 0xb7, 0x14, 0x79, 0xbf, 0xa6, 0xca, 0xad, 0x66, 0xbb, 0x21, 0xa9, 0xf5, 0xd6,
	0x66, 0xbb, 0xd9, 0x52, 0xeb, 0x72, 0x73, 0x3b, 0x9b, 0x40, 0x8b, 0xb0, 0x18, 0x9b, 0xb1, 0xb7,
	0x2b, 0x29, 0xcd, 0x5a, 0x43, 0xca, 0x02, 0x84, 0x61, 0x3e, 0x36, 0x65, 0xa7, 0xde, 0x6a, 0x4a,
	0xd9, 0x89, 0xb1, 0xba, 0xd4, 0xa8, 0xc9, 0xaf, 0xb3, 0x49, 0xb4, 0x04, 0x4b, 0xb1, 0xfa, 0x86,
	0xa4, 0xa8, 0xf2, 0x96, 0xbc, 0x51, 0x53, 0xa5, 0xec, 0xe4, 0xd8, 0x2a, 0xad, 0x20, 0x9a, 0x4d,
	0xad, 0xfe, 0x4a, 0xc2, 0x8c, 0x32, 0x74, 0x4f, 0xd0, 0x17, 0x00, 0x1f, 0x8e, 0xe9, 0xe2, 0x93,
	0xab, 0x4d, 0xbd, 0xb1, 0xd9, 0xf9, 0xe2, 0x20, 0x2d, 0xe6, 0xfc, 0x09, 0x2f, 0x3e, 0xfe, 0xfe,
	0xf3, 0x79, 0x62, 0x45, 0x78, 0x2e, 0x1e, 0xaf, 0x88, 0xc1, 0x76, 0x8b, 0xc3, 0xeb, 0x8b, 0xf1,
	0x45, 0xab, 0x60, 0x19, 0xbd, 0x87, 0x33, 0xd7, 0xae, 0x5d, 0xf1, 0x1a, 0xd0, 0xa8, 0x7c, 0x1b,
	0x88, 0xc8, 0x41, 0x9e, 0x09, 0x4b, 0xf1, 0x20, 0xa3, 0xc5, 0x02, 0x80, 0xaf, 0x00, 0xe6, 0xc6,
	0x1d, 0x45, 0xf4, 0x74, 0xb0, 0xd8, 0x8d, 0x87, 0xf5, 0x36, 0xaa, 0x97, 0x9c, 0x6a, 0x4d, 0xa8,
	0xdc, 0x46, 0x35, 0x5a, 0xbd, 0x0a, 0x96, 0x5f, 0x29, 0x27, 0xe7, 0x38, 0x71, 0x7a, 0x8e, 0x13,
	0x97, 0xe7, 0x18, 0x7c, 0xf0, 0x31, 0xf8, 0xe6, 0x63, 0xf0, 0xd3, 0xc7, 0xe0, 0xc4, 0xc7, 0xe0,
	0xcc, 0xc7, 0xe0, 0xaf, 0x8f, 0x13, 0x97, 0x3e, 0x06, 0x9f, 0x2e, 0x70, 0xe2, 0xe4, 0x02, 0x27,
	0x4e, 0x2f, 0x70, 0x02, 0xce, 0x0e, 0xdf, 0xbc, 0xe0, 0x21, 0xb0, 0x74, 0xe2, 0xed, 0x47, 0x0f,
	0xe5, 0x41, 0x9a, 0x3f, 0x7d, 0x6b, 0xff, 0x02, 0x00, 0x00, 0xff, 0xff, 0xb9, 0x0a, 0xd5, 0xba,
	0x4d, 0x05, 0x00, 0x00,
}

func (x AuthorizationMethod) String() string {
	s, ok := AuthorizationMethod_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *RequestRegisterDevice) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RequestRegisterDevice)
	if !ok {
		that2, ok := that.(RequestRegisterDevice)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.ClientPk, that1.ClientPk) {
		return false
	}
	if this.AppId != that1.AppId {
		return false
	}
	if this.AppTitle != that1.AppTitle {
		return false
	}
	if this.DeviceTitle != that1.DeviceTitle {
		return false
	}
	return true
}
func (this *ResponseDeviceRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ResponseDeviceRequest)
	if !ok {
		that2, ok := that.(ResponseDeviceRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.ServerPk, that1.ServerPk) {
		return false
	}
	if this.AuthId != that1.AuthId {
		return false
	}
	if this.Token != that1.Token {
		return false
	}
	if len(this.AuthMethodSeq) != len(that1.AuthMethodSeq) {
		return false
	}
	for i := range this.AuthMethodSeq {
		if this.AuthMethodSeq[i] != that1.AuthMethodSeq[i] {
			return false
		}
	}
	return true
}
func (this *RegisterDeprecatedDeviceRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RegisterDeprecatedDeviceRequest)
	if !ok {
		that2, ok := that.(RegisterDeprecatedDeviceRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *RequestExchangeAuthIdForToken) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RequestExchangeAuthIdForToken)
	if !ok {
		that2, ok := that.(RequestExchangeAuthIdForToken)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.AuthId != that1.AuthId {
		return false
	}
	if !bytes.Equal(this.Signature, that1.Signature) {
		return false
	}
	return true
}
func (this *RequestRegisterDevice) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&dialog.RequestRegisterDevice{")
	s = append(s, "ClientPk: "+fmt.Sprintf("%#v", this.ClientPk)+",\n")
	s = append(s, "AppId: "+fmt.Sprintf("%#v", this.AppId)+",\n")
	s = append(s, "AppTitle: "+fmt.Sprintf("%#v", this.AppTitle)+",\n")
	s = append(s, "DeviceTitle: "+fmt.Sprintf("%#v", this.DeviceTitle)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ResponseDeviceRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&dialog.ResponseDeviceRequest{")
	s = append(s, "ServerPk: "+fmt.Sprintf("%#v", this.ServerPk)+",\n")
	s = append(s, "AuthId: "+fmt.Sprintf("%#v", this.AuthId)+",\n")
	s = append(s, "Token: "+fmt.Sprintf("%#v", this.Token)+",\n")
	s = append(s, "AuthMethodSeq: "+fmt.Sprintf("%#v", this.AuthMethodSeq)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RegisterDeprecatedDeviceRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&dialog.RegisterDeprecatedDeviceRequest{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RequestExchangeAuthIdForToken) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&dialog.RequestExchangeAuthIdForToken{")
	s = append(s, "AuthId: "+fmt.Sprintf("%#v", this.AuthId)+",\n")
	s = append(s, "Signature: "+fmt.Sprintf("%#v", this.Signature)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringRegistration(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// RegistrationClient is the client API for Registration service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RegistrationClient interface {
	ExchangeAuthIdForToken(ctx context.Context, in *RequestExchangeAuthIdForToken, opts ...grpc.CallOption) (*ResponseDeviceRequest, error)
	/// register device to get auth token
	RegisterDevice(ctx context.Context, in *RequestRegisterDevice, opts ...grpc.CallOption) (*ResponseDeviceRequest, error)
	// deprecated
	RegisterDeprecatedDevice(ctx context.Context, in *RegisterDeprecatedDeviceRequest, opts ...grpc.CallOption) (*ResponseDeviceRequest, error)
}

type registrationClient struct {
	cc *grpc.ClientConn
}

func NewRegistrationClient(cc *grpc.ClientConn) RegistrationClient {
	return &registrationClient{cc}
}

func (c *registrationClient) ExchangeAuthIdForToken(ctx context.Context, in *RequestExchangeAuthIdForToken, opts ...grpc.CallOption) (*ResponseDeviceRequest, error) {
	out := new(ResponseDeviceRequest)
	err := c.cc.Invoke(ctx, "/dialog.Registration/ExchangeAuthIdForToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registrationClient) RegisterDevice(ctx context.Context, in *RequestRegisterDevice, opts ...grpc.CallOption) (*ResponseDeviceRequest, error) {
	out := new(ResponseDeviceRequest)
	err := c.cc.Invoke(ctx, "/dialog.Registration/RegisterDevice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registrationClient) RegisterDeprecatedDevice(ctx context.Context, in *RegisterDeprecatedDeviceRequest, opts ...grpc.CallOption) (*ResponseDeviceRequest, error) {
	out := new(ResponseDeviceRequest)
	err := c.cc.Invoke(ctx, "/dialog.Registration/RegisterDeprecatedDevice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RegistrationServer is the server API for Registration service.
type RegistrationServer interface {
	ExchangeAuthIdForToken(context.Context, *RequestExchangeAuthIdForToken) (*ResponseDeviceRequest, error)
	/// register device to get auth token
	RegisterDevice(context.Context, *RequestRegisterDevice) (*ResponseDeviceRequest, error)
	// deprecated
	RegisterDeprecatedDevice(context.Context, *RegisterDeprecatedDeviceRequest) (*ResponseDeviceRequest, error)
}

// UnimplementedRegistrationServer can be embedded to have forward compatible implementations.
type UnimplementedRegistrationServer struct {
}

func (*UnimplementedRegistrationServer) ExchangeAuthIdForToken(ctx context.Context, req *RequestExchangeAuthIdForToken) (*ResponseDeviceRequest, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExchangeAuthIdForToken not implemented")
}
func (*UnimplementedRegistrationServer) RegisterDevice(ctx context.Context, req *RequestRegisterDevice) (*ResponseDeviceRequest, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterDevice not implemented")
}
func (*UnimplementedRegistrationServer) RegisterDeprecatedDevice(ctx context.Context, req *RegisterDeprecatedDeviceRequest) (*ResponseDeviceRequest, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterDeprecatedDevice not implemented")
}

func RegisterRegistrationServer(s *grpc.Server, srv RegistrationServer) {
	s.RegisterService(&_Registration_serviceDesc, srv)
}

func _Registration_ExchangeAuthIdForToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestExchangeAuthIdForToken)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistrationServer).ExchangeAuthIdForToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dialog.Registration/ExchangeAuthIdForToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistrationServer).ExchangeAuthIdForToken(ctx, req.(*RequestExchangeAuthIdForToken))
	}
	return interceptor(ctx, in, info, handler)
}

func _Registration_RegisterDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestRegisterDevice)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistrationServer).RegisterDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dialog.Registration/RegisterDevice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistrationServer).RegisterDevice(ctx, req.(*RequestRegisterDevice))
	}
	return interceptor(ctx, in, info, handler)
}

func _Registration_RegisterDeprecatedDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterDeprecatedDeviceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistrationServer).RegisterDeprecatedDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dialog.Registration/RegisterDeprecatedDevice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistrationServer).RegisterDeprecatedDevice(ctx, req.(*RegisterDeprecatedDeviceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Registration_serviceDesc = grpc.ServiceDesc{
	ServiceName: "dialog.Registration",
	HandlerType: (*RegistrationServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ExchangeAuthIdForToken",
			Handler:    _Registration_ExchangeAuthIdForToken_Handler,
		},
		{
			MethodName: "RegisterDevice",
			Handler:    _Registration_RegisterDevice_Handler,
		},
		{
			MethodName: "RegisterDeprecatedDevice",
			Handler:    _Registration_RegisterDeprecatedDevice_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "registration.proto",
}

func (m *RequestRegisterDevice) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestRegisterDevice) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RequestRegisterDevice) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.DeviceTitle) > 0 {
		i -= len(m.DeviceTitle)
		copy(dAtA[i:], m.DeviceTitle)
		i = encodeVarintRegistration(dAtA, i, uint64(len(m.DeviceTitle)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.AppTitle) > 0 {
		i -= len(m.AppTitle)
		copy(dAtA[i:], m.AppTitle)
		i = encodeVarintRegistration(dAtA, i, uint64(len(m.AppTitle)))
		i--
		dAtA[i] = 0x1a
	}
	if m.AppId != 0 {
		i = encodeVarintRegistration(dAtA, i, uint64(m.AppId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.ClientPk) > 0 {
		i -= len(m.ClientPk)
		copy(dAtA[i:], m.ClientPk)
		i = encodeVarintRegistration(dAtA, i, uint64(len(m.ClientPk)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ResponseDeviceRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResponseDeviceRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ResponseDeviceRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.AuthMethodSeq) > 0 {
		dAtA2 := make([]byte, len(m.AuthMethodSeq)*10)
		var j1 int
		for _, num := range m.AuthMethodSeq {
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		i -= j1
		copy(dAtA[i:], dAtA2[:j1])
		i = encodeVarintRegistration(dAtA, i, uint64(j1))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Token) > 0 {
		i -= len(m.Token)
		copy(dAtA[i:], m.Token)
		i = encodeVarintRegistration(dAtA, i, uint64(len(m.Token)))
		i--
		dAtA[i] = 0x1a
	}
	if m.AuthId != 0 {
		i = encodeVarintRegistration(dAtA, i, uint64(m.AuthId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.ServerPk) > 0 {
		i -= len(m.ServerPk)
		copy(dAtA[i:], m.ServerPk)
		i = encodeVarintRegistration(dAtA, i, uint64(len(m.ServerPk)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RegisterDeprecatedDeviceRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RegisterDeprecatedDeviceRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RegisterDeprecatedDeviceRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *RequestExchangeAuthIdForToken) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestExchangeAuthIdForToken) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RequestExchangeAuthIdForToken) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Signature) > 0 {
		i -= len(m.Signature)
		copy(dAtA[i:], m.Signature)
		i = encodeVarintRegistration(dAtA, i, uint64(len(m.Signature)))
		i--
		dAtA[i] = 0x12
	}
	if m.AuthId != 0 {
		i = encodeVarintRegistration(dAtA, i, uint64(m.AuthId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintRegistration(dAtA []byte, offset int, v uint64) int {
	offset -= sovRegistration(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *RequestRegisterDevice) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ClientPk)
	if l > 0 {
		n += 1 + l + sovRegistration(uint64(l))
	}
	if m.AppId != 0 {
		n += 1 + sovRegistration(uint64(m.AppId))
	}
	l = len(m.AppTitle)
	if l > 0 {
		n += 1 + l + sovRegistration(uint64(l))
	}
	l = len(m.DeviceTitle)
	if l > 0 {
		n += 1 + l + sovRegistration(uint64(l))
	}
	return n
}

func (m *ResponseDeviceRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ServerPk)
	if l > 0 {
		n += 1 + l + sovRegistration(uint64(l))
	}
	if m.AuthId != 0 {
		n += 1 + sovRegistration(uint64(m.AuthId))
	}
	l = len(m.Token)
	if l > 0 {
		n += 1 + l + sovRegistration(uint64(l))
	}
	if len(m.AuthMethodSeq) > 0 {
		l = 0
		for _, e := range m.AuthMethodSeq {
			l += sovRegistration(uint64(e))
		}
		n += 1 + sovRegistration(uint64(l)) + l
	}
	return n
}

func (m *RegisterDeprecatedDeviceRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *RequestExchangeAuthIdForToken) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AuthId != 0 {
		n += 1 + sovRegistration(uint64(m.AuthId))
	}
	l = len(m.Signature)
	if l > 0 {
		n += 1 + l + sovRegistration(uint64(l))
	}
	return n
}

func sovRegistration(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozRegistration(x uint64) (n int) {
	return sovRegistration(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *RequestRegisterDevice) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RequestRegisterDevice{`,
		`ClientPk:` + fmt.Sprintf("%v", this.ClientPk) + `,`,
		`AppId:` + fmt.Sprintf("%v", this.AppId) + `,`,
		`AppTitle:` + fmt.Sprintf("%v", this.AppTitle) + `,`,
		`DeviceTitle:` + fmt.Sprintf("%v", this.DeviceTitle) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ResponseDeviceRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ResponseDeviceRequest{`,
		`ServerPk:` + fmt.Sprintf("%v", this.ServerPk) + `,`,
		`AuthId:` + fmt.Sprintf("%v", this.AuthId) + `,`,
		`Token:` + fmt.Sprintf("%v", this.Token) + `,`,
		`AuthMethodSeq:` + fmt.Sprintf("%v", this.AuthMethodSeq) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RegisterDeprecatedDeviceRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RegisterDeprecatedDeviceRequest{`,
		`}`,
	}, "")
	return s
}
func (this *RequestExchangeAuthIdForToken) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RequestExchangeAuthIdForToken{`,
		`AuthId:` + fmt.Sprintf("%v", this.AuthId) + `,`,
		`Signature:` + fmt.Sprintf("%v", this.Signature) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringRegistration(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *RequestRegisterDevice) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRegistration
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestRegisterDevice: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestRegisterDevice: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientPk", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegistration
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRegistration
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthRegistration
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClientPk = append(m.ClientPk[:0], dAtA[iNdEx:postIndex]...)
			if m.ClientPk == nil {
				m.ClientPk = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppId", wireType)
			}
			m.AppId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegistration
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AppId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppTitle", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegistration
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRegistration
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRegistration
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AppTitle = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeviceTitle", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegistration
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRegistration
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRegistration
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DeviceTitle = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRegistration(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRegistration
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRegistration
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResponseDeviceRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRegistration
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResponseDeviceRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResponseDeviceRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerPk", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegistration
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRegistration
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthRegistration
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ServerPk = append(m.ServerPk[:0], dAtA[iNdEx:postIndex]...)
			if m.ServerPk == nil {
				m.ServerPk = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuthId", wireType)
			}
			m.AuthId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegistration
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AuthId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegistration
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRegistration
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRegistration
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Token = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType == 0 {
				var v AuthorizationMethod
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowRegistration
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= AuthorizationMethod(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.AuthMethodSeq = append(m.AuthMethodSeq, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowRegistration
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthRegistration
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthRegistration
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				if elementCount != 0 && len(m.AuthMethodSeq) == 0 {
					m.AuthMethodSeq = make([]AuthorizationMethod, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v AuthorizationMethod
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowRegistration
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= AuthorizationMethod(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.AuthMethodSeq = append(m.AuthMethodSeq, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field AuthMethodSeq", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRegistration(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRegistration
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRegistration
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RegisterDeprecatedDeviceRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRegistration
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RegisterDeprecatedDeviceRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RegisterDeprecatedDeviceRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipRegistration(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRegistration
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRegistration
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestExchangeAuthIdForToken) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRegistration
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestExchangeAuthIdForToken: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestExchangeAuthIdForToken: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuthId", wireType)
			}
			m.AuthId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegistration
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AuthId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signature", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegistration
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRegistration
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthRegistration
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signature = append(m.Signature[:0], dAtA[iNdEx:postIndex]...)
			if m.Signature == nil {
				m.Signature = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRegistration(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRegistration
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRegistration
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipRegistration(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowRegistration
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRegistration
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRegistration
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthRegistration
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupRegistration
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthRegistration
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthRegistration        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowRegistration          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupRegistration = fmt.Errorf("proto: unexpected end of group")
)
