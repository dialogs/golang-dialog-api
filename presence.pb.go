// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: presence.proto

package dialog

import (
	context "context"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	types "github.com/gogo/protobuf/types"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strconv "strconv"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type TypingType int32

const (
	TYPINGTYPE_UNKNOWN TypingType = 0
	TYPINGTYPE_TEXT    TypingType = 1
	TYPINGTYPE_VOICE   TypingType = 2
)

var TypingType_name = map[int32]string{
	0: "TYPINGTYPE_UNKNOWN",
	1: "TYPINGTYPE_TEXT",
	2: "TYPINGTYPE_VOICE",
}

var TypingType_value = map[string]int32{
	"TYPINGTYPE_UNKNOWN": 0,
	"TYPINGTYPE_TEXT":    1,
	"TYPINGTYPE_VOICE":   2,
}

func (TypingType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_09da13d0a6600b92, []int{0}
}

type DeviceType int32

const (
	DEVICETYPE_UNKNOWN DeviceType = 0
	DEVICETYPE_GENERIC DeviceType = 1
	DEVICETYPE_PC      DeviceType = 2
	DEVICETYPE_MOBILE  DeviceType = 3
	DEVICETYPE_TABLET  DeviceType = 4
	DEVICETYPE_WATCH   DeviceType = 5
	DEVICETYPE_MIRROR  DeviceType = 6
	DEVICETYPE_CAR     DeviceType = 7
	DEVICETYPE_TABLE   DeviceType = 8
)

var DeviceType_name = map[int32]string{
	0: "DEVICETYPE_UNKNOWN",
	1: "DEVICETYPE_GENERIC",
	2: "DEVICETYPE_PC",
	3: "DEVICETYPE_MOBILE",
	4: "DEVICETYPE_TABLET",
	5: "DEVICETYPE_WATCH",
	6: "DEVICETYPE_MIRROR",
	7: "DEVICETYPE_CAR",
	8: "DEVICETYPE_TABLE",
}

var DeviceType_value = map[string]int32{
	"DEVICETYPE_UNKNOWN": 0,
	"DEVICETYPE_GENERIC": 1,
	"DEVICETYPE_PC":      2,
	"DEVICETYPE_MOBILE":  3,
	"DEVICETYPE_TABLET":  4,
	"DEVICETYPE_WATCH":   5,
	"DEVICETYPE_MIRROR":  6,
	"DEVICETYPE_CAR":     7,
	"DEVICETYPE_TABLE":   8,
}

func (DeviceType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_09da13d0a6600b92, []int{1}
}

// Sending typing notification
type RequestStartTyping struct {
	Peer       *OutPeer   `protobuf:"bytes,1,opt,name=peer,proto3" json:"peer,omitempty"`
	TypingType TypingType `protobuf:"varint,3,opt,name=typing_type,json=typingType,proto3,enum=dialog.TypingType" json:"typing_type,omitempty"`
}

func (m *RequestStartTyping) Reset()      { *m = RequestStartTyping{} }
func (*RequestStartTyping) ProtoMessage() {}
func (*RequestStartTyping) Descriptor() ([]byte, []int) {
	return fileDescriptor_09da13d0a6600b92, []int{0}
}
func (m *RequestStartTyping) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RequestStartTyping) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RequestStartTyping.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RequestStartTyping) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RequestStartTyping.Merge(m, src)
}
func (m *RequestStartTyping) XXX_Size() int {
	return m.Size()
}
func (m *RequestStartTyping) XXX_DiscardUnknown() {
	xxx_messageInfo_RequestStartTyping.DiscardUnknown(m)
}

var xxx_messageInfo_RequestStartTyping proto.InternalMessageInfo

func (m *RequestStartTyping) GetPeer() *OutPeer {
	if m != nil {
		return m.Peer
	}
	return nil
}

func (m *RequestStartTyping) GetTypingType() TypingType {
	if m != nil {
		return m.TypingType
	}
	return TYPINGTYPE_UNKNOWN
}

// Stop typing
type RequestStopTyping struct {
	Peer       *OutPeer   `protobuf:"bytes,1,opt,name=peer,proto3" json:"peer,omitempty"`
	TypingType TypingType `protobuf:"varint,2,opt,name=typing_type,json=typingType,proto3,enum=dialog.TypingType" json:"typing_type,omitempty"`
}

func (m *RequestStopTyping) Reset()      { *m = RequestStopTyping{} }
func (*RequestStopTyping) ProtoMessage() {}
func (*RequestStopTyping) Descriptor() ([]byte, []int) {
	return fileDescriptor_09da13d0a6600b92, []int{1}
}
func (m *RequestStopTyping) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RequestStopTyping) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RequestStopTyping.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RequestStopTyping) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RequestStopTyping.Merge(m, src)
}
func (m *RequestStopTyping) XXX_Size() int {
	return m.Size()
}
func (m *RequestStopTyping) XXX_DiscardUnknown() {
	xxx_messageInfo_RequestStopTyping.DiscardUnknown(m)
}

var xxx_messageInfo_RequestStopTyping proto.InternalMessageInfo

func (m *RequestStopTyping) GetPeer() *OutPeer {
	if m != nil {
		return m.Peer
	}
	return nil
}

func (m *RequestStopTyping) GetTypingType() TypingType {
	if m != nil {
		return m.TypingType
	}
	return TYPINGTYPE_UNKNOWN
}

// Sending online state
type RequestSetOnline struct {
	IsOnline   bool       `protobuf:"varint,1,opt,name=is_online,json=isOnline,proto3" json:"is_online,omitempty"`
	Timeout    int64      `protobuf:"varint,2,opt,name=timeout,proto3" json:"timeout,omitempty"`
	DeviceType DeviceType `protobuf:"varint,3,opt,name=device_type,json=deviceType,proto3,enum=dialog.DeviceType" json:"device_type,omitempty"`
}

func (m *RequestSetOnline) Reset()      { *m = RequestSetOnline{} }
func (*RequestSetOnline) ProtoMessage() {}
func (*RequestSetOnline) Descriptor() ([]byte, []int) {
	return fileDescriptor_09da13d0a6600b92, []int{2}
}
func (m *RequestSetOnline) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RequestSetOnline) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RequestSetOnline.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RequestSetOnline) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RequestSetOnline.Merge(m, src)
}
func (m *RequestSetOnline) XXX_Size() int {
	return m.Size()
}
func (m *RequestSetOnline) XXX_DiscardUnknown() {
	xxx_messageInfo_RequestSetOnline.DiscardUnknown(m)
}

var xxx_messageInfo_RequestSetOnline proto.InternalMessageInfo

func (m *RequestSetOnline) GetIsOnline() bool {
	if m != nil {
		return m.IsOnline
	}
	return false
}

func (m *RequestSetOnline) GetTimeout() int64 {
	if m != nil {
		return m.Timeout
	}
	return 0
}

func (m *RequestSetOnline) GetDeviceType() DeviceType {
	if m != nil {
		return m.DeviceType
	}
	return DEVICETYPE_UNKNOWN
}

// Update about user's typing
type UpdateTyping struct {
	Peer       *Peer      `protobuf:"bytes,1,opt,name=peer,proto3" json:"peer,omitempty"`
	UserId     int32      `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	TypingType TypingType `protobuf:"varint,3,opt,name=typing_type,json=typingType,proto3,enum=dialog.TypingType" json:"typing_type,omitempty"`
}

func (m *UpdateTyping) Reset()      { *m = UpdateTyping{} }
func (*UpdateTyping) ProtoMessage() {}
func (*UpdateTyping) Descriptor() ([]byte, []int) {
	return fileDescriptor_09da13d0a6600b92, []int{3}
}
func (m *UpdateTyping) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateTyping) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateTyping.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateTyping) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateTyping.Merge(m, src)
}
func (m *UpdateTyping) XXX_Size() int {
	return m.Size()
}
func (m *UpdateTyping) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateTyping.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateTyping proto.InternalMessageInfo

func (m *UpdateTyping) GetPeer() *Peer {
	if m != nil {
		return m.Peer
	}
	return nil
}

func (m *UpdateTyping) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *UpdateTyping) GetTypingType() TypingType {
	if m != nil {
		return m.TypingType
	}
	return TYPINGTYPE_UNKNOWN
}

// Update about user's typing stop
type UpdateTypingStop struct {
	Peer       *Peer      `protobuf:"bytes,1,opt,name=peer,proto3" json:"peer,omitempty"`
	UserId     int32      `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	TypingType TypingType `protobuf:"varint,3,opt,name=typing_type,json=typingType,proto3,enum=dialog.TypingType" json:"typing_type,omitempty"`
}

func (m *UpdateTypingStop) Reset()      { *m = UpdateTypingStop{} }
func (*UpdateTypingStop) ProtoMessage() {}
func (*UpdateTypingStop) Descriptor() ([]byte, []int) {
	return fileDescriptor_09da13d0a6600b92, []int{4}
}
func (m *UpdateTypingStop) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateTypingStop) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateTypingStop.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateTypingStop) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateTypingStop.Merge(m, src)
}
func (m *UpdateTypingStop) XXX_Size() int {
	return m.Size()
}
func (m *UpdateTypingStop) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateTypingStop.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateTypingStop proto.InternalMessageInfo

func (m *UpdateTypingStop) GetPeer() *Peer {
	if m != nil {
		return m.Peer
	}
	return nil
}

func (m *UpdateTypingStop) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *UpdateTypingStop) GetTypingType() TypingType {
	if m != nil {
		return m.TypingType
	}
	return TYPINGTYPE_UNKNOWN
}

// Update about user became online
type UpdateUserOnline struct {
	UserId     int32      `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	DeviceType DeviceType `protobuf:"varint,2,opt,name=device_type,json=deviceType,proto3,enum=dialog.DeviceType" json:"device_type,omitempty"`
}

func (m *UpdateUserOnline) Reset()      { *m = UpdateUserOnline{} }
func (*UpdateUserOnline) ProtoMessage() {}
func (*UpdateUserOnline) Descriptor() ([]byte, []int) {
	return fileDescriptor_09da13d0a6600b92, []int{5}
}
func (m *UpdateUserOnline) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateUserOnline) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateUserOnline.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateUserOnline) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateUserOnline.Merge(m, src)
}
func (m *UpdateUserOnline) XXX_Size() int {
	return m.Size()
}
func (m *UpdateUserOnline) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateUserOnline.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateUserOnline proto.InternalMessageInfo

func (m *UpdateUserOnline) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *UpdateUserOnline) GetDeviceType() DeviceType {
	if m != nil {
		return m.DeviceType
	}
	return DEVICETYPE_UNKNOWN
}

// Update about user became offline
type UpdateUserOffline struct {
	Uid        int32      `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`
	DeviceType DeviceType `protobuf:"varint,2,opt,name=device_type,json=deviceType,proto3,enum=dialog.DeviceType" json:"device_type,omitempty"`
}

func (m *UpdateUserOffline) Reset()      { *m = UpdateUserOffline{} }
func (*UpdateUserOffline) ProtoMessage() {}
func (*UpdateUserOffline) Descriptor() ([]byte, []int) {
	return fileDescriptor_09da13d0a6600b92, []int{6}
}
func (m *UpdateUserOffline) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateUserOffline) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateUserOffline.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateUserOffline) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateUserOffline.Merge(m, src)
}
func (m *UpdateUserOffline) XXX_Size() int {
	return m.Size()
}
func (m *UpdateUserOffline) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateUserOffline.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateUserOffline proto.InternalMessageInfo

func (m *UpdateUserOffline) GetUid() int32 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func (m *UpdateUserOffline) GetDeviceType() DeviceType {
	if m != nil {
		return m.DeviceType
	}
	return DEVICETYPE_UNKNOWN
}

// Update about user's last seen state
type UpdateUserLastSeen struct {
	Uid         int32      `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`
	LastSeenAt  int64      `protobuf:"varint,2,opt,name=last_seen_at,json=lastSeenAt,proto3" json:"last_seen_at,omitempty"`
	DeviceType  DeviceType `protobuf:"varint,3,opt,name=device_type,json=deviceType,proto3,enum=dialog.DeviceType" json:"device_type,omitempty"`
	CurrentTime int64      `protobuf:"varint,5,opt,name=current_time,json=currentTime,proto3" json:"current_time,omitempty"`
}

func (m *UpdateUserLastSeen) Reset()      { *m = UpdateUserLastSeen{} }
func (*UpdateUserLastSeen) ProtoMessage() {}
func (*UpdateUserLastSeen) Descriptor() ([]byte, []int) {
	return fileDescriptor_09da13d0a6600b92, []int{7}
}
func (m *UpdateUserLastSeen) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateUserLastSeen) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateUserLastSeen.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateUserLastSeen) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateUserLastSeen.Merge(m, src)
}
func (m *UpdateUserLastSeen) XXX_Size() int {
	return m.Size()
}
func (m *UpdateUserLastSeen) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateUserLastSeen.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateUserLastSeen proto.InternalMessageInfo

func (m *UpdateUserLastSeen) GetUid() int32 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func (m *UpdateUserLastSeen) GetLastSeenAt() int64 {
	if m != nil {
		return m.LastSeenAt
	}
	return 0
}

func (m *UpdateUserLastSeen) GetDeviceType() DeviceType {
	if m != nil {
		return m.DeviceType
	}
	return DEVICETYPE_UNKNOWN
}

func (m *UpdateUserLastSeen) GetCurrentTime() int64 {
	if m != nil {
		return m.CurrentTime
	}
	return 0
}

// Update about group online change
type UpdateGroupOnline struct {
	GroupId int32 `protobuf:"varint,1,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	/// amount of online users.
	Count int32 `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
	/// The list of online users will only be sent if the flag was set during the subscription.
	UsersId []int32 `protobuf:"varint,3,rep,packed,name=users_id,json=usersId,proto3" json:"users_id,omitempty"`
}

func (m *UpdateGroupOnline) Reset()      { *m = UpdateGroupOnline{} }
func (*UpdateGroupOnline) ProtoMessage() {}
func (*UpdateGroupOnline) Descriptor() ([]byte, []int) {
	return fileDescriptor_09da13d0a6600b92, []int{8}
}
func (m *UpdateGroupOnline) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateGroupOnline) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateGroupOnline.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateGroupOnline) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateGroupOnline.Merge(m, src)
}
func (m *UpdateGroupOnline) XXX_Size() int {
	return m.Size()
}
func (m *UpdateGroupOnline) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateGroupOnline.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateGroupOnline proto.InternalMessageInfo

func (m *UpdateGroupOnline) GetGroupId() int32 {
	if m != nil {
		return m.GroupId
	}
	return 0
}

func (m *UpdateGroupOnline) GetCount() int32 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *UpdateGroupOnline) GetUsersId() []int32 {
	if m != nil {
		return m.UsersId
	}
	return nil
}

type UpdateGroupTyping struct {
	GroupId     int32                           `protobuf:"varint,1,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	UsersTyping []*UpdateGroupTyping_UserTyping `protobuf:"bytes,2,rep,name=users_typing,json=usersTyping,proto3" json:"users_typing,omitempty"`
}

func (m *UpdateGroupTyping) Reset()      { *m = UpdateGroupTyping{} }
func (*UpdateGroupTyping) ProtoMessage() {}
func (*UpdateGroupTyping) Descriptor() ([]byte, []int) {
	return fileDescriptor_09da13d0a6600b92, []int{9}
}
func (m *UpdateGroupTyping) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateGroupTyping) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateGroupTyping.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateGroupTyping) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateGroupTyping.Merge(m, src)
}
func (m *UpdateGroupTyping) XXX_Size() int {
	return m.Size()
}
func (m *UpdateGroupTyping) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateGroupTyping.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateGroupTyping proto.InternalMessageInfo

func (m *UpdateGroupTyping) GetGroupId() int32 {
	if m != nil {
		return m.GroupId
	}
	return 0
}

func (m *UpdateGroupTyping) GetUsersTyping() []*UpdateGroupTyping_UserTyping {
	if m != nil {
		return m.UsersTyping
	}
	return nil
}

type UpdateGroupTyping_UserTyping struct {
	UserId     int32      `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	TypingType TypingType `protobuf:"varint,2,opt,name=typing_type,json=typingType,proto3,enum=dialog.TypingType" json:"typing_type,omitempty"`
}

func (m *UpdateGroupTyping_UserTyping) Reset()      { *m = UpdateGroupTyping_UserTyping{} }
func (*UpdateGroupTyping_UserTyping) ProtoMessage() {}
func (*UpdateGroupTyping_UserTyping) Descriptor() ([]byte, []int) {
	return fileDescriptor_09da13d0a6600b92, []int{9, 0}
}
func (m *UpdateGroupTyping_UserTyping) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateGroupTyping_UserTyping) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateGroupTyping_UserTyping.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateGroupTyping_UserTyping) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateGroupTyping_UserTyping.Merge(m, src)
}
func (m *UpdateGroupTyping_UserTyping) XXX_Size() int {
	return m.Size()
}
func (m *UpdateGroupTyping_UserTyping) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateGroupTyping_UserTyping.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateGroupTyping_UserTyping proto.InternalMessageInfo

func (m *UpdateGroupTyping_UserTyping) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *UpdateGroupTyping_UserTyping) GetTypingType() TypingType {
	if m != nil {
		return m.TypingType
	}
	return TYPINGTYPE_UNKNOWN
}

// Request for last user online timestamp
type RequestGetUserLastPresence struct {
	UserOutPeer *UserOutPeer `protobuf:"bytes,1,opt,name=user_out_peer,json=userOutPeer,proto3" json:"user_out_peer,omitempty"`
}

func (m *RequestGetUserLastPresence) Reset()      { *m = RequestGetUserLastPresence{} }
func (*RequestGetUserLastPresence) ProtoMessage() {}
func (*RequestGetUserLastPresence) Descriptor() ([]byte, []int) {
	return fileDescriptor_09da13d0a6600b92, []int{10}
}
func (m *RequestGetUserLastPresence) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RequestGetUserLastPresence) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RequestGetUserLastPresence.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RequestGetUserLastPresence) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RequestGetUserLastPresence.Merge(m, src)
}
func (m *RequestGetUserLastPresence) XXX_Size() int {
	return m.Size()
}
func (m *RequestGetUserLastPresence) XXX_DiscardUnknown() {
	xxx_messageInfo_RequestGetUserLastPresence.DiscardUnknown(m)
}

var xxx_messageInfo_RequestGetUserLastPresence proto.InternalMessageInfo

func (m *RequestGetUserLastPresence) GetUserOutPeer() *UserOutPeer {
	if m != nil {
		return m.UserOutPeer
	}
	return nil
}

// Response for RequestGetUserLastPresence
type ResponseUserLastPresence struct {
	// Types that are valid to be assigned to Payload:
	//	*ResponseUserLastPresence_LastOnlineAt
	//	*ResponseUserLastPresence_NotFoundError
	Payload isResponseUserLastPresence_Payload `protobuf_oneof:"payload"`
}

func (m *ResponseUserLastPresence) Reset()      { *m = ResponseUserLastPresence{} }
func (*ResponseUserLastPresence) ProtoMessage() {}
func (*ResponseUserLastPresence) Descriptor() ([]byte, []int) {
	return fileDescriptor_09da13d0a6600b92, []int{11}
}
func (m *ResponseUserLastPresence) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ResponseUserLastPresence) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ResponseUserLastPresence.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ResponseUserLastPresence) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResponseUserLastPresence.Merge(m, src)
}
func (m *ResponseUserLastPresence) XXX_Size() int {
	return m.Size()
}
func (m *ResponseUserLastPresence) XXX_DiscardUnknown() {
	xxx_messageInfo_ResponseUserLastPresence.DiscardUnknown(m)
}

var xxx_messageInfo_ResponseUserLastPresence proto.InternalMessageInfo

type isResponseUserLastPresence_Payload interface {
	isResponseUserLastPresence_Payload()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type ResponseUserLastPresence_LastOnlineAt struct {
	LastOnlineAt *types.Timestamp `protobuf:"bytes,1,opt,name=last_online_at,json=lastOnlineAt,proto3,oneof" json:"last_online_at,omitempty"`
}
type ResponseUserLastPresence_NotFoundError struct {
	NotFoundError *ResponseUserLastPresence_UserNotFoundError `protobuf:"bytes,2,opt,name=not_found_error,json=notFoundError,proto3,oneof" json:"not_found_error,omitempty"`
}

func (*ResponseUserLastPresence_LastOnlineAt) isResponseUserLastPresence_Payload()  {}
func (*ResponseUserLastPresence_NotFoundError) isResponseUserLastPresence_Payload() {}

func (m *ResponseUserLastPresence) GetPayload() isResponseUserLastPresence_Payload {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (m *ResponseUserLastPresence) GetLastOnlineAt() *types.Timestamp {
	if x, ok := m.GetPayload().(*ResponseUserLastPresence_LastOnlineAt); ok {
		return x.LastOnlineAt
	}
	return nil
}

func (m *ResponseUserLastPresence) GetNotFoundError() *ResponseUserLastPresence_UserNotFoundError {
	if x, ok := m.GetPayload().(*ResponseUserLastPresence_NotFoundError); ok {
		return x.NotFoundError
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*ResponseUserLastPresence) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*ResponseUserLastPresence_LastOnlineAt)(nil),
		(*ResponseUserLastPresence_NotFoundError)(nil),
	}
}

type ResponseUserLastPresence_UserNotFoundError struct {
}

func (m *ResponseUserLastPresence_UserNotFoundError) Reset() {
	*m = ResponseUserLastPresence_UserNotFoundError{}
}
func (*ResponseUserLastPresence_UserNotFoundError) ProtoMessage() {}
func (*ResponseUserLastPresence_UserNotFoundError) Descriptor() ([]byte, []int) {
	return fileDescriptor_09da13d0a6600b92, []int{11, 0}
}
func (m *ResponseUserLastPresence_UserNotFoundError) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ResponseUserLastPresence_UserNotFoundError) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ResponseUserLastPresence_UserNotFoundError.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ResponseUserLastPresence_UserNotFoundError) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResponseUserLastPresence_UserNotFoundError.Merge(m, src)
}
func (m *ResponseUserLastPresence_UserNotFoundError) XXX_Size() int {
	return m.Size()
}
func (m *ResponseUserLastPresence_UserNotFoundError) XXX_DiscardUnknown() {
	xxx_messageInfo_ResponseUserLastPresence_UserNotFoundError.DiscardUnknown(m)
}

var xxx_messageInfo_ResponseUserLastPresence_UserNotFoundError proto.InternalMessageInfo

func init() {
	proto.RegisterEnum("dialog.TypingType", TypingType_name, TypingType_value)
	proto.RegisterEnum("dialog.DeviceType", DeviceType_name, DeviceType_value)
	proto.RegisterType((*RequestStartTyping)(nil), "dialog.RequestStartTyping")
	proto.RegisterType((*RequestStopTyping)(nil), "dialog.RequestStopTyping")
	proto.RegisterType((*RequestSetOnline)(nil), "dialog.RequestSetOnline")
	proto.RegisterType((*UpdateTyping)(nil), "dialog.UpdateTyping")
	proto.RegisterType((*UpdateTypingStop)(nil), "dialog.UpdateTypingStop")
	proto.RegisterType((*UpdateUserOnline)(nil), "dialog.UpdateUserOnline")
	proto.RegisterType((*UpdateUserOffline)(nil), "dialog.UpdateUserOffline")
	proto.RegisterType((*UpdateUserLastSeen)(nil), "dialog.UpdateUserLastSeen")
	proto.RegisterType((*UpdateGroupOnline)(nil), "dialog.UpdateGroupOnline")
	proto.RegisterType((*UpdateGroupTyping)(nil), "dialog.UpdateGroupTyping")
	proto.RegisterType((*UpdateGroupTyping_UserTyping)(nil), "dialog.UpdateGroupTyping.UserTyping")
	proto.RegisterType((*RequestGetUserLastPresence)(nil), "dialog.RequestGetUserLastPresence")
	proto.RegisterType((*ResponseUserLastPresence)(nil), "dialog.ResponseUserLastPresence")
	proto.RegisterType((*ResponseUserLastPresence_UserNotFoundError)(nil), "dialog.ResponseUserLastPresence.UserNotFoundError")
}

func init() { proto.RegisterFile("presence.proto", fileDescriptor_09da13d0a6600b92) }

var fileDescriptor_09da13d0a6600b92 = []byte{
	// 1147 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x57, 0xc1, 0x6f, 0xe3, 0xd4,
	0x13, 0xce, 0x4b, 0xd2, 0x26, 0x9d, 0xa4, 0xad, 0xe3, 0x76, 0x7f, 0xbf, 0x6c, 0xe8, 0x7a, 0x83,
	0x81, 0xdd, 0x2a, 0x87, 0xa4, 0x64, 0x6f, 0xbd, 0xac, 0x92, 0x6c, 0xb6, 0x4d, 0x29, 0x49, 0x15,
	0xd2, 0x2e, 0x8b, 0x90, 0x22, 0x37, 0x7e, 0x09, 0x96, 0x5c, 0x3f, 0x63, 0x3f, 0x17, 0x7a, 0x43,
	0x7b, 0x5c, 0x81, 0x40, 0xe2, 0x9f, 0x00, 0x21, 0x71, 0xe4, 0x6f, 0xe0, 0x46, 0xc5, 0x72, 0xd8,
	0x23, 0x4d, 0x39, 0xa0, 0x3d, 0xed, 0x9d, 0x0b, 0x7a, 0xcf, 0x76, 0xe3, 0x3a, 0x0e, 0xad, 0x44,
	0x39, 0xb5, 0x9e, 0x6f, 0x66, 0xbe, 0x6f, 0xde, 0xcc, 0xd8, 0x2f, 0xb0, 0x64, 0x5a, 0xd8, 0xc6,
	0xc6, 0x00, 0x97, 0x4d, 0x8b, 0x50, 0x22, 0xce, 0xab, 0x9a, 0xa2, 0x93, 0x51, 0xe1, 0xee, 0x88,
	0x90, 0x91, 0x8e, 0x2b, 0xdc, 0x7a, 0xe8, 0x0c, 0x2b, 0x54, 0x3b, 0xc2, 0x36, 0x55, 0x8e, 0x4c,
	0xd7, 0xb1, 0x20, 0x85, 0x1d, 0x3e, 0xb3, 0x14, 0xd3, 0xc4, 0x96, 0xed, 0xe1, 0x6b, 0x1e, 0xae,
	0x98, 0x5a, 0x45, 0x31, 0x0c, 0x42, 0x15, 0xaa, 0x11, 0xc3, 0x47, 0x73, 0x2a, 0x1e, 0x6a, 0x86,
	0x16, 0x34, 0xad, 0x1c, 0x69, 0xf6, 0x00, 0xeb, 0xba, 0x62, 0x60, 0xe2, 0xf8, 0xc6, 0x8c, 0x89,
	0x27, 0x29, 0x6f, 0xd9, 0x03, 0x45, 0x57, 0xcc, 0xc3, 0x8a, 0xf7, 0xd7, 0x35, 0xcb, 0x3f, 0x21,
	0x10, 0xbb, 0xf8, 0x53, 0x07, 0xdb, 0xf4, 0x03, 0xaa, 0x58, 0xb4, 0x77, 0x62, 0x6a, 0xc6, 0x48,
	0xac, 0x42, 0x92, 0x05, 0xe7, 0x51, 0x11, 0xad, 0x67, 0xaa, 0xcb, 0x65, 0xb7, 0xb0, 0x72, 0xc7,
	0xa1, 0x7b, 0x18, 0x5b, 0xf5, 0xc5, 0xe7, 0xaf, 0x36, 0x16, 0x20, 0x75, 0xac, 0xd9, 0xda, 0xa1,
	0x8e, 0xbb, 0xdc, 0x57, 0xac, 0x43, 0x86, 0xf2, 0xe8, 0x3e, 0x3d, 0x31, 0x71, 0x3e, 0x51, 0x44,
	0xeb, 0x4b, 0x55, 0xd1, 0x0f, 0x75, 0x13, 0xf7, 0x4e, 0x4c, 0x1c, 0x8e, 0x06, 0x7a, 0x01, 0x6d,
	0xae, 0x8d, 0x1f, 0xde, 0x86, 0xff, 0x6b, 0x47, 0x65, 0x55, 0x1f, 0x95, 0x47, 0x96, 0x39, 0x28,
	0x6f, 0x59, 0xe6, 0xc0, 0x13, 0xb8, 0x93, 0x4c, 0xc7, 0x85, 0xc4, 0x4e, 0x32, 0x9d, 0x14, 0xe6,
	0xe4, 0xef, 0x11, 0xe4, 0x2e, 0x84, 0x13, 0xf3, 0xe6, 0x74, 0xc7, 0x6f, 0x5c, 0xb7, 0xfc, 0x0b,
	0x02, 0xc1, 0xd7, 0x8a, 0x69, 0xc7, 0xd0, 0x35, 0x03, 0x8b, 0x25, 0x58, 0xd0, 0xec, 0x3e, 0xe1,
	0x0f, 0x5c, 0x6f, 0x3a, 0x4c, 0x90, 0xd6, 0x6c, 0xcf, 0xf7, 0x3e, 0xa4, 0xd8, 0x08, 0x11, 0x87,
	0x72, 0x79, 0x89, 0xb0, 0xa7, 0x8f, 0xb2, 0x5a, 0x54, 0x7c, 0xac, 0x0d, 0x70, 0x64, 0x0f, 0x1e,
	0x71, 0x28, 0xb2, 0x16, 0xf5, 0x02, 0xba, 0xb2, 0x07, 0xec, 0xf4, 0x7f, 0x40, 0x90, 0xdd, 0x37,
	0x55, 0x85, 0x62, 0xef, 0xe0, 0x2b, 0x97, 0x0e, 0x3e, 0xeb, 0x33, 0xce, 0x3e, 0xf5, 0x7b, 0x90,
	0x72, 0x6c, 0x6c, 0xf5, 0x35, 0x95, 0x97, 0x34, 0x17, 0xf6, 0x9a, 0x67, 0x68, 0x4b, 0xbd, 0x89,
	0xa9, 0x92, 0x7f, 0x44, 0x20, 0x04, 0xd5, 0xb2, 0x81, 0xf9, 0xef, 0x14, 0xd7, 0xae, 0xab, 0x38,
	0xfb, 0xfc, 0xd5, 0x46, 0x1a, 0xe6, 0x3f, 0xd1, 0x54, 0x15, 0x1b, 0x97, 0x04, 0x3b, 0xbe, 0xde,
	0x7d, 0x1b, 0x5b, 0xde, 0x0c, 0x04, 0xe8, 0xd1, 0x3f, 0xd1, 0x3f, 0xb8, 0x3c, 0x02, 0xf1, 0x59,
	0x23, 0x10, 0xec, 0xf9, 0x4e, 0x32, 0x9d, 0x10, 0x92, 0x32, 0x81, 0x5c, 0x80, 0x76, 0x38, 0xe4,
	0xbc, 0x77, 0x21, 0xe1, 0xcc, 0xe2, 0x64, 0xc8, 0xbf, 0x21, 0x7c, 0x81, 0x40, 0x9c, 0x30, 0xee,
	0x2a, 0x6c, 0x3f, 0xb0, 0x71, 0x35, 0x65, 0x05, 0xb2, 0xba, 0x62, 0xd3, 0xbe, 0x8d, 0xb1, 0xd1,
	0x57, 0x66, 0x2c, 0x05, 0xe8, 0x5e, 0xbe, 0x1a, 0x0d, 0x6b, 0x4c, 0x5c, 0x47, 0xa3, 0xb8, 0x01,
	0xd9, 0x81, 0x63, 0x59, 0xd8, 0xa0, 0x7d, 0xb6, 0x5f, 0xf9, 0xb9, 0x28, 0x96, 0x8c, 0xe7, 0xd2,
	0xd3, 0x8e, 0xb0, 0xb7, 0x1c, 0x5f, 0x22, 0xff, 0x1c, 0xb7, 0x2c, 0xe2, 0x98, 0x5e, 0xff, 0xd6,
	0x21, 0x3d, 0x62, 0x8f, 0x33, 0x1b, 0x98, 0xe2, 0x70, 0x4b, 0x15, 0xdf, 0x82, 0xb9, 0x01, 0x71,
	0x0c, 0x1a, 0x3d, 0x66, 0x2e, 0xc6, 0xd2, 0xb1, 0x86, 0xdb, 0x2c, 0x5d, 0xa2, 0x98, 0x88, 0x48,
	0xc7, 0xe1, 0x96, 0x2a, 0x7f, 0x1d, 0xbf, 0x24, 0xc7, 0x5b, 0xd8, 0xeb, 0xcb, 0x39, 0x80, 0xac,
	0xcb, 0xe4, 0x0e, 0x68, 0x3e, 0x5e, 0x4c, 0xac, 0x67, 0xaa, 0x6f, 0xfb, 0x87, 0x37, 0x95, 0xba,
	0xcc, 0x7a, 0xe9, 0xfe, 0x3b, 0x75, 0x58, 0x3c, 0x91, 0x8b, 0x15, 0x3e, 0x07, 0x98, 0x78, 0x5e,
	0x7b, 0xbc, 0x6f, 0xe0, 0x6d, 0x2d, 0x3f, 0x43, 0x50, 0xf0, 0xde, 0x67, 0x5b, 0x98, 0xfa, 0xa3,
	0xb7, 0xe7, 0x7d, 0xcc, 0xc5, 0xc7, 0xb0, 0xc8, 0xa5, 0x10, 0x87, 0xf6, 0x03, 0xaf, 0x88, 0x95,
	0x8b, 0x8a, 0xd9, 0x76, 0x44, 0x7f, 0x51, 0x78, 0x81, 0x1e, 0x76, 0xc5, 0x47, 0xe1, 0x2f, 0x04,
	0xf9, 0x2e, 0xb6, 0x4d, 0x62, 0xd8, 0x78, 0x4a, 0x42, 0x1d, 0x96, 0xf8, 0x80, 0xbb, 0x9f, 0x07,
	0x36, 0xe2, 0xae, 0x86, 0x42, 0xd9, 0xbd, 0x19, 0x94, 0xfd, 0x9b, 0x43, 0xb9, 0xe7, 0x5f, 0x2d,
	0xb6, 0x63, 0x5d, 0xbe, 0x14, 0xee, 0xb8, 0xd5, 0xa8, 0xf8, 0x31, 0x2c, 0x1b, 0x84, 0xf6, 0x87,
	0xc4, 0x31, 0xd4, 0x3e, 0xb6, 0x2c, 0x62, 0xf1, 0xd3, 0xca, 0x54, 0xab, 0x7e, 0x21, 0xb3, 0xe8,
	0x79, 0x85, 0x6d, 0x42, 0x1f, 0xb3, 0xd0, 0x26, 0x8b, 0xdc, 0x8e, 0x75, 0x17, 0x8d, 0xa0, 0xa1,
	0xb0, 0x02, 0xb9, 0x29, 0xaf, 0xcd, 0x3b, 0xe3, 0x87, 0x05, 0xc8, 0x4f, 0x57, 0xec, 0xd2, 0xd4,
	0x17, 0x20, 0x65, 0x2a, 0x27, 0x3a, 0x51, 0xd4, 0x52, 0x07, 0x60, 0xd2, 0x2b, 0xf1, 0x7f, 0x20,
	0xf6, 0x9e, 0xee, 0xb5, 0xda, 0x5b, 0xbd, 0xa7, 0x7b, 0xcd, 0xfe, 0x7e, 0xfb, 0xbd, 0x76, 0xe7,
	0x49, 0x5b, 0x88, 0x89, 0x2b, 0xb0, 0x1c, 0xb0, 0xf7, 0x9a, 0x1f, 0xf6, 0x04, 0x24, 0xae, 0x82,
	0x10, 0x30, 0x1e, 0x74, 0x5a, 0x8d, 0xa6, 0x10, 0x2f, 0xfd, 0x86, 0x00, 0x26, 0x7b, 0xcc, 0x32,
	0x3e, 0x6a, 0x1e, 0xb4, 0x1a, 0xcd, 0x50, 0xc6, 0xcb, 0xf6, 0xad, 0x66, 0xbb, 0xd9, 0x6d, 0x35,
	0x04, 0x24, 0xe6, 0x60, 0x31, 0x60, 0xdf, 0x6b, 0x08, 0x71, 0xf1, 0x16, 0xe4, 0x02, 0xa6, 0xf7,
	0x3b, 0xf5, 0xd6, 0x6e, 0x53, 0x48, 0x84, 0xcc, 0xbd, 0x5a, 0x7d, 0xb7, 0xd9, 0x13, 0x92, 0x4c,
	0x55, 0xc0, 0xfc, 0xa4, 0xd6, 0x6b, 0x6c, 0x0b, 0x73, 0xe1, 0x1c, 0xad, 0x6e, 0xb7, 0xd3, 0x15,
	0xe6, 0x45, 0x11, 0x96, 0x02, 0xe6, 0x46, 0xad, 0x2b, 0xa4, 0x42, 0x09, 0x78, 0x5e, 0x21, 0x5d,
	0xfd, 0x35, 0x01, 0xe9, 0x8b, 0xa9, 0xd0, 0x20, 0x13, 0xbc, 0xa4, 0x15, 0x26, 0x7d, 0x0c, 0x5f,
	0xe0, 0x0a, 0xab, 0xe1, 0x1e, 0x1f, 0x10, 0x4d, 0x95, 0xd7, 0x9f, 0xbd, 0xf8, 0xe3, 0xdb, 0xb8,
	0x2c, 0xdf, 0xa9, 0x1c, 0xbf, 0x5b, 0x61, 0xfd, 0xa9, 0xf8, 0xb9, 0x2b, 0x81, 0xe0, 0x4d, 0x54,
	0x12, 0x87, 0x00, 0x81, 0x6b, 0xd5, 0xed, 0x29, 0x26, 0x1f, 0x9a, 0x41, 0x74, 0x9f, 0x13, 0xbd,
	0x29, 0xaf, 0x45, 0x11, 0xf9, 0xb1, 0x8c, 0x67, 0x00, 0x0b, 0x93, 0x2b, 0x51, 0x3e, 0x4c, 0xe3,
	0x23, 0x33, 0x58, 0xee, 0x71, 0x96, 0xa2, 0xfc, 0x46, 0x04, 0x8b, 0x1f, 0xca, 0x48, 0xbe, 0x42,
	0xb0, 0x12, 0xb5, 0xe8, 0x72, 0x88, 0x2f, 0xc2, 0xa7, 0x50, 0xbc, 0x6a, 0x59, 0xe4, 0x0d, 0xae,
	0xa2, 0x24, 0xbf, 0x33, 0xad, 0x22, 0x22, 0xe1, 0x26, 0x2a, 0xd5, 0xbb, 0xa7, 0x67, 0x52, 0xec,
	0xe5, 0x99, 0x14, 0x7b, 0x7d, 0x26, 0xa1, 0x2f, 0xc6, 0x12, 0xfa, 0x6e, 0x2c, 0xa1, 0x9f, 0xc7,
	0x12, 0x3a, 0x1d, 0x4b, 0xe8, 0xf7, 0xb1, 0x84, 0xfe, 0x1c, 0x4b, 0xb1, 0xd7, 0x63, 0x09, 0x7d,
	0x73, 0x2e, 0xc5, 0x4e, 0xcf, 0xa5, 0xd8, 0xcb, 0x73, 0x29, 0x06, 0xab, 0xc1, 0xbd, 0xb2, 0xb1,
	0xc5, 0x66, 0xdd, 0xfe, 0xc8, 0xfb, 0xcd, 0x71, 0x38, 0xcf, 0xdf, 0x08, 0x0f, 0xfe, 0x0e, 0x00,
	0x00, 0xff, 0xff, 0x02, 0x39, 0x6c, 0x50, 0x94, 0x0c, 0x00, 0x00,
}

func (x TypingType) String() string {
	s, ok := TypingType_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x DeviceType) String() string {
	s, ok := DeviceType_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *RequestStartTyping) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RequestStartTyping)
	if !ok {
		that2, ok := that.(RequestStartTyping)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Peer.Equal(that1.Peer) {
		return false
	}
	if this.TypingType != that1.TypingType {
		return false
	}
	return true
}
func (this *RequestStopTyping) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RequestStopTyping)
	if !ok {
		that2, ok := that.(RequestStopTyping)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Peer.Equal(that1.Peer) {
		return false
	}
	if this.TypingType != that1.TypingType {
		return false
	}
	return true
}
func (this *RequestSetOnline) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RequestSetOnline)
	if !ok {
		that2, ok := that.(RequestSetOnline)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.IsOnline != that1.IsOnline {
		return false
	}
	if this.Timeout != that1.Timeout {
		return false
	}
	if this.DeviceType != that1.DeviceType {
		return false
	}
	return true
}
func (this *UpdateTyping) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpdateTyping)
	if !ok {
		that2, ok := that.(UpdateTyping)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Peer.Equal(that1.Peer) {
		return false
	}
	if this.UserId != that1.UserId {
		return false
	}
	if this.TypingType != that1.TypingType {
		return false
	}
	return true
}
func (this *UpdateTypingStop) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpdateTypingStop)
	if !ok {
		that2, ok := that.(UpdateTypingStop)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Peer.Equal(that1.Peer) {
		return false
	}
	if this.UserId != that1.UserId {
		return false
	}
	if this.TypingType != that1.TypingType {
		return false
	}
	return true
}
func (this *UpdateUserOnline) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpdateUserOnline)
	if !ok {
		that2, ok := that.(UpdateUserOnline)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.UserId != that1.UserId {
		return false
	}
	if this.DeviceType != that1.DeviceType {
		return false
	}
	return true
}
func (this *UpdateUserOffline) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpdateUserOffline)
	if !ok {
		that2, ok := that.(UpdateUserOffline)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Uid != that1.Uid {
		return false
	}
	if this.DeviceType != that1.DeviceType {
		return false
	}
	return true
}
func (this *UpdateUserLastSeen) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpdateUserLastSeen)
	if !ok {
		that2, ok := that.(UpdateUserLastSeen)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Uid != that1.Uid {
		return false
	}
	if this.LastSeenAt != that1.LastSeenAt {
		return false
	}
	if this.DeviceType != that1.DeviceType {
		return false
	}
	if this.CurrentTime != that1.CurrentTime {
		return false
	}
	return true
}
func (this *UpdateGroupOnline) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpdateGroupOnline)
	if !ok {
		that2, ok := that.(UpdateGroupOnline)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.GroupId != that1.GroupId {
		return false
	}
	if this.Count != that1.Count {
		return false
	}
	if len(this.UsersId) != len(that1.UsersId) {
		return false
	}
	for i := range this.UsersId {
		if this.UsersId[i] != that1.UsersId[i] {
			return false
		}
	}
	return true
}
func (this *UpdateGroupTyping) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpdateGroupTyping)
	if !ok {
		that2, ok := that.(UpdateGroupTyping)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.GroupId != that1.GroupId {
		return false
	}
	if len(this.UsersTyping) != len(that1.UsersTyping) {
		return false
	}
	for i := range this.UsersTyping {
		if !this.UsersTyping[i].Equal(that1.UsersTyping[i]) {
			return false
		}
	}
	return true
}
func (this *UpdateGroupTyping_UserTyping) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpdateGroupTyping_UserTyping)
	if !ok {
		that2, ok := that.(UpdateGroupTyping_UserTyping)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.UserId != that1.UserId {
		return false
	}
	if this.TypingType != that1.TypingType {
		return false
	}
	return true
}
func (this *RequestGetUserLastPresence) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RequestGetUserLastPresence)
	if !ok {
		that2, ok := that.(RequestGetUserLastPresence)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.UserOutPeer.Equal(that1.UserOutPeer) {
		return false
	}
	return true
}
func (this *ResponseUserLastPresence) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ResponseUserLastPresence)
	if !ok {
		that2, ok := that.(ResponseUserLastPresence)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.Payload == nil {
		if this.Payload != nil {
			return false
		}
	} else if this.Payload == nil {
		return false
	} else if !this.Payload.Equal(that1.Payload) {
		return false
	}
	return true
}
func (this *ResponseUserLastPresence_LastOnlineAt) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ResponseUserLastPresence_LastOnlineAt)
	if !ok {
		that2, ok := that.(ResponseUserLastPresence_LastOnlineAt)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.LastOnlineAt.Equal(that1.LastOnlineAt) {
		return false
	}
	return true
}
func (this *ResponseUserLastPresence_NotFoundError) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ResponseUserLastPresence_NotFoundError)
	if !ok {
		that2, ok := that.(ResponseUserLastPresence_NotFoundError)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.NotFoundError.Equal(that1.NotFoundError) {
		return false
	}
	return true
}
func (this *ResponseUserLastPresence_UserNotFoundError) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ResponseUserLastPresence_UserNotFoundError)
	if !ok {
		that2, ok := that.(ResponseUserLastPresence_UserNotFoundError)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *RequestStartTyping) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&dialog.RequestStartTyping{")
	if this.Peer != nil {
		s = append(s, "Peer: "+fmt.Sprintf("%#v", this.Peer)+",\n")
	}
	s = append(s, "TypingType: "+fmt.Sprintf("%#v", this.TypingType)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RequestStopTyping) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&dialog.RequestStopTyping{")
	if this.Peer != nil {
		s = append(s, "Peer: "+fmt.Sprintf("%#v", this.Peer)+",\n")
	}
	s = append(s, "TypingType: "+fmt.Sprintf("%#v", this.TypingType)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RequestSetOnline) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&dialog.RequestSetOnline{")
	s = append(s, "IsOnline: "+fmt.Sprintf("%#v", this.IsOnline)+",\n")
	s = append(s, "Timeout: "+fmt.Sprintf("%#v", this.Timeout)+",\n")
	s = append(s, "DeviceType: "+fmt.Sprintf("%#v", this.DeviceType)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UpdateTyping) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&dialog.UpdateTyping{")
	if this.Peer != nil {
		s = append(s, "Peer: "+fmt.Sprintf("%#v", this.Peer)+",\n")
	}
	s = append(s, "UserId: "+fmt.Sprintf("%#v", this.UserId)+",\n")
	s = append(s, "TypingType: "+fmt.Sprintf("%#v", this.TypingType)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UpdateTypingStop) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&dialog.UpdateTypingStop{")
	if this.Peer != nil {
		s = append(s, "Peer: "+fmt.Sprintf("%#v", this.Peer)+",\n")
	}
	s = append(s, "UserId: "+fmt.Sprintf("%#v", this.UserId)+",\n")
	s = append(s, "TypingType: "+fmt.Sprintf("%#v", this.TypingType)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UpdateUserOnline) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&dialog.UpdateUserOnline{")
	s = append(s, "UserId: "+fmt.Sprintf("%#v", this.UserId)+",\n")
	s = append(s, "DeviceType: "+fmt.Sprintf("%#v", this.DeviceType)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UpdateUserOffline) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&dialog.UpdateUserOffline{")
	s = append(s, "Uid: "+fmt.Sprintf("%#v", this.Uid)+",\n")
	s = append(s, "DeviceType: "+fmt.Sprintf("%#v", this.DeviceType)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UpdateUserLastSeen) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&dialog.UpdateUserLastSeen{")
	s = append(s, "Uid: "+fmt.Sprintf("%#v", this.Uid)+",\n")
	s = append(s, "LastSeenAt: "+fmt.Sprintf("%#v", this.LastSeenAt)+",\n")
	s = append(s, "DeviceType: "+fmt.Sprintf("%#v", this.DeviceType)+",\n")
	s = append(s, "CurrentTime: "+fmt.Sprintf("%#v", this.CurrentTime)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UpdateGroupOnline) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&dialog.UpdateGroupOnline{")
	s = append(s, "GroupId: "+fmt.Sprintf("%#v", this.GroupId)+",\n")
	s = append(s, "Count: "+fmt.Sprintf("%#v", this.Count)+",\n")
	s = append(s, "UsersId: "+fmt.Sprintf("%#v", this.UsersId)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UpdateGroupTyping) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&dialog.UpdateGroupTyping{")
	s = append(s, "GroupId: "+fmt.Sprintf("%#v", this.GroupId)+",\n")
	if this.UsersTyping != nil {
		s = append(s, "UsersTyping: "+fmt.Sprintf("%#v", this.UsersTyping)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UpdateGroupTyping_UserTyping) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&dialog.UpdateGroupTyping_UserTyping{")
	s = append(s, "UserId: "+fmt.Sprintf("%#v", this.UserId)+",\n")
	s = append(s, "TypingType: "+fmt.Sprintf("%#v", this.TypingType)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RequestGetUserLastPresence) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&dialog.RequestGetUserLastPresence{")
	if this.UserOutPeer != nil {
		s = append(s, "UserOutPeer: "+fmt.Sprintf("%#v", this.UserOutPeer)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ResponseUserLastPresence) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&dialog.ResponseUserLastPresence{")
	if this.Payload != nil {
		s = append(s, "Payload: "+fmt.Sprintf("%#v", this.Payload)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ResponseUserLastPresence_LastOnlineAt) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dialog.ResponseUserLastPresence_LastOnlineAt{` +
		`LastOnlineAt:` + fmt.Sprintf("%#v", this.LastOnlineAt) + `}`}, ", ")
	return s
}
func (this *ResponseUserLastPresence_NotFoundError) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dialog.ResponseUserLastPresence_NotFoundError{` +
		`NotFoundError:` + fmt.Sprintf("%#v", this.NotFoundError) + `}`}, ", ")
	return s
}
func (this *ResponseUserLastPresence_UserNotFoundError) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&dialog.ResponseUserLastPresence_UserNotFoundError{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringPresence(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// PresenceClient is the client API for Presence service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type PresenceClient interface {
	StartTyping(ctx context.Context, in *RequestStartTyping, opts ...grpc.CallOption) (*ResponseVoid, error)
	StopTyping(ctx context.Context, in *RequestStopTyping, opts ...grpc.CallOption) (*ResponseVoid, error)
	SetOnline(ctx context.Context, in *RequestSetOnline, opts ...grpc.CallOption) (*ResponseVoid, error)
	GetUserLastPresence(ctx context.Context, in *RequestGetUserLastPresence, opts ...grpc.CallOption) (*ResponseUserLastPresence, error)
}

type presenceClient struct {
	cc *grpc.ClientConn
}

func NewPresenceClient(cc *grpc.ClientConn) PresenceClient {
	return &presenceClient{cc}
}

func (c *presenceClient) StartTyping(ctx context.Context, in *RequestStartTyping, opts ...grpc.CallOption) (*ResponseVoid, error) {
	out := new(ResponseVoid)
	err := c.cc.Invoke(ctx, "/dialog.Presence/StartTyping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *presenceClient) StopTyping(ctx context.Context, in *RequestStopTyping, opts ...grpc.CallOption) (*ResponseVoid, error) {
	out := new(ResponseVoid)
	err := c.cc.Invoke(ctx, "/dialog.Presence/StopTyping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *presenceClient) SetOnline(ctx context.Context, in *RequestSetOnline, opts ...grpc.CallOption) (*ResponseVoid, error) {
	out := new(ResponseVoid)
	err := c.cc.Invoke(ctx, "/dialog.Presence/SetOnline", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *presenceClient) GetUserLastPresence(ctx context.Context, in *RequestGetUserLastPresence, opts ...grpc.CallOption) (*ResponseUserLastPresence, error) {
	out := new(ResponseUserLastPresence)
	err := c.cc.Invoke(ctx, "/dialog.Presence/GetUserLastPresence", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PresenceServer is the server API for Presence service.
type PresenceServer interface {
	StartTyping(context.Context, *RequestStartTyping) (*ResponseVoid, error)
	StopTyping(context.Context, *RequestStopTyping) (*ResponseVoid, error)
	SetOnline(context.Context, *RequestSetOnline) (*ResponseVoid, error)
	GetUserLastPresence(context.Context, *RequestGetUserLastPresence) (*ResponseUserLastPresence, error)
}

// UnimplementedPresenceServer can be embedded to have forward compatible implementations.
type UnimplementedPresenceServer struct {
}

func (*UnimplementedPresenceServer) StartTyping(ctx context.Context, req *RequestStartTyping) (*ResponseVoid, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartTyping not implemented")
}
func (*UnimplementedPresenceServer) StopTyping(ctx context.Context, req *RequestStopTyping) (*ResponseVoid, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopTyping not implemented")
}
func (*UnimplementedPresenceServer) SetOnline(ctx context.Context, req *RequestSetOnline) (*ResponseVoid, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetOnline not implemented")
}
func (*UnimplementedPresenceServer) GetUserLastPresence(ctx context.Context, req *RequestGetUserLastPresence) (*ResponseUserLastPresence, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserLastPresence not implemented")
}

func RegisterPresenceServer(s *grpc.Server, srv PresenceServer) {
	s.RegisterService(&_Presence_serviceDesc, srv)
}

func _Presence_StartTyping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestStartTyping)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PresenceServer).StartTyping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dialog.Presence/StartTyping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PresenceServer).StartTyping(ctx, req.(*RequestStartTyping))
	}
	return interceptor(ctx, in, info, handler)
}

func _Presence_StopTyping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestStopTyping)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PresenceServer).StopTyping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dialog.Presence/StopTyping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PresenceServer).StopTyping(ctx, req.(*RequestStopTyping))
	}
	return interceptor(ctx, in, info, handler)
}

func _Presence_SetOnline_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestSetOnline)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PresenceServer).SetOnline(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dialog.Presence/SetOnline",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PresenceServer).SetOnline(ctx, req.(*RequestSetOnline))
	}
	return interceptor(ctx, in, info, handler)
}

func _Presence_GetUserLastPresence_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestGetUserLastPresence)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PresenceServer).GetUserLastPresence(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dialog.Presence/GetUserLastPresence",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PresenceServer).GetUserLastPresence(ctx, req.(*RequestGetUserLastPresence))
	}
	return interceptor(ctx, in, info, handler)
}

var _Presence_serviceDesc = grpc.ServiceDesc{
	ServiceName: "dialog.Presence",
	HandlerType: (*PresenceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "StartTyping",
			Handler:    _Presence_StartTyping_Handler,
		},
		{
			MethodName: "StopTyping",
			Handler:    _Presence_StopTyping_Handler,
		},
		{
			MethodName: "SetOnline",
			Handler:    _Presence_SetOnline_Handler,
		},
		{
			MethodName: "GetUserLastPresence",
			Handler:    _Presence_GetUserLastPresence_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "presence.proto",
}

func (m *RequestStartTyping) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestStartTyping) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RequestStartTyping) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TypingType != 0 {
		i = encodeVarintPresence(dAtA, i, uint64(m.TypingType))
		i--
		dAtA[i] = 0x18
	}
	if m.Peer != nil {
		{
			size, err := m.Peer.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPresence(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RequestStopTyping) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestStopTyping) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RequestStopTyping) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TypingType != 0 {
		i = encodeVarintPresence(dAtA, i, uint64(m.TypingType))
		i--
		dAtA[i] = 0x10
	}
	if m.Peer != nil {
		{
			size, err := m.Peer.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPresence(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RequestSetOnline) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestSetOnline) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RequestSetOnline) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.DeviceType != 0 {
		i = encodeVarintPresence(dAtA, i, uint64(m.DeviceType))
		i--
		dAtA[i] = 0x18
	}
	if m.Timeout != 0 {
		i = encodeVarintPresence(dAtA, i, uint64(m.Timeout))
		i--
		dAtA[i] = 0x10
	}
	if m.IsOnline {
		i--
		if m.IsOnline {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *UpdateTyping) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateTyping) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateTyping) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TypingType != 0 {
		i = encodeVarintPresence(dAtA, i, uint64(m.TypingType))
		i--
		dAtA[i] = 0x18
	}
	if m.UserId != 0 {
		i = encodeVarintPresence(dAtA, i, uint64(m.UserId))
		i--
		dAtA[i] = 0x10
	}
	if m.Peer != nil {
		{
			size, err := m.Peer.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPresence(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UpdateTypingStop) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateTypingStop) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateTypingStop) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TypingType != 0 {
		i = encodeVarintPresence(dAtA, i, uint64(m.TypingType))
		i--
		dAtA[i] = 0x18
	}
	if m.UserId != 0 {
		i = encodeVarintPresence(dAtA, i, uint64(m.UserId))
		i--
		dAtA[i] = 0x10
	}
	if m.Peer != nil {
		{
			size, err := m.Peer.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPresence(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UpdateUserOnline) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateUserOnline) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateUserOnline) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.DeviceType != 0 {
		i = encodeVarintPresence(dAtA, i, uint64(m.DeviceType))
		i--
		dAtA[i] = 0x10
	}
	if m.UserId != 0 {
		i = encodeVarintPresence(dAtA, i, uint64(m.UserId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *UpdateUserOffline) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateUserOffline) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateUserOffline) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.DeviceType != 0 {
		i = encodeVarintPresence(dAtA, i, uint64(m.DeviceType))
		i--
		dAtA[i] = 0x10
	}
	if m.Uid != 0 {
		i = encodeVarintPresence(dAtA, i, uint64(m.Uid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *UpdateUserLastSeen) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateUserLastSeen) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateUserLastSeen) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CurrentTime != 0 {
		i = encodeVarintPresence(dAtA, i, uint64(m.CurrentTime))
		i--
		dAtA[i] = 0x28
	}
	if m.DeviceType != 0 {
		i = encodeVarintPresence(dAtA, i, uint64(m.DeviceType))
		i--
		dAtA[i] = 0x18
	}
	if m.LastSeenAt != 0 {
		i = encodeVarintPresence(dAtA, i, uint64(m.LastSeenAt))
		i--
		dAtA[i] = 0x10
	}
	if m.Uid != 0 {
		i = encodeVarintPresence(dAtA, i, uint64(m.Uid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *UpdateGroupOnline) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateGroupOnline) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateGroupOnline) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.UsersId) > 0 {
		dAtA6 := make([]byte, len(m.UsersId)*10)
		var j5 int
		for _, num1 := range m.UsersId {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA6[j5] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j5++
			}
			dAtA6[j5] = uint8(num)
			j5++
		}
		i -= j5
		copy(dAtA[i:], dAtA6[:j5])
		i = encodeVarintPresence(dAtA, i, uint64(j5))
		i--
		dAtA[i] = 0x1a
	}
	if m.Count != 0 {
		i = encodeVarintPresence(dAtA, i, uint64(m.Count))
		i--
		dAtA[i] = 0x10
	}
	if m.GroupId != 0 {
		i = encodeVarintPresence(dAtA, i, uint64(m.GroupId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *UpdateGroupTyping) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateGroupTyping) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateGroupTyping) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.UsersTyping) > 0 {
		for iNdEx := len(m.UsersTyping) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.UsersTyping[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPresence(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.GroupId != 0 {
		i = encodeVarintPresence(dAtA, i, uint64(m.GroupId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *UpdateGroupTyping_UserTyping) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateGroupTyping_UserTyping) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateGroupTyping_UserTyping) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TypingType != 0 {
		i = encodeVarintPresence(dAtA, i, uint64(m.TypingType))
		i--
		dAtA[i] = 0x10
	}
	if m.UserId != 0 {
		i = encodeVarintPresence(dAtA, i, uint64(m.UserId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *RequestGetUserLastPresence) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestGetUserLastPresence) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RequestGetUserLastPresence) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.UserOutPeer != nil {
		{
			size, err := m.UserOutPeer.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPresence(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ResponseUserLastPresence) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResponseUserLastPresence) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ResponseUserLastPresence) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Payload != nil {
		{
			size := m.Payload.Size()
			i -= size
			if _, err := m.Payload.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *ResponseUserLastPresence_LastOnlineAt) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ResponseUserLastPresence_LastOnlineAt) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.LastOnlineAt != nil {
		{
			size, err := m.LastOnlineAt.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPresence(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}
func (m *ResponseUserLastPresence_NotFoundError) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ResponseUserLastPresence_NotFoundError) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.NotFoundError != nil {
		{
			size, err := m.NotFoundError.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPresence(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *ResponseUserLastPresence_UserNotFoundError) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResponseUserLastPresence_UserNotFoundError) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ResponseUserLastPresence_UserNotFoundError) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintPresence(dAtA []byte, offset int, v uint64) int {
	offset -= sovPresence(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *RequestStartTyping) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Peer != nil {
		l = m.Peer.Size()
		n += 1 + l + sovPresence(uint64(l))
	}
	if m.TypingType != 0 {
		n += 1 + sovPresence(uint64(m.TypingType))
	}
	return n
}

func (m *RequestStopTyping) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Peer != nil {
		l = m.Peer.Size()
		n += 1 + l + sovPresence(uint64(l))
	}
	if m.TypingType != 0 {
		n += 1 + sovPresence(uint64(m.TypingType))
	}
	return n
}

func (m *RequestSetOnline) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IsOnline {
		n += 2
	}
	if m.Timeout != 0 {
		n += 1 + sovPresence(uint64(m.Timeout))
	}
	if m.DeviceType != 0 {
		n += 1 + sovPresence(uint64(m.DeviceType))
	}
	return n
}

func (m *UpdateTyping) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Peer != nil {
		l = m.Peer.Size()
		n += 1 + l + sovPresence(uint64(l))
	}
	if m.UserId != 0 {
		n += 1 + sovPresence(uint64(m.UserId))
	}
	if m.TypingType != 0 {
		n += 1 + sovPresence(uint64(m.TypingType))
	}
	return n
}

func (m *UpdateTypingStop) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Peer != nil {
		l = m.Peer.Size()
		n += 1 + l + sovPresence(uint64(l))
	}
	if m.UserId != 0 {
		n += 1 + sovPresence(uint64(m.UserId))
	}
	if m.TypingType != 0 {
		n += 1 + sovPresence(uint64(m.TypingType))
	}
	return n
}

func (m *UpdateUserOnline) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovPresence(uint64(m.UserId))
	}
	if m.DeviceType != 0 {
		n += 1 + sovPresence(uint64(m.DeviceType))
	}
	return n
}

func (m *UpdateUserOffline) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Uid != 0 {
		n += 1 + sovPresence(uint64(m.Uid))
	}
	if m.DeviceType != 0 {
		n += 1 + sovPresence(uint64(m.DeviceType))
	}
	return n
}

func (m *UpdateUserLastSeen) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Uid != 0 {
		n += 1 + sovPresence(uint64(m.Uid))
	}
	if m.LastSeenAt != 0 {
		n += 1 + sovPresence(uint64(m.LastSeenAt))
	}
	if m.DeviceType != 0 {
		n += 1 + sovPresence(uint64(m.DeviceType))
	}
	if m.CurrentTime != 0 {
		n += 1 + sovPresence(uint64(m.CurrentTime))
	}
	return n
}

func (m *UpdateGroupOnline) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.GroupId != 0 {
		n += 1 + sovPresence(uint64(m.GroupId))
	}
	if m.Count != 0 {
		n += 1 + sovPresence(uint64(m.Count))
	}
	if len(m.UsersId) > 0 {
		l = 0
		for _, e := range m.UsersId {
			l += sovPresence(uint64(e))
		}
		n += 1 + sovPresence(uint64(l)) + l
	}
	return n
}

func (m *UpdateGroupTyping) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.GroupId != 0 {
		n += 1 + sovPresence(uint64(m.GroupId))
	}
	if len(m.UsersTyping) > 0 {
		for _, e := range m.UsersTyping {
			l = e.Size()
			n += 1 + l + sovPresence(uint64(l))
		}
	}
	return n
}

func (m *UpdateGroupTyping_UserTyping) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovPresence(uint64(m.UserId))
	}
	if m.TypingType != 0 {
		n += 1 + sovPresence(uint64(m.TypingType))
	}
	return n
}

func (m *RequestGetUserLastPresence) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UserOutPeer != nil {
		l = m.UserOutPeer.Size()
		n += 1 + l + sovPresence(uint64(l))
	}
	return n
}

func (m *ResponseUserLastPresence) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Payload != nil {
		n += m.Payload.Size()
	}
	return n
}

func (m *ResponseUserLastPresence_LastOnlineAt) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.LastOnlineAt != nil {
		l = m.LastOnlineAt.Size()
		n += 1 + l + sovPresence(uint64(l))
	}
	return n
}
func (m *ResponseUserLastPresence_NotFoundError) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NotFoundError != nil {
		l = m.NotFoundError.Size()
		n += 1 + l + sovPresence(uint64(l))
	}
	return n
}
func (m *ResponseUserLastPresence_UserNotFoundError) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovPresence(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozPresence(x uint64) (n int) {
	return sovPresence(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *RequestStartTyping) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RequestStartTyping{`,
		`Peer:` + strings.Replace(fmt.Sprintf("%v", this.Peer), "OutPeer", "OutPeer", 1) + `,`,
		`TypingType:` + fmt.Sprintf("%v", this.TypingType) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RequestStopTyping) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RequestStopTyping{`,
		`Peer:` + strings.Replace(fmt.Sprintf("%v", this.Peer), "OutPeer", "OutPeer", 1) + `,`,
		`TypingType:` + fmt.Sprintf("%v", this.TypingType) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RequestSetOnline) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RequestSetOnline{`,
		`IsOnline:` + fmt.Sprintf("%v", this.IsOnline) + `,`,
		`Timeout:` + fmt.Sprintf("%v", this.Timeout) + `,`,
		`DeviceType:` + fmt.Sprintf("%v", this.DeviceType) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateTyping) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateTyping{`,
		`Peer:` + strings.Replace(fmt.Sprintf("%v", this.Peer), "Peer", "Peer", 1) + `,`,
		`UserId:` + fmt.Sprintf("%v", this.UserId) + `,`,
		`TypingType:` + fmt.Sprintf("%v", this.TypingType) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateTypingStop) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateTypingStop{`,
		`Peer:` + strings.Replace(fmt.Sprintf("%v", this.Peer), "Peer", "Peer", 1) + `,`,
		`UserId:` + fmt.Sprintf("%v", this.UserId) + `,`,
		`TypingType:` + fmt.Sprintf("%v", this.TypingType) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateUserOnline) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateUserOnline{`,
		`UserId:` + fmt.Sprintf("%v", this.UserId) + `,`,
		`DeviceType:` + fmt.Sprintf("%v", this.DeviceType) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateUserOffline) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateUserOffline{`,
		`Uid:` + fmt.Sprintf("%v", this.Uid) + `,`,
		`DeviceType:` + fmt.Sprintf("%v", this.DeviceType) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateUserLastSeen) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateUserLastSeen{`,
		`Uid:` + fmt.Sprintf("%v", this.Uid) + `,`,
		`LastSeenAt:` + fmt.Sprintf("%v", this.LastSeenAt) + `,`,
		`DeviceType:` + fmt.Sprintf("%v", this.DeviceType) + `,`,
		`CurrentTime:` + fmt.Sprintf("%v", this.CurrentTime) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateGroupOnline) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateGroupOnline{`,
		`GroupId:` + fmt.Sprintf("%v", this.GroupId) + `,`,
		`Count:` + fmt.Sprintf("%v", this.Count) + `,`,
		`UsersId:` + fmt.Sprintf("%v", this.UsersId) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateGroupTyping) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForUsersTyping := "[]*UpdateGroupTyping_UserTyping{"
	for _, f := range this.UsersTyping {
		repeatedStringForUsersTyping += strings.Replace(fmt.Sprintf("%v", f), "UpdateGroupTyping_UserTyping", "UpdateGroupTyping_UserTyping", 1) + ","
	}
	repeatedStringForUsersTyping += "}"
	s := strings.Join([]string{`&UpdateGroupTyping{`,
		`GroupId:` + fmt.Sprintf("%v", this.GroupId) + `,`,
		`UsersTyping:` + repeatedStringForUsersTyping + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateGroupTyping_UserTyping) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateGroupTyping_UserTyping{`,
		`UserId:` + fmt.Sprintf("%v", this.UserId) + `,`,
		`TypingType:` + fmt.Sprintf("%v", this.TypingType) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RequestGetUserLastPresence) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RequestGetUserLastPresence{`,
		`UserOutPeer:` + strings.Replace(fmt.Sprintf("%v", this.UserOutPeer), "UserOutPeer", "UserOutPeer", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ResponseUserLastPresence) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ResponseUserLastPresence{`,
		`Payload:` + fmt.Sprintf("%v", this.Payload) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ResponseUserLastPresence_LastOnlineAt) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ResponseUserLastPresence_LastOnlineAt{`,
		`LastOnlineAt:` + strings.Replace(fmt.Sprintf("%v", this.LastOnlineAt), "Timestamp", "types.Timestamp", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ResponseUserLastPresence_NotFoundError) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ResponseUserLastPresence_NotFoundError{`,
		`NotFoundError:` + strings.Replace(fmt.Sprintf("%v", this.NotFoundError), "ResponseUserLastPresence_UserNotFoundError", "ResponseUserLastPresence_UserNotFoundError", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ResponseUserLastPresence_UserNotFoundError) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ResponseUserLastPresence_UserNotFoundError{`,
		`}`,
	}, "")
	return s
}
func valueToStringPresence(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *RequestStartTyping) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPresence
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestStartTyping: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestStartTyping: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Peer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPresence
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPresence
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPresence
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Peer == nil {
				m.Peer = &OutPeer{}
			}
			if err := m.Peer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TypingType", wireType)
			}
			m.TypingType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPresence
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TypingType |= TypingType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPresence(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPresence
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPresence
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestStopTyping) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPresence
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestStopTyping: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestStopTyping: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Peer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPresence
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPresence
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPresence
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Peer == nil {
				m.Peer = &OutPeer{}
			}
			if err := m.Peer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TypingType", wireType)
			}
			m.TypingType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPresence
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TypingType |= TypingType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPresence(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPresence
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPresence
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestSetOnline) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPresence
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestSetOnline: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestSetOnline: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsOnline", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPresence
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsOnline = bool(v != 0)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timeout", wireType)
			}
			m.Timeout = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPresence
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Timeout |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeviceType", wireType)
			}
			m.DeviceType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPresence
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DeviceType |= DeviceType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPresence(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPresence
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPresence
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateTyping) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPresence
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateTyping: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateTyping: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Peer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPresence
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPresence
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPresence
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Peer == nil {
				m.Peer = &Peer{}
			}
			if err := m.Peer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPresence
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TypingType", wireType)
			}
			m.TypingType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPresence
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TypingType |= TypingType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPresence(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPresence
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPresence
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateTypingStop) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPresence
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateTypingStop: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateTypingStop: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Peer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPresence
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPresence
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPresence
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Peer == nil {
				m.Peer = &Peer{}
			}
			if err := m.Peer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPresence
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TypingType", wireType)
			}
			m.TypingType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPresence
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TypingType |= TypingType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPresence(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPresence
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPresence
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateUserOnline) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPresence
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateUserOnline: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateUserOnline: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPresence
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeviceType", wireType)
			}
			m.DeviceType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPresence
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DeviceType |= DeviceType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPresence(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPresence
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPresence
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateUserOffline) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPresence
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateUserOffline: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateUserOffline: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			m.Uid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPresence
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uid |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeviceType", wireType)
			}
			m.DeviceType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPresence
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DeviceType |= DeviceType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPresence(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPresence
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPresence
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateUserLastSeen) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPresence
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateUserLastSeen: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateUserLastSeen: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			m.Uid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPresence
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uid |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastSeenAt", wireType)
			}
			m.LastSeenAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPresence
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastSeenAt |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeviceType", wireType)
			}
			m.DeviceType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPresence
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DeviceType |= DeviceType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentTime", wireType)
			}
			m.CurrentTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPresence
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CurrentTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPresence(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPresence
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPresence
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateGroupOnline) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPresence
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateGroupOnline: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateGroupOnline: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupId", wireType)
			}
			m.GroupId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPresence
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GroupId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPresence
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPresence
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.UsersId = append(m.UsersId, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPresence
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthPresence
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthPresence
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.UsersId) == 0 {
					m.UsersId = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowPresence
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.UsersId = append(m.UsersId, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field UsersId", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPresence(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPresence
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPresence
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateGroupTyping) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPresence
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateGroupTyping: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateGroupTyping: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupId", wireType)
			}
			m.GroupId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPresence
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GroupId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UsersTyping", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPresence
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPresence
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPresence
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UsersTyping = append(m.UsersTyping, &UpdateGroupTyping_UserTyping{})
			if err := m.UsersTyping[len(m.UsersTyping)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPresence(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPresence
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPresence
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateGroupTyping_UserTyping) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPresence
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserTyping: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserTyping: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPresence
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TypingType", wireType)
			}
			m.TypingType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPresence
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TypingType |= TypingType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPresence(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPresence
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPresence
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestGetUserLastPresence) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPresence
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestGetUserLastPresence: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestGetUserLastPresence: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserOutPeer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPresence
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPresence
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPresence
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UserOutPeer == nil {
				m.UserOutPeer = &UserOutPeer{}
			}
			if err := m.UserOutPeer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPresence(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPresence
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPresence
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResponseUserLastPresence) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPresence
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResponseUserLastPresence: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResponseUserLastPresence: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastOnlineAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPresence
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPresence
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPresence
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &types.Timestamp{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Payload = &ResponseUserLastPresence_LastOnlineAt{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NotFoundError", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPresence
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPresence
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPresence
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ResponseUserLastPresence_UserNotFoundError{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Payload = &ResponseUserLastPresence_NotFoundError{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPresence(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPresence
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPresence
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResponseUserLastPresence_UserNotFoundError) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPresence
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserNotFoundError: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserNotFoundError: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipPresence(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPresence
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPresence
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPresence(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPresence
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPresence
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPresence
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthPresence
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupPresence
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthPresence
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthPresence        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPresence          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupPresence = fmt.Errorf("proto: unexpected end of group")
)
