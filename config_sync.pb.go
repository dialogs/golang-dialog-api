// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: config_sync.proto

package dialog

import (
	context "context"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	types "github.com/gogo/protobuf/types"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Syncing Parameter
type Parameter struct {
	Key   string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	Clock int64  `protobuf:"varint,3,opt,name=clock,proto3" json:"clock,omitempty"`
}

func (m *Parameter) Reset()      { *m = Parameter{} }
func (*Parameter) ProtoMessage() {}
func (*Parameter) Descriptor() ([]byte, []int) {
	return fileDescriptor_760cd360e0cd3e2d, []int{0}
}
func (m *Parameter) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Parameter) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Parameter.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Parameter) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Parameter.Merge(m, src)
}
func (m *Parameter) XXX_Size() int {
	return m.Size()
}
func (m *Parameter) XXX_DiscardUnknown() {
	xxx_messageInfo_Parameter.DiscardUnknown(m)
}

var xxx_messageInfo_Parameter proto.InternalMessageInfo

func (m *Parameter) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *Parameter) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

func (m *Parameter) GetClock() int64 {
	if m != nil {
		return m.Clock
	}
	return 0
}

// Getting Parameters
type RequestGetParameters struct {
	FromClock int64 `protobuf:"varint,1,opt,name=from_clock,json=fromClock,proto3" json:"from_clock,omitempty"`
}

func (m *RequestGetParameters) Reset()      { *m = RequestGetParameters{} }
func (*RequestGetParameters) ProtoMessage() {}
func (*RequestGetParameters) Descriptor() ([]byte, []int) {
	return fileDescriptor_760cd360e0cd3e2d, []int{1}
}
func (m *RequestGetParameters) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RequestGetParameters) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RequestGetParameters.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RequestGetParameters) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RequestGetParameters.Merge(m, src)
}
func (m *RequestGetParameters) XXX_Size() int {
	return m.Size()
}
func (m *RequestGetParameters) XXX_DiscardUnknown() {
	xxx_messageInfo_RequestGetParameters.DiscardUnknown(m)
}

var xxx_messageInfo_RequestGetParameters proto.InternalMessageInfo

func (m *RequestGetParameters) GetFromClock() int64 {
	if m != nil {
		return m.FromClock
	}
	return 0
}

type ResponseGetParameters struct {
	Parameters []*Parameter `protobuf:"bytes,1,rep,name=parameters,proto3" json:"parameters,omitempty"`
}

func (m *ResponseGetParameters) Reset()      { *m = ResponseGetParameters{} }
func (*ResponseGetParameters) ProtoMessage() {}
func (*ResponseGetParameters) Descriptor() ([]byte, []int) {
	return fileDescriptor_760cd360e0cd3e2d, []int{2}
}
func (m *ResponseGetParameters) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ResponseGetParameters) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ResponseGetParameters.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ResponseGetParameters) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResponseGetParameters.Merge(m, src)
}
func (m *ResponseGetParameters) XXX_Size() int {
	return m.Size()
}
func (m *ResponseGetParameters) XXX_DiscardUnknown() {
	xxx_messageInfo_ResponseGetParameters.DiscardUnknown(m)
}

var xxx_messageInfo_ResponseGetParameters proto.InternalMessageInfo

func (m *ResponseGetParameters) GetParameters() []*Parameter {
	if m != nil {
		return m.Parameters
	}
	return nil
}

// Change parameter value
type RequestEditParameter struct {
	Key   string             `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value *types.StringValue `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	Clock int64              `protobuf:"varint,3,opt,name=clock,proto3" json:"clock,omitempty"`
}

func (m *RequestEditParameter) Reset()      { *m = RequestEditParameter{} }
func (*RequestEditParameter) ProtoMessage() {}
func (*RequestEditParameter) Descriptor() ([]byte, []int) {
	return fileDescriptor_760cd360e0cd3e2d, []int{3}
}
func (m *RequestEditParameter) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RequestEditParameter) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RequestEditParameter.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RequestEditParameter) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RequestEditParameter.Merge(m, src)
}
func (m *RequestEditParameter) XXX_Size() int {
	return m.Size()
}
func (m *RequestEditParameter) XXX_DiscardUnknown() {
	xxx_messageInfo_RequestEditParameter.DiscardUnknown(m)
}

var xxx_messageInfo_RequestEditParameter proto.InternalMessageInfo

func (m *RequestEditParameter) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *RequestEditParameter) GetValue() *types.StringValue {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *RequestEditParameter) GetClock() int64 {
	if m != nil {
		return m.Clock
	}
	return 0
}

type FeatureFlag struct {
	Key   string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	Clock int64  `protobuf:"varint,3,opt,name=clock,proto3" json:"clock,omitempty"`
}

func (m *FeatureFlag) Reset()      { *m = FeatureFlag{} }
func (*FeatureFlag) ProtoMessage() {}
func (*FeatureFlag) Descriptor() ([]byte, []int) {
	return fileDescriptor_760cd360e0cd3e2d, []int{4}
}
func (m *FeatureFlag) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FeatureFlag) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FeatureFlag.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FeatureFlag) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FeatureFlag.Merge(m, src)
}
func (m *FeatureFlag) XXX_Size() int {
	return m.Size()
}
func (m *FeatureFlag) XXX_DiscardUnknown() {
	xxx_messageInfo_FeatureFlag.DiscardUnknown(m)
}

var xxx_messageInfo_FeatureFlag proto.InternalMessageInfo

func (m *FeatureFlag) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *FeatureFlag) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

func (m *FeatureFlag) GetClock() int64 {
	if m != nil {
		return m.Clock
	}
	return 0
}

type RequestFeatureFlags struct {
	FromClock int64 `protobuf:"varint,1,opt,name=from_clock,json=fromClock,proto3" json:"from_clock,omitempty"`
}

func (m *RequestFeatureFlags) Reset()      { *m = RequestFeatureFlags{} }
func (*RequestFeatureFlags) ProtoMessage() {}
func (*RequestFeatureFlags) Descriptor() ([]byte, []int) {
	return fileDescriptor_760cd360e0cd3e2d, []int{5}
}
func (m *RequestFeatureFlags) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RequestFeatureFlags) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RequestFeatureFlags.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RequestFeatureFlags) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RequestFeatureFlags.Merge(m, src)
}
func (m *RequestFeatureFlags) XXX_Size() int {
	return m.Size()
}
func (m *RequestFeatureFlags) XXX_DiscardUnknown() {
	xxx_messageInfo_RequestFeatureFlags.DiscardUnknown(m)
}

var xxx_messageInfo_RequestFeatureFlags proto.InternalMessageInfo

func (m *RequestFeatureFlags) GetFromClock() int64 {
	if m != nil {
		return m.FromClock
	}
	return 0
}

type ResponseFeatureFlags struct {
	FeatureConfig []*FeatureFlag `protobuf:"bytes,1,rep,name=feature_config,json=featureConfig,proto3" json:"feature_config,omitempty"`
}

func (m *ResponseFeatureFlags) Reset()      { *m = ResponseFeatureFlags{} }
func (*ResponseFeatureFlags) ProtoMessage() {}
func (*ResponseFeatureFlags) Descriptor() ([]byte, []int) {
	return fileDescriptor_760cd360e0cd3e2d, []int{6}
}
func (m *ResponseFeatureFlags) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ResponseFeatureFlags) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ResponseFeatureFlags.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ResponseFeatureFlags) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResponseFeatureFlags.Merge(m, src)
}
func (m *ResponseFeatureFlags) XXX_Size() int {
	return m.Size()
}
func (m *ResponseFeatureFlags) XXX_DiscardUnknown() {
	xxx_messageInfo_ResponseFeatureFlags.DiscardUnknown(m)
}

var xxx_messageInfo_ResponseFeatureFlags proto.InternalMessageInfo

func (m *ResponseFeatureFlags) GetFeatureConfig() []*FeatureFlag {
	if m != nil {
		return m.FeatureConfig
	}
	return nil
}

type UpdateFeatureFlagChanged struct {
	Feature *FeatureFlag `protobuf:"bytes,1,opt,name=feature,proto3" json:"feature,omitempty"`
}

func (m *UpdateFeatureFlagChanged) Reset()      { *m = UpdateFeatureFlagChanged{} }
func (*UpdateFeatureFlagChanged) ProtoMessage() {}
func (*UpdateFeatureFlagChanged) Descriptor() ([]byte, []int) {
	return fileDescriptor_760cd360e0cd3e2d, []int{7}
}
func (m *UpdateFeatureFlagChanged) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateFeatureFlagChanged) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateFeatureFlagChanged.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateFeatureFlagChanged) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateFeatureFlagChanged.Merge(m, src)
}
func (m *UpdateFeatureFlagChanged) XXX_Size() int {
	return m.Size()
}
func (m *UpdateFeatureFlagChanged) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateFeatureFlagChanged.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateFeatureFlagChanged proto.InternalMessageInfo

func (m *UpdateFeatureFlagChanged) GetFeature() *FeatureFlag {
	if m != nil {
		return m.Feature
	}
	return nil
}

// Update about parameter change
type UpdateParameterChanged struct {
	Key       string             `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value     *types.StringValue `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	Parameter *Parameter         `protobuf:"bytes,3,opt,name=parameter,proto3" json:"parameter,omitempty"`
}

func (m *UpdateParameterChanged) Reset()      { *m = UpdateParameterChanged{} }
func (*UpdateParameterChanged) ProtoMessage() {}
func (*UpdateParameterChanged) Descriptor() ([]byte, []int) {
	return fileDescriptor_760cd360e0cd3e2d, []int{8}
}
func (m *UpdateParameterChanged) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateParameterChanged) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateParameterChanged.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateParameterChanged) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateParameterChanged.Merge(m, src)
}
func (m *UpdateParameterChanged) XXX_Size() int {
	return m.Size()
}
func (m *UpdateParameterChanged) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateParameterChanged.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateParameterChanged proto.InternalMessageInfo

func (m *UpdateParameterChanged) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *UpdateParameterChanged) GetValue() *types.StringValue {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *UpdateParameterChanged) GetParameter() *Parameter {
	if m != nil {
		return m.Parameter
	}
	return nil
}

func init() {
	proto.RegisterType((*Parameter)(nil), "dialog.Parameter")
	proto.RegisterType((*RequestGetParameters)(nil), "dialog.RequestGetParameters")
	proto.RegisterType((*ResponseGetParameters)(nil), "dialog.ResponseGetParameters")
	proto.RegisterType((*RequestEditParameter)(nil), "dialog.RequestEditParameter")
	proto.RegisterType((*FeatureFlag)(nil), "dialog.FeatureFlag")
	proto.RegisterType((*RequestFeatureFlags)(nil), "dialog.RequestFeatureFlags")
	proto.RegisterType((*ResponseFeatureFlags)(nil), "dialog.ResponseFeatureFlags")
	proto.RegisterType((*UpdateFeatureFlagChanged)(nil), "dialog.UpdateFeatureFlagChanged")
	proto.RegisterType((*UpdateParameterChanged)(nil), "dialog.UpdateParameterChanged")
}

func init() { proto.RegisterFile("config_sync.proto", fileDescriptor_760cd360e0cd3e2d) }

var fileDescriptor_760cd360e0cd3e2d = []byte{
	// 669 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x55, 0x41, 0x4f, 0xd4, 0x5c,
	0x14, 0x9d, 0xc7, 0x04, 0xf8, 0xe6, 0xc2, 0x7c, 0x09, 0x1d, 0xd0, 0x71, 0x1c, 0x9e, 0x63, 0x89,
	0x86, 0xa0, 0x69, 0x01, 0x77, 0x13, 0x13, 0x0c, 0x44, 0xd8, 0x9a, 0x4e, 0x34, 0xc6, 0x0d, 0x79,
	0xd3, 0xbe, 0x29, 0x2f, 0x74, 0xfa, 0x4a, 0xdb, 0x19, 0xc5, 0x95, 0x71, 0xc9, 0xca, 0xc4, 0x3f,
	0xe1, 0xc2, 0x9f, 0xe0, 0x0f, 0x70, 0x49, 0xe2, 0x86, 0xa5, 0x14, 0x17, 0x86, 0x15, 0xf1, 0x17,
	0x98, 0xf6, 0xb5, 0xa5, 0xad, 0x13, 0x27, 0x68, 0xe2, 0x6a, 0xd2, 0x7b, 0x4e, 0xcf, 0xb9, 0xbd,
	0xe7, 0xde, 0x0c, 0xcc, 0xe9, 0xdc, 0xee, 0x31, 0x73, 0xd7, 0x3b, 0xb4, 0x75, 0xc5, 0x71, 0xb9,
	0xcf, 0xa5, 0x29, 0x83, 0x11, 0x8b, 0x9b, 0x0d, 0x6c, 0x72, 0x6e, 0x5a, 0x54, 0x8d, 0xaa, 0xdd,
	0x41, 0x4f, 0x7d, 0xe9, 0x12, 0xc7, 0xa1, 0xae, 0x27, 0x78, 0x8d, 0x66, 0x8c, 0x13, 0x87, 0xa9,
	0xc4, 0xb6, 0xb9, 0x4f, 0x7c, 0xc6, 0xed, 0x04, 0x9d, 0x33, 0x68, 0x8f, 0xd9, 0x2c, 0x5b, 0xaa,
	0xf5, 0x99, 0xa7, 0x53, 0xcb, 0x22, 0x36, 0xe5, 0x83, 0xa4, 0xb8, 0xe0, 0xe9, 0xc4, 0x22, 0x4e,
	0x57, 0x8d, 0x7f, 0x45, 0x59, 0x1e, 0x40, 0xe5, 0x09, 0x71, 0x49, 0x9f, 0xfa, 0xd4, 0x95, 0x6e,
	0x41, 0x79, 0x9f, 0x1e, 0xd6, 0x51, 0x0b, 0x2d, 0x57, 0x36, 0xab, 0x47, 0xe7, 0xab, 0x15, 0x98,
	0x1e, 0x32, 0x8f, 0x75, 0x2d, 0xaa, 0x85, 0x88, 0x24, 0xc3, 0xe4, 0x90, 0x58, 0x03, 0x5a, 0x9f,
	0x88, 0x28, 0xb3, 0x47, 0xe7, 0xab, 0xff, 0xc1, 0xd4, 0x1e, 0x33, 0x0c, 0x6a, 0x6b, 0x02, 0x92,
	0x96, 0x60, 0x52, 0xb7, 0xb8, 0xbe, 0x5f, 0x2f, 0xb7, 0xd0, 0x72, 0xb9, 0x28, 0x23, 0x30, 0xb9,
	0x03, 0xf3, 0x1a, 0x3d, 0x18, 0x50, 0xcf, 0xdf, 0xa1, 0x7e, 0xda, 0x80, 0x27, 0x2d, 0x02, 0xf4,
	0x5c, 0xde, 0xdf, 0x15, 0x0a, 0x61, 0x23, 0x65, 0xad, 0x12, 0x56, 0xb6, 0xc2, 0x42, 0xbb, 0x19,
	0x6c, 0xdc, 0x80, 0xeb, 0xac, 0xaf, 0x18, 0x96, 0xa9, 0x98, 0xae, 0xa3, 0x2b, 0x3b, 0xae, 0xa3,
	0xc7, 0x4a, 0x32, 0x83, 0x05, 0x8d, 0x7a, 0x0e, 0xb7, 0x3d, 0x9a, 0x57, 0x5d, 0x03, 0x70, 0xd2,
	0xa7, 0x3a, 0x6a, 0x95, 0x97, 0x67, 0xd6, 0xe7, 0x14, 0x31, 0x7e, 0x25, 0xe5, 0x69, 0x19, 0x52,
	0x7b, 0x31, 0xd8, 0x68, 0x40, 0xfd, 0x57, 0x27, 0x21, 0x2f, 0x7f, 0x42, 0xe9, 0x07, 0x3c, 0x36,
	0x98, 0x7f, 0x85, 0x11, 0x3e, 0xca, 0x8e, 0x70, 0x66, 0xbd, 0xa9, 0x88, 0x74, 0x95, 0x24, 0x7d,
	0xa5, 0xe3, 0xbb, 0xcc, 0x36, 0x9f, 0x85, 0x9c, 0x3f, 0x1f, 0xf0, 0x98, 0x49, 0xbd, 0x82, 0x99,
	0x6d, 0x4a, 0xfc, 0x81, 0x4b, 0xb7, 0x2d, 0x62, 0x8e, 0x6f, 0x7a, 0x29, 0x9f, 0x7b, 0xd1, 0xf2,
	0x0a, 0xc1, 0x6b, 0x50, 0x8b, 0x9b, 0xc8, 0x34, 0xf0, 0x97, 0xb9, 0x1f, 0x84, 0x59, 0x88, 0x60,
	0x72, 0xa2, 0x6d, 0xf8, 0xbf, 0x27, 0x9e, 0x77, 0xc5, 0xf5, 0xc5, 0xd1, 0xd7, 0x92, 0xe8, 0x33,
	0x6c, 0xad, 0x1a, 0x53, 0xb7, 0x22, 0xe6, 0xb8, 0xfc, 0x9f, 0x43, 0xfd, 0xa9, 0x63, 0x10, 0x3f,
	0x6b, 0xb8, 0xb5, 0x47, 0x6c, 0x93, 0x1a, 0xd2, 0x43, 0x98, 0x8e, 0xb5, 0xa2, 0x0f, 0x19, 0xed,
	0x57, 0x1c, 0x4f, 0xf2, 0x8a, 0xfc, 0x11, 0xc1, 0x35, 0x21, 0x9d, 0x2e, 0x55, 0x22, 0xfc, 0x0f,
	0x76, 0x4b, 0x85, 0x4a, 0x7a, 0x04, 0x51, 0x8e, 0x23, 0x0f, 0xe5, 0x92, 0xb3, 0xfe, 0x63, 0x02,
	0x40, 0x8c, 0xac, 0x73, 0x68, 0xeb, 0xd2, 0x6b, 0xa8, 0xe6, 0x4f, 0xaf, 0x99, 0xbc, 0x3d, 0xea,
	0xdc, 0x1b, 0x8b, 0x97, 0xe8, 0x88, 0xbb, 0x95, 0xef, 0xbf, 0xfd, 0xf2, 0xed, 0xfd, 0xc4, 0x5d,
	0xf9, 0xb6, 0x3a, 0x5c, 0x53, 0xc3, 0x10, 0xd4, 0x4b, 0x2b, 0x35, 0x47, 0x6d, 0xa3, 0x15, 0xc9,
	0x81, 0x6a, 0xfe, 0x16, 0x8b, 0xde, 0x39, 0xb4, 0x51, 0x2b, 0x7a, 0x77, 0xe8, 0xc1, 0xef, 0x1d,
	0x73, 0xef, 0x87, 0x8e, 0x43, 0x98, 0xcd, 0x2d, 0xdc, 0xcd, 0x82, 0x61, 0x16, 0x6c, 0x34, 0x8b,
	0x7e, 0x59, 0x54, 0xbe, 0x17, 0x19, 0xdf, 0x91, 0x5b, 0xa3, 0x8c, 0xb3, 0xcc, 0x36, 0x5a, 0xd9,
	0xd4, 0x8e, 0x4f, 0x71, 0xe9, 0xe4, 0x14, 0x97, 0x2e, 0x4e, 0x31, 0x7a, 0x13, 0x60, 0xf4, 0x21,
	0xc0, 0xe8, 0x73, 0x80, 0xd1, 0x71, 0x80, 0xd1, 0xd7, 0x00, 0xa3, 0xef, 0x01, 0x2e, 0x5d, 0x04,
	0x18, 0xbd, 0x3b, 0xc3, 0xa5, 0xe3, 0x33, 0x5c, 0x3a, 0x39, 0xc3, 0x25, 0x98, 0xcf, 0x6e, 0xb3,
	0x47, 0xdd, 0x21, 0xd3, 0xa9, 0xf7, 0x22, 0xfe, 0x17, 0xea, 0x4e, 0x45, 0x4b, 0xf2, 0xe0, 0x67,
	0x00, 0x00, 0x00, 0xff, 0xff, 0x36, 0x61, 0x33, 0xb2, 0xa9, 0x06, 0x00, 0x00,
}

func (this *Parameter) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Parameter)
	if !ok {
		that2, ok := that.(Parameter)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Key != that1.Key {
		return false
	}
	if this.Value != that1.Value {
		return false
	}
	if this.Clock != that1.Clock {
		return false
	}
	return true
}
func (this *RequestGetParameters) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RequestGetParameters)
	if !ok {
		that2, ok := that.(RequestGetParameters)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.FromClock != that1.FromClock {
		return false
	}
	return true
}
func (this *ResponseGetParameters) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ResponseGetParameters)
	if !ok {
		that2, ok := that.(ResponseGetParameters)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Parameters) != len(that1.Parameters) {
		return false
	}
	for i := range this.Parameters {
		if !this.Parameters[i].Equal(that1.Parameters[i]) {
			return false
		}
	}
	return true
}
func (this *RequestEditParameter) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RequestEditParameter)
	if !ok {
		that2, ok := that.(RequestEditParameter)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Key != that1.Key {
		return false
	}
	if !this.Value.Equal(that1.Value) {
		return false
	}
	if this.Clock != that1.Clock {
		return false
	}
	return true
}
func (this *FeatureFlag) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*FeatureFlag)
	if !ok {
		that2, ok := that.(FeatureFlag)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Key != that1.Key {
		return false
	}
	if this.Value != that1.Value {
		return false
	}
	if this.Clock != that1.Clock {
		return false
	}
	return true
}
func (this *RequestFeatureFlags) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RequestFeatureFlags)
	if !ok {
		that2, ok := that.(RequestFeatureFlags)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.FromClock != that1.FromClock {
		return false
	}
	return true
}
func (this *ResponseFeatureFlags) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ResponseFeatureFlags)
	if !ok {
		that2, ok := that.(ResponseFeatureFlags)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.FeatureConfig) != len(that1.FeatureConfig) {
		return false
	}
	for i := range this.FeatureConfig {
		if !this.FeatureConfig[i].Equal(that1.FeatureConfig[i]) {
			return false
		}
	}
	return true
}
func (this *UpdateFeatureFlagChanged) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpdateFeatureFlagChanged)
	if !ok {
		that2, ok := that.(UpdateFeatureFlagChanged)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Feature.Equal(that1.Feature) {
		return false
	}
	return true
}
func (this *UpdateParameterChanged) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpdateParameterChanged)
	if !ok {
		that2, ok := that.(UpdateParameterChanged)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Key != that1.Key {
		return false
	}
	if !this.Value.Equal(that1.Value) {
		return false
	}
	if !this.Parameter.Equal(that1.Parameter) {
		return false
	}
	return true
}
func (this *Parameter) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&dialog.Parameter{")
	s = append(s, "Key: "+fmt.Sprintf("%#v", this.Key)+",\n")
	s = append(s, "Value: "+fmt.Sprintf("%#v", this.Value)+",\n")
	s = append(s, "Clock: "+fmt.Sprintf("%#v", this.Clock)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RequestGetParameters) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&dialog.RequestGetParameters{")
	s = append(s, "FromClock: "+fmt.Sprintf("%#v", this.FromClock)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ResponseGetParameters) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&dialog.ResponseGetParameters{")
	if this.Parameters != nil {
		s = append(s, "Parameters: "+fmt.Sprintf("%#v", this.Parameters)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RequestEditParameter) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&dialog.RequestEditParameter{")
	s = append(s, "Key: "+fmt.Sprintf("%#v", this.Key)+",\n")
	if this.Value != nil {
		s = append(s, "Value: "+fmt.Sprintf("%#v", this.Value)+",\n")
	}
	s = append(s, "Clock: "+fmt.Sprintf("%#v", this.Clock)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *FeatureFlag) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&dialog.FeatureFlag{")
	s = append(s, "Key: "+fmt.Sprintf("%#v", this.Key)+",\n")
	s = append(s, "Value: "+fmt.Sprintf("%#v", this.Value)+",\n")
	s = append(s, "Clock: "+fmt.Sprintf("%#v", this.Clock)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RequestFeatureFlags) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&dialog.RequestFeatureFlags{")
	s = append(s, "FromClock: "+fmt.Sprintf("%#v", this.FromClock)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ResponseFeatureFlags) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&dialog.ResponseFeatureFlags{")
	if this.FeatureConfig != nil {
		s = append(s, "FeatureConfig: "+fmt.Sprintf("%#v", this.FeatureConfig)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UpdateFeatureFlagChanged) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&dialog.UpdateFeatureFlagChanged{")
	if this.Feature != nil {
		s = append(s, "Feature: "+fmt.Sprintf("%#v", this.Feature)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UpdateParameterChanged) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&dialog.UpdateParameterChanged{")
	s = append(s, "Key: "+fmt.Sprintf("%#v", this.Key)+",\n")
	if this.Value != nil {
		s = append(s, "Value: "+fmt.Sprintf("%#v", this.Value)+",\n")
	}
	if this.Parameter != nil {
		s = append(s, "Parameter: "+fmt.Sprintf("%#v", this.Parameter)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringConfigSync(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ConfigSyncClient is the client API for ConfigSync service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ConfigSyncClient interface {
	GetParameters(ctx context.Context, in *RequestGetParameters, opts ...grpc.CallOption) (*ResponseGetParameters, error)
	EditParameter(ctx context.Context, in *RequestEditParameter, opts ...grpc.CallOption) (*ResponseSeq, error)
	FeatureFlags(ctx context.Context, in *RequestFeatureFlags, opts ...grpc.CallOption) (*ResponseFeatureFlags, error)
}

type configSyncClient struct {
	cc *grpc.ClientConn
}

func NewConfigSyncClient(cc *grpc.ClientConn) ConfigSyncClient {
	return &configSyncClient{cc}
}

func (c *configSyncClient) GetParameters(ctx context.Context, in *RequestGetParameters, opts ...grpc.CallOption) (*ResponseGetParameters, error) {
	out := new(ResponseGetParameters)
	err := c.cc.Invoke(ctx, "/dialog.ConfigSync/GetParameters", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configSyncClient) EditParameter(ctx context.Context, in *RequestEditParameter, opts ...grpc.CallOption) (*ResponseSeq, error) {
	out := new(ResponseSeq)
	err := c.cc.Invoke(ctx, "/dialog.ConfigSync/EditParameter", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configSyncClient) FeatureFlags(ctx context.Context, in *RequestFeatureFlags, opts ...grpc.CallOption) (*ResponseFeatureFlags, error) {
	out := new(ResponseFeatureFlags)
	err := c.cc.Invoke(ctx, "/dialog.ConfigSync/FeatureFlags", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ConfigSyncServer is the server API for ConfigSync service.
type ConfigSyncServer interface {
	GetParameters(context.Context, *RequestGetParameters) (*ResponseGetParameters, error)
	EditParameter(context.Context, *RequestEditParameter) (*ResponseSeq, error)
	FeatureFlags(context.Context, *RequestFeatureFlags) (*ResponseFeatureFlags, error)
}

// UnimplementedConfigSyncServer can be embedded to have forward compatible implementations.
type UnimplementedConfigSyncServer struct {
}

func (*UnimplementedConfigSyncServer) GetParameters(ctx context.Context, req *RequestGetParameters) (*ResponseGetParameters, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetParameters not implemented")
}
func (*UnimplementedConfigSyncServer) EditParameter(ctx context.Context, req *RequestEditParameter) (*ResponseSeq, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EditParameter not implemented")
}
func (*UnimplementedConfigSyncServer) FeatureFlags(ctx context.Context, req *RequestFeatureFlags) (*ResponseFeatureFlags, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FeatureFlags not implemented")
}

func RegisterConfigSyncServer(s *grpc.Server, srv ConfigSyncServer) {
	s.RegisterService(&_ConfigSync_serviceDesc, srv)
}

func _ConfigSync_GetParameters_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestGetParameters)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigSyncServer).GetParameters(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dialog.ConfigSync/GetParameters",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigSyncServer).GetParameters(ctx, req.(*RequestGetParameters))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigSync_EditParameter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestEditParameter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigSyncServer).EditParameter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dialog.ConfigSync/EditParameter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigSyncServer).EditParameter(ctx, req.(*RequestEditParameter))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigSync_FeatureFlags_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestFeatureFlags)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigSyncServer).FeatureFlags(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dialog.ConfigSync/FeatureFlags",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigSyncServer).FeatureFlags(ctx, req.(*RequestFeatureFlags))
	}
	return interceptor(ctx, in, info, handler)
}

var _ConfigSync_serviceDesc = grpc.ServiceDesc{
	ServiceName: "dialog.ConfigSync",
	HandlerType: (*ConfigSyncServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetParameters",
			Handler:    _ConfigSync_GetParameters_Handler,
		},
		{
			MethodName: "EditParameter",
			Handler:    _ConfigSync_EditParameter_Handler,
		},
		{
			MethodName: "FeatureFlags",
			Handler:    _ConfigSync_FeatureFlags_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "config_sync.proto",
}

func (m *Parameter) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Parameter) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Parameter) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Clock != 0 {
		i = encodeVarintConfigSync(dAtA, i, uint64(m.Clock))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Value) > 0 {
		i -= len(m.Value)
		copy(dAtA[i:], m.Value)
		i = encodeVarintConfigSync(dAtA, i, uint64(len(m.Value)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Key) > 0 {
		i -= len(m.Key)
		copy(dAtA[i:], m.Key)
		i = encodeVarintConfigSync(dAtA, i, uint64(len(m.Key)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RequestGetParameters) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestGetParameters) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RequestGetParameters) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.FromClock != 0 {
		i = encodeVarintConfigSync(dAtA, i, uint64(m.FromClock))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ResponseGetParameters) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResponseGetParameters) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ResponseGetParameters) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Parameters) > 0 {
		for iNdEx := len(m.Parameters) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Parameters[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintConfigSync(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *RequestEditParameter) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestEditParameter) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RequestEditParameter) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Clock != 0 {
		i = encodeVarintConfigSync(dAtA, i, uint64(m.Clock))
		i--
		dAtA[i] = 0x18
	}
	if m.Value != nil {
		{
			size, err := m.Value.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintConfigSync(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Key) > 0 {
		i -= len(m.Key)
		copy(dAtA[i:], m.Key)
		i = encodeVarintConfigSync(dAtA, i, uint64(len(m.Key)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *FeatureFlag) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FeatureFlag) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FeatureFlag) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Clock != 0 {
		i = encodeVarintConfigSync(dAtA, i, uint64(m.Clock))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Value) > 0 {
		i -= len(m.Value)
		copy(dAtA[i:], m.Value)
		i = encodeVarintConfigSync(dAtA, i, uint64(len(m.Value)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Key) > 0 {
		i -= len(m.Key)
		copy(dAtA[i:], m.Key)
		i = encodeVarintConfigSync(dAtA, i, uint64(len(m.Key)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RequestFeatureFlags) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestFeatureFlags) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RequestFeatureFlags) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.FromClock != 0 {
		i = encodeVarintConfigSync(dAtA, i, uint64(m.FromClock))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ResponseFeatureFlags) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResponseFeatureFlags) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ResponseFeatureFlags) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.FeatureConfig) > 0 {
		for iNdEx := len(m.FeatureConfig) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.FeatureConfig[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintConfigSync(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *UpdateFeatureFlagChanged) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateFeatureFlagChanged) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateFeatureFlagChanged) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Feature != nil {
		{
			size, err := m.Feature.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintConfigSync(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UpdateParameterChanged) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateParameterChanged) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateParameterChanged) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Parameter != nil {
		{
			size, err := m.Parameter.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintConfigSync(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Value != nil {
		{
			size, err := m.Value.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintConfigSync(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Key) > 0 {
		i -= len(m.Key)
		copy(dAtA[i:], m.Key)
		i = encodeVarintConfigSync(dAtA, i, uint64(len(m.Key)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintConfigSync(dAtA []byte, offset int, v uint64) int {
	offset -= sovConfigSync(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Parameter) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovConfigSync(uint64(l))
	}
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovConfigSync(uint64(l))
	}
	if m.Clock != 0 {
		n += 1 + sovConfigSync(uint64(m.Clock))
	}
	return n
}

func (m *RequestGetParameters) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.FromClock != 0 {
		n += 1 + sovConfigSync(uint64(m.FromClock))
	}
	return n
}

func (m *ResponseGetParameters) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Parameters) > 0 {
		for _, e := range m.Parameters {
			l = e.Size()
			n += 1 + l + sovConfigSync(uint64(l))
		}
	}
	return n
}

func (m *RequestEditParameter) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovConfigSync(uint64(l))
	}
	if m.Value != nil {
		l = m.Value.Size()
		n += 1 + l + sovConfigSync(uint64(l))
	}
	if m.Clock != 0 {
		n += 1 + sovConfigSync(uint64(m.Clock))
	}
	return n
}

func (m *FeatureFlag) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovConfigSync(uint64(l))
	}
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovConfigSync(uint64(l))
	}
	if m.Clock != 0 {
		n += 1 + sovConfigSync(uint64(m.Clock))
	}
	return n
}

func (m *RequestFeatureFlags) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.FromClock != 0 {
		n += 1 + sovConfigSync(uint64(m.FromClock))
	}
	return n
}

func (m *ResponseFeatureFlags) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.FeatureConfig) > 0 {
		for _, e := range m.FeatureConfig {
			l = e.Size()
			n += 1 + l + sovConfigSync(uint64(l))
		}
	}
	return n
}

func (m *UpdateFeatureFlagChanged) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Feature != nil {
		l = m.Feature.Size()
		n += 1 + l + sovConfigSync(uint64(l))
	}
	return n
}

func (m *UpdateParameterChanged) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovConfigSync(uint64(l))
	}
	if m.Value != nil {
		l = m.Value.Size()
		n += 1 + l + sovConfigSync(uint64(l))
	}
	if m.Parameter != nil {
		l = m.Parameter.Size()
		n += 1 + l + sovConfigSync(uint64(l))
	}
	return n
}

func sovConfigSync(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozConfigSync(x uint64) (n int) {
	return sovConfigSync(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *Parameter) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Parameter{`,
		`Key:` + fmt.Sprintf("%v", this.Key) + `,`,
		`Value:` + fmt.Sprintf("%v", this.Value) + `,`,
		`Clock:` + fmt.Sprintf("%v", this.Clock) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RequestGetParameters) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RequestGetParameters{`,
		`FromClock:` + fmt.Sprintf("%v", this.FromClock) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ResponseGetParameters) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForParameters := "[]*Parameter{"
	for _, f := range this.Parameters {
		repeatedStringForParameters += strings.Replace(f.String(), "Parameter", "Parameter", 1) + ","
	}
	repeatedStringForParameters += "}"
	s := strings.Join([]string{`&ResponseGetParameters{`,
		`Parameters:` + repeatedStringForParameters + `,`,
		`}`,
	}, "")
	return s
}
func (this *RequestEditParameter) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RequestEditParameter{`,
		`Key:` + fmt.Sprintf("%v", this.Key) + `,`,
		`Value:` + strings.Replace(fmt.Sprintf("%v", this.Value), "StringValue", "types.StringValue", 1) + `,`,
		`Clock:` + fmt.Sprintf("%v", this.Clock) + `,`,
		`}`,
	}, "")
	return s
}
func (this *FeatureFlag) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&FeatureFlag{`,
		`Key:` + fmt.Sprintf("%v", this.Key) + `,`,
		`Value:` + fmt.Sprintf("%v", this.Value) + `,`,
		`Clock:` + fmt.Sprintf("%v", this.Clock) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RequestFeatureFlags) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RequestFeatureFlags{`,
		`FromClock:` + fmt.Sprintf("%v", this.FromClock) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ResponseFeatureFlags) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForFeatureConfig := "[]*FeatureFlag{"
	for _, f := range this.FeatureConfig {
		repeatedStringForFeatureConfig += strings.Replace(f.String(), "FeatureFlag", "FeatureFlag", 1) + ","
	}
	repeatedStringForFeatureConfig += "}"
	s := strings.Join([]string{`&ResponseFeatureFlags{`,
		`FeatureConfig:` + repeatedStringForFeatureConfig + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateFeatureFlagChanged) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateFeatureFlagChanged{`,
		`Feature:` + strings.Replace(this.Feature.String(), "FeatureFlag", "FeatureFlag", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateParameterChanged) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateParameterChanged{`,
		`Key:` + fmt.Sprintf("%v", this.Key) + `,`,
		`Value:` + strings.Replace(fmt.Sprintf("%v", this.Value), "StringValue", "types.StringValue", 1) + `,`,
		`Parameter:` + strings.Replace(this.Parameter.String(), "Parameter", "Parameter", 1) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringConfigSync(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *Parameter) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowConfigSync
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Parameter: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Parameter: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfigSync
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthConfigSync
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthConfigSync
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfigSync
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthConfigSync
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthConfigSync
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Clock", wireType)
			}
			m.Clock = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfigSync
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Clock |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipConfigSync(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthConfigSync
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthConfigSync
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestGetParameters) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowConfigSync
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestGetParameters: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestGetParameters: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromClock", wireType)
			}
			m.FromClock = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfigSync
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FromClock |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipConfigSync(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthConfigSync
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthConfigSync
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResponseGetParameters) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowConfigSync
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResponseGetParameters: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResponseGetParameters: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Parameters", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfigSync
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthConfigSync
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthConfigSync
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Parameters = append(m.Parameters, &Parameter{})
			if err := m.Parameters[len(m.Parameters)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipConfigSync(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthConfigSync
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthConfigSync
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestEditParameter) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowConfigSync
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestEditParameter: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestEditParameter: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfigSync
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthConfigSync
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthConfigSync
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfigSync
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthConfigSync
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthConfigSync
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Value == nil {
				m.Value = &types.StringValue{}
			}
			if err := m.Value.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Clock", wireType)
			}
			m.Clock = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfigSync
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Clock |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipConfigSync(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthConfigSync
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthConfigSync
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FeatureFlag) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowConfigSync
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FeatureFlag: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FeatureFlag: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfigSync
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthConfigSync
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthConfigSync
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfigSync
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthConfigSync
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthConfigSync
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Clock", wireType)
			}
			m.Clock = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfigSync
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Clock |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipConfigSync(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthConfigSync
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthConfigSync
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestFeatureFlags) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowConfigSync
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestFeatureFlags: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestFeatureFlags: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromClock", wireType)
			}
			m.FromClock = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfigSync
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FromClock |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipConfigSync(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthConfigSync
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthConfigSync
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResponseFeatureFlags) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowConfigSync
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResponseFeatureFlags: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResponseFeatureFlags: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeatureConfig", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfigSync
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthConfigSync
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthConfigSync
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FeatureConfig = append(m.FeatureConfig, &FeatureFlag{})
			if err := m.FeatureConfig[len(m.FeatureConfig)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipConfigSync(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthConfigSync
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthConfigSync
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateFeatureFlagChanged) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowConfigSync
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateFeatureFlagChanged: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateFeatureFlagChanged: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Feature", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfigSync
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthConfigSync
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthConfigSync
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Feature == nil {
				m.Feature = &FeatureFlag{}
			}
			if err := m.Feature.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipConfigSync(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthConfigSync
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthConfigSync
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateParameterChanged) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowConfigSync
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateParameterChanged: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateParameterChanged: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfigSync
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthConfigSync
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthConfigSync
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfigSync
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthConfigSync
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthConfigSync
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Value == nil {
				m.Value = &types.StringValue{}
			}
			if err := m.Value.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Parameter", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfigSync
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthConfigSync
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthConfigSync
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Parameter == nil {
				m.Parameter = &Parameter{}
			}
			if err := m.Parameter.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipConfigSync(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthConfigSync
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthConfigSync
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipConfigSync(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowConfigSync
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowConfigSync
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowConfigSync
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthConfigSync
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupConfigSync
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthConfigSync
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthConfigSync        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowConfigSync          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupConfigSync = fmt.Errorf("proto: unexpected end of group")
)
