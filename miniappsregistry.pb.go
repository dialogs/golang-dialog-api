// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: miniappsregistry.proto

package dialog

import (
	context "context"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	types "github.com/gogo/protobuf/types"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strconv "strconv"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Defines the type of the app. Currently only WebView supported, but more types can be added in future.
type AppType int32

const (
	UNKNOWN AppType = 0
	// Url which can be opened inside WebView in dialog app
	WEB_VIEW AppType = 1
)

var AppType_name = map[int32]string{
	0: "UNKNOWN",
	1: "WEB_VIEW",
}

var AppType_value = map[string]int32{
	"UNKNOWN":  0,
	"WEB_VIEW": 1,
}

func (AppType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_6320f0162bfbffc9, []int{0}
}

type UpdateMiniApp_AppLifecycle int32

const (
	APPLIFECYCLE_CREATED  UpdateMiniApp_AppLifecycle = 0
	APPLIFECYCLE_UPDATED  UpdateMiniApp_AppLifecycle = 1
	APPLIFECYCLE_ENABLED  UpdateMiniApp_AppLifecycle = 2
	APPLIFECYCLE_DISABLED UpdateMiniApp_AppLifecycle = 3
	APPLIFECYCLE_DELETED  UpdateMiniApp_AppLifecycle = 4
)

var UpdateMiniApp_AppLifecycle_name = map[int32]string{
	0: "APPLIFECYCLE_CREATED",
	1: "APPLIFECYCLE_UPDATED",
	2: "APPLIFECYCLE_ENABLED",
	3: "APPLIFECYCLE_DISABLED",
	4: "APPLIFECYCLE_DELETED",
}

var UpdateMiniApp_AppLifecycle_value = map[string]int32{
	"APPLIFECYCLE_CREATED":  0,
	"APPLIFECYCLE_UPDATED":  1,
	"APPLIFECYCLE_ENABLED":  2,
	"APPLIFECYCLE_DISABLED": 3,
	"APPLIFECYCLE_DELETED":  4,
}

func (UpdateMiniApp_AppLifecycle) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_6320f0162bfbffc9, []int{1, 0}
}

type MiniApp struct {
	// unique identifier of the app
	Id *UUIDValue `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// type of the app
	AppType AppType `protobuf:"varint,2,opt,name=app_type,json=appType,proto3,enum=dialog.AppType" json:"app_type,omitempty"`
	// name of the app
	Name string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	// additional info, describing this app
	Description string `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	// version of app
	Version string `protobuf:"bytes,5,opt,name=version,proto3" json:"version,omitempty"`
	// icon name for this app
	Icon string `protobuf:"bytes,6,opt,name=icon,proto3" json:"icon,omitempty"`
	// link to this app
	Link string `protobuf:"bytes,7,opt,name=link,proto3" json:"link,omitempty"`
	// additional data stored in json format
	JsonContent *types.StringValue `protobuf:"bytes,8,opt,name=json_content,json=jsonContent,proto3" json:"json_content,omitempty"`
	// creation date/time in millis
	CreatedAtTs int64 `protobuf:"varint,9,opt,name=created_at_ts,json=createdAtTs,proto3" json:"created_at_ts,omitempty"`
	// update date/time in millis
	ModifiedAtTs int64 `protobuf:"varint,10,opt,name=modified_at_ts,json=modifiedAtTs,proto3" json:"modified_at_ts,omitempty"`
	// specifies if this app enabled and user can use it, ot not
	IsEnabled bool `protobuf:"varint,11,opt,name=is_enabled,json=isEnabled,proto3" json:"is_enabled,omitempty"`
}

func (m *MiniApp) Reset()      { *m = MiniApp{} }
func (*MiniApp) ProtoMessage() {}
func (*MiniApp) Descriptor() ([]byte, []int) {
	return fileDescriptor_6320f0162bfbffc9, []int{0}
}
func (m *MiniApp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MiniApp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MiniApp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MiniApp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MiniApp.Merge(m, src)
}
func (m *MiniApp) XXX_Size() int {
	return m.Size()
}
func (m *MiniApp) XXX_DiscardUnknown() {
	xxx_messageInfo_MiniApp.DiscardUnknown(m)
}

var xxx_messageInfo_MiniApp proto.InternalMessageInfo

func (m *MiniApp) GetId() *UUIDValue {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *MiniApp) GetAppType() AppType {
	if m != nil {
		return m.AppType
	}
	return UNKNOWN
}

func (m *MiniApp) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *MiniApp) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *MiniApp) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *MiniApp) GetIcon() string {
	if m != nil {
		return m.Icon
	}
	return ""
}

func (m *MiniApp) GetLink() string {
	if m != nil {
		return m.Link
	}
	return ""
}

func (m *MiniApp) GetJsonContent() *types.StringValue {
	if m != nil {
		return m.JsonContent
	}
	return nil
}

func (m *MiniApp) GetCreatedAtTs() int64 {
	if m != nil {
		return m.CreatedAtTs
	}
	return 0
}

func (m *MiniApp) GetModifiedAtTs() int64 {
	if m != nil {
		return m.ModifiedAtTs
	}
	return 0
}

func (m *MiniApp) GetIsEnabled() bool {
	if m != nil {
		return m.IsEnabled
	}
	return false
}

// App update
type UpdateMiniApp struct {
	AppLifecycle UpdateMiniApp_AppLifecycle `protobuf:"varint,1,opt,name=app_lifecycle,json=appLifecycle,proto3,enum=dialog.UpdateMiniApp_AppLifecycle" json:"app_lifecycle,omitempty"`
	AppData      *MiniApp                   `protobuf:"bytes,2,opt,name=app_data,json=appData,proto3" json:"app_data,omitempty"`
}

func (m *UpdateMiniApp) Reset()      { *m = UpdateMiniApp{} }
func (*UpdateMiniApp) ProtoMessage() {}
func (*UpdateMiniApp) Descriptor() ([]byte, []int) {
	return fileDescriptor_6320f0162bfbffc9, []int{1}
}
func (m *UpdateMiniApp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateMiniApp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateMiniApp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateMiniApp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateMiniApp.Merge(m, src)
}
func (m *UpdateMiniApp) XXX_Size() int {
	return m.Size()
}
func (m *UpdateMiniApp) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateMiniApp.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateMiniApp proto.InternalMessageInfo

func (m *UpdateMiniApp) GetAppLifecycle() UpdateMiniApp_AppLifecycle {
	if m != nil {
		return m.AppLifecycle
	}
	return APPLIFECYCLE_CREATED
}

func (m *UpdateMiniApp) GetAppData() *MiniApp {
	if m != nil {
		return m.AppData
	}
	return nil
}

// Request to get list of mini-apps
type GetAppsRequest struct {
	// return only apps created/modified since given clock
	FromClock int64 `protobuf:"varint,1,opt,name=from_clock,json=fromClock,proto3" json:"from_clock,omitempty"`
}

func (m *GetAppsRequest) Reset()      { *m = GetAppsRequest{} }
func (*GetAppsRequest) ProtoMessage() {}
func (*GetAppsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_6320f0162bfbffc9, []int{2}
}
func (m *GetAppsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetAppsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetAppsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetAppsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetAppsRequest.Merge(m, src)
}
func (m *GetAppsRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetAppsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetAppsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetAppsRequest proto.InternalMessageInfo

func (m *GetAppsRequest) GetFromClock() int64 {
	if m != nil {
		return m.FromClock
	}
	return 0
}

// List of the mini-app
type GetAppsResponse struct {
	Apps  []*MiniApp `protobuf:"bytes,1,rep,name=apps,proto3" json:"apps,omitempty"`
	Clock int64      `protobuf:"varint,2,opt,name=clock,proto3" json:"clock,omitempty"`
}

func (m *GetAppsResponse) Reset()      { *m = GetAppsResponse{} }
func (*GetAppsResponse) ProtoMessage() {}
func (*GetAppsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_6320f0162bfbffc9, []int{3}
}
func (m *GetAppsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetAppsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetAppsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetAppsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetAppsResponse.Merge(m, src)
}
func (m *GetAppsResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetAppsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetAppsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetAppsResponse proto.InternalMessageInfo

func (m *GetAppsResponse) GetApps() []*MiniApp {
	if m != nil {
		return m.Apps
	}
	return nil
}

func (m *GetAppsResponse) GetClock() int64 {
	if m != nil {
		return m.Clock
	}
	return 0
}

// Findig mini-app by id
type FindAppRequest struct {
	AppId string `protobuf:"bytes,1,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty"`
}

func (m *FindAppRequest) Reset()      { *m = FindAppRequest{} }
func (*FindAppRequest) ProtoMessage() {}
func (*FindAppRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_6320f0162bfbffc9, []int{4}
}
func (m *FindAppRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FindAppRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FindAppRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FindAppRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FindAppRequest.Merge(m, src)
}
func (m *FindAppRequest) XXX_Size() int {
	return m.Size()
}
func (m *FindAppRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_FindAppRequest.DiscardUnknown(m)
}

var xxx_messageInfo_FindAppRequest proto.InternalMessageInfo

func (m *FindAppRequest) GetAppId() string {
	if m != nil {
		return m.AppId
	}
	return ""
}

// App found by id (or empty)
type FindAppResponse struct {
	App *MiniApp `protobuf:"bytes,1,opt,name=app,proto3" json:"app,omitempty"`
}

func (m *FindAppResponse) Reset()      { *m = FindAppResponse{} }
func (*FindAppResponse) ProtoMessage() {}
func (*FindAppResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_6320f0162bfbffc9, []int{5}
}
func (m *FindAppResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FindAppResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FindAppResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FindAppResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FindAppResponse.Merge(m, src)
}
func (m *FindAppResponse) XXX_Size() int {
	return m.Size()
}
func (m *FindAppResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_FindAppResponse.DiscardUnknown(m)
}

var xxx_messageInfo_FindAppResponse proto.InternalMessageInfo

func (m *FindAppResponse) GetApp() *MiniApp {
	if m != nil {
		return m.App
	}
	return nil
}

// Issue JWT token for third-party applications
type IssueAccessTokenRequest struct {
	AppId *UUIDValue `protobuf:"bytes,1,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty"`
}

func (m *IssueAccessTokenRequest) Reset()      { *m = IssueAccessTokenRequest{} }
func (*IssueAccessTokenRequest) ProtoMessage() {}
func (*IssueAccessTokenRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_6320f0162bfbffc9, []int{6}
}
func (m *IssueAccessTokenRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *IssueAccessTokenRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_IssueAccessTokenRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *IssueAccessTokenRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IssueAccessTokenRequest.Merge(m, src)
}
func (m *IssueAccessTokenRequest) XXX_Size() int {
	return m.Size()
}
func (m *IssueAccessTokenRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_IssueAccessTokenRequest.DiscardUnknown(m)
}

var xxx_messageInfo_IssueAccessTokenRequest proto.InternalMessageInfo

func (m *IssueAccessTokenRequest) GetAppId() *UUIDValue {
	if m != nil {
		return m.AppId
	}
	return nil
}

type AccessTokenResponse struct {
	AccessToken string `protobuf:"bytes,1,opt,name=access_token,json=accessToken,proto3" json:"access_token,omitempty"`
}

func (m *AccessTokenResponse) Reset()      { *m = AccessTokenResponse{} }
func (*AccessTokenResponse) ProtoMessage() {}
func (*AccessTokenResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_6320f0162bfbffc9, []int{7}
}
func (m *AccessTokenResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AccessTokenResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AccessTokenResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AccessTokenResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AccessTokenResponse.Merge(m, src)
}
func (m *AccessTokenResponse) XXX_Size() int {
	return m.Size()
}
func (m *AccessTokenResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_AccessTokenResponse.DiscardUnknown(m)
}

var xxx_messageInfo_AccessTokenResponse proto.InternalMessageInfo

func (m *AccessTokenResponse) GetAccessToken() string {
	if m != nil {
		return m.AccessToken
	}
	return ""
}

func init() {
	proto.RegisterEnum("dialog.AppType", AppType_name, AppType_value)
	proto.RegisterEnum("dialog.UpdateMiniApp_AppLifecycle", UpdateMiniApp_AppLifecycle_name, UpdateMiniApp_AppLifecycle_value)
	proto.RegisterType((*MiniApp)(nil), "dialog.MiniApp")
	proto.RegisterType((*UpdateMiniApp)(nil), "dialog.UpdateMiniApp")
	proto.RegisterType((*GetAppsRequest)(nil), "dialog.GetAppsRequest")
	proto.RegisterType((*GetAppsResponse)(nil), "dialog.GetAppsResponse")
	proto.RegisterType((*FindAppRequest)(nil), "dialog.FindAppRequest")
	proto.RegisterType((*FindAppResponse)(nil), "dialog.FindAppResponse")
	proto.RegisterType((*IssueAccessTokenRequest)(nil), "dialog.IssueAccessTokenRequest")
	proto.RegisterType((*AccessTokenResponse)(nil), "dialog.AccessTokenResponse")
}

func init() { proto.RegisterFile("miniappsregistry.proto", fileDescriptor_6320f0162bfbffc9) }

var fileDescriptor_6320f0162bfbffc9 = []byte{
	// 782 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x54, 0x41, 0x6f, 0xdb, 0x36,
	0x18, 0x35, 0xed, 0x24, 0x8a, 0x3f, 0x39, 0x8e, 0xcb, 0xb5, 0x8d, 0x96, 0x6d, 0x9a, 0xab, 0x15,
	0x98, 0xd1, 0x83, 0x03, 0x64, 0x3d, 0x0c, 0xbd, 0x0c, 0x8a, 0xad, 0x16, 0xc6, 0xbc, 0x2c, 0x50,
	0xe3, 0x06, 0x3b, 0x09, 0x8c, 0x44, 0x1b, 0x5c, 0x14, 0x8a, 0x13, 0x99, 0x0d, 0xb9, 0xed, 0x27,
	0x6c, 0xb7, 0xfd, 0x84, 0xfd, 0x94, 0x1d, 0x73, 0xec, 0x71, 0x71, 0x2e, 0x3b, 0xf6, 0xbc, 0xd3,
	0x40, 0x4a, 0x72, 0xec, 0xba, 0xbb, 0x91, 0xef, 0xbd, 0xef, 0xfb, 0xc8, 0xf7, 0x40, 0xc2, 0xe3,
	0x4b, 0xc6, 0x19, 0x11, 0x42, 0xe6, 0x74, 0xc6, 0xa4, 0xca, 0xaf, 0xfb, 0x22, 0xcf, 0x54, 0x86,
	0xb7, 0x12, 0x46, 0xd2, 0x6c, 0xb6, 0xef, 0xce, 0xb2, 0x6c, 0x96, 0xd2, 0x03, 0x83, 0x9e, 0x5f,
	0x4d, 0x0f, 0x7e, 0xc9, 0x89, 0x10, 0x34, 0x97, 0x85, 0x6e, 0xff, 0x41, 0x42, 0xa7, 0x8c, 0x33,
	0xc5, 0x32, 0x5e, 0x42, 0xde, 0xbf, 0x75, 0xb0, 0xbe, 0x63, 0x9c, 0xf9, 0x42, 0xe0, 0x27, 0x50,
	0x67, 0x89, 0x83, 0xba, 0xa8, 0x67, 0x1f, 0x3e, 0xe8, 0x17, 0x3d, 0xfb, 0x93, 0xc9, 0x68, 0xf8,
	0x86, 0xa4, 0x57, 0x34, 0xac, 0xb3, 0x04, 0x3f, 0x83, 0x6d, 0x22, 0x44, 0xa4, 0xae, 0x05, 0x75,
	0xea, 0x5d, 0xd4, 0x6b, 0x1f, 0xee, 0x56, 0x42, 0x5f, 0x88, 0xd3, 0x6b, 0x41, 0x43, 0x8b, 0x14,
	0x0b, 0x8c, 0x61, 0x83, 0x93, 0x4b, 0xea, 0x34, 0xba, 0xa8, 0xd7, 0x0c, 0xcd, 0x1a, 0x77, 0xc1,
	0x4e, 0xa8, 0x8c, 0x73, 0x26, 0xf4, 0x21, 0x9c, 0x0d, 0x43, 0x2d, 0x43, 0xd8, 0x01, 0xeb, 0x67,
	0x9a, 0x4b, 0xcd, 0x6e, 0x1a, 0xb6, 0xda, 0xea, 0x7e, 0x2c, 0xce, 0xb8, 0xb3, 0x55, 0xf4, 0xd3,
	0x6b, 0x8d, 0xa5, 0x8c, 0x5f, 0x38, 0x56, 0x81, 0xe9, 0x35, 0xfe, 0x06, 0x5a, 0x3f, 0xca, 0x8c,
	0x47, 0x71, 0xc6, 0x15, 0xe5, 0xca, 0xd9, 0x36, 0x17, 0xfa, 0xb4, 0x5f, 0x98, 0xd3, 0xaf, 0xcc,
	0xe9, 0xbf, 0x56, 0x39, 0xe3, 0xb3, 0xe2, 0x6e, 0xb6, 0xae, 0x18, 0x14, 0x05, 0xd8, 0x83, 0x9d,
	0x38, 0xa7, 0x44, 0xd1, 0x24, 0x22, 0x2a, 0x52, 0xd2, 0x69, 0x76, 0x51, 0xaf, 0x11, 0xda, 0x25,
	0xe8, 0xab, 0x53, 0x89, 0x9f, 0x42, 0xfb, 0x32, 0x4b, 0xd8, 0x94, 0x2d, 0x44, 0x60, 0x44, 0xad,
	0x0a, 0x35, 0xaa, 0xcf, 0x00, 0x98, 0x8c, 0x28, 0x27, 0xe7, 0x29, 0x4d, 0x1c, 0xbb, 0x8b, 0x7a,
	0xdb, 0x61, 0x93, 0xc9, 0xa0, 0x00, 0xbc, 0x3f, 0xea, 0xb0, 0x33, 0x11, 0x09, 0x51, 0xb4, 0x8a,
	0xe0, 0x15, 0xec, 0x68, 0x7f, 0x53, 0x36, 0xa5, 0xf1, 0x75, 0x9c, 0x52, 0x93, 0x46, 0xfb, 0xd0,
	0x5b, 0xa4, 0xb1, 0xac, 0xd6, 0x96, 0x8f, 0x2b, 0x65, 0xd8, 0x22, 0x4b, 0xbb, 0x2a, 0xa8, 0x84,
	0x28, 0x62, 0x82, 0xb2, 0xef, 0x83, 0x2a, 0xab, 0x4d, 0x50, 0x43, 0xa2, 0x88, 0xf7, 0x3b, 0x82,
	0xd6, 0x72, 0x2b, 0xec, 0xc0, 0x43, 0xff, 0xe4, 0x64, 0x3c, 0x7a, 0x19, 0x0c, 0x7e, 0x18, 0x8c,
	0x83, 0x68, 0x10, 0x06, 0xfe, 0x69, 0x30, 0xec, 0xd4, 0xd6, 0x98, 0xc9, 0xc9, 0xd0, 0x30, 0x68,
	0x8d, 0x09, 0x8e, 0xfd, 0xa3, 0x71, 0x30, 0xec, 0xd4, 0xf1, 0xc7, 0xf0, 0x68, 0x85, 0x19, 0x8e,
	0x5e, 0x17, 0x54, 0x63, 0xad, 0x68, 0x18, 0x8c, 0x03, 0xdd, 0x6e, 0xc3, 0x3b, 0x80, 0xf6, 0x2b,
	0xaa, 0x7c, 0x21, 0x64, 0x48, 0x7f, 0xba, 0xa2, 0x52, 0x69, 0x2f, 0xa7, 0x79, 0x76, 0x19, 0xc5,
	0x69, 0x16, 0x5f, 0x18, 0x5f, 0x1a, 0x61, 0x53, 0x23, 0x03, 0x0d, 0x78, 0x63, 0xd8, 0x5d, 0x14,
	0x48, 0x91, 0x71, 0x49, 0xf1, 0x17, 0xb0, 0xa1, 0x1f, 0x8b, 0x83, 0xba, 0x8d, 0x0f, 0xdd, 0xdf,
	0x90, 0xf8, 0x21, 0x6c, 0x16, 0x1d, 0xeb, 0xa6, 0x63, 0xb1, 0xf1, 0xbe, 0x84, 0xf6, 0x4b, 0xc6,
	0x13, 0x2d, 0x2b, 0xc7, 0x3f, 0x82, 0x2d, 0x6d, 0x68, 0xf9, 0x40, 0x9a, 0xe1, 0x26, 0x11, 0x62,
	0x94, 0x78, 0xcf, 0x61, 0x77, 0x21, 0x2c, 0xc7, 0x3e, 0x81, 0x06, 0x11, 0xa2, 0x7c, 0x47, 0x6b,
	0x53, 0x35, 0xe7, 0x0d, 0x60, 0x6f, 0x24, 0xe5, 0x15, 0xf5, 0xe3, 0x98, 0x4a, 0x79, 0x9a, 0x5d,
	0x50, 0x5e, 0xcd, 0xe9, 0xad, 0xcc, 0xf9, 0xe0, 0x43, 0x2c, 0x47, 0x7f, 0x0d, 0x1f, 0xad, 0xd4,
	0x2f, 0xc6, 0xb7, 0x88, 0x81, 0x23, 0xa5, 0xf1, 0xf2, 0xb8, 0x36, 0xb9, 0x97, 0x3e, 0x7b, 0x0a,
	0x56, 0xf9, 0x5a, 0xb1, 0x0d, 0xd6, 0xe4, 0xf8, 0xdb, 0xe3, 0xef, 0xcf, 0x8e, 0x3b, 0x35, 0xdc,
	0x82, 0xed, 0xb3, 0xe0, 0x28, 0x7a, 0x33, 0x0a, 0xce, 0x3a, 0xe8, 0xf0, 0x0e, 0xc1, 0xde, 0x20,
	0x65, 0x94, 0x2b, 0x59, 0x1e, 0x5e, 0x86, 0xe5, 0xbf, 0x83, 0x5f, 0x80, 0x55, 0x5e, 0x1b, 0x3f,
	0xae, 0x0e, 0xb8, 0x6a, 0xd8, 0xfe, 0xde, 0x1a, 0x5e, 0x1e, 0xf0, 0x05, 0x58, 0x65, 0x52, 0xf7,
	0xb5, 0xab, 0x59, 0xdf, 0xd7, 0xbe, 0x1f, 0xe9, 0x09, 0x74, 0xde, 0x37, 0x0e, 0x7f, 0x5e, 0x89,
	0xff, 0xc7, 0xd2, 0xfd, 0x4f, 0x16, 0x5f, 0xd4, 0xba, 0x5d, 0x47, 0xcf, 0x6f, 0x6e, 0xdd, 0xda,
	0xdb, 0x5b, 0xb7, 0xf6, 0xee, 0xd6, 0x45, 0xbf, 0xce, 0x5d, 0xf4, 0xe7, 0xdc, 0x45, 0x7f, 0xcd,
	0x5d, 0x74, 0x33, 0x77, 0xd1, 0xdf, 0x73, 0x17, 0xfd, 0x33, 0x77, 0x6b, 0xef, 0xe6, 0x2e, 0xfa,
	0xed, 0xce, 0xad, 0xdd, 0xdc, 0xb9, 0xb5, 0xb7, 0x77, 0x6e, 0xed, 0x7c, 0xcb, 0xfc, 0x22, 0x5f,
	0xfd, 0x17, 0x00, 0x00, 0xff, 0xff, 0x16, 0x61, 0x8a, 0xc7, 0x92, 0x05, 0x00, 0x00,
}

func (x AppType) String() string {
	s, ok := AppType_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x UpdateMiniApp_AppLifecycle) String() string {
	s, ok := UpdateMiniApp_AppLifecycle_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *MiniApp) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MiniApp)
	if !ok {
		that2, ok := that.(MiniApp)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Id.Equal(that1.Id) {
		return false
	}
	if this.AppType != that1.AppType {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.Description != that1.Description {
		return false
	}
	if this.Version != that1.Version {
		return false
	}
	if this.Icon != that1.Icon {
		return false
	}
	if this.Link != that1.Link {
		return false
	}
	if !this.JsonContent.Equal(that1.JsonContent) {
		return false
	}
	if this.CreatedAtTs != that1.CreatedAtTs {
		return false
	}
	if this.ModifiedAtTs != that1.ModifiedAtTs {
		return false
	}
	if this.IsEnabled != that1.IsEnabled {
		return false
	}
	return true
}
func (this *UpdateMiniApp) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpdateMiniApp)
	if !ok {
		that2, ok := that.(UpdateMiniApp)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.AppLifecycle != that1.AppLifecycle {
		return false
	}
	if !this.AppData.Equal(that1.AppData) {
		return false
	}
	return true
}
func (this *GetAppsRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetAppsRequest)
	if !ok {
		that2, ok := that.(GetAppsRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.FromClock != that1.FromClock {
		return false
	}
	return true
}
func (this *GetAppsResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetAppsResponse)
	if !ok {
		that2, ok := that.(GetAppsResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Apps) != len(that1.Apps) {
		return false
	}
	for i := range this.Apps {
		if !this.Apps[i].Equal(that1.Apps[i]) {
			return false
		}
	}
	if this.Clock != that1.Clock {
		return false
	}
	return true
}
func (this *FindAppRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*FindAppRequest)
	if !ok {
		that2, ok := that.(FindAppRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.AppId != that1.AppId {
		return false
	}
	return true
}
func (this *FindAppResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*FindAppResponse)
	if !ok {
		that2, ok := that.(FindAppResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.App.Equal(that1.App) {
		return false
	}
	return true
}
func (this *IssueAccessTokenRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*IssueAccessTokenRequest)
	if !ok {
		that2, ok := that.(IssueAccessTokenRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AppId.Equal(that1.AppId) {
		return false
	}
	return true
}
func (this *AccessTokenResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AccessTokenResponse)
	if !ok {
		that2, ok := that.(AccessTokenResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.AccessToken != that1.AccessToken {
		return false
	}
	return true
}
func (this *MiniApp) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 15)
	s = append(s, "&dialog.MiniApp{")
	if this.Id != nil {
		s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	}
	s = append(s, "AppType: "+fmt.Sprintf("%#v", this.AppType)+",\n")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "Description: "+fmt.Sprintf("%#v", this.Description)+",\n")
	s = append(s, "Version: "+fmt.Sprintf("%#v", this.Version)+",\n")
	s = append(s, "Icon: "+fmt.Sprintf("%#v", this.Icon)+",\n")
	s = append(s, "Link: "+fmt.Sprintf("%#v", this.Link)+",\n")
	if this.JsonContent != nil {
		s = append(s, "JsonContent: "+fmt.Sprintf("%#v", this.JsonContent)+",\n")
	}
	s = append(s, "CreatedAtTs: "+fmt.Sprintf("%#v", this.CreatedAtTs)+",\n")
	s = append(s, "ModifiedAtTs: "+fmt.Sprintf("%#v", this.ModifiedAtTs)+",\n")
	s = append(s, "IsEnabled: "+fmt.Sprintf("%#v", this.IsEnabled)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UpdateMiniApp) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&dialog.UpdateMiniApp{")
	s = append(s, "AppLifecycle: "+fmt.Sprintf("%#v", this.AppLifecycle)+",\n")
	if this.AppData != nil {
		s = append(s, "AppData: "+fmt.Sprintf("%#v", this.AppData)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetAppsRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&dialog.GetAppsRequest{")
	s = append(s, "FromClock: "+fmt.Sprintf("%#v", this.FromClock)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetAppsResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&dialog.GetAppsResponse{")
	if this.Apps != nil {
		s = append(s, "Apps: "+fmt.Sprintf("%#v", this.Apps)+",\n")
	}
	s = append(s, "Clock: "+fmt.Sprintf("%#v", this.Clock)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *FindAppRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&dialog.FindAppRequest{")
	s = append(s, "AppId: "+fmt.Sprintf("%#v", this.AppId)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *FindAppResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&dialog.FindAppResponse{")
	if this.App != nil {
		s = append(s, "App: "+fmt.Sprintf("%#v", this.App)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *IssueAccessTokenRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&dialog.IssueAccessTokenRequest{")
	if this.AppId != nil {
		s = append(s, "AppId: "+fmt.Sprintf("%#v", this.AppId)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *AccessTokenResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&dialog.AccessTokenResponse{")
	s = append(s, "AccessToken: "+fmt.Sprintf("%#v", this.AccessToken)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringMiniappsregistry(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ClientsMiniAppsRegistryClient is the client API for ClientsMiniAppsRegistry service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ClientsMiniAppsRegistryClient interface {
	FindApp(ctx context.Context, in *FindAppRequest, opts ...grpc.CallOption) (*FindAppResponse, error)
	GetApps(ctx context.Context, in *GetAppsRequest, opts ...grpc.CallOption) (*GetAppsResponse, error)
	IssueAccessToken(ctx context.Context, in *IssueAccessTokenRequest, opts ...grpc.CallOption) (*AccessTokenResponse, error)
}

type clientsMiniAppsRegistryClient struct {
	cc *grpc.ClientConn
}

func NewClientsMiniAppsRegistryClient(cc *grpc.ClientConn) ClientsMiniAppsRegistryClient {
	return &clientsMiniAppsRegistryClient{cc}
}

func (c *clientsMiniAppsRegistryClient) FindApp(ctx context.Context, in *FindAppRequest, opts ...grpc.CallOption) (*FindAppResponse, error) {
	out := new(FindAppResponse)
	err := c.cc.Invoke(ctx, "/dialog.ClientsMiniAppsRegistry/FindApp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientsMiniAppsRegistryClient) GetApps(ctx context.Context, in *GetAppsRequest, opts ...grpc.CallOption) (*GetAppsResponse, error) {
	out := new(GetAppsResponse)
	err := c.cc.Invoke(ctx, "/dialog.ClientsMiniAppsRegistry/GetApps", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientsMiniAppsRegistryClient) IssueAccessToken(ctx context.Context, in *IssueAccessTokenRequest, opts ...grpc.CallOption) (*AccessTokenResponse, error) {
	out := new(AccessTokenResponse)
	err := c.cc.Invoke(ctx, "/dialog.ClientsMiniAppsRegistry/IssueAccessToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ClientsMiniAppsRegistryServer is the server API for ClientsMiniAppsRegistry service.
type ClientsMiniAppsRegistryServer interface {
	FindApp(context.Context, *FindAppRequest) (*FindAppResponse, error)
	GetApps(context.Context, *GetAppsRequest) (*GetAppsResponse, error)
	IssueAccessToken(context.Context, *IssueAccessTokenRequest) (*AccessTokenResponse, error)
}

// UnimplementedClientsMiniAppsRegistryServer can be embedded to have forward compatible implementations.
type UnimplementedClientsMiniAppsRegistryServer struct {
}

func (*UnimplementedClientsMiniAppsRegistryServer) FindApp(ctx context.Context, req *FindAppRequest) (*FindAppResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindApp not implemented")
}
func (*UnimplementedClientsMiniAppsRegistryServer) GetApps(ctx context.Context, req *GetAppsRequest) (*GetAppsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetApps not implemented")
}
func (*UnimplementedClientsMiniAppsRegistryServer) IssueAccessToken(ctx context.Context, req *IssueAccessTokenRequest) (*AccessTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IssueAccessToken not implemented")
}

func RegisterClientsMiniAppsRegistryServer(s *grpc.Server, srv ClientsMiniAppsRegistryServer) {
	s.RegisterService(&_ClientsMiniAppsRegistry_serviceDesc, srv)
}

func _ClientsMiniAppsRegistry_FindApp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindAppRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientsMiniAppsRegistryServer).FindApp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dialog.ClientsMiniAppsRegistry/FindApp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientsMiniAppsRegistryServer).FindApp(ctx, req.(*FindAppRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientsMiniAppsRegistry_GetApps_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAppsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientsMiniAppsRegistryServer).GetApps(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dialog.ClientsMiniAppsRegistry/GetApps",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientsMiniAppsRegistryServer).GetApps(ctx, req.(*GetAppsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientsMiniAppsRegistry_IssueAccessToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IssueAccessTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientsMiniAppsRegistryServer).IssueAccessToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dialog.ClientsMiniAppsRegistry/IssueAccessToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientsMiniAppsRegistryServer).IssueAccessToken(ctx, req.(*IssueAccessTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ClientsMiniAppsRegistry_serviceDesc = grpc.ServiceDesc{
	ServiceName: "dialog.ClientsMiniAppsRegistry",
	HandlerType: (*ClientsMiniAppsRegistryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FindApp",
			Handler:    _ClientsMiniAppsRegistry_FindApp_Handler,
		},
		{
			MethodName: "GetApps",
			Handler:    _ClientsMiniAppsRegistry_GetApps_Handler,
		},
		{
			MethodName: "IssueAccessToken",
			Handler:    _ClientsMiniAppsRegistry_IssueAccessToken_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "miniappsregistry.proto",
}

func (m *MiniApp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MiniApp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MiniApp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.IsEnabled {
		i--
		if m.IsEnabled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x58
	}
	if m.ModifiedAtTs != 0 {
		i = encodeVarintMiniappsregistry(dAtA, i, uint64(m.ModifiedAtTs))
		i--
		dAtA[i] = 0x50
	}
	if m.CreatedAtTs != 0 {
		i = encodeVarintMiniappsregistry(dAtA, i, uint64(m.CreatedAtTs))
		i--
		dAtA[i] = 0x48
	}
	if m.JsonContent != nil {
		{
			size, err := m.JsonContent.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMiniappsregistry(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	if len(m.Link) > 0 {
		i -= len(m.Link)
		copy(dAtA[i:], m.Link)
		i = encodeVarintMiniappsregistry(dAtA, i, uint64(len(m.Link)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Icon) > 0 {
		i -= len(m.Icon)
		copy(dAtA[i:], m.Icon)
		i = encodeVarintMiniappsregistry(dAtA, i, uint64(len(m.Icon)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Version) > 0 {
		i -= len(m.Version)
		copy(dAtA[i:], m.Version)
		i = encodeVarintMiniappsregistry(dAtA, i, uint64(len(m.Version)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintMiniappsregistry(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintMiniappsregistry(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x1a
	}
	if m.AppType != 0 {
		i = encodeVarintMiniappsregistry(dAtA, i, uint64(m.AppType))
		i--
		dAtA[i] = 0x10
	}
	if m.Id != nil {
		{
			size, err := m.Id.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMiniappsregistry(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UpdateMiniApp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateMiniApp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateMiniApp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AppData != nil {
		{
			size, err := m.AppData.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMiniappsregistry(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.AppLifecycle != 0 {
		i = encodeVarintMiniappsregistry(dAtA, i, uint64(m.AppLifecycle))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetAppsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetAppsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetAppsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.FromClock != 0 {
		i = encodeVarintMiniappsregistry(dAtA, i, uint64(m.FromClock))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetAppsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetAppsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetAppsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Clock != 0 {
		i = encodeVarintMiniappsregistry(dAtA, i, uint64(m.Clock))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Apps) > 0 {
		for iNdEx := len(m.Apps) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Apps[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMiniappsregistry(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *FindAppRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FindAppRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FindAppRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.AppId) > 0 {
		i -= len(m.AppId)
		copy(dAtA[i:], m.AppId)
		i = encodeVarintMiniappsregistry(dAtA, i, uint64(len(m.AppId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *FindAppResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FindAppResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FindAppResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.App != nil {
		{
			size, err := m.App.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMiniappsregistry(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *IssueAccessTokenRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IssueAccessTokenRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IssueAccessTokenRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AppId != nil {
		{
			size, err := m.AppId.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMiniappsregistry(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AccessTokenResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AccessTokenResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AccessTokenResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.AccessToken) > 0 {
		i -= len(m.AccessToken)
		copy(dAtA[i:], m.AccessToken)
		i = encodeVarintMiniappsregistry(dAtA, i, uint64(len(m.AccessToken)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintMiniappsregistry(dAtA []byte, offset int, v uint64) int {
	offset -= sovMiniappsregistry(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MiniApp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		l = m.Id.Size()
		n += 1 + l + sovMiniappsregistry(uint64(l))
	}
	if m.AppType != 0 {
		n += 1 + sovMiniappsregistry(uint64(m.AppType))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovMiniappsregistry(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovMiniappsregistry(uint64(l))
	}
	l = len(m.Version)
	if l > 0 {
		n += 1 + l + sovMiniappsregistry(uint64(l))
	}
	l = len(m.Icon)
	if l > 0 {
		n += 1 + l + sovMiniappsregistry(uint64(l))
	}
	l = len(m.Link)
	if l > 0 {
		n += 1 + l + sovMiniappsregistry(uint64(l))
	}
	if m.JsonContent != nil {
		l = m.JsonContent.Size()
		n += 1 + l + sovMiniappsregistry(uint64(l))
	}
	if m.CreatedAtTs != 0 {
		n += 1 + sovMiniappsregistry(uint64(m.CreatedAtTs))
	}
	if m.ModifiedAtTs != 0 {
		n += 1 + sovMiniappsregistry(uint64(m.ModifiedAtTs))
	}
	if m.IsEnabled {
		n += 2
	}
	return n
}

func (m *UpdateMiniApp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AppLifecycle != 0 {
		n += 1 + sovMiniappsregistry(uint64(m.AppLifecycle))
	}
	if m.AppData != nil {
		l = m.AppData.Size()
		n += 1 + l + sovMiniappsregistry(uint64(l))
	}
	return n
}

func (m *GetAppsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.FromClock != 0 {
		n += 1 + sovMiniappsregistry(uint64(m.FromClock))
	}
	return n
}

func (m *GetAppsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Apps) > 0 {
		for _, e := range m.Apps {
			l = e.Size()
			n += 1 + l + sovMiniappsregistry(uint64(l))
		}
	}
	if m.Clock != 0 {
		n += 1 + sovMiniappsregistry(uint64(m.Clock))
	}
	return n
}

func (m *FindAppRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.AppId)
	if l > 0 {
		n += 1 + l + sovMiniappsregistry(uint64(l))
	}
	return n
}

func (m *FindAppResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.App != nil {
		l = m.App.Size()
		n += 1 + l + sovMiniappsregistry(uint64(l))
	}
	return n
}

func (m *IssueAccessTokenRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AppId != nil {
		l = m.AppId.Size()
		n += 1 + l + sovMiniappsregistry(uint64(l))
	}
	return n
}

func (m *AccessTokenResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.AccessToken)
	if l > 0 {
		n += 1 + l + sovMiniappsregistry(uint64(l))
	}
	return n
}

func sovMiniappsregistry(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozMiniappsregistry(x uint64) (n int) {
	return sovMiniappsregistry(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *MiniApp) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&MiniApp{`,
		`Id:` + strings.Replace(fmt.Sprintf("%v", this.Id), "UUIDValue", "UUIDValue", 1) + `,`,
		`AppType:` + fmt.Sprintf("%v", this.AppType) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Description:` + fmt.Sprintf("%v", this.Description) + `,`,
		`Version:` + fmt.Sprintf("%v", this.Version) + `,`,
		`Icon:` + fmt.Sprintf("%v", this.Icon) + `,`,
		`Link:` + fmt.Sprintf("%v", this.Link) + `,`,
		`JsonContent:` + strings.Replace(fmt.Sprintf("%v", this.JsonContent), "StringValue", "types.StringValue", 1) + `,`,
		`CreatedAtTs:` + fmt.Sprintf("%v", this.CreatedAtTs) + `,`,
		`ModifiedAtTs:` + fmt.Sprintf("%v", this.ModifiedAtTs) + `,`,
		`IsEnabled:` + fmt.Sprintf("%v", this.IsEnabled) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateMiniApp) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateMiniApp{`,
		`AppLifecycle:` + fmt.Sprintf("%v", this.AppLifecycle) + `,`,
		`AppData:` + strings.Replace(this.AppData.String(), "MiniApp", "MiniApp", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetAppsRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetAppsRequest{`,
		`FromClock:` + fmt.Sprintf("%v", this.FromClock) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetAppsResponse) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForApps := "[]*MiniApp{"
	for _, f := range this.Apps {
		repeatedStringForApps += strings.Replace(f.String(), "MiniApp", "MiniApp", 1) + ","
	}
	repeatedStringForApps += "}"
	s := strings.Join([]string{`&GetAppsResponse{`,
		`Apps:` + repeatedStringForApps + `,`,
		`Clock:` + fmt.Sprintf("%v", this.Clock) + `,`,
		`}`,
	}, "")
	return s
}
func (this *FindAppRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&FindAppRequest{`,
		`AppId:` + fmt.Sprintf("%v", this.AppId) + `,`,
		`}`,
	}, "")
	return s
}
func (this *FindAppResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&FindAppResponse{`,
		`App:` + strings.Replace(this.App.String(), "MiniApp", "MiniApp", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *IssueAccessTokenRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&IssueAccessTokenRequest{`,
		`AppId:` + strings.Replace(fmt.Sprintf("%v", this.AppId), "UUIDValue", "UUIDValue", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AccessTokenResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AccessTokenResponse{`,
		`AccessToken:` + fmt.Sprintf("%v", this.AccessToken) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringMiniappsregistry(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *MiniApp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMiniappsregistry
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MiniApp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MiniApp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMiniappsregistry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMiniappsregistry
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMiniappsregistry
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Id == nil {
				m.Id = &UUIDValue{}
			}
			if err := m.Id.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppType", wireType)
			}
			m.AppType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMiniappsregistry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AppType |= AppType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMiniappsregistry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMiniappsregistry
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMiniappsregistry
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMiniappsregistry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMiniappsregistry
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMiniappsregistry
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMiniappsregistry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMiniappsregistry
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMiniappsregistry
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Version = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Icon", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMiniappsregistry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMiniappsregistry
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMiniappsregistry
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Icon = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Link", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMiniappsregistry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMiniappsregistry
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMiniappsregistry
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Link = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JsonContent", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMiniappsregistry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMiniappsregistry
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMiniappsregistry
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.JsonContent == nil {
				m.JsonContent = &types.StringValue{}
			}
			if err := m.JsonContent.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAtTs", wireType)
			}
			m.CreatedAtTs = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMiniappsregistry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreatedAtTs |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ModifiedAtTs", wireType)
			}
			m.ModifiedAtTs = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMiniappsregistry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ModifiedAtTs |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsEnabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMiniappsregistry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsEnabled = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipMiniappsregistry(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMiniappsregistry
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMiniappsregistry
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateMiniApp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMiniappsregistry
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateMiniApp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateMiniApp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppLifecycle", wireType)
			}
			m.AppLifecycle = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMiniappsregistry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AppLifecycle |= UpdateMiniApp_AppLifecycle(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppData", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMiniappsregistry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMiniappsregistry
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMiniappsregistry
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AppData == nil {
				m.AppData = &MiniApp{}
			}
			if err := m.AppData.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMiniappsregistry(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMiniappsregistry
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMiniappsregistry
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetAppsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMiniappsregistry
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetAppsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetAppsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromClock", wireType)
			}
			m.FromClock = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMiniappsregistry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FromClock |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMiniappsregistry(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMiniappsregistry
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMiniappsregistry
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetAppsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMiniappsregistry
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetAppsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetAppsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Apps", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMiniappsregistry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMiniappsregistry
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMiniappsregistry
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Apps = append(m.Apps, &MiniApp{})
			if err := m.Apps[len(m.Apps)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Clock", wireType)
			}
			m.Clock = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMiniappsregistry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Clock |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMiniappsregistry(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMiniappsregistry
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMiniappsregistry
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FindAppRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMiniappsregistry
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FindAppRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FindAppRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMiniappsregistry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMiniappsregistry
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMiniappsregistry
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AppId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMiniappsregistry(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMiniappsregistry
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMiniappsregistry
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FindAppResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMiniappsregistry
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FindAppResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FindAppResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field App", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMiniappsregistry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMiniappsregistry
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMiniappsregistry
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.App == nil {
				m.App = &MiniApp{}
			}
			if err := m.App.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMiniappsregistry(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMiniappsregistry
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMiniappsregistry
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IssueAccessTokenRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMiniappsregistry
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IssueAccessTokenRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IssueAccessTokenRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMiniappsregistry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMiniappsregistry
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMiniappsregistry
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AppId == nil {
				m.AppId = &UUIDValue{}
			}
			if err := m.AppId.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMiniappsregistry(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMiniappsregistry
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMiniappsregistry
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AccessTokenResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMiniappsregistry
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AccessTokenResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AccessTokenResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccessToken", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMiniappsregistry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMiniappsregistry
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMiniappsregistry
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AccessToken = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMiniappsregistry(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMiniappsregistry
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMiniappsregistry
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMiniappsregistry(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMiniappsregistry
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMiniappsregistry
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMiniappsregistry
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthMiniappsregistry
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupMiniappsregistry
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthMiniappsregistry
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthMiniappsregistry        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMiniappsregistry          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupMiniappsregistry = fmt.Errorf("proto: unexpected end of group")
)
