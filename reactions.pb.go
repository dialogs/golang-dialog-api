// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: reactions.proto

package dialog

import (
	context "context"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	types "github.com/gogo/protobuf/types"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Reaction struct {
	Code        string  `protobuf:"bytes,1,opt,name=code,proto3" json:"code,omitempty"`
	Users       []int32 `protobuf:"varint,2,rep,packed,name=users,proto3" json:"users,omitempty"`
	UsersAmount int32   `protobuf:"varint,3,opt,name=users_amount,json=usersAmount,proto3" json:"users_amount,omitempty"`
}

func (m *Reaction) Reset()      { *m = Reaction{} }
func (*Reaction) ProtoMessage() {}
func (*Reaction) Descriptor() ([]byte, []int) {
	return fileDescriptor_099b686174f3ebae, []int{0}
}
func (m *Reaction) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Reaction) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Reaction.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Reaction) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Reaction.Merge(m, src)
}
func (m *Reaction) XXX_Size() int {
	return m.Size()
}
func (m *Reaction) XXX_DiscardUnknown() {
	xxx_messageInfo_Reaction.DiscardUnknown(m)
}

var xxx_messageInfo_Reaction proto.InternalMessageInfo

func (m *Reaction) GetCode() string {
	if m != nil {
		return m.Code
	}
	return ""
}

func (m *Reaction) GetUsers() []int32 {
	if m != nil {
		return m.Users
	}
	return nil
}

func (m *Reaction) GetUsersAmount() int32 {
	if m != nil {
		return m.UsersAmount
	}
	return 0
}

type MessageReactions struct {
	Mid       *UUIDValue  `protobuf:"bytes,1,opt,name=mid,proto3" json:"mid,omitempty"`
	Reactions []*Reaction `protobuf:"bytes,2,rep,name=reactions,proto3" json:"reactions,omitempty"`
}

func (m *MessageReactions) Reset()      { *m = MessageReactions{} }
func (*MessageReactions) ProtoMessage() {}
func (*MessageReactions) Descriptor() ([]byte, []int) {
	return fileDescriptor_099b686174f3ebae, []int{1}
}
func (m *MessageReactions) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MessageReactions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MessageReactions.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MessageReactions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MessageReactions.Merge(m, src)
}
func (m *MessageReactions) XXX_Size() int {
	return m.Size()
}
func (m *MessageReactions) XXX_DiscardUnknown() {
	xxx_messageInfo_MessageReactions.DiscardUnknown(m)
}

var xxx_messageInfo_MessageReactions proto.InternalMessageInfo

func (m *MessageReactions) GetMid() *UUIDValue {
	if m != nil {
		return m.Mid
	}
	return nil
}

func (m *MessageReactions) GetReactions() []*Reaction {
	if m != nil {
		return m.Reactions
	}
	return nil
}

type MessageReactionsUpdate struct {
	Peer            *Peer             `protobuf:"bytes,1,opt,name=peer,proto3" json:"peer,omitempty"`
	MessageReaction *MessageReactions `protobuf:"bytes,2,opt,name=messageReaction,proto3" json:"messageReaction,omitempty"`
	PeerClock       int64             `protobuf:"varint,3,opt,name=peer_clock,json=peerClock,proto3" json:"peer_clock,omitempty"`
	PrevPeerClock   int64             `protobuf:"varint,4,opt,name=prev_peer_clock,json=prevPeerClock,proto3" json:"prev_peer_clock,omitempty"`
}

func (m *MessageReactionsUpdate) Reset()      { *m = MessageReactionsUpdate{} }
func (*MessageReactionsUpdate) ProtoMessage() {}
func (*MessageReactionsUpdate) Descriptor() ([]byte, []int) {
	return fileDescriptor_099b686174f3ebae, []int{2}
}
func (m *MessageReactionsUpdate) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MessageReactionsUpdate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MessageReactionsUpdate.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MessageReactionsUpdate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MessageReactionsUpdate.Merge(m, src)
}
func (m *MessageReactionsUpdate) XXX_Size() int {
	return m.Size()
}
func (m *MessageReactionsUpdate) XXX_DiscardUnknown() {
	xxx_messageInfo_MessageReactionsUpdate.DiscardUnknown(m)
}

var xxx_messageInfo_MessageReactionsUpdate proto.InternalMessageInfo

func (m *MessageReactionsUpdate) GetPeer() *Peer {
	if m != nil {
		return m.Peer
	}
	return nil
}

func (m *MessageReactionsUpdate) GetMessageReaction() *MessageReactions {
	if m != nil {
		return m.MessageReaction
	}
	return nil
}

func (m *MessageReactionsUpdate) GetPeerClock() int64 {
	if m != nil {
		return m.PeerClock
	}
	return 0
}

func (m *MessageReactionsUpdate) GetPrevPeerClock() int64 {
	if m != nil {
		return m.PrevPeerClock
	}
	return 0
}

type GetReactionsRequest struct {
	FromClock int64 `protobuf:"varint,1,opt,name=from_clock,json=fromClock,proto3" json:"from_clock,omitempty"`
	Peer      *Peer `protobuf:"bytes,2,opt,name=peer,proto3" json:"peer,omitempty"`
}

func (m *GetReactionsRequest) Reset()      { *m = GetReactionsRequest{} }
func (*GetReactionsRequest) ProtoMessage() {}
func (*GetReactionsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_099b686174f3ebae, []int{3}
}
func (m *GetReactionsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetReactionsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetReactionsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetReactionsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetReactionsRequest.Merge(m, src)
}
func (m *GetReactionsRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetReactionsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetReactionsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetReactionsRequest proto.InternalMessageInfo

func (m *GetReactionsRequest) GetFromClock() int64 {
	if m != nil {
		return m.FromClock
	}
	return 0
}

func (m *GetReactionsRequest) GetPeer() *Peer {
	if m != nil {
		return m.Peer
	}
	return nil
}

type GetReactionsResponse struct {
	MessageReactions []*MessageReactions `protobuf:"bytes,1,rep,name=messageReactions,proto3" json:"messageReactions,omitempty"`
	PeerClock        int64               `protobuf:"varint,2,opt,name=peer_clock,json=peerClock,proto3" json:"peer_clock,omitempty"`
	NextAvailable    bool                `protobuf:"varint,3,opt,name=next_available,json=nextAvailable,proto3" json:"next_available,omitempty"`
}

func (m *GetReactionsResponse) Reset()      { *m = GetReactionsResponse{} }
func (*GetReactionsResponse) ProtoMessage() {}
func (*GetReactionsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_099b686174f3ebae, []int{4}
}
func (m *GetReactionsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetReactionsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetReactionsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetReactionsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetReactionsResponse.Merge(m, src)
}
func (m *GetReactionsResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetReactionsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetReactionsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetReactionsResponse proto.InternalMessageInfo

func (m *GetReactionsResponse) GetMessageReactions() []*MessageReactions {
	if m != nil {
		return m.MessageReactions
	}
	return nil
}

func (m *GetReactionsResponse) GetPeerClock() int64 {
	if m != nil {
		return m.PeerClock
	}
	return 0
}

func (m *GetReactionsResponse) GetNextAvailable() bool {
	if m != nil {
		return m.NextAvailable
	}
	return false
}

type RequestSetMessageReaction struct {
	Peer *Peer      `protobuf:"bytes,1,opt,name=peer,proto3" json:"peer,omitempty"`
	Mid  *UUIDValue `protobuf:"bytes,2,opt,name=mid,proto3" json:"mid,omitempty"`
	Code string     `protobuf:"bytes,3,opt,name=code,proto3" json:"code,omitempty"`
}

func (m *RequestSetMessageReaction) Reset()      { *m = RequestSetMessageReaction{} }
func (*RequestSetMessageReaction) ProtoMessage() {}
func (*RequestSetMessageReaction) Descriptor() ([]byte, []int) {
	return fileDescriptor_099b686174f3ebae, []int{5}
}
func (m *RequestSetMessageReaction) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RequestSetMessageReaction) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RequestSetMessageReaction.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RequestSetMessageReaction) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RequestSetMessageReaction.Merge(m, src)
}
func (m *RequestSetMessageReaction) XXX_Size() int {
	return m.Size()
}
func (m *RequestSetMessageReaction) XXX_DiscardUnknown() {
	xxx_messageInfo_RequestSetMessageReaction.DiscardUnknown(m)
}

var xxx_messageInfo_RequestSetMessageReaction proto.InternalMessageInfo

func (m *RequestSetMessageReaction) GetPeer() *Peer {
	if m != nil {
		return m.Peer
	}
	return nil
}

func (m *RequestSetMessageReaction) GetMid() *UUIDValue {
	if m != nil {
		return m.Mid
	}
	return nil
}

func (m *RequestSetMessageReaction) GetCode() string {
	if m != nil {
		return m.Code
	}
	return ""
}

type RequestRemoveMessageReaction struct {
	Peer *Peer      `protobuf:"bytes,1,opt,name=peer,proto3" json:"peer,omitempty"`
	Mid  *UUIDValue `protobuf:"bytes,2,opt,name=mid,proto3" json:"mid,omitempty"`
	Code string     `protobuf:"bytes,3,opt,name=code,proto3" json:"code,omitempty"`
}

func (m *RequestRemoveMessageReaction) Reset()      { *m = RequestRemoveMessageReaction{} }
func (*RequestRemoveMessageReaction) ProtoMessage() {}
func (*RequestRemoveMessageReaction) Descriptor() ([]byte, []int) {
	return fileDescriptor_099b686174f3ebae, []int{6}
}
func (m *RequestRemoveMessageReaction) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RequestRemoveMessageReaction) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RequestRemoveMessageReaction.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RequestRemoveMessageReaction) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RequestRemoveMessageReaction.Merge(m, src)
}
func (m *RequestRemoveMessageReaction) XXX_Size() int {
	return m.Size()
}
func (m *RequestRemoveMessageReaction) XXX_DiscardUnknown() {
	xxx_messageInfo_RequestRemoveMessageReaction.DiscardUnknown(m)
}

var xxx_messageInfo_RequestRemoveMessageReaction proto.InternalMessageInfo

func (m *RequestRemoveMessageReaction) GetPeer() *Peer {
	if m != nil {
		return m.Peer
	}
	return nil
}

func (m *RequestRemoveMessageReaction) GetMid() *UUIDValue {
	if m != nil {
		return m.Mid
	}
	return nil
}

func (m *RequestRemoveMessageReaction) GetCode() string {
	if m != nil {
		return m.Code
	}
	return ""
}

func init() {
	proto.RegisterType((*Reaction)(nil), "dialog.reactions.Reaction")
	proto.RegisterType((*MessageReactions)(nil), "dialog.reactions.MessageReactions")
	proto.RegisterType((*MessageReactionsUpdate)(nil), "dialog.reactions.MessageReactionsUpdate")
	proto.RegisterType((*GetReactionsRequest)(nil), "dialog.reactions.GetReactionsRequest")
	proto.RegisterType((*GetReactionsResponse)(nil), "dialog.reactions.GetReactionsResponse")
	proto.RegisterType((*RequestSetMessageReaction)(nil), "dialog.reactions.RequestSetMessageReaction")
	proto.RegisterType((*RequestRemoveMessageReaction)(nil), "dialog.reactions.RequestRemoveMessageReaction")
}

func init() { proto.RegisterFile("reactions.proto", fileDescriptor_099b686174f3ebae) }

var fileDescriptor_099b686174f3ebae = []byte{
	// 674 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x54, 0xcf, 0x6e, 0xd3, 0x4e,
	0x10, 0xce, 0x26, 0x6d, 0xd5, 0x6c, 0xda, 0x5f, 0xdb, 0xfd, 0xb5, 0x55, 0x08, 0xc5, 0x84, 0x85,
	0x56, 0x51, 0x10, 0x36, 0xb4, 0x17, 0xd4, 0x5b, 0xf9, 0x23, 0x84, 0x04, 0xa8, 0x72, 0xd5, 0x22,
	0x71, 0x89, 0x36, 0xce, 0x34, 0xb2, 0xb0, 0xbd, 0xae, 0xd7, 0x89, 0xe8, 0x0d, 0x71, 0x43, 0x5c,
	0x90, 0xe0, 0x21, 0x38, 0xf0, 0x08, 0x3c, 0x00, 0x37, 0x2a, 0x71, 0xe9, 0x91, 0xba, 0x1c, 0x38,
	0xf6, 0x11, 0xd0, 0xae, 0xed, 0x24, 0x75, 0x12, 0xe8, 0x89, 0x53, 0xbc, 0xdf, 0xce, 0x7c, 0xdf,
	0xcc, 0x37, 0x93, 0xc5, 0x73, 0x01, 0x30, 0x2b, 0xb4, 0xb9, 0x27, 0x74, 0x3f, 0xe0, 0x21, 0x27,
	0xf3, 0x2d, 0x9b, 0x39, 0xbc, 0xad, 0xf7, 0xf0, 0xca, 0x4a, 0x9b, 0xf3, 0xb6, 0x03, 0x06, 0xf3,
	0x6d, 0x83, 0x79, 0x1e, 0x0f, 0xd9, 0x40, 0x7c, 0xa5, 0xe4, 0x03, 0x04, 0xe9, 0x61, 0xa1, 0x05,
	0xfb, 0xb6, 0x67, 0x0f, 0xde, 0x2f, 0x09, 0x8b, 0x39, 0xcc, 0x6f, 0x1a, 0xc9, 0x6f, 0x02, 0x5f,
	0x4e, 0x48, 0xd5, 0xa9, 0xd9, 0xd9, 0x37, 0xc0, 0xf5, 0xc3, 0xc3, 0xf8, 0x92, 0x3e, 0xc7, 0xd3,
	0x66, 0x22, 0x4f, 0x08, 0x9e, 0xb0, 0x78, 0x0b, 0xca, 0xa8, 0x8a, 0x6a, 0x45, 0x53, 0x7d, 0x93,
	0x45, 0x3c, 0xd9, 0x11, 0x10, 0x88, 0x72, 0xbe, 0x5a, 0xa8, 0x4d, 0x9a, 0xf1, 0x81, 0x5c, 0xc3,
	0x33, 0xea, 0xa3, 0xc1, 0x5c, 0xde, 0xf1, 0xc2, 0x72, 0xa1, 0x8a, 0x6a, 0x93, 0x66, 0x49, 0x61,
	0x5b, 0x0a, 0xa2, 0x07, 0x78, 0xfe, 0x29, 0x08, 0xc1, 0xda, 0x90, 0xf2, 0x0b, 0x72, 0x1d, 0x17,
	0x5c, 0xbb, 0xa5, 0xf8, 0x4b, 0xeb, 0x0b, 0x7a, 0xd2, 0xfe, 0xee, 0xee, 0xe3, 0x07, 0x7b, 0xcc,
	0xe9, 0x80, 0x29, 0x6f, 0xc9, 0x5d, 0x5c, 0xec, 0x19, 0xa2, 0x54, 0x4b, 0xeb, 0x15, 0x3d, 0xeb,
	0x94, 0x9e, 0x92, 0x9a, 0xfd, 0x60, 0xfa, 0x0d, 0xe1, 0xe5, 0xac, 0xe6, 0xae, 0xdf, 0x62, 0x21,
	0x90, 0x2a, 0x9e, 0x90, 0xe6, 0x25, 0xd2, 0x33, 0x29, 0xdf, 0x36, 0x40, 0x60, 0xaa, 0x1b, 0xf2,
	0x04, 0xcf, 0xb9, 0xe7, 0x73, 0xcb, 0x79, 0x15, 0x4c, 0x87, 0xc5, 0xb3, 0x22, 0x66, 0x36, 0x95,
	0x5c, 0xc1, 0x58, 0xb2, 0x36, 0x2c, 0x87, 0x5b, 0x2f, 0x95, 0x3d, 0x05, 0xb3, 0x28, 0x91, 0xfb,
	0x12, 0x20, 0x6b, 0x78, 0xce, 0x0f, 0xa0, 0xdb, 0x18, 0x88, 0x99, 0x50, 0x31, 0xb3, 0x12, 0xde,
	0x4e, 0xe3, 0xe8, 0x1e, 0xfe, 0xff, 0x11, 0x84, 0x7d, 0x1d, 0x38, 0xe8, 0x80, 0x08, 0x25, 0xfb,
	0x7e, 0xc0, 0xdd, 0x24, 0x13, 0xc5, 0xec, 0x12, 0x89, 0xd9, 0xd3, 0x66, 0xf3, 0xe3, 0x9a, 0xa5,
	0x9f, 0x11, 0x5e, 0x3c, 0x4f, 0x2c, 0x7c, 0xee, 0x09, 0x20, 0xcf, 0xf0, 0x7c, 0xa6, 0x15, 0x51,
	0x46, 0x6a, 0x06, 0x17, 0xb1, 0x61, 0x28, 0x37, 0xe3, 0x43, 0x3e, 0xeb, 0xc3, 0x2a, 0xfe, 0xcf,
	0x83, 0x57, 0x61, 0x83, 0x75, 0x99, 0xed, 0xb0, 0xa6, 0x03, 0xca, 0xaa, 0x69, 0x73, 0x56, 0xa2,
	0x5b, 0x29, 0x48, 0xbb, 0xf8, 0x52, 0xd2, 0xfa, 0x0e, 0x84, 0x19, 0xd5, 0x0b, 0x8c, 0x36, 0x59,
	0xbb, 0xfc, 0x1f, 0xd7, 0x2e, 0x5d, 0xfe, 0x42, 0x7f, 0xf9, 0xe9, 0x21, 0x5e, 0x49, 0x74, 0x4d,
	0x70, 0x79, 0x17, 0xfe, 0x9d, 0xf4, 0xfa, 0x97, 0x02, 0x2e, 0xf6, 0x6d, 0x7c, 0x8b, 0xf0, 0xcc,
	0xe0, 0xbc, 0xc8, 0xea, 0xf0, 0x34, 0x46, 0x2c, 0x4a, 0x65, 0xed, 0x6f, 0x61, 0xf1, 0xd8, 0x69,
	0xfd, 0xcd, 0xf7, 0x9f, 0x1f, 0xf2, 0x37, 0xe8, 0x55, 0xa3, 0x7b, 0xc7, 0x68, 0x07, 0xbe, 0x65,
	0xf4, 0x62, 0x8c, 0xc1, 0x84, 0x4d, 0x54, 0x27, 0xef, 0x10, 0x26, 0x89, 0x11, 0x3b, 0xfd, 0x2b,
	0x72, 0x73, 0xd4, 0x7f, 0x74, 0xcc, 0xcc, 0x2a, 0xcb, 0x7a, 0xfc, 0x26, 0xe9, 0xe9, 0x9b, 0xa4,
	0x3f, 0x94, 0x6f, 0x12, 0xbd, 0xad, 0xea, 0xa8, 0xd3, 0xd5, 0x11, 0x75, 0x0c, 0x6b, 0xca, 0x6a,
	0x3e, 0x22, 0xbc, 0xd4, 0x63, 0x97, 0x33, 0xea, 0x15, 0xa4, 0x8f, 0x2d, 0x68, 0xe4, 0x30, 0xc7,
	0xd6, 0xb4, 0xa1, 0x6a, 0xba, 0x45, 0x6b, 0xe3, 0x6b, 0x3a, 0xaf, 0xbc, 0x89, 0xea, 0xf7, 0xcc,
	0xa3, 0x13, 0x2d, 0x77, 0x7c, 0xa2, 0xe5, 0xce, 0x4e, 0x34, 0xf4, 0x3a, 0xd2, 0xd0, 0xa7, 0x48,
	0x43, 0x5f, 0x23, 0x0d, 0x1d, 0x45, 0x1a, 0xfa, 0x11, 0x69, 0xe8, 0x57, 0xa4, 0xe5, 0xce, 0x22,
	0x0d, 0xbd, 0x3f, 0xd5, 0x72, 0x47, 0xa7, 0x5a, 0xee, 0xf8, 0x54, 0xcb, 0xe1, 0x45, 0xdb, 0xd5,
	0x5b, 0x4e, 0x5b, 0x97, 0x2a, 0xba, 0x80, 0xa0, 0x6b, 0x5b, 0x20, 0x5e, 0x4c, 0xc5, 0x7d, 0x34,
	0xa7, 0x54, 0x61, 0x1b, 0xbf, 0x03, 0x00, 0x00, 0xff, 0xff, 0x66, 0x3b, 0xc5, 0x80, 0x48, 0x06,
	0x00, 0x00,
}

func (this *Reaction) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Reaction)
	if !ok {
		that2, ok := that.(Reaction)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Code != that1.Code {
		return false
	}
	if len(this.Users) != len(that1.Users) {
		return false
	}
	for i := range this.Users {
		if this.Users[i] != that1.Users[i] {
			return false
		}
	}
	if this.UsersAmount != that1.UsersAmount {
		return false
	}
	return true
}
func (this *MessageReactions) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MessageReactions)
	if !ok {
		that2, ok := that.(MessageReactions)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Mid.Equal(that1.Mid) {
		return false
	}
	if len(this.Reactions) != len(that1.Reactions) {
		return false
	}
	for i := range this.Reactions {
		if !this.Reactions[i].Equal(that1.Reactions[i]) {
			return false
		}
	}
	return true
}
func (this *MessageReactionsUpdate) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MessageReactionsUpdate)
	if !ok {
		that2, ok := that.(MessageReactionsUpdate)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Peer.Equal(that1.Peer) {
		return false
	}
	if !this.MessageReaction.Equal(that1.MessageReaction) {
		return false
	}
	if this.PeerClock != that1.PeerClock {
		return false
	}
	if this.PrevPeerClock != that1.PrevPeerClock {
		return false
	}
	return true
}
func (this *GetReactionsRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetReactionsRequest)
	if !ok {
		that2, ok := that.(GetReactionsRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.FromClock != that1.FromClock {
		return false
	}
	if !this.Peer.Equal(that1.Peer) {
		return false
	}
	return true
}
func (this *GetReactionsResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetReactionsResponse)
	if !ok {
		that2, ok := that.(GetReactionsResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.MessageReactions) != len(that1.MessageReactions) {
		return false
	}
	for i := range this.MessageReactions {
		if !this.MessageReactions[i].Equal(that1.MessageReactions[i]) {
			return false
		}
	}
	if this.PeerClock != that1.PeerClock {
		return false
	}
	if this.NextAvailable != that1.NextAvailable {
		return false
	}
	return true
}
func (this *RequestSetMessageReaction) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RequestSetMessageReaction)
	if !ok {
		that2, ok := that.(RequestSetMessageReaction)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Peer.Equal(that1.Peer) {
		return false
	}
	if !this.Mid.Equal(that1.Mid) {
		return false
	}
	if this.Code != that1.Code {
		return false
	}
	return true
}
func (this *RequestRemoveMessageReaction) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RequestRemoveMessageReaction)
	if !ok {
		that2, ok := that.(RequestRemoveMessageReaction)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Peer.Equal(that1.Peer) {
		return false
	}
	if !this.Mid.Equal(that1.Mid) {
		return false
	}
	if this.Code != that1.Code {
		return false
	}
	return true
}
func (this *Reaction) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&dialog.Reaction{")
	s = append(s, "Code: "+fmt.Sprintf("%#v", this.Code)+",\n")
	s = append(s, "Users: "+fmt.Sprintf("%#v", this.Users)+",\n")
	s = append(s, "UsersAmount: "+fmt.Sprintf("%#v", this.UsersAmount)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *MessageReactions) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&dialog.MessageReactions{")
	if this.Mid != nil {
		s = append(s, "Mid: "+fmt.Sprintf("%#v", this.Mid)+",\n")
	}
	if this.Reactions != nil {
		s = append(s, "Reactions: "+fmt.Sprintf("%#v", this.Reactions)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *MessageReactionsUpdate) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&dialog.MessageReactionsUpdate{")
	if this.Peer != nil {
		s = append(s, "Peer: "+fmt.Sprintf("%#v", this.Peer)+",\n")
	}
	if this.MessageReaction != nil {
		s = append(s, "MessageReaction: "+fmt.Sprintf("%#v", this.MessageReaction)+",\n")
	}
	s = append(s, "PeerClock: "+fmt.Sprintf("%#v", this.PeerClock)+",\n")
	s = append(s, "PrevPeerClock: "+fmt.Sprintf("%#v", this.PrevPeerClock)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetReactionsRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&dialog.GetReactionsRequest{")
	s = append(s, "FromClock: "+fmt.Sprintf("%#v", this.FromClock)+",\n")
	if this.Peer != nil {
		s = append(s, "Peer: "+fmt.Sprintf("%#v", this.Peer)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetReactionsResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&dialog.GetReactionsResponse{")
	if this.MessageReactions != nil {
		s = append(s, "MessageReactions: "+fmt.Sprintf("%#v", this.MessageReactions)+",\n")
	}
	s = append(s, "PeerClock: "+fmt.Sprintf("%#v", this.PeerClock)+",\n")
	s = append(s, "NextAvailable: "+fmt.Sprintf("%#v", this.NextAvailable)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RequestSetMessageReaction) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&dialog.RequestSetMessageReaction{")
	if this.Peer != nil {
		s = append(s, "Peer: "+fmt.Sprintf("%#v", this.Peer)+",\n")
	}
	if this.Mid != nil {
		s = append(s, "Mid: "+fmt.Sprintf("%#v", this.Mid)+",\n")
	}
	s = append(s, "Code: "+fmt.Sprintf("%#v", this.Code)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RequestRemoveMessageReaction) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&dialog.RequestRemoveMessageReaction{")
	if this.Peer != nil {
		s = append(s, "Peer: "+fmt.Sprintf("%#v", this.Peer)+",\n")
	}
	if this.Mid != nil {
		s = append(s, "Mid: "+fmt.Sprintf("%#v", this.Mid)+",\n")
	}
	s = append(s, "Code: "+fmt.Sprintf("%#v", this.Code)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringReactions(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ReactionsClient is the client API for Reactions service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ReactionsClient interface {
	GetReactions(ctx context.Context, in *GetReactionsRequest, opts ...grpc.CallOption) (*GetReactionsResponse, error)
	MessageSetReaction(ctx context.Context, in *RequestSetMessageReaction, opts ...grpc.CallOption) (*types.Empty, error)
	MessageRemoveReaction(ctx context.Context, in *RequestRemoveMessageReaction, opts ...grpc.CallOption) (*types.Empty, error)
}

type reactionsClient struct {
	cc *grpc.ClientConn
}

func NewReactionsClient(cc *grpc.ClientConn) ReactionsClient {
	return &reactionsClient{cc}
}

func (c *reactionsClient) GetReactions(ctx context.Context, in *GetReactionsRequest, opts ...grpc.CallOption) (*GetReactionsResponse, error) {
	out := new(GetReactionsResponse)
	err := c.cc.Invoke(ctx, "/dialog.reactions.Reactions/GetReactions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reactionsClient) MessageSetReaction(ctx context.Context, in *RequestSetMessageReaction, opts ...grpc.CallOption) (*types.Empty, error) {
	out := new(types.Empty)
	err := c.cc.Invoke(ctx, "/dialog.reactions.Reactions/MessageSetReaction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reactionsClient) MessageRemoveReaction(ctx context.Context, in *RequestRemoveMessageReaction, opts ...grpc.CallOption) (*types.Empty, error) {
	out := new(types.Empty)
	err := c.cc.Invoke(ctx, "/dialog.reactions.Reactions/MessageRemoveReaction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ReactionsServer is the server API for Reactions service.
type ReactionsServer interface {
	GetReactions(context.Context, *GetReactionsRequest) (*GetReactionsResponse, error)
	MessageSetReaction(context.Context, *RequestSetMessageReaction) (*types.Empty, error)
	MessageRemoveReaction(context.Context, *RequestRemoveMessageReaction) (*types.Empty, error)
}

// UnimplementedReactionsServer can be embedded to have forward compatible implementations.
type UnimplementedReactionsServer struct {
}

func (*UnimplementedReactionsServer) GetReactions(ctx context.Context, req *GetReactionsRequest) (*GetReactionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetReactions not implemented")
}
func (*UnimplementedReactionsServer) MessageSetReaction(ctx context.Context, req *RequestSetMessageReaction) (*types.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessageSetReaction not implemented")
}
func (*UnimplementedReactionsServer) MessageRemoveReaction(ctx context.Context, req *RequestRemoveMessageReaction) (*types.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessageRemoveReaction not implemented")
}

func RegisterReactionsServer(s *grpc.Server, srv ReactionsServer) {
	s.RegisterService(&_Reactions_serviceDesc, srv)
}

func _Reactions_GetReactions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetReactionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReactionsServer).GetReactions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dialog.reactions.Reactions/GetReactions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReactionsServer).GetReactions(ctx, req.(*GetReactionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Reactions_MessageSetReaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestSetMessageReaction)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReactionsServer).MessageSetReaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dialog.reactions.Reactions/MessageSetReaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReactionsServer).MessageSetReaction(ctx, req.(*RequestSetMessageReaction))
	}
	return interceptor(ctx, in, info, handler)
}

func _Reactions_MessageRemoveReaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestRemoveMessageReaction)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReactionsServer).MessageRemoveReaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dialog.reactions.Reactions/MessageRemoveReaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReactionsServer).MessageRemoveReaction(ctx, req.(*RequestRemoveMessageReaction))
	}
	return interceptor(ctx, in, info, handler)
}

var _Reactions_serviceDesc = grpc.ServiceDesc{
	ServiceName: "dialog.reactions.Reactions",
	HandlerType: (*ReactionsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetReactions",
			Handler:    _Reactions_GetReactions_Handler,
		},
		{
			MethodName: "MessageSetReaction",
			Handler:    _Reactions_MessageSetReaction_Handler,
		},
		{
			MethodName: "MessageRemoveReaction",
			Handler:    _Reactions_MessageRemoveReaction_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "reactions.proto",
}

func (m *Reaction) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Reaction) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Reaction) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.UsersAmount != 0 {
		i = encodeVarintReactions(dAtA, i, uint64(m.UsersAmount))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Users) > 0 {
		dAtA2 := make([]byte, len(m.Users)*10)
		var j1 int
		for _, num1 := range m.Users {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		i -= j1
		copy(dAtA[i:], dAtA2[:j1])
		i = encodeVarintReactions(dAtA, i, uint64(j1))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Code) > 0 {
		i -= len(m.Code)
		copy(dAtA[i:], m.Code)
		i = encodeVarintReactions(dAtA, i, uint64(len(m.Code)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MessageReactions) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MessageReactions) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MessageReactions) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Reactions) > 0 {
		for iNdEx := len(m.Reactions) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Reactions[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintReactions(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Mid != nil {
		{
			size, err := m.Mid.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintReactions(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MessageReactionsUpdate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MessageReactionsUpdate) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MessageReactionsUpdate) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.PrevPeerClock != 0 {
		i = encodeVarintReactions(dAtA, i, uint64(m.PrevPeerClock))
		i--
		dAtA[i] = 0x20
	}
	if m.PeerClock != 0 {
		i = encodeVarintReactions(dAtA, i, uint64(m.PeerClock))
		i--
		dAtA[i] = 0x18
	}
	if m.MessageReaction != nil {
		{
			size, err := m.MessageReaction.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintReactions(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Peer != nil {
		{
			size, err := m.Peer.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintReactions(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetReactionsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetReactionsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetReactionsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Peer != nil {
		{
			size, err := m.Peer.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintReactions(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.FromClock != 0 {
		i = encodeVarintReactions(dAtA, i, uint64(m.FromClock))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetReactionsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetReactionsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetReactionsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.NextAvailable {
		i--
		if m.NextAvailable {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.PeerClock != 0 {
		i = encodeVarintReactions(dAtA, i, uint64(m.PeerClock))
		i--
		dAtA[i] = 0x10
	}
	if len(m.MessageReactions) > 0 {
		for iNdEx := len(m.MessageReactions) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.MessageReactions[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintReactions(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *RequestSetMessageReaction) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestSetMessageReaction) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RequestSetMessageReaction) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Code) > 0 {
		i -= len(m.Code)
		copy(dAtA[i:], m.Code)
		i = encodeVarintReactions(dAtA, i, uint64(len(m.Code)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Mid != nil {
		{
			size, err := m.Mid.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintReactions(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Peer != nil {
		{
			size, err := m.Peer.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintReactions(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RequestRemoveMessageReaction) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestRemoveMessageReaction) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RequestRemoveMessageReaction) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Code) > 0 {
		i -= len(m.Code)
		copy(dAtA[i:], m.Code)
		i = encodeVarintReactions(dAtA, i, uint64(len(m.Code)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Mid != nil {
		{
			size, err := m.Mid.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintReactions(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Peer != nil {
		{
			size, err := m.Peer.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintReactions(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintReactions(dAtA []byte, offset int, v uint64) int {
	offset -= sovReactions(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Reaction) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Code)
	if l > 0 {
		n += 1 + l + sovReactions(uint64(l))
	}
	if len(m.Users) > 0 {
		l = 0
		for _, e := range m.Users {
			l += sovReactions(uint64(e))
		}
		n += 1 + sovReactions(uint64(l)) + l
	}
	if m.UsersAmount != 0 {
		n += 1 + sovReactions(uint64(m.UsersAmount))
	}
	return n
}

func (m *MessageReactions) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Mid != nil {
		l = m.Mid.Size()
		n += 1 + l + sovReactions(uint64(l))
	}
	if len(m.Reactions) > 0 {
		for _, e := range m.Reactions {
			l = e.Size()
			n += 1 + l + sovReactions(uint64(l))
		}
	}
	return n
}

func (m *MessageReactionsUpdate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Peer != nil {
		l = m.Peer.Size()
		n += 1 + l + sovReactions(uint64(l))
	}
	if m.MessageReaction != nil {
		l = m.MessageReaction.Size()
		n += 1 + l + sovReactions(uint64(l))
	}
	if m.PeerClock != 0 {
		n += 1 + sovReactions(uint64(m.PeerClock))
	}
	if m.PrevPeerClock != 0 {
		n += 1 + sovReactions(uint64(m.PrevPeerClock))
	}
	return n
}

func (m *GetReactionsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.FromClock != 0 {
		n += 1 + sovReactions(uint64(m.FromClock))
	}
	if m.Peer != nil {
		l = m.Peer.Size()
		n += 1 + l + sovReactions(uint64(l))
	}
	return n
}

func (m *GetReactionsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.MessageReactions) > 0 {
		for _, e := range m.MessageReactions {
			l = e.Size()
			n += 1 + l + sovReactions(uint64(l))
		}
	}
	if m.PeerClock != 0 {
		n += 1 + sovReactions(uint64(m.PeerClock))
	}
	if m.NextAvailable {
		n += 2
	}
	return n
}

func (m *RequestSetMessageReaction) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Peer != nil {
		l = m.Peer.Size()
		n += 1 + l + sovReactions(uint64(l))
	}
	if m.Mid != nil {
		l = m.Mid.Size()
		n += 1 + l + sovReactions(uint64(l))
	}
	l = len(m.Code)
	if l > 0 {
		n += 1 + l + sovReactions(uint64(l))
	}
	return n
}

func (m *RequestRemoveMessageReaction) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Peer != nil {
		l = m.Peer.Size()
		n += 1 + l + sovReactions(uint64(l))
	}
	if m.Mid != nil {
		l = m.Mid.Size()
		n += 1 + l + sovReactions(uint64(l))
	}
	l = len(m.Code)
	if l > 0 {
		n += 1 + l + sovReactions(uint64(l))
	}
	return n
}

func sovReactions(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozReactions(x uint64) (n int) {
	return sovReactions(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *Reaction) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Reaction{`,
		`Code:` + fmt.Sprintf("%v", this.Code) + `,`,
		`Users:` + fmt.Sprintf("%v", this.Users) + `,`,
		`UsersAmount:` + fmt.Sprintf("%v", this.UsersAmount) + `,`,
		`}`,
	}, "")
	return s
}
func (this *MessageReactions) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForReactions := "[]*Reaction{"
	for _, f := range this.Reactions {
		repeatedStringForReactions += strings.Replace(f.String(), "Reaction", "Reaction", 1) + ","
	}
	repeatedStringForReactions += "}"
	s := strings.Join([]string{`&MessageReactions{`,
		`Mid:` + strings.Replace(fmt.Sprintf("%v", this.Mid), "UUIDValue", "UUIDValue", 1) + `,`,
		`Reactions:` + repeatedStringForReactions + `,`,
		`}`,
	}, "")
	return s
}
func (this *MessageReactionsUpdate) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&MessageReactionsUpdate{`,
		`Peer:` + strings.Replace(fmt.Sprintf("%v", this.Peer), "Peer", "Peer", 1) + `,`,
		`MessageReaction:` + strings.Replace(this.MessageReaction.String(), "MessageReactions", "MessageReactions", 1) + `,`,
		`PeerClock:` + fmt.Sprintf("%v", this.PeerClock) + `,`,
		`PrevPeerClock:` + fmt.Sprintf("%v", this.PrevPeerClock) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetReactionsRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetReactionsRequest{`,
		`FromClock:` + fmt.Sprintf("%v", this.FromClock) + `,`,
		`Peer:` + strings.Replace(fmt.Sprintf("%v", this.Peer), "Peer", "Peer", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetReactionsResponse) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForMessageReactions := "[]*MessageReactions{"
	for _, f := range this.MessageReactions {
		repeatedStringForMessageReactions += strings.Replace(f.String(), "MessageReactions", "MessageReactions", 1) + ","
	}
	repeatedStringForMessageReactions += "}"
	s := strings.Join([]string{`&GetReactionsResponse{`,
		`MessageReactions:` + repeatedStringForMessageReactions + `,`,
		`PeerClock:` + fmt.Sprintf("%v", this.PeerClock) + `,`,
		`NextAvailable:` + fmt.Sprintf("%v", this.NextAvailable) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RequestSetMessageReaction) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RequestSetMessageReaction{`,
		`Peer:` + strings.Replace(fmt.Sprintf("%v", this.Peer), "Peer", "Peer", 1) + `,`,
		`Mid:` + strings.Replace(fmt.Sprintf("%v", this.Mid), "UUIDValue", "UUIDValue", 1) + `,`,
		`Code:` + fmt.Sprintf("%v", this.Code) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RequestRemoveMessageReaction) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RequestRemoveMessageReaction{`,
		`Peer:` + strings.Replace(fmt.Sprintf("%v", this.Peer), "Peer", "Peer", 1) + `,`,
		`Mid:` + strings.Replace(fmt.Sprintf("%v", this.Mid), "UUIDValue", "UUIDValue", 1) + `,`,
		`Code:` + fmt.Sprintf("%v", this.Code) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringReactions(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *Reaction) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowReactions
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Reaction: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Reaction: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReactions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthReactions
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthReactions
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Code = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowReactions
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Users = append(m.Users, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowReactions
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthReactions
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthReactions
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Users) == 0 {
					m.Users = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowReactions
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Users = append(m.Users, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Users", wireType)
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UsersAmount", wireType)
			}
			m.UsersAmount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReactions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UsersAmount |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipReactions(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthReactions
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthReactions
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MessageReactions) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowReactions
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MessageReactions: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MessageReactions: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReactions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthReactions
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthReactions
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Mid == nil {
				m.Mid = &UUIDValue{}
			}
			if err := m.Mid.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reactions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReactions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthReactions
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthReactions
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reactions = append(m.Reactions, &Reaction{})
			if err := m.Reactions[len(m.Reactions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipReactions(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthReactions
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthReactions
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MessageReactionsUpdate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowReactions
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MessageReactionsUpdate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MessageReactionsUpdate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Peer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReactions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthReactions
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthReactions
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Peer == nil {
				m.Peer = &Peer{}
			}
			if err := m.Peer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MessageReaction", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReactions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthReactions
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthReactions
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MessageReaction == nil {
				m.MessageReaction = &MessageReactions{}
			}
			if err := m.MessageReaction.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PeerClock", wireType)
			}
			m.PeerClock = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReactions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PeerClock |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrevPeerClock", wireType)
			}
			m.PrevPeerClock = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReactions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PrevPeerClock |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipReactions(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthReactions
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthReactions
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetReactionsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowReactions
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetReactionsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetReactionsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromClock", wireType)
			}
			m.FromClock = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReactions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FromClock |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Peer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReactions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthReactions
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthReactions
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Peer == nil {
				m.Peer = &Peer{}
			}
			if err := m.Peer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipReactions(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthReactions
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthReactions
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetReactionsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowReactions
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetReactionsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetReactionsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MessageReactions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReactions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthReactions
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthReactions
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MessageReactions = append(m.MessageReactions, &MessageReactions{})
			if err := m.MessageReactions[len(m.MessageReactions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PeerClock", wireType)
			}
			m.PeerClock = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReactions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PeerClock |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NextAvailable", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReactions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.NextAvailable = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipReactions(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthReactions
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthReactions
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestSetMessageReaction) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowReactions
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestSetMessageReaction: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestSetMessageReaction: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Peer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReactions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthReactions
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthReactions
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Peer == nil {
				m.Peer = &Peer{}
			}
			if err := m.Peer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReactions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthReactions
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthReactions
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Mid == nil {
				m.Mid = &UUIDValue{}
			}
			if err := m.Mid.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReactions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthReactions
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthReactions
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Code = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipReactions(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthReactions
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthReactions
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestRemoveMessageReaction) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowReactions
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestRemoveMessageReaction: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestRemoveMessageReaction: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Peer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReactions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthReactions
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthReactions
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Peer == nil {
				m.Peer = &Peer{}
			}
			if err := m.Peer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReactions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthReactions
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthReactions
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Mid == nil {
				m.Mid = &UUIDValue{}
			}
			if err := m.Mid.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReactions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthReactions
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthReactions
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Code = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipReactions(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthReactions
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthReactions
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipReactions(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowReactions
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowReactions
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowReactions
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthReactions
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupReactions
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthReactions
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthReactions        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowReactions          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupReactions = fmt.Errorf("proto: unexpected end of group")
)
