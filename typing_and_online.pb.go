// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: typing_and_online.proto

package dialog

import (
	context "context"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	types "github.com/gogo/protobuf/types"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strconv "strconv"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type TypingType int32

const (
	TYPINGTYPE_UNKNOWN TypingType = 0
	TYPINGTYPE_TEXT    TypingType = 1
)

var TypingType_name = map[int32]string{
	0: "TYPINGTYPE_UNKNOWN",
	1: "TYPINGTYPE_TEXT",
}

var TypingType_value = map[string]int32{
	"TYPINGTYPE_UNKNOWN": 0,
	"TYPINGTYPE_TEXT":    1,
}

func (TypingType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_6213800e2cb70128, []int{0}
}

type DeviceType int32

const (
	DEVICETYPE_UNKNOWN DeviceType = 0
	DEVICETYPE_GENERIC DeviceType = 1
	DEVICETYPE_PC      DeviceType = 2
	DEVICETYPE_MOBILE  DeviceType = 3
	DEVICETYPE_TABLET  DeviceType = 4
	DEVICETYPE_WATCH   DeviceType = 5
	DEVICETYPE_MIRROR  DeviceType = 6
	DEVICETYPE_CAR     DeviceType = 7
	DEVICETYPE_TABLE   DeviceType = 8
)

var DeviceType_name = map[int32]string{
	0: "DEVICETYPE_UNKNOWN",
	1: "DEVICETYPE_GENERIC",
	2: "DEVICETYPE_PC",
	3: "DEVICETYPE_MOBILE",
	4: "DEVICETYPE_TABLET",
	5: "DEVICETYPE_WATCH",
	6: "DEVICETYPE_MIRROR",
	7: "DEVICETYPE_CAR",
	8: "DEVICETYPE_TABLE",
}

var DeviceType_value = map[string]int32{
	"DEVICETYPE_UNKNOWN": 0,
	"DEVICETYPE_GENERIC": 1,
	"DEVICETYPE_PC":      2,
	"DEVICETYPE_MOBILE":  3,
	"DEVICETYPE_TABLET":  4,
	"DEVICETYPE_WATCH":   5,
	"DEVICETYPE_MIRROR":  6,
	"DEVICETYPE_CAR":     7,
	"DEVICETYPE_TABLE":   8,
}

func (DeviceType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_6213800e2cb70128, []int{1}
}

// Sending typing notification
type RequestTyping struct {
	Peer       *OutPeer   `protobuf:"bytes,1,opt,name=peer,proto3" json:"peer,omitempty"`
	TypingType TypingType `protobuf:"varint,3,opt,name=typing_type,json=typingType,proto3,enum=dialog.TypingType" json:"typing_type,omitempty"`
}

func (m *RequestTyping) Reset()      { *m = RequestTyping{} }
func (*RequestTyping) ProtoMessage() {}
func (*RequestTyping) Descriptor() ([]byte, []int) {
	return fileDescriptor_6213800e2cb70128, []int{0}
}
func (m *RequestTyping) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RequestTyping) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RequestTyping.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RequestTyping) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RequestTyping.Merge(m, src)
}
func (m *RequestTyping) XXX_Size() int {
	return m.Size()
}
func (m *RequestTyping) XXX_DiscardUnknown() {
	xxx_messageInfo_RequestTyping.DiscardUnknown(m)
}

var xxx_messageInfo_RequestTyping proto.InternalMessageInfo

func (m *RequestTyping) GetPeer() *OutPeer {
	if m != nil {
		return m.Peer
	}
	return nil
}

func (m *RequestTyping) GetTypingType() TypingType {
	if m != nil {
		return m.TypingType
	}
	return TYPINGTYPE_UNKNOWN
}

// Stop typing
type RequestStopTyping struct {
	Peer       *OutPeer   `protobuf:"bytes,1,opt,name=peer,proto3" json:"peer,omitempty"`
	TypingType TypingType `protobuf:"varint,2,opt,name=typing_type,json=typingType,proto3,enum=dialog.TypingType" json:"typing_type,omitempty"`
}

func (m *RequestStopTyping) Reset()      { *m = RequestStopTyping{} }
func (*RequestStopTyping) ProtoMessage() {}
func (*RequestStopTyping) Descriptor() ([]byte, []int) {
	return fileDescriptor_6213800e2cb70128, []int{1}
}
func (m *RequestStopTyping) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RequestStopTyping) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RequestStopTyping.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RequestStopTyping) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RequestStopTyping.Merge(m, src)
}
func (m *RequestStopTyping) XXX_Size() int {
	return m.Size()
}
func (m *RequestStopTyping) XXX_DiscardUnknown() {
	xxx_messageInfo_RequestStopTyping.DiscardUnknown(m)
}

var xxx_messageInfo_RequestStopTyping proto.InternalMessageInfo

func (m *RequestStopTyping) GetPeer() *OutPeer {
	if m != nil {
		return m.Peer
	}
	return nil
}

func (m *RequestStopTyping) GetTypingType() TypingType {
	if m != nil {
		return m.TypingType
	}
	return TYPINGTYPE_UNKNOWN
}

// Sending online state
type RequestSetOnline struct {
	IsOnline       bool               `protobuf:"varint,1,opt,name=is_online,json=isOnline,proto3" json:"is_online,omitempty"`
	Timeout        int64              `protobuf:"varint,2,opt,name=timeout,proto3" json:"timeout,omitempty"`
	DeviceType     DeviceType         `protobuf:"varint,3,opt,name=device_type,json=deviceType,proto3,enum=dialog.DeviceType" json:"device_type,omitempty"`
	DeviceCategory *types.StringValue `protobuf:"bytes,4,opt,name=device_category,json=deviceCategory,proto3" json:"device_category,omitempty"`
}

func (m *RequestSetOnline) Reset()      { *m = RequestSetOnline{} }
func (*RequestSetOnline) ProtoMessage() {}
func (*RequestSetOnline) Descriptor() ([]byte, []int) {
	return fileDescriptor_6213800e2cb70128, []int{2}
}
func (m *RequestSetOnline) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RequestSetOnline) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RequestSetOnline.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RequestSetOnline) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RequestSetOnline.Merge(m, src)
}
func (m *RequestSetOnline) XXX_Size() int {
	return m.Size()
}
func (m *RequestSetOnline) XXX_DiscardUnknown() {
	xxx_messageInfo_RequestSetOnline.DiscardUnknown(m)
}

var xxx_messageInfo_RequestSetOnline proto.InternalMessageInfo

func (m *RequestSetOnline) GetIsOnline() bool {
	if m != nil {
		return m.IsOnline
	}
	return false
}

func (m *RequestSetOnline) GetTimeout() int64 {
	if m != nil {
		return m.Timeout
	}
	return 0
}

func (m *RequestSetOnline) GetDeviceType() DeviceType {
	if m != nil {
		return m.DeviceType
	}
	return DEVICETYPE_UNKNOWN
}

func (m *RequestSetOnline) GetDeviceCategory() *types.StringValue {
	if m != nil {
		return m.DeviceCategory
	}
	return nil
}

// Update about pausing notifications
type UpdatePauseNotifications struct {
	Timeout int32 `protobuf:"varint,1,opt,name=timeout,proto3" json:"timeout,omitempty"`
}

func (m *UpdatePauseNotifications) Reset()      { *m = UpdatePauseNotifications{} }
func (*UpdatePauseNotifications) ProtoMessage() {}
func (*UpdatePauseNotifications) Descriptor() ([]byte, []int) {
	return fileDescriptor_6213800e2cb70128, []int{3}
}
func (m *UpdatePauseNotifications) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdatePauseNotifications) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdatePauseNotifications.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdatePauseNotifications) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdatePauseNotifications.Merge(m, src)
}
func (m *UpdatePauseNotifications) XXX_Size() int {
	return m.Size()
}
func (m *UpdatePauseNotifications) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdatePauseNotifications.DiscardUnknown(m)
}

var xxx_messageInfo_UpdatePauseNotifications proto.InternalMessageInfo

func (m *UpdatePauseNotifications) GetTimeout() int32 {
	if m != nil {
		return m.Timeout
	}
	return 0
}

// Update about restoring notifications
type UpdateRestoreNotifications struct {
}

func (m *UpdateRestoreNotifications) Reset()      { *m = UpdateRestoreNotifications{} }
func (*UpdateRestoreNotifications) ProtoMessage() {}
func (*UpdateRestoreNotifications) Descriptor() ([]byte, []int) {
	return fileDescriptor_6213800e2cb70128, []int{4}
}
func (m *UpdateRestoreNotifications) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateRestoreNotifications) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateRestoreNotifications.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateRestoreNotifications) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateRestoreNotifications.Merge(m, src)
}
func (m *UpdateRestoreNotifications) XXX_Size() int {
	return m.Size()
}
func (m *UpdateRestoreNotifications) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateRestoreNotifications.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateRestoreNotifications proto.InternalMessageInfo

// Pause notifications
type RequestPauseNotifications struct {
	Timeout int32 `protobuf:"varint,1,opt,name=timeout,proto3" json:"timeout,omitempty"`
}

func (m *RequestPauseNotifications) Reset()      { *m = RequestPauseNotifications{} }
func (*RequestPauseNotifications) ProtoMessage() {}
func (*RequestPauseNotifications) Descriptor() ([]byte, []int) {
	return fileDescriptor_6213800e2cb70128, []int{5}
}
func (m *RequestPauseNotifications) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RequestPauseNotifications) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RequestPauseNotifications.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RequestPauseNotifications) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RequestPauseNotifications.Merge(m, src)
}
func (m *RequestPauseNotifications) XXX_Size() int {
	return m.Size()
}
func (m *RequestPauseNotifications) XXX_DiscardUnknown() {
	xxx_messageInfo_RequestPauseNotifications.DiscardUnknown(m)
}

var xxx_messageInfo_RequestPauseNotifications proto.InternalMessageInfo

func (m *RequestPauseNotifications) GetTimeout() int32 {
	if m != nil {
		return m.Timeout
	}
	return 0
}

// Restoring notifications
type RequestRestoreNotifications struct {
}

func (m *RequestRestoreNotifications) Reset()      { *m = RequestRestoreNotifications{} }
func (*RequestRestoreNotifications) ProtoMessage() {}
func (*RequestRestoreNotifications) Descriptor() ([]byte, []int) {
	return fileDescriptor_6213800e2cb70128, []int{6}
}
func (m *RequestRestoreNotifications) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RequestRestoreNotifications) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RequestRestoreNotifications.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RequestRestoreNotifications) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RequestRestoreNotifications.Merge(m, src)
}
func (m *RequestRestoreNotifications) XXX_Size() int {
	return m.Size()
}
func (m *RequestRestoreNotifications) XXX_DiscardUnknown() {
	xxx_messageInfo_RequestRestoreNotifications.DiscardUnknown(m)
}

var xxx_messageInfo_RequestRestoreNotifications proto.InternalMessageInfo

// Update about user's typing
type UpdateTyping struct {
	Peer       *Peer      `protobuf:"bytes,1,opt,name=peer,proto3" json:"peer,omitempty"`
	Uid        int32      `protobuf:"varint,2,opt,name=uid,proto3" json:"uid,omitempty"`
	TypingType TypingType `protobuf:"varint,3,opt,name=typing_type,json=typingType,proto3,enum=dialog.TypingType" json:"typing_type,omitempty"`
}

func (m *UpdateTyping) Reset()      { *m = UpdateTyping{} }
func (*UpdateTyping) ProtoMessage() {}
func (*UpdateTyping) Descriptor() ([]byte, []int) {
	return fileDescriptor_6213800e2cb70128, []int{7}
}
func (m *UpdateTyping) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateTyping) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateTyping.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateTyping) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateTyping.Merge(m, src)
}
func (m *UpdateTyping) XXX_Size() int {
	return m.Size()
}
func (m *UpdateTyping) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateTyping.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateTyping proto.InternalMessageInfo

func (m *UpdateTyping) GetPeer() *Peer {
	if m != nil {
		return m.Peer
	}
	return nil
}

func (m *UpdateTyping) GetUid() int32 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func (m *UpdateTyping) GetTypingType() TypingType {
	if m != nil {
		return m.TypingType
	}
	return TYPINGTYPE_UNKNOWN
}

// Update about user's typing stop
type UpdateTypingStop struct {
	Peer       *Peer      `protobuf:"bytes,1,opt,name=peer,proto3" json:"peer,omitempty"`
	Uid        int32      `protobuf:"varint,2,opt,name=uid,proto3" json:"uid,omitempty"`
	TypingType TypingType `protobuf:"varint,3,opt,name=typing_type,json=typingType,proto3,enum=dialog.TypingType" json:"typing_type,omitempty"`
}

func (m *UpdateTypingStop) Reset()      { *m = UpdateTypingStop{} }
func (*UpdateTypingStop) ProtoMessage() {}
func (*UpdateTypingStop) Descriptor() ([]byte, []int) {
	return fileDescriptor_6213800e2cb70128, []int{8}
}
func (m *UpdateTypingStop) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateTypingStop) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateTypingStop.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateTypingStop) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateTypingStop.Merge(m, src)
}
func (m *UpdateTypingStop) XXX_Size() int {
	return m.Size()
}
func (m *UpdateTypingStop) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateTypingStop.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateTypingStop proto.InternalMessageInfo

func (m *UpdateTypingStop) GetPeer() *Peer {
	if m != nil {
		return m.Peer
	}
	return nil
}

func (m *UpdateTypingStop) GetUid() int32 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func (m *UpdateTypingStop) GetTypingType() TypingType {
	if m != nil {
		return m.TypingType
	}
	return TYPINGTYPE_UNKNOWN
}

// Update about user became online
type UpdateUserOnline struct {
	Uid            int32              `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`
	DeviceType     DeviceType         `protobuf:"varint,2,opt,name=device_type,json=deviceType,proto3,enum=dialog.DeviceType" json:"device_type,omitempty"`
	DeviceCategory *types.StringValue `protobuf:"bytes,3,opt,name=device_category,json=deviceCategory,proto3" json:"device_category,omitempty"`
}

func (m *UpdateUserOnline) Reset()      { *m = UpdateUserOnline{} }
func (*UpdateUserOnline) ProtoMessage() {}
func (*UpdateUserOnline) Descriptor() ([]byte, []int) {
	return fileDescriptor_6213800e2cb70128, []int{9}
}
func (m *UpdateUserOnline) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateUserOnline) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateUserOnline.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateUserOnline) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateUserOnline.Merge(m, src)
}
func (m *UpdateUserOnline) XXX_Size() int {
	return m.Size()
}
func (m *UpdateUserOnline) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateUserOnline.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateUserOnline proto.InternalMessageInfo

func (m *UpdateUserOnline) GetUid() int32 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func (m *UpdateUserOnline) GetDeviceType() DeviceType {
	if m != nil {
		return m.DeviceType
	}
	return DEVICETYPE_UNKNOWN
}

func (m *UpdateUserOnline) GetDeviceCategory() *types.StringValue {
	if m != nil {
		return m.DeviceCategory
	}
	return nil
}

// Update about user became offline
type UpdateUserOffline struct {
	Uid            int32              `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`
	DeviceType     DeviceType         `protobuf:"varint,2,opt,name=device_type,json=deviceType,proto3,enum=dialog.DeviceType" json:"device_type,omitempty"`
	DeviceCategory *types.StringValue `protobuf:"bytes,3,opt,name=device_category,json=deviceCategory,proto3" json:"device_category,omitempty"`
}

func (m *UpdateUserOffline) Reset()      { *m = UpdateUserOffline{} }
func (*UpdateUserOffline) ProtoMessage() {}
func (*UpdateUserOffline) Descriptor() ([]byte, []int) {
	return fileDescriptor_6213800e2cb70128, []int{10}
}
func (m *UpdateUserOffline) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateUserOffline) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateUserOffline.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateUserOffline) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateUserOffline.Merge(m, src)
}
func (m *UpdateUserOffline) XXX_Size() int {
	return m.Size()
}
func (m *UpdateUserOffline) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateUserOffline.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateUserOffline proto.InternalMessageInfo

func (m *UpdateUserOffline) GetUid() int32 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func (m *UpdateUserOffline) GetDeviceType() DeviceType {
	if m != nil {
		return m.DeviceType
	}
	return DEVICETYPE_UNKNOWN
}

func (m *UpdateUserOffline) GetDeviceCategory() *types.StringValue {
	if m != nil {
		return m.DeviceCategory
	}
	return nil
}

// Update about user's last seen state
type UpdateUserLastSeen struct {
	Uid            int32              `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`
	Date           int64              `protobuf:"varint,2,opt,name=date,proto3" json:"date,omitempty"`
	DeviceType     DeviceType         `protobuf:"varint,3,opt,name=device_type,json=deviceType,proto3,enum=dialog.DeviceType" json:"device_type,omitempty"`
	DeviceCategory *types.StringValue `protobuf:"bytes,4,opt,name=device_category,json=deviceCategory,proto3" json:"device_category,omitempty"`
}

func (m *UpdateUserLastSeen) Reset()      { *m = UpdateUserLastSeen{} }
func (*UpdateUserLastSeen) ProtoMessage() {}
func (*UpdateUserLastSeen) Descriptor() ([]byte, []int) {
	return fileDescriptor_6213800e2cb70128, []int{11}
}
func (m *UpdateUserLastSeen) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateUserLastSeen) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateUserLastSeen.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateUserLastSeen) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateUserLastSeen.Merge(m, src)
}
func (m *UpdateUserLastSeen) XXX_Size() int {
	return m.Size()
}
func (m *UpdateUserLastSeen) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateUserLastSeen.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateUserLastSeen proto.InternalMessageInfo

func (m *UpdateUserLastSeen) GetUid() int32 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func (m *UpdateUserLastSeen) GetDate() int64 {
	if m != nil {
		return m.Date
	}
	return 0
}

func (m *UpdateUserLastSeen) GetDeviceType() DeviceType {
	if m != nil {
		return m.DeviceType
	}
	return DEVICETYPE_UNKNOWN
}

func (m *UpdateUserLastSeen) GetDeviceCategory() *types.StringValue {
	if m != nil {
		return m.DeviceCategory
	}
	return nil
}

// Update about group online change
type UpdateGroupOnline struct {
	GroupId int32 `protobuf:"varint,1,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	/// amount of online users
	Count int32 `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
}

func (m *UpdateGroupOnline) Reset()      { *m = UpdateGroupOnline{} }
func (*UpdateGroupOnline) ProtoMessage() {}
func (*UpdateGroupOnline) Descriptor() ([]byte, []int) {
	return fileDescriptor_6213800e2cb70128, []int{12}
}
func (m *UpdateGroupOnline) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateGroupOnline) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateGroupOnline.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateGroupOnline) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateGroupOnline.Merge(m, src)
}
func (m *UpdateGroupOnline) XXX_Size() int {
	return m.Size()
}
func (m *UpdateGroupOnline) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateGroupOnline.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateGroupOnline proto.InternalMessageInfo

func (m *UpdateGroupOnline) GetGroupId() int32 {
	if m != nil {
		return m.GroupId
	}
	return 0
}

func (m *UpdateGroupOnline) GetCount() int32 {
	if m != nil {
		return m.Count
	}
	return 0
}

// Request for last user online timestamp
type RequestGetUserLastPresence struct {
	UserOutPeer *UserOutPeer `protobuf:"bytes,1,opt,name=user_out_peer,json=userOutPeer,proto3" json:"user_out_peer,omitempty"`
}

func (m *RequestGetUserLastPresence) Reset()      { *m = RequestGetUserLastPresence{} }
func (*RequestGetUserLastPresence) ProtoMessage() {}
func (*RequestGetUserLastPresence) Descriptor() ([]byte, []int) {
	return fileDescriptor_6213800e2cb70128, []int{13}
}
func (m *RequestGetUserLastPresence) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RequestGetUserLastPresence) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RequestGetUserLastPresence.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RequestGetUserLastPresence) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RequestGetUserLastPresence.Merge(m, src)
}
func (m *RequestGetUserLastPresence) XXX_Size() int {
	return m.Size()
}
func (m *RequestGetUserLastPresence) XXX_DiscardUnknown() {
	xxx_messageInfo_RequestGetUserLastPresence.DiscardUnknown(m)
}

var xxx_messageInfo_RequestGetUserLastPresence proto.InternalMessageInfo

func (m *RequestGetUserLastPresence) GetUserOutPeer() *UserOutPeer {
	if m != nil {
		return m.UserOutPeer
	}
	return nil
}

// Response for RequestGetUserLastPresence
type ResponseUserLastPresence struct {
	// Types that are valid to be assigned to Payload:
	//	*ResponseUserLastPresence_LastOnlineAt
	//	*ResponseUserLastPresence_NotFoundError
	Payload isResponseUserLastPresence_Payload `protobuf_oneof:"payload"`
}

func (m *ResponseUserLastPresence) Reset()      { *m = ResponseUserLastPresence{} }
func (*ResponseUserLastPresence) ProtoMessage() {}
func (*ResponseUserLastPresence) Descriptor() ([]byte, []int) {
	return fileDescriptor_6213800e2cb70128, []int{14}
}
func (m *ResponseUserLastPresence) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ResponseUserLastPresence) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ResponseUserLastPresence.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ResponseUserLastPresence) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResponseUserLastPresence.Merge(m, src)
}
func (m *ResponseUserLastPresence) XXX_Size() int {
	return m.Size()
}
func (m *ResponseUserLastPresence) XXX_DiscardUnknown() {
	xxx_messageInfo_ResponseUserLastPresence.DiscardUnknown(m)
}

var xxx_messageInfo_ResponseUserLastPresence proto.InternalMessageInfo

type isResponseUserLastPresence_Payload interface {
	isResponseUserLastPresence_Payload()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type ResponseUserLastPresence_LastOnlineAt struct {
	LastOnlineAt *types.Timestamp `protobuf:"bytes,1,opt,name=last_online_at,json=lastOnlineAt,proto3,oneof" json:"last_online_at,omitempty"`
}
type ResponseUserLastPresence_NotFoundError struct {
	NotFoundError *ResponseUserLastPresence_UserNotFoundError `protobuf:"bytes,2,opt,name=not_found_error,json=notFoundError,proto3,oneof" json:"not_found_error,omitempty"`
}

func (*ResponseUserLastPresence_LastOnlineAt) isResponseUserLastPresence_Payload()  {}
func (*ResponseUserLastPresence_NotFoundError) isResponseUserLastPresence_Payload() {}

func (m *ResponseUserLastPresence) GetPayload() isResponseUserLastPresence_Payload {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (m *ResponseUserLastPresence) GetLastOnlineAt() *types.Timestamp {
	if x, ok := m.GetPayload().(*ResponseUserLastPresence_LastOnlineAt); ok {
		return x.LastOnlineAt
	}
	return nil
}

func (m *ResponseUserLastPresence) GetNotFoundError() *ResponseUserLastPresence_UserNotFoundError {
	if x, ok := m.GetPayload().(*ResponseUserLastPresence_NotFoundError); ok {
		return x.NotFoundError
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*ResponseUserLastPresence) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*ResponseUserLastPresence_LastOnlineAt)(nil),
		(*ResponseUserLastPresence_NotFoundError)(nil),
	}
}

type ResponseUserLastPresence_UserNotFoundError struct {
}

func (m *ResponseUserLastPresence_UserNotFoundError) Reset() {
	*m = ResponseUserLastPresence_UserNotFoundError{}
}
func (*ResponseUserLastPresence_UserNotFoundError) ProtoMessage() {}
func (*ResponseUserLastPresence_UserNotFoundError) Descriptor() ([]byte, []int) {
	return fileDescriptor_6213800e2cb70128, []int{14, 0}
}
func (m *ResponseUserLastPresence_UserNotFoundError) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ResponseUserLastPresence_UserNotFoundError) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ResponseUserLastPresence_UserNotFoundError.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ResponseUserLastPresence_UserNotFoundError) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResponseUserLastPresence_UserNotFoundError.Merge(m, src)
}
func (m *ResponseUserLastPresence_UserNotFoundError) XXX_Size() int {
	return m.Size()
}
func (m *ResponseUserLastPresence_UserNotFoundError) XXX_DiscardUnknown() {
	xxx_messageInfo_ResponseUserLastPresence_UserNotFoundError.DiscardUnknown(m)
}

var xxx_messageInfo_ResponseUserLastPresence_UserNotFoundError proto.InternalMessageInfo

func init() {
	proto.RegisterEnum("dialog.TypingType", TypingType_name, TypingType_value)
	proto.RegisterEnum("dialog.DeviceType", DeviceType_name, DeviceType_value)
	proto.RegisterType((*RequestTyping)(nil), "dialog.RequestTyping")
	proto.RegisterType((*RequestStopTyping)(nil), "dialog.RequestStopTyping")
	proto.RegisterType((*RequestSetOnline)(nil), "dialog.RequestSetOnline")
	proto.RegisterType((*UpdatePauseNotifications)(nil), "dialog.UpdatePauseNotifications")
	proto.RegisterType((*UpdateRestoreNotifications)(nil), "dialog.UpdateRestoreNotifications")
	proto.RegisterType((*RequestPauseNotifications)(nil), "dialog.RequestPauseNotifications")
	proto.RegisterType((*RequestRestoreNotifications)(nil), "dialog.RequestRestoreNotifications")
	proto.RegisterType((*UpdateTyping)(nil), "dialog.UpdateTyping")
	proto.RegisterType((*UpdateTypingStop)(nil), "dialog.UpdateTypingStop")
	proto.RegisterType((*UpdateUserOnline)(nil), "dialog.UpdateUserOnline")
	proto.RegisterType((*UpdateUserOffline)(nil), "dialog.UpdateUserOffline")
	proto.RegisterType((*UpdateUserLastSeen)(nil), "dialog.UpdateUserLastSeen")
	proto.RegisterType((*UpdateGroupOnline)(nil), "dialog.UpdateGroupOnline")
	proto.RegisterType((*RequestGetUserLastPresence)(nil), "dialog.RequestGetUserLastPresence")
	proto.RegisterType((*ResponseUserLastPresence)(nil), "dialog.ResponseUserLastPresence")
	proto.RegisterType((*ResponseUserLastPresence_UserNotFoundError)(nil), "dialog.ResponseUserLastPresence.UserNotFoundError")
}

func init() { proto.RegisterFile("typing_and_online.proto", fileDescriptor_6213800e2cb70128) }

var fileDescriptor_6213800e2cb70128 = []byte{
	// 1185 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x57, 0xcd, 0x6f, 0xe3, 0x44,
	0x14, 0xcf, 0x34, 0xfd, 0x7c, 0xfd, 0x72, 0xa6, 0xed, 0x6e, 0x1a, 0x8a, 0xdb, 0x75, 0x11, 0x5b,
	0x05, 0x36, 0xe9, 0x66, 0x25, 0x3e, 0xca, 0xa1, 0x4a, 0xb2, 0xd9, 0x36, 0xa2, 0xa4, 0x51, 0x36,
	0xed, 0xb2, 0x08, 0x29, 0x72, 0xe3, 0x49, 0x30, 0x4a, 0x3d, 0xc6, 0x1e, 0x17, 0xf5, 0x86, 0x56,
	0xe2, 0xb2, 0x5c, 0x90, 0xe0, 0xce, 0x05, 0x04, 0x9c, 0xe0, 0xcf, 0xe0, 0x58, 0x89, 0x3d, 0xec,
	0x91, 0xa6, 0x1c, 0xd0, 0x9e, 0xf6, 0x0e, 0x07, 0x64, 0x7b, 0xdc, 0x38, 0x8e, 0xad, 0xa0, 0x55,
	0x91, 0xf6, 0x14, 0xfb, 0x7d, 0xfd, 0x7e, 0xef, 0xcd, 0x7b, 0xcf, 0x13, 0xb8, 0xce, 0x4e, 0x75,
	0x55, 0x6b, 0x37, 0x64, 0x4d, 0x69, 0x50, 0xad, 0xa3, 0x6a, 0x24, 0xa3, 0x1b, 0x94, 0x51, 0x3c,
	0xae, 0xa8, 0x72, 0x87, 0xb6, 0x53, 0xab, 0x6d, 0x4a, 0xdb, 0x1d, 0x92, 0x75, 0xa4, 0x47, 0x56,
	0x2b, 0xcb, 0xd4, 0x63, 0x62, 0x32, 0xf9, 0x58, 0x77, 0x0d, 0x53, 0x62, 0xd0, 0xe0, 0x73, 0x43,
	0xd6, 0x75, 0x62, 0x98, 0x5c, 0xbf, 0xc2, 0xf5, 0xb2, 0xae, 0x66, 0x65, 0x4d, 0xa3, 0x4c, 0x66,
	0x2a, 0xd5, 0x3c, 0x6d, 0x42, 0x21, 0x2d, 0x55, 0x53, 0xfd, 0xa2, 0x85, 0x63, 0xd5, 0x6c, 0x92,
	0x4e, 0x47, 0xd6, 0x08, 0xb5, 0x3c, 0xe1, 0xb4, 0x4e, 0x7a, 0x21, 0x97, 0xcc, 0xa6, 0xdc, 0x91,
	0xf5, 0xa3, 0x2c, 0xff, 0x75, 0xc5, 0xd2, 0x0f, 0x08, 0x66, 0x6b, 0xe4, 0x33, 0x8b, 0x98, 0xac,
	0xee, 0x64, 0x85, 0x73, 0x30, 0x6a, 0xfb, 0x25, 0xd1, 0x1a, 0xda, 0x98, 0xce, 0xcd, 0x67, 0xdc,
	0x9c, 0x32, 0xfb, 0x16, 0xab, 0x12, 0x62, 0x14, 0x66, 0x1f, 0x3f, 0xdb, 0x9c, 0x82, 0x89, 0x13,
	0xd5, 0x54, 0x8f, 0x3a, 0xa4, 0xe6, 0xd8, 0xe2, 0x02, 0x4c, 0xf3, 0x9a, 0xb0, 0x53, 0x9d, 0x24,
	0xe3, 0x6b, 0x68, 0x63, 0x2e, 0x87, 0x3d, 0x57, 0x37, 0x70, 0xfd, 0x54, 0x27, 0x41, 0x6f, 0x60,
	0x97, 0xaa, 0xad, 0x95, 0xee, 0xf6, 0x32, 0x5c, 0x57, 0x8f, 0x33, 0x4a, 0xa7, 0x9d, 0x69, 0x1b,
	0x7a, 0x33, 0xb3, 0x63, 0xe8, 0x4d, 0xce, 0x4d, 0xfa, 0x19, 0x41, 0x82, 0x3f, 0xdf, 0x67, 0x54,
	0xbf, 0x3a, 0xae, 0x23, 0x57, 0xcf, 0xf5, 0xbb, 0x11, 0x10, 0x3c, 0xae, 0x84, 0xed, 0x3b, 0x1d,
	0x82, 0xd3, 0x30, 0xa5, 0x9a, 0xbc, 0x5d, 0x1c, 0xbe, 0x93, 0x41, 0x80, 0x49, 0xd5, 0xe4, 0xb6,
	0x37, 0x61, 0xc2, 0xee, 0x18, 0x6a, 0x31, 0x87, 0x5e, 0x3c, 0x68, 0xe9, 0x69, 0xed, 0x5c, 0x14,
	0x72, 0xa2, 0x36, 0x49, 0x68, 0xdd, 0xef, 0x3a, 0xaa, 0xd0, 0x5c, 0x94, 0x4b, 0x15, 0xae, 0xc3,
	0x3c, 0x8f, 0xd1, 0x94, 0x19, 0x69, 0x53, 0xe3, 0x34, 0x39, 0xea, 0x94, 0x73, 0x25, 0xe3, 0x76,
	0x61, 0xc6, 0xeb, 0xd2, 0xcc, 0x7d, 0x66, 0xa8, 0x5a, 0xfb, 0x50, 0xee, 0x58, 0x03, 0x11, 0xe7,
	0xdc, 0x18, 0x45, 0x1e, 0x62, 0x48, 0x85, 0x8a, 0x90, 0x3c, 0xd0, 0x15, 0x99, 0x91, 0xaa, 0x6c,
	0x99, 0xa4, 0x42, 0x99, 0xda, 0x52, 0x9b, 0x6e, 0x8f, 0xfb, 0x93, 0xb7, 0xcb, 0x34, 0x16, 0x95,
	0xbc, 0xb4, 0x02, 0x29, 0x37, 0x48, 0x8d, 0x98, 0x8c, 0x1a, 0xfd, 0x61, 0x24, 0x19, 0x96, 0x39,
	0x5a, 0x08, 0xc6, 0xeb, 0x41, 0x8c, 0x99, 0xc7, 0xcf, 0x36, 0x27, 0x61, 0xfc, 0x13, 0x55, 0x51,
	0x88, 0x76, 0x09, 0x31, 0x24, 0x8b, 0xf7, 0xe0, 0x15, 0xfe, 0x18, 0xc6, 0x60, 0x88, 0xf3, 0xf7,
	0x08, 0x66, 0x5c, 0xfa, 0xbc, 0x97, 0xb3, 0x7d, 0xbd, 0x3c, 0xe3, 0x1d, 0x62, 0x74, 0x23, 0xaf,
	0x42, 0xdc, 0x52, 0x15, 0xa7, 0x43, 0x06, 0x8a, 0x64, 0x6b, 0xae, 0x62, 0x2a, 0xa5, 0x1f, 0x11,
	0x08, 0x7e, 0x9a, 0xf6, 0xf0, 0xfd, 0x0f, 0x54, 0xf3, 0xff, 0x95, 0x6a, 0xff, 0x41, 0xf9, 0x99,
	0xfe, 0x72, 0xc9, 0xf4, 0xc0, 0x24, 0x06, 0x9f, 0x24, 0x0e, 0x8c, 0x22, 0x81, 0xef, 0xf4, 0x4f,
	0xd0, 0x48, 0xd4, 0x04, 0xf5, 0x8d, 0x4c, 0x69, 0x70, 0x64, 0xe2, 0xc3, 0x47, 0x26, 0x38, 0x23,
	0xd2, 0xaf, 0x08, 0x12, 0x3e, 0xc6, 0xad, 0xd6, 0xcb, 0x4f, 0xf9, 0x09, 0x02, 0xdc, 0xa3, 0xbc,
	0x27, 0xdb, 0x1b, 0x8e, 0x68, 0xc3, 0x39, 0xdf, 0x80, 0x51, 0xdb, 0x29, 0x7c, 0x9d, 0x39, 0xaa,
	0x60, 0x5a, 0xf1, 0x17, 0x4d, 0x6b, 0xf4, 0x05, 0xd2, 0x3a, 0xf2, 0x0e, 0x62, 0xc7, 0xa0, 0x96,
	0xce, 0x7b, 0x67, 0x03, 0x26, 0xdb, 0xf6, 0x6b, 0x23, 0x2a, 0xb3, 0x09, 0x47, 0x5d, 0x56, 0xf0,
	0x3a, 0x8c, 0x35, 0xa9, 0xa5, 0xb1, 0xf0, 0x06, 0x77, 0x75, 0xd2, 0x23, 0x04, 0x29, 0x3e, 0xfc,
	0x3b, 0x84, 0x79, 0xe5, 0xab, 0x1a, 0xc4, 0x24, 0x5a, 0x93, 0xe0, 0x7b, 0x30, 0x6b, 0x99, 0xc4,
	0x68, 0x50, 0x8b, 0x35, 0x7c, 0xc3, 0xb5, 0xe0, 0x15, 0xc0, 0x69, 0x91, 0xf0, 0xef, 0xda, 0xb4,
	0xd5, 0xd3, 0x0d, 0xd9, 0x3a, 0x7f, 0x23, 0x48, 0xd6, 0x88, 0xa9, 0x53, 0xcd, 0x24, 0x03, 0x14,
	0x0a, 0x30, 0xd7, 0x91, 0x4d, 0xc6, 0x3f, 0x52, 0x0d, 0x99, 0x71, 0x0e, 0xa9, 0x81, 0x5a, 0xd6,
	0xbd, 0xfb, 0xcc, 0x6e, 0xac, 0x36, 0x63, 0xfb, 0xb8, 0x25, 0xcb, 0x33, 0xfc, 0x31, 0xcc, 0x6b,
	0x94, 0x35, 0x5a, 0xd4, 0xd2, 0x94, 0x06, 0x31, 0x0c, 0x6a, 0x38, 0x45, 0x99, 0xce, 0xe5, 0xbc,
	0x44, 0xa2, 0xe0, 0x9d, 0x0c, 0x2b, 0x94, 0xdd, 0xb3, 0x5d, 0x4b, 0xb6, 0xe7, 0x6e, 0xac, 0x36,
	0xab, 0xf9, 0x05, 0xa9, 0x05, 0x48, 0x0c, 0x58, 0x6d, 0xbd, 0xda, 0xdd, 0x4e, 0x41, 0x72, 0x30,
	0x63, 0x17, 0xa6, 0x30, 0x05, 0x13, 0xba, 0x7c, 0xda, 0xa1, 0xb2, 0x92, 0x7e, 0x17, 0xa0, 0xb7,
	0x4a, 0xf0, 0x35, 0xc0, 0xf5, 0x87, 0xd5, 0x72, 0x65, 0xa7, 0xfe, 0xb0, 0x5a, 0x6a, 0x1c, 0x54,
	0xde, 0xaf, 0xec, 0x3f, 0xa8, 0x08, 0x31, 0xbc, 0x00, 0xf3, 0x3e, 0x79, 0xbd, 0xf4, 0x61, 0x5d,
	0x40, 0xe9, 0x27, 0x08, 0xa0, 0xd7, 0x83, 0xb6, 0xef, 0xdd, 0xd2, 0x61, 0xb9, 0x58, 0x0a, 0xf8,
	0xf6, 0xcb, 0x77, 0x4a, 0x95, 0x52, 0xad, 0x5c, 0x14, 0x10, 0x4e, 0xc0, 0xac, 0x4f, 0x5e, 0x2d,
	0x0a, 0x23, 0x78, 0x09, 0x12, 0x3e, 0xd1, 0x07, 0xfb, 0x85, 0xf2, 0x5e, 0x49, 0x88, 0x07, 0xc4,
	0xf5, 0x7c, 0x61, 0xaf, 0x54, 0x17, 0x46, 0xf1, 0x22, 0x08, 0x3e, 0xf1, 0x83, 0x7c, 0xbd, 0xb8,
	0x2b, 0x8c, 0x05, 0x63, 0x94, 0x6b, 0xb5, 0xfd, 0x9a, 0x30, 0x8e, 0x31, 0xcc, 0xf9, 0xc4, 0xc5,
	0x7c, 0x4d, 0x98, 0x08, 0x04, 0x70, 0xe2, 0x0a, 0x93, 0xb9, 0x7f, 0xc6, 0x60, 0xde, 0x2d, 0x49,
	0x5e, 0x53, 0x78, 0xdf, 0xcb, 0x30, 0xce, 0x3f, 0x49, 0x4b, 0xbd, 0x33, 0xf3, 0xdd, 0x10, 0x53,
	0x8b, 0xc1, 0xa3, 0x3c, 0xa4, 0xaa, 0x22, 0xa5, 0x1f, 0xfd, 0xfe, 0xe7, 0x37, 0x23, 0xaf, 0x49,
	0xab, 0xd9, 0x93, 0xdb, 0x59, 0xfb, 0x18, 0xb2, 0x81, 0xc0, 0xfc, 0x7d, 0x0b, 0xa5, 0xf1, 0x31,
	0x80, 0xef, 0x16, 0xb7, 0x1c, 0x80, 0xe9, 0xa9, 0x22, 0xa0, 0x32, 0x0e, 0xd4, 0x86, 0xb4, 0x1e,
	0x09, 0xd5, 0x0b, 0x61, 0xc3, 0x7d, 0x0a, 0x53, 0xbd, 0x8b, 0x58, 0x32, 0x88, 0xe6, 0x69, 0x22,
	0xc0, 0x6e, 0x39, 0x60, 0x37, 0x25, 0x29, 0x1a, 0xcc, 0x8b, 0x60, 0x63, 0x7d, 0x89, 0x00, 0x87,
	0xdc, 0x38, 0x6e, 0x04, 0x50, 0x07, 0x4d, 0x22, 0xe0, 0xdf, 0x72, 0xe0, 0x37, 0xa5, 0x37, 0x22,
	0xe1, 0x07, 0x43, 0xd9, 0x3c, 0xbe, 0x42, 0xb0, 0x18, 0x76, 0x2d, 0xc1, 0xeb, 0x01, 0x26, 0x61,
	0x46, 0x11, 0x5c, 0xde, 0x71, 0xb8, 0xe4, 0xa4, 0x5b, 0x91, 0x5c, 0x42, 0x2f, 0x42, 0x28, 0x8d,
	0xbf, 0x45, 0xb0, 0x10, 0xb6, 0xf5, 0xa4, 0x00, 0x99, 0x10, 0x9b, 0xd4, 0xda, 0xb0, 0xcd, 0x21,
	0xbd, 0xed, 0xf0, 0xba, 0x2d, 0xbd, 0x19, 0xc9, 0x2b, 0x24, 0xee, 0x16, 0x4a, 0x17, 0x0e, 0xba,
	0xdb, 0xd7, 0x60, 0xd1, 0xbf, 0x3a, 0x4c, 0x62, 0xd8, 0x43, 0x6e, 0x9e, 0x9d, 0x8b, 0xb1, 0xa7,
	0xe7, 0x62, 0xec, 0xf9, 0xb9, 0x88, 0xbe, 0xe8, 0x8a, 0xe8, 0xa7, 0xae, 0x88, 0x7e, 0xeb, 0x8a,
	0xe8, 0xac, 0x2b, 0xa2, 0x3f, 0xba, 0x22, 0xfa, 0xab, 0x2b, 0xc6, 0x9e, 0x77, 0x45, 0xf4, 0xf5,
	0x85, 0x18, 0x3b, 0xbb, 0x10, 0x63, 0x4f, 0x2f, 0xc4, 0xd8, 0x47, 0xfc, 0xff, 0xdf, 0xd1, 0xb8,
	0xb3, 0x28, 0xef, 0xfc, 0x1b, 0x00, 0x00, 0xff, 0xff, 0x4f, 0xca, 0x4e, 0x26, 0x29, 0x0e, 0x00,
	0x00,
}

func (x TypingType) String() string {
	s, ok := TypingType_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x DeviceType) String() string {
	s, ok := DeviceType_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *RequestTyping) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RequestTyping)
	if !ok {
		that2, ok := that.(RequestTyping)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Peer.Equal(that1.Peer) {
		return false
	}
	if this.TypingType != that1.TypingType {
		return false
	}
	return true
}
func (this *RequestStopTyping) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RequestStopTyping)
	if !ok {
		that2, ok := that.(RequestStopTyping)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Peer.Equal(that1.Peer) {
		return false
	}
	if this.TypingType != that1.TypingType {
		return false
	}
	return true
}
func (this *RequestSetOnline) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RequestSetOnline)
	if !ok {
		that2, ok := that.(RequestSetOnline)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.IsOnline != that1.IsOnline {
		return false
	}
	if this.Timeout != that1.Timeout {
		return false
	}
	if this.DeviceType != that1.DeviceType {
		return false
	}
	if !this.DeviceCategory.Equal(that1.DeviceCategory) {
		return false
	}
	return true
}
func (this *UpdatePauseNotifications) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpdatePauseNotifications)
	if !ok {
		that2, ok := that.(UpdatePauseNotifications)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Timeout != that1.Timeout {
		return false
	}
	return true
}
func (this *UpdateRestoreNotifications) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpdateRestoreNotifications)
	if !ok {
		that2, ok := that.(UpdateRestoreNotifications)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *RequestPauseNotifications) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RequestPauseNotifications)
	if !ok {
		that2, ok := that.(RequestPauseNotifications)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Timeout != that1.Timeout {
		return false
	}
	return true
}
func (this *RequestRestoreNotifications) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RequestRestoreNotifications)
	if !ok {
		that2, ok := that.(RequestRestoreNotifications)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *UpdateTyping) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpdateTyping)
	if !ok {
		that2, ok := that.(UpdateTyping)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Peer.Equal(that1.Peer) {
		return false
	}
	if this.Uid != that1.Uid {
		return false
	}
	if this.TypingType != that1.TypingType {
		return false
	}
	return true
}
func (this *UpdateTypingStop) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpdateTypingStop)
	if !ok {
		that2, ok := that.(UpdateTypingStop)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Peer.Equal(that1.Peer) {
		return false
	}
	if this.Uid != that1.Uid {
		return false
	}
	if this.TypingType != that1.TypingType {
		return false
	}
	return true
}
func (this *UpdateUserOnline) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpdateUserOnline)
	if !ok {
		that2, ok := that.(UpdateUserOnline)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Uid != that1.Uid {
		return false
	}
	if this.DeviceType != that1.DeviceType {
		return false
	}
	if !this.DeviceCategory.Equal(that1.DeviceCategory) {
		return false
	}
	return true
}
func (this *UpdateUserOffline) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpdateUserOffline)
	if !ok {
		that2, ok := that.(UpdateUserOffline)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Uid != that1.Uid {
		return false
	}
	if this.DeviceType != that1.DeviceType {
		return false
	}
	if !this.DeviceCategory.Equal(that1.DeviceCategory) {
		return false
	}
	return true
}
func (this *UpdateUserLastSeen) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpdateUserLastSeen)
	if !ok {
		that2, ok := that.(UpdateUserLastSeen)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Uid != that1.Uid {
		return false
	}
	if this.Date != that1.Date {
		return false
	}
	if this.DeviceType != that1.DeviceType {
		return false
	}
	if !this.DeviceCategory.Equal(that1.DeviceCategory) {
		return false
	}
	return true
}
func (this *UpdateGroupOnline) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpdateGroupOnline)
	if !ok {
		that2, ok := that.(UpdateGroupOnline)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.GroupId != that1.GroupId {
		return false
	}
	if this.Count != that1.Count {
		return false
	}
	return true
}
func (this *RequestGetUserLastPresence) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RequestGetUserLastPresence)
	if !ok {
		that2, ok := that.(RequestGetUserLastPresence)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.UserOutPeer.Equal(that1.UserOutPeer) {
		return false
	}
	return true
}
func (this *ResponseUserLastPresence) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ResponseUserLastPresence)
	if !ok {
		that2, ok := that.(ResponseUserLastPresence)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.Payload == nil {
		if this.Payload != nil {
			return false
		}
	} else if this.Payload == nil {
		return false
	} else if !this.Payload.Equal(that1.Payload) {
		return false
	}
	return true
}
func (this *ResponseUserLastPresence_LastOnlineAt) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ResponseUserLastPresence_LastOnlineAt)
	if !ok {
		that2, ok := that.(ResponseUserLastPresence_LastOnlineAt)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.LastOnlineAt.Equal(that1.LastOnlineAt) {
		return false
	}
	return true
}
func (this *ResponseUserLastPresence_NotFoundError) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ResponseUserLastPresence_NotFoundError)
	if !ok {
		that2, ok := that.(ResponseUserLastPresence_NotFoundError)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.NotFoundError.Equal(that1.NotFoundError) {
		return false
	}
	return true
}
func (this *ResponseUserLastPresence_UserNotFoundError) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ResponseUserLastPresence_UserNotFoundError)
	if !ok {
		that2, ok := that.(ResponseUserLastPresence_UserNotFoundError)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *RequestTyping) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&dialog.RequestTyping{")
	if this.Peer != nil {
		s = append(s, "Peer: "+fmt.Sprintf("%#v", this.Peer)+",\n")
	}
	s = append(s, "TypingType: "+fmt.Sprintf("%#v", this.TypingType)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RequestStopTyping) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&dialog.RequestStopTyping{")
	if this.Peer != nil {
		s = append(s, "Peer: "+fmt.Sprintf("%#v", this.Peer)+",\n")
	}
	s = append(s, "TypingType: "+fmt.Sprintf("%#v", this.TypingType)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RequestSetOnline) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&dialog.RequestSetOnline{")
	s = append(s, "IsOnline: "+fmt.Sprintf("%#v", this.IsOnline)+",\n")
	s = append(s, "Timeout: "+fmt.Sprintf("%#v", this.Timeout)+",\n")
	s = append(s, "DeviceType: "+fmt.Sprintf("%#v", this.DeviceType)+",\n")
	if this.DeviceCategory != nil {
		s = append(s, "DeviceCategory: "+fmt.Sprintf("%#v", this.DeviceCategory)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UpdatePauseNotifications) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&dialog.UpdatePauseNotifications{")
	s = append(s, "Timeout: "+fmt.Sprintf("%#v", this.Timeout)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UpdateRestoreNotifications) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&dialog.UpdateRestoreNotifications{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RequestPauseNotifications) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&dialog.RequestPauseNotifications{")
	s = append(s, "Timeout: "+fmt.Sprintf("%#v", this.Timeout)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RequestRestoreNotifications) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&dialog.RequestRestoreNotifications{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UpdateTyping) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&dialog.UpdateTyping{")
	if this.Peer != nil {
		s = append(s, "Peer: "+fmt.Sprintf("%#v", this.Peer)+",\n")
	}
	s = append(s, "Uid: "+fmt.Sprintf("%#v", this.Uid)+",\n")
	s = append(s, "TypingType: "+fmt.Sprintf("%#v", this.TypingType)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UpdateTypingStop) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&dialog.UpdateTypingStop{")
	if this.Peer != nil {
		s = append(s, "Peer: "+fmt.Sprintf("%#v", this.Peer)+",\n")
	}
	s = append(s, "Uid: "+fmt.Sprintf("%#v", this.Uid)+",\n")
	s = append(s, "TypingType: "+fmt.Sprintf("%#v", this.TypingType)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UpdateUserOnline) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&dialog.UpdateUserOnline{")
	s = append(s, "Uid: "+fmt.Sprintf("%#v", this.Uid)+",\n")
	s = append(s, "DeviceType: "+fmt.Sprintf("%#v", this.DeviceType)+",\n")
	if this.DeviceCategory != nil {
		s = append(s, "DeviceCategory: "+fmt.Sprintf("%#v", this.DeviceCategory)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UpdateUserOffline) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&dialog.UpdateUserOffline{")
	s = append(s, "Uid: "+fmt.Sprintf("%#v", this.Uid)+",\n")
	s = append(s, "DeviceType: "+fmt.Sprintf("%#v", this.DeviceType)+",\n")
	if this.DeviceCategory != nil {
		s = append(s, "DeviceCategory: "+fmt.Sprintf("%#v", this.DeviceCategory)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UpdateUserLastSeen) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&dialog.UpdateUserLastSeen{")
	s = append(s, "Uid: "+fmt.Sprintf("%#v", this.Uid)+",\n")
	s = append(s, "Date: "+fmt.Sprintf("%#v", this.Date)+",\n")
	s = append(s, "DeviceType: "+fmt.Sprintf("%#v", this.DeviceType)+",\n")
	if this.DeviceCategory != nil {
		s = append(s, "DeviceCategory: "+fmt.Sprintf("%#v", this.DeviceCategory)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UpdateGroupOnline) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&dialog.UpdateGroupOnline{")
	s = append(s, "GroupId: "+fmt.Sprintf("%#v", this.GroupId)+",\n")
	s = append(s, "Count: "+fmt.Sprintf("%#v", this.Count)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RequestGetUserLastPresence) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&dialog.RequestGetUserLastPresence{")
	if this.UserOutPeer != nil {
		s = append(s, "UserOutPeer: "+fmt.Sprintf("%#v", this.UserOutPeer)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ResponseUserLastPresence) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&dialog.ResponseUserLastPresence{")
	if this.Payload != nil {
		s = append(s, "Payload: "+fmt.Sprintf("%#v", this.Payload)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ResponseUserLastPresence_LastOnlineAt) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dialog.ResponseUserLastPresence_LastOnlineAt{` +
		`LastOnlineAt:` + fmt.Sprintf("%#v", this.LastOnlineAt) + `}`}, ", ")
	return s
}
func (this *ResponseUserLastPresence_NotFoundError) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dialog.ResponseUserLastPresence_NotFoundError{` +
		`NotFoundError:` + fmt.Sprintf("%#v", this.NotFoundError) + `}`}, ", ")
	return s
}
func (this *ResponseUserLastPresence_UserNotFoundError) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&dialog.ResponseUserLastPresence_UserNotFoundError{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringTypingAndOnline(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// TypingAndOnlineClient is the client API for TypingAndOnline service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TypingAndOnlineClient interface {
	Typing(ctx context.Context, in *RequestTyping, opts ...grpc.CallOption) (*ResponseVoid, error)
	StopTyping(ctx context.Context, in *RequestStopTyping, opts ...grpc.CallOption) (*ResponseVoid, error)
	SetOnline(ctx context.Context, in *RequestSetOnline, opts ...grpc.CallOption) (*ResponseVoid, error)
	PauseNotifications(ctx context.Context, in *RequestPauseNotifications, opts ...grpc.CallOption) (*ResponseVoid, error)
	RestoreNotifications(ctx context.Context, in *RequestRestoreNotifications, opts ...grpc.CallOption) (*ResponseVoid, error)
	GetUserLastPresence(ctx context.Context, in *RequestGetUserLastPresence, opts ...grpc.CallOption) (*ResponseUserLastPresence, error)
}

type typingAndOnlineClient struct {
	cc *grpc.ClientConn
}

func NewTypingAndOnlineClient(cc *grpc.ClientConn) TypingAndOnlineClient {
	return &typingAndOnlineClient{cc}
}

func (c *typingAndOnlineClient) Typing(ctx context.Context, in *RequestTyping, opts ...grpc.CallOption) (*ResponseVoid, error) {
	out := new(ResponseVoid)
	err := c.cc.Invoke(ctx, "/dialog.TypingAndOnline/Typing", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *typingAndOnlineClient) StopTyping(ctx context.Context, in *RequestStopTyping, opts ...grpc.CallOption) (*ResponseVoid, error) {
	out := new(ResponseVoid)
	err := c.cc.Invoke(ctx, "/dialog.TypingAndOnline/StopTyping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *typingAndOnlineClient) SetOnline(ctx context.Context, in *RequestSetOnline, opts ...grpc.CallOption) (*ResponseVoid, error) {
	out := new(ResponseVoid)
	err := c.cc.Invoke(ctx, "/dialog.TypingAndOnline/SetOnline", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *typingAndOnlineClient) PauseNotifications(ctx context.Context, in *RequestPauseNotifications, opts ...grpc.CallOption) (*ResponseVoid, error) {
	out := new(ResponseVoid)
	err := c.cc.Invoke(ctx, "/dialog.TypingAndOnline/PauseNotifications", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *typingAndOnlineClient) RestoreNotifications(ctx context.Context, in *RequestRestoreNotifications, opts ...grpc.CallOption) (*ResponseVoid, error) {
	out := new(ResponseVoid)
	err := c.cc.Invoke(ctx, "/dialog.TypingAndOnline/RestoreNotifications", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *typingAndOnlineClient) GetUserLastPresence(ctx context.Context, in *RequestGetUserLastPresence, opts ...grpc.CallOption) (*ResponseUserLastPresence, error) {
	out := new(ResponseUserLastPresence)
	err := c.cc.Invoke(ctx, "/dialog.TypingAndOnline/GetUserLastPresence", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TypingAndOnlineServer is the server API for TypingAndOnline service.
type TypingAndOnlineServer interface {
	Typing(context.Context, *RequestTyping) (*ResponseVoid, error)
	StopTyping(context.Context, *RequestStopTyping) (*ResponseVoid, error)
	SetOnline(context.Context, *RequestSetOnline) (*ResponseVoid, error)
	PauseNotifications(context.Context, *RequestPauseNotifications) (*ResponseVoid, error)
	RestoreNotifications(context.Context, *RequestRestoreNotifications) (*ResponseVoid, error)
	GetUserLastPresence(context.Context, *RequestGetUserLastPresence) (*ResponseUserLastPresence, error)
}

// UnimplementedTypingAndOnlineServer can be embedded to have forward compatible implementations.
type UnimplementedTypingAndOnlineServer struct {
}

func (*UnimplementedTypingAndOnlineServer) Typing(ctx context.Context, req *RequestTyping) (*ResponseVoid, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Typing not implemented")
}
func (*UnimplementedTypingAndOnlineServer) StopTyping(ctx context.Context, req *RequestStopTyping) (*ResponseVoid, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopTyping not implemented")
}
func (*UnimplementedTypingAndOnlineServer) SetOnline(ctx context.Context, req *RequestSetOnline) (*ResponseVoid, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetOnline not implemented")
}
func (*UnimplementedTypingAndOnlineServer) PauseNotifications(ctx context.Context, req *RequestPauseNotifications) (*ResponseVoid, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PauseNotifications not implemented")
}
func (*UnimplementedTypingAndOnlineServer) RestoreNotifications(ctx context.Context, req *RequestRestoreNotifications) (*ResponseVoid, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RestoreNotifications not implemented")
}
func (*UnimplementedTypingAndOnlineServer) GetUserLastPresence(ctx context.Context, req *RequestGetUserLastPresence) (*ResponseUserLastPresence, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserLastPresence not implemented")
}

func RegisterTypingAndOnlineServer(s *grpc.Server, srv TypingAndOnlineServer) {
	s.RegisterService(&_TypingAndOnline_serviceDesc, srv)
}

func _TypingAndOnline_Typing_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestTyping)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TypingAndOnlineServer).Typing(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dialog.TypingAndOnline/Typing",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TypingAndOnlineServer).Typing(ctx, req.(*RequestTyping))
	}
	return interceptor(ctx, in, info, handler)
}

func _TypingAndOnline_StopTyping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestStopTyping)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TypingAndOnlineServer).StopTyping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dialog.TypingAndOnline/StopTyping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TypingAndOnlineServer).StopTyping(ctx, req.(*RequestStopTyping))
	}
	return interceptor(ctx, in, info, handler)
}

func _TypingAndOnline_SetOnline_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestSetOnline)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TypingAndOnlineServer).SetOnline(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dialog.TypingAndOnline/SetOnline",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TypingAndOnlineServer).SetOnline(ctx, req.(*RequestSetOnline))
	}
	return interceptor(ctx, in, info, handler)
}

func _TypingAndOnline_PauseNotifications_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestPauseNotifications)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TypingAndOnlineServer).PauseNotifications(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dialog.TypingAndOnline/PauseNotifications",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TypingAndOnlineServer).PauseNotifications(ctx, req.(*RequestPauseNotifications))
	}
	return interceptor(ctx, in, info, handler)
}

func _TypingAndOnline_RestoreNotifications_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestRestoreNotifications)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TypingAndOnlineServer).RestoreNotifications(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dialog.TypingAndOnline/RestoreNotifications",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TypingAndOnlineServer).RestoreNotifications(ctx, req.(*RequestRestoreNotifications))
	}
	return interceptor(ctx, in, info, handler)
}

func _TypingAndOnline_GetUserLastPresence_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestGetUserLastPresence)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TypingAndOnlineServer).GetUserLastPresence(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dialog.TypingAndOnline/GetUserLastPresence",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TypingAndOnlineServer).GetUserLastPresence(ctx, req.(*RequestGetUserLastPresence))
	}
	return interceptor(ctx, in, info, handler)
}

var _TypingAndOnline_serviceDesc = grpc.ServiceDesc{
	ServiceName: "dialog.TypingAndOnline",
	HandlerType: (*TypingAndOnlineServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Typing",
			Handler:    _TypingAndOnline_Typing_Handler,
		},
		{
			MethodName: "StopTyping",
			Handler:    _TypingAndOnline_StopTyping_Handler,
		},
		{
			MethodName: "SetOnline",
			Handler:    _TypingAndOnline_SetOnline_Handler,
		},
		{
			MethodName: "PauseNotifications",
			Handler:    _TypingAndOnline_PauseNotifications_Handler,
		},
		{
			MethodName: "RestoreNotifications",
			Handler:    _TypingAndOnline_RestoreNotifications_Handler,
		},
		{
			MethodName: "GetUserLastPresence",
			Handler:    _TypingAndOnline_GetUserLastPresence_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "typing_and_online.proto",
}

func (m *RequestTyping) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestTyping) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RequestTyping) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TypingType != 0 {
		i = encodeVarintTypingAndOnline(dAtA, i, uint64(m.TypingType))
		i--
		dAtA[i] = 0x18
	}
	if m.Peer != nil {
		{
			size, err := m.Peer.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypingAndOnline(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RequestStopTyping) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestStopTyping) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RequestStopTyping) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TypingType != 0 {
		i = encodeVarintTypingAndOnline(dAtA, i, uint64(m.TypingType))
		i--
		dAtA[i] = 0x10
	}
	if m.Peer != nil {
		{
			size, err := m.Peer.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypingAndOnline(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RequestSetOnline) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestSetOnline) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RequestSetOnline) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.DeviceCategory != nil {
		{
			size, err := m.DeviceCategory.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypingAndOnline(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.DeviceType != 0 {
		i = encodeVarintTypingAndOnline(dAtA, i, uint64(m.DeviceType))
		i--
		dAtA[i] = 0x18
	}
	if m.Timeout != 0 {
		i = encodeVarintTypingAndOnline(dAtA, i, uint64(m.Timeout))
		i--
		dAtA[i] = 0x10
	}
	if m.IsOnline {
		i--
		if m.IsOnline {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *UpdatePauseNotifications) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdatePauseNotifications) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdatePauseNotifications) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Timeout != 0 {
		i = encodeVarintTypingAndOnline(dAtA, i, uint64(m.Timeout))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *UpdateRestoreNotifications) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateRestoreNotifications) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateRestoreNotifications) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *RequestPauseNotifications) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestPauseNotifications) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RequestPauseNotifications) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Timeout != 0 {
		i = encodeVarintTypingAndOnline(dAtA, i, uint64(m.Timeout))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *RequestRestoreNotifications) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestRestoreNotifications) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RequestRestoreNotifications) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *UpdateTyping) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateTyping) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateTyping) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TypingType != 0 {
		i = encodeVarintTypingAndOnline(dAtA, i, uint64(m.TypingType))
		i--
		dAtA[i] = 0x18
	}
	if m.Uid != 0 {
		i = encodeVarintTypingAndOnline(dAtA, i, uint64(m.Uid))
		i--
		dAtA[i] = 0x10
	}
	if m.Peer != nil {
		{
			size, err := m.Peer.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypingAndOnline(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UpdateTypingStop) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateTypingStop) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateTypingStop) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TypingType != 0 {
		i = encodeVarintTypingAndOnline(dAtA, i, uint64(m.TypingType))
		i--
		dAtA[i] = 0x18
	}
	if m.Uid != 0 {
		i = encodeVarintTypingAndOnline(dAtA, i, uint64(m.Uid))
		i--
		dAtA[i] = 0x10
	}
	if m.Peer != nil {
		{
			size, err := m.Peer.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypingAndOnline(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UpdateUserOnline) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateUserOnline) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateUserOnline) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.DeviceCategory != nil {
		{
			size, err := m.DeviceCategory.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypingAndOnline(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.DeviceType != 0 {
		i = encodeVarintTypingAndOnline(dAtA, i, uint64(m.DeviceType))
		i--
		dAtA[i] = 0x10
	}
	if m.Uid != 0 {
		i = encodeVarintTypingAndOnline(dAtA, i, uint64(m.Uid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *UpdateUserOffline) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateUserOffline) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateUserOffline) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.DeviceCategory != nil {
		{
			size, err := m.DeviceCategory.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypingAndOnline(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.DeviceType != 0 {
		i = encodeVarintTypingAndOnline(dAtA, i, uint64(m.DeviceType))
		i--
		dAtA[i] = 0x10
	}
	if m.Uid != 0 {
		i = encodeVarintTypingAndOnline(dAtA, i, uint64(m.Uid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *UpdateUserLastSeen) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateUserLastSeen) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateUserLastSeen) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.DeviceCategory != nil {
		{
			size, err := m.DeviceCategory.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypingAndOnline(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.DeviceType != 0 {
		i = encodeVarintTypingAndOnline(dAtA, i, uint64(m.DeviceType))
		i--
		dAtA[i] = 0x18
	}
	if m.Date != 0 {
		i = encodeVarintTypingAndOnline(dAtA, i, uint64(m.Date))
		i--
		dAtA[i] = 0x10
	}
	if m.Uid != 0 {
		i = encodeVarintTypingAndOnline(dAtA, i, uint64(m.Uid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *UpdateGroupOnline) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateGroupOnline) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateGroupOnline) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Count != 0 {
		i = encodeVarintTypingAndOnline(dAtA, i, uint64(m.Count))
		i--
		dAtA[i] = 0x10
	}
	if m.GroupId != 0 {
		i = encodeVarintTypingAndOnline(dAtA, i, uint64(m.GroupId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *RequestGetUserLastPresence) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestGetUserLastPresence) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RequestGetUserLastPresence) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.UserOutPeer != nil {
		{
			size, err := m.UserOutPeer.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypingAndOnline(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ResponseUserLastPresence) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResponseUserLastPresence) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ResponseUserLastPresence) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Payload != nil {
		{
			size := m.Payload.Size()
			i -= size
			if _, err := m.Payload.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *ResponseUserLastPresence_LastOnlineAt) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ResponseUserLastPresence_LastOnlineAt) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.LastOnlineAt != nil {
		{
			size, err := m.LastOnlineAt.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypingAndOnline(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}
func (m *ResponseUserLastPresence_NotFoundError) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ResponseUserLastPresence_NotFoundError) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.NotFoundError != nil {
		{
			size, err := m.NotFoundError.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypingAndOnline(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *ResponseUserLastPresence_UserNotFoundError) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResponseUserLastPresence_UserNotFoundError) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ResponseUserLastPresence_UserNotFoundError) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintTypingAndOnline(dAtA []byte, offset int, v uint64) int {
	offset -= sovTypingAndOnline(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *RequestTyping) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Peer != nil {
		l = m.Peer.Size()
		n += 1 + l + sovTypingAndOnline(uint64(l))
	}
	if m.TypingType != 0 {
		n += 1 + sovTypingAndOnline(uint64(m.TypingType))
	}
	return n
}

func (m *RequestStopTyping) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Peer != nil {
		l = m.Peer.Size()
		n += 1 + l + sovTypingAndOnline(uint64(l))
	}
	if m.TypingType != 0 {
		n += 1 + sovTypingAndOnline(uint64(m.TypingType))
	}
	return n
}

func (m *RequestSetOnline) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IsOnline {
		n += 2
	}
	if m.Timeout != 0 {
		n += 1 + sovTypingAndOnline(uint64(m.Timeout))
	}
	if m.DeviceType != 0 {
		n += 1 + sovTypingAndOnline(uint64(m.DeviceType))
	}
	if m.DeviceCategory != nil {
		l = m.DeviceCategory.Size()
		n += 1 + l + sovTypingAndOnline(uint64(l))
	}
	return n
}

func (m *UpdatePauseNotifications) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Timeout != 0 {
		n += 1 + sovTypingAndOnline(uint64(m.Timeout))
	}
	return n
}

func (m *UpdateRestoreNotifications) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *RequestPauseNotifications) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Timeout != 0 {
		n += 1 + sovTypingAndOnline(uint64(m.Timeout))
	}
	return n
}

func (m *RequestRestoreNotifications) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *UpdateTyping) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Peer != nil {
		l = m.Peer.Size()
		n += 1 + l + sovTypingAndOnline(uint64(l))
	}
	if m.Uid != 0 {
		n += 1 + sovTypingAndOnline(uint64(m.Uid))
	}
	if m.TypingType != 0 {
		n += 1 + sovTypingAndOnline(uint64(m.TypingType))
	}
	return n
}

func (m *UpdateTypingStop) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Peer != nil {
		l = m.Peer.Size()
		n += 1 + l + sovTypingAndOnline(uint64(l))
	}
	if m.Uid != 0 {
		n += 1 + sovTypingAndOnline(uint64(m.Uid))
	}
	if m.TypingType != 0 {
		n += 1 + sovTypingAndOnline(uint64(m.TypingType))
	}
	return n
}

func (m *UpdateUserOnline) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Uid != 0 {
		n += 1 + sovTypingAndOnline(uint64(m.Uid))
	}
	if m.DeviceType != 0 {
		n += 1 + sovTypingAndOnline(uint64(m.DeviceType))
	}
	if m.DeviceCategory != nil {
		l = m.DeviceCategory.Size()
		n += 1 + l + sovTypingAndOnline(uint64(l))
	}
	return n
}

func (m *UpdateUserOffline) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Uid != 0 {
		n += 1 + sovTypingAndOnline(uint64(m.Uid))
	}
	if m.DeviceType != 0 {
		n += 1 + sovTypingAndOnline(uint64(m.DeviceType))
	}
	if m.DeviceCategory != nil {
		l = m.DeviceCategory.Size()
		n += 1 + l + sovTypingAndOnline(uint64(l))
	}
	return n
}

func (m *UpdateUserLastSeen) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Uid != 0 {
		n += 1 + sovTypingAndOnline(uint64(m.Uid))
	}
	if m.Date != 0 {
		n += 1 + sovTypingAndOnline(uint64(m.Date))
	}
	if m.DeviceType != 0 {
		n += 1 + sovTypingAndOnline(uint64(m.DeviceType))
	}
	if m.DeviceCategory != nil {
		l = m.DeviceCategory.Size()
		n += 1 + l + sovTypingAndOnline(uint64(l))
	}
	return n
}

func (m *UpdateGroupOnline) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.GroupId != 0 {
		n += 1 + sovTypingAndOnline(uint64(m.GroupId))
	}
	if m.Count != 0 {
		n += 1 + sovTypingAndOnline(uint64(m.Count))
	}
	return n
}

func (m *RequestGetUserLastPresence) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UserOutPeer != nil {
		l = m.UserOutPeer.Size()
		n += 1 + l + sovTypingAndOnline(uint64(l))
	}
	return n
}

func (m *ResponseUserLastPresence) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Payload != nil {
		n += m.Payload.Size()
	}
	return n
}

func (m *ResponseUserLastPresence_LastOnlineAt) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.LastOnlineAt != nil {
		l = m.LastOnlineAt.Size()
		n += 1 + l + sovTypingAndOnline(uint64(l))
	}
	return n
}
func (m *ResponseUserLastPresence_NotFoundError) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NotFoundError != nil {
		l = m.NotFoundError.Size()
		n += 1 + l + sovTypingAndOnline(uint64(l))
	}
	return n
}
func (m *ResponseUserLastPresence_UserNotFoundError) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovTypingAndOnline(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTypingAndOnline(x uint64) (n int) {
	return sovTypingAndOnline(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *RequestTyping) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RequestTyping{`,
		`Peer:` + strings.Replace(fmt.Sprintf("%v", this.Peer), "OutPeer", "OutPeer", 1) + `,`,
		`TypingType:` + fmt.Sprintf("%v", this.TypingType) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RequestStopTyping) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RequestStopTyping{`,
		`Peer:` + strings.Replace(fmt.Sprintf("%v", this.Peer), "OutPeer", "OutPeer", 1) + `,`,
		`TypingType:` + fmt.Sprintf("%v", this.TypingType) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RequestSetOnline) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RequestSetOnline{`,
		`IsOnline:` + fmt.Sprintf("%v", this.IsOnline) + `,`,
		`Timeout:` + fmt.Sprintf("%v", this.Timeout) + `,`,
		`DeviceType:` + fmt.Sprintf("%v", this.DeviceType) + `,`,
		`DeviceCategory:` + strings.Replace(fmt.Sprintf("%v", this.DeviceCategory), "StringValue", "types.StringValue", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdatePauseNotifications) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdatePauseNotifications{`,
		`Timeout:` + fmt.Sprintf("%v", this.Timeout) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateRestoreNotifications) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateRestoreNotifications{`,
		`}`,
	}, "")
	return s
}
func (this *RequestPauseNotifications) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RequestPauseNotifications{`,
		`Timeout:` + fmt.Sprintf("%v", this.Timeout) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RequestRestoreNotifications) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RequestRestoreNotifications{`,
		`}`,
	}, "")
	return s
}
func (this *UpdateTyping) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateTyping{`,
		`Peer:` + strings.Replace(fmt.Sprintf("%v", this.Peer), "Peer", "Peer", 1) + `,`,
		`Uid:` + fmt.Sprintf("%v", this.Uid) + `,`,
		`TypingType:` + fmt.Sprintf("%v", this.TypingType) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateTypingStop) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateTypingStop{`,
		`Peer:` + strings.Replace(fmt.Sprintf("%v", this.Peer), "Peer", "Peer", 1) + `,`,
		`Uid:` + fmt.Sprintf("%v", this.Uid) + `,`,
		`TypingType:` + fmt.Sprintf("%v", this.TypingType) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateUserOnline) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateUserOnline{`,
		`Uid:` + fmt.Sprintf("%v", this.Uid) + `,`,
		`DeviceType:` + fmt.Sprintf("%v", this.DeviceType) + `,`,
		`DeviceCategory:` + strings.Replace(fmt.Sprintf("%v", this.DeviceCategory), "StringValue", "types.StringValue", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateUserOffline) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateUserOffline{`,
		`Uid:` + fmt.Sprintf("%v", this.Uid) + `,`,
		`DeviceType:` + fmt.Sprintf("%v", this.DeviceType) + `,`,
		`DeviceCategory:` + strings.Replace(fmt.Sprintf("%v", this.DeviceCategory), "StringValue", "types.StringValue", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateUserLastSeen) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateUserLastSeen{`,
		`Uid:` + fmt.Sprintf("%v", this.Uid) + `,`,
		`Date:` + fmt.Sprintf("%v", this.Date) + `,`,
		`DeviceType:` + fmt.Sprintf("%v", this.DeviceType) + `,`,
		`DeviceCategory:` + strings.Replace(fmt.Sprintf("%v", this.DeviceCategory), "StringValue", "types.StringValue", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateGroupOnline) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateGroupOnline{`,
		`GroupId:` + fmt.Sprintf("%v", this.GroupId) + `,`,
		`Count:` + fmt.Sprintf("%v", this.Count) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RequestGetUserLastPresence) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RequestGetUserLastPresence{`,
		`UserOutPeer:` + strings.Replace(fmt.Sprintf("%v", this.UserOutPeer), "UserOutPeer", "UserOutPeer", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ResponseUserLastPresence) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ResponseUserLastPresence{`,
		`Payload:` + fmt.Sprintf("%v", this.Payload) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ResponseUserLastPresence_LastOnlineAt) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ResponseUserLastPresence_LastOnlineAt{`,
		`LastOnlineAt:` + strings.Replace(fmt.Sprintf("%v", this.LastOnlineAt), "Timestamp", "types.Timestamp", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ResponseUserLastPresence_NotFoundError) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ResponseUserLastPresence_NotFoundError{`,
		`NotFoundError:` + strings.Replace(fmt.Sprintf("%v", this.NotFoundError), "ResponseUserLastPresence_UserNotFoundError", "ResponseUserLastPresence_UserNotFoundError", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ResponseUserLastPresence_UserNotFoundError) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ResponseUserLastPresence_UserNotFoundError{`,
		`}`,
	}, "")
	return s
}
func valueToStringTypingAndOnline(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *RequestTyping) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypingAndOnline
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestTyping: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestTyping: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Peer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypingAndOnline
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypingAndOnline
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypingAndOnline
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Peer == nil {
				m.Peer = &OutPeer{}
			}
			if err := m.Peer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TypingType", wireType)
			}
			m.TypingType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypingAndOnline
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TypingType |= TypingType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTypingAndOnline(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypingAndOnline
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypingAndOnline
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestStopTyping) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypingAndOnline
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestStopTyping: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestStopTyping: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Peer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypingAndOnline
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypingAndOnline
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypingAndOnline
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Peer == nil {
				m.Peer = &OutPeer{}
			}
			if err := m.Peer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TypingType", wireType)
			}
			m.TypingType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypingAndOnline
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TypingType |= TypingType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTypingAndOnline(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypingAndOnline
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypingAndOnline
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestSetOnline) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypingAndOnline
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestSetOnline: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestSetOnline: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsOnline", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypingAndOnline
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsOnline = bool(v != 0)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timeout", wireType)
			}
			m.Timeout = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypingAndOnline
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Timeout |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeviceType", wireType)
			}
			m.DeviceType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypingAndOnline
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DeviceType |= DeviceType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeviceCategory", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypingAndOnline
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypingAndOnline
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypingAndOnline
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DeviceCategory == nil {
				m.DeviceCategory = &types.StringValue{}
			}
			if err := m.DeviceCategory.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypingAndOnline(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypingAndOnline
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypingAndOnline
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdatePauseNotifications) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypingAndOnline
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdatePauseNotifications: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdatePauseNotifications: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timeout", wireType)
			}
			m.Timeout = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypingAndOnline
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Timeout |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTypingAndOnline(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypingAndOnline
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypingAndOnline
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateRestoreNotifications) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypingAndOnline
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateRestoreNotifications: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateRestoreNotifications: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTypingAndOnline(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypingAndOnline
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypingAndOnline
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestPauseNotifications) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypingAndOnline
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestPauseNotifications: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestPauseNotifications: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timeout", wireType)
			}
			m.Timeout = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypingAndOnline
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Timeout |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTypingAndOnline(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypingAndOnline
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypingAndOnline
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestRestoreNotifications) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypingAndOnline
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestRestoreNotifications: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestRestoreNotifications: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTypingAndOnline(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypingAndOnline
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypingAndOnline
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateTyping) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypingAndOnline
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateTyping: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateTyping: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Peer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypingAndOnline
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypingAndOnline
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypingAndOnline
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Peer == nil {
				m.Peer = &Peer{}
			}
			if err := m.Peer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			m.Uid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypingAndOnline
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uid |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TypingType", wireType)
			}
			m.TypingType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypingAndOnline
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TypingType |= TypingType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTypingAndOnline(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypingAndOnline
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypingAndOnline
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateTypingStop) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypingAndOnline
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateTypingStop: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateTypingStop: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Peer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypingAndOnline
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypingAndOnline
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypingAndOnline
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Peer == nil {
				m.Peer = &Peer{}
			}
			if err := m.Peer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			m.Uid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypingAndOnline
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uid |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TypingType", wireType)
			}
			m.TypingType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypingAndOnline
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TypingType |= TypingType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTypingAndOnline(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypingAndOnline
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypingAndOnline
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateUserOnline) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypingAndOnline
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateUserOnline: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateUserOnline: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			m.Uid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypingAndOnline
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uid |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeviceType", wireType)
			}
			m.DeviceType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypingAndOnline
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DeviceType |= DeviceType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeviceCategory", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypingAndOnline
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypingAndOnline
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypingAndOnline
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DeviceCategory == nil {
				m.DeviceCategory = &types.StringValue{}
			}
			if err := m.DeviceCategory.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypingAndOnline(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypingAndOnline
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypingAndOnline
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateUserOffline) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypingAndOnline
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateUserOffline: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateUserOffline: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			m.Uid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypingAndOnline
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uid |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeviceType", wireType)
			}
			m.DeviceType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypingAndOnline
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DeviceType |= DeviceType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeviceCategory", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypingAndOnline
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypingAndOnline
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypingAndOnline
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DeviceCategory == nil {
				m.DeviceCategory = &types.StringValue{}
			}
			if err := m.DeviceCategory.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypingAndOnline(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypingAndOnline
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypingAndOnline
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateUserLastSeen) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypingAndOnline
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateUserLastSeen: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateUserLastSeen: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			m.Uid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypingAndOnline
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uid |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Date", wireType)
			}
			m.Date = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypingAndOnline
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Date |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeviceType", wireType)
			}
			m.DeviceType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypingAndOnline
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DeviceType |= DeviceType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeviceCategory", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypingAndOnline
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypingAndOnline
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypingAndOnline
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DeviceCategory == nil {
				m.DeviceCategory = &types.StringValue{}
			}
			if err := m.DeviceCategory.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypingAndOnline(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypingAndOnline
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypingAndOnline
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateGroupOnline) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypingAndOnline
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateGroupOnline: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateGroupOnline: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupId", wireType)
			}
			m.GroupId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypingAndOnline
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GroupId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypingAndOnline
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTypingAndOnline(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypingAndOnline
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypingAndOnline
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestGetUserLastPresence) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypingAndOnline
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestGetUserLastPresence: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestGetUserLastPresence: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserOutPeer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypingAndOnline
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypingAndOnline
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypingAndOnline
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UserOutPeer == nil {
				m.UserOutPeer = &UserOutPeer{}
			}
			if err := m.UserOutPeer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypingAndOnline(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypingAndOnline
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypingAndOnline
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResponseUserLastPresence) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypingAndOnline
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResponseUserLastPresence: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResponseUserLastPresence: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastOnlineAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypingAndOnline
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypingAndOnline
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypingAndOnline
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &types.Timestamp{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Payload = &ResponseUserLastPresence_LastOnlineAt{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NotFoundError", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypingAndOnline
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypingAndOnline
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypingAndOnline
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ResponseUserLastPresence_UserNotFoundError{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Payload = &ResponseUserLastPresence_NotFoundError{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypingAndOnline(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypingAndOnline
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypingAndOnline
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResponseUserLastPresence_UserNotFoundError) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypingAndOnline
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserNotFoundError: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserNotFoundError: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTypingAndOnline(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypingAndOnline
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypingAndOnline
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTypingAndOnline(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTypingAndOnline
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypingAndOnline
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypingAndOnline
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTypingAndOnline
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTypingAndOnline
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTypingAndOnline
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTypingAndOnline        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTypingAndOnline          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTypingAndOnline = fmt.Errorf("proto: unexpected end of group")
)
