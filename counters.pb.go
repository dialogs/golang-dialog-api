// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: counters.proto

package dialog

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	types "github.com/gogo/protobuf/types"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Unread dialogs
type UnreadDialog struct {
	Peer    *Peer `protobuf:"bytes,1,opt,name=peer,proto3" json:"peer,omitempty"`
	Counter int32 `protobuf:"varint,2,opt,name=counter,proto3" json:"counter,omitempty"`
}

func (m *UnreadDialog) Reset()      { *m = UnreadDialog{} }
func (*UnreadDialog) ProtoMessage() {}
func (*UnreadDialog) Descriptor() ([]byte, []int) {
	return fileDescriptor_ac446ca88f986543, []int{0}
}
func (m *UnreadDialog) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UnreadDialog) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UnreadDialog.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UnreadDialog) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UnreadDialog.Merge(m, src)
}
func (m *UnreadDialog) XXX_Size() int {
	return m.Size()
}
func (m *UnreadDialog) XXX_DiscardUnknown() {
	xxx_messageInfo_UnreadDialog.DiscardUnknown(m)
}

var xxx_messageInfo_UnreadDialog proto.InternalMessageInfo

func (m *UnreadDialog) GetPeer() *Peer {
	if m != nil {
		return m.Peer
	}
	return nil
}

func (m *UnreadDialog) GetCounter() int32 {
	if m != nil {
		return m.Counter
	}
	return 0
}

type AppCounters struct {
	/// Global unread counter
	GlobalCounter *types.Int32Value `protobuf:"bytes,1,opt,name=global_counter,json=globalCounter,proto3" json:"global_counter,omitempty"`
	/// Global count of dialogs with positive counter values
	GlobalDialogsCounter *types.Int32Value `protobuf:"bytes,2,opt,name=global_dialogs_counter,json=globalDialogsCounter,proto3" json:"global_dialogs_counter,omitempty"`
	/// map of chat peer id to unread to counters
	UnreadDialogs []*UnreadDialog `protobuf:"bytes,3,rep,name=unread_dialogs,json=unreadDialogs,proto3" json:"unread_dialogs,omitempty"`
}

func (m *AppCounters) Reset()      { *m = AppCounters{} }
func (*AppCounters) ProtoMessage() {}
func (*AppCounters) Descriptor() ([]byte, []int) {
	return fileDescriptor_ac446ca88f986543, []int{1}
}
func (m *AppCounters) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AppCounters) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AppCounters.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AppCounters) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AppCounters.Merge(m, src)
}
func (m *AppCounters) XXX_Size() int {
	return m.Size()
}
func (m *AppCounters) XXX_DiscardUnknown() {
	xxx_messageInfo_AppCounters.DiscardUnknown(m)
}

var xxx_messageInfo_AppCounters proto.InternalMessageInfo

func (m *AppCounters) GetGlobalCounter() *types.Int32Value {
	if m != nil {
		return m.GlobalCounter
	}
	return nil
}

func (m *AppCounters) GetGlobalDialogsCounter() *types.Int32Value {
	if m != nil {
		return m.GlobalDialogsCounter
	}
	return nil
}

func (m *AppCounters) GetUnreadDialogs() []*UnreadDialog {
	if m != nil {
		return m.UnreadDialogs
	}
	return nil
}

/// deprecated
type UpdateCountersChanged struct {
	Counters *AppCounters      `protobuf:"bytes,1,opt,name=counters,proto3" json:"counters,omitempty"`
	Ts       *types.Int64Value `protobuf:"bytes,2,opt,name=ts,proto3" json:"ts,omitempty"`
}

func (m *UpdateCountersChanged) Reset()      { *m = UpdateCountersChanged{} }
func (*UpdateCountersChanged) ProtoMessage() {}
func (*UpdateCountersChanged) Descriptor() ([]byte, []int) {
	return fileDescriptor_ac446ca88f986543, []int{2}
}
func (m *UpdateCountersChanged) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateCountersChanged) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateCountersChanged.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateCountersChanged) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateCountersChanged.Merge(m, src)
}
func (m *UpdateCountersChanged) XXX_Size() int {
	return m.Size()
}
func (m *UpdateCountersChanged) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateCountersChanged.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateCountersChanged proto.InternalMessageInfo

func (m *UpdateCountersChanged) GetCounters() *AppCounters {
	if m != nil {
		return m.Counters
	}
	return nil
}

func (m *UpdateCountersChanged) GetTs() *types.Int64Value {
	if m != nil {
		return m.Ts
	}
	return nil
}

func init() {
	proto.RegisterType((*UnreadDialog)(nil), "dialog.UnreadDialog")
	proto.RegisterType((*AppCounters)(nil), "dialog.AppCounters")
	proto.RegisterType((*UpdateCountersChanged)(nil), "dialog.UpdateCountersChanged")
}

func init() { proto.RegisterFile("counters.proto", fileDescriptor_ac446ca88f986543) }

var fileDescriptor_ac446ca88f986543 = []byte{
	// 411 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x92, 0x3f, 0x8f, 0xd3, 0x30,
	0x18, 0xc6, 0xe3, 0x14, 0x5a, 0x70, 0xda, 0x4a, 0x84, 0x16, 0x55, 0x45, 0xb2, 0xaa, 0x2e, 0x74,
	0x72, 0x50, 0x8b, 0x18, 0x18, 0x90, 0x68, 0x59, 0x60, 0x82, 0x4a, 0x65, 0x60, 0x29, 0x4e, 0xe2,
	0xa6, 0x96, 0x4c, 0x6c, 0xc5, 0x49, 0x59, 0x99, 0x19, 0x10, 0x12, 0x5f, 0x82, 0x8f, 0xc2, 0xd8,
	0xb1, 0x23, 0x4d, 0x17, 0xc4, 0xd4, 0x8f, 0x80, 0x2e, 0x8e, 0x7b, 0x51, 0xef, 0x74, 0xd2, 0x4d,
	0x96, 0xde, 0x3f, 0xbf, 0xe7, 0x7d, 0x1e, 0x19, 0xb6, 0x03, 0x91, 0xc5, 0x29, 0x4d, 0x14, 0x96,
	0x89, 0x48, 0x85, 0x5b, 0x0f, 0x19, 0xe1, 0x22, 0xea, 0xa3, 0x48, 0x88, 0x88, 0x53, 0xaf, 0xa8,
	0xfa, 0xd9, 0xca, 0xfb, 0x92, 0x10, 0x29, 0x4f, 0x73, 0xfd, 0x07, 0x21, 0x5d, 0xb1, 0x98, 0xa5,
	0x4c, 0xc4, 0xa6, 0xe4, 0x48, 0x7a, 0xd9, 0xef, 0xaa, 0x80, 0x70, 0x22, 0x7d, 0xaf, 0x7c, 0x75,
	0x79, 0xb8, 0x86, 0xcd, 0x45, 0x9c, 0x50, 0x12, 0xbe, 0x2e, 0x64, 0x5c, 0x0f, 0xde, 0xb9, 0xd8,
	0xea, 0x81, 0x01, 0x18, 0x39, 0xe3, 0x26, 0xd6, 0xea, 0xf8, 0x1d, 0xa5, 0xc9, 0xb4, 0xf5, 0xed,
	0xdf, 0xd3, 0xfb, 0xb0, 0xb1, 0x61, 0x8a, 0xf9, 0x9c, 0xce, 0x8b, 0x41, 0xf7, 0x09, 0x6c, 0x94,
	0x17, 0xf7, 0xec, 0x01, 0x18, 0xdd, 0x3d, 0x9f, 0x32, 0xdd, 0xe1, 0x77, 0x1b, 0x3a, 0xaf, 0xa4,
	0x9c, 0x95, 0xf6, 0xdc, 0xf7, 0xb0, 0x1d, 0x71, 0xe1, 0x13, 0xbe, 0x34, 0xfb, 0x5a, 0xf3, 0x31,
	0xd6, 0x4e, 0xb1, 0x71, 0x8a, 0xdf, 0xc4, 0xe9, 0x64, 0xfc, 0x81, 0xf0, 0x8c, 0x9e, 0xc3, 0x5b,
	0x9a, 0x50, 0x32, 0xdd, 0x4f, 0xf0, 0x51, 0x89, 0xd4, 0x67, 0xab, 0x65, 0xf5, 0xb4, 0xdb, 0xa1,
	0x3b, 0x9a, 0xa4, 0x63, 0x51, 0x46, 0xe1, 0x2d, 0x6c, 0x67, 0x45, 0x5c, 0x46, 0xa1, 0x57, 0x1b,
	0xd4, 0x46, 0xce, 0xb8, 0x63, 0x82, 0xaa, 0x86, 0x79, 0xe5, 0xda, 0xac, 0xd2, 0x54, 0xc3, 0x9f,
	0x00, 0x76, 0x17, 0x32, 0x24, 0x29, 0x35, 0x99, 0xcc, 0xd6, 0x24, 0x8e, 0x68, 0xe8, 0xbe, 0x84,
	0xf7, 0xcc, 0x2f, 0x28, 0x43, 0x79, 0x68, 0xf8, 0x95, 0x04, 0xcf, 0xf1, 0xa7, 0x1d, 0xf7, 0x05,
	0xb4, 0x53, 0x75, 0x93, 0xe7, 0xe7, 0xcf, 0xae, 0xf5, 0x6c, 0xa7, 0x6a, 0x3a, 0xdf, 0xee, 0x91,
	0xb5, 0xdb, 0x23, 0xeb, 0xb8, 0x47, 0xe0, 0x6b, 0x8e, 0xc0, 0xaf, 0x1c, 0x81, 0xdf, 0x39, 0x02,
	0xdb, 0x1c, 0x81, 0x3f, 0x39, 0x02, 0x7f, 0x73, 0x64, 0x1d, 0x73, 0x04, 0x7e, 0x1c, 0x90, 0xb5,
	0x3d, 0x20, 0x6b, 0x77, 0x40, 0x16, 0xec, 0xb0, 0xcf, 0x38, 0xe4, 0x11, 0x8e, 0x12, 0x19, 0x60,
	0x45, 0x93, 0x0d, 0x0b, 0xa8, 0xfa, 0x58, 0xfe, 0x5d, 0xbf, 0x5e, 0x68, 0x4f, 0xfe, 0x07, 0x00,
	0x00, 0xff, 0xff, 0xcb, 0x76, 0xf2, 0x41, 0xdc, 0x02, 0x00, 0x00,
}

func (this *UnreadDialog) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UnreadDialog)
	if !ok {
		that2, ok := that.(UnreadDialog)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Peer.Equal(that1.Peer) {
		return false
	}
	if this.Counter != that1.Counter {
		return false
	}
	return true
}
func (this *AppCounters) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AppCounters)
	if !ok {
		that2, ok := that.(AppCounters)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.GlobalCounter.Equal(that1.GlobalCounter) {
		return false
	}
	if !this.GlobalDialogsCounter.Equal(that1.GlobalDialogsCounter) {
		return false
	}
	if len(this.UnreadDialogs) != len(that1.UnreadDialogs) {
		return false
	}
	for i := range this.UnreadDialogs {
		if !this.UnreadDialogs[i].Equal(that1.UnreadDialogs[i]) {
			return false
		}
	}
	return true
}
func (this *UpdateCountersChanged) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpdateCountersChanged)
	if !ok {
		that2, ok := that.(UpdateCountersChanged)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Counters.Equal(that1.Counters) {
		return false
	}
	if !this.Ts.Equal(that1.Ts) {
		return false
	}
	return true
}
func (this *UnreadDialog) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&dialog.UnreadDialog{")
	if this.Peer != nil {
		s = append(s, "Peer: "+fmt.Sprintf("%#v", this.Peer)+",\n")
	}
	s = append(s, "Counter: "+fmt.Sprintf("%#v", this.Counter)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *AppCounters) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&dialog.AppCounters{")
	if this.GlobalCounter != nil {
		s = append(s, "GlobalCounter: "+fmt.Sprintf("%#v", this.GlobalCounter)+",\n")
	}
	if this.GlobalDialogsCounter != nil {
		s = append(s, "GlobalDialogsCounter: "+fmt.Sprintf("%#v", this.GlobalDialogsCounter)+",\n")
	}
	if this.UnreadDialogs != nil {
		s = append(s, "UnreadDialogs: "+fmt.Sprintf("%#v", this.UnreadDialogs)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UpdateCountersChanged) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&dialog.UpdateCountersChanged{")
	if this.Counters != nil {
		s = append(s, "Counters: "+fmt.Sprintf("%#v", this.Counters)+",\n")
	}
	if this.Ts != nil {
		s = append(s, "Ts: "+fmt.Sprintf("%#v", this.Ts)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringCounters(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *UnreadDialog) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UnreadDialog) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UnreadDialog) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Counter != 0 {
		i = encodeVarintCounters(dAtA, i, uint64(m.Counter))
		i--
		dAtA[i] = 0x10
	}
	if m.Peer != nil {
		{
			size, err := m.Peer.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCounters(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AppCounters) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AppCounters) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AppCounters) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.UnreadDialogs) > 0 {
		for iNdEx := len(m.UnreadDialogs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.UnreadDialogs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCounters(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.GlobalDialogsCounter != nil {
		{
			size, err := m.GlobalDialogsCounter.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCounters(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.GlobalCounter != nil {
		{
			size, err := m.GlobalCounter.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCounters(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UpdateCountersChanged) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateCountersChanged) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateCountersChanged) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Ts != nil {
		{
			size, err := m.Ts.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCounters(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Counters != nil {
		{
			size, err := m.Counters.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCounters(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintCounters(dAtA []byte, offset int, v uint64) int {
	offset -= sovCounters(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *UnreadDialog) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Peer != nil {
		l = m.Peer.Size()
		n += 1 + l + sovCounters(uint64(l))
	}
	if m.Counter != 0 {
		n += 1 + sovCounters(uint64(m.Counter))
	}
	return n
}

func (m *AppCounters) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.GlobalCounter != nil {
		l = m.GlobalCounter.Size()
		n += 1 + l + sovCounters(uint64(l))
	}
	if m.GlobalDialogsCounter != nil {
		l = m.GlobalDialogsCounter.Size()
		n += 1 + l + sovCounters(uint64(l))
	}
	if len(m.UnreadDialogs) > 0 {
		for _, e := range m.UnreadDialogs {
			l = e.Size()
			n += 1 + l + sovCounters(uint64(l))
		}
	}
	return n
}

func (m *UpdateCountersChanged) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Counters != nil {
		l = m.Counters.Size()
		n += 1 + l + sovCounters(uint64(l))
	}
	if m.Ts != nil {
		l = m.Ts.Size()
		n += 1 + l + sovCounters(uint64(l))
	}
	return n
}

func sovCounters(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozCounters(x uint64) (n int) {
	return sovCounters(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *UnreadDialog) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UnreadDialog{`,
		`Peer:` + strings.Replace(fmt.Sprintf("%v", this.Peer), "Peer", "Peer", 1) + `,`,
		`Counter:` + fmt.Sprintf("%v", this.Counter) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AppCounters) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForUnreadDialogs := "[]*UnreadDialog{"
	for _, f := range this.UnreadDialogs {
		repeatedStringForUnreadDialogs += strings.Replace(f.String(), "UnreadDialog", "UnreadDialog", 1) + ","
	}
	repeatedStringForUnreadDialogs += "}"
	s := strings.Join([]string{`&AppCounters{`,
		`GlobalCounter:` + strings.Replace(fmt.Sprintf("%v", this.GlobalCounter), "Int32Value", "types.Int32Value", 1) + `,`,
		`GlobalDialogsCounter:` + strings.Replace(fmt.Sprintf("%v", this.GlobalDialogsCounter), "Int32Value", "types.Int32Value", 1) + `,`,
		`UnreadDialogs:` + repeatedStringForUnreadDialogs + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateCountersChanged) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateCountersChanged{`,
		`Counters:` + strings.Replace(this.Counters.String(), "AppCounters", "AppCounters", 1) + `,`,
		`Ts:` + strings.Replace(fmt.Sprintf("%v", this.Ts), "Int64Value", "types.Int64Value", 1) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringCounters(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *UnreadDialog) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCounters
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UnreadDialog: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UnreadDialog: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Peer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCounters
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCounters
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCounters
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Peer == nil {
				m.Peer = &Peer{}
			}
			if err := m.Peer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Counter", wireType)
			}
			m.Counter = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCounters
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Counter |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCounters(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCounters
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCounters
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AppCounters) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCounters
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AppCounters: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AppCounters: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GlobalCounter", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCounters
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCounters
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCounters
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.GlobalCounter == nil {
				m.GlobalCounter = &types.Int32Value{}
			}
			if err := m.GlobalCounter.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GlobalDialogsCounter", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCounters
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCounters
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCounters
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.GlobalDialogsCounter == nil {
				m.GlobalDialogsCounter = &types.Int32Value{}
			}
			if err := m.GlobalDialogsCounter.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnreadDialogs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCounters
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCounters
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCounters
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UnreadDialogs = append(m.UnreadDialogs, &UnreadDialog{})
			if err := m.UnreadDialogs[len(m.UnreadDialogs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCounters(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCounters
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCounters
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateCountersChanged) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCounters
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateCountersChanged: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateCountersChanged: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Counters", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCounters
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCounters
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCounters
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Counters == nil {
				m.Counters = &AppCounters{}
			}
			if err := m.Counters.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ts", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCounters
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCounters
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCounters
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Ts == nil {
				m.Ts = &types.Int64Value{}
			}
			if err := m.Ts.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCounters(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCounters
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCounters
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCounters(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCounters
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCounters
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCounters
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthCounters
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupCounters
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthCounters
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthCounters        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCounters          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupCounters = fmt.Errorf("proto: unexpected end of group")
)
