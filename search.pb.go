// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: search.proto

package dialog

import (
	bytes "bytes"
	context "context"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	types "github.com/gogo/protobuf/types"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strconv "strconv"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type SearchPeerType int32

const (
	SEARCHPEERTYPE_UNKNOWN  SearchPeerType = 0
	SEARCHPEERTYPE_GROUPS   SearchPeerType = 1
	SEARCHPEERTYPE_CONTACTS SearchPeerType = 2
	SEARCHPEERTYPE_PUBLIC   SearchPeerType = 3
)

var SearchPeerType_name = map[int32]string{
	0: "SEARCHPEERTYPE_UNKNOWN",
	1: "SEARCHPEERTYPE_GROUPS",
	2: "SEARCHPEERTYPE_CONTACTS",
	3: "SEARCHPEERTYPE_PUBLIC",
}

var SearchPeerType_value = map[string]int32{
	"SEARCHPEERTYPE_UNKNOWN":  0,
	"SEARCHPEERTYPE_GROUPS":   1,
	"SEARCHPEERTYPE_CONTACTS": 2,
	"SEARCHPEERTYPE_PUBLIC":   3,
}

func (SearchPeerType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_453745cff914010e, []int{0}
}

type SearchContentType int32

const (
	SEARCHCONTENTTYPE_UNKNOWN   SearchContentType = 0
	SEARCHCONTENTTYPE_ANY       SearchContentType = 1
	SEARCHCONTENTTYPE_TEXT      SearchContentType = 2
	SEARCHCONTENTTYPE_LINKS     SearchContentType = 3
	SEARCHCONTENTTYPE_DOCUMENTS SearchContentType = 4
	SEARCHCONTENTTYPE_MEDIA     SearchContentType = 5
	SEARCHCONTENTTYPE_AUDIO     SearchContentType = 6
)

var SearchContentType_name = map[int32]string{
	0: "SEARCHCONTENTTYPE_UNKNOWN",
	1: "SEARCHCONTENTTYPE_ANY",
	2: "SEARCHCONTENTTYPE_TEXT",
	3: "SEARCHCONTENTTYPE_LINKS",
	4: "SEARCHCONTENTTYPE_DOCUMENTS",
	5: "SEARCHCONTENTTYPE_MEDIA",
	6: "SEARCHCONTENTTYPE_AUDIO",
}

var SearchContentType_value = map[string]int32{
	"SEARCHCONTENTTYPE_UNKNOWN":   0,
	"SEARCHCONTENTTYPE_ANY":       1,
	"SEARCHCONTENTTYPE_TEXT":      2,
	"SEARCHCONTENTTYPE_LINKS":     3,
	"SEARCHCONTENTTYPE_DOCUMENTS": 4,
	"SEARCHCONTENTTYPE_MEDIA":     5,
	"SEARCHCONTENTTYPE_AUDIO":     6,
}

func (SearchContentType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_453745cff914010e, []int{1}
}

type SearchDirection int32

const (
	SEARCHDIRECTION_UNKNOWN  SearchDirection = 0
	SEARCHDIRECTION_FORWARD  SearchDirection = 1
	SEARCHDIRECTION_BACKWARD SearchDirection = 2
)

var SearchDirection_name = map[int32]string{
	0: "SEARCHDIRECTION_UNKNOWN",
	1: "SEARCHDIRECTION_FORWARD",
	2: "SEARCHDIRECTION_BACKWARD",
}

var SearchDirection_value = map[string]int32{
	"SEARCHDIRECTION_UNKNOWN":  0,
	"SEARCHDIRECTION_FORWARD":  1,
	"SEARCHDIRECTION_BACKWARD": 2,
}

func (SearchDirection) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_453745cff914010e, []int{2}
}

type SimpleContactSearchCondition struct {
	Text string `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty"`
}

func (m *SimpleContactSearchCondition) Reset()      { *m = SimpleContactSearchCondition{} }
func (*SimpleContactSearchCondition) ProtoMessage() {}
func (*SimpleContactSearchCondition) Descriptor() ([]byte, []int) {
	return fileDescriptor_453745cff914010e, []int{0}
}
func (m *SimpleContactSearchCondition) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SimpleContactSearchCondition) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SimpleContactSearchCondition.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SimpleContactSearchCondition) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SimpleContactSearchCondition.Merge(m, src)
}
func (m *SimpleContactSearchCondition) XXX_Size() int {
	return m.Size()
}
func (m *SimpleContactSearchCondition) XXX_DiscardUnknown() {
	xxx_messageInfo_SimpleContactSearchCondition.DiscardUnknown(m)
}

var xxx_messageInfo_SimpleContactSearchCondition proto.InternalMessageInfo

func (m *SimpleContactSearchCondition) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

type SimpleMessageSearchCondition struct {
	Peer            *Peer             `protobuf:"bytes,1,opt,name=peer,proto3" json:"peer,omitempty"`
	Text            string            `protobuf:"bytes,2,opt,name=text,proto3" json:"text,omitempty"`
	Type            SearchContentType `protobuf:"varint,3,opt,name=type,proto3,enum=dialog.SearchContentType" json:"type,omitempty"`
	SearchDirection SearchDirection   `protobuf:"varint,4,opt,name=search_direction,json=searchDirection,proto3,enum=dialog.SearchDirection" json:"search_direction,omitempty"`
	DateFrom        *types.Int64Value `protobuf:"bytes,5,opt,name=date_from,json=dateFrom,proto3" json:"date_from,omitempty"`
}

func (m *SimpleMessageSearchCondition) Reset()      { *m = SimpleMessageSearchCondition{} }
func (*SimpleMessageSearchCondition) ProtoMessage() {}
func (*SimpleMessageSearchCondition) Descriptor() ([]byte, []int) {
	return fileDescriptor_453745cff914010e, []int{1}
}
func (m *SimpleMessageSearchCondition) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SimpleMessageSearchCondition) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SimpleMessageSearchCondition.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SimpleMessageSearchCondition) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SimpleMessageSearchCondition.Merge(m, src)
}
func (m *SimpleMessageSearchCondition) XXX_Size() int {
	return m.Size()
}
func (m *SimpleMessageSearchCondition) XXX_DiscardUnknown() {
	xxx_messageInfo_SimpleMessageSearchCondition.DiscardUnknown(m)
}

var xxx_messageInfo_SimpleMessageSearchCondition proto.InternalMessageInfo

func (m *SimpleMessageSearchCondition) GetPeer() *Peer {
	if m != nil {
		return m.Peer
	}
	return nil
}

func (m *SimpleMessageSearchCondition) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

func (m *SimpleMessageSearchCondition) GetType() SearchContentType {
	if m != nil {
		return m.Type
	}
	return SEARCHCONTENTTYPE_UNKNOWN
}

func (m *SimpleMessageSearchCondition) GetSearchDirection() SearchDirection {
	if m != nil {
		return m.SearchDirection
	}
	return SEARCHDIRECTION_UNKNOWN
}

func (m *SimpleMessageSearchCondition) GetDateFrom() *types.Int64Value {
	if m != nil {
		return m.DateFrom
	}
	return nil
}

/// Search among contacts/groups/users
type SimplePeerSearchCondition struct {
	PeerType SearchPeerType     `protobuf:"varint,1,opt,name=peer_type,json=peerType,proto3,enum=dialog.SearchPeerType" json:"peer_type,omitempty"`
	Text     *types.StringValue `protobuf:"bytes,2,opt,name=text,proto3" json:"text,omitempty"`
}

func (m *SimplePeerSearchCondition) Reset()      { *m = SimplePeerSearchCondition{} }
func (*SimplePeerSearchCondition) ProtoMessage() {}
func (*SimplePeerSearchCondition) Descriptor() ([]byte, []int) {
	return fileDescriptor_453745cff914010e, []int{2}
}
func (m *SimplePeerSearchCondition) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SimplePeerSearchCondition) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SimplePeerSearchCondition.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SimplePeerSearchCondition) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SimplePeerSearchCondition.Merge(m, src)
}
func (m *SimplePeerSearchCondition) XXX_Size() int {
	return m.Size()
}
func (m *SimplePeerSearchCondition) XXX_DiscardUnknown() {
	xxx_messageInfo_SimplePeerSearchCondition.DiscardUnknown(m)
}

var xxx_messageInfo_SimplePeerSearchCondition proto.InternalMessageInfo

func (m *SimplePeerSearchCondition) GetPeerType() SearchPeerType {
	if m != nil {
		return m.PeerType
	}
	return SEARCHPEERTYPE_UNKNOWN
}

func (m *SimplePeerSearchCondition) GetText() *types.StringValue {
	if m != nil {
		return m.Text
	}
	return nil
}

type SimpleUserProfileSearchCondition struct {
	QueryString string `protobuf:"bytes,1,opt,name=query_string,json=queryString,proto3" json:"query_string,omitempty"`
}

func (m *SimpleUserProfileSearchCondition) Reset()      { *m = SimpleUserProfileSearchCondition{} }
func (*SimpleUserProfileSearchCondition) ProtoMessage() {}
func (*SimpleUserProfileSearchCondition) Descriptor() ([]byte, []int) {
	return fileDescriptor_453745cff914010e, []int{3}
}
func (m *SimpleUserProfileSearchCondition) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SimpleUserProfileSearchCondition) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SimpleUserProfileSearchCondition.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SimpleUserProfileSearchCondition) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SimpleUserProfileSearchCondition.Merge(m, src)
}
func (m *SimpleUserProfileSearchCondition) XXX_Size() int {
	return m.Size()
}
func (m *SimpleUserProfileSearchCondition) XXX_DiscardUnknown() {
	xxx_messageInfo_SimpleUserProfileSearchCondition.DiscardUnknown(m)
}

var xxx_messageInfo_SimpleUserProfileSearchCondition proto.InternalMessageInfo

func (m *SimpleUserProfileSearchCondition) GetQueryString() string {
	if m != nil {
		return m.QueryString
	}
	return ""
}

type SimpleGroupSearchCondition struct {
	QueryString string `protobuf:"bytes,1,opt,name=query_string,json=queryString,proto3" json:"query_string,omitempty"`
}

func (m *SimpleGroupSearchCondition) Reset()      { *m = SimpleGroupSearchCondition{} }
func (*SimpleGroupSearchCondition) ProtoMessage() {}
func (*SimpleGroupSearchCondition) Descriptor() ([]byte, []int) {
	return fileDescriptor_453745cff914010e, []int{4}
}
func (m *SimpleGroupSearchCondition) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SimpleGroupSearchCondition) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SimpleGroupSearchCondition.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SimpleGroupSearchCondition) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SimpleGroupSearchCondition.Merge(m, src)
}
func (m *SimpleGroupSearchCondition) XXX_Size() int {
	return m.Size()
}
func (m *SimpleGroupSearchCondition) XXX_DiscardUnknown() {
	xxx_messageInfo_SimpleGroupSearchCondition.DiscardUnknown(m)
}

var xxx_messageInfo_SimpleGroupSearchCondition proto.InternalMessageInfo

func (m *SimpleGroupSearchCondition) GetQueryString() string {
	if m != nil {
		return m.QueryString
	}
	return ""
}

type Criterion struct {
}

func (m *Criterion) Reset()      { *m = Criterion{} }
func (*Criterion) ProtoMessage() {}
func (*Criterion) Descriptor() ([]byte, []int) {
	return fileDescriptor_453745cff914010e, []int{5}
}
func (m *Criterion) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Criterion) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Criterion.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Criterion) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Criterion.Merge(m, src)
}
func (m *Criterion) XXX_Size() int {
	return m.Size()
}
func (m *Criterion) XXX_DiscardUnknown() {
	xxx_messageInfo_Criterion.DiscardUnknown(m)
}

var xxx_messageInfo_Criterion proto.InternalMessageInfo

type SimpleSearchCondition struct {
	// Types that are valid to be assigned to Criterion:
	//	*SimpleSearchCondition_Contact
	//	*SimpleSearchCondition_Message
	//	*SimpleSearchCondition_Peer
	//	*SimpleSearchCondition_UserProfile
	//	*SimpleSearchCondition_Group
	Criterion isSimpleSearchCondition_Criterion `protobuf_oneof:"criterion"`
}

func (m *SimpleSearchCondition) Reset()      { *m = SimpleSearchCondition{} }
func (*SimpleSearchCondition) ProtoMessage() {}
func (*SimpleSearchCondition) Descriptor() ([]byte, []int) {
	return fileDescriptor_453745cff914010e, []int{6}
}
func (m *SimpleSearchCondition) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SimpleSearchCondition) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SimpleSearchCondition.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SimpleSearchCondition) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SimpleSearchCondition.Merge(m, src)
}
func (m *SimpleSearchCondition) XXX_Size() int {
	return m.Size()
}
func (m *SimpleSearchCondition) XXX_DiscardUnknown() {
	xxx_messageInfo_SimpleSearchCondition.DiscardUnknown(m)
}

var xxx_messageInfo_SimpleSearchCondition proto.InternalMessageInfo

type isSimpleSearchCondition_Criterion interface {
	isSimpleSearchCondition_Criterion()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type SimpleSearchCondition_Contact struct {
	Contact *SimpleContactSearchCondition `protobuf:"bytes,1,opt,name=contact,proto3,oneof" json:"contact,omitempty"`
}
type SimpleSearchCondition_Message struct {
	Message *SimpleMessageSearchCondition `protobuf:"bytes,2,opt,name=message,proto3,oneof" json:"message,omitempty"`
}
type SimpleSearchCondition_Peer struct {
	Peer *SimplePeerSearchCondition `protobuf:"bytes,3,opt,name=peer,proto3,oneof" json:"peer,omitempty"`
}
type SimpleSearchCondition_UserProfile struct {
	UserProfile *SimpleUserProfileSearchCondition `protobuf:"bytes,4,opt,name=userProfile,proto3,oneof" json:"userProfile,omitempty"`
}
type SimpleSearchCondition_Group struct {
	Group *SimpleGroupSearchCondition `protobuf:"bytes,5,opt,name=group,proto3,oneof" json:"group,omitempty"`
}

func (*SimpleSearchCondition_Contact) isSimpleSearchCondition_Criterion()     {}
func (*SimpleSearchCondition_Message) isSimpleSearchCondition_Criterion()     {}
func (*SimpleSearchCondition_Peer) isSimpleSearchCondition_Criterion()        {}
func (*SimpleSearchCondition_UserProfile) isSimpleSearchCondition_Criterion() {}
func (*SimpleSearchCondition_Group) isSimpleSearchCondition_Criterion()       {}

func (m *SimpleSearchCondition) GetCriterion() isSimpleSearchCondition_Criterion {
	if m != nil {
		return m.Criterion
	}
	return nil
}

func (m *SimpleSearchCondition) GetContact() *SimpleContactSearchCondition {
	if x, ok := m.GetCriterion().(*SimpleSearchCondition_Contact); ok {
		return x.Contact
	}
	return nil
}

func (m *SimpleSearchCondition) GetMessage() *SimpleMessageSearchCondition {
	if x, ok := m.GetCriterion().(*SimpleSearchCondition_Message); ok {
		return x.Message
	}
	return nil
}

func (m *SimpleSearchCondition) GetPeer() *SimplePeerSearchCondition {
	if x, ok := m.GetCriterion().(*SimpleSearchCondition_Peer); ok {
		return x.Peer
	}
	return nil
}

func (m *SimpleSearchCondition) GetUserProfile() *SimpleUserProfileSearchCondition {
	if x, ok := m.GetCriterion().(*SimpleSearchCondition_UserProfile); ok {
		return x.UserProfile
	}
	return nil
}

func (m *SimpleSearchCondition) GetGroup() *SimpleGroupSearchCondition {
	if x, ok := m.GetCriterion().(*SimpleSearchCondition_Group); ok {
		return x.Group
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*SimpleSearchCondition) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*SimpleSearchCondition_Contact)(nil),
		(*SimpleSearchCondition_Message)(nil),
		(*SimpleSearchCondition_Peer)(nil),
		(*SimpleSearchCondition_UserProfile)(nil),
		(*SimpleSearchCondition_Group)(nil),
	}
}

type SearchCondition struct {
	// Types that are valid to be assigned to Body:
	//	*SearchCondition_SearchPeerTypeCondition
	//	*SearchCondition_SearchPieceText
	//	*SearchCondition_SearchAndCondition
	//	*SearchCondition_SearchOrCondition
	//	*SearchCondition_SearchPeerCondition
	//	*SearchCondition_SearchPeerContentType
	//	*SearchCondition_SearchSenderIdConfition
	Body isSearchCondition_Body `protobuf_oneof:"body"`
}

func (m *SearchCondition) Reset()      { *m = SearchCondition{} }
func (*SearchCondition) ProtoMessage() {}
func (*SearchCondition) Descriptor() ([]byte, []int) {
	return fileDescriptor_453745cff914010e, []int{7}
}
func (m *SearchCondition) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SearchCondition) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SearchCondition.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SearchCondition) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SearchCondition.Merge(m, src)
}
func (m *SearchCondition) XXX_Size() int {
	return m.Size()
}
func (m *SearchCondition) XXX_DiscardUnknown() {
	xxx_messageInfo_SearchCondition.DiscardUnknown(m)
}

var xxx_messageInfo_SearchCondition proto.InternalMessageInfo

type isSearchCondition_Body interface {
	isSearchCondition_Body()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type SearchCondition_SearchPeerTypeCondition struct {
	SearchPeerTypeCondition *SearchPeerTypeCondition `protobuf:"bytes,1,opt,name=searchPeerTypeCondition,proto3,oneof" json:"searchPeerTypeCondition,omitempty"`
}
type SearchCondition_SearchPieceText struct {
	SearchPieceText *SearchPieceText `protobuf:"bytes,2,opt,name=searchPieceText,proto3,oneof" json:"searchPieceText,omitempty"`
}
type SearchCondition_SearchAndCondition struct {
	SearchAndCondition *SearchAndCondition `protobuf:"bytes,3,opt,name=searchAndCondition,proto3,oneof" json:"searchAndCondition,omitempty"`
}
type SearchCondition_SearchOrCondition struct {
	SearchOrCondition *SearchOrCondition `protobuf:"bytes,4,opt,name=searchOrCondition,proto3,oneof" json:"searchOrCondition,omitempty"`
}
type SearchCondition_SearchPeerCondition struct {
	SearchPeerCondition *SearchPeerCondition `protobuf:"bytes,5,opt,name=searchPeerCondition,proto3,oneof" json:"searchPeerCondition,omitempty"`
}
type SearchCondition_SearchPeerContentType struct {
	SearchPeerContentType *SearchPeerContentType `protobuf:"bytes,6,opt,name=searchPeerContentType,proto3,oneof" json:"searchPeerContentType,omitempty"`
}
type SearchCondition_SearchSenderIdConfition struct {
	SearchSenderIdConfition *SearchSenderIdConfition `protobuf:"bytes,7,opt,name=searchSenderIdConfition,proto3,oneof" json:"searchSenderIdConfition,omitempty"`
}

func (*SearchCondition_SearchPeerTypeCondition) isSearchCondition_Body() {}
func (*SearchCondition_SearchPieceText) isSearchCondition_Body()         {}
func (*SearchCondition_SearchAndCondition) isSearchCondition_Body()      {}
func (*SearchCondition_SearchOrCondition) isSearchCondition_Body()       {}
func (*SearchCondition_SearchPeerCondition) isSearchCondition_Body()     {}
func (*SearchCondition_SearchPeerContentType) isSearchCondition_Body()   {}
func (*SearchCondition_SearchSenderIdConfition) isSearchCondition_Body() {}

func (m *SearchCondition) GetBody() isSearchCondition_Body {
	if m != nil {
		return m.Body
	}
	return nil
}

func (m *SearchCondition) GetSearchPeerTypeCondition() *SearchPeerTypeCondition {
	if x, ok := m.GetBody().(*SearchCondition_SearchPeerTypeCondition); ok {
		return x.SearchPeerTypeCondition
	}
	return nil
}

func (m *SearchCondition) GetSearchPieceText() *SearchPieceText {
	if x, ok := m.GetBody().(*SearchCondition_SearchPieceText); ok {
		return x.SearchPieceText
	}
	return nil
}

func (m *SearchCondition) GetSearchAndCondition() *SearchAndCondition {
	if x, ok := m.GetBody().(*SearchCondition_SearchAndCondition); ok {
		return x.SearchAndCondition
	}
	return nil
}

func (m *SearchCondition) GetSearchOrCondition() *SearchOrCondition {
	if x, ok := m.GetBody().(*SearchCondition_SearchOrCondition); ok {
		return x.SearchOrCondition
	}
	return nil
}

func (m *SearchCondition) GetSearchPeerCondition() *SearchPeerCondition {
	if x, ok := m.GetBody().(*SearchCondition_SearchPeerCondition); ok {
		return x.SearchPeerCondition
	}
	return nil
}

func (m *SearchCondition) GetSearchPeerContentType() *SearchPeerContentType {
	if x, ok := m.GetBody().(*SearchCondition_SearchPeerContentType); ok {
		return x.SearchPeerContentType
	}
	return nil
}

func (m *SearchCondition) GetSearchSenderIdConfition() *SearchSenderIdConfition {
	if x, ok := m.GetBody().(*SearchCondition_SearchSenderIdConfition); ok {
		return x.SearchSenderIdConfition
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*SearchCondition) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*SearchCondition_SearchPeerTypeCondition)(nil),
		(*SearchCondition_SearchPieceText)(nil),
		(*SearchCondition_SearchAndCondition)(nil),
		(*SearchCondition_SearchOrCondition)(nil),
		(*SearchCondition_SearchPeerCondition)(nil),
		(*SearchCondition_SearchPeerContentType)(nil),
		(*SearchCondition_SearchSenderIdConfition)(nil),
	}
}

// Search peer type condition
type SearchPeerTypeCondition struct {
	PeerType SearchPeerType `protobuf:"varint,1,opt,name=peer_type,json=peerType,proto3,enum=dialog.SearchPeerType" json:"peer_type,omitempty"`
}

func (m *SearchPeerTypeCondition) Reset()      { *m = SearchPeerTypeCondition{} }
func (*SearchPeerTypeCondition) ProtoMessage() {}
func (*SearchPeerTypeCondition) Descriptor() ([]byte, []int) {
	return fileDescriptor_453745cff914010e, []int{8}
}
func (m *SearchPeerTypeCondition) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SearchPeerTypeCondition) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SearchPeerTypeCondition.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SearchPeerTypeCondition) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SearchPeerTypeCondition.Merge(m, src)
}
func (m *SearchPeerTypeCondition) XXX_Size() int {
	return m.Size()
}
func (m *SearchPeerTypeCondition) XXX_DiscardUnknown() {
	xxx_messageInfo_SearchPeerTypeCondition.DiscardUnknown(m)
}

var xxx_messageInfo_SearchPeerTypeCondition proto.InternalMessageInfo

func (m *SearchPeerTypeCondition) GetPeerType() SearchPeerType {
	if m != nil {
		return m.PeerType
	}
	return SEARCHPEERTYPE_UNKNOWN
}

// Search peer name condition
type SearchPieceText struct {
	Query string `protobuf:"bytes,1,opt,name=query,proto3" json:"query,omitempty"`
}

func (m *SearchPieceText) Reset()      { *m = SearchPieceText{} }
func (*SearchPieceText) ProtoMessage() {}
func (*SearchPieceText) Descriptor() ([]byte, []int) {
	return fileDescriptor_453745cff914010e, []int{9}
}
func (m *SearchPieceText) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SearchPieceText) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SearchPieceText.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SearchPieceText) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SearchPieceText.Merge(m, src)
}
func (m *SearchPieceText) XXX_Size() int {
	return m.Size()
}
func (m *SearchPieceText) XXX_DiscardUnknown() {
	xxx_messageInfo_SearchPieceText.DiscardUnknown(m)
}

var xxx_messageInfo_SearchPieceText proto.InternalMessageInfo

func (m *SearchPieceText) GetQuery() string {
	if m != nil {
		return m.Query
	}
	return ""
}

// Search AND condion
type SearchAndCondition struct {
	/// "And" query
	AndQuery []*SearchCondition `protobuf:"bytes,1,rep,name=and_query,json=andQuery,proto3" json:"and_query,omitempty"`
}

func (m *SearchAndCondition) Reset()      { *m = SearchAndCondition{} }
func (*SearchAndCondition) ProtoMessage() {}
func (*SearchAndCondition) Descriptor() ([]byte, []int) {
	return fileDescriptor_453745cff914010e, []int{10}
}
func (m *SearchAndCondition) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SearchAndCondition) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SearchAndCondition.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SearchAndCondition) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SearchAndCondition.Merge(m, src)
}
func (m *SearchAndCondition) XXX_Size() int {
	return m.Size()
}
func (m *SearchAndCondition) XXX_DiscardUnknown() {
	xxx_messageInfo_SearchAndCondition.DiscardUnknown(m)
}

var xxx_messageInfo_SearchAndCondition proto.InternalMessageInfo

func (m *SearchAndCondition) GetAndQuery() []*SearchCondition {
	if m != nil {
		return m.AndQuery
	}
	return nil
}

// Search OR condition
type SearchOrCondition struct {
	/// "Or" query
	OrQuery []*SearchCondition `protobuf:"bytes,2,rep,name=or_query,json=orQuery,proto3" json:"or_query,omitempty"`
}

func (m *SearchOrCondition) Reset()      { *m = SearchOrCondition{} }
func (*SearchOrCondition) ProtoMessage() {}
func (*SearchOrCondition) Descriptor() ([]byte, []int) {
	return fileDescriptor_453745cff914010e, []int{11}
}
func (m *SearchOrCondition) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SearchOrCondition) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SearchOrCondition.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SearchOrCondition) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SearchOrCondition.Merge(m, src)
}
func (m *SearchOrCondition) XXX_Size() int {
	return m.Size()
}
func (m *SearchOrCondition) XXX_DiscardUnknown() {
	xxx_messageInfo_SearchOrCondition.DiscardUnknown(m)
}

var xxx_messageInfo_SearchOrCondition proto.InternalMessageInfo

func (m *SearchOrCondition) GetOrQuery() []*SearchCondition {
	if m != nil {
		return m.OrQuery
	}
	return nil
}

// Serch Peer condition
type SearchPeerCondition struct {
	Peer *OutPeer `protobuf:"bytes,1,opt,name=peer,proto3" json:"peer,omitempty"`
}

func (m *SearchPeerCondition) Reset()      { *m = SearchPeerCondition{} }
func (*SearchPeerCondition) ProtoMessage() {}
func (*SearchPeerCondition) Descriptor() ([]byte, []int) {
	return fileDescriptor_453745cff914010e, []int{12}
}
func (m *SearchPeerCondition) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SearchPeerCondition) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SearchPeerCondition.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SearchPeerCondition) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SearchPeerCondition.Merge(m, src)
}
func (m *SearchPeerCondition) XXX_Size() int {
	return m.Size()
}
func (m *SearchPeerCondition) XXX_DiscardUnknown() {
	xxx_messageInfo_SearchPeerCondition.DiscardUnknown(m)
}

var xxx_messageInfo_SearchPeerCondition proto.InternalMessageInfo

func (m *SearchPeerCondition) GetPeer() *OutPeer {
	if m != nil {
		return m.Peer
	}
	return nil
}

// Search content type condition
type SearchPeerContentType struct {
	ContentType SearchContentType `protobuf:"varint,1,opt,name=content_type,json=contentType,proto3,enum=dialog.SearchContentType" json:"content_type,omitempty"`
}

func (m *SearchPeerContentType) Reset()      { *m = SearchPeerContentType{} }
func (*SearchPeerContentType) ProtoMessage() {}
func (*SearchPeerContentType) Descriptor() ([]byte, []int) {
	return fileDescriptor_453745cff914010e, []int{13}
}
func (m *SearchPeerContentType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SearchPeerContentType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SearchPeerContentType.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SearchPeerContentType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SearchPeerContentType.Merge(m, src)
}
func (m *SearchPeerContentType) XXX_Size() int {
	return m.Size()
}
func (m *SearchPeerContentType) XXX_DiscardUnknown() {
	xxx_messageInfo_SearchPeerContentType.DiscardUnknown(m)
}

var xxx_messageInfo_SearchPeerContentType proto.InternalMessageInfo

func (m *SearchPeerContentType) GetContentType() SearchContentType {
	if m != nil {
		return m.ContentType
	}
	return SEARCHCONTENTTYPE_UNKNOWN
}

// Searching sender uid condition
type SearchSenderIdConfition struct {
	SenderId int32 `protobuf:"varint,1,opt,name=sender_id,json=senderId,proto3" json:"sender_id,omitempty"`
}

func (m *SearchSenderIdConfition) Reset()      { *m = SearchSenderIdConfition{} }
func (*SearchSenderIdConfition) ProtoMessage() {}
func (*SearchSenderIdConfition) Descriptor() ([]byte, []int) {
	return fileDescriptor_453745cff914010e, []int{14}
}
func (m *SearchSenderIdConfition) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SearchSenderIdConfition) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SearchSenderIdConfition.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SearchSenderIdConfition) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SearchSenderIdConfition.Merge(m, src)
}
func (m *SearchSenderIdConfition) XXX_Size() int {
	return m.Size()
}
func (m *SearchSenderIdConfition) XXX_DiscardUnknown() {
	xxx_messageInfo_SearchSenderIdConfition.DiscardUnknown(m)
}

var xxx_messageInfo_SearchSenderIdConfition proto.InternalMessageInfo

func (m *SearchSenderIdConfition) GetSenderId() int32 {
	if m != nil {
		return m.SenderId
	}
	return 0
}

// Peer search result
type PeerSearchResult struct {
	Peer         *Peer              `protobuf:"bytes,1,opt,name=peer,proto3" json:"peer,omitempty"`
	Title        string             `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	Shortname    *types.StringValue `protobuf:"bytes,9,opt,name=shortname,proto3" json:"shortname,omitempty"`
	Description  *types.StringValue `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	MembersCount *types.Int32Value  `protobuf:"bytes,4,opt,name=members_count,json=membersCount,proto3" json:"members_count,omitempty"`
	/// Group Creation Date
	DateCreated int64             `protobuf:"varint,5,opt,name=date_created,json=dateCreated,proto3" json:"date_created,omitempty"`
	Creator     *types.Int32Value `protobuf:"bytes,6,opt,name=creator,proto3" json:"creator,omitempty"`
	IsPublic    *types.BoolValue  `protobuf:"bytes,7,opt,name=is_public,json=isPublic,proto3" json:"is_public,omitempty"`
	/// Are you joined?
	IsJoined *types.BoolValue `protobuf:"bytes,8,opt,name=is_joined,json=isJoined,proto3" json:"is_joined,omitempty"`
}

func (m *PeerSearchResult) Reset()      { *m = PeerSearchResult{} }
func (*PeerSearchResult) ProtoMessage() {}
func (*PeerSearchResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_453745cff914010e, []int{15}
}
func (m *PeerSearchResult) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PeerSearchResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PeerSearchResult.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PeerSearchResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PeerSearchResult.Merge(m, src)
}
func (m *PeerSearchResult) XXX_Size() int {
	return m.Size()
}
func (m *PeerSearchResult) XXX_DiscardUnknown() {
	xxx_messageInfo_PeerSearchResult.DiscardUnknown(m)
}

var xxx_messageInfo_PeerSearchResult proto.InternalMessageInfo

func (m *PeerSearchResult) GetPeer() *Peer {
	if m != nil {
		return m.Peer
	}
	return nil
}

func (m *PeerSearchResult) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *PeerSearchResult) GetShortname() *types.StringValue {
	if m != nil {
		return m.Shortname
	}
	return nil
}

func (m *PeerSearchResult) GetDescription() *types.StringValue {
	if m != nil {
		return m.Description
	}
	return nil
}

func (m *PeerSearchResult) GetMembersCount() *types.Int32Value {
	if m != nil {
		return m.MembersCount
	}
	return nil
}

func (m *PeerSearchResult) GetDateCreated() int64 {
	if m != nil {
		return m.DateCreated
	}
	return 0
}

func (m *PeerSearchResult) GetCreator() *types.Int32Value {
	if m != nil {
		return m.Creator
	}
	return nil
}

func (m *PeerSearchResult) GetIsPublic() *types.BoolValue {
	if m != nil {
		return m.IsPublic
	}
	return nil
}

func (m *PeerSearchResult) GetIsJoined() *types.BoolValue {
	if m != nil {
		return m.IsJoined
	}
	return nil
}

// Performing peer search
type RequestPeerSearch struct {
	Query         []*SearchCondition   `protobuf:"bytes,1,rep,name=query,proto3" json:"query,omitempty"`
	Optimizations []UpdateOptimization `protobuf:"varint,2,rep,packed,name=optimizations,proto3,enum=dialog.UpdateOptimization" json:"optimizations,omitempty"`
}

func (m *RequestPeerSearch) Reset()      { *m = RequestPeerSearch{} }
func (*RequestPeerSearch) ProtoMessage() {}
func (*RequestPeerSearch) Descriptor() ([]byte, []int) {
	return fileDescriptor_453745cff914010e, []int{16}
}
func (m *RequestPeerSearch) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RequestPeerSearch) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RequestPeerSearch.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RequestPeerSearch) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RequestPeerSearch.Merge(m, src)
}
func (m *RequestPeerSearch) XXX_Size() int {
	return m.Size()
}
func (m *RequestPeerSearch) XXX_DiscardUnknown() {
	xxx_messageInfo_RequestPeerSearch.DiscardUnknown(m)
}

var xxx_messageInfo_RequestPeerSearch proto.InternalMessageInfo

func (m *RequestPeerSearch) GetQuery() []*SearchCondition {
	if m != nil {
		return m.Query
	}
	return nil
}

func (m *RequestPeerSearch) GetOptimizations() []UpdateOptimization {
	if m != nil {
		return m.Optimizations
	}
	return nil
}

/// Response with related peers and entities
type ResponsePeerSearch struct {
	// For old bot sdk compatibility
	Users         []*User             `protobuf:"bytes,2,rep,name=users,proto3" json:"users,omitempty"`
	Groups        []*Group            `protobuf:"bytes,3,rep,name=groups,proto3" json:"groups,omitempty"`
	SearchResults []*PeerSearchResult `protobuf:"bytes,1,rep,name=search_results,json=searchResults,proto3" json:"search_results,omitempty"`
	UserPeers     []*UserOutPeer      `protobuf:"bytes,4,rep,name=user_peers,json=userPeers,proto3" json:"user_peers,omitempty"`
	GroupPeers    []*GroupOutPeer     `protobuf:"bytes,5,rep,name=group_peers,json=groupPeers,proto3" json:"group_peers,omitempty"`
}

func (m *ResponsePeerSearch) Reset()      { *m = ResponsePeerSearch{} }
func (*ResponsePeerSearch) ProtoMessage() {}
func (*ResponsePeerSearch) Descriptor() ([]byte, []int) {
	return fileDescriptor_453745cff914010e, []int{17}
}
func (m *ResponsePeerSearch) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ResponsePeerSearch) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ResponsePeerSearch.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ResponsePeerSearch) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResponsePeerSearch.Merge(m, src)
}
func (m *ResponsePeerSearch) XXX_Size() int {
	return m.Size()
}
func (m *ResponsePeerSearch) XXX_DiscardUnknown() {
	xxx_messageInfo_ResponsePeerSearch.DiscardUnknown(m)
}

var xxx_messageInfo_ResponsePeerSearch proto.InternalMessageInfo

func (m *ResponsePeerSearch) GetUsers() []*User {
	if m != nil {
		return m.Users
	}
	return nil
}

func (m *ResponsePeerSearch) GetGroups() []*Group {
	if m != nil {
		return m.Groups
	}
	return nil
}

func (m *ResponsePeerSearch) GetSearchResults() []*PeerSearchResult {
	if m != nil {
		return m.SearchResults
	}
	return nil
}

func (m *ResponsePeerSearch) GetUserPeers() []*UserOutPeer {
	if m != nil {
		return m.UserPeers
	}
	return nil
}

func (m *ResponsePeerSearch) GetGroupPeers() []*GroupOutPeer {
	if m != nil {
		return m.GroupPeers
	}
	return nil
}

// Resolve peer by shortname
type RequestResolvePeer struct {
	Shortname string `protobuf:"bytes,1,opt,name=shortname,proto3" json:"shortname,omitempty"`
}

func (m *RequestResolvePeer) Reset()      { *m = RequestResolvePeer{} }
func (*RequestResolvePeer) ProtoMessage() {}
func (*RequestResolvePeer) Descriptor() ([]byte, []int) {
	return fileDescriptor_453745cff914010e, []int{18}
}
func (m *RequestResolvePeer) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RequestResolvePeer) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RequestResolvePeer.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RequestResolvePeer) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RequestResolvePeer.Merge(m, src)
}
func (m *RequestResolvePeer) XXX_Size() int {
	return m.Size()
}
func (m *RequestResolvePeer) XXX_DiscardUnknown() {
	xxx_messageInfo_RequestResolvePeer.DiscardUnknown(m)
}

var xxx_messageInfo_RequestResolvePeer proto.InternalMessageInfo

func (m *RequestResolvePeer) GetShortname() string {
	if m != nil {
		return m.Shortname
	}
	return ""
}

type ResponseResolvePeer struct {
	Peer *OutPeer `protobuf:"bytes,1,opt,name=peer,proto3" json:"peer,omitempty"`
}

func (m *ResponseResolvePeer) Reset()      { *m = ResponseResolvePeer{} }
func (*ResponseResolvePeer) ProtoMessage() {}
func (*ResponseResolvePeer) Descriptor() ([]byte, []int) {
	return fileDescriptor_453745cff914010e, []int{19}
}
func (m *ResponseResolvePeer) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ResponseResolvePeer) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ResponseResolvePeer.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ResponseResolvePeer) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResponseResolvePeer.Merge(m, src)
}
func (m *ResponseResolvePeer) XXX_Size() int {
	return m.Size()
}
func (m *ResponseResolvePeer) XXX_DiscardUnknown() {
	xxx_messageInfo_ResponseResolvePeer.DiscardUnknown(m)
}

var xxx_messageInfo_ResponseResolvePeer proto.InternalMessageInfo

func (m *ResponseResolvePeer) GetPeer() *OutPeer {
	if m != nil {
		return m.Peer
	}
	return nil
}

// Message container
type MessageSearchResult struct {
	Peer     *Peer           `protobuf:"bytes,1,opt,name=peer,proto3" json:"peer,omitempty"`
	Rid      int64           `protobuf:"varint,2,opt,name=rid,proto3" json:"rid,omitempty"`
	Date     int64           `protobuf:"varint,3,opt,name=date,proto3" json:"date,omitempty"`
	SenderId int32           `protobuf:"varint,4,opt,name=sender_id,json=senderId,proto3" json:"sender_id,omitempty"`
	Content  *MessageContent `protobuf:"bytes,5,opt,name=content,proto3" json:"content,omitempty"`
	Mid      *UUIDValue      `protobuf:"bytes,6,opt,name=mid,proto3" json:"mid,omitempty"`
}

func (m *MessageSearchResult) Reset()      { *m = MessageSearchResult{} }
func (*MessageSearchResult) ProtoMessage() {}
func (*MessageSearchResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_453745cff914010e, []int{20}
}
func (m *MessageSearchResult) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MessageSearchResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MessageSearchResult.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MessageSearchResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MessageSearchResult.Merge(m, src)
}
func (m *MessageSearchResult) XXX_Size() int {
	return m.Size()
}
func (m *MessageSearchResult) XXX_DiscardUnknown() {
	xxx_messageInfo_MessageSearchResult.DiscardUnknown(m)
}

var xxx_messageInfo_MessageSearchResult proto.InternalMessageInfo

func (m *MessageSearchResult) GetPeer() *Peer {
	if m != nil {
		return m.Peer
	}
	return nil
}

func (m *MessageSearchResult) GetRid() int64 {
	if m != nil {
		return m.Rid
	}
	return 0
}

func (m *MessageSearchResult) GetDate() int64 {
	if m != nil {
		return m.Date
	}
	return 0
}

func (m *MessageSearchResult) GetSenderId() int32 {
	if m != nil {
		return m.SenderId
	}
	return 0
}

func (m *MessageSearchResult) GetContent() *MessageContent {
	if m != nil {
		return m.Content
	}
	return nil
}

func (m *MessageSearchResult) GetMid() *UUIDValue {
	if m != nil {
		return m.Mid
	}
	return nil
}

// Message Search result container
type MessageSearchItem struct {
	Result *MessageSearchResult `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
}

func (m *MessageSearchItem) Reset()      { *m = MessageSearchItem{} }
func (*MessageSearchItem) ProtoMessage() {}
func (*MessageSearchItem) Descriptor() ([]byte, []int) {
	return fileDescriptor_453745cff914010e, []int{21}
}
func (m *MessageSearchItem) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MessageSearchItem) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MessageSearchItem.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MessageSearchItem) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MessageSearchItem.Merge(m, src)
}
func (m *MessageSearchItem) XXX_Size() int {
	return m.Size()
}
func (m *MessageSearchItem) XXX_DiscardUnknown() {
	xxx_messageInfo_MessageSearchItem.DiscardUnknown(m)
}

var xxx_messageInfo_MessageSearchItem proto.InternalMessageInfo

func (m *MessageSearchItem) GetResult() *MessageSearchResult {
	if m != nil {
		return m.Result
	}
	return nil
}

// Search Result with related peers and entities
type ResponseMessageSearchResponse struct {
	SearchResults []*MessageSearchItem `protobuf:"bytes,1,rep,name=search_results,json=searchResults,proto3" json:"search_results,omitempty"`
	LoadMoreState *types.BytesValue    `protobuf:"bytes,4,opt,name=load_more_state,json=loadMoreState,proto3" json:"load_more_state,omitempty"`
	UserOutPeers  []*UserOutPeer       `protobuf:"bytes,5,rep,name=user_out_peers,json=userOutPeers,proto3" json:"user_out_peers,omitempty"`
	GroupOutPeers []*GroupOutPeer      `protobuf:"bytes,6,rep,name=group_out_peers,json=groupOutPeers,proto3" json:"group_out_peers,omitempty"`
	TotalCount    int64                `protobuf:"varint,7,opt,name=total_count,json=totalCount,proto3" json:"total_count,omitempty"`
}

func (m *ResponseMessageSearchResponse) Reset()      { *m = ResponseMessageSearchResponse{} }
func (*ResponseMessageSearchResponse) ProtoMessage() {}
func (*ResponseMessageSearchResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_453745cff914010e, []int{22}
}
func (m *ResponseMessageSearchResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ResponseMessageSearchResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ResponseMessageSearchResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ResponseMessageSearchResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResponseMessageSearchResponse.Merge(m, src)
}
func (m *ResponseMessageSearchResponse) XXX_Size() int {
	return m.Size()
}
func (m *ResponseMessageSearchResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ResponseMessageSearchResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ResponseMessageSearchResponse proto.InternalMessageInfo

func (m *ResponseMessageSearchResponse) GetSearchResults() []*MessageSearchItem {
	if m != nil {
		return m.SearchResults
	}
	return nil
}

func (m *ResponseMessageSearchResponse) GetLoadMoreState() *types.BytesValue {
	if m != nil {
		return m.LoadMoreState
	}
	return nil
}

func (m *ResponseMessageSearchResponse) GetUserOutPeers() []*UserOutPeer {
	if m != nil {
		return m.UserOutPeers
	}
	return nil
}

func (m *ResponseMessageSearchResponse) GetGroupOutPeers() []*GroupOutPeer {
	if m != nil {
		return m.GroupOutPeers
	}
	return nil
}

func (m *ResponseMessageSearchResponse) GetTotalCount() int64 {
	if m != nil {
		return m.TotalCount
	}
	return 0
}

// Performing message search
type RequestMessageSearch struct {
	Query         *SearchCondition     `protobuf:"bytes,1,opt,name=query,proto3" json:"query,omitempty"`
	Optimizations []UpdateOptimization `protobuf:"varint,2,rep,packed,name=optimizations,proto3,enum=dialog.UpdateOptimization" json:"optimizations,omitempty"`
}

func (m *RequestMessageSearch) Reset()      { *m = RequestMessageSearch{} }
func (*RequestMessageSearch) ProtoMessage() {}
func (*RequestMessageSearch) Descriptor() ([]byte, []int) {
	return fileDescriptor_453745cff914010e, []int{23}
}
func (m *RequestMessageSearch) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RequestMessageSearch) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RequestMessageSearch.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RequestMessageSearch) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RequestMessageSearch.Merge(m, src)
}
func (m *RequestMessageSearch) XXX_Size() int {
	return m.Size()
}
func (m *RequestMessageSearch) XXX_DiscardUnknown() {
	xxx_messageInfo_RequestMessageSearch.DiscardUnknown(m)
}

var xxx_messageInfo_RequestMessageSearch proto.InternalMessageInfo

func (m *RequestMessageSearch) GetQuery() *SearchCondition {
	if m != nil {
		return m.Query
	}
	return nil
}

func (m *RequestMessageSearch) GetOptimizations() []UpdateOptimization {
	if m != nil {
		return m.Optimizations
	}
	return nil
}

// Performing message search paging
type RequestMessageSearchMore struct {
	LoadMoreState []byte               `protobuf:"bytes,1,opt,name=load_more_state,json=loadMoreState,proto3" json:"load_more_state,omitempty"`
	Optimizations []UpdateOptimization `protobuf:"varint,2,rep,packed,name=optimizations,proto3,enum=dialog.UpdateOptimization" json:"optimizations,omitempty"`
}

func (m *RequestMessageSearchMore) Reset()      { *m = RequestMessageSearchMore{} }
func (*RequestMessageSearchMore) ProtoMessage() {}
func (*RequestMessageSearchMore) Descriptor() ([]byte, []int) {
	return fileDescriptor_453745cff914010e, []int{24}
}
func (m *RequestMessageSearchMore) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RequestMessageSearchMore) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RequestMessageSearchMore.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RequestMessageSearchMore) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RequestMessageSearchMore.Merge(m, src)
}
func (m *RequestMessageSearchMore) XXX_Size() int {
	return m.Size()
}
func (m *RequestMessageSearchMore) XXX_DiscardUnknown() {
	xxx_messageInfo_RequestMessageSearchMore.DiscardUnknown(m)
}

var xxx_messageInfo_RequestMessageSearchMore proto.InternalMessageInfo

func (m *RequestMessageSearchMore) GetLoadMoreState() []byte {
	if m != nil {
		return m.LoadMoreState
	}
	return nil
}

func (m *RequestMessageSearchMore) GetOptimizations() []UpdateOptimization {
	if m != nil {
		return m.Optimizations
	}
	return nil
}

type RequestSimpleSearch struct {
	Criteria      []*SimpleSearchCondition `protobuf:"bytes,1,rep,name=criteria,proto3" json:"criteria,omitempty"`
	Optimizations []UpdateOptimization     `protobuf:"varint,2,rep,packed,name=optimizations,proto3,enum=dialog.UpdateOptimization" json:"optimizations,omitempty"`
}

func (m *RequestSimpleSearch) Reset()      { *m = RequestSimpleSearch{} }
func (*RequestSimpleSearch) ProtoMessage() {}
func (*RequestSimpleSearch) Descriptor() ([]byte, []int) {
	return fileDescriptor_453745cff914010e, []int{25}
}
func (m *RequestSimpleSearch) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RequestSimpleSearch) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RequestSimpleSearch.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RequestSimpleSearch) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RequestSimpleSearch.Merge(m, src)
}
func (m *RequestSimpleSearch) XXX_Size() int {
	return m.Size()
}
func (m *RequestSimpleSearch) XXX_DiscardUnknown() {
	xxx_messageInfo_RequestSimpleSearch.DiscardUnknown(m)
}

var xxx_messageInfo_RequestSimpleSearch proto.InternalMessageInfo

func (m *RequestSimpleSearch) GetCriteria() []*SimpleSearchCondition {
	if m != nil {
		return m.Criteria
	}
	return nil
}

func (m *RequestSimpleSearch) GetOptimizations() []UpdateOptimization {
	if m != nil {
		return m.Optimizations
	}
	return nil
}

type RequestSimpleSearchMore struct {
	LoadMoreState []byte               `protobuf:"bytes,1,opt,name=load_more_state,json=loadMoreState,proto3" json:"load_more_state,omitempty"`
	Optimizations []UpdateOptimization `protobuf:"varint,2,rep,packed,name=optimizations,proto3,enum=dialog.UpdateOptimization" json:"optimizations,omitempty"`
}

func (m *RequestSimpleSearchMore) Reset()      { *m = RequestSimpleSearchMore{} }
func (*RequestSimpleSearchMore) ProtoMessage() {}
func (*RequestSimpleSearchMore) Descriptor() ([]byte, []int) {
	return fileDescriptor_453745cff914010e, []int{26}
}
func (m *RequestSimpleSearchMore) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RequestSimpleSearchMore) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RequestSimpleSearchMore.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RequestSimpleSearchMore) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RequestSimpleSearchMore.Merge(m, src)
}
func (m *RequestSimpleSearchMore) XXX_Size() int {
	return m.Size()
}
func (m *RequestSimpleSearchMore) XXX_DiscardUnknown() {
	xxx_messageInfo_RequestSimpleSearchMore.DiscardUnknown(m)
}

var xxx_messageInfo_RequestSimpleSearchMore proto.InternalMessageInfo

func (m *RequestSimpleSearchMore) GetLoadMoreState() []byte {
	if m != nil {
		return m.LoadMoreState
	}
	return nil
}

func (m *RequestSimpleSearchMore) GetOptimizations() []UpdateOptimization {
	if m != nil {
		return m.Optimizations
	}
	return nil
}

type RequestFieldAutocomplete struct {
	FieldName  string `protobuf:"bytes,1,opt,name=field_name,json=fieldName,proto3" json:"field_name,omitempty"`
	FieldValue string `protobuf:"bytes,2,opt,name=field_value,json=fieldValue,proto3" json:"field_value,omitempty"`
}

func (m *RequestFieldAutocomplete) Reset()      { *m = RequestFieldAutocomplete{} }
func (*RequestFieldAutocomplete) ProtoMessage() {}
func (*RequestFieldAutocomplete) Descriptor() ([]byte, []int) {
	return fileDescriptor_453745cff914010e, []int{27}
}
func (m *RequestFieldAutocomplete) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RequestFieldAutocomplete) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RequestFieldAutocomplete.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RequestFieldAutocomplete) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RequestFieldAutocomplete.Merge(m, src)
}
func (m *RequestFieldAutocomplete) XXX_Size() int {
	return m.Size()
}
func (m *RequestFieldAutocomplete) XXX_DiscardUnknown() {
	xxx_messageInfo_RequestFieldAutocomplete.DiscardUnknown(m)
}

var xxx_messageInfo_RequestFieldAutocomplete proto.InternalMessageInfo

func (m *RequestFieldAutocomplete) GetFieldName() string {
	if m != nil {
		return m.FieldName
	}
	return ""
}

func (m *RequestFieldAutocomplete) GetFieldValue() string {
	if m != nil {
		return m.FieldValue
	}
	return ""
}

type ResponseFieldAutocomplete struct {
	FieldName  string   `protobuf:"bytes,1,opt,name=field_name,json=fieldName,proto3" json:"field_name,omitempty"`
	FieldValue []string `protobuf:"bytes,2,rep,name=field_value,json=fieldValue,proto3" json:"field_value,omitempty"`
}

func (m *ResponseFieldAutocomplete) Reset()      { *m = ResponseFieldAutocomplete{} }
func (*ResponseFieldAutocomplete) ProtoMessage() {}
func (*ResponseFieldAutocomplete) Descriptor() ([]byte, []int) {
	return fileDescriptor_453745cff914010e, []int{28}
}
func (m *ResponseFieldAutocomplete) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ResponseFieldAutocomplete) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ResponseFieldAutocomplete.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ResponseFieldAutocomplete) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResponseFieldAutocomplete.Merge(m, src)
}
func (m *ResponseFieldAutocomplete) XXX_Size() int {
	return m.Size()
}
func (m *ResponseFieldAutocomplete) XXX_DiscardUnknown() {
	xxx_messageInfo_ResponseFieldAutocomplete.DiscardUnknown(m)
}

var xxx_messageInfo_ResponseFieldAutocomplete proto.InternalMessageInfo

func (m *ResponseFieldAutocomplete) GetFieldName() string {
	if m != nil {
		return m.FieldName
	}
	return ""
}

func (m *ResponseFieldAutocomplete) GetFieldValue() []string {
	if m != nil {
		return m.FieldValue
	}
	return nil
}

type RequestLoadUserSearchByPredicatesResults struct {
	Predicates     []*SearchPredicate `protobuf:"bytes,1,rep,name=predicates,proto3" json:"predicates,omitempty"`
	GroupId        int32              `protobuf:"varint,2,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	Query          *types.StringValue `protobuf:"bytes,3,opt,name=query,proto3" json:"query,omitempty"`
	Limit          int32              `protobuf:"varint,4,opt,name=limit,proto3" json:"limit,omitempty"`
	RequiredFields []string           `protobuf:"bytes,5,rep,name=required_fields,json=requiredFields,proto3" json:"required_fields,omitempty"`
}

func (m *RequestLoadUserSearchByPredicatesResults) Reset() {
	*m = RequestLoadUserSearchByPredicatesResults{}
}
func (*RequestLoadUserSearchByPredicatesResults) ProtoMessage() {}
func (*RequestLoadUserSearchByPredicatesResults) Descriptor() ([]byte, []int) {
	return fileDescriptor_453745cff914010e, []int{29}
}
func (m *RequestLoadUserSearchByPredicatesResults) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RequestLoadUserSearchByPredicatesResults) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RequestLoadUserSearchByPredicatesResults.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RequestLoadUserSearchByPredicatesResults) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RequestLoadUserSearchByPredicatesResults.Merge(m, src)
}
func (m *RequestLoadUserSearchByPredicatesResults) XXX_Size() int {
	return m.Size()
}
func (m *RequestLoadUserSearchByPredicatesResults) XXX_DiscardUnknown() {
	xxx_messageInfo_RequestLoadUserSearchByPredicatesResults.DiscardUnknown(m)
}

var xxx_messageInfo_RequestLoadUserSearchByPredicatesResults proto.InternalMessageInfo

func (m *RequestLoadUserSearchByPredicatesResults) GetPredicates() []*SearchPredicate {
	if m != nil {
		return m.Predicates
	}
	return nil
}

func (m *RequestLoadUserSearchByPredicatesResults) GetGroupId() int32 {
	if m != nil {
		return m.GroupId
	}
	return 0
}

func (m *RequestLoadUserSearchByPredicatesResults) GetQuery() *types.StringValue {
	if m != nil {
		return m.Query
	}
	return nil
}

func (m *RequestLoadUserSearchByPredicatesResults) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *RequestLoadUserSearchByPredicatesResults) GetRequiredFields() []string {
	if m != nil {
		return m.RequiredFields
	}
	return nil
}

type UserMatch struct {
	UserId          int32 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	MatchPredicates bool  `protobuf:"varint,2,opt,name=match_predicates,json=matchPredicates,proto3" json:"match_predicates,omitempty"`
}

func (m *UserMatch) Reset()      { *m = UserMatch{} }
func (*UserMatch) ProtoMessage() {}
func (*UserMatch) Descriptor() ([]byte, []int) {
	return fileDescriptor_453745cff914010e, []int{30}
}
func (m *UserMatch) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UserMatch) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UserMatch.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UserMatch) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserMatch.Merge(m, src)
}
func (m *UserMatch) XXX_Size() int {
	return m.Size()
}
func (m *UserMatch) XXX_DiscardUnknown() {
	xxx_messageInfo_UserMatch.DiscardUnknown(m)
}

var xxx_messageInfo_UserMatch proto.InternalMessageInfo

func (m *UserMatch) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *UserMatch) GetMatchPredicates() bool {
	if m != nil {
		return m.MatchPredicates
	}
	return false
}

type ResponseLoadUserSearchByPredicatesResults struct {
	Users       []*UserMatch `protobuf:"bytes,1,rep,name=users,proto3" json:"users,omitempty"`
	ResultCount int32        `protobuf:"varint,2,opt,name=result_count,json=resultCount,proto3" json:"result_count,omitempty"`
}

func (m *ResponseLoadUserSearchByPredicatesResults) Reset() {
	*m = ResponseLoadUserSearchByPredicatesResults{}
}
func (*ResponseLoadUserSearchByPredicatesResults) ProtoMessage() {}
func (*ResponseLoadUserSearchByPredicatesResults) Descriptor() ([]byte, []int) {
	return fileDescriptor_453745cff914010e, []int{31}
}
func (m *ResponseLoadUserSearchByPredicatesResults) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ResponseLoadUserSearchByPredicatesResults) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ResponseLoadUserSearchByPredicatesResults.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ResponseLoadUserSearchByPredicatesResults) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResponseLoadUserSearchByPredicatesResults.Merge(m, src)
}
func (m *ResponseLoadUserSearchByPredicatesResults) XXX_Size() int {
	return m.Size()
}
func (m *ResponseLoadUserSearchByPredicatesResults) XXX_DiscardUnknown() {
	xxx_messageInfo_ResponseLoadUserSearchByPredicatesResults.DiscardUnknown(m)
}

var xxx_messageInfo_ResponseLoadUserSearchByPredicatesResults proto.InternalMessageInfo

func (m *ResponseLoadUserSearchByPredicatesResults) GetUsers() []*UserMatch {
	if m != nil {
		return m.Users
	}
	return nil
}

func (m *ResponseLoadUserSearchByPredicatesResults) GetResultCount() int32 {
	if m != nil {
		return m.ResultCount
	}
	return 0
}

type RequestLoadUserSearchByPredicatesCount struct {
	Predicates []*SearchPredicate `protobuf:"bytes,1,rep,name=predicates,proto3" json:"predicates,omitempty"`
	GroupId    int32              `protobuf:"varint,2,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
}

func (m *RequestLoadUserSearchByPredicatesCount) Reset() {
	*m = RequestLoadUserSearchByPredicatesCount{}
}
func (*RequestLoadUserSearchByPredicatesCount) ProtoMessage() {}
func (*RequestLoadUserSearchByPredicatesCount) Descriptor() ([]byte, []int) {
	return fileDescriptor_453745cff914010e, []int{32}
}
func (m *RequestLoadUserSearchByPredicatesCount) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RequestLoadUserSearchByPredicatesCount) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RequestLoadUserSearchByPredicatesCount.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RequestLoadUserSearchByPredicatesCount) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RequestLoadUserSearchByPredicatesCount.Merge(m, src)
}
func (m *RequestLoadUserSearchByPredicatesCount) XXX_Size() int {
	return m.Size()
}
func (m *RequestLoadUserSearchByPredicatesCount) XXX_DiscardUnknown() {
	xxx_messageInfo_RequestLoadUserSearchByPredicatesCount.DiscardUnknown(m)
}

var xxx_messageInfo_RequestLoadUserSearchByPredicatesCount proto.InternalMessageInfo

func (m *RequestLoadUserSearchByPredicatesCount) GetPredicates() []*SearchPredicate {
	if m != nil {
		return m.Predicates
	}
	return nil
}

func (m *RequestLoadUserSearchByPredicatesCount) GetGroupId() int32 {
	if m != nil {
		return m.GroupId
	}
	return 0
}

type ResponseLoadUserSearchByPredicatesCount struct {
	ResultCount int32 `protobuf:"varint,1,opt,name=result_count,json=resultCount,proto3" json:"result_count,omitempty"`
}

func (m *ResponseLoadUserSearchByPredicatesCount) Reset() {
	*m = ResponseLoadUserSearchByPredicatesCount{}
}
func (*ResponseLoadUserSearchByPredicatesCount) ProtoMessage() {}
func (*ResponseLoadUserSearchByPredicatesCount) Descriptor() ([]byte, []int) {
	return fileDescriptor_453745cff914010e, []int{33}
}
func (m *ResponseLoadUserSearchByPredicatesCount) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ResponseLoadUserSearchByPredicatesCount) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ResponseLoadUserSearchByPredicatesCount.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ResponseLoadUserSearchByPredicatesCount) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResponseLoadUserSearchByPredicatesCount.Merge(m, src)
}
func (m *ResponseLoadUserSearchByPredicatesCount) XXX_Size() int {
	return m.Size()
}
func (m *ResponseLoadUserSearchByPredicatesCount) XXX_DiscardUnknown() {
	xxx_messageInfo_ResponseLoadUserSearchByPredicatesCount.DiscardUnknown(m)
}

var xxx_messageInfo_ResponseLoadUserSearchByPredicatesCount proto.InternalMessageInfo

func (m *ResponseLoadUserSearchByPredicatesCount) GetResultCount() int32 {
	if m != nil {
		return m.ResultCount
	}
	return 0
}

type RequestGetRecommendations struct {
}

func (m *RequestGetRecommendations) Reset()      { *m = RequestGetRecommendations{} }
func (*RequestGetRecommendations) ProtoMessage() {}
func (*RequestGetRecommendations) Descriptor() ([]byte, []int) {
	return fileDescriptor_453745cff914010e, []int{34}
}
func (m *RequestGetRecommendations) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RequestGetRecommendations) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RequestGetRecommendations.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RequestGetRecommendations) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RequestGetRecommendations.Merge(m, src)
}
func (m *RequestGetRecommendations) XXX_Size() int {
	return m.Size()
}
func (m *RequestGetRecommendations) XXX_DiscardUnknown() {
	xxx_messageInfo_RequestGetRecommendations.DiscardUnknown(m)
}

var xxx_messageInfo_RequestGetRecommendations proto.InternalMessageInfo

type ResponseGetRecommendations struct {
	Peers []*OutPeer `protobuf:"bytes,1,rep,name=peers,proto3" json:"peers,omitempty"`
}

func (m *ResponseGetRecommendations) Reset()      { *m = ResponseGetRecommendations{} }
func (*ResponseGetRecommendations) ProtoMessage() {}
func (*ResponseGetRecommendations) Descriptor() ([]byte, []int) {
	return fileDescriptor_453745cff914010e, []int{35}
}
func (m *ResponseGetRecommendations) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ResponseGetRecommendations) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ResponseGetRecommendations.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ResponseGetRecommendations) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResponseGetRecommendations.Merge(m, src)
}
func (m *ResponseGetRecommendations) XXX_Size() int {
	return m.Size()
}
func (m *ResponseGetRecommendations) XXX_DiscardUnknown() {
	xxx_messageInfo_ResponseGetRecommendations.DiscardUnknown(m)
}

var xxx_messageInfo_ResponseGetRecommendations proto.InternalMessageInfo

func (m *ResponseGetRecommendations) GetPeers() []*OutPeer {
	if m != nil {
		return m.Peers
	}
	return nil
}

type RequestGetPromotedPeers struct {
}

func (m *RequestGetPromotedPeers) Reset()      { *m = RequestGetPromotedPeers{} }
func (*RequestGetPromotedPeers) ProtoMessage() {}
func (*RequestGetPromotedPeers) Descriptor() ([]byte, []int) {
	return fileDescriptor_453745cff914010e, []int{36}
}
func (m *RequestGetPromotedPeers) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RequestGetPromotedPeers) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RequestGetPromotedPeers.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RequestGetPromotedPeers) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RequestGetPromotedPeers.Merge(m, src)
}
func (m *RequestGetPromotedPeers) XXX_Size() int {
	return m.Size()
}
func (m *RequestGetPromotedPeers) XXX_DiscardUnknown() {
	xxx_messageInfo_RequestGetPromotedPeers.DiscardUnknown(m)
}

var xxx_messageInfo_RequestGetPromotedPeers proto.InternalMessageInfo

type ResponseGetPromotedPeers struct {
	UserPeers  []*UserOutPeer  `protobuf:"bytes,1,rep,name=user_peers,json=userPeers,proto3" json:"user_peers,omitempty"`
	GroupPeers []*GroupOutPeer `protobuf:"bytes,2,rep,name=group_peers,json=groupPeers,proto3" json:"group_peers,omitempty"`
}

func (m *ResponseGetPromotedPeers) Reset()      { *m = ResponseGetPromotedPeers{} }
func (*ResponseGetPromotedPeers) ProtoMessage() {}
func (*ResponseGetPromotedPeers) Descriptor() ([]byte, []int) {
	return fileDescriptor_453745cff914010e, []int{37}
}
func (m *ResponseGetPromotedPeers) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ResponseGetPromotedPeers) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ResponseGetPromotedPeers.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ResponseGetPromotedPeers) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResponseGetPromotedPeers.Merge(m, src)
}
func (m *ResponseGetPromotedPeers) XXX_Size() int {
	return m.Size()
}
func (m *ResponseGetPromotedPeers) XXX_DiscardUnknown() {
	xxx_messageInfo_ResponseGetPromotedPeers.DiscardUnknown(m)
}

var xxx_messageInfo_ResponseGetPromotedPeers proto.InternalMessageInfo

func (m *ResponseGetPromotedPeers) GetUserPeers() []*UserOutPeer {
	if m != nil {
		return m.UserPeers
	}
	return nil
}

func (m *ResponseGetPromotedPeers) GetGroupPeers() []*GroupOutPeer {
	if m != nil {
		return m.GroupPeers
	}
	return nil
}

func init() {
	proto.RegisterEnum("dialog.SearchPeerType", SearchPeerType_name, SearchPeerType_value)
	proto.RegisterEnum("dialog.SearchContentType", SearchContentType_name, SearchContentType_value)
	proto.RegisterEnum("dialog.SearchDirection", SearchDirection_name, SearchDirection_value)
	proto.RegisterType((*SimpleContactSearchCondition)(nil), "dialog.SimpleContactSearchCondition")
	proto.RegisterType((*SimpleMessageSearchCondition)(nil), "dialog.SimpleMessageSearchCondition")
	proto.RegisterType((*SimplePeerSearchCondition)(nil), "dialog.SimplePeerSearchCondition")
	proto.RegisterType((*SimpleUserProfileSearchCondition)(nil), "dialog.SimpleUserProfileSearchCondition")
	proto.RegisterType((*SimpleGroupSearchCondition)(nil), "dialog.SimpleGroupSearchCondition")
	proto.RegisterType((*Criterion)(nil), "dialog.criterion")
	proto.RegisterType((*SimpleSearchCondition)(nil), "dialog.SimpleSearchCondition")
	proto.RegisterType((*SearchCondition)(nil), "dialog.SearchCondition")
	proto.RegisterType((*SearchPeerTypeCondition)(nil), "dialog.SearchPeerTypeCondition")
	proto.RegisterType((*SearchPieceText)(nil), "dialog.SearchPieceText")
	proto.RegisterType((*SearchAndCondition)(nil), "dialog.SearchAndCondition")
	proto.RegisterType((*SearchOrCondition)(nil), "dialog.SearchOrCondition")
	proto.RegisterType((*SearchPeerCondition)(nil), "dialog.SearchPeerCondition")
	proto.RegisterType((*SearchPeerContentType)(nil), "dialog.SearchPeerContentType")
	proto.RegisterType((*SearchSenderIdConfition)(nil), "dialog.SearchSenderIdConfition")
	proto.RegisterType((*PeerSearchResult)(nil), "dialog.PeerSearchResult")
	proto.RegisterType((*RequestPeerSearch)(nil), "dialog.RequestPeerSearch")
	proto.RegisterType((*ResponsePeerSearch)(nil), "dialog.ResponsePeerSearch")
	proto.RegisterType((*RequestResolvePeer)(nil), "dialog.RequestResolvePeer")
	proto.RegisterType((*ResponseResolvePeer)(nil), "dialog.ResponseResolvePeer")
	proto.RegisterType((*MessageSearchResult)(nil), "dialog.MessageSearchResult")
	proto.RegisterType((*MessageSearchItem)(nil), "dialog.MessageSearchItem")
	proto.RegisterType((*ResponseMessageSearchResponse)(nil), "dialog.ResponseMessageSearchResponse")
	proto.RegisterType((*RequestMessageSearch)(nil), "dialog.RequestMessageSearch")
	proto.RegisterType((*RequestMessageSearchMore)(nil), "dialog.RequestMessageSearchMore")
	proto.RegisterType((*RequestSimpleSearch)(nil), "dialog.RequestSimpleSearch")
	proto.RegisterType((*RequestSimpleSearchMore)(nil), "dialog.RequestSimpleSearchMore")
	proto.RegisterType((*RequestFieldAutocomplete)(nil), "dialog.RequestFieldAutocomplete")
	proto.RegisterType((*ResponseFieldAutocomplete)(nil), "dialog.ResponseFieldAutocomplete")
	proto.RegisterType((*RequestLoadUserSearchByPredicatesResults)(nil), "dialog.RequestLoadUserSearchByPredicatesResults")
	proto.RegisterType((*UserMatch)(nil), "dialog.UserMatch")
	proto.RegisterType((*ResponseLoadUserSearchByPredicatesResults)(nil), "dialog.ResponseLoadUserSearchByPredicatesResults")
	proto.RegisterType((*RequestLoadUserSearchByPredicatesCount)(nil), "dialog.RequestLoadUserSearchByPredicatesCount")
	proto.RegisterType((*ResponseLoadUserSearchByPredicatesCount)(nil), "dialog.ResponseLoadUserSearchByPredicatesCount")
	proto.RegisterType((*RequestGetRecommendations)(nil), "dialog.RequestGetRecommendations")
	proto.RegisterType((*ResponseGetRecommendations)(nil), "dialog.ResponseGetRecommendations")
	proto.RegisterType((*RequestGetPromotedPeers)(nil), "dialog.RequestGetPromotedPeers")
	proto.RegisterType((*ResponseGetPromotedPeers)(nil), "dialog.ResponseGetPromotedPeers")
}

func init() { proto.RegisterFile("search.proto", fileDescriptor_453745cff914010e) }

var fileDescriptor_453745cff914010e = []byte{
	// 2559 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x5a, 0xcd, 0x6f, 0x1b, 0xc7,
	0x15, 0xe7, 0x92, 0x94, 0x44, 0x3e, 0x52, 0x12, 0x35, 0xb2, 0x23, 0x8a, 0x92, 0x28, 0x69, 0x53,
	0xdb, 0xaa, 0xe2, 0x50, 0xb2, 0xec, 0xd8, 0x89, 0x5a, 0xc0, 0xa1, 0x28, 0x59, 0xa2, 0x3f, 0x44,
	0x65, 0x25, 0x25, 0x75, 0x5b, 0x80, 0x58, 0xed, 0x8e, 0xe8, 0x0d, 0xc8, 0x5d, 0x7a, 0x77, 0xa9,
	0x56, 0x29, 0xd0, 0x8f, 0x5c, 0x0a, 0xf8, 0x54, 0xb4, 0x40, 0xd1, 0x6b, 0x81, 0x1c, 0x8a, 0xf6,
	0xd2, 0x43, 0x0b, 0x14, 0x28, 0xd0, 0x00, 0x3d, 0x14, 0x3d, 0x1a, 0xe8, 0x25, 0xed, 0xa9, 0x96,
	0x7b, 0x28, 0xd2, 0x4b, 0xfe, 0x84, 0x62, 0x66, 0x76, 0xb9, 0xbb, 0xb3, 0x4b, 0x52, 0x76, 0xd3,
	0x20, 0xa7, 0x88, 0xf3, 0xde, 0xef, 0xcd, 0x6f, 0xde, 0xd7, 0xbc, 0xd9, 0x18, 0xb2, 0x16, 0x96,
	0x4d, 0xe5, 0x51, 0xa9, 0x6d, 0x1a, 0xb6, 0x81, 0x86, 0x55, 0x4d, 0x6e, 0x1a, 0x8d, 0x42, 0xb1,
	0x61, 0x18, 0x8d, 0x26, 0x5e, 0xa1, 0xab, 0x47, 0x9d, 0xe3, 0x95, 0xef, 0x98, 0x72, 0xbb, 0x8d,
	0x4d, 0x8b, 0xe9, 0x15, 0x66, 0x1d, 0xb9, 0xdc, 0xd6, 0x56, 0x64, 0x5d, 0x37, 0x6c, 0xd9, 0xd6,
	0x0c, 0xdd, 0x95, 0xce, 0xf3, 0x68, 0x5b, 0x6b, 0x61, 0xcb, 0x96, 0x5b, 0x6d, 0x47, 0x61, 0x42,
	0xc5, 0xc7, 0x9a, 0xae, 0xf9, 0x31, 0xd9, 0x86, 0x69, 0x74, 0xda, 0xee, 0xaf, 0x4c, 0x1b, 0x7b,
	0x9b, 0x8d, 0xb7, 0xb0, 0x65, 0xc9, 0x0d, 0x4d, 0x6f, 0xb8, 0xd2, 0x8e, 0xe5, 0x49, 0x27, 0x5b,
	0x9a, 0xa5, 0xe0, 0x66, 0x53, 0xd6, 0xb1, 0xd1, 0x71, 0x17, 0x2f, 0x5a, 0x8a, 0xdc, 0x94, 0xdb,
	0x47, 0x2b, 0xce, 0x7f, 0xd9, 0xb2, 0xb8, 0x06, 0xb3, 0xfb, 0x5a, 0xab, 0xdd, 0xc4, 0x15, 0x43,
	0xb7, 0x65, 0xc5, 0xde, 0xa7, 0x67, 0xaf, 0x18, 0xba, 0x4a, 0xb9, 0x20, 0x04, 0x49, 0x1b, 0x7f,
	0xd7, 0xce, 0x0b, 0x0b, 0xc2, 0x52, 0x5a, 0xa2, 0x7f, 0x8b, 0x3f, 0x8a, 0xbb, 0xa0, 0x07, 0x94,
	0x06, 0xe6, 0x41, 0x0b, 0x90, 0x24, 0x6c, 0x29, 0x28, 0xb3, 0x96, 0x2d, 0x31, 0x17, 0x96, 0xf6,
	0x30, 0x36, 0x25, 0x2a, 0xe9, 0x9a, 0x8d, 0x7b, 0x66, 0xd1, 0xeb, 0x90, 0xb4, 0x4f, 0xdb, 0x38,
	0x9f, 0x58, 0x10, 0x96, 0xc6, 0xd6, 0xa6, 0x5d, 0x54, 0xd7, 0xb8, 0x8d, 0x75, 0xfb, 0xe0, 0xb4,
	0x8d, 0x25, 0xaa, 0x86, 0x36, 0x20, 0xc7, 0x02, 0x55, 0x57, 0x35, 0x13, 0x2b, 0x64, 0xe3, 0x7c,
	0x92, 0x42, 0xa7, 0x82, 0xd0, 0x4d, 0x57, 0x2c, 0x8d, 0x5b, 0xc1, 0x05, 0xf4, 0x26, 0xa4, 0x55,
	0xd9, 0xc6, 0xf5, 0x63, 0xd3, 0x68, 0xe5, 0x87, 0x28, 0xdb, 0x99, 0x12, 0x0b, 0x55, 0xc9, 0x0d,
	0x55, 0xa9, 0xaa, 0xdb, 0x37, 0x6f, 0xbc, 0x2b, 0x37, 0x3b, 0x58, 0x4a, 0x11, 0xed, 0x3b, 0xa6,
	0xd1, 0x12, 0x3f, 0x14, 0x60, 0x9a, 0xf9, 0x80, 0x9c, 0x8a, 0x77, 0xc0, 0x75, 0x48, 0x93, 0x63,
	0xd6, 0xe9, 0x79, 0x04, 0x4a, 0xea, 0x95, 0x20, 0x29, 0x82, 0xa2, 0x87, 0x49, 0xb5, 0x9d, 0xbf,
	0xd0, 0xaa, 0xcf, 0x27, 0x99, 0xb5, 0xd9, 0x10, 0x8f, 0x7d, 0xdb, 0xd4, 0xf4, 0x06, 0x23, 0xc2,
	0x02, 0xb1, 0x05, 0x0b, 0x8c, 0xc3, 0xa1, 0x85, 0xcd, 0x3d, 0xd3, 0x38, 0xd6, 0x9a, 0xa1, 0x58,
	0x2c, 0x42, 0xf6, 0x71, 0x07, 0x9b, 0xa7, 0x75, 0x8b, 0xc2, 0x9d, 0x40, 0x66, 0xe8, 0x1a, 0xb3,
	0x28, 0xde, 0x86, 0x02, 0x33, 0xb3, 0x4d, 0x12, 0xee, 0x25, 0x0c, 0x64, 0x20, 0xad, 0x98, 0x9a,
	0x8d, 0x4d, 0xcd, 0xd0, 0xc5, 0xff, 0xc4, 0xe1, 0x22, 0x33, 0xc7, 0x5b, 0x7a, 0x1b, 0x46, 0x14,
	0x96, 0x65, 0x4e, 0x66, 0x7c, 0xa5, 0xeb, 0x93, 0x3e, 0x29, 0xb8, 0x13, 0x93, 0x5c, 0x18, 0xb1,
	0xc0, 0x32, 0x1f, 0x3b, 0x5e, 0xe2, 0x2c, 0x44, 0xe7, 0x23, 0xb1, 0xe0, 0xc0, 0xd0, 0x2d, 0x27,
	0x35, 0x13, 0x14, 0xbe, 0x18, 0x84, 0x47, 0x84, 0x72, 0x27, 0xe6, 0x64, 0xec, 0x7d, 0xa0, 0x35,
	0xe6, 0x78, 0x99, 0x66, 0x5a, 0x66, 0x6d, 0x29, 0x88, 0xef, 0x1d, 0x86, 0x9d, 0x98, 0xe4, 0x87,
	0xa3, 0x75, 0x18, 0xa2, 0xd5, 0xed, 0x24, 0x9d, 0x18, 0xb4, 0x13, 0x15, 0x87, 0x9d, 0x98, 0xc4,
	0x20, 0x1b, 0x01, 0x6f, 0xff, 0x3d, 0x09, 0xe3, 0xbc, 0x9f, 0xbf, 0x05, 0x53, 0x56, 0x20, 0xc9,
	0xba, 0x22, 0xc7, 0xef, 0xf3, 0xd1, 0xb9, 0xe8, 0xdf, 0xab, 0x97, 0x05, 0x54, 0x01, 0xa7, 0x8a,
	0xf6, 0x34, 0xac, 0xe0, 0x03, 0x2f, 0x61, 0xb9, 0xaa, 0xeb, 0x8a, 0x77, 0x62, 0x12, 0x8f, 0x40,
	0xf7, 0x01, 0xb1, 0xa5, 0xb2, 0xae, 0x7a, 0xe4, 0x58, 0x4c, 0x0a, 0x41, 0x3b, 0x7e, 0x8d, 0x9d,
	0x98, 0x14, 0x81, 0x43, 0x55, 0x98, 0x60, 0xab, 0x35, 0xd3, 0x33, 0xc6, 0x02, 0xc4, 0x75, 0x11,
	0x9f, 0xc2, 0x4e, 0x4c, 0x0a, 0xa3, 0x50, 0x0d, 0x26, 0xbd, 0x83, 0x7b, 0xc6, 0xdc, 0xd6, 0x10,
	0x72, 0x9b, 0xdf, 0x5c, 0x14, 0x12, 0x1d, 0xc2, 0xc5, 0xc0, 0xb2, 0xdb, 0xc4, 0xf2, 0xc3, 0xd4,
	0xe4, 0x5c, 0xa4, 0x49, 0x57, 0x69, 0x27, 0x26, 0x45, 0xa3, 0xbd, 0x10, 0xef, 0x63, 0x5d, 0xc5,
	0x66, 0x95, 0x78, 0xe3, 0x98, 0x71, 0x1d, 0x89, 0x0a, 0x71, 0x48, 0xcd, 0x0b, 0x71, 0x48, 0xb4,
	0x31, 0x0c, 0xc9, 0x23, 0x43, 0x3d, 0x15, 0xbf, 0x0d, 0x53, 0x3d, 0x12, 0x04, 0x95, 0xcf, 0xdd,
	0xe0, 0x36, 0xb2, 0x4f, 0x3e, 0x5d, 0x4d, 0xc1, 0xf0, 0x23, 0x4d, 0x55, 0xb1, 0xee, 0xb5, 0x3b,
	0xf1, 0x0d, 0x37, 0x71, 0xbd, 0xb4, 0x10, 0x61, 0x88, 0xb6, 0x15, 0xd6, 0x63, 0x38, 0x24, 0x13,
	0x89, 0x0f, 0x01, 0x85, 0x13, 0x03, 0x55, 0x20, 0x2d, 0xeb, 0x6a, 0xdd, 0x45, 0x27, 0xc2, 0xf9,
	0xd8, 0xd5, 0xdd, 0x18, 0x7d, 0xf2, 0xe9, 0x6a, 0x1a, 0x46, 0x4e, 0x34, 0x4b, 0x3b, 0x6a, 0x62,
	0x29, 0x25, 0xeb, 0xea, 0x3b, 0xd4, 0xf4, 0xbb, 0x30, 0x11, 0x4a, 0x13, 0x54, 0x86, 0x94, 0x61,
	0x3a, 0x86, 0xe3, 0x2f, 0x64, 0x78, 0xc4, 0x30, 0x99, 0xdd, 0x2a, 0x4c, 0x46, 0x64, 0x0c, 0x5a,
	0x0b, 0xdc, 0x92, 0xe3, 0xae, 0xd5, 0x5a, 0xc7, 0x26, 0x7a, 0xbc, 0x35, 0xaa, 0x2b, 0xaa, 0x70,
	0x31, 0x32, 0x53, 0xd0, 0x3d, 0xc8, 0x2a, 0xec, 0xa7, 0x3f, 0x26, 0xbd, 0x2f, 0x51, 0xde, 0x7c,
	0x46, 0xf1, 0x64, 0xe2, 0x96, 0x1b, 0xf8, 0x50, 0x6e, 0xa0, 0x65, 0x48, 0x5b, 0x74, 0xb1, 0xae,
	0xa9, 0x74, 0x93, 0xa1, 0x90, 0x3f, 0x2d, 0x07, 0x24, 0xfe, 0x31, 0x09, 0x39, 0xaf, 0xa5, 0x4a,
	0xd8, 0xea, 0x34, 0x6d, 0xb4, 0xd2, 0x7b, 0x36, 0x88, 0x3c, 0x32, 0x49, 0x0a, 0x5b, 0xb3, 0x9b,
	0xac, 0xe3, 0x87, 0x92, 0x82, 0x8a, 0xd0, 0x3a, 0xa4, 0xad, 0x47, 0x86, 0x69, 0xeb, 0x72, 0x0b,
	0xe7, 0xd3, 0xe7, 0xb8, 0x3f, 0x3d, 0x75, 0xd2, 0xd8, 0x55, 0x6c, 0x29, 0xa6, 0xd6, 0xf6, 0x35,
	0xa1, 0xbe, 0x68, 0x8e, 0x83, 0x1f, 0x8e, 0x6a, 0x30, 0xda, 0xc2, 0xad, 0x23, 0x6c, 0x5a, 0x75,
	0xc5, 0xe8, 0xe8, 0xb6, 0xd3, 0x87, 0x22, 0xa7, 0x8a, 0xeb, 0x6b, 0xcc, 0x1c, 0x77, 0xec, 0xac,
	0x63, 0xa0, 0x42, 0xf0, 0x68, 0x15, 0xb2, 0x74, 0x44, 0x51, 0x4c, 0x2c, 0xdb, 0x58, 0xa5, 0xad,
	0x28, 0x11, 0x8a, 0x1e, 0x51, 0xa9, 0x30, 0x0d, 0xb4, 0x09, 0x23, 0x54, 0xd9, 0x30, 0x9d, 0x26,
	0xf3, 0x22, 0x9b, 0xbb, 0x50, 0x74, 0x07, 0xd2, 0x9a, 0x55, 0x6f, 0x77, 0x8e, 0x9a, 0x9a, 0xe2,
	0xf4, 0x94, 0x42, 0xc8, 0xce, 0x86, 0x61, 0x34, 0x23, 0xcd, 0xa4, 0x34, 0x6b, 0x8f, 0x42, 0xd1,
	0x2d, 0x6a, 0xe7, 0x7d, 0x43, 0xd3, 0xb1, 0x9a, 0x4f, 0x0d, 0xb2, 0x43, 0x80, 0x77, 0xa9, 0xae,
	0xf8, 0xb1, 0x00, 0x13, 0x12, 0x7e, 0xdc, 0xc1, 0x96, 0xed, 0x25, 0x11, 0xfa, 0x9a, 0xd7, 0x22,
	0xfa, 0xd6, 0x62, 0x54, 0xef, 0x20, 0xc1, 0x31, 0xda, 0xb6, 0xd6, 0xd2, 0x3e, 0x60, 0xc3, 0x39,
	0x2d, 0xe8, 0x31, 0xef, 0xc6, 0x39, 0x6c, 0x13, 0x3f, 0xd6, 0x7c, 0x2a, 0xfc, 0xb9, 0x82, 0xf8,
	0xf5, 0xd9, 0xb3, 0xdb, 0xd3, 0x30, 0xa5, 0xb5, 0x4a, 0x6a, 0xb3, 0x51, 0x6a, 0x98, 0x6d, 0xa5,
	0xb4, 0x6d, 0xb6, 0x15, 0x87, 0xb5, 0xf8, 0xeb, 0x38, 0x20, 0x09, 0x5b, 0x6d, 0x43, 0xb7, 0x7c,
	0xa3, 0x05, 0x49, 0x68, 0x3a, 0xad, 0x3b, 0xed, 0xa4, 0x5b, 0x02, 0x64, 0x7a, 0x90, 0x98, 0x08,
	0x5d, 0x82, 0x61, 0x36, 0xfd, 0xe7, 0x13, 0x54, 0x69, 0xd4, 0x55, 0xa2, 0xa3, 0x81, 0xe4, 0x08,
	0xd1, 0x6d, 0x18, 0x73, 0x66, 0x60, 0x93, 0x56, 0x97, 0xe5, 0xb8, 0x25, 0xef, 0x2f, 0x2b, 0x7f,
	0xf9, 0x49, 0xa3, 0x96, 0xef, 0x97, 0x85, 0xd6, 0x00, 0xc8, 0x86, 0x75, 0xfa, 0xb8, 0xc8, 0x27,
	0x29, 0x78, 0xd2, 0x4f, 0xc8, 0xe9, 0x46, 0x52, 0x9a, 0x4e, 0x2f, 0x44, 0x0b, 0xbd, 0x01, 0x19,
	0xba, 0xbd, 0x03, 0x1a, 0xa2, 0xa0, 0x0b, 0x01, 0x82, 0x2e, 0x0a, 0xa8, 0x22, 0x85, 0xad, 0xcf,
	0x9d, 0xdd, 0x2e, 0x40, 0x3e, 0xec, 0x2b, 0xe6, 0x1f, 0xb1, 0x4e, 0x7c, 0x45, 0xfd, 0x26, 0x61,
	0xcb, 0x68, 0x9e, 0x50, 0x8f, 0xa1, 0xd7, 0xfc, 0x85, 0xcd, 0x6e, 0x05, 0x2e, 0x22, 0x9e, 0x7c,
	0x40, 0x34, 0x1e, 0xc2, 0xa4, 0xbb, 0x99, 0x7f, 0x87, 0x57, 0xfb, 0x76, 0x61, 0xd6, 0x83, 0x06,
	0x71, 0xff, 0x4d, 0x1c, 0x26, 0x03, 0xa3, 0xe7, 0xcb, 0xf6, 0xba, 0x79, 0x48, 0x98, 0x9a, 0x4a,
	0x3b, 0x5d, 0xa8, 0xc6, 0x89, 0x04, 0x2d, 0x42, 0x92, 0xa4, 0x28, 0xed, 0x52, 0x21, 0x0d, 0x2a,
	0x0a, 0x76, 0xe8, 0x64, 0xdf, 0x0e, 0x8d, 0x6e, 0xb3, 0x89, 0x1c, 0xeb, 0xb6, 0x33, 0xe2, 0x74,
	0x2f, 0x71, 0xe7, 0x38, 0xce, 0x8d, 0x11, 0xee, 0x12, 0x6c, 0x1d, 0xad, 0x41, 0xa2, 0xa5, 0xa9,
	0x4e, 0x9f, 0x99, 0xe8, 0x26, 0xce, 0x61, 0x75, 0x33, 0xb2, 0x2d, 0x10, 0x65, 0x71, 0x07, 0x26,
	0x02, 0xce, 0xaa, 0xda, 0xb8, 0x85, 0xae, 0xc3, 0x30, 0x4b, 0x61, 0xc7, 0x59, 0x33, 0x1c, 0x91,
	0x40, 0x12, 0x3b, 0xaa, 0xe2, 0xef, 0x13, 0x30, 0xe7, 0x06, 0x81, 0xd7, 0xa3, 0x8b, 0xa8, 0xd6,
	0xa3, 0x40, 0xa6, 0x23, 0xcd, 0x13, 0x26, 0xa1, 0x8a, 0x0f, 0x16, 0xcc, 0x3b, 0x30, 0xde, 0x34,
	0x64, 0xb5, 0xde, 0x32, 0x4c, 0x5c, 0xb7, 0x6c, 0x12, 0x8b, 0x5e, 0x1d, 0x7e, 0xe3, 0xd4, 0xc6,
	0x56, 0xd4, 0x85, 0x31, 0x4a, 0x2c, 0x3c, 0x30, 0x4c, 0xbc, 0x4f, 0xf0, 0x68, 0x07, 0xc6, 0x68,
	0x0d, 0x1a, 0x1d, 0x3b, 0x50, 0x52, 0x51, 0x75, 0x18, 0xba, 0x2b, 0x3a, 0x9e, 0xcc, 0x42, 0xf7,
	0x60, 0x9c, 0x55, 0xa6, 0x67, 0x6a, 0xb8, 0x77, 0x75, 0x86, 0x4e, 0xda, 0xf0, 0x09, 0x2d, 0x54,
	0x82, 0x8c, 0x6d, 0xd8, 0x72, 0xd3, 0xb9, 0xc7, 0x46, 0xa2, 0x32, 0x0e, 0xa8, 0x06, 0xbd, 0xa8,
	0x06, 0xd4, 0xc8, 0xdd, 0x64, 0x2a, 0x9e, 0x4b, 0xdc, 0x4d, 0xa6, 0x12, 0xb9, 0xa4, 0xf8, 0x67,
	0x01, 0x2e, 0x38, 0x65, 0x19, 0xf0, 0xbf, 0xbf, 0xbb, 0x0b, 0x5f, 0xf6, 0xee, 0xfe, 0xb1, 0x00,
	0xf9, 0xa8, 0x43, 0x90, 0xc0, 0xa2, 0x1b, 0xe1, 0x34, 0x21, 0x47, 0xca, 0xf6, 0xcf, 0x84, 0x2f,
	0xf8, 0x04, 0xbf, 0x15, 0x48, 0x4b, 0xa4, 0x7f, 0xfb, 0x1f, 0xec, 0xe8, 0x2d, 0x48, 0x39, 0x0f,
	0x4c, 0xd9, 0x29, 0x97, 0xb9, 0xe0, 0xfb, 0x94, 0x0b, 0x87, 0xd4, 0x55, 0x47, 0x6f, 0xbf, 0xf0,
	0x09, 0x5e, 0x8c, 0xf2, 0x2f, 0x05, 0x98, 0x8a, 0xa0, 0x4c, 0x7d, 0x7e, 0xb9, 0x87, 0xcf, 0x79,
	0x2f, 0xff, 0xbf, 0x39, 0xfe, 0xdc, 0x4b, 0x8c, 0x3b, 0x1a, 0x6e, 0xaa, 0xe5, 0x8e, 0x6d, 0x28,
	0x06, 0x21, 0x6b, 0x63, 0x74, 0x15, 0xe0, 0x98, 0x2c, 0xd6, 0xfb, 0xdc, 0x68, 0x54, 0x61, 0x97,
	0xcc, 0xa6, 0x25, 0xc8, 0x30, 0xed, 0x13, 0xd2, 0x46, 0x9c, 0x09, 0x98, 0xaf, 0x41, 0xaa, 0x41,
	0xfb, 0xcc, 0x00, 0x62, 0xbf, 0x10, 0x60, 0xda, 0xad, 0xc7, 0xcf, 0x9d, 0x59, 0xa2, 0x3f, 0xb3,
	0x01, 0x37, 0xe8, 0x3f, 0xe2, 0xb0, 0xe4, 0xd0, 0xbc, 0x6f, 0xc8, 0x2a, 0xe9, 0x78, 0x2c, 0xb2,
	0x1b, 0xa7, 0x7b, 0x26, 0x56, 0x35, 0x45, 0xb6, 0xb1, 0xe5, 0xf6, 0xe0, 0x3b, 0x00, 0xed, 0xee,
	0x62, 0xf4, 0x20, 0xd8, 0x05, 0x85, 0x38, 0x79, 0x48, 0xb4, 0x04, 0x29, 0xd6, 0x2e, 0x9d, 0x2b,
	0x37, 0x74, 0x51, 0x8e, 0x50, 0x71, 0x55, 0x45, 0x65, 0xb7, 0x2f, 0x9d, 0xe7, 0x75, 0xc0, 0x19,
	0x71, 0xba, 0xd3, 0xab, 0x30, 0xd4, 0xd4, 0x5a, 0x9a, 0x1d, 0x7d, 0x25, 0x33, 0x19, 0xba, 0x09,
	0xe3, 0x26, 0x7e, 0xdc, 0xd1, 0x4c, 0xac, 0xd6, 0xa9, 0xf3, 0xd8, 0x5d, 0x10, 0xf2, 0xec, 0x98,
	0xab, 0x45, 0xc3, 0x38, 0x28, 0x21, 0x5b, 0x90, 0x26, 0x0e, 0x7d, 0x20, 0xdb, 0xca, 0x23, 0x74,
	0x19, 0x46, 0xe8, 0x6d, 0xd3, 0xeb, 0xf9, 0x36, 0x4c, 0xa4, 0x55, 0x15, 0xbd, 0x09, 0xb9, 0x16,
	0x01, 0xd4, 0x7d, 0xae, 0x26, 0x4e, 0x4a, 0xf1, 0x80, 0x71, 0xaa, 0xe6, 0x45, 0x49, 0xfc, 0x9d,
	0x00, 0x5f, 0x75, 0x03, 0x3b, 0x38, 0x98, 0x37, 0xdd, 0x69, 0x98, 0xc5, 0x71, 0xc2, 0x7f, 0xe9,
	0x51, 0xc6, 0x21, 0x57, 0xb1, 0x09, 0x79, 0x15, 0xb2, 0xec, 0x4a, 0x77, 0xee, 0xa7, 0xc8, 0x00,
	0x66, 0x98, 0xca, 0x79, 0x2e, 0x28, 0xf1, 0x0f, 0x02, 0x5c, 0x1e, 0x98, 0x82, 0xec, 0x4d, 0xf6,
	0x85, 0x27, 0xe0, 0x80, 0x00, 0x7f, 0x00, 0x57, 0x06, 0x3b, 0xbc, 0xfb, 0x9c, 0x0c, 0xb8, 0x4d,
	0xf8, 0x5f, 0xdd, 0xf6, 0x16, 0xe9, 0x29, 0x94, 0xc6, 0x36, 0xb6, 0x25, 0xac, 0x18, 0xad, 0x16,
	0xd6, 0xd5, 0x73, 0x35, 0xca, 0x23, 0x28, 0xb8, 0x66, 0xc2, 0x58, 0x74, 0x09, 0x86, 0xd8, 0x08,
	0xc3, 0xfc, 0x1b, 0x9a, 0xcc, 0x99, 0x74, 0x10, 0xbd, 0x5b, 0xdd, 0xfb, 0x62, 0x1b, 0xdb, 0x7b,
	0xa6, 0xd1, 0x32, 0x6c, 0xac, 0xb2, 0x07, 0x49, 0x7f, 0x72, 0x1f, 0xd1, 0x2e, 0xde, 0x65, 0x17,
	0x80, 0x72, 0xcf, 0x26, 0xe1, 0x65, 0x9e, 0x4d, 0xf1, 0xcf, 0xe5, 0xd9, 0xb4, 0xfc, 0x03, 0x18,
	0x0b, 0x7e, 0x6f, 0x43, 0x05, 0x78, 0x65, 0x7f, 0xab, 0x2c, 0x55, 0x76, 0xf6, 0xb6, 0xb6, 0xa4,
	0x83, 0x87, 0x7b, 0x5b, 0xf5, 0xc3, 0xdd, 0x7b, 0xbb, 0xb5, 0xf7, 0x76, 0x73, 0x31, 0x34, 0x0d,
	0x17, 0x39, 0xd9, 0xb6, 0x54, 0x3b, 0xdc, 0xdb, 0xcf, 0x09, 0x68, 0x06, 0xa6, 0x38, 0x51, 0xa5,
	0xb6, 0x7b, 0x50, 0xae, 0x1c, 0xec, 0xe7, 0xe2, 0x11, 0xb8, 0xbd, 0xc3, 0x8d, 0xfb, 0xd5, 0x4a,
	0x2e, 0xb1, 0xfc, 0x4c, 0x70, 0xbf, 0x9a, 0xf9, 0x3f, 0x47, 0xcd, 0xc1, 0x34, 0x03, 0x10, 0x23,
	0x5b, 0xbb, 0x07, 0xbd, 0x78, 0xf8, 0xc5, 0xe5, 0xdd, 0x87, 0x39, 0xc1, 0xa3, 0xef, 0x17, 0x1d,
	0x6c, 0x7d, 0xe3, 0x20, 0x17, 0xf7, 0x38, 0xfa, 0x65, 0xf7, 0xab, 0xbb, 0xf7, 0xf6, 0x73, 0x09,
	0x34, 0x0f, 0x33, 0x61, 0xe1, 0x66, 0xad, 0x72, 0xf8, 0x60, 0x6b, 0xf7, 0x60, 0x3f, 0x97, 0x8c,
	0x46, 0x3f, 0xd8, 0xda, 0xac, 0x96, 0x73, 0x43, 0xd1, 0xc2, 0xf2, 0xe1, 0x66, 0xb5, 0x96, 0x1b,
	0x5e, 0xd6, 0xdc, 0x4f, 0x95, 0xde, 0xff, 0x39, 0xea, 0xea, 0x6f, 0x56, 0xa5, 0xad, 0xca, 0x41,
	0xb5, 0xb6, 0xeb, 0x3b, 0x5e, 0x84, 0xf0, 0x4e, 0x4d, 0x7a, 0xaf, 0x2c, 0x6d, 0xe6, 0x04, 0x34,
	0x0b, 0x79, 0x5e, 0xb8, 0x51, 0xae, 0xdc, 0xa3, 0xd2, 0xf8, 0xda, 0x47, 0x59, 0x18, 0x76, 0xc6,
	0xb0, 0xf7, 0x01, 0x7c, 0x5f, 0x0d, 0xba, 0x2f, 0x96, 0xd0, 0x37, 0x91, 0x42, 0xc1, 0x13, 0xf1,
	0x1f, 0x1b, 0xc4, 0x4b, 0x1f, 0xfe, 0xed, 0x5f, 0x3f, 0x8b, 0xcf, 0x8b, 0x85, 0x95, 0x93, 0x6b,
	0x2b, 0x24, 0x7d, 0x56, 0x98, 0x60, 0xc5, 0xd3, 0x59, 0x17, 0x96, 0x91, 0x0e, 0x19, 0xff, 0xa3,
	0xb8, 0xc0, 0x6d, 0xe6, 0x93, 0x15, 0x66, 0xf8, 0xdd, 0x7c, 0x42, 0xf1, 0x32, 0xdd, 0x6e, 0x41,
	0x9c, 0xe1, 0xb7, 0xf3, 0x29, 0x91, 0xfd, 0xbe, 0x0f, 0xa3, 0xc1, 0xc9, 0x7f, 0x96, 0xdb, 0x31,
	0x20, 0x2d, 0x5c, 0xe2, 0xf7, 0x8c, 0x7c, 0xed, 0x89, 0x4b, 0x74, 0x77, 0x51, 0x9c, 0xe3, 0x77,
	0x0f, 0xa8, 0x93, 0xfd, 0x9f, 0x08, 0xdc, 0x23, 0x94, 0x4e, 0x90, 0x0b, 0xfd, 0x48, 0x10, 0x8d,
	0xf3, 0x12, 0xb9, 0x4a, 0x89, 0x5c, 0x16, 0x17, 0xfb, 0x12, 0x21, 0x16, 0x09, 0x99, 0xef, 0x41,
	0x36, 0x30, 0x7f, 0xcf, 0x70, 0x34, 0xfc, 0xc2, 0xf3, 0x32, 0xb8, 0x42, 0x19, 0x2c, 0x8a, 0xb3,
	0x3c, 0x03, 0xbf, 0x31, 0xb2, 0xf9, 0x8f, 0x05, 0xc8, 0x85, 0x46, 0xe9, 0xf9, 0x3e, 0x0c, 0x5e,
	0xc4, 0x0f, 0xaf, 0x51, 0x16, 0x97, 0xc4, 0x85, 0x7e, 0x2c, 0x5c, 0x37, 0xfc, 0x54, 0x80, 0x29,
	0xff, 0x44, 0xba, 0xdf, 0x69, 0x34, 0xb0, 0xc5, 0x2e, 0x03, 0x3e, 0x32, 0xa1, 0xf1, 0xb5, 0xb0,
	0xc8, 0x33, 0x0a, 0xa9, 0x88, 0x6b, 0x94, 0xcd, 0x55, 0xf1, 0x0a, 0xcf, 0xa6, 0xc7, 0xae, 0x84,
	0xd4, 0x5f, 0x04, 0x58, 0x1c, 0x3c, 0xc4, 0xac, 0x72, 0xf4, 0x06, 0x22, 0x0a, 0xd7, 0x78, 0xba,
	0x03, 0x21, 0xe2, 0xd7, 0x29, 0xfd, 0x9b, 0xe2, 0x35, 0x9e, 0xfe, 0x40, 0x28, 0x39, 0xc8, 0x9f,
	0x04, 0x98, 0x1f, 0x34, 0x1c, 0x94, 0xce, 0x7d, 0x0c, 0xaa, 0x5f, 0x58, 0x39, 0xff, 0x21, 0x28,
	0x40, 0x5c, 0xa7, 0x47, 0xb8, 0x21, 0xae, 0x9c, 0xff, 0x08, 0x6c, 0x08, 0x61, 0x25, 0x8b, 0x22,
	0xc6, 0x84, 0x45, 0x8e, 0x73, 0x58, 0xa5, 0x20, 0xf2, 0x34, 0xc3, 0x3a, 0xe2, 0xeb, 0x94, 0xd9,
	0x15, 0x51, 0xe4, 0x99, 0x45, 0x4c, 0x35, 0xb4, 0x7f, 0xe5, 0x42, 0x43, 0xc1, 0x7c, 0x98, 0x49,
	0x40, 0xa1, 0xb0, 0x10, 0xc1, 0x23, 0xa0, 0xd1, 0xbb, 0x6a, 0xb7, 0xb1, 0xbd, 0xa9, 0x59, 0x8a,
	0x71, 0x82, 0xcd, 0xd3, 0x75, 0x61, 0x79, 0x43, 0x7a, 0xfa, 0xac, 0x18, 0xfb, 0xe4, 0x59, 0x31,
	0xf6, 0xd9, 0xb3, 0xa2, 0xf0, 0xc3, 0xb3, 0xa2, 0xf0, 0xab, 0xb3, 0xa2, 0xf0, 0xd7, 0xb3, 0xa2,
	0xf0, 0xf4, 0xac, 0x28, 0xfc, 0xf3, 0xac, 0x28, 0xfc, 0xfb, 0xac, 0x18, 0xfb, 0xec, 0xac, 0x28,
	0xfc, 0xe4, 0x79, 0x31, 0xf6, 0xf4, 0x79, 0x31, 0xf6, 0xc9, 0xf3, 0x62, 0x0c, 0x2e, 0xf8, 0xc7,
	0x08, 0x0b, 0x9b, 0x27, 0x9a, 0x82, 0xad, 0x6f, 0x3a, 0xff, 0xc2, 0xe5, 0x68, 0x98, 0xbe, 0x66,
	0xae, 0xff, 0x37, 0x00, 0x00, 0xff, 0xff, 0x6c, 0x5e, 0x4d, 0x54, 0x00, 0x23, 0x00, 0x00,
}

func (x SearchPeerType) String() string {
	s, ok := SearchPeerType_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x SearchContentType) String() string {
	s, ok := SearchContentType_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x SearchDirection) String() string {
	s, ok := SearchDirection_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *SimpleContactSearchCondition) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SimpleContactSearchCondition)
	if !ok {
		that2, ok := that.(SimpleContactSearchCondition)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Text != that1.Text {
		return false
	}
	return true
}
func (this *SimpleMessageSearchCondition) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SimpleMessageSearchCondition)
	if !ok {
		that2, ok := that.(SimpleMessageSearchCondition)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Peer.Equal(that1.Peer) {
		return false
	}
	if this.Text != that1.Text {
		return false
	}
	if this.Type != that1.Type {
		return false
	}
	if this.SearchDirection != that1.SearchDirection {
		return false
	}
	if !this.DateFrom.Equal(that1.DateFrom) {
		return false
	}
	return true
}
func (this *SimplePeerSearchCondition) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SimplePeerSearchCondition)
	if !ok {
		that2, ok := that.(SimplePeerSearchCondition)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.PeerType != that1.PeerType {
		return false
	}
	if !this.Text.Equal(that1.Text) {
		return false
	}
	return true
}
func (this *SimpleUserProfileSearchCondition) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SimpleUserProfileSearchCondition)
	if !ok {
		that2, ok := that.(SimpleUserProfileSearchCondition)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.QueryString != that1.QueryString {
		return false
	}
	return true
}
func (this *SimpleGroupSearchCondition) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SimpleGroupSearchCondition)
	if !ok {
		that2, ok := that.(SimpleGroupSearchCondition)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.QueryString != that1.QueryString {
		return false
	}
	return true
}
func (this *Criterion) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Criterion)
	if !ok {
		that2, ok := that.(Criterion)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *SimpleSearchCondition) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SimpleSearchCondition)
	if !ok {
		that2, ok := that.(SimpleSearchCondition)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.Criterion == nil {
		if this.Criterion != nil {
			return false
		}
	} else if this.Criterion == nil {
		return false
	} else if !this.Criterion.Equal(that1.Criterion) {
		return false
	}
	return true
}
func (this *SimpleSearchCondition_Contact) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SimpleSearchCondition_Contact)
	if !ok {
		that2, ok := that.(SimpleSearchCondition_Contact)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Contact.Equal(that1.Contact) {
		return false
	}
	return true
}
func (this *SimpleSearchCondition_Message) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SimpleSearchCondition_Message)
	if !ok {
		that2, ok := that.(SimpleSearchCondition_Message)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Message.Equal(that1.Message) {
		return false
	}
	return true
}
func (this *SimpleSearchCondition_Peer) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SimpleSearchCondition_Peer)
	if !ok {
		that2, ok := that.(SimpleSearchCondition_Peer)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Peer.Equal(that1.Peer) {
		return false
	}
	return true
}
func (this *SimpleSearchCondition_UserProfile) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SimpleSearchCondition_UserProfile)
	if !ok {
		that2, ok := that.(SimpleSearchCondition_UserProfile)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.UserProfile.Equal(that1.UserProfile) {
		return false
	}
	return true
}
func (this *SimpleSearchCondition_Group) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SimpleSearchCondition_Group)
	if !ok {
		that2, ok := that.(SimpleSearchCondition_Group)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Group.Equal(that1.Group) {
		return false
	}
	return true
}
func (this *SearchCondition) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SearchCondition)
	if !ok {
		that2, ok := that.(SearchCondition)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.Body == nil {
		if this.Body != nil {
			return false
		}
	} else if this.Body == nil {
		return false
	} else if !this.Body.Equal(that1.Body) {
		return false
	}
	return true
}
func (this *SearchCondition_SearchPeerTypeCondition) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SearchCondition_SearchPeerTypeCondition)
	if !ok {
		that2, ok := that.(SearchCondition_SearchPeerTypeCondition)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.SearchPeerTypeCondition.Equal(that1.SearchPeerTypeCondition) {
		return false
	}
	return true
}
func (this *SearchCondition_SearchPieceText) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SearchCondition_SearchPieceText)
	if !ok {
		that2, ok := that.(SearchCondition_SearchPieceText)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.SearchPieceText.Equal(that1.SearchPieceText) {
		return false
	}
	return true
}
func (this *SearchCondition_SearchAndCondition) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SearchCondition_SearchAndCondition)
	if !ok {
		that2, ok := that.(SearchCondition_SearchAndCondition)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.SearchAndCondition.Equal(that1.SearchAndCondition) {
		return false
	}
	return true
}
func (this *SearchCondition_SearchOrCondition) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SearchCondition_SearchOrCondition)
	if !ok {
		that2, ok := that.(SearchCondition_SearchOrCondition)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.SearchOrCondition.Equal(that1.SearchOrCondition) {
		return false
	}
	return true
}
func (this *SearchCondition_SearchPeerCondition) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SearchCondition_SearchPeerCondition)
	if !ok {
		that2, ok := that.(SearchCondition_SearchPeerCondition)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.SearchPeerCondition.Equal(that1.SearchPeerCondition) {
		return false
	}
	return true
}
func (this *SearchCondition_SearchPeerContentType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SearchCondition_SearchPeerContentType)
	if !ok {
		that2, ok := that.(SearchCondition_SearchPeerContentType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.SearchPeerContentType.Equal(that1.SearchPeerContentType) {
		return false
	}
	return true
}
func (this *SearchCondition_SearchSenderIdConfition) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SearchCondition_SearchSenderIdConfition)
	if !ok {
		that2, ok := that.(SearchCondition_SearchSenderIdConfition)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.SearchSenderIdConfition.Equal(that1.SearchSenderIdConfition) {
		return false
	}
	return true
}
func (this *SearchPeerTypeCondition) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SearchPeerTypeCondition)
	if !ok {
		that2, ok := that.(SearchPeerTypeCondition)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.PeerType != that1.PeerType {
		return false
	}
	return true
}
func (this *SearchPieceText) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SearchPieceText)
	if !ok {
		that2, ok := that.(SearchPieceText)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Query != that1.Query {
		return false
	}
	return true
}
func (this *SearchAndCondition) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SearchAndCondition)
	if !ok {
		that2, ok := that.(SearchAndCondition)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.AndQuery) != len(that1.AndQuery) {
		return false
	}
	for i := range this.AndQuery {
		if !this.AndQuery[i].Equal(that1.AndQuery[i]) {
			return false
		}
	}
	return true
}
func (this *SearchOrCondition) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SearchOrCondition)
	if !ok {
		that2, ok := that.(SearchOrCondition)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.OrQuery) != len(that1.OrQuery) {
		return false
	}
	for i := range this.OrQuery {
		if !this.OrQuery[i].Equal(that1.OrQuery[i]) {
			return false
		}
	}
	return true
}
func (this *SearchPeerCondition) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SearchPeerCondition)
	if !ok {
		that2, ok := that.(SearchPeerCondition)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Peer.Equal(that1.Peer) {
		return false
	}
	return true
}
func (this *SearchPeerContentType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SearchPeerContentType)
	if !ok {
		that2, ok := that.(SearchPeerContentType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ContentType != that1.ContentType {
		return false
	}
	return true
}
func (this *SearchSenderIdConfition) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SearchSenderIdConfition)
	if !ok {
		that2, ok := that.(SearchSenderIdConfition)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.SenderId != that1.SenderId {
		return false
	}
	return true
}
func (this *PeerSearchResult) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PeerSearchResult)
	if !ok {
		that2, ok := that.(PeerSearchResult)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Peer.Equal(that1.Peer) {
		return false
	}
	if this.Title != that1.Title {
		return false
	}
	if !this.Shortname.Equal(that1.Shortname) {
		return false
	}
	if !this.Description.Equal(that1.Description) {
		return false
	}
	if !this.MembersCount.Equal(that1.MembersCount) {
		return false
	}
	if this.DateCreated != that1.DateCreated {
		return false
	}
	if !this.Creator.Equal(that1.Creator) {
		return false
	}
	if !this.IsPublic.Equal(that1.IsPublic) {
		return false
	}
	if !this.IsJoined.Equal(that1.IsJoined) {
		return false
	}
	return true
}
func (this *RequestPeerSearch) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RequestPeerSearch)
	if !ok {
		that2, ok := that.(RequestPeerSearch)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Query) != len(that1.Query) {
		return false
	}
	for i := range this.Query {
		if !this.Query[i].Equal(that1.Query[i]) {
			return false
		}
	}
	if len(this.Optimizations) != len(that1.Optimizations) {
		return false
	}
	for i := range this.Optimizations {
		if this.Optimizations[i] != that1.Optimizations[i] {
			return false
		}
	}
	return true
}
func (this *ResponsePeerSearch) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ResponsePeerSearch)
	if !ok {
		that2, ok := that.(ResponsePeerSearch)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Users) != len(that1.Users) {
		return false
	}
	for i := range this.Users {
		if !this.Users[i].Equal(that1.Users[i]) {
			return false
		}
	}
	if len(this.Groups) != len(that1.Groups) {
		return false
	}
	for i := range this.Groups {
		if !this.Groups[i].Equal(that1.Groups[i]) {
			return false
		}
	}
	if len(this.SearchResults) != len(that1.SearchResults) {
		return false
	}
	for i := range this.SearchResults {
		if !this.SearchResults[i].Equal(that1.SearchResults[i]) {
			return false
		}
	}
	if len(this.UserPeers) != len(that1.UserPeers) {
		return false
	}
	for i := range this.UserPeers {
		if !this.UserPeers[i].Equal(that1.UserPeers[i]) {
			return false
		}
	}
	if len(this.GroupPeers) != len(that1.GroupPeers) {
		return false
	}
	for i := range this.GroupPeers {
		if !this.GroupPeers[i].Equal(that1.GroupPeers[i]) {
			return false
		}
	}
	return true
}
func (this *RequestResolvePeer) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RequestResolvePeer)
	if !ok {
		that2, ok := that.(RequestResolvePeer)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Shortname != that1.Shortname {
		return false
	}
	return true
}
func (this *ResponseResolvePeer) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ResponseResolvePeer)
	if !ok {
		that2, ok := that.(ResponseResolvePeer)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Peer.Equal(that1.Peer) {
		return false
	}
	return true
}
func (this *MessageSearchResult) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MessageSearchResult)
	if !ok {
		that2, ok := that.(MessageSearchResult)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Peer.Equal(that1.Peer) {
		return false
	}
	if this.Rid != that1.Rid {
		return false
	}
	if this.Date != that1.Date {
		return false
	}
	if this.SenderId != that1.SenderId {
		return false
	}
	if !this.Content.Equal(that1.Content) {
		return false
	}
	if !this.Mid.Equal(that1.Mid) {
		return false
	}
	return true
}
func (this *MessageSearchItem) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MessageSearchItem)
	if !ok {
		that2, ok := that.(MessageSearchItem)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Result.Equal(that1.Result) {
		return false
	}
	return true
}
func (this *ResponseMessageSearchResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ResponseMessageSearchResponse)
	if !ok {
		that2, ok := that.(ResponseMessageSearchResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.SearchResults) != len(that1.SearchResults) {
		return false
	}
	for i := range this.SearchResults {
		if !this.SearchResults[i].Equal(that1.SearchResults[i]) {
			return false
		}
	}
	if !this.LoadMoreState.Equal(that1.LoadMoreState) {
		return false
	}
	if len(this.UserOutPeers) != len(that1.UserOutPeers) {
		return false
	}
	for i := range this.UserOutPeers {
		if !this.UserOutPeers[i].Equal(that1.UserOutPeers[i]) {
			return false
		}
	}
	if len(this.GroupOutPeers) != len(that1.GroupOutPeers) {
		return false
	}
	for i := range this.GroupOutPeers {
		if !this.GroupOutPeers[i].Equal(that1.GroupOutPeers[i]) {
			return false
		}
	}
	if this.TotalCount != that1.TotalCount {
		return false
	}
	return true
}
func (this *RequestMessageSearch) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RequestMessageSearch)
	if !ok {
		that2, ok := that.(RequestMessageSearch)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Query.Equal(that1.Query) {
		return false
	}
	if len(this.Optimizations) != len(that1.Optimizations) {
		return false
	}
	for i := range this.Optimizations {
		if this.Optimizations[i] != that1.Optimizations[i] {
			return false
		}
	}
	return true
}
func (this *RequestMessageSearchMore) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RequestMessageSearchMore)
	if !ok {
		that2, ok := that.(RequestMessageSearchMore)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.LoadMoreState, that1.LoadMoreState) {
		return false
	}
	if len(this.Optimizations) != len(that1.Optimizations) {
		return false
	}
	for i := range this.Optimizations {
		if this.Optimizations[i] != that1.Optimizations[i] {
			return false
		}
	}
	return true
}
func (this *RequestSimpleSearch) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RequestSimpleSearch)
	if !ok {
		that2, ok := that.(RequestSimpleSearch)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Criteria) != len(that1.Criteria) {
		return false
	}
	for i := range this.Criteria {
		if !this.Criteria[i].Equal(that1.Criteria[i]) {
			return false
		}
	}
	if len(this.Optimizations) != len(that1.Optimizations) {
		return false
	}
	for i := range this.Optimizations {
		if this.Optimizations[i] != that1.Optimizations[i] {
			return false
		}
	}
	return true
}
func (this *RequestSimpleSearchMore) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RequestSimpleSearchMore)
	if !ok {
		that2, ok := that.(RequestSimpleSearchMore)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.LoadMoreState, that1.LoadMoreState) {
		return false
	}
	if len(this.Optimizations) != len(that1.Optimizations) {
		return false
	}
	for i := range this.Optimizations {
		if this.Optimizations[i] != that1.Optimizations[i] {
			return false
		}
	}
	return true
}
func (this *RequestFieldAutocomplete) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RequestFieldAutocomplete)
	if !ok {
		that2, ok := that.(RequestFieldAutocomplete)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.FieldName != that1.FieldName {
		return false
	}
	if this.FieldValue != that1.FieldValue {
		return false
	}
	return true
}
func (this *ResponseFieldAutocomplete) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ResponseFieldAutocomplete)
	if !ok {
		that2, ok := that.(ResponseFieldAutocomplete)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.FieldName != that1.FieldName {
		return false
	}
	if len(this.FieldValue) != len(that1.FieldValue) {
		return false
	}
	for i := range this.FieldValue {
		if this.FieldValue[i] != that1.FieldValue[i] {
			return false
		}
	}
	return true
}
func (this *RequestLoadUserSearchByPredicatesResults) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RequestLoadUserSearchByPredicatesResults)
	if !ok {
		that2, ok := that.(RequestLoadUserSearchByPredicatesResults)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Predicates) != len(that1.Predicates) {
		return false
	}
	for i := range this.Predicates {
		if !this.Predicates[i].Equal(that1.Predicates[i]) {
			return false
		}
	}
	if this.GroupId != that1.GroupId {
		return false
	}
	if !this.Query.Equal(that1.Query) {
		return false
	}
	if this.Limit != that1.Limit {
		return false
	}
	if len(this.RequiredFields) != len(that1.RequiredFields) {
		return false
	}
	for i := range this.RequiredFields {
		if this.RequiredFields[i] != that1.RequiredFields[i] {
			return false
		}
	}
	return true
}
func (this *UserMatch) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UserMatch)
	if !ok {
		that2, ok := that.(UserMatch)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.UserId != that1.UserId {
		return false
	}
	if this.MatchPredicates != that1.MatchPredicates {
		return false
	}
	return true
}
func (this *ResponseLoadUserSearchByPredicatesResults) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ResponseLoadUserSearchByPredicatesResults)
	if !ok {
		that2, ok := that.(ResponseLoadUserSearchByPredicatesResults)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Users) != len(that1.Users) {
		return false
	}
	for i := range this.Users {
		if !this.Users[i].Equal(that1.Users[i]) {
			return false
		}
	}
	if this.ResultCount != that1.ResultCount {
		return false
	}
	return true
}
func (this *RequestLoadUserSearchByPredicatesCount) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RequestLoadUserSearchByPredicatesCount)
	if !ok {
		that2, ok := that.(RequestLoadUserSearchByPredicatesCount)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Predicates) != len(that1.Predicates) {
		return false
	}
	for i := range this.Predicates {
		if !this.Predicates[i].Equal(that1.Predicates[i]) {
			return false
		}
	}
	if this.GroupId != that1.GroupId {
		return false
	}
	return true
}
func (this *ResponseLoadUserSearchByPredicatesCount) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ResponseLoadUserSearchByPredicatesCount)
	if !ok {
		that2, ok := that.(ResponseLoadUserSearchByPredicatesCount)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ResultCount != that1.ResultCount {
		return false
	}
	return true
}
func (this *RequestGetRecommendations) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RequestGetRecommendations)
	if !ok {
		that2, ok := that.(RequestGetRecommendations)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *ResponseGetRecommendations) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ResponseGetRecommendations)
	if !ok {
		that2, ok := that.(ResponseGetRecommendations)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Peers) != len(that1.Peers) {
		return false
	}
	for i := range this.Peers {
		if !this.Peers[i].Equal(that1.Peers[i]) {
			return false
		}
	}
	return true
}
func (this *RequestGetPromotedPeers) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RequestGetPromotedPeers)
	if !ok {
		that2, ok := that.(RequestGetPromotedPeers)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *ResponseGetPromotedPeers) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ResponseGetPromotedPeers)
	if !ok {
		that2, ok := that.(ResponseGetPromotedPeers)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.UserPeers) != len(that1.UserPeers) {
		return false
	}
	for i := range this.UserPeers {
		if !this.UserPeers[i].Equal(that1.UserPeers[i]) {
			return false
		}
	}
	if len(this.GroupPeers) != len(that1.GroupPeers) {
		return false
	}
	for i := range this.GroupPeers {
		if !this.GroupPeers[i].Equal(that1.GroupPeers[i]) {
			return false
		}
	}
	return true
}
func (this *SimpleContactSearchCondition) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&dialog.SimpleContactSearchCondition{")
	s = append(s, "Text: "+fmt.Sprintf("%#v", this.Text)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SimpleMessageSearchCondition) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&dialog.SimpleMessageSearchCondition{")
	if this.Peer != nil {
		s = append(s, "Peer: "+fmt.Sprintf("%#v", this.Peer)+",\n")
	}
	s = append(s, "Text: "+fmt.Sprintf("%#v", this.Text)+",\n")
	s = append(s, "Type: "+fmt.Sprintf("%#v", this.Type)+",\n")
	s = append(s, "SearchDirection: "+fmt.Sprintf("%#v", this.SearchDirection)+",\n")
	if this.DateFrom != nil {
		s = append(s, "DateFrom: "+fmt.Sprintf("%#v", this.DateFrom)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SimplePeerSearchCondition) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&dialog.SimplePeerSearchCondition{")
	s = append(s, "PeerType: "+fmt.Sprintf("%#v", this.PeerType)+",\n")
	if this.Text != nil {
		s = append(s, "Text: "+fmt.Sprintf("%#v", this.Text)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SimpleUserProfileSearchCondition) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&dialog.SimpleUserProfileSearchCondition{")
	s = append(s, "QueryString: "+fmt.Sprintf("%#v", this.QueryString)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SimpleGroupSearchCondition) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&dialog.SimpleGroupSearchCondition{")
	s = append(s, "QueryString: "+fmt.Sprintf("%#v", this.QueryString)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Criterion) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&dialog.Criterion{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SimpleSearchCondition) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&dialog.SimpleSearchCondition{")
	if this.Criterion != nil {
		s = append(s, "Criterion: "+fmt.Sprintf("%#v", this.Criterion)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SimpleSearchCondition_Contact) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dialog.SimpleSearchCondition_Contact{` +
		`Contact:` + fmt.Sprintf("%#v", this.Contact) + `}`}, ", ")
	return s
}
func (this *SimpleSearchCondition_Message) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dialog.SimpleSearchCondition_Message{` +
		`Message:` + fmt.Sprintf("%#v", this.Message) + `}`}, ", ")
	return s
}
func (this *SimpleSearchCondition_Peer) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dialog.SimpleSearchCondition_Peer{` +
		`Peer:` + fmt.Sprintf("%#v", this.Peer) + `}`}, ", ")
	return s
}
func (this *SimpleSearchCondition_UserProfile) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dialog.SimpleSearchCondition_UserProfile{` +
		`UserProfile:` + fmt.Sprintf("%#v", this.UserProfile) + `}`}, ", ")
	return s
}
func (this *SimpleSearchCondition_Group) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dialog.SimpleSearchCondition_Group{` +
		`Group:` + fmt.Sprintf("%#v", this.Group) + `}`}, ", ")
	return s
}
func (this *SearchCondition) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 11)
	s = append(s, "&dialog.SearchCondition{")
	if this.Body != nil {
		s = append(s, "Body: "+fmt.Sprintf("%#v", this.Body)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SearchCondition_SearchPeerTypeCondition) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dialog.SearchCondition_SearchPeerTypeCondition{` +
		`SearchPeerTypeCondition:` + fmt.Sprintf("%#v", this.SearchPeerTypeCondition) + `}`}, ", ")
	return s
}
func (this *SearchCondition_SearchPieceText) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dialog.SearchCondition_SearchPieceText{` +
		`SearchPieceText:` + fmt.Sprintf("%#v", this.SearchPieceText) + `}`}, ", ")
	return s
}
func (this *SearchCondition_SearchAndCondition) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dialog.SearchCondition_SearchAndCondition{` +
		`SearchAndCondition:` + fmt.Sprintf("%#v", this.SearchAndCondition) + `}`}, ", ")
	return s
}
func (this *SearchCondition_SearchOrCondition) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dialog.SearchCondition_SearchOrCondition{` +
		`SearchOrCondition:` + fmt.Sprintf("%#v", this.SearchOrCondition) + `}`}, ", ")
	return s
}
func (this *SearchCondition_SearchPeerCondition) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dialog.SearchCondition_SearchPeerCondition{` +
		`SearchPeerCondition:` + fmt.Sprintf("%#v", this.SearchPeerCondition) + `}`}, ", ")
	return s
}
func (this *SearchCondition_SearchPeerContentType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dialog.SearchCondition_SearchPeerContentType{` +
		`SearchPeerContentType:` + fmt.Sprintf("%#v", this.SearchPeerContentType) + `}`}, ", ")
	return s
}
func (this *SearchCondition_SearchSenderIdConfition) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dialog.SearchCondition_SearchSenderIdConfition{` +
		`SearchSenderIdConfition:` + fmt.Sprintf("%#v", this.SearchSenderIdConfition) + `}`}, ", ")
	return s
}
func (this *SearchPeerTypeCondition) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&dialog.SearchPeerTypeCondition{")
	s = append(s, "PeerType: "+fmt.Sprintf("%#v", this.PeerType)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SearchPieceText) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&dialog.SearchPieceText{")
	s = append(s, "Query: "+fmt.Sprintf("%#v", this.Query)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SearchAndCondition) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&dialog.SearchAndCondition{")
	if this.AndQuery != nil {
		s = append(s, "AndQuery: "+fmt.Sprintf("%#v", this.AndQuery)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SearchOrCondition) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&dialog.SearchOrCondition{")
	if this.OrQuery != nil {
		s = append(s, "OrQuery: "+fmt.Sprintf("%#v", this.OrQuery)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SearchPeerCondition) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&dialog.SearchPeerCondition{")
	if this.Peer != nil {
		s = append(s, "Peer: "+fmt.Sprintf("%#v", this.Peer)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SearchPeerContentType) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&dialog.SearchPeerContentType{")
	s = append(s, "ContentType: "+fmt.Sprintf("%#v", this.ContentType)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SearchSenderIdConfition) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&dialog.SearchSenderIdConfition{")
	s = append(s, "SenderId: "+fmt.Sprintf("%#v", this.SenderId)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *PeerSearchResult) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 13)
	s = append(s, "&dialog.PeerSearchResult{")
	if this.Peer != nil {
		s = append(s, "Peer: "+fmt.Sprintf("%#v", this.Peer)+",\n")
	}
	s = append(s, "Title: "+fmt.Sprintf("%#v", this.Title)+",\n")
	if this.Shortname != nil {
		s = append(s, "Shortname: "+fmt.Sprintf("%#v", this.Shortname)+",\n")
	}
	if this.Description != nil {
		s = append(s, "Description: "+fmt.Sprintf("%#v", this.Description)+",\n")
	}
	if this.MembersCount != nil {
		s = append(s, "MembersCount: "+fmt.Sprintf("%#v", this.MembersCount)+",\n")
	}
	s = append(s, "DateCreated: "+fmt.Sprintf("%#v", this.DateCreated)+",\n")
	if this.Creator != nil {
		s = append(s, "Creator: "+fmt.Sprintf("%#v", this.Creator)+",\n")
	}
	if this.IsPublic != nil {
		s = append(s, "IsPublic: "+fmt.Sprintf("%#v", this.IsPublic)+",\n")
	}
	if this.IsJoined != nil {
		s = append(s, "IsJoined: "+fmt.Sprintf("%#v", this.IsJoined)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RequestPeerSearch) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&dialog.RequestPeerSearch{")
	if this.Query != nil {
		s = append(s, "Query: "+fmt.Sprintf("%#v", this.Query)+",\n")
	}
	s = append(s, "Optimizations: "+fmt.Sprintf("%#v", this.Optimizations)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ResponsePeerSearch) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&dialog.ResponsePeerSearch{")
	if this.Users != nil {
		s = append(s, "Users: "+fmt.Sprintf("%#v", this.Users)+",\n")
	}
	if this.Groups != nil {
		s = append(s, "Groups: "+fmt.Sprintf("%#v", this.Groups)+",\n")
	}
	if this.SearchResults != nil {
		s = append(s, "SearchResults: "+fmt.Sprintf("%#v", this.SearchResults)+",\n")
	}
	if this.UserPeers != nil {
		s = append(s, "UserPeers: "+fmt.Sprintf("%#v", this.UserPeers)+",\n")
	}
	if this.GroupPeers != nil {
		s = append(s, "GroupPeers: "+fmt.Sprintf("%#v", this.GroupPeers)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RequestResolvePeer) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&dialog.RequestResolvePeer{")
	s = append(s, "Shortname: "+fmt.Sprintf("%#v", this.Shortname)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ResponseResolvePeer) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&dialog.ResponseResolvePeer{")
	if this.Peer != nil {
		s = append(s, "Peer: "+fmt.Sprintf("%#v", this.Peer)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *MessageSearchResult) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 10)
	s = append(s, "&dialog.MessageSearchResult{")
	if this.Peer != nil {
		s = append(s, "Peer: "+fmt.Sprintf("%#v", this.Peer)+",\n")
	}
	s = append(s, "Rid: "+fmt.Sprintf("%#v", this.Rid)+",\n")
	s = append(s, "Date: "+fmt.Sprintf("%#v", this.Date)+",\n")
	s = append(s, "SenderId: "+fmt.Sprintf("%#v", this.SenderId)+",\n")
	if this.Content != nil {
		s = append(s, "Content: "+fmt.Sprintf("%#v", this.Content)+",\n")
	}
	if this.Mid != nil {
		s = append(s, "Mid: "+fmt.Sprintf("%#v", this.Mid)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *MessageSearchItem) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&dialog.MessageSearchItem{")
	if this.Result != nil {
		s = append(s, "Result: "+fmt.Sprintf("%#v", this.Result)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ResponseMessageSearchResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&dialog.ResponseMessageSearchResponse{")
	if this.SearchResults != nil {
		s = append(s, "SearchResults: "+fmt.Sprintf("%#v", this.SearchResults)+",\n")
	}
	if this.LoadMoreState != nil {
		s = append(s, "LoadMoreState: "+fmt.Sprintf("%#v", this.LoadMoreState)+",\n")
	}
	if this.UserOutPeers != nil {
		s = append(s, "UserOutPeers: "+fmt.Sprintf("%#v", this.UserOutPeers)+",\n")
	}
	if this.GroupOutPeers != nil {
		s = append(s, "GroupOutPeers: "+fmt.Sprintf("%#v", this.GroupOutPeers)+",\n")
	}
	s = append(s, "TotalCount: "+fmt.Sprintf("%#v", this.TotalCount)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RequestMessageSearch) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&dialog.RequestMessageSearch{")
	if this.Query != nil {
		s = append(s, "Query: "+fmt.Sprintf("%#v", this.Query)+",\n")
	}
	s = append(s, "Optimizations: "+fmt.Sprintf("%#v", this.Optimizations)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RequestMessageSearchMore) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&dialog.RequestMessageSearchMore{")
	s = append(s, "LoadMoreState: "+fmt.Sprintf("%#v", this.LoadMoreState)+",\n")
	s = append(s, "Optimizations: "+fmt.Sprintf("%#v", this.Optimizations)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RequestSimpleSearch) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&dialog.RequestSimpleSearch{")
	if this.Criteria != nil {
		s = append(s, "Criteria: "+fmt.Sprintf("%#v", this.Criteria)+",\n")
	}
	s = append(s, "Optimizations: "+fmt.Sprintf("%#v", this.Optimizations)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RequestSimpleSearchMore) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&dialog.RequestSimpleSearchMore{")
	s = append(s, "LoadMoreState: "+fmt.Sprintf("%#v", this.LoadMoreState)+",\n")
	s = append(s, "Optimizations: "+fmt.Sprintf("%#v", this.Optimizations)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RequestFieldAutocomplete) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&dialog.RequestFieldAutocomplete{")
	s = append(s, "FieldName: "+fmt.Sprintf("%#v", this.FieldName)+",\n")
	s = append(s, "FieldValue: "+fmt.Sprintf("%#v", this.FieldValue)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ResponseFieldAutocomplete) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&dialog.ResponseFieldAutocomplete{")
	s = append(s, "FieldName: "+fmt.Sprintf("%#v", this.FieldName)+",\n")
	s = append(s, "FieldValue: "+fmt.Sprintf("%#v", this.FieldValue)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RequestLoadUserSearchByPredicatesResults) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&dialog.RequestLoadUserSearchByPredicatesResults{")
	if this.Predicates != nil {
		s = append(s, "Predicates: "+fmt.Sprintf("%#v", this.Predicates)+",\n")
	}
	s = append(s, "GroupId: "+fmt.Sprintf("%#v", this.GroupId)+",\n")
	if this.Query != nil {
		s = append(s, "Query: "+fmt.Sprintf("%#v", this.Query)+",\n")
	}
	s = append(s, "Limit: "+fmt.Sprintf("%#v", this.Limit)+",\n")
	s = append(s, "RequiredFields: "+fmt.Sprintf("%#v", this.RequiredFields)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UserMatch) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&dialog.UserMatch{")
	s = append(s, "UserId: "+fmt.Sprintf("%#v", this.UserId)+",\n")
	s = append(s, "MatchPredicates: "+fmt.Sprintf("%#v", this.MatchPredicates)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ResponseLoadUserSearchByPredicatesResults) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&dialog.ResponseLoadUserSearchByPredicatesResults{")
	if this.Users != nil {
		s = append(s, "Users: "+fmt.Sprintf("%#v", this.Users)+",\n")
	}
	s = append(s, "ResultCount: "+fmt.Sprintf("%#v", this.ResultCount)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RequestLoadUserSearchByPredicatesCount) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&dialog.RequestLoadUserSearchByPredicatesCount{")
	if this.Predicates != nil {
		s = append(s, "Predicates: "+fmt.Sprintf("%#v", this.Predicates)+",\n")
	}
	s = append(s, "GroupId: "+fmt.Sprintf("%#v", this.GroupId)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ResponseLoadUserSearchByPredicatesCount) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&dialog.ResponseLoadUserSearchByPredicatesCount{")
	s = append(s, "ResultCount: "+fmt.Sprintf("%#v", this.ResultCount)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RequestGetRecommendations) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&dialog.RequestGetRecommendations{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ResponseGetRecommendations) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&dialog.ResponseGetRecommendations{")
	if this.Peers != nil {
		s = append(s, "Peers: "+fmt.Sprintf("%#v", this.Peers)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RequestGetPromotedPeers) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&dialog.RequestGetPromotedPeers{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ResponseGetPromotedPeers) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&dialog.ResponseGetPromotedPeers{")
	if this.UserPeers != nil {
		s = append(s, "UserPeers: "+fmt.Sprintf("%#v", this.UserPeers)+",\n")
	}
	if this.GroupPeers != nil {
		s = append(s, "GroupPeers: "+fmt.Sprintf("%#v", this.GroupPeers)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringSearch(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// SearchClient is the client API for Search service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SearchClient interface {
	/// Search among groups/users/contacts
	PeerSearch(ctx context.Context, in *RequestPeerSearch, opts ...grpc.CallOption) (*ResponsePeerSearch, error)
	ResolvePeer(ctx context.Context, in *RequestResolvePeer, opts ...grpc.CallOption) (*ResponseResolvePeer, error)
	/// Search by messages
	MessageSearch(ctx context.Context, in *RequestMessageSearch, opts ...grpc.CallOption) (*ResponseMessageSearchResponse, error)
	MessageSearchMore(ctx context.Context, in *RequestMessageSearchMore, opts ...grpc.CallOption) (*ResponseMessageSearchResponse, error)
	/// Custom search by conditions
	SimpleSearch(ctx context.Context, in *RequestSimpleSearch, opts ...grpc.CallOption) (*ResponseMessageSearchResponse, error)
	SimpleSearchMore(ctx context.Context, in *RequestSimpleSearchMore, opts ...grpc.CallOption) (*ResponseMessageSearchResponse, error)
	/// Search for autocomplete suggestions among custom user profile
	AutocompleteSuggestions(ctx context.Context, in *RequestFieldAutocomplete, opts ...grpc.CallOption) (*ResponseFieldAutocomplete, error)
	LoadUserSearchByPredicatesResults(ctx context.Context, in *RequestLoadUserSearchByPredicatesResults, opts ...grpc.CallOption) (*ResponseLoadUserSearchByPredicatesResults, error)
	LoadUserSearchByPredicatesCount(ctx context.Context, in *RequestLoadUserSearchByPredicatesCount, opts ...grpc.CallOption) (*ResponseLoadUserSearchByPredicatesCount, error)
	GetRecommendations(ctx context.Context, in *RequestGetRecommendations, opts ...grpc.CallOption) (*ResponseGetRecommendations, error)
	GetPromotedPeers(ctx context.Context, in *RequestGetPromotedPeers, opts ...grpc.CallOption) (*ResponseGetPromotedPeers, error)
}

type searchClient struct {
	cc *grpc.ClientConn
}

func NewSearchClient(cc *grpc.ClientConn) SearchClient {
	return &searchClient{cc}
}

func (c *searchClient) PeerSearch(ctx context.Context, in *RequestPeerSearch, opts ...grpc.CallOption) (*ResponsePeerSearch, error) {
	out := new(ResponsePeerSearch)
	err := c.cc.Invoke(ctx, "/dialog.Search/PeerSearch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *searchClient) ResolvePeer(ctx context.Context, in *RequestResolvePeer, opts ...grpc.CallOption) (*ResponseResolvePeer, error) {
	out := new(ResponseResolvePeer)
	err := c.cc.Invoke(ctx, "/dialog.Search/ResolvePeer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *searchClient) MessageSearch(ctx context.Context, in *RequestMessageSearch, opts ...grpc.CallOption) (*ResponseMessageSearchResponse, error) {
	out := new(ResponseMessageSearchResponse)
	err := c.cc.Invoke(ctx, "/dialog.Search/MessageSearch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *searchClient) MessageSearchMore(ctx context.Context, in *RequestMessageSearchMore, opts ...grpc.CallOption) (*ResponseMessageSearchResponse, error) {
	out := new(ResponseMessageSearchResponse)
	err := c.cc.Invoke(ctx, "/dialog.Search/MessageSearchMore", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *searchClient) SimpleSearch(ctx context.Context, in *RequestSimpleSearch, opts ...grpc.CallOption) (*ResponseMessageSearchResponse, error) {
	out := new(ResponseMessageSearchResponse)
	err := c.cc.Invoke(ctx, "/dialog.Search/SimpleSearch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *searchClient) SimpleSearchMore(ctx context.Context, in *RequestSimpleSearchMore, opts ...grpc.CallOption) (*ResponseMessageSearchResponse, error) {
	out := new(ResponseMessageSearchResponse)
	err := c.cc.Invoke(ctx, "/dialog.Search/SimpleSearchMore", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *searchClient) AutocompleteSuggestions(ctx context.Context, in *RequestFieldAutocomplete, opts ...grpc.CallOption) (*ResponseFieldAutocomplete, error) {
	out := new(ResponseFieldAutocomplete)
	err := c.cc.Invoke(ctx, "/dialog.Search/AutocompleteSuggestions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *searchClient) LoadUserSearchByPredicatesResults(ctx context.Context, in *RequestLoadUserSearchByPredicatesResults, opts ...grpc.CallOption) (*ResponseLoadUserSearchByPredicatesResults, error) {
	out := new(ResponseLoadUserSearchByPredicatesResults)
	err := c.cc.Invoke(ctx, "/dialog.Search/LoadUserSearchByPredicatesResults", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *searchClient) LoadUserSearchByPredicatesCount(ctx context.Context, in *RequestLoadUserSearchByPredicatesCount, opts ...grpc.CallOption) (*ResponseLoadUserSearchByPredicatesCount, error) {
	out := new(ResponseLoadUserSearchByPredicatesCount)
	err := c.cc.Invoke(ctx, "/dialog.Search/LoadUserSearchByPredicatesCount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *searchClient) GetRecommendations(ctx context.Context, in *RequestGetRecommendations, opts ...grpc.CallOption) (*ResponseGetRecommendations, error) {
	out := new(ResponseGetRecommendations)
	err := c.cc.Invoke(ctx, "/dialog.Search/GetRecommendations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *searchClient) GetPromotedPeers(ctx context.Context, in *RequestGetPromotedPeers, opts ...grpc.CallOption) (*ResponseGetPromotedPeers, error) {
	out := new(ResponseGetPromotedPeers)
	err := c.cc.Invoke(ctx, "/dialog.Search/GetPromotedPeers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SearchServer is the server API for Search service.
type SearchServer interface {
	/// Search among groups/users/contacts
	PeerSearch(context.Context, *RequestPeerSearch) (*ResponsePeerSearch, error)
	ResolvePeer(context.Context, *RequestResolvePeer) (*ResponseResolvePeer, error)
	/// Search by messages
	MessageSearch(context.Context, *RequestMessageSearch) (*ResponseMessageSearchResponse, error)
	MessageSearchMore(context.Context, *RequestMessageSearchMore) (*ResponseMessageSearchResponse, error)
	/// Custom search by conditions
	SimpleSearch(context.Context, *RequestSimpleSearch) (*ResponseMessageSearchResponse, error)
	SimpleSearchMore(context.Context, *RequestSimpleSearchMore) (*ResponseMessageSearchResponse, error)
	/// Search for autocomplete suggestions among custom user profile
	AutocompleteSuggestions(context.Context, *RequestFieldAutocomplete) (*ResponseFieldAutocomplete, error)
	LoadUserSearchByPredicatesResults(context.Context, *RequestLoadUserSearchByPredicatesResults) (*ResponseLoadUserSearchByPredicatesResults, error)
	LoadUserSearchByPredicatesCount(context.Context, *RequestLoadUserSearchByPredicatesCount) (*ResponseLoadUserSearchByPredicatesCount, error)
	GetRecommendations(context.Context, *RequestGetRecommendations) (*ResponseGetRecommendations, error)
	GetPromotedPeers(context.Context, *RequestGetPromotedPeers) (*ResponseGetPromotedPeers, error)
}

// UnimplementedSearchServer can be embedded to have forward compatible implementations.
type UnimplementedSearchServer struct {
}

func (*UnimplementedSearchServer) PeerSearch(ctx context.Context, req *RequestPeerSearch) (*ResponsePeerSearch, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PeerSearch not implemented")
}
func (*UnimplementedSearchServer) ResolvePeer(ctx context.Context, req *RequestResolvePeer) (*ResponseResolvePeer, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResolvePeer not implemented")
}
func (*UnimplementedSearchServer) MessageSearch(ctx context.Context, req *RequestMessageSearch) (*ResponseMessageSearchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessageSearch not implemented")
}
func (*UnimplementedSearchServer) MessageSearchMore(ctx context.Context, req *RequestMessageSearchMore) (*ResponseMessageSearchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessageSearchMore not implemented")
}
func (*UnimplementedSearchServer) SimpleSearch(ctx context.Context, req *RequestSimpleSearch) (*ResponseMessageSearchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SimpleSearch not implemented")
}
func (*UnimplementedSearchServer) SimpleSearchMore(ctx context.Context, req *RequestSimpleSearchMore) (*ResponseMessageSearchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SimpleSearchMore not implemented")
}
func (*UnimplementedSearchServer) AutocompleteSuggestions(ctx context.Context, req *RequestFieldAutocomplete) (*ResponseFieldAutocomplete, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AutocompleteSuggestions not implemented")
}
func (*UnimplementedSearchServer) LoadUserSearchByPredicatesResults(ctx context.Context, req *RequestLoadUserSearchByPredicatesResults) (*ResponseLoadUserSearchByPredicatesResults, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoadUserSearchByPredicatesResults not implemented")
}
func (*UnimplementedSearchServer) LoadUserSearchByPredicatesCount(ctx context.Context, req *RequestLoadUserSearchByPredicatesCount) (*ResponseLoadUserSearchByPredicatesCount, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoadUserSearchByPredicatesCount not implemented")
}
func (*UnimplementedSearchServer) GetRecommendations(ctx context.Context, req *RequestGetRecommendations) (*ResponseGetRecommendations, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRecommendations not implemented")
}
func (*UnimplementedSearchServer) GetPromotedPeers(ctx context.Context, req *RequestGetPromotedPeers) (*ResponseGetPromotedPeers, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPromotedPeers not implemented")
}

func RegisterSearchServer(s *grpc.Server, srv SearchServer) {
	s.RegisterService(&_Search_serviceDesc, srv)
}

func _Search_PeerSearch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestPeerSearch)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SearchServer).PeerSearch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dialog.Search/PeerSearch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SearchServer).PeerSearch(ctx, req.(*RequestPeerSearch))
	}
	return interceptor(ctx, in, info, handler)
}

func _Search_ResolvePeer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestResolvePeer)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SearchServer).ResolvePeer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dialog.Search/ResolvePeer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SearchServer).ResolvePeer(ctx, req.(*RequestResolvePeer))
	}
	return interceptor(ctx, in, info, handler)
}

func _Search_MessageSearch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestMessageSearch)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SearchServer).MessageSearch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dialog.Search/MessageSearch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SearchServer).MessageSearch(ctx, req.(*RequestMessageSearch))
	}
	return interceptor(ctx, in, info, handler)
}

func _Search_MessageSearchMore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestMessageSearchMore)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SearchServer).MessageSearchMore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dialog.Search/MessageSearchMore",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SearchServer).MessageSearchMore(ctx, req.(*RequestMessageSearchMore))
	}
	return interceptor(ctx, in, info, handler)
}

func _Search_SimpleSearch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestSimpleSearch)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SearchServer).SimpleSearch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dialog.Search/SimpleSearch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SearchServer).SimpleSearch(ctx, req.(*RequestSimpleSearch))
	}
	return interceptor(ctx, in, info, handler)
}

func _Search_SimpleSearchMore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestSimpleSearchMore)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SearchServer).SimpleSearchMore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dialog.Search/SimpleSearchMore",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SearchServer).SimpleSearchMore(ctx, req.(*RequestSimpleSearchMore))
	}
	return interceptor(ctx, in, info, handler)
}

func _Search_AutocompleteSuggestions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestFieldAutocomplete)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SearchServer).AutocompleteSuggestions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dialog.Search/AutocompleteSuggestions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SearchServer).AutocompleteSuggestions(ctx, req.(*RequestFieldAutocomplete))
	}
	return interceptor(ctx, in, info, handler)
}

func _Search_LoadUserSearchByPredicatesResults_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestLoadUserSearchByPredicatesResults)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SearchServer).LoadUserSearchByPredicatesResults(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dialog.Search/LoadUserSearchByPredicatesResults",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SearchServer).LoadUserSearchByPredicatesResults(ctx, req.(*RequestLoadUserSearchByPredicatesResults))
	}
	return interceptor(ctx, in, info, handler)
}

func _Search_LoadUserSearchByPredicatesCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestLoadUserSearchByPredicatesCount)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SearchServer).LoadUserSearchByPredicatesCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dialog.Search/LoadUserSearchByPredicatesCount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SearchServer).LoadUserSearchByPredicatesCount(ctx, req.(*RequestLoadUserSearchByPredicatesCount))
	}
	return interceptor(ctx, in, info, handler)
}

func _Search_GetRecommendations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestGetRecommendations)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SearchServer).GetRecommendations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dialog.Search/GetRecommendations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SearchServer).GetRecommendations(ctx, req.(*RequestGetRecommendations))
	}
	return interceptor(ctx, in, info, handler)
}

func _Search_GetPromotedPeers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestGetPromotedPeers)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SearchServer).GetPromotedPeers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dialog.Search/GetPromotedPeers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SearchServer).GetPromotedPeers(ctx, req.(*RequestGetPromotedPeers))
	}
	return interceptor(ctx, in, info, handler)
}

var _Search_serviceDesc = grpc.ServiceDesc{
	ServiceName: "dialog.Search",
	HandlerType: (*SearchServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PeerSearch",
			Handler:    _Search_PeerSearch_Handler,
		},
		{
			MethodName: "ResolvePeer",
			Handler:    _Search_ResolvePeer_Handler,
		},
		{
			MethodName: "MessageSearch",
			Handler:    _Search_MessageSearch_Handler,
		},
		{
			MethodName: "MessageSearchMore",
			Handler:    _Search_MessageSearchMore_Handler,
		},
		{
			MethodName: "SimpleSearch",
			Handler:    _Search_SimpleSearch_Handler,
		},
		{
			MethodName: "SimpleSearchMore",
			Handler:    _Search_SimpleSearchMore_Handler,
		},
		{
			MethodName: "AutocompleteSuggestions",
			Handler:    _Search_AutocompleteSuggestions_Handler,
		},
		{
			MethodName: "LoadUserSearchByPredicatesResults",
			Handler:    _Search_LoadUserSearchByPredicatesResults_Handler,
		},
		{
			MethodName: "LoadUserSearchByPredicatesCount",
			Handler:    _Search_LoadUserSearchByPredicatesCount_Handler,
		},
		{
			MethodName: "GetRecommendations",
			Handler:    _Search_GetRecommendations_Handler,
		},
		{
			MethodName: "GetPromotedPeers",
			Handler:    _Search_GetPromotedPeers_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "search.proto",
}

func (m *SimpleContactSearchCondition) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SimpleContactSearchCondition) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SimpleContactSearchCondition) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Text) > 0 {
		i -= len(m.Text)
		copy(dAtA[i:], m.Text)
		i = encodeVarintSearch(dAtA, i, uint64(len(m.Text)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SimpleMessageSearchCondition) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SimpleMessageSearchCondition) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SimpleMessageSearchCondition) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.DateFrom != nil {
		{
			size, err := m.DateFrom.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSearch(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.SearchDirection != 0 {
		i = encodeVarintSearch(dAtA, i, uint64(m.SearchDirection))
		i--
		dAtA[i] = 0x20
	}
	if m.Type != 0 {
		i = encodeVarintSearch(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Text) > 0 {
		i -= len(m.Text)
		copy(dAtA[i:], m.Text)
		i = encodeVarintSearch(dAtA, i, uint64(len(m.Text)))
		i--
		dAtA[i] = 0x12
	}
	if m.Peer != nil {
		{
			size, err := m.Peer.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSearch(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SimplePeerSearchCondition) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SimplePeerSearchCondition) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SimplePeerSearchCondition) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Text != nil {
		{
			size, err := m.Text.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSearch(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.PeerType != 0 {
		i = encodeVarintSearch(dAtA, i, uint64(m.PeerType))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SimpleUserProfileSearchCondition) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SimpleUserProfileSearchCondition) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SimpleUserProfileSearchCondition) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.QueryString) > 0 {
		i -= len(m.QueryString)
		copy(dAtA[i:], m.QueryString)
		i = encodeVarintSearch(dAtA, i, uint64(len(m.QueryString)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SimpleGroupSearchCondition) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SimpleGroupSearchCondition) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SimpleGroupSearchCondition) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.QueryString) > 0 {
		i -= len(m.QueryString)
		copy(dAtA[i:], m.QueryString)
		i = encodeVarintSearch(dAtA, i, uint64(len(m.QueryString)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Criterion) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Criterion) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Criterion) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *SimpleSearchCondition) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SimpleSearchCondition) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SimpleSearchCondition) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Criterion != nil {
		{
			size := m.Criterion.Size()
			i -= size
			if _, err := m.Criterion.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *SimpleSearchCondition_Contact) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SimpleSearchCondition_Contact) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Contact != nil {
		{
			size, err := m.Contact.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSearch(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}
func (m *SimpleSearchCondition_Message) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SimpleSearchCondition_Message) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Message != nil {
		{
			size, err := m.Message.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSearch(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *SimpleSearchCondition_Peer) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SimpleSearchCondition_Peer) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Peer != nil {
		{
			size, err := m.Peer.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSearch(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *SimpleSearchCondition_UserProfile) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SimpleSearchCondition_UserProfile) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.UserProfile != nil {
		{
			size, err := m.UserProfile.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSearch(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *SimpleSearchCondition_Group) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SimpleSearchCondition_Group) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Group != nil {
		{
			size, err := m.Group.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSearch(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	return len(dAtA) - i, nil
}
func (m *SearchCondition) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SearchCondition) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SearchCondition) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Body != nil {
		{
			size := m.Body.Size()
			i -= size
			if _, err := m.Body.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *SearchCondition_SearchPeerTypeCondition) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SearchCondition_SearchPeerTypeCondition) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.SearchPeerTypeCondition != nil {
		{
			size, err := m.SearchPeerTypeCondition.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSearch(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}
func (m *SearchCondition_SearchPieceText) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SearchCondition_SearchPieceText) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.SearchPieceText != nil {
		{
			size, err := m.SearchPieceText.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSearch(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *SearchCondition_SearchAndCondition) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SearchCondition_SearchAndCondition) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.SearchAndCondition != nil {
		{
			size, err := m.SearchAndCondition.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSearch(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *SearchCondition_SearchOrCondition) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SearchCondition_SearchOrCondition) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.SearchOrCondition != nil {
		{
			size, err := m.SearchOrCondition.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSearch(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *SearchCondition_SearchPeerCondition) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SearchCondition_SearchPeerCondition) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.SearchPeerCondition != nil {
		{
			size, err := m.SearchPeerCondition.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSearch(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	return len(dAtA) - i, nil
}
func (m *SearchCondition_SearchPeerContentType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SearchCondition_SearchPeerContentType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.SearchPeerContentType != nil {
		{
			size, err := m.SearchPeerContentType.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSearch(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	return len(dAtA) - i, nil
}
func (m *SearchCondition_SearchSenderIdConfition) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SearchCondition_SearchSenderIdConfition) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.SearchSenderIdConfition != nil {
		{
			size, err := m.SearchSenderIdConfition.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSearch(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	return len(dAtA) - i, nil
}
func (m *SearchPeerTypeCondition) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SearchPeerTypeCondition) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SearchPeerTypeCondition) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.PeerType != 0 {
		i = encodeVarintSearch(dAtA, i, uint64(m.PeerType))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SearchPieceText) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SearchPieceText) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SearchPieceText) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Query) > 0 {
		i -= len(m.Query)
		copy(dAtA[i:], m.Query)
		i = encodeVarintSearch(dAtA, i, uint64(len(m.Query)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SearchAndCondition) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SearchAndCondition) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SearchAndCondition) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.AndQuery) > 0 {
		for iNdEx := len(m.AndQuery) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.AndQuery[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintSearch(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *SearchOrCondition) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SearchOrCondition) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SearchOrCondition) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.OrQuery) > 0 {
		for iNdEx := len(m.OrQuery) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.OrQuery[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintSearch(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	return len(dAtA) - i, nil
}

func (m *SearchPeerCondition) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SearchPeerCondition) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SearchPeerCondition) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Peer != nil {
		{
			size, err := m.Peer.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSearch(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SearchPeerContentType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SearchPeerContentType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SearchPeerContentType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ContentType != 0 {
		i = encodeVarintSearch(dAtA, i, uint64(m.ContentType))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SearchSenderIdConfition) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SearchSenderIdConfition) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SearchSenderIdConfition) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SenderId != 0 {
		i = encodeVarintSearch(dAtA, i, uint64(m.SenderId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *PeerSearchResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PeerSearchResult) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PeerSearchResult) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Shortname != nil {
		{
			size, err := m.Shortname.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSearch(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	if m.IsJoined != nil {
		{
			size, err := m.IsJoined.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSearch(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	if m.IsPublic != nil {
		{
			size, err := m.IsPublic.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSearch(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if m.Creator != nil {
		{
			size, err := m.Creator.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSearch(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if m.DateCreated != 0 {
		i = encodeVarintSearch(dAtA, i, uint64(m.DateCreated))
		i--
		dAtA[i] = 0x28
	}
	if m.MembersCount != nil {
		{
			size, err := m.MembersCount.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSearch(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.Description != nil {
		{
			size, err := m.Description.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSearch(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintSearch(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0x12
	}
	if m.Peer != nil {
		{
			size, err := m.Peer.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSearch(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RequestPeerSearch) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestPeerSearch) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RequestPeerSearch) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Optimizations) > 0 {
		dAtA25 := make([]byte, len(m.Optimizations)*10)
		var j24 int
		for _, num := range m.Optimizations {
			for num >= 1<<7 {
				dAtA25[j24] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j24++
			}
			dAtA25[j24] = uint8(num)
			j24++
		}
		i -= j24
		copy(dAtA[i:], dAtA25[:j24])
		i = encodeVarintSearch(dAtA, i, uint64(j24))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Query) > 0 {
		for iNdEx := len(m.Query) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Query[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintSearch(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ResponsePeerSearch) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResponsePeerSearch) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ResponsePeerSearch) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.GroupPeers) > 0 {
		for iNdEx := len(m.GroupPeers) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.GroupPeers[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintSearch(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.UserPeers) > 0 {
		for iNdEx := len(m.UserPeers) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.UserPeers[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintSearch(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.Groups) > 0 {
		for iNdEx := len(m.Groups) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Groups[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintSearch(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Users) > 0 {
		for iNdEx := len(m.Users) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Users[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintSearch(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.SearchResults) > 0 {
		for iNdEx := len(m.SearchResults) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.SearchResults[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintSearch(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *RequestResolvePeer) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestResolvePeer) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RequestResolvePeer) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Shortname) > 0 {
		i -= len(m.Shortname)
		copy(dAtA[i:], m.Shortname)
		i = encodeVarintSearch(dAtA, i, uint64(len(m.Shortname)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ResponseResolvePeer) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResponseResolvePeer) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ResponseResolvePeer) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Peer != nil {
		{
			size, err := m.Peer.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSearch(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MessageSearchResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MessageSearchResult) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MessageSearchResult) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Mid != nil {
		{
			size, err := m.Mid.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSearch(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if m.Content != nil {
		{
			size, err := m.Content.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSearch(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.SenderId != 0 {
		i = encodeVarintSearch(dAtA, i, uint64(m.SenderId))
		i--
		dAtA[i] = 0x20
	}
	if m.Date != 0 {
		i = encodeVarintSearch(dAtA, i, uint64(m.Date))
		i--
		dAtA[i] = 0x18
	}
	if m.Rid != 0 {
		i = encodeVarintSearch(dAtA, i, uint64(m.Rid))
		i--
		dAtA[i] = 0x10
	}
	if m.Peer != nil {
		{
			size, err := m.Peer.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSearch(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MessageSearchItem) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MessageSearchItem) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MessageSearchItem) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Result != nil {
		{
			size, err := m.Result.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSearch(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ResponseMessageSearchResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResponseMessageSearchResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ResponseMessageSearchResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TotalCount != 0 {
		i = encodeVarintSearch(dAtA, i, uint64(m.TotalCount))
		i--
		dAtA[i] = 0x38
	}
	if len(m.GroupOutPeers) > 0 {
		for iNdEx := len(m.GroupOutPeers) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.GroupOutPeers[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintSearch(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.UserOutPeers) > 0 {
		for iNdEx := len(m.UserOutPeers) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.UserOutPeers[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintSearch(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if m.LoadMoreState != nil {
		{
			size, err := m.LoadMoreState.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSearch(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if len(m.SearchResults) > 0 {
		for iNdEx := len(m.SearchResults) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.SearchResults[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintSearch(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *RequestMessageSearch) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestMessageSearch) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RequestMessageSearch) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Optimizations) > 0 {
		dAtA33 := make([]byte, len(m.Optimizations)*10)
		var j32 int
		for _, num := range m.Optimizations {
			for num >= 1<<7 {
				dAtA33[j32] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j32++
			}
			dAtA33[j32] = uint8(num)
			j32++
		}
		i -= j32
		copy(dAtA[i:], dAtA33[:j32])
		i = encodeVarintSearch(dAtA, i, uint64(j32))
		i--
		dAtA[i] = 0x12
	}
	if m.Query != nil {
		{
			size, err := m.Query.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSearch(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RequestMessageSearchMore) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestMessageSearchMore) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RequestMessageSearchMore) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Optimizations) > 0 {
		dAtA36 := make([]byte, len(m.Optimizations)*10)
		var j35 int
		for _, num := range m.Optimizations {
			for num >= 1<<7 {
				dAtA36[j35] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j35++
			}
			dAtA36[j35] = uint8(num)
			j35++
		}
		i -= j35
		copy(dAtA[i:], dAtA36[:j35])
		i = encodeVarintSearch(dAtA, i, uint64(j35))
		i--
		dAtA[i] = 0x12
	}
	if len(m.LoadMoreState) > 0 {
		i -= len(m.LoadMoreState)
		copy(dAtA[i:], m.LoadMoreState)
		i = encodeVarintSearch(dAtA, i, uint64(len(m.LoadMoreState)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RequestSimpleSearch) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestSimpleSearch) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RequestSimpleSearch) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Optimizations) > 0 {
		dAtA38 := make([]byte, len(m.Optimizations)*10)
		var j37 int
		for _, num := range m.Optimizations {
			for num >= 1<<7 {
				dAtA38[j37] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j37++
			}
			dAtA38[j37] = uint8(num)
			j37++
		}
		i -= j37
		copy(dAtA[i:], dAtA38[:j37])
		i = encodeVarintSearch(dAtA, i, uint64(j37))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Criteria) > 0 {
		for iNdEx := len(m.Criteria) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Criteria[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintSearch(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *RequestSimpleSearchMore) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestSimpleSearchMore) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RequestSimpleSearchMore) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Optimizations) > 0 {
		dAtA40 := make([]byte, len(m.Optimizations)*10)
		var j39 int
		for _, num := range m.Optimizations {
			for num >= 1<<7 {
				dAtA40[j39] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j39++
			}
			dAtA40[j39] = uint8(num)
			j39++
		}
		i -= j39
		copy(dAtA[i:], dAtA40[:j39])
		i = encodeVarintSearch(dAtA, i, uint64(j39))
		i--
		dAtA[i] = 0x12
	}
	if len(m.LoadMoreState) > 0 {
		i -= len(m.LoadMoreState)
		copy(dAtA[i:], m.LoadMoreState)
		i = encodeVarintSearch(dAtA, i, uint64(len(m.LoadMoreState)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RequestFieldAutocomplete) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestFieldAutocomplete) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RequestFieldAutocomplete) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.FieldValue) > 0 {
		i -= len(m.FieldValue)
		copy(dAtA[i:], m.FieldValue)
		i = encodeVarintSearch(dAtA, i, uint64(len(m.FieldValue)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.FieldName) > 0 {
		i -= len(m.FieldName)
		copy(dAtA[i:], m.FieldName)
		i = encodeVarintSearch(dAtA, i, uint64(len(m.FieldName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ResponseFieldAutocomplete) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResponseFieldAutocomplete) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ResponseFieldAutocomplete) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.FieldValue) > 0 {
		for iNdEx := len(m.FieldValue) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.FieldValue[iNdEx])
			copy(dAtA[i:], m.FieldValue[iNdEx])
			i = encodeVarintSearch(dAtA, i, uint64(len(m.FieldValue[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.FieldName) > 0 {
		i -= len(m.FieldName)
		copy(dAtA[i:], m.FieldName)
		i = encodeVarintSearch(dAtA, i, uint64(len(m.FieldName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RequestLoadUserSearchByPredicatesResults) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestLoadUserSearchByPredicatesResults) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RequestLoadUserSearchByPredicatesResults) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.RequiredFields) > 0 {
		for iNdEx := len(m.RequiredFields) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.RequiredFields[iNdEx])
			copy(dAtA[i:], m.RequiredFields[iNdEx])
			i = encodeVarintSearch(dAtA, i, uint64(len(m.RequiredFields[iNdEx])))
			i--
			dAtA[i] = 0x2a
		}
	}
	if m.Limit != 0 {
		i = encodeVarintSearch(dAtA, i, uint64(m.Limit))
		i--
		dAtA[i] = 0x20
	}
	if m.Query != nil {
		{
			size, err := m.Query.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSearch(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.GroupId != 0 {
		i = encodeVarintSearch(dAtA, i, uint64(m.GroupId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Predicates) > 0 {
		for iNdEx := len(m.Predicates) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Predicates[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintSearch(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *UserMatch) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserMatch) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UserMatch) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.MatchPredicates {
		i--
		if m.MatchPredicates {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if m.UserId != 0 {
		i = encodeVarintSearch(dAtA, i, uint64(m.UserId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ResponseLoadUserSearchByPredicatesResults) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResponseLoadUserSearchByPredicatesResults) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ResponseLoadUserSearchByPredicatesResults) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ResultCount != 0 {
		i = encodeVarintSearch(dAtA, i, uint64(m.ResultCount))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Users) > 0 {
		for iNdEx := len(m.Users) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Users[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintSearch(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *RequestLoadUserSearchByPredicatesCount) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestLoadUserSearchByPredicatesCount) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RequestLoadUserSearchByPredicatesCount) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.GroupId != 0 {
		i = encodeVarintSearch(dAtA, i, uint64(m.GroupId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Predicates) > 0 {
		for iNdEx := len(m.Predicates) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Predicates[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintSearch(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ResponseLoadUserSearchByPredicatesCount) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResponseLoadUserSearchByPredicatesCount) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ResponseLoadUserSearchByPredicatesCount) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ResultCount != 0 {
		i = encodeVarintSearch(dAtA, i, uint64(m.ResultCount))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *RequestGetRecommendations) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestGetRecommendations) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RequestGetRecommendations) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *ResponseGetRecommendations) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResponseGetRecommendations) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ResponseGetRecommendations) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Peers) > 0 {
		for iNdEx := len(m.Peers) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Peers[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintSearch(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *RequestGetPromotedPeers) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestGetPromotedPeers) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RequestGetPromotedPeers) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *ResponseGetPromotedPeers) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResponseGetPromotedPeers) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ResponseGetPromotedPeers) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.GroupPeers) > 0 {
		for iNdEx := len(m.GroupPeers) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.GroupPeers[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintSearch(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.UserPeers) > 0 {
		for iNdEx := len(m.UserPeers) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.UserPeers[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintSearch(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintSearch(dAtA []byte, offset int, v uint64) int {
	offset -= sovSearch(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *SimpleContactSearchCondition) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Text)
	if l > 0 {
		n += 1 + l + sovSearch(uint64(l))
	}
	return n
}

func (m *SimpleMessageSearchCondition) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Peer != nil {
		l = m.Peer.Size()
		n += 1 + l + sovSearch(uint64(l))
	}
	l = len(m.Text)
	if l > 0 {
		n += 1 + l + sovSearch(uint64(l))
	}
	if m.Type != 0 {
		n += 1 + sovSearch(uint64(m.Type))
	}
	if m.SearchDirection != 0 {
		n += 1 + sovSearch(uint64(m.SearchDirection))
	}
	if m.DateFrom != nil {
		l = m.DateFrom.Size()
		n += 1 + l + sovSearch(uint64(l))
	}
	return n
}

func (m *SimplePeerSearchCondition) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PeerType != 0 {
		n += 1 + sovSearch(uint64(m.PeerType))
	}
	if m.Text != nil {
		l = m.Text.Size()
		n += 1 + l + sovSearch(uint64(l))
	}
	return n
}

func (m *SimpleUserProfileSearchCondition) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.QueryString)
	if l > 0 {
		n += 1 + l + sovSearch(uint64(l))
	}
	return n
}

func (m *SimpleGroupSearchCondition) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.QueryString)
	if l > 0 {
		n += 1 + l + sovSearch(uint64(l))
	}
	return n
}

func (m *Criterion) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *SimpleSearchCondition) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Criterion != nil {
		n += m.Criterion.Size()
	}
	return n
}

func (m *SimpleSearchCondition_Contact) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Contact != nil {
		l = m.Contact.Size()
		n += 1 + l + sovSearch(uint64(l))
	}
	return n
}
func (m *SimpleSearchCondition_Message) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Message != nil {
		l = m.Message.Size()
		n += 1 + l + sovSearch(uint64(l))
	}
	return n
}
func (m *SimpleSearchCondition_Peer) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Peer != nil {
		l = m.Peer.Size()
		n += 1 + l + sovSearch(uint64(l))
	}
	return n
}
func (m *SimpleSearchCondition_UserProfile) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UserProfile != nil {
		l = m.UserProfile.Size()
		n += 1 + l + sovSearch(uint64(l))
	}
	return n
}
func (m *SimpleSearchCondition_Group) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Group != nil {
		l = m.Group.Size()
		n += 1 + l + sovSearch(uint64(l))
	}
	return n
}
func (m *SearchCondition) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Body != nil {
		n += m.Body.Size()
	}
	return n
}

func (m *SearchCondition_SearchPeerTypeCondition) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SearchPeerTypeCondition != nil {
		l = m.SearchPeerTypeCondition.Size()
		n += 1 + l + sovSearch(uint64(l))
	}
	return n
}
func (m *SearchCondition_SearchPieceText) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SearchPieceText != nil {
		l = m.SearchPieceText.Size()
		n += 1 + l + sovSearch(uint64(l))
	}
	return n
}
func (m *SearchCondition_SearchAndCondition) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SearchAndCondition != nil {
		l = m.SearchAndCondition.Size()
		n += 1 + l + sovSearch(uint64(l))
	}
	return n
}
func (m *SearchCondition_SearchOrCondition) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SearchOrCondition != nil {
		l = m.SearchOrCondition.Size()
		n += 1 + l + sovSearch(uint64(l))
	}
	return n
}
func (m *SearchCondition_SearchPeerCondition) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SearchPeerCondition != nil {
		l = m.SearchPeerCondition.Size()
		n += 1 + l + sovSearch(uint64(l))
	}
	return n
}
func (m *SearchCondition_SearchPeerContentType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SearchPeerContentType != nil {
		l = m.SearchPeerContentType.Size()
		n += 1 + l + sovSearch(uint64(l))
	}
	return n
}
func (m *SearchCondition_SearchSenderIdConfition) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SearchSenderIdConfition != nil {
		l = m.SearchSenderIdConfition.Size()
		n += 1 + l + sovSearch(uint64(l))
	}
	return n
}
func (m *SearchPeerTypeCondition) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PeerType != 0 {
		n += 1 + sovSearch(uint64(m.PeerType))
	}
	return n
}

func (m *SearchPieceText) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Query)
	if l > 0 {
		n += 1 + l + sovSearch(uint64(l))
	}
	return n
}

func (m *SearchAndCondition) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.AndQuery) > 0 {
		for _, e := range m.AndQuery {
			l = e.Size()
			n += 1 + l + sovSearch(uint64(l))
		}
	}
	return n
}

func (m *SearchOrCondition) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.OrQuery) > 0 {
		for _, e := range m.OrQuery {
			l = e.Size()
			n += 1 + l + sovSearch(uint64(l))
		}
	}
	return n
}

func (m *SearchPeerCondition) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Peer != nil {
		l = m.Peer.Size()
		n += 1 + l + sovSearch(uint64(l))
	}
	return n
}

func (m *SearchPeerContentType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ContentType != 0 {
		n += 1 + sovSearch(uint64(m.ContentType))
	}
	return n
}

func (m *SearchSenderIdConfition) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SenderId != 0 {
		n += 1 + sovSearch(uint64(m.SenderId))
	}
	return n
}

func (m *PeerSearchResult) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Peer != nil {
		l = m.Peer.Size()
		n += 1 + l + sovSearch(uint64(l))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovSearch(uint64(l))
	}
	if m.Description != nil {
		l = m.Description.Size()
		n += 1 + l + sovSearch(uint64(l))
	}
	if m.MembersCount != nil {
		l = m.MembersCount.Size()
		n += 1 + l + sovSearch(uint64(l))
	}
	if m.DateCreated != 0 {
		n += 1 + sovSearch(uint64(m.DateCreated))
	}
	if m.Creator != nil {
		l = m.Creator.Size()
		n += 1 + l + sovSearch(uint64(l))
	}
	if m.IsPublic != nil {
		l = m.IsPublic.Size()
		n += 1 + l + sovSearch(uint64(l))
	}
	if m.IsJoined != nil {
		l = m.IsJoined.Size()
		n += 1 + l + sovSearch(uint64(l))
	}
	if m.Shortname != nil {
		l = m.Shortname.Size()
		n += 1 + l + sovSearch(uint64(l))
	}
	return n
}

func (m *RequestPeerSearch) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Query) > 0 {
		for _, e := range m.Query {
			l = e.Size()
			n += 1 + l + sovSearch(uint64(l))
		}
	}
	if len(m.Optimizations) > 0 {
		l = 0
		for _, e := range m.Optimizations {
			l += sovSearch(uint64(e))
		}
		n += 1 + sovSearch(uint64(l)) + l
	}
	return n
}

func (m *ResponsePeerSearch) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.SearchResults) > 0 {
		for _, e := range m.SearchResults {
			l = e.Size()
			n += 1 + l + sovSearch(uint64(l))
		}
	}
	if len(m.Users) > 0 {
		for _, e := range m.Users {
			l = e.Size()
			n += 1 + l + sovSearch(uint64(l))
		}
	}
	if len(m.Groups) > 0 {
		for _, e := range m.Groups {
			l = e.Size()
			n += 1 + l + sovSearch(uint64(l))
		}
	}
	if len(m.UserPeers) > 0 {
		for _, e := range m.UserPeers {
			l = e.Size()
			n += 1 + l + sovSearch(uint64(l))
		}
	}
	if len(m.GroupPeers) > 0 {
		for _, e := range m.GroupPeers {
			l = e.Size()
			n += 1 + l + sovSearch(uint64(l))
		}
	}
	return n
}

func (m *RequestResolvePeer) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Shortname)
	if l > 0 {
		n += 1 + l + sovSearch(uint64(l))
	}
	return n
}

func (m *ResponseResolvePeer) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Peer != nil {
		l = m.Peer.Size()
		n += 1 + l + sovSearch(uint64(l))
	}
	return n
}

func (m *MessageSearchResult) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Peer != nil {
		l = m.Peer.Size()
		n += 1 + l + sovSearch(uint64(l))
	}
	if m.Rid != 0 {
		n += 1 + sovSearch(uint64(m.Rid))
	}
	if m.Date != 0 {
		n += 1 + sovSearch(uint64(m.Date))
	}
	if m.SenderId != 0 {
		n += 1 + sovSearch(uint64(m.SenderId))
	}
	if m.Content != nil {
		l = m.Content.Size()
		n += 1 + l + sovSearch(uint64(l))
	}
	if m.Mid != nil {
		l = m.Mid.Size()
		n += 1 + l + sovSearch(uint64(l))
	}
	return n
}

func (m *MessageSearchItem) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Result != nil {
		l = m.Result.Size()
		n += 1 + l + sovSearch(uint64(l))
	}
	return n
}

func (m *ResponseMessageSearchResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.SearchResults) > 0 {
		for _, e := range m.SearchResults {
			l = e.Size()
			n += 1 + l + sovSearch(uint64(l))
		}
	}
	if m.LoadMoreState != nil {
		l = m.LoadMoreState.Size()
		n += 1 + l + sovSearch(uint64(l))
	}
	if len(m.UserOutPeers) > 0 {
		for _, e := range m.UserOutPeers {
			l = e.Size()
			n += 1 + l + sovSearch(uint64(l))
		}
	}
	if len(m.GroupOutPeers) > 0 {
		for _, e := range m.GroupOutPeers {
			l = e.Size()
			n += 1 + l + sovSearch(uint64(l))
		}
	}
	if m.TotalCount != 0 {
		n += 1 + sovSearch(uint64(m.TotalCount))
	}
	return n
}

func (m *RequestMessageSearch) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Query != nil {
		l = m.Query.Size()
		n += 1 + l + sovSearch(uint64(l))
	}
	if len(m.Optimizations) > 0 {
		l = 0
		for _, e := range m.Optimizations {
			l += sovSearch(uint64(e))
		}
		n += 1 + sovSearch(uint64(l)) + l
	}
	return n
}

func (m *RequestMessageSearchMore) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.LoadMoreState)
	if l > 0 {
		n += 1 + l + sovSearch(uint64(l))
	}
	if len(m.Optimizations) > 0 {
		l = 0
		for _, e := range m.Optimizations {
			l += sovSearch(uint64(e))
		}
		n += 1 + sovSearch(uint64(l)) + l
	}
	return n
}

func (m *RequestSimpleSearch) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Criteria) > 0 {
		for _, e := range m.Criteria {
			l = e.Size()
			n += 1 + l + sovSearch(uint64(l))
		}
	}
	if len(m.Optimizations) > 0 {
		l = 0
		for _, e := range m.Optimizations {
			l += sovSearch(uint64(e))
		}
		n += 1 + sovSearch(uint64(l)) + l
	}
	return n
}

func (m *RequestSimpleSearchMore) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.LoadMoreState)
	if l > 0 {
		n += 1 + l + sovSearch(uint64(l))
	}
	if len(m.Optimizations) > 0 {
		l = 0
		for _, e := range m.Optimizations {
			l += sovSearch(uint64(e))
		}
		n += 1 + sovSearch(uint64(l)) + l
	}
	return n
}

func (m *RequestFieldAutocomplete) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.FieldName)
	if l > 0 {
		n += 1 + l + sovSearch(uint64(l))
	}
	l = len(m.FieldValue)
	if l > 0 {
		n += 1 + l + sovSearch(uint64(l))
	}
	return n
}

func (m *ResponseFieldAutocomplete) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.FieldName)
	if l > 0 {
		n += 1 + l + sovSearch(uint64(l))
	}
	if len(m.FieldValue) > 0 {
		for _, s := range m.FieldValue {
			l = len(s)
			n += 1 + l + sovSearch(uint64(l))
		}
	}
	return n
}

func (m *RequestLoadUserSearchByPredicatesResults) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Predicates) > 0 {
		for _, e := range m.Predicates {
			l = e.Size()
			n += 1 + l + sovSearch(uint64(l))
		}
	}
	if m.GroupId != 0 {
		n += 1 + sovSearch(uint64(m.GroupId))
	}
	if m.Query != nil {
		l = m.Query.Size()
		n += 1 + l + sovSearch(uint64(l))
	}
	if m.Limit != 0 {
		n += 1 + sovSearch(uint64(m.Limit))
	}
	if len(m.RequiredFields) > 0 {
		for _, s := range m.RequiredFields {
			l = len(s)
			n += 1 + l + sovSearch(uint64(l))
		}
	}
	return n
}

func (m *UserMatch) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovSearch(uint64(m.UserId))
	}
	if m.MatchPredicates {
		n += 2
	}
	return n
}

func (m *ResponseLoadUserSearchByPredicatesResults) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Users) > 0 {
		for _, e := range m.Users {
			l = e.Size()
			n += 1 + l + sovSearch(uint64(l))
		}
	}
	if m.ResultCount != 0 {
		n += 1 + sovSearch(uint64(m.ResultCount))
	}
	return n
}

func (m *RequestLoadUserSearchByPredicatesCount) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Predicates) > 0 {
		for _, e := range m.Predicates {
			l = e.Size()
			n += 1 + l + sovSearch(uint64(l))
		}
	}
	if m.GroupId != 0 {
		n += 1 + sovSearch(uint64(m.GroupId))
	}
	return n
}

func (m *ResponseLoadUserSearchByPredicatesCount) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ResultCount != 0 {
		n += 1 + sovSearch(uint64(m.ResultCount))
	}
	return n
}

func (m *RequestGetRecommendations) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *ResponseGetRecommendations) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Peers) > 0 {
		for _, e := range m.Peers {
			l = e.Size()
			n += 1 + l + sovSearch(uint64(l))
		}
	}
	return n
}

func (m *RequestGetPromotedPeers) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *ResponseGetPromotedPeers) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.UserPeers) > 0 {
		for _, e := range m.UserPeers {
			l = e.Size()
			n += 1 + l + sovSearch(uint64(l))
		}
	}
	if len(m.GroupPeers) > 0 {
		for _, e := range m.GroupPeers {
			l = e.Size()
			n += 1 + l + sovSearch(uint64(l))
		}
	}
	return n
}

func sovSearch(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozSearch(x uint64) (n int) {
	return sovSearch(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *SimpleContactSearchCondition) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SimpleContactSearchCondition{`,
		`Text:` + fmt.Sprintf("%v", this.Text) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SimpleMessageSearchCondition) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SimpleMessageSearchCondition{`,
		`Peer:` + strings.Replace(fmt.Sprintf("%v", this.Peer), "Peer", "Peer", 1) + `,`,
		`Text:` + fmt.Sprintf("%v", this.Text) + `,`,
		`Type:` + fmt.Sprintf("%v", this.Type) + `,`,
		`SearchDirection:` + fmt.Sprintf("%v", this.SearchDirection) + `,`,
		`DateFrom:` + strings.Replace(fmt.Sprintf("%v", this.DateFrom), "Int64Value", "types.Int64Value", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SimplePeerSearchCondition) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SimplePeerSearchCondition{`,
		`PeerType:` + fmt.Sprintf("%v", this.PeerType) + `,`,
		`Text:` + strings.Replace(fmt.Sprintf("%v", this.Text), "StringValue", "types.StringValue", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SimpleUserProfileSearchCondition) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SimpleUserProfileSearchCondition{`,
		`QueryString:` + fmt.Sprintf("%v", this.QueryString) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SimpleGroupSearchCondition) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SimpleGroupSearchCondition{`,
		`QueryString:` + fmt.Sprintf("%v", this.QueryString) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Criterion) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Criterion{`,
		`}`,
	}, "")
	return s
}
func (this *SimpleSearchCondition) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SimpleSearchCondition{`,
		`Criterion:` + fmt.Sprintf("%v", this.Criterion) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SimpleSearchCondition_Contact) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SimpleSearchCondition_Contact{`,
		`Contact:` + strings.Replace(fmt.Sprintf("%v", this.Contact), "SimpleContactSearchCondition", "SimpleContactSearchCondition", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SimpleSearchCondition_Message) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SimpleSearchCondition_Message{`,
		`Message:` + strings.Replace(fmt.Sprintf("%v", this.Message), "SimpleMessageSearchCondition", "SimpleMessageSearchCondition", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SimpleSearchCondition_Peer) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SimpleSearchCondition_Peer{`,
		`Peer:` + strings.Replace(fmt.Sprintf("%v", this.Peer), "SimplePeerSearchCondition", "SimplePeerSearchCondition", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SimpleSearchCondition_UserProfile) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SimpleSearchCondition_UserProfile{`,
		`UserProfile:` + strings.Replace(fmt.Sprintf("%v", this.UserProfile), "SimpleUserProfileSearchCondition", "SimpleUserProfileSearchCondition", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SimpleSearchCondition_Group) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SimpleSearchCondition_Group{`,
		`Group:` + strings.Replace(fmt.Sprintf("%v", this.Group), "SimpleGroupSearchCondition", "SimpleGroupSearchCondition", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SearchCondition) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SearchCondition{`,
		`Body:` + fmt.Sprintf("%v", this.Body) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SearchCondition_SearchPeerTypeCondition) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SearchCondition_SearchPeerTypeCondition{`,
		`SearchPeerTypeCondition:` + strings.Replace(fmt.Sprintf("%v", this.SearchPeerTypeCondition), "SearchPeerTypeCondition", "SearchPeerTypeCondition", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SearchCondition_SearchPieceText) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SearchCondition_SearchPieceText{`,
		`SearchPieceText:` + strings.Replace(fmt.Sprintf("%v", this.SearchPieceText), "SearchPieceText", "SearchPieceText", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SearchCondition_SearchAndCondition) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SearchCondition_SearchAndCondition{`,
		`SearchAndCondition:` + strings.Replace(fmt.Sprintf("%v", this.SearchAndCondition), "SearchAndCondition", "SearchAndCondition", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SearchCondition_SearchOrCondition) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SearchCondition_SearchOrCondition{`,
		`SearchOrCondition:` + strings.Replace(fmt.Sprintf("%v", this.SearchOrCondition), "SearchOrCondition", "SearchOrCondition", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SearchCondition_SearchPeerCondition) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SearchCondition_SearchPeerCondition{`,
		`SearchPeerCondition:` + strings.Replace(fmt.Sprintf("%v", this.SearchPeerCondition), "SearchPeerCondition", "SearchPeerCondition", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SearchCondition_SearchPeerContentType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SearchCondition_SearchPeerContentType{`,
		`SearchPeerContentType:` + strings.Replace(fmt.Sprintf("%v", this.SearchPeerContentType), "SearchPeerContentType", "SearchPeerContentType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SearchCondition_SearchSenderIdConfition) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SearchCondition_SearchSenderIdConfition{`,
		`SearchSenderIdConfition:` + strings.Replace(fmt.Sprintf("%v", this.SearchSenderIdConfition), "SearchSenderIdConfition", "SearchSenderIdConfition", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SearchPeerTypeCondition) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SearchPeerTypeCondition{`,
		`PeerType:` + fmt.Sprintf("%v", this.PeerType) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SearchPieceText) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SearchPieceText{`,
		`Query:` + fmt.Sprintf("%v", this.Query) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SearchAndCondition) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForAndQuery := "[]*SearchCondition{"
	for _, f := range this.AndQuery {
		repeatedStringForAndQuery += strings.Replace(f.String(), "SearchCondition", "SearchCondition", 1) + ","
	}
	repeatedStringForAndQuery += "}"
	s := strings.Join([]string{`&SearchAndCondition{`,
		`AndQuery:` + repeatedStringForAndQuery + `,`,
		`}`,
	}, "")
	return s
}
func (this *SearchOrCondition) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForOrQuery := "[]*SearchCondition{"
	for _, f := range this.OrQuery {
		repeatedStringForOrQuery += strings.Replace(f.String(), "SearchCondition", "SearchCondition", 1) + ","
	}
	repeatedStringForOrQuery += "}"
	s := strings.Join([]string{`&SearchOrCondition{`,
		`OrQuery:` + repeatedStringForOrQuery + `,`,
		`}`,
	}, "")
	return s
}
func (this *SearchPeerCondition) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SearchPeerCondition{`,
		`Peer:` + strings.Replace(fmt.Sprintf("%v", this.Peer), "OutPeer", "OutPeer", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SearchPeerContentType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SearchPeerContentType{`,
		`ContentType:` + fmt.Sprintf("%v", this.ContentType) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SearchSenderIdConfition) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SearchSenderIdConfition{`,
		`SenderId:` + fmt.Sprintf("%v", this.SenderId) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PeerSearchResult) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PeerSearchResult{`,
		`Peer:` + strings.Replace(fmt.Sprintf("%v", this.Peer), "Peer", "Peer", 1) + `,`,
		`Title:` + fmt.Sprintf("%v", this.Title) + `,`,
		`Description:` + strings.Replace(fmt.Sprintf("%v", this.Description), "StringValue", "types.StringValue", 1) + `,`,
		`MembersCount:` + strings.Replace(fmt.Sprintf("%v", this.MembersCount), "Int32Value", "types.Int32Value", 1) + `,`,
		`DateCreated:` + fmt.Sprintf("%v", this.DateCreated) + `,`,
		`Creator:` + strings.Replace(fmt.Sprintf("%v", this.Creator), "Int32Value", "types.Int32Value", 1) + `,`,
		`IsPublic:` + strings.Replace(fmt.Sprintf("%v", this.IsPublic), "BoolValue", "types.BoolValue", 1) + `,`,
		`IsJoined:` + strings.Replace(fmt.Sprintf("%v", this.IsJoined), "BoolValue", "types.BoolValue", 1) + `,`,
		`Shortname:` + strings.Replace(fmt.Sprintf("%v", this.Shortname), "StringValue", "types.StringValue", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RequestPeerSearch) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForQuery := "[]*SearchCondition{"
	for _, f := range this.Query {
		repeatedStringForQuery += strings.Replace(f.String(), "SearchCondition", "SearchCondition", 1) + ","
	}
	repeatedStringForQuery += "}"
	s := strings.Join([]string{`&RequestPeerSearch{`,
		`Query:` + repeatedStringForQuery + `,`,
		`Optimizations:` + fmt.Sprintf("%v", this.Optimizations) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ResponsePeerSearch) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForSearchResults := "[]*PeerSearchResult{"
	for _, f := range this.SearchResults {
		repeatedStringForSearchResults += strings.Replace(f.String(), "PeerSearchResult", "PeerSearchResult", 1) + ","
	}
	repeatedStringForSearchResults += "}"
	repeatedStringForUsers := "[]*User{"
	for _, f := range this.Users {
		repeatedStringForUsers += strings.Replace(fmt.Sprintf("%v", f), "User", "User", 1) + ","
	}
	repeatedStringForUsers += "}"
	repeatedStringForGroups := "[]*Group{"
	for _, f := range this.Groups {
		repeatedStringForGroups += strings.Replace(fmt.Sprintf("%v", f), "Group", "Group", 1) + ","
	}
	repeatedStringForGroups += "}"
	repeatedStringForUserPeers := "[]*UserOutPeer{"
	for _, f := range this.UserPeers {
		repeatedStringForUserPeers += strings.Replace(fmt.Sprintf("%v", f), "UserOutPeer", "UserOutPeer", 1) + ","
	}
	repeatedStringForUserPeers += "}"
	repeatedStringForGroupPeers := "[]*GroupOutPeer{"
	for _, f := range this.GroupPeers {
		repeatedStringForGroupPeers += strings.Replace(fmt.Sprintf("%v", f), "GroupOutPeer", "GroupOutPeer", 1) + ","
	}
	repeatedStringForGroupPeers += "}"
	s := strings.Join([]string{`&ResponsePeerSearch{`,
		`SearchResults:` + repeatedStringForSearchResults + `,`,
		`Users:` + repeatedStringForUsers + `,`,
		`Groups:` + repeatedStringForGroups + `,`,
		`UserPeers:` + repeatedStringForUserPeers + `,`,
		`GroupPeers:` + repeatedStringForGroupPeers + `,`,
		`}`,
	}, "")
	return s
}
func (this *RequestResolvePeer) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RequestResolvePeer{`,
		`Shortname:` + fmt.Sprintf("%v", this.Shortname) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ResponseResolvePeer) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ResponseResolvePeer{`,
		`Peer:` + strings.Replace(fmt.Sprintf("%v", this.Peer), "OutPeer", "OutPeer", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *MessageSearchResult) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&MessageSearchResult{`,
		`Peer:` + strings.Replace(fmt.Sprintf("%v", this.Peer), "Peer", "Peer", 1) + `,`,
		`Rid:` + fmt.Sprintf("%v", this.Rid) + `,`,
		`Date:` + fmt.Sprintf("%v", this.Date) + `,`,
		`SenderId:` + fmt.Sprintf("%v", this.SenderId) + `,`,
		`Content:` + strings.Replace(fmt.Sprintf("%v", this.Content), "MessageContent", "MessageContent", 1) + `,`,
		`Mid:` + strings.Replace(fmt.Sprintf("%v", this.Mid), "UUIDValue", "UUIDValue", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *MessageSearchItem) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&MessageSearchItem{`,
		`Result:` + strings.Replace(this.Result.String(), "MessageSearchResult", "MessageSearchResult", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ResponseMessageSearchResponse) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForSearchResults := "[]*MessageSearchItem{"
	for _, f := range this.SearchResults {
		repeatedStringForSearchResults += strings.Replace(f.String(), "MessageSearchItem", "MessageSearchItem", 1) + ","
	}
	repeatedStringForSearchResults += "}"
	repeatedStringForUserOutPeers := "[]*UserOutPeer{"
	for _, f := range this.UserOutPeers {
		repeatedStringForUserOutPeers += strings.Replace(fmt.Sprintf("%v", f), "UserOutPeer", "UserOutPeer", 1) + ","
	}
	repeatedStringForUserOutPeers += "}"
	repeatedStringForGroupOutPeers := "[]*GroupOutPeer{"
	for _, f := range this.GroupOutPeers {
		repeatedStringForGroupOutPeers += strings.Replace(fmt.Sprintf("%v", f), "GroupOutPeer", "GroupOutPeer", 1) + ","
	}
	repeatedStringForGroupOutPeers += "}"
	s := strings.Join([]string{`&ResponseMessageSearchResponse{`,
		`SearchResults:` + repeatedStringForSearchResults + `,`,
		`LoadMoreState:` + strings.Replace(fmt.Sprintf("%v", this.LoadMoreState), "BytesValue", "types.BytesValue", 1) + `,`,
		`UserOutPeers:` + repeatedStringForUserOutPeers + `,`,
		`GroupOutPeers:` + repeatedStringForGroupOutPeers + `,`,
		`TotalCount:` + fmt.Sprintf("%v", this.TotalCount) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RequestMessageSearch) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RequestMessageSearch{`,
		`Query:` + strings.Replace(this.Query.String(), "SearchCondition", "SearchCondition", 1) + `,`,
		`Optimizations:` + fmt.Sprintf("%v", this.Optimizations) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RequestMessageSearchMore) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RequestMessageSearchMore{`,
		`LoadMoreState:` + fmt.Sprintf("%v", this.LoadMoreState) + `,`,
		`Optimizations:` + fmt.Sprintf("%v", this.Optimizations) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RequestSimpleSearch) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForCriteria := "[]*SimpleSearchCondition{"
	for _, f := range this.Criteria {
		repeatedStringForCriteria += strings.Replace(f.String(), "SimpleSearchCondition", "SimpleSearchCondition", 1) + ","
	}
	repeatedStringForCriteria += "}"
	s := strings.Join([]string{`&RequestSimpleSearch{`,
		`Criteria:` + repeatedStringForCriteria + `,`,
		`Optimizations:` + fmt.Sprintf("%v", this.Optimizations) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RequestSimpleSearchMore) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RequestSimpleSearchMore{`,
		`LoadMoreState:` + fmt.Sprintf("%v", this.LoadMoreState) + `,`,
		`Optimizations:` + fmt.Sprintf("%v", this.Optimizations) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RequestFieldAutocomplete) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RequestFieldAutocomplete{`,
		`FieldName:` + fmt.Sprintf("%v", this.FieldName) + `,`,
		`FieldValue:` + fmt.Sprintf("%v", this.FieldValue) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ResponseFieldAutocomplete) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ResponseFieldAutocomplete{`,
		`FieldName:` + fmt.Sprintf("%v", this.FieldName) + `,`,
		`FieldValue:` + fmt.Sprintf("%v", this.FieldValue) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RequestLoadUserSearchByPredicatesResults) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForPredicates := "[]*SearchPredicate{"
	for _, f := range this.Predicates {
		repeatedStringForPredicates += strings.Replace(fmt.Sprintf("%v", f), "SearchPredicate", "SearchPredicate", 1) + ","
	}
	repeatedStringForPredicates += "}"
	s := strings.Join([]string{`&RequestLoadUserSearchByPredicatesResults{`,
		`Predicates:` + repeatedStringForPredicates + `,`,
		`GroupId:` + fmt.Sprintf("%v", this.GroupId) + `,`,
		`Query:` + strings.Replace(fmt.Sprintf("%v", this.Query), "StringValue", "types.StringValue", 1) + `,`,
		`Limit:` + fmt.Sprintf("%v", this.Limit) + `,`,
		`RequiredFields:` + fmt.Sprintf("%v", this.RequiredFields) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UserMatch) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UserMatch{`,
		`UserId:` + fmt.Sprintf("%v", this.UserId) + `,`,
		`MatchPredicates:` + fmt.Sprintf("%v", this.MatchPredicates) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ResponseLoadUserSearchByPredicatesResults) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForUsers := "[]*UserMatch{"
	for _, f := range this.Users {
		repeatedStringForUsers += strings.Replace(f.String(), "UserMatch", "UserMatch", 1) + ","
	}
	repeatedStringForUsers += "}"
	s := strings.Join([]string{`&ResponseLoadUserSearchByPredicatesResults{`,
		`Users:` + repeatedStringForUsers + `,`,
		`ResultCount:` + fmt.Sprintf("%v", this.ResultCount) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RequestLoadUserSearchByPredicatesCount) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForPredicates := "[]*SearchPredicate{"
	for _, f := range this.Predicates {
		repeatedStringForPredicates += strings.Replace(fmt.Sprintf("%v", f), "SearchPredicate", "SearchPredicate", 1) + ","
	}
	repeatedStringForPredicates += "}"
	s := strings.Join([]string{`&RequestLoadUserSearchByPredicatesCount{`,
		`Predicates:` + repeatedStringForPredicates + `,`,
		`GroupId:` + fmt.Sprintf("%v", this.GroupId) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ResponseLoadUserSearchByPredicatesCount) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ResponseLoadUserSearchByPredicatesCount{`,
		`ResultCount:` + fmt.Sprintf("%v", this.ResultCount) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RequestGetRecommendations) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RequestGetRecommendations{`,
		`}`,
	}, "")
	return s
}
func (this *ResponseGetRecommendations) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForPeers := "[]*OutPeer{"
	for _, f := range this.Peers {
		repeatedStringForPeers += strings.Replace(fmt.Sprintf("%v", f), "OutPeer", "OutPeer", 1) + ","
	}
	repeatedStringForPeers += "}"
	s := strings.Join([]string{`&ResponseGetRecommendations{`,
		`Peers:` + repeatedStringForPeers + `,`,
		`}`,
	}, "")
	return s
}
func (this *RequestGetPromotedPeers) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RequestGetPromotedPeers{`,
		`}`,
	}, "")
	return s
}
func (this *ResponseGetPromotedPeers) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForUserPeers := "[]*UserOutPeer{"
	for _, f := range this.UserPeers {
		repeatedStringForUserPeers += strings.Replace(fmt.Sprintf("%v", f), "UserOutPeer", "UserOutPeer", 1) + ","
	}
	repeatedStringForUserPeers += "}"
	repeatedStringForGroupPeers := "[]*GroupOutPeer{"
	for _, f := range this.GroupPeers {
		repeatedStringForGroupPeers += strings.Replace(fmt.Sprintf("%v", f), "GroupOutPeer", "GroupOutPeer", 1) + ","
	}
	repeatedStringForGroupPeers += "}"
	s := strings.Join([]string{`&ResponseGetPromotedPeers{`,
		`UserPeers:` + repeatedStringForUserPeers + `,`,
		`GroupPeers:` + repeatedStringForGroupPeers + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringSearch(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *SimpleContactSearchCondition) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSearch
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SimpleContactSearchCondition: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SimpleContactSearchCondition: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Text", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSearch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSearch
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSearch
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Text = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSearch(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSearch
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSearch
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SimpleMessageSearchCondition) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSearch
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SimpleMessageSearchCondition: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SimpleMessageSearchCondition: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Peer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSearch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSearch
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSearch
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Peer == nil {
				m.Peer = &Peer{}
			}
			if err := m.Peer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Text", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSearch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSearch
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSearch
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Text = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSearch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= SearchContentType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SearchDirection", wireType)
			}
			m.SearchDirection = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSearch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SearchDirection |= SearchDirection(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DateFrom", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSearch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSearch
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSearch
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DateFrom == nil {
				m.DateFrom = &types.Int64Value{}
			}
			if err := m.DateFrom.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSearch(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSearch
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSearch
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SimplePeerSearchCondition) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSearch
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SimplePeerSearchCondition: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SimplePeerSearchCondition: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PeerType", wireType)
			}
			m.PeerType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSearch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PeerType |= SearchPeerType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Text", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSearch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSearch
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSearch
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Text == nil {
				m.Text = &types.StringValue{}
			}
			if err := m.Text.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSearch(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSearch
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSearch
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SimpleUserProfileSearchCondition) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSearch
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SimpleUserProfileSearchCondition: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SimpleUserProfileSearchCondition: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field QueryString", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSearch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSearch
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSearch
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.QueryString = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSearch(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSearch
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSearch
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SimpleGroupSearchCondition) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSearch
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SimpleGroupSearchCondition: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SimpleGroupSearchCondition: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field QueryString", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSearch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSearch
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSearch
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.QueryString = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSearch(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSearch
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSearch
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Criterion) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSearch
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: criterion: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: criterion: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipSearch(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSearch
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSearch
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SimpleSearchCondition) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSearch
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SimpleSearchCondition: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SimpleSearchCondition: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Contact", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSearch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSearch
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSearch
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &SimpleContactSearchCondition{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Criterion = &SimpleSearchCondition_Contact{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSearch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSearch
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSearch
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &SimpleMessageSearchCondition{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Criterion = &SimpleSearchCondition_Message{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Peer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSearch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSearch
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSearch
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &SimplePeerSearchCondition{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Criterion = &SimpleSearchCondition_Peer{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserProfile", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSearch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSearch
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSearch
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &SimpleUserProfileSearchCondition{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Criterion = &SimpleSearchCondition_UserProfile{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Group", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSearch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSearch
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSearch
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &SimpleGroupSearchCondition{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Criterion = &SimpleSearchCondition_Group{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSearch(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSearch
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSearch
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SearchCondition) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSearch
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SearchCondition: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SearchCondition: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SearchPeerTypeCondition", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSearch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSearch
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSearch
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &SearchPeerTypeCondition{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Body = &SearchCondition_SearchPeerTypeCondition{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SearchPieceText", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSearch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSearch
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSearch
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &SearchPieceText{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Body = &SearchCondition_SearchPieceText{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SearchAndCondition", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSearch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSearch
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSearch
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &SearchAndCondition{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Body = &SearchCondition_SearchAndCondition{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SearchOrCondition", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSearch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSearch
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSearch
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &SearchOrCondition{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Body = &SearchCondition_SearchOrCondition{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SearchPeerCondition", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSearch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSearch
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSearch
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &SearchPeerCondition{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Body = &SearchCondition_SearchPeerCondition{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SearchPeerContentType", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSearch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSearch
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSearch
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &SearchPeerContentType{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Body = &SearchCondition_SearchPeerContentType{v}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SearchSenderIdConfition", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSearch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSearch
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSearch
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &SearchSenderIdConfition{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Body = &SearchCondition_SearchSenderIdConfition{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSearch(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSearch
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSearch
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SearchPeerTypeCondition) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSearch
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SearchPeerTypeCondition: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SearchPeerTypeCondition: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PeerType", wireType)
			}
			m.PeerType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSearch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PeerType |= SearchPeerType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSearch(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSearch
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSearch
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SearchPieceText) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSearch
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SearchPieceText: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SearchPieceText: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Query", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSearch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSearch
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSearch
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Query = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSearch(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSearch
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSearch
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SearchAndCondition) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSearch
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SearchAndCondition: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SearchAndCondition: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AndQuery", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSearch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSearch
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSearch
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AndQuery = append(m.AndQuery, &SearchCondition{})
			if err := m.AndQuery[len(m.AndQuery)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSearch(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSearch
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSearch
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SearchOrCondition) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSearch
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SearchOrCondition: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SearchOrCondition: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrQuery", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSearch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSearch
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSearch
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrQuery = append(m.OrQuery, &SearchCondition{})
			if err := m.OrQuery[len(m.OrQuery)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSearch(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSearch
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSearch
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SearchPeerCondition) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSearch
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SearchPeerCondition: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SearchPeerCondition: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Peer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSearch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSearch
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSearch
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Peer == nil {
				m.Peer = &OutPeer{}
			}
			if err := m.Peer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSearch(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSearch
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSearch
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SearchPeerContentType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSearch
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SearchPeerContentType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SearchPeerContentType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContentType", wireType)
			}
			m.ContentType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSearch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ContentType |= SearchContentType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSearch(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSearch
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSearch
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SearchSenderIdConfition) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSearch
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SearchSenderIdConfition: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SearchSenderIdConfition: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SenderId", wireType)
			}
			m.SenderId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSearch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SenderId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSearch(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSearch
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSearch
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PeerSearchResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSearch
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PeerSearchResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PeerSearchResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Peer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSearch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSearch
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSearch
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Peer == nil {
				m.Peer = &Peer{}
			}
			if err := m.Peer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSearch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSearch
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSearch
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSearch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSearch
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSearch
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Description == nil {
				m.Description = &types.StringValue{}
			}
			if err := m.Description.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MembersCount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSearch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSearch
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSearch
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MembersCount == nil {
				m.MembersCount = &types.Int32Value{}
			}
			if err := m.MembersCount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DateCreated", wireType)
			}
			m.DateCreated = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSearch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DateCreated |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSearch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSearch
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSearch
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Creator == nil {
				m.Creator = &types.Int32Value{}
			}
			if err := m.Creator.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsPublic", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSearch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSearch
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSearch
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.IsPublic == nil {
				m.IsPublic = &types.BoolValue{}
			}
			if err := m.IsPublic.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsJoined", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSearch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSearch
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSearch
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.IsJoined == nil {
				m.IsJoined = &types.BoolValue{}
			}
			if err := m.IsJoined.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Shortname", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSearch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSearch
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSearch
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Shortname == nil {
				m.Shortname = &types.StringValue{}
			}
			if err := m.Shortname.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSearch(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSearch
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSearch
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestPeerSearch) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSearch
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestPeerSearch: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestPeerSearch: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Query", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSearch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSearch
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSearch
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Query = append(m.Query, &SearchCondition{})
			if err := m.Query[len(m.Query)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType == 0 {
				var v UpdateOptimization
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowSearch
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= UpdateOptimization(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Optimizations = append(m.Optimizations, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowSearch
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthSearch
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthSearch
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				if elementCount != 0 && len(m.Optimizations) == 0 {
					m.Optimizations = make([]UpdateOptimization, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v UpdateOptimization
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowSearch
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= UpdateOptimization(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Optimizations = append(m.Optimizations, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Optimizations", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSearch(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSearch
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSearch
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResponsePeerSearch) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSearch
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResponsePeerSearch: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResponsePeerSearch: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SearchResults", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSearch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSearch
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSearch
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SearchResults = append(m.SearchResults, &PeerSearchResult{})
			if err := m.SearchResults[len(m.SearchResults)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Users", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSearch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSearch
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSearch
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Users = append(m.Users, &User{})
			if err := m.Users[len(m.Users)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Groups", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSearch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSearch
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSearch
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Groups = append(m.Groups, &Group{})
			if err := m.Groups[len(m.Groups)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserPeers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSearch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSearch
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSearch
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserPeers = append(m.UserPeers, &UserOutPeer{})
			if err := m.UserPeers[len(m.UserPeers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupPeers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSearch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSearch
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSearch
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GroupPeers = append(m.GroupPeers, &GroupOutPeer{})
			if err := m.GroupPeers[len(m.GroupPeers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSearch(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSearch
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSearch
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestResolvePeer) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSearch
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestResolvePeer: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestResolvePeer: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Shortname", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSearch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSearch
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSearch
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Shortname = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSearch(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSearch
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSearch
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResponseResolvePeer) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSearch
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResponseResolvePeer: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResponseResolvePeer: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Peer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSearch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSearch
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSearch
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Peer == nil {
				m.Peer = &OutPeer{}
			}
			if err := m.Peer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSearch(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSearch
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSearch
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MessageSearchResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSearch
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MessageSearchResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MessageSearchResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Peer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSearch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSearch
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSearch
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Peer == nil {
				m.Peer = &Peer{}
			}
			if err := m.Peer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rid", wireType)
			}
			m.Rid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSearch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Rid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Date", wireType)
			}
			m.Date = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSearch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Date |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SenderId", wireType)
			}
			m.SenderId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSearch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SenderId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Content", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSearch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSearch
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSearch
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Content == nil {
				m.Content = &MessageContent{}
			}
			if err := m.Content.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSearch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSearch
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSearch
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Mid == nil {
				m.Mid = &UUIDValue{}
			}
			if err := m.Mid.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSearch(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSearch
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSearch
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MessageSearchItem) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSearch
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MessageSearchItem: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MessageSearchItem: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSearch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSearch
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSearch
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Result == nil {
				m.Result = &MessageSearchResult{}
			}
			if err := m.Result.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSearch(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSearch
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSearch
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResponseMessageSearchResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSearch
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResponseMessageSearchResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResponseMessageSearchResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SearchResults", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSearch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSearch
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSearch
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SearchResults = append(m.SearchResults, &MessageSearchItem{})
			if err := m.SearchResults[len(m.SearchResults)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LoadMoreState", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSearch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSearch
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSearch
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LoadMoreState == nil {
				m.LoadMoreState = &types.BytesValue{}
			}
			if err := m.LoadMoreState.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserOutPeers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSearch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSearch
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSearch
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserOutPeers = append(m.UserOutPeers, &UserOutPeer{})
			if err := m.UserOutPeers[len(m.UserOutPeers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupOutPeers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSearch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSearch
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSearch
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GroupOutPeers = append(m.GroupOutPeers, &GroupOutPeer{})
			if err := m.GroupOutPeers[len(m.GroupOutPeers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalCount", wireType)
			}
			m.TotalCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSearch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalCount |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSearch(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSearch
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSearch
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestMessageSearch) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSearch
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestMessageSearch: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestMessageSearch: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Query", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSearch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSearch
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSearch
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Query == nil {
				m.Query = &SearchCondition{}
			}
			if err := m.Query.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType == 0 {
				var v UpdateOptimization
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowSearch
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= UpdateOptimization(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Optimizations = append(m.Optimizations, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowSearch
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthSearch
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthSearch
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				if elementCount != 0 && len(m.Optimizations) == 0 {
					m.Optimizations = make([]UpdateOptimization, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v UpdateOptimization
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowSearch
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= UpdateOptimization(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Optimizations = append(m.Optimizations, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Optimizations", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSearch(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSearch
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSearch
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestMessageSearchMore) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSearch
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestMessageSearchMore: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestMessageSearchMore: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LoadMoreState", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSearch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSearch
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthSearch
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LoadMoreState = append(m.LoadMoreState[:0], dAtA[iNdEx:postIndex]...)
			if m.LoadMoreState == nil {
				m.LoadMoreState = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType == 0 {
				var v UpdateOptimization
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowSearch
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= UpdateOptimization(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Optimizations = append(m.Optimizations, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowSearch
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthSearch
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthSearch
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				if elementCount != 0 && len(m.Optimizations) == 0 {
					m.Optimizations = make([]UpdateOptimization, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v UpdateOptimization
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowSearch
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= UpdateOptimization(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Optimizations = append(m.Optimizations, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Optimizations", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSearch(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSearch
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSearch
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestSimpleSearch) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSearch
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestSimpleSearch: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestSimpleSearch: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Criteria", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSearch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSearch
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSearch
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Criteria = append(m.Criteria, &SimpleSearchCondition{})
			if err := m.Criteria[len(m.Criteria)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType == 0 {
				var v UpdateOptimization
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowSearch
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= UpdateOptimization(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Optimizations = append(m.Optimizations, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowSearch
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthSearch
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthSearch
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				if elementCount != 0 && len(m.Optimizations) == 0 {
					m.Optimizations = make([]UpdateOptimization, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v UpdateOptimization
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowSearch
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= UpdateOptimization(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Optimizations = append(m.Optimizations, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Optimizations", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSearch(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSearch
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSearch
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestSimpleSearchMore) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSearch
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestSimpleSearchMore: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestSimpleSearchMore: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LoadMoreState", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSearch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSearch
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthSearch
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LoadMoreState = append(m.LoadMoreState[:0], dAtA[iNdEx:postIndex]...)
			if m.LoadMoreState == nil {
				m.LoadMoreState = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType == 0 {
				var v UpdateOptimization
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowSearch
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= UpdateOptimization(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Optimizations = append(m.Optimizations, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowSearch
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthSearch
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthSearch
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				if elementCount != 0 && len(m.Optimizations) == 0 {
					m.Optimizations = make([]UpdateOptimization, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v UpdateOptimization
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowSearch
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= UpdateOptimization(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Optimizations = append(m.Optimizations, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Optimizations", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSearch(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSearch
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSearch
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestFieldAutocomplete) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSearch
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestFieldAutocomplete: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestFieldAutocomplete: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FieldName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSearch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSearch
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSearch
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FieldName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FieldValue", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSearch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSearch
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSearch
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FieldValue = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSearch(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSearch
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSearch
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResponseFieldAutocomplete) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSearch
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResponseFieldAutocomplete: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResponseFieldAutocomplete: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FieldName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSearch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSearch
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSearch
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FieldName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FieldValue", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSearch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSearch
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSearch
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FieldValue = append(m.FieldValue, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSearch(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSearch
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSearch
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestLoadUserSearchByPredicatesResults) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSearch
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestLoadUserSearchByPredicatesResults: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestLoadUserSearchByPredicatesResults: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Predicates", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSearch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSearch
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSearch
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Predicates = append(m.Predicates, &SearchPredicate{})
			if err := m.Predicates[len(m.Predicates)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupId", wireType)
			}
			m.GroupId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSearch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GroupId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Query", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSearch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSearch
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSearch
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Query == nil {
				m.Query = &types.StringValue{}
			}
			if err := m.Query.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSearch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequiredFields", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSearch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSearch
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSearch
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RequiredFields = append(m.RequiredFields, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSearch(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSearch
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSearch
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserMatch) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSearch
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserMatch: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserMatch: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSearch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MatchPredicates", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSearch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.MatchPredicates = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipSearch(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSearch
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSearch
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResponseLoadUserSearchByPredicatesResults) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSearch
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResponseLoadUserSearchByPredicatesResults: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResponseLoadUserSearchByPredicatesResults: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Users", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSearch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSearch
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSearch
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Users = append(m.Users, &UserMatch{})
			if err := m.Users[len(m.Users)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResultCount", wireType)
			}
			m.ResultCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSearch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ResultCount |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSearch(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSearch
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSearch
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestLoadUserSearchByPredicatesCount) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSearch
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestLoadUserSearchByPredicatesCount: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestLoadUserSearchByPredicatesCount: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Predicates", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSearch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSearch
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSearch
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Predicates = append(m.Predicates, &SearchPredicate{})
			if err := m.Predicates[len(m.Predicates)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupId", wireType)
			}
			m.GroupId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSearch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GroupId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSearch(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSearch
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSearch
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResponseLoadUserSearchByPredicatesCount) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSearch
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResponseLoadUserSearchByPredicatesCount: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResponseLoadUserSearchByPredicatesCount: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResultCount", wireType)
			}
			m.ResultCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSearch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ResultCount |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSearch(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSearch
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSearch
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestGetRecommendations) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSearch
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestGetRecommendations: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestGetRecommendations: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipSearch(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSearch
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSearch
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResponseGetRecommendations) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSearch
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResponseGetRecommendations: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResponseGetRecommendations: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Peers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSearch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSearch
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSearch
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Peers = append(m.Peers, &OutPeer{})
			if err := m.Peers[len(m.Peers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSearch(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSearch
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSearch
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestGetPromotedPeers) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSearch
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestGetPromotedPeers: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestGetPromotedPeers: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipSearch(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSearch
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSearch
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResponseGetPromotedPeers) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSearch
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResponseGetPromotedPeers: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResponseGetPromotedPeers: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserPeers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSearch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSearch
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSearch
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserPeers = append(m.UserPeers, &UserOutPeer{})
			if err := m.UserPeers[len(m.UserPeers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupPeers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSearch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSearch
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSearch
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GroupPeers = append(m.GroupPeers, &GroupOutPeer{})
			if err := m.GroupPeers[len(m.GroupPeers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSearch(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSearch
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSearch
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipSearch(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowSearch
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSearch
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSearch
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthSearch
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupSearch
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthSearch
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthSearch        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowSearch          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupSearch = fmt.Errorf("proto: unexpected end of group")
)
