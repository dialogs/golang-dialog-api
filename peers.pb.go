// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: peers.proto

package dialog

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	types "github.com/gogo/protobuf/types"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strconv "strconv"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type PeerType int32

const (
	PEERTYPE_UNKNOWN          PeerType = 0
	PEERTYPE_PRIVATE          PeerType = 1
	PEERTYPE_GROUP            PeerType = 2
	PEERTYPE_ENCRYPTEDPRIVATE PeerType = 3
	PEERTYPE_SIP              PeerType = 4
)

var PeerType_name = map[int32]string{
	0: "PEERTYPE_UNKNOWN",
	1: "PEERTYPE_PRIVATE",
	2: "PEERTYPE_GROUP",
	3: "PEERTYPE_ENCRYPTEDPRIVATE",
	4: "PEERTYPE_SIP",
}

var PeerType_value = map[string]int32{
	"PEERTYPE_UNKNOWN":          0,
	"PEERTYPE_PRIVATE":          1,
	"PEERTYPE_GROUP":            2,
	"PEERTYPE_ENCRYPTEDPRIVATE": 3,
	"PEERTYPE_SIP":              4,
}

func (PeerType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_9b029f9e0d26cab5, []int{0}
}

// Peer
type Peer struct {
	Type  PeerType           `protobuf:"varint,1,opt,name=type,proto3,enum=dialog.PeerType" json:"type,omitempty"`
	Id    int32              `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
	StrId *types.StringValue `protobuf:"bytes,3,opt,name=str_id,json=strId,proto3" json:"str_id,omitempty"`
}

func (m *Peer) Reset()      { *m = Peer{} }
func (*Peer) ProtoMessage() {}
func (*Peer) Descriptor() ([]byte, []int) {
	return fileDescriptor_9b029f9e0d26cab5, []int{0}
}
func (m *Peer) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Peer) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Peer.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Peer) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Peer.Merge(m, src)
}
func (m *Peer) XXX_Size() int {
	return m.Size()
}
func (m *Peer) XXX_DiscardUnknown() {
	xxx_messageInfo_Peer.DiscardUnknown(m)
}

var xxx_messageInfo_Peer proto.InternalMessageInfo

func (m *Peer) GetType() PeerType {
	if m != nil {
		return m.Type
	}
	return PEERTYPE_UNKNOWN
}

func (m *Peer) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Peer) GetStrId() *types.StringValue {
	if m != nil {
		return m.StrId
	}
	return nil
}

// Out peer with access hash
type OutPeer struct {
	Type       PeerType           `protobuf:"varint,1,opt,name=type,proto3,enum=dialog.PeerType" json:"type,omitempty"`
	Id         int32              `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
	AccessHash int64              `protobuf:"varint,3,opt,name=access_hash,json=accessHash,proto3" json:"access_hash,omitempty"`
	StrId      *types.StringValue `protobuf:"bytes,4,opt,name=str_id,json=strId,proto3" json:"str_id,omitempty"`
}

func (m *OutPeer) Reset()      { *m = OutPeer{} }
func (*OutPeer) ProtoMessage() {}
func (*OutPeer) Descriptor() ([]byte, []int) {
	return fileDescriptor_9b029f9e0d26cab5, []int{1}
}
func (m *OutPeer) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OutPeer) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OutPeer.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OutPeer) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OutPeer.Merge(m, src)
}
func (m *OutPeer) XXX_Size() int {
	return m.Size()
}
func (m *OutPeer) XXX_DiscardUnknown() {
	xxx_messageInfo_OutPeer.DiscardUnknown(m)
}

var xxx_messageInfo_OutPeer proto.InternalMessageInfo

func (m *OutPeer) GetType() PeerType {
	if m != nil {
		return m.Type
	}
	return PEERTYPE_UNKNOWN
}

func (m *OutPeer) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *OutPeer) GetAccessHash() int64 {
	if m != nil {
		return m.AccessHash
	}
	return 0
}

func (m *OutPeer) GetStrId() *types.StringValue {
	if m != nil {
		return m.StrId
	}
	return nil
}

// User's out peer
type UserOutPeer struct {
	Uid        int32 `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`
	AccessHash int64 `protobuf:"varint,2,opt,name=access_hash,json=accessHash,proto3" json:"access_hash,omitempty"`
}

func (m *UserOutPeer) Reset()      { *m = UserOutPeer{} }
func (*UserOutPeer) ProtoMessage() {}
func (*UserOutPeer) Descriptor() ([]byte, []int) {
	return fileDescriptor_9b029f9e0d26cab5, []int{2}
}
func (m *UserOutPeer) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UserOutPeer) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UserOutPeer.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UserOutPeer) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserOutPeer.Merge(m, src)
}
func (m *UserOutPeer) XXX_Size() int {
	return m.Size()
}
func (m *UserOutPeer) XXX_DiscardUnknown() {
	xxx_messageInfo_UserOutPeer.DiscardUnknown(m)
}

var xxx_messageInfo_UserOutPeer proto.InternalMessageInfo

func (m *UserOutPeer) GetUid() int32 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func (m *UserOutPeer) GetAccessHash() int64 {
	if m != nil {
		return m.AccessHash
	}
	return 0
}

// Group's out peer
type GroupOutPeer struct {
	GroupId    int32 `protobuf:"varint,1,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	AccessHash int64 `protobuf:"varint,2,opt,name=access_hash,json=accessHash,proto3" json:"access_hash,omitempty"`
}

func (m *GroupOutPeer) Reset()      { *m = GroupOutPeer{} }
func (*GroupOutPeer) ProtoMessage() {}
func (*GroupOutPeer) Descriptor() ([]byte, []int) {
	return fileDescriptor_9b029f9e0d26cab5, []int{3}
}
func (m *GroupOutPeer) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GroupOutPeer) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GroupOutPeer.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GroupOutPeer) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GroupOutPeer.Merge(m, src)
}
func (m *GroupOutPeer) XXX_Size() int {
	return m.Size()
}
func (m *GroupOutPeer) XXX_DiscardUnknown() {
	xxx_messageInfo_GroupOutPeer.DiscardUnknown(m)
}

var xxx_messageInfo_GroupOutPeer proto.InternalMessageInfo

func (m *GroupOutPeer) GetGroupId() int32 {
	if m != nil {
		return m.GroupId
	}
	return 0
}

func (m *GroupOutPeer) GetAccessHash() int64 {
	if m != nil {
		return m.AccessHash
	}
	return 0
}

func init() {
	proto.RegisterEnum("dialog.PeerType", PeerType_name, PeerType_value)
	proto.RegisterType((*Peer)(nil), "dialog.Peer")
	proto.RegisterType((*OutPeer)(nil), "dialog.OutPeer")
	proto.RegisterType((*UserOutPeer)(nil), "dialog.UserOutPeer")
	proto.RegisterType((*GroupOutPeer)(nil), "dialog.GroupOutPeer")
}

func init() { proto.RegisterFile("peers.proto", fileDescriptor_9b029f9e0d26cab5) }

var fileDescriptor_9b029f9e0d26cab5 = []byte{
	// 474 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x93, 0x51, 0x6b, 0xd3, 0x50,
	0x1c, 0xc5, 0x73, 0xd3, 0xae, 0xad, 0xff, 0xd6, 0x11, 0xc3, 0x84, 0x3a, 0xdc, 0xb5, 0xf4, 0xa9,
	0x08, 0xa6, 0x63, 0xfb, 0x04, 0x56, 0xc3, 0x2c, 0x42, 0x1b, 0xb2, 0x76, 0x32, 0x41, 0xca, 0x6d,
	0xee, 0xdd, 0xed, 0x85, 0xd8, 0x5c, 0xee, 0x4d, 0x26, 0xc3, 0x17, 0x9f, 0xf7, 0xe4, 0x27, 0xf0,
	0xd9, 0x8f, 0xe2, 0x63, 0x1f, 0xf7, 0x68, 0xd3, 0x17, 0xd9, 0xd3, 0x3e, 0x82, 0x34, 0x5d, 0x8a,
	0x6e, 0x28, 0x28, 0xec, 0x29, 0xe4, 0x9c, 0x93, 0x9c, 0xdf, 0x49, 0xb8, 0x50, 0x95, 0x8c, 0x29,
	0xed, 0x48, 0x15, 0xc5, 0x91, 0x5d, 0xa2, 0x82, 0x84, 0x11, 0xdf, 0xc6, 0x3c, 0x8a, 0x78, 0xc8,
	0xda, 0x99, 0x3a, 0x4e, 0x4e, 0xda, 0x1f, 0x14, 0x91, 0x72, 0x9d, 0xdb, 0x7e, 0x40, 0xd9, 0x89,
	0x98, 0x8a, 0x58, 0x44, 0xd3, 0x5c, 0x7a, 0xa8, 0x03, 0x12, 0x12, 0x39, 0x6e, 0x5f, 0x5f, 0x57,
	0x72, 0xf3, 0x0b, 0x82, 0xa2, 0xc7, 0x98, 0xb2, 0xf7, 0xa1, 0x18, 0x9f, 0x49, 0x56, 0x47, 0x0d,
	0xd4, 0xda, 0xdc, 0xb3, 0x9c, 0x55, 0x93, 0xb3, 0xf4, 0x06, 0x67, 0x92, 0x75, 0xee, 0x9f, 0x5f,
	0xee, 0xde, 0x83, 0xf2, 0xa9, 0xd0, 0x62, 0x1c, 0x32, 0x3f, 0x0b, 0xdb, 0x3b, 0x60, 0x0a, 0x5a,
	0x37, 0x1b, 0xa8, 0xb5, 0x71, 0x33, 0x60, 0x0a, 0x6a, 0x77, 0xa0, 0xa4, 0x63, 0x35, 0x12, 0xb4,
	0x5e, 0x68, 0xa0, 0x56, 0x75, 0xef, 0xb1, 0xb3, 0xe2, 0x76, 0x72, 0x6e, 0xe7, 0x30, 0x56, 0x62,
	0xca, 0x8f, 0x48, 0x98, 0xdc, 0x6a, 0xd8, 0xd0, 0xb1, 0xea, 0xd2, 0xe6, 0x0c, 0x41, 0xb9, 0x9f,
	0xc4, 0x77, 0xc6, 0xf8, 0x0c, 0xaa, 0x24, 0x08, 0x98, 0xd6, 0xa3, 0x09, 0xd1, 0x93, 0x0c, 0xb4,
	0xd0, 0xa9, 0x9d, 0x5f, 0xee, 0x56, 0xa0, 0x44, 0xc9, 0x94, 0x33, 0xe5, 0xc3, 0x2a, 0xf0, 0x8a,
	0xe8, 0xc9, 0x2f, 0x93, 0x8a, 0xff, 0x3d, 0xe9, 0x1d, 0x54, 0x87, 0x9a, 0xa9, 0x7c, 0xd5, 0x13,
	0x28, 0x24, 0x82, 0x66, 0xa3, 0x6e, 0x11, 0x2e, 0x9d, 0x9b, 0x88, 0xe6, 0xdf, 0x11, 0x9b, 0x1c,
	0x6a, 0x07, 0x2a, 0x4a, 0x64, 0xfe, 0xfe, 0x16, 0x54, 0xf8, 0xf2, 0x7e, 0xf4, 0xa7, 0x92, 0x72,
	0x66, 0x77, 0xff, 0xb5, 0xe8, 0xe9, 0x47, 0xa8, 0xe4, 0x9f, 0xde, 0xde, 0x02, 0xcb, 0x73, 0x5d,
	0x7f, 0x70, 0xec, 0xb9, 0xa3, 0x61, 0xef, 0x75, 0xaf, 0xff, 0xa6, 0x67, 0x19, 0xbf, 0xa9, 0x9e,
	0xdf, 0x3d, 0x7a, 0x3e, 0x70, 0x2d, 0x64, 0xdb, 0xb0, 0xb9, 0x56, 0x0f, 0xfc, 0xfe, 0xd0, 0xb3,
	0x4c, 0x7b, 0x07, 0x1e, 0xad, 0x35, 0xb7, 0xf7, 0xc2, 0x3f, 0xf6, 0x06, 0xee, 0xcb, 0xfc, 0x91,
	0x82, 0x6d, 0x41, 0x6d, 0x6d, 0x1f, 0x76, 0x3d, 0xab, 0xd8, 0xf1, 0x67, 0x73, 0x6c, 0x5c, 0xcc,
	0xb1, 0x71, 0x35, 0xc7, 0xe8, 0x53, 0x8a, 0xd1, 0xd7, 0x14, 0xa3, 0x6f, 0x29, 0x46, 0xb3, 0x14,
	0xa3, 0xef, 0x29, 0x46, 0x3f, 0x52, 0x6c, 0x5c, 0xa5, 0x18, 0x7d, 0x5e, 0x60, 0x63, 0xb6, 0xc0,
	0xc6, 0xc5, 0x02, 0x1b, 0xb0, 0x25, 0xde, 0x3b, 0x34, 0xe4, 0x0e, 0x57, 0x32, 0x70, 0x34, 0x53,
	0xa7, 0x22, 0x60, 0xfa, 0xed, 0xf5, 0xb1, 0x1a, 0x97, 0xb2, 0x9f, 0xb8, 0xff, 0x33, 0x00, 0x00,
	0xff, 0xff, 0x45, 0xd6, 0xb9, 0x7b, 0x74, 0x03, 0x00, 0x00,
}

func (x PeerType) String() string {
	s, ok := PeerType_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *Peer) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Peer)
	if !ok {
		that2, ok := that.(Peer)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Type != that1.Type {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if !this.StrId.Equal(that1.StrId) {
		return false
	}
	return true
}
func (this *OutPeer) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*OutPeer)
	if !ok {
		that2, ok := that.(OutPeer)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Type != that1.Type {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if this.AccessHash != that1.AccessHash {
		return false
	}
	if !this.StrId.Equal(that1.StrId) {
		return false
	}
	return true
}
func (this *UserOutPeer) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UserOutPeer)
	if !ok {
		that2, ok := that.(UserOutPeer)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Uid != that1.Uid {
		return false
	}
	if this.AccessHash != that1.AccessHash {
		return false
	}
	return true
}
func (this *GroupOutPeer) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GroupOutPeer)
	if !ok {
		that2, ok := that.(GroupOutPeer)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.GroupId != that1.GroupId {
		return false
	}
	if this.AccessHash != that1.AccessHash {
		return false
	}
	return true
}
func (this *Peer) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&dialog.Peer{")
	s = append(s, "Type: "+fmt.Sprintf("%#v", this.Type)+",\n")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	if this.StrId != nil {
		s = append(s, "StrId: "+fmt.Sprintf("%#v", this.StrId)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *OutPeer) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&dialog.OutPeer{")
	s = append(s, "Type: "+fmt.Sprintf("%#v", this.Type)+",\n")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	s = append(s, "AccessHash: "+fmt.Sprintf("%#v", this.AccessHash)+",\n")
	if this.StrId != nil {
		s = append(s, "StrId: "+fmt.Sprintf("%#v", this.StrId)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UserOutPeer) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&dialog.UserOutPeer{")
	s = append(s, "Uid: "+fmt.Sprintf("%#v", this.Uid)+",\n")
	s = append(s, "AccessHash: "+fmt.Sprintf("%#v", this.AccessHash)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GroupOutPeer) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&dialog.GroupOutPeer{")
	s = append(s, "GroupId: "+fmt.Sprintf("%#v", this.GroupId)+",\n")
	s = append(s, "AccessHash: "+fmt.Sprintf("%#v", this.AccessHash)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringPeers(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *Peer) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Peer) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Peer) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.StrId != nil {
		{
			size, err := m.StrId.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPeers(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Id != 0 {
		i = encodeVarintPeers(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x10
	}
	if m.Type != 0 {
		i = encodeVarintPeers(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *OutPeer) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OutPeer) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OutPeer) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.StrId != nil {
		{
			size, err := m.StrId.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPeers(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.AccessHash != 0 {
		i = encodeVarintPeers(dAtA, i, uint64(m.AccessHash))
		i--
		dAtA[i] = 0x18
	}
	if m.Id != 0 {
		i = encodeVarintPeers(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x10
	}
	if m.Type != 0 {
		i = encodeVarintPeers(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *UserOutPeer) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserOutPeer) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UserOutPeer) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AccessHash != 0 {
		i = encodeVarintPeers(dAtA, i, uint64(m.AccessHash))
		i--
		dAtA[i] = 0x10
	}
	if m.Uid != 0 {
		i = encodeVarintPeers(dAtA, i, uint64(m.Uid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GroupOutPeer) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GroupOutPeer) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GroupOutPeer) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AccessHash != 0 {
		i = encodeVarintPeers(dAtA, i, uint64(m.AccessHash))
		i--
		dAtA[i] = 0x10
	}
	if m.GroupId != 0 {
		i = encodeVarintPeers(dAtA, i, uint64(m.GroupId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintPeers(dAtA []byte, offset int, v uint64) int {
	offset -= sovPeers(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Peer) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovPeers(uint64(m.Type))
	}
	if m.Id != 0 {
		n += 1 + sovPeers(uint64(m.Id))
	}
	if m.StrId != nil {
		l = m.StrId.Size()
		n += 1 + l + sovPeers(uint64(l))
	}
	return n
}

func (m *OutPeer) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovPeers(uint64(m.Type))
	}
	if m.Id != 0 {
		n += 1 + sovPeers(uint64(m.Id))
	}
	if m.AccessHash != 0 {
		n += 1 + sovPeers(uint64(m.AccessHash))
	}
	if m.StrId != nil {
		l = m.StrId.Size()
		n += 1 + l + sovPeers(uint64(l))
	}
	return n
}

func (m *UserOutPeer) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Uid != 0 {
		n += 1 + sovPeers(uint64(m.Uid))
	}
	if m.AccessHash != 0 {
		n += 1 + sovPeers(uint64(m.AccessHash))
	}
	return n
}

func (m *GroupOutPeer) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.GroupId != 0 {
		n += 1 + sovPeers(uint64(m.GroupId))
	}
	if m.AccessHash != 0 {
		n += 1 + sovPeers(uint64(m.AccessHash))
	}
	return n
}

func sovPeers(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozPeers(x uint64) (n int) {
	return sovPeers(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *Peer) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Peer{`,
		`Type:` + fmt.Sprintf("%v", this.Type) + `,`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`StrId:` + strings.Replace(fmt.Sprintf("%v", this.StrId), "StringValue", "types.StringValue", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *OutPeer) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&OutPeer{`,
		`Type:` + fmt.Sprintf("%v", this.Type) + `,`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`AccessHash:` + fmt.Sprintf("%v", this.AccessHash) + `,`,
		`StrId:` + strings.Replace(fmt.Sprintf("%v", this.StrId), "StringValue", "types.StringValue", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UserOutPeer) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UserOutPeer{`,
		`Uid:` + fmt.Sprintf("%v", this.Uid) + `,`,
		`AccessHash:` + fmt.Sprintf("%v", this.AccessHash) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GroupOutPeer) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GroupOutPeer{`,
		`GroupId:` + fmt.Sprintf("%v", this.GroupId) + `,`,
		`AccessHash:` + fmt.Sprintf("%v", this.AccessHash) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringPeers(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *Peer) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPeers
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Peer: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Peer: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPeers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= PeerType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPeers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StrId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPeers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPeers
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPeers
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.StrId == nil {
				m.StrId = &types.StringValue{}
			}
			if err := m.StrId.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPeers(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPeers
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPeers
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OutPeer) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPeers
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OutPeer: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OutPeer: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPeers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= PeerType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPeers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccessHash", wireType)
			}
			m.AccessHash = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPeers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AccessHash |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StrId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPeers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPeers
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPeers
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.StrId == nil {
				m.StrId = &types.StringValue{}
			}
			if err := m.StrId.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPeers(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPeers
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPeers
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserOutPeer) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPeers
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserOutPeer: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserOutPeer: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			m.Uid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPeers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uid |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccessHash", wireType)
			}
			m.AccessHash = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPeers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AccessHash |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPeers(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPeers
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPeers
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GroupOutPeer) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPeers
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GroupOutPeer: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GroupOutPeer: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupId", wireType)
			}
			m.GroupId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPeers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GroupId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccessHash", wireType)
			}
			m.AccessHash = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPeers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AccessHash |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPeers(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPeers
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPeers
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPeers(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPeers
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPeers
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPeers
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthPeers
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupPeers
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthPeers
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthPeers        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPeers          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupPeers = fmt.Errorf("proto: unexpected end of group")
)
