// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: stickers.proto

package dialog

import (
	bytes "bytes"
	context "context"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	types "github.com/gogo/protobuf/types"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Descriptor of a Sticker
type StickerDescriptor struct {
	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	/// Emoji code for sticker
	Emoji *types.StringValue `protobuf:"bytes,2,opt,name=emoji,proto3" json:"emoji,omitempty"`
	/// Image of sticker 128x128 in WebP format
	Image_128 *ImageLocation `protobuf:"bytes,3,opt,name=image_128,json=image128,proto3" json:"image_128,omitempty"`
	/// Image of sticker 512x512 in WebP format
	Image_512 *ImageLocation `protobuf:"bytes,4,opt,name=image_512,json=image512,proto3" json:"image_512,omitempty"`
	/// Image of sticker 256x256 in WebP format
	Image_256 *ImageLocation `protobuf:"bytes,5,opt,name=image_256,json=image256,proto3" json:"image_256,omitempty"`
	/// Animated sticker json payload
	AnimatedStickerJson *types.StringValue `protobuf:"bytes,6,opt,name=animatedStickerJson,proto3" json:"animatedStickerJson,omitempty"`
}

func (m *StickerDescriptor) Reset()      { *m = StickerDescriptor{} }
func (*StickerDescriptor) ProtoMessage() {}
func (*StickerDescriptor) Descriptor() ([]byte, []int) {
	return fileDescriptor_a85bb905fa257eb8, []int{0}
}
func (m *StickerDescriptor) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StickerDescriptor) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StickerDescriptor.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StickerDescriptor) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StickerDescriptor.Merge(m, src)
}
func (m *StickerDescriptor) XXX_Size() int {
	return m.Size()
}
func (m *StickerDescriptor) XXX_DiscardUnknown() {
	xxx_messageInfo_StickerDescriptor.DiscardUnknown(m)
}

var xxx_messageInfo_StickerDescriptor proto.InternalMessageInfo

func (m *StickerDescriptor) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *StickerDescriptor) GetEmoji() *types.StringValue {
	if m != nil {
		return m.Emoji
	}
	return nil
}

func (m *StickerDescriptor) GetImage_128() *ImageLocation {
	if m != nil {
		return m.Image_128
	}
	return nil
}

func (m *StickerDescriptor) GetImage_512() *ImageLocation {
	if m != nil {
		return m.Image_512
	}
	return nil
}

func (m *StickerDescriptor) GetImage_256() *ImageLocation {
	if m != nil {
		return m.Image_256
	}
	return nil
}

func (m *StickerDescriptor) GetAnimatedStickerJson() *types.StringValue {
	if m != nil {
		return m.AnimatedStickerJson
	}
	return nil
}

// Sticker collection
type StickerCollection struct {
	/// Unique id of a collection
	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	/// Sticker pack title
	Title    *types.StringValue   `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	Stickers []*StickerDescriptor `protobuf:"bytes,3,rep,name=stickers,proto3" json:"stickers,omitempty"`
	/// does this pack belongs to current user
	OwnedByMe *types.BoolValue `protobuf:"bytes,4,opt,name=owned_by_me,json=ownedByMe,proto3" json:"owned_by_me,omitempty"`
	Clock     int64            `protobuf:"varint,5,opt,name=clock,proto3" json:"clock,omitempty"`
}

func (m *StickerCollection) Reset()      { *m = StickerCollection{} }
func (*StickerCollection) ProtoMessage() {}
func (*StickerCollection) Descriptor() ([]byte, []int) {
	return fileDescriptor_a85bb905fa257eb8, []int{1}
}
func (m *StickerCollection) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StickerCollection) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StickerCollection.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StickerCollection) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StickerCollection.Merge(m, src)
}
func (m *StickerCollection) XXX_Size() int {
	return m.Size()
}
func (m *StickerCollection) XXX_DiscardUnknown() {
	xxx_messageInfo_StickerCollection.DiscardUnknown(m)
}

var xxx_messageInfo_StickerCollection proto.InternalMessageInfo

func (m *StickerCollection) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *StickerCollection) GetTitle() *types.StringValue {
	if m != nil {
		return m.Title
	}
	return nil
}

func (m *StickerCollection) GetStickers() []*StickerDescriptor {
	if m != nil {
		return m.Stickers
	}
	return nil
}

func (m *StickerCollection) GetOwnedByMe() *types.BoolValue {
	if m != nil {
		return m.OwnedByMe
	}
	return nil
}

func (m *StickerCollection) GetClock() int64 {
	if m != nil {
		return m.Clock
	}
	return 0
}

// Stickers response
type ResponseStickersResponse struct {
	Collections        []*StickerCollection `protobuf:"bytes,1,rep,name=collections,proto3" json:"collections,omitempty"`
	Seq                int32                `protobuf:"varint,2,opt,name=seq,proto3" json:"seq,omitempty"`
	State              []byte               `protobuf:"bytes,3,opt,name=state,proto3" json:"state,omitempty"`
	RemovedCollections []*StickerCollection `protobuf:"bytes,4,rep,name=removed_collections,json=removedCollections,proto3" json:"removed_collections,omitempty"`
	Clock              int64                `protobuf:"varint,5,opt,name=clock,proto3" json:"clock,omitempty"`
	PrevClock          int64                `protobuf:"varint,6,opt,name=prev_clock,json=prevClock,proto3" json:"prev_clock,omitempty"`
}

func (m *ResponseStickersResponse) Reset()      { *m = ResponseStickersResponse{} }
func (*ResponseStickersResponse) ProtoMessage() {}
func (*ResponseStickersResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a85bb905fa257eb8, []int{2}
}
func (m *ResponseStickersResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ResponseStickersResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ResponseStickersResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ResponseStickersResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResponseStickersResponse.Merge(m, src)
}
func (m *ResponseStickersResponse) XXX_Size() int {
	return m.Size()
}
func (m *ResponseStickersResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ResponseStickersResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ResponseStickersResponse proto.InternalMessageInfo

func (m *ResponseStickersResponse) GetCollections() []*StickerCollection {
	if m != nil {
		return m.Collections
	}
	return nil
}

func (m *ResponseStickersResponse) GetSeq() int32 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *ResponseStickersResponse) GetState() []byte {
	if m != nil {
		return m.State
	}
	return nil
}

func (m *ResponseStickersResponse) GetRemovedCollections() []*StickerCollection {
	if m != nil {
		return m.RemovedCollections
	}
	return nil
}

func (m *ResponseStickersResponse) GetClock() int64 {
	if m != nil {
		return m.Clock
	}
	return 0
}

func (m *ResponseStickersResponse) GetPrevClock() int64 {
	if m != nil {
		return m.PrevClock
	}
	return 0
}

// Loading own stickers
type RequestLoadOwnStickers struct {
	FromClock int64 `protobuf:"varint,1,opt,name=from_clock,json=fromClock,proto3" json:"from_clock,omitempty"`
}

func (m *RequestLoadOwnStickers) Reset()      { *m = RequestLoadOwnStickers{} }
func (*RequestLoadOwnStickers) ProtoMessage() {}
func (*RequestLoadOwnStickers) Descriptor() ([]byte, []int) {
	return fileDescriptor_a85bb905fa257eb8, []int{3}
}
func (m *RequestLoadOwnStickers) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RequestLoadOwnStickers) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RequestLoadOwnStickers.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RequestLoadOwnStickers) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RequestLoadOwnStickers.Merge(m, src)
}
func (m *RequestLoadOwnStickers) XXX_Size() int {
	return m.Size()
}
func (m *RequestLoadOwnStickers) XXX_DiscardUnknown() {
	xxx_messageInfo_RequestLoadOwnStickers.DiscardUnknown(m)
}

var xxx_messageInfo_RequestLoadOwnStickers proto.InternalMessageInfo

func (m *RequestLoadOwnStickers) GetFromClock() int64 {
	if m != nil {
		return m.FromClock
	}
	return 0
}

type ResponseLoadOwnStickers struct {
	OwnStickers        []*StickerCollection `protobuf:"bytes,1,rep,name=own_stickers,json=ownStickers,proto3" json:"own_stickers,omitempty"`
	RemovedCollections []*StickerCollection `protobuf:"bytes,2,rep,name=removed_collections,json=removedCollections,proto3" json:"removed_collections,omitempty"`
	Clock              int64                `protobuf:"varint,3,opt,name=clock,proto3" json:"clock,omitempty"`
	PrevClock          int64                `protobuf:"varint,4,opt,name=prev_clock,json=prevClock,proto3" json:"prev_clock,omitempty"`
}

func (m *ResponseLoadOwnStickers) Reset()      { *m = ResponseLoadOwnStickers{} }
func (*ResponseLoadOwnStickers) ProtoMessage() {}
func (*ResponseLoadOwnStickers) Descriptor() ([]byte, []int) {
	return fileDescriptor_a85bb905fa257eb8, []int{4}
}
func (m *ResponseLoadOwnStickers) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ResponseLoadOwnStickers) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ResponseLoadOwnStickers.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ResponseLoadOwnStickers) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResponseLoadOwnStickers.Merge(m, src)
}
func (m *ResponseLoadOwnStickers) XXX_Size() int {
	return m.Size()
}
func (m *ResponseLoadOwnStickers) XXX_DiscardUnknown() {
	xxx_messageInfo_ResponseLoadOwnStickers.DiscardUnknown(m)
}

var xxx_messageInfo_ResponseLoadOwnStickers proto.InternalMessageInfo

func (m *ResponseLoadOwnStickers) GetOwnStickers() []*StickerCollection {
	if m != nil {
		return m.OwnStickers
	}
	return nil
}

func (m *ResponseLoadOwnStickers) GetRemovedCollections() []*StickerCollection {
	if m != nil {
		return m.RemovedCollections
	}
	return nil
}

func (m *ResponseLoadOwnStickers) GetClock() int64 {
	if m != nil {
		return m.Clock
	}
	return 0
}

func (m *ResponseLoadOwnStickers) GetPrevClock() int64 {
	if m != nil {
		return m.PrevClock
	}
	return 0
}

// Load accessible stickers
type RequestLoadAcesssibleStickers struct {
	FromClock int64 `protobuf:"varint,1,opt,name=from_clock,json=fromClock,proto3" json:"from_clock,omitempty"`
}

func (m *RequestLoadAcesssibleStickers) Reset()      { *m = RequestLoadAcesssibleStickers{} }
func (*RequestLoadAcesssibleStickers) ProtoMessage() {}
func (*RequestLoadAcesssibleStickers) Descriptor() ([]byte, []int) {
	return fileDescriptor_a85bb905fa257eb8, []int{5}
}
func (m *RequestLoadAcesssibleStickers) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RequestLoadAcesssibleStickers) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RequestLoadAcesssibleStickers.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RequestLoadAcesssibleStickers) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RequestLoadAcesssibleStickers.Merge(m, src)
}
func (m *RequestLoadAcesssibleStickers) XXX_Size() int {
	return m.Size()
}
func (m *RequestLoadAcesssibleStickers) XXX_DiscardUnknown() {
	xxx_messageInfo_RequestLoadAcesssibleStickers.DiscardUnknown(m)
}

var xxx_messageInfo_RequestLoadAcesssibleStickers proto.InternalMessageInfo

func (m *RequestLoadAcesssibleStickers) GetFromClock() int64 {
	if m != nil {
		return m.FromClock
	}
	return 0
}

type ResponseLoadAcesssibleStickers struct {
	AccessibleStickers []*StickerCollection `protobuf:"bytes,1,rep,name=accessible_stickers,json=accessibleStickers,proto3" json:"accessible_stickers,omitempty"`
	RemovedCollections []*StickerCollection `protobuf:"bytes,2,rep,name=removed_collections,json=removedCollections,proto3" json:"removed_collections,omitempty"`
	Clock              int64                `protobuf:"varint,3,opt,name=clock,proto3" json:"clock,omitempty"`
	PrevClock          int64                `protobuf:"varint,4,opt,name=prev_clock,json=prevClock,proto3" json:"prev_clock,omitempty"`
}

func (m *ResponseLoadAcesssibleStickers) Reset()      { *m = ResponseLoadAcesssibleStickers{} }
func (*ResponseLoadAcesssibleStickers) ProtoMessage() {}
func (*ResponseLoadAcesssibleStickers) Descriptor() ([]byte, []int) {
	return fileDescriptor_a85bb905fa257eb8, []int{6}
}
func (m *ResponseLoadAcesssibleStickers) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ResponseLoadAcesssibleStickers) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ResponseLoadAcesssibleStickers.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ResponseLoadAcesssibleStickers) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResponseLoadAcesssibleStickers.Merge(m, src)
}
func (m *ResponseLoadAcesssibleStickers) XXX_Size() int {
	return m.Size()
}
func (m *ResponseLoadAcesssibleStickers) XXX_DiscardUnknown() {
	xxx_messageInfo_ResponseLoadAcesssibleStickers.DiscardUnknown(m)
}

var xxx_messageInfo_ResponseLoadAcesssibleStickers proto.InternalMessageInfo

func (m *ResponseLoadAcesssibleStickers) GetAccessibleStickers() []*StickerCollection {
	if m != nil {
		return m.AccessibleStickers
	}
	return nil
}

func (m *ResponseLoadAcesssibleStickers) GetRemovedCollections() []*StickerCollection {
	if m != nil {
		return m.RemovedCollections
	}
	return nil
}

func (m *ResponseLoadAcesssibleStickers) GetClock() int64 {
	if m != nil {
		return m.Clock
	}
	return 0
}

func (m *ResponseLoadAcesssibleStickers) GetPrevClock() int64 {
	if m != nil {
		return m.PrevClock
	}
	return 0
}

// Add a reference to other user's sticker pack
type RequestAddStickerPackReference struct {
	SourceStickerPack int32 `protobuf:"varint,1,opt,name=source_sticker_pack,json=sourceStickerPack,proto3" json:"source_sticker_pack,omitempty"`
}

func (m *RequestAddStickerPackReference) Reset()      { *m = RequestAddStickerPackReference{} }
func (*RequestAddStickerPackReference) ProtoMessage() {}
func (*RequestAddStickerPackReference) Descriptor() ([]byte, []int) {
	return fileDescriptor_a85bb905fa257eb8, []int{7}
}
func (m *RequestAddStickerPackReference) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RequestAddStickerPackReference) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RequestAddStickerPackReference.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RequestAddStickerPackReference) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RequestAddStickerPackReference.Merge(m, src)
}
func (m *RequestAddStickerPackReference) XXX_Size() int {
	return m.Size()
}
func (m *RequestAddStickerPackReference) XXX_DiscardUnknown() {
	xxx_messageInfo_RequestAddStickerPackReference.DiscardUnknown(m)
}

var xxx_messageInfo_RequestAddStickerPackReference proto.InternalMessageInfo

func (m *RequestAddStickerPackReference) GetSourceStickerPack() int32 {
	if m != nil {
		return m.SourceStickerPack
	}
	return 0
}

// Remove a reference to an other user's sticker pack
type RequestRemoveStickerPackReference struct {
	SourceStickerPack int32 `protobuf:"varint,1,opt,name=source_sticker_pack,json=sourceStickerPack,proto3" json:"source_sticker_pack,omitempty"`
}

func (m *RequestRemoveStickerPackReference) Reset()      { *m = RequestRemoveStickerPackReference{} }
func (*RequestRemoveStickerPackReference) ProtoMessage() {}
func (*RequestRemoveStickerPackReference) Descriptor() ([]byte, []int) {
	return fileDescriptor_a85bb905fa257eb8, []int{8}
}
func (m *RequestRemoveStickerPackReference) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RequestRemoveStickerPackReference) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RequestRemoveStickerPackReference.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RequestRemoveStickerPackReference) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RequestRemoveStickerPackReference.Merge(m, src)
}
func (m *RequestRemoveStickerPackReference) XXX_Size() int {
	return m.Size()
}
func (m *RequestRemoveStickerPackReference) XXX_DiscardUnknown() {
	xxx_messageInfo_RequestRemoveStickerPackReference.DiscardUnknown(m)
}

var xxx_messageInfo_RequestRemoveStickerPackReference proto.InternalMessageInfo

func (m *RequestRemoveStickerPackReference) GetSourceStickerPack() int32 {
	if m != nil {
		return m.SourceStickerPack
	}
	return 0
}

// Sticker collection changed
type UpdateStickerCollectionsChanged struct {
	UpdatedCollections []*StickerCollection `protobuf:"bytes,1,rep,name=updated_collections,json=updatedCollections,proto3" json:"updated_collections,omitempty"`
}

func (m *UpdateStickerCollectionsChanged) Reset()      { *m = UpdateStickerCollectionsChanged{} }
func (*UpdateStickerCollectionsChanged) ProtoMessage() {}
func (*UpdateStickerCollectionsChanged) Descriptor() ([]byte, []int) {
	return fileDescriptor_a85bb905fa257eb8, []int{9}
}
func (m *UpdateStickerCollectionsChanged) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateStickerCollectionsChanged) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateStickerCollectionsChanged.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateStickerCollectionsChanged) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateStickerCollectionsChanged.Merge(m, src)
}
func (m *UpdateStickerCollectionsChanged) XXX_Size() int {
	return m.Size()
}
func (m *UpdateStickerCollectionsChanged) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateStickerCollectionsChanged.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateStickerCollectionsChanged proto.InternalMessageInfo

func (m *UpdateStickerCollectionsChanged) GetUpdatedCollections() []*StickerCollection {
	if m != nil {
		return m.UpdatedCollections
	}
	return nil
}

// Sticker pack removed
type UpdateStickerPackRemoved struct {
	PackId int32 `protobuf:"varint,1,opt,name=pack_id,json=packId,proto3" json:"pack_id,omitempty"`
}

func (m *UpdateStickerPackRemoved) Reset()      { *m = UpdateStickerPackRemoved{} }
func (*UpdateStickerPackRemoved) ProtoMessage() {}
func (*UpdateStickerPackRemoved) Descriptor() ([]byte, []int) {
	return fileDescriptor_a85bb905fa257eb8, []int{10}
}
func (m *UpdateStickerPackRemoved) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateStickerPackRemoved) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateStickerPackRemoved.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateStickerPackRemoved) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateStickerPackRemoved.Merge(m, src)
}
func (m *UpdateStickerPackRemoved) XXX_Size() int {
	return m.Size()
}
func (m *UpdateStickerPackRemoved) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateStickerPackRemoved.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateStickerPackRemoved proto.InternalMessageInfo

func (m *UpdateStickerPackRemoved) GetPackId() int32 {
	if m != nil {
		return m.PackId
	}
	return 0
}

// Sticker pack was added
type UpdateStickerPackAdded struct {
	Pack *StickerCollection `protobuf:"bytes,1,opt,name=pack,proto3" json:"pack,omitempty"`
}

func (m *UpdateStickerPackAdded) Reset()      { *m = UpdateStickerPackAdded{} }
func (*UpdateStickerPackAdded) ProtoMessage() {}
func (*UpdateStickerPackAdded) Descriptor() ([]byte, []int) {
	return fileDescriptor_a85bb905fa257eb8, []int{11}
}
func (m *UpdateStickerPackAdded) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateStickerPackAdded) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateStickerPackAdded.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateStickerPackAdded) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateStickerPackAdded.Merge(m, src)
}
func (m *UpdateStickerPackAdded) XXX_Size() int {
	return m.Size()
}
func (m *UpdateStickerPackAdded) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateStickerPackAdded.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateStickerPackAdded proto.InternalMessageInfo

func (m *UpdateStickerPackAdded) GetPack() *StickerCollection {
	if m != nil {
		return m.Pack
	}
	return nil
}

// Adding sticker collection
type RequestAddStickerCollection struct {
	Title string `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
}

func (m *RequestAddStickerCollection) Reset()      { *m = RequestAddStickerCollection{} }
func (*RequestAddStickerCollection) ProtoMessage() {}
func (*RequestAddStickerCollection) Descriptor() ([]byte, []int) {
	return fileDescriptor_a85bb905fa257eb8, []int{12}
}
func (m *RequestAddStickerCollection) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RequestAddStickerCollection) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RequestAddStickerCollection.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RequestAddStickerCollection) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RequestAddStickerCollection.Merge(m, src)
}
func (m *RequestAddStickerCollection) XXX_Size() int {
	return m.Size()
}
func (m *RequestAddStickerCollection) XXX_DiscardUnknown() {
	xxx_messageInfo_RequestAddStickerCollection.DiscardUnknown(m)
}

var xxx_messageInfo_RequestAddStickerCollection proto.InternalMessageInfo

func (m *RequestAddStickerCollection) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

// Removing sticker collection
type RequestRemoveStickerCollection struct {
	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *RequestRemoveStickerCollection) Reset()      { *m = RequestRemoveStickerCollection{} }
func (*RequestRemoveStickerCollection) ProtoMessage() {}
func (*RequestRemoveStickerCollection) Descriptor() ([]byte, []int) {
	return fileDescriptor_a85bb905fa257eb8, []int{13}
}
func (m *RequestRemoveStickerCollection) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RequestRemoveStickerCollection) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RequestRemoveStickerCollection.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RequestRemoveStickerCollection) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RequestRemoveStickerCollection.Merge(m, src)
}
func (m *RequestRemoveStickerCollection) XXX_Size() int {
	return m.Size()
}
func (m *RequestRemoveStickerCollection) XXX_DiscardUnknown() {
	xxx_messageInfo_RequestRemoveStickerCollection.DiscardUnknown(m)
}

var xxx_messageInfo_RequestRemoveStickerCollection proto.InternalMessageInfo

func (m *RequestRemoveStickerCollection) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

// Loading stickers
type RequestLoadStickerCollection struct {
	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *RequestLoadStickerCollection) Reset()      { *m = RequestLoadStickerCollection{} }
func (*RequestLoadStickerCollection) ProtoMessage() {}
func (*RequestLoadStickerCollection) Descriptor() ([]byte, []int) {
	return fileDescriptor_a85bb905fa257eb8, []int{14}
}
func (m *RequestLoadStickerCollection) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RequestLoadStickerCollection) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RequestLoadStickerCollection.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RequestLoadStickerCollection) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RequestLoadStickerCollection.Merge(m, src)
}
func (m *RequestLoadStickerCollection) XXX_Size() int {
	return m.Size()
}
func (m *RequestLoadStickerCollection) XXX_DiscardUnknown() {
	xxx_messageInfo_RequestLoadStickerCollection.DiscardUnknown(m)
}

var xxx_messageInfo_RequestLoadStickerCollection proto.InternalMessageInfo

func (m *RequestLoadStickerCollection) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

type ResponseLoadStickerCollection struct {
	Collection *StickerCollection `protobuf:"bytes,1,opt,name=collection,proto3" json:"collection,omitempty"`
}

func (m *ResponseLoadStickerCollection) Reset()      { *m = ResponseLoadStickerCollection{} }
func (*ResponseLoadStickerCollection) ProtoMessage() {}
func (*ResponseLoadStickerCollection) Descriptor() ([]byte, []int) {
	return fileDescriptor_a85bb905fa257eb8, []int{15}
}
func (m *ResponseLoadStickerCollection) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ResponseLoadStickerCollection) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ResponseLoadStickerCollection.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ResponseLoadStickerCollection) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResponseLoadStickerCollection.Merge(m, src)
}
func (m *ResponseLoadStickerCollection) XXX_Size() int {
	return m.Size()
}
func (m *ResponseLoadStickerCollection) XXX_DiscardUnknown() {
	xxx_messageInfo_ResponseLoadStickerCollection.DiscardUnknown(m)
}

var xxx_messageInfo_ResponseLoadStickerCollection proto.InternalMessageInfo

func (m *ResponseLoadStickerCollection) GetCollection() *StickerCollection {
	if m != nil {
		return m.Collection
	}
	return nil
}

func init() {
	proto.RegisterType((*StickerDescriptor)(nil), "dialog.StickerDescriptor")
	proto.RegisterType((*StickerCollection)(nil), "dialog.StickerCollection")
	proto.RegisterType((*ResponseStickersResponse)(nil), "dialog.ResponseStickersResponse")
	proto.RegisterType((*RequestLoadOwnStickers)(nil), "dialog.RequestLoadOwnStickers")
	proto.RegisterType((*ResponseLoadOwnStickers)(nil), "dialog.ResponseLoadOwnStickers")
	proto.RegisterType((*RequestLoadAcesssibleStickers)(nil), "dialog.RequestLoadAcesssibleStickers")
	proto.RegisterType((*ResponseLoadAcesssibleStickers)(nil), "dialog.ResponseLoadAcesssibleStickers")
	proto.RegisterType((*RequestAddStickerPackReference)(nil), "dialog.RequestAddStickerPackReference")
	proto.RegisterType((*RequestRemoveStickerPackReference)(nil), "dialog.RequestRemoveStickerPackReference")
	proto.RegisterType((*UpdateStickerCollectionsChanged)(nil), "dialog.UpdateStickerCollectionsChanged")
	proto.RegisterType((*UpdateStickerPackRemoved)(nil), "dialog.UpdateStickerPackRemoved")
	proto.RegisterType((*UpdateStickerPackAdded)(nil), "dialog.UpdateStickerPackAdded")
	proto.RegisterType((*RequestAddStickerCollection)(nil), "dialog.RequestAddStickerCollection")
	proto.RegisterType((*RequestRemoveStickerCollection)(nil), "dialog.RequestRemoveStickerCollection")
	proto.RegisterType((*RequestLoadStickerCollection)(nil), "dialog.RequestLoadStickerCollection")
	proto.RegisterType((*ResponseLoadStickerCollection)(nil), "dialog.ResponseLoadStickerCollection")
}

func init() { proto.RegisterFile("stickers.proto", fileDescriptor_a85bb905fa257eb8) }

var fileDescriptor_a85bb905fa257eb8 = []byte{
	// 1138 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xdc, 0x58, 0xc1, 0x6f, 0x1b, 0xc5,
	0x17, 0xf6, 0xda, 0x49, 0x9a, 0xbc, 0xf4, 0xf7, 0x43, 0x59, 0x37, 0xc9, 0xd6, 0x24, 0x9b, 0x74,
	0x4b, 0x4d, 0x0a, 0xc1, 0xc6, 0x2e, 0x29, 0xa5, 0x2a, 0xaa, 0x92, 0x54, 0x42, 0x89, 0x8a, 0x40,
	0x8e, 0xa8, 0x04, 0xa8, 0x32, 0x93, 0xdd, 0x89, 0x19, 0xb2, 0xde, 0xd9, 0xec, 0xac, 0x1d, 0x45,
	0x02, 0x29, 0xa2, 0x37, 0xc4, 0x01, 0x09, 0x21, 0x71, 0x80, 0x1b, 0x07, 0x24, 0xfe, 0x02, 0xfe,
	0x03, 0x8e, 0x91, 0xb8, 0xf4, 0x48, 0x1c, 0x0e, 0x88, 0x53, 0xaf, 0xdc, 0xd0, 0x8c, 0x77, 0xd7,
	0x1b, 0xef, 0x6c, 0x1c, 0x43, 0xe1, 0xc0, 0x29, 0xc9, 0xbc, 0xf7, 0xbe, 0xf7, 0xed, 0xf7, 0xbd,
	0x7d, 0xe3, 0x18, 0xfe, 0xcf, 0x7c, 0x62, 0xee, 0x62, 0x8f, 0x95, 0x5c, 0x8f, 0xfa, 0x54, 0x1d,
	0xb3, 0x08, 0xb2, 0x69, 0xa3, 0xa0, 0x37, 0x28, 0x6d, 0xd8, 0xb8, 0x2c, 0x4e, 0xb7, 0x5b, 0x3b,
	0xe5, 0x7d, 0x0f, 0xb9, 0x6e, 0x94, 0x57, 0x98, 0x0b, 0xe2, 0xc8, 0x25, 0x65, 0xe4, 0x38, 0xd4,
	0x47, 0x3e, 0xa1, 0x4e, 0x18, 0x9d, 0xb2, 0xf0, 0x0e, 0x71, 0x48, 0xfc, 0x28, 0xdf, 0x24, 0xcc,
	0xc4, 0xb6, 0x8d, 0x1c, 0x4c, 0x5b, 0xe1, 0xe1, 0x74, 0x13, 0x5b, 0x04, 0xd5, 0x91, 0x63, 0xd5,
	0x77, 0x88, 0x8d, 0xa3, 0x63, 0x66, 0x22, 0x1b, 0xb9, 0xdb, 0xe5, 0xe0, 0x67, 0xf7, 0xd8, 0xf8,
	0x36, 0x07, 0x53, 0x5b, 0x5d, 0xba, 0xf7, 0x30, 0x33, 0x3d, 0xe2, 0xfa, 0xd4, 0x53, 0xe7, 0x21,
	0x4b, 0x2c, 0x4d, 0x59, 0x54, 0x96, 0x46, 0xd7, 0xfe, 0xf7, 0xd9, 0xef, 0x2f, 0x4f, 0xc0, 0x85,
	0x36, 0x61, 0x64, 0xdb, 0xc6, 0xb5, 0x2c, 0xb1, 0xd4, 0x55, 0x18, 0xc5, 0x4d, 0xfa, 0x11, 0xd1,
	0xb2, 0x8b, 0xca, 0xd2, 0x64, 0x75, 0xae, 0xd4, 0x25, 0x5e, 0x0a, 0x1f, 0xac, 0xb4, 0xe5, 0x7b,
	0xc4, 0x69, 0x3c, 0x40, 0x76, 0x0b, 0xf7, 0xd7, 0x77, 0x2b, 0xd5, 0x55, 0x98, 0x20, 0x4d, 0xd4,
	0xc0, 0xf5, 0x4a, 0xf5, 0x96, 0x96, 0x13, 0x30, 0xd3, 0xa5, 0xae, 0x4e, 0xa5, 0x0d, 0x1e, 0xb8,
	0x4f, 0x4d, 0xf1, 0xf8, 0xfd, 0xf5, 0xe3, 0xa2, 0xac, 0x52, 0xbd, 0xd5, 0x83, 0x58, 0xa9, 0x54,
	0xb5, 0x91, 0xa1, 0x21, 0x56, 0x2a, 0xd5, 0x1e, 0x44, 0x75, 0xe5, 0xa6, 0x36, 0x3a, 0x34, 0x44,
	0x75, 0xe5, 0xa6, 0xfa, 0x10, 0xf2, 0xc8, 0x21, 0x4d, 0xe4, 0x63, 0x2b, 0xd0, 0x71, 0x93, 0x51,
	0x47, 0x1b, 0x1b, 0x5e, 0x19, 0x19, 0x8e, 0xf1, 0x43, 0x36, 0xf2, 0x67, 0x9d, 0xda, 0x36, 0x36,
	0x39, 0x9b, 0x73, 0xf8, 0xe3, 0x13, 0xdf, 0xc6, 0x7f, 0xc9, 0x1f, 0x51, 0xa9, 0xde, 0x83, 0xf1,
	0x70, 0x8a, 0xb5, 0xdc, 0x62, 0x6e, 0x69, 0xb2, 0x7a, 0x39, 0x14, 0x26, 0x31, 0x2e, 0x09, 0x71,
	0xc2, 0x4a, 0x75, 0x03, 0x26, 0xe9, 0xbe, 0x83, 0xad, 0xfa, 0xf6, 0x41, 0xbd, 0x89, 0x03, 0x93,
	0x0a, 0x09, 0x3a, 0x6b, 0x94, 0xda, 0x52, 0x32, 0x13, 0xa2, 0x7a, 0xed, 0xe0, 0x4d, 0xac, 0x5e,
	0x85, 0x51, 0xd3, 0xa6, 0xe6, 0xae, 0xb0, 0x29, 0x97, 0x60, 0x2d, 0x62, 0xc6, 0x1f, 0x59, 0xd0,
	0x6a, 0x98, 0xb9, 0xd4, 0x61, 0x38, 0xa0, 0xc9, 0xc2, 0xbf, 0xd5, 0x4d, 0x98, 0x34, 0x23, 0x09,
	0x99, 0xa6, 0x48, 0x9f, 0xaa, 0x27, 0x72, 0x7f, 0x8b, 0x78, 0xb1, 0xba, 0x00, 0x39, 0x86, 0xf7,
	0x84, 0xbe, 0x09, 0x07, 0x78, 0x84, 0xd3, 0x65, 0x3e, 0xf2, 0xb1, 0x98, 0xed, 0x8b, 0x09, 0xba,
	0x22, 0xa6, 0xbe, 0x0b, 0x79, 0x0f, 0x37, 0x69, 0x1b, 0x5b, 0xf5, 0x38, 0xb3, 0x91, 0x21, 0x99,
	0xa9, 0x01, 0xc8, 0x7a, 0x8c, 0xe0, 0x79, 0xe4, 0x52, 0x97, 0x01, 0x5c, 0x0f, 0xb7, 0xeb, 0xdd,
	0xcc, 0x31, 0x59, 0xe6, 0x04, 0x4f, 0x58, 0xe7, 0xf1, 0xdb, 0xf3, 0x9d, 0xbb, 0x05, 0xd0, 0x48,
	0xb3, 0x64, 0xd9, 0x8d, 0x52, 0xc3, 0x73, 0xcd, 0xd2, 0x1b, 0x9e, 0x6b, 0x86, 0xf2, 0x1a, 0x16,
	0xcc, 0xd4, 0xf0, 0x5e, 0x0b, 0x33, 0xff, 0x3e, 0x45, 0xd6, 0x5b, 0xfb, 0x4e, 0x68, 0x00, 0x6f,
	0xb3, 0xe3, 0xd1, 0x66, 0xd0, 0x46, 0x91, 0xb6, 0xe1, 0x09, 0xdd, 0x36, 0x73, 0x9d, 0xbb, 0x97,
	0x61, 0x36, 0xd9, 0x46, 0x40, 0x1b, 0xdf, 0x65, 0x61, 0x36, 0x6c, 0xd9, 0xdf, 0xe7, 0x0e, 0x5c,
	0xa4, 0xfb, 0x4e, 0x3d, 0x9a, 0xdb, 0x41, 0x0e, 0xd7, 0xf8, 0x70, 0x46, 0xd5, 0x29, 0x66, 0x64,
	0x9f, 0xa6, 0x19, 0xb9, 0x73, 0x9b, 0x31, 0xf2, 0xf7, 0xcc, 0xd8, 0x85, 0xf9, 0x98, 0x19, 0xab,
	0x26, 0x66, 0x4c, 0x40, 0xfc, 0x23, 0x9e, 0xfc, 0x98, 0x05, 0x3d, 0xee, 0x89, 0xa4, 0xdd, 0x26,
	0xe4, 0x91, 0xc9, 0x8f, 0xf9, 0xe9, 0x10, 0x0e, 0xa9, 0xbd, 0xaa, 0xff, 0xa6, 0x51, 0x9f, 0x70,
	0xe9, 0x84, 0x8c, 0xab, 0x56, 0xb8, 0xf8, 0xdf, 0x46, 0xe6, 0x6e, 0x0d, 0xef, 0x60, 0x0f, 0x3b,
	0x26, 0x56, 0x5f, 0x87, 0x3c, 0xa3, 0x2d, 0xcf, 0x8c, 0x64, 0xab, 0xbb, 0x28, 0xb0, 0x2c, 0xb1,
	0x7a, 0xa6, 0xba, 0x99, 0x31, 0x9c, 0x01, 0xd6, 0x1d, 0x2a, 0x70, 0x25, 0xf8, 0xbd, 0x26, 0xe4,
	0xf8, 0xf7, 0x29, 0x7c, 0x0c, 0x0b, 0xef, 0xb8, 0x16, 0xf2, 0x71, 0xc2, 0x31, 0xb6, 0xfe, 0x21,
	0x72, 0x1a, 0xd8, 0xe2, 0x8e, 0xb7, 0x44, 0xca, 0x69, 0xc7, 0x87, 0xdd, 0xe0, 0x6a, 0x00, 0x12,
	0xeb, 0x60, 0xac, 0x81, 0x76, 0xaa, 0x7b, 0xf7, 0xc1, 0xc5, 0x60, 0xa8, 0x45, 0xb8, 0xc0, 0x9f,
	0xb3, 0x9e, 0x76, 0xd5, 0x8e, 0xf1, 0xe8, 0x86, 0x65, 0x3c, 0x80, 0x99, 0x04, 0xc6, 0xaa, 0x65,
	0x61, 0x4b, 0xbd, 0x03, 0x23, 0x91, 0x52, 0xc3, 0x30, 0x15, 0x55, 0xc6, 0x07, 0xf0, 0x6c, 0x62,
	0x36, 0x62, 0x1f, 0x02, 0xae, 0x86, 0xb7, 0x3c, 0x47, 0x9f, 0x90, 0xdf, 0xe3, 0x03, 0xb4, 0x7f,
	0x18, 0x4d, 0xdf, 0x29, 0xf7, 0xcf, 0xfd, 0x49, 0x63, 0x00, 0xfc, 0xfb, 0x30, 0x17, 0xdb, 0x42,
	0x4f, 0x19, 0xfc, 0x80, 0xaf, 0xb8, 0xde, 0xd2, 0x49, 0xa2, 0xbf, 0x06, 0xd0, 0x9b, 0x96, 0x81,
	0x16, 0xd4, 0x62, 0xc9, 0x03, 0x5e, 0xda, 0xea, 0xa3, 0x71, 0x18, 0x8f, 0xd6, 0xd1, 0xa1, 0x02,
	0xcf, 0xf4, 0xdf, 0x44, 0x7a, 0xd8, 0x46, 0x7e, 0x23, 0x16, 0x16, 0x7a, 0x71, 0xe9, 0x55, 0x66,
	0x2c, 0x7f, 0xfa, 0xf3, 0xaf, 0x5f, 0x66, 0x8b, 0xc6, 0x95, 0x72, 0xbb, 0x52, 0xe6, 0x04, 0xca,
	0x61, 0xa8, 0xdc, 0x97, 0x7a, 0x5b, 0x79, 0x41, 0xfd, 0x46, 0x81, 0x99, 0x94, 0xc5, 0x7b, 0x4d,
	0xc2, 0x24, 0x99, 0x56, 0x28, 0xca, 0x08, 0x25, 0xf3, 0x8c, 0x1b, 0x82, 0xd7, 0x4b, 0xc6, 0x92,
	0x9c, 0x57, 0xb2, 0x82, 0xd3, 0xfb, 0x5c, 0x81, 0xd9, 0xb4, 0xed, 0x56, 0xec, 0xe3, 0x97, 0x92,
	0x57, 0xc8, 0xf7, 0x13, 0xdc, 0xc2, 0x7b, 0xc6, 0x2b, 0x82, 0x4d, 0xc9, 0xb8, 0x9e, 0x64, 0x93,
	0x82, 0xc3, 0xe9, 0x7c, 0xa5, 0x40, 0xe1, 0x8c, 0x65, 0x77, 0xbd, 0x8f, 0x51, 0x7a, 0xaa, 0x9c,
	0xd4, 0xab, 0x82, 0x54, 0xc5, 0x58, 0x4e, 0x92, 0x4a, 0x87, 0xe2, 0xbc, 0x1e, 0x29, 0x70, 0x49,
	0xfe, 0xa2, 0xa7, 0x6a, 0xd4, 0x4b, 0x92, 0x73, 0xa9, 0x08, 0x2e, 0x2f, 0x1a, 0xc5, 0xb3, 0x04,
	0xea, 0x81, 0x84, 0x66, 0xa5, 0x2d, 0x83, 0xe2, 0x59, 0xd2, 0x0c, 0xe2, 0x72, 0x86, 0x59, 0x29,
	0x38, 0x9c, 0xce, 0xd7, 0x0a, 0x4c, 0xcb, 0x5f, 0xef, 0xe7, 0x24, 0x93, 0x9d, 0xa4, 0x72, 0x4d,
	0x36, 0xd8, 0x89, 0x34, 0xa3, 0x2a, 0xc8, 0x2d, 0x1b, 0xcf, 0xcb, 0xe7, 0x5a, 0x46, 0x6d, 0xad,
	0x76, 0x74, 0xac, 0x67, 0x1e, 0x1f, 0xeb, 0x99, 0x27, 0xc7, 0xba, 0x72, 0xd8, 0xd1, 0x95, 0xef,
	0x3b, 0xba, 0xf2, 0x53, 0x47, 0x57, 0x8e, 0x3a, 0xba, 0xf2, 0x4b, 0x47, 0x57, 0x7e, 0xeb, 0xe8,
	0x99, 0x27, 0x1d, 0x5d, 0xf9, 0xe2, 0x44, 0xcf, 0x1c, 0x9d, 0xe8, 0x99, 0xc7, 0x27, 0x7a, 0x06,
	0x2e, 0xc5, 0xb7, 0x0a, 0xc3, 0x5e, 0x9b, 0x98, 0x98, 0xbd, 0x17, 0x7c, 0x45, 0xb0, 0x3d, 0x26,
	0xfe, 0x27, 0xba, 0xf1, 0x67, 0x00, 0x00, 0x00, 0xff, 0xff, 0x2a, 0x0e, 0x87, 0x30, 0x43, 0x10,
	0x00, 0x00,
}

func (this *StickerDescriptor) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*StickerDescriptor)
	if !ok {
		that2, ok := that.(StickerDescriptor)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if !this.Emoji.Equal(that1.Emoji) {
		return false
	}
	if !this.Image_128.Equal(that1.Image_128) {
		return false
	}
	if !this.Image_512.Equal(that1.Image_512) {
		return false
	}
	if !this.Image_256.Equal(that1.Image_256) {
		return false
	}
	if !this.AnimatedStickerJson.Equal(that1.AnimatedStickerJson) {
		return false
	}
	return true
}
func (this *StickerCollection) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*StickerCollection)
	if !ok {
		that2, ok := that.(StickerCollection)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if !this.Title.Equal(that1.Title) {
		return false
	}
	if len(this.Stickers) != len(that1.Stickers) {
		return false
	}
	for i := range this.Stickers {
		if !this.Stickers[i].Equal(that1.Stickers[i]) {
			return false
		}
	}
	if !this.OwnedByMe.Equal(that1.OwnedByMe) {
		return false
	}
	if this.Clock != that1.Clock {
		return false
	}
	return true
}
func (this *ResponseStickersResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ResponseStickersResponse)
	if !ok {
		that2, ok := that.(ResponseStickersResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Collections) != len(that1.Collections) {
		return false
	}
	for i := range this.Collections {
		if !this.Collections[i].Equal(that1.Collections[i]) {
			return false
		}
	}
	if this.Seq != that1.Seq {
		return false
	}
	if !bytes.Equal(this.State, that1.State) {
		return false
	}
	if len(this.RemovedCollections) != len(that1.RemovedCollections) {
		return false
	}
	for i := range this.RemovedCollections {
		if !this.RemovedCollections[i].Equal(that1.RemovedCollections[i]) {
			return false
		}
	}
	if this.Clock != that1.Clock {
		return false
	}
	if this.PrevClock != that1.PrevClock {
		return false
	}
	return true
}
func (this *RequestLoadOwnStickers) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RequestLoadOwnStickers)
	if !ok {
		that2, ok := that.(RequestLoadOwnStickers)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.FromClock != that1.FromClock {
		return false
	}
	return true
}
func (this *ResponseLoadOwnStickers) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ResponseLoadOwnStickers)
	if !ok {
		that2, ok := that.(ResponseLoadOwnStickers)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.OwnStickers) != len(that1.OwnStickers) {
		return false
	}
	for i := range this.OwnStickers {
		if !this.OwnStickers[i].Equal(that1.OwnStickers[i]) {
			return false
		}
	}
	if len(this.RemovedCollections) != len(that1.RemovedCollections) {
		return false
	}
	for i := range this.RemovedCollections {
		if !this.RemovedCollections[i].Equal(that1.RemovedCollections[i]) {
			return false
		}
	}
	if this.Clock != that1.Clock {
		return false
	}
	if this.PrevClock != that1.PrevClock {
		return false
	}
	return true
}
func (this *RequestLoadAcesssibleStickers) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RequestLoadAcesssibleStickers)
	if !ok {
		that2, ok := that.(RequestLoadAcesssibleStickers)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.FromClock != that1.FromClock {
		return false
	}
	return true
}
func (this *ResponseLoadAcesssibleStickers) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ResponseLoadAcesssibleStickers)
	if !ok {
		that2, ok := that.(ResponseLoadAcesssibleStickers)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.AccessibleStickers) != len(that1.AccessibleStickers) {
		return false
	}
	for i := range this.AccessibleStickers {
		if !this.AccessibleStickers[i].Equal(that1.AccessibleStickers[i]) {
			return false
		}
	}
	if len(this.RemovedCollections) != len(that1.RemovedCollections) {
		return false
	}
	for i := range this.RemovedCollections {
		if !this.RemovedCollections[i].Equal(that1.RemovedCollections[i]) {
			return false
		}
	}
	if this.Clock != that1.Clock {
		return false
	}
	if this.PrevClock != that1.PrevClock {
		return false
	}
	return true
}
func (this *RequestAddStickerPackReference) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RequestAddStickerPackReference)
	if !ok {
		that2, ok := that.(RequestAddStickerPackReference)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.SourceStickerPack != that1.SourceStickerPack {
		return false
	}
	return true
}
func (this *RequestRemoveStickerPackReference) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RequestRemoveStickerPackReference)
	if !ok {
		that2, ok := that.(RequestRemoveStickerPackReference)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.SourceStickerPack != that1.SourceStickerPack {
		return false
	}
	return true
}
func (this *UpdateStickerCollectionsChanged) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpdateStickerCollectionsChanged)
	if !ok {
		that2, ok := that.(UpdateStickerCollectionsChanged)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.UpdatedCollections) != len(that1.UpdatedCollections) {
		return false
	}
	for i := range this.UpdatedCollections {
		if !this.UpdatedCollections[i].Equal(that1.UpdatedCollections[i]) {
			return false
		}
	}
	return true
}
func (this *UpdateStickerPackRemoved) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpdateStickerPackRemoved)
	if !ok {
		that2, ok := that.(UpdateStickerPackRemoved)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.PackId != that1.PackId {
		return false
	}
	return true
}
func (this *UpdateStickerPackAdded) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpdateStickerPackAdded)
	if !ok {
		that2, ok := that.(UpdateStickerPackAdded)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Pack.Equal(that1.Pack) {
		return false
	}
	return true
}
func (this *RequestAddStickerCollection) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RequestAddStickerCollection)
	if !ok {
		that2, ok := that.(RequestAddStickerCollection)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Title != that1.Title {
		return false
	}
	return true
}
func (this *RequestRemoveStickerCollection) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RequestRemoveStickerCollection)
	if !ok {
		that2, ok := that.(RequestRemoveStickerCollection)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	return true
}
func (this *RequestLoadStickerCollection) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RequestLoadStickerCollection)
	if !ok {
		that2, ok := that.(RequestLoadStickerCollection)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	return true
}
func (this *ResponseLoadStickerCollection) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ResponseLoadStickerCollection)
	if !ok {
		that2, ok := that.(ResponseLoadStickerCollection)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Collection.Equal(that1.Collection) {
		return false
	}
	return true
}
func (this *StickerDescriptor) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 10)
	s = append(s, "&dialog.StickerDescriptor{")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	if this.Emoji != nil {
		s = append(s, "Emoji: "+fmt.Sprintf("%#v", this.Emoji)+",\n")
	}
	if this.Image_128 != nil {
		s = append(s, "Image_128: "+fmt.Sprintf("%#v", this.Image_128)+",\n")
	}
	if this.Image_512 != nil {
		s = append(s, "Image_512: "+fmt.Sprintf("%#v", this.Image_512)+",\n")
	}
	if this.Image_256 != nil {
		s = append(s, "Image_256: "+fmt.Sprintf("%#v", this.Image_256)+",\n")
	}
	if this.AnimatedStickerJson != nil {
		s = append(s, "AnimatedStickerJson: "+fmt.Sprintf("%#v", this.AnimatedStickerJson)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *StickerCollection) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&dialog.StickerCollection{")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	if this.Title != nil {
		s = append(s, "Title: "+fmt.Sprintf("%#v", this.Title)+",\n")
	}
	if this.Stickers != nil {
		s = append(s, "Stickers: "+fmt.Sprintf("%#v", this.Stickers)+",\n")
	}
	if this.OwnedByMe != nil {
		s = append(s, "OwnedByMe: "+fmt.Sprintf("%#v", this.OwnedByMe)+",\n")
	}
	s = append(s, "Clock: "+fmt.Sprintf("%#v", this.Clock)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ResponseStickersResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 10)
	s = append(s, "&dialog.ResponseStickersResponse{")
	if this.Collections != nil {
		s = append(s, "Collections: "+fmt.Sprintf("%#v", this.Collections)+",\n")
	}
	s = append(s, "Seq: "+fmt.Sprintf("%#v", this.Seq)+",\n")
	s = append(s, "State: "+fmt.Sprintf("%#v", this.State)+",\n")
	if this.RemovedCollections != nil {
		s = append(s, "RemovedCollections: "+fmt.Sprintf("%#v", this.RemovedCollections)+",\n")
	}
	s = append(s, "Clock: "+fmt.Sprintf("%#v", this.Clock)+",\n")
	s = append(s, "PrevClock: "+fmt.Sprintf("%#v", this.PrevClock)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RequestLoadOwnStickers) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&dialog.RequestLoadOwnStickers{")
	s = append(s, "FromClock: "+fmt.Sprintf("%#v", this.FromClock)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ResponseLoadOwnStickers) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&dialog.ResponseLoadOwnStickers{")
	if this.OwnStickers != nil {
		s = append(s, "OwnStickers: "+fmt.Sprintf("%#v", this.OwnStickers)+",\n")
	}
	if this.RemovedCollections != nil {
		s = append(s, "RemovedCollections: "+fmt.Sprintf("%#v", this.RemovedCollections)+",\n")
	}
	s = append(s, "Clock: "+fmt.Sprintf("%#v", this.Clock)+",\n")
	s = append(s, "PrevClock: "+fmt.Sprintf("%#v", this.PrevClock)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RequestLoadAcesssibleStickers) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&dialog.RequestLoadAcesssibleStickers{")
	s = append(s, "FromClock: "+fmt.Sprintf("%#v", this.FromClock)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ResponseLoadAcesssibleStickers) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&dialog.ResponseLoadAcesssibleStickers{")
	if this.AccessibleStickers != nil {
		s = append(s, "AccessibleStickers: "+fmt.Sprintf("%#v", this.AccessibleStickers)+",\n")
	}
	if this.RemovedCollections != nil {
		s = append(s, "RemovedCollections: "+fmt.Sprintf("%#v", this.RemovedCollections)+",\n")
	}
	s = append(s, "Clock: "+fmt.Sprintf("%#v", this.Clock)+",\n")
	s = append(s, "PrevClock: "+fmt.Sprintf("%#v", this.PrevClock)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RequestAddStickerPackReference) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&dialog.RequestAddStickerPackReference{")
	s = append(s, "SourceStickerPack: "+fmt.Sprintf("%#v", this.SourceStickerPack)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RequestRemoveStickerPackReference) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&dialog.RequestRemoveStickerPackReference{")
	s = append(s, "SourceStickerPack: "+fmt.Sprintf("%#v", this.SourceStickerPack)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UpdateStickerCollectionsChanged) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&dialog.UpdateStickerCollectionsChanged{")
	if this.UpdatedCollections != nil {
		s = append(s, "UpdatedCollections: "+fmt.Sprintf("%#v", this.UpdatedCollections)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UpdateStickerPackRemoved) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&dialog.UpdateStickerPackRemoved{")
	s = append(s, "PackId: "+fmt.Sprintf("%#v", this.PackId)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UpdateStickerPackAdded) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&dialog.UpdateStickerPackAdded{")
	if this.Pack != nil {
		s = append(s, "Pack: "+fmt.Sprintf("%#v", this.Pack)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RequestAddStickerCollection) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&dialog.RequestAddStickerCollection{")
	s = append(s, "Title: "+fmt.Sprintf("%#v", this.Title)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RequestRemoveStickerCollection) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&dialog.RequestRemoveStickerCollection{")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RequestLoadStickerCollection) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&dialog.RequestLoadStickerCollection{")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ResponseLoadStickerCollection) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&dialog.ResponseLoadStickerCollection{")
	if this.Collection != nil {
		s = append(s, "Collection: "+fmt.Sprintf("%#v", this.Collection)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringStickers(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// StickersClient is the client API for Stickers service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type StickersClient interface {
	LoadOwnStickers(ctx context.Context, in *RequestLoadOwnStickers, opts ...grpc.CallOption) (*ResponseLoadOwnStickers, error)
	LoadAcesssibleStickers(ctx context.Context, in *RequestLoadAcesssibleStickers, opts ...grpc.CallOption) (*ResponseLoadAcesssibleStickers, error)
	AddStickerPackReference(ctx context.Context, in *RequestAddStickerPackReference, opts ...grpc.CallOption) (*ResponseSeq, error)
	RemoveStickerPackReference(ctx context.Context, in *RequestRemoveStickerPackReference, opts ...grpc.CallOption) (*ResponseSeq, error)
	AddStickerCollection(ctx context.Context, in *RequestAddStickerCollection, opts ...grpc.CallOption) (*ResponseSeq, error)
	RemoveStickerCollection(ctx context.Context, in *RequestRemoveStickerCollection, opts ...grpc.CallOption) (*ResponseSeq, error)
	LoadStickerCollection(ctx context.Context, in *RequestLoadStickerCollection, opts ...grpc.CallOption) (*ResponseLoadStickerCollection, error)
}

type stickersClient struct {
	cc *grpc.ClientConn
}

func NewStickersClient(cc *grpc.ClientConn) StickersClient {
	return &stickersClient{cc}
}

func (c *stickersClient) LoadOwnStickers(ctx context.Context, in *RequestLoadOwnStickers, opts ...grpc.CallOption) (*ResponseLoadOwnStickers, error) {
	out := new(ResponseLoadOwnStickers)
	err := c.cc.Invoke(ctx, "/dialog.Stickers/LoadOwnStickers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stickersClient) LoadAcesssibleStickers(ctx context.Context, in *RequestLoadAcesssibleStickers, opts ...grpc.CallOption) (*ResponseLoadAcesssibleStickers, error) {
	out := new(ResponseLoadAcesssibleStickers)
	err := c.cc.Invoke(ctx, "/dialog.Stickers/LoadAcesssibleStickers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stickersClient) AddStickerPackReference(ctx context.Context, in *RequestAddStickerPackReference, opts ...grpc.CallOption) (*ResponseSeq, error) {
	out := new(ResponseSeq)
	err := c.cc.Invoke(ctx, "/dialog.Stickers/AddStickerPackReference", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stickersClient) RemoveStickerPackReference(ctx context.Context, in *RequestRemoveStickerPackReference, opts ...grpc.CallOption) (*ResponseSeq, error) {
	out := new(ResponseSeq)
	err := c.cc.Invoke(ctx, "/dialog.Stickers/RemoveStickerPackReference", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stickersClient) AddStickerCollection(ctx context.Context, in *RequestAddStickerCollection, opts ...grpc.CallOption) (*ResponseSeq, error) {
	out := new(ResponseSeq)
	err := c.cc.Invoke(ctx, "/dialog.Stickers/AddStickerCollection", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stickersClient) RemoveStickerCollection(ctx context.Context, in *RequestRemoveStickerCollection, opts ...grpc.CallOption) (*ResponseSeq, error) {
	out := new(ResponseSeq)
	err := c.cc.Invoke(ctx, "/dialog.Stickers/RemoveStickerCollection", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stickersClient) LoadStickerCollection(ctx context.Context, in *RequestLoadStickerCollection, opts ...grpc.CallOption) (*ResponseLoadStickerCollection, error) {
	out := new(ResponseLoadStickerCollection)
	err := c.cc.Invoke(ctx, "/dialog.Stickers/LoadStickerCollection", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StickersServer is the server API for Stickers service.
type StickersServer interface {
	LoadOwnStickers(context.Context, *RequestLoadOwnStickers) (*ResponseLoadOwnStickers, error)
	LoadAcesssibleStickers(context.Context, *RequestLoadAcesssibleStickers) (*ResponseLoadAcesssibleStickers, error)
	AddStickerPackReference(context.Context, *RequestAddStickerPackReference) (*ResponseSeq, error)
	RemoveStickerPackReference(context.Context, *RequestRemoveStickerPackReference) (*ResponseSeq, error)
	AddStickerCollection(context.Context, *RequestAddStickerCollection) (*ResponseSeq, error)
	RemoveStickerCollection(context.Context, *RequestRemoveStickerCollection) (*ResponseSeq, error)
	LoadStickerCollection(context.Context, *RequestLoadStickerCollection) (*ResponseLoadStickerCollection, error)
}

// UnimplementedStickersServer can be embedded to have forward compatible implementations.
type UnimplementedStickersServer struct {
}

func (*UnimplementedStickersServer) LoadOwnStickers(ctx context.Context, req *RequestLoadOwnStickers) (*ResponseLoadOwnStickers, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoadOwnStickers not implemented")
}
func (*UnimplementedStickersServer) LoadAcesssibleStickers(ctx context.Context, req *RequestLoadAcesssibleStickers) (*ResponseLoadAcesssibleStickers, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoadAcesssibleStickers not implemented")
}
func (*UnimplementedStickersServer) AddStickerPackReference(ctx context.Context, req *RequestAddStickerPackReference) (*ResponseSeq, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddStickerPackReference not implemented")
}
func (*UnimplementedStickersServer) RemoveStickerPackReference(ctx context.Context, req *RequestRemoveStickerPackReference) (*ResponseSeq, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveStickerPackReference not implemented")
}
func (*UnimplementedStickersServer) AddStickerCollection(ctx context.Context, req *RequestAddStickerCollection) (*ResponseSeq, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddStickerCollection not implemented")
}
func (*UnimplementedStickersServer) RemoveStickerCollection(ctx context.Context, req *RequestRemoveStickerCollection) (*ResponseSeq, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveStickerCollection not implemented")
}
func (*UnimplementedStickersServer) LoadStickerCollection(ctx context.Context, req *RequestLoadStickerCollection) (*ResponseLoadStickerCollection, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoadStickerCollection not implemented")
}

func RegisterStickersServer(s *grpc.Server, srv StickersServer) {
	s.RegisterService(&_Stickers_serviceDesc, srv)
}

func _Stickers_LoadOwnStickers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestLoadOwnStickers)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StickersServer).LoadOwnStickers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dialog.Stickers/LoadOwnStickers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StickersServer).LoadOwnStickers(ctx, req.(*RequestLoadOwnStickers))
	}
	return interceptor(ctx, in, info, handler)
}

func _Stickers_LoadAcesssibleStickers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestLoadAcesssibleStickers)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StickersServer).LoadAcesssibleStickers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dialog.Stickers/LoadAcesssibleStickers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StickersServer).LoadAcesssibleStickers(ctx, req.(*RequestLoadAcesssibleStickers))
	}
	return interceptor(ctx, in, info, handler)
}

func _Stickers_AddStickerPackReference_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestAddStickerPackReference)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StickersServer).AddStickerPackReference(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dialog.Stickers/AddStickerPackReference",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StickersServer).AddStickerPackReference(ctx, req.(*RequestAddStickerPackReference))
	}
	return interceptor(ctx, in, info, handler)
}

func _Stickers_RemoveStickerPackReference_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestRemoveStickerPackReference)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StickersServer).RemoveStickerPackReference(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dialog.Stickers/RemoveStickerPackReference",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StickersServer).RemoveStickerPackReference(ctx, req.(*RequestRemoveStickerPackReference))
	}
	return interceptor(ctx, in, info, handler)
}

func _Stickers_AddStickerCollection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestAddStickerCollection)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StickersServer).AddStickerCollection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dialog.Stickers/AddStickerCollection",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StickersServer).AddStickerCollection(ctx, req.(*RequestAddStickerCollection))
	}
	return interceptor(ctx, in, info, handler)
}

func _Stickers_RemoveStickerCollection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestRemoveStickerCollection)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StickersServer).RemoveStickerCollection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dialog.Stickers/RemoveStickerCollection",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StickersServer).RemoveStickerCollection(ctx, req.(*RequestRemoveStickerCollection))
	}
	return interceptor(ctx, in, info, handler)
}

func _Stickers_LoadStickerCollection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestLoadStickerCollection)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StickersServer).LoadStickerCollection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dialog.Stickers/LoadStickerCollection",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StickersServer).LoadStickerCollection(ctx, req.(*RequestLoadStickerCollection))
	}
	return interceptor(ctx, in, info, handler)
}

var _Stickers_serviceDesc = grpc.ServiceDesc{
	ServiceName: "dialog.Stickers",
	HandlerType: (*StickersServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "LoadOwnStickers",
			Handler:    _Stickers_LoadOwnStickers_Handler,
		},
		{
			MethodName: "LoadAcesssibleStickers",
			Handler:    _Stickers_LoadAcesssibleStickers_Handler,
		},
		{
			MethodName: "AddStickerPackReference",
			Handler:    _Stickers_AddStickerPackReference_Handler,
		},
		{
			MethodName: "RemoveStickerPackReference",
			Handler:    _Stickers_RemoveStickerPackReference_Handler,
		},
		{
			MethodName: "AddStickerCollection",
			Handler:    _Stickers_AddStickerCollection_Handler,
		},
		{
			MethodName: "RemoveStickerCollection",
			Handler:    _Stickers_RemoveStickerCollection_Handler,
		},
		{
			MethodName: "LoadStickerCollection",
			Handler:    _Stickers_LoadStickerCollection_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "stickers.proto",
}

func (m *StickerDescriptor) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StickerDescriptor) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StickerDescriptor) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AnimatedStickerJson != nil {
		{
			size, err := m.AnimatedStickerJson.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintStickers(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if m.Image_256 != nil {
		{
			size, err := m.Image_256.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintStickers(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.Image_512 != nil {
		{
			size, err := m.Image_512.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintStickers(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.Image_128 != nil {
		{
			size, err := m.Image_128.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintStickers(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Emoji != nil {
		{
			size, err := m.Emoji.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintStickers(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintStickers(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *StickerCollection) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StickerCollection) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StickerCollection) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Clock != 0 {
		i = encodeVarintStickers(dAtA, i, uint64(m.Clock))
		i--
		dAtA[i] = 0x28
	}
	if m.OwnedByMe != nil {
		{
			size, err := m.OwnedByMe.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintStickers(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if len(m.Stickers) > 0 {
		for iNdEx := len(m.Stickers) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Stickers[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintStickers(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.Title != nil {
		{
			size, err := m.Title.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintStickers(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintStickers(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ResponseStickersResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResponseStickersResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ResponseStickersResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.PrevClock != 0 {
		i = encodeVarintStickers(dAtA, i, uint64(m.PrevClock))
		i--
		dAtA[i] = 0x30
	}
	if m.Clock != 0 {
		i = encodeVarintStickers(dAtA, i, uint64(m.Clock))
		i--
		dAtA[i] = 0x28
	}
	if len(m.RemovedCollections) > 0 {
		for iNdEx := len(m.RemovedCollections) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.RemovedCollections[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintStickers(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.State) > 0 {
		i -= len(m.State)
		copy(dAtA[i:], m.State)
		i = encodeVarintStickers(dAtA, i, uint64(len(m.State)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Seq != 0 {
		i = encodeVarintStickers(dAtA, i, uint64(m.Seq))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Collections) > 0 {
		for iNdEx := len(m.Collections) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Collections[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintStickers(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *RequestLoadOwnStickers) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestLoadOwnStickers) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RequestLoadOwnStickers) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.FromClock != 0 {
		i = encodeVarintStickers(dAtA, i, uint64(m.FromClock))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ResponseLoadOwnStickers) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResponseLoadOwnStickers) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ResponseLoadOwnStickers) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.PrevClock != 0 {
		i = encodeVarintStickers(dAtA, i, uint64(m.PrevClock))
		i--
		dAtA[i] = 0x20
	}
	if m.Clock != 0 {
		i = encodeVarintStickers(dAtA, i, uint64(m.Clock))
		i--
		dAtA[i] = 0x18
	}
	if len(m.RemovedCollections) > 0 {
		for iNdEx := len(m.RemovedCollections) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.RemovedCollections[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintStickers(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.OwnStickers) > 0 {
		for iNdEx := len(m.OwnStickers) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.OwnStickers[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintStickers(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *RequestLoadAcesssibleStickers) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestLoadAcesssibleStickers) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RequestLoadAcesssibleStickers) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.FromClock != 0 {
		i = encodeVarintStickers(dAtA, i, uint64(m.FromClock))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ResponseLoadAcesssibleStickers) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResponseLoadAcesssibleStickers) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ResponseLoadAcesssibleStickers) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.PrevClock != 0 {
		i = encodeVarintStickers(dAtA, i, uint64(m.PrevClock))
		i--
		dAtA[i] = 0x20
	}
	if m.Clock != 0 {
		i = encodeVarintStickers(dAtA, i, uint64(m.Clock))
		i--
		dAtA[i] = 0x18
	}
	if len(m.RemovedCollections) > 0 {
		for iNdEx := len(m.RemovedCollections) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.RemovedCollections[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintStickers(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.AccessibleStickers) > 0 {
		for iNdEx := len(m.AccessibleStickers) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.AccessibleStickers[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintStickers(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *RequestAddStickerPackReference) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestAddStickerPackReference) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RequestAddStickerPackReference) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SourceStickerPack != 0 {
		i = encodeVarintStickers(dAtA, i, uint64(m.SourceStickerPack))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *RequestRemoveStickerPackReference) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestRemoveStickerPackReference) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RequestRemoveStickerPackReference) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SourceStickerPack != 0 {
		i = encodeVarintStickers(dAtA, i, uint64(m.SourceStickerPack))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *UpdateStickerCollectionsChanged) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateStickerCollectionsChanged) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateStickerCollectionsChanged) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.UpdatedCollections) > 0 {
		for iNdEx := len(m.UpdatedCollections) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.UpdatedCollections[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintStickers(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *UpdateStickerPackRemoved) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateStickerPackRemoved) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateStickerPackRemoved) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.PackId != 0 {
		i = encodeVarintStickers(dAtA, i, uint64(m.PackId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *UpdateStickerPackAdded) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateStickerPackAdded) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateStickerPackAdded) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pack != nil {
		{
			size, err := m.Pack.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintStickers(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RequestAddStickerCollection) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestAddStickerCollection) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RequestAddStickerCollection) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintStickers(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RequestRemoveStickerCollection) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestRemoveStickerCollection) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RequestRemoveStickerCollection) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintStickers(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *RequestLoadStickerCollection) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestLoadStickerCollection) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RequestLoadStickerCollection) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintStickers(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ResponseLoadStickerCollection) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResponseLoadStickerCollection) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ResponseLoadStickerCollection) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Collection != nil {
		{
			size, err := m.Collection.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintStickers(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintStickers(dAtA []byte, offset int, v uint64) int {
	offset -= sovStickers(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *StickerDescriptor) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovStickers(uint64(m.Id))
	}
	if m.Emoji != nil {
		l = m.Emoji.Size()
		n += 1 + l + sovStickers(uint64(l))
	}
	if m.Image_128 != nil {
		l = m.Image_128.Size()
		n += 1 + l + sovStickers(uint64(l))
	}
	if m.Image_512 != nil {
		l = m.Image_512.Size()
		n += 1 + l + sovStickers(uint64(l))
	}
	if m.Image_256 != nil {
		l = m.Image_256.Size()
		n += 1 + l + sovStickers(uint64(l))
	}
	if m.AnimatedStickerJson != nil {
		l = m.AnimatedStickerJson.Size()
		n += 1 + l + sovStickers(uint64(l))
	}
	return n
}

func (m *StickerCollection) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovStickers(uint64(m.Id))
	}
	if m.Title != nil {
		l = m.Title.Size()
		n += 1 + l + sovStickers(uint64(l))
	}
	if len(m.Stickers) > 0 {
		for _, e := range m.Stickers {
			l = e.Size()
			n += 1 + l + sovStickers(uint64(l))
		}
	}
	if m.OwnedByMe != nil {
		l = m.OwnedByMe.Size()
		n += 1 + l + sovStickers(uint64(l))
	}
	if m.Clock != 0 {
		n += 1 + sovStickers(uint64(m.Clock))
	}
	return n
}

func (m *ResponseStickersResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Collections) > 0 {
		for _, e := range m.Collections {
			l = e.Size()
			n += 1 + l + sovStickers(uint64(l))
		}
	}
	if m.Seq != 0 {
		n += 1 + sovStickers(uint64(m.Seq))
	}
	l = len(m.State)
	if l > 0 {
		n += 1 + l + sovStickers(uint64(l))
	}
	if len(m.RemovedCollections) > 0 {
		for _, e := range m.RemovedCollections {
			l = e.Size()
			n += 1 + l + sovStickers(uint64(l))
		}
	}
	if m.Clock != 0 {
		n += 1 + sovStickers(uint64(m.Clock))
	}
	if m.PrevClock != 0 {
		n += 1 + sovStickers(uint64(m.PrevClock))
	}
	return n
}

func (m *RequestLoadOwnStickers) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.FromClock != 0 {
		n += 1 + sovStickers(uint64(m.FromClock))
	}
	return n
}

func (m *ResponseLoadOwnStickers) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.OwnStickers) > 0 {
		for _, e := range m.OwnStickers {
			l = e.Size()
			n += 1 + l + sovStickers(uint64(l))
		}
	}
	if len(m.RemovedCollections) > 0 {
		for _, e := range m.RemovedCollections {
			l = e.Size()
			n += 1 + l + sovStickers(uint64(l))
		}
	}
	if m.Clock != 0 {
		n += 1 + sovStickers(uint64(m.Clock))
	}
	if m.PrevClock != 0 {
		n += 1 + sovStickers(uint64(m.PrevClock))
	}
	return n
}

func (m *RequestLoadAcesssibleStickers) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.FromClock != 0 {
		n += 1 + sovStickers(uint64(m.FromClock))
	}
	return n
}

func (m *ResponseLoadAcesssibleStickers) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.AccessibleStickers) > 0 {
		for _, e := range m.AccessibleStickers {
			l = e.Size()
			n += 1 + l + sovStickers(uint64(l))
		}
	}
	if len(m.RemovedCollections) > 0 {
		for _, e := range m.RemovedCollections {
			l = e.Size()
			n += 1 + l + sovStickers(uint64(l))
		}
	}
	if m.Clock != 0 {
		n += 1 + sovStickers(uint64(m.Clock))
	}
	if m.PrevClock != 0 {
		n += 1 + sovStickers(uint64(m.PrevClock))
	}
	return n
}

func (m *RequestAddStickerPackReference) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SourceStickerPack != 0 {
		n += 1 + sovStickers(uint64(m.SourceStickerPack))
	}
	return n
}

func (m *RequestRemoveStickerPackReference) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SourceStickerPack != 0 {
		n += 1 + sovStickers(uint64(m.SourceStickerPack))
	}
	return n
}

func (m *UpdateStickerCollectionsChanged) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.UpdatedCollections) > 0 {
		for _, e := range m.UpdatedCollections {
			l = e.Size()
			n += 1 + l + sovStickers(uint64(l))
		}
	}
	return n
}

func (m *UpdateStickerPackRemoved) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PackId != 0 {
		n += 1 + sovStickers(uint64(m.PackId))
	}
	return n
}

func (m *UpdateStickerPackAdded) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pack != nil {
		l = m.Pack.Size()
		n += 1 + l + sovStickers(uint64(l))
	}
	return n
}

func (m *RequestAddStickerCollection) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovStickers(uint64(l))
	}
	return n
}

func (m *RequestRemoveStickerCollection) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovStickers(uint64(m.Id))
	}
	return n
}

func (m *RequestLoadStickerCollection) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovStickers(uint64(m.Id))
	}
	return n
}

func (m *ResponseLoadStickerCollection) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Collection != nil {
		l = m.Collection.Size()
		n += 1 + l + sovStickers(uint64(l))
	}
	return n
}

func sovStickers(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozStickers(x uint64) (n int) {
	return sovStickers(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *StickerDescriptor) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&StickerDescriptor{`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`Emoji:` + strings.Replace(fmt.Sprintf("%v", this.Emoji), "StringValue", "types.StringValue", 1) + `,`,
		`Image_128:` + strings.Replace(fmt.Sprintf("%v", this.Image_128), "ImageLocation", "ImageLocation", 1) + `,`,
		`Image_512:` + strings.Replace(fmt.Sprintf("%v", this.Image_512), "ImageLocation", "ImageLocation", 1) + `,`,
		`Image_256:` + strings.Replace(fmt.Sprintf("%v", this.Image_256), "ImageLocation", "ImageLocation", 1) + `,`,
		`AnimatedStickerJson:` + strings.Replace(fmt.Sprintf("%v", this.AnimatedStickerJson), "StringValue", "types.StringValue", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *StickerCollection) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForStickers := "[]*StickerDescriptor{"
	for _, f := range this.Stickers {
		repeatedStringForStickers += strings.Replace(f.String(), "StickerDescriptor", "StickerDescriptor", 1) + ","
	}
	repeatedStringForStickers += "}"
	s := strings.Join([]string{`&StickerCollection{`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`Title:` + strings.Replace(fmt.Sprintf("%v", this.Title), "StringValue", "types.StringValue", 1) + `,`,
		`Stickers:` + repeatedStringForStickers + `,`,
		`OwnedByMe:` + strings.Replace(fmt.Sprintf("%v", this.OwnedByMe), "BoolValue", "types.BoolValue", 1) + `,`,
		`Clock:` + fmt.Sprintf("%v", this.Clock) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ResponseStickersResponse) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForCollections := "[]*StickerCollection{"
	for _, f := range this.Collections {
		repeatedStringForCollections += strings.Replace(f.String(), "StickerCollection", "StickerCollection", 1) + ","
	}
	repeatedStringForCollections += "}"
	repeatedStringForRemovedCollections := "[]*StickerCollection{"
	for _, f := range this.RemovedCollections {
		repeatedStringForRemovedCollections += strings.Replace(f.String(), "StickerCollection", "StickerCollection", 1) + ","
	}
	repeatedStringForRemovedCollections += "}"
	s := strings.Join([]string{`&ResponseStickersResponse{`,
		`Collections:` + repeatedStringForCollections + `,`,
		`Seq:` + fmt.Sprintf("%v", this.Seq) + `,`,
		`State:` + fmt.Sprintf("%v", this.State) + `,`,
		`RemovedCollections:` + repeatedStringForRemovedCollections + `,`,
		`Clock:` + fmt.Sprintf("%v", this.Clock) + `,`,
		`PrevClock:` + fmt.Sprintf("%v", this.PrevClock) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RequestLoadOwnStickers) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RequestLoadOwnStickers{`,
		`FromClock:` + fmt.Sprintf("%v", this.FromClock) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ResponseLoadOwnStickers) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForOwnStickers := "[]*StickerCollection{"
	for _, f := range this.OwnStickers {
		repeatedStringForOwnStickers += strings.Replace(f.String(), "StickerCollection", "StickerCollection", 1) + ","
	}
	repeatedStringForOwnStickers += "}"
	repeatedStringForRemovedCollections := "[]*StickerCollection{"
	for _, f := range this.RemovedCollections {
		repeatedStringForRemovedCollections += strings.Replace(f.String(), "StickerCollection", "StickerCollection", 1) + ","
	}
	repeatedStringForRemovedCollections += "}"
	s := strings.Join([]string{`&ResponseLoadOwnStickers{`,
		`OwnStickers:` + repeatedStringForOwnStickers + `,`,
		`RemovedCollections:` + repeatedStringForRemovedCollections + `,`,
		`Clock:` + fmt.Sprintf("%v", this.Clock) + `,`,
		`PrevClock:` + fmt.Sprintf("%v", this.PrevClock) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RequestLoadAcesssibleStickers) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RequestLoadAcesssibleStickers{`,
		`FromClock:` + fmt.Sprintf("%v", this.FromClock) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ResponseLoadAcesssibleStickers) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForAccessibleStickers := "[]*StickerCollection{"
	for _, f := range this.AccessibleStickers {
		repeatedStringForAccessibleStickers += strings.Replace(f.String(), "StickerCollection", "StickerCollection", 1) + ","
	}
	repeatedStringForAccessibleStickers += "}"
	repeatedStringForRemovedCollections := "[]*StickerCollection{"
	for _, f := range this.RemovedCollections {
		repeatedStringForRemovedCollections += strings.Replace(f.String(), "StickerCollection", "StickerCollection", 1) + ","
	}
	repeatedStringForRemovedCollections += "}"
	s := strings.Join([]string{`&ResponseLoadAcesssibleStickers{`,
		`AccessibleStickers:` + repeatedStringForAccessibleStickers + `,`,
		`RemovedCollections:` + repeatedStringForRemovedCollections + `,`,
		`Clock:` + fmt.Sprintf("%v", this.Clock) + `,`,
		`PrevClock:` + fmt.Sprintf("%v", this.PrevClock) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RequestAddStickerPackReference) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RequestAddStickerPackReference{`,
		`SourceStickerPack:` + fmt.Sprintf("%v", this.SourceStickerPack) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RequestRemoveStickerPackReference) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RequestRemoveStickerPackReference{`,
		`SourceStickerPack:` + fmt.Sprintf("%v", this.SourceStickerPack) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateStickerCollectionsChanged) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForUpdatedCollections := "[]*StickerCollection{"
	for _, f := range this.UpdatedCollections {
		repeatedStringForUpdatedCollections += strings.Replace(f.String(), "StickerCollection", "StickerCollection", 1) + ","
	}
	repeatedStringForUpdatedCollections += "}"
	s := strings.Join([]string{`&UpdateStickerCollectionsChanged{`,
		`UpdatedCollections:` + repeatedStringForUpdatedCollections + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateStickerPackRemoved) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateStickerPackRemoved{`,
		`PackId:` + fmt.Sprintf("%v", this.PackId) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateStickerPackAdded) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateStickerPackAdded{`,
		`Pack:` + strings.Replace(this.Pack.String(), "StickerCollection", "StickerCollection", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RequestAddStickerCollection) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RequestAddStickerCollection{`,
		`Title:` + fmt.Sprintf("%v", this.Title) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RequestRemoveStickerCollection) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RequestRemoveStickerCollection{`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RequestLoadStickerCollection) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RequestLoadStickerCollection{`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ResponseLoadStickerCollection) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ResponseLoadStickerCollection{`,
		`Collection:` + strings.Replace(this.Collection.String(), "StickerCollection", "StickerCollection", 1) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringStickers(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *StickerDescriptor) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStickers
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StickerDescriptor: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StickerDescriptor: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStickers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Emoji", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStickers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStickers
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStickers
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Emoji == nil {
				m.Emoji = &types.StringValue{}
			}
			if err := m.Emoji.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Image_128", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStickers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStickers
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStickers
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Image_128 == nil {
				m.Image_128 = &ImageLocation{}
			}
			if err := m.Image_128.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Image_512", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStickers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStickers
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStickers
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Image_512 == nil {
				m.Image_512 = &ImageLocation{}
			}
			if err := m.Image_512.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Image_256", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStickers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStickers
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStickers
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Image_256 == nil {
				m.Image_256 = &ImageLocation{}
			}
			if err := m.Image_256.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AnimatedStickerJson", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStickers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStickers
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStickers
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AnimatedStickerJson == nil {
				m.AnimatedStickerJson = &types.StringValue{}
			}
			if err := m.AnimatedStickerJson.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStickers(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthStickers
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthStickers
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StickerCollection) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStickers
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StickerCollection: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StickerCollection: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStickers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStickers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStickers
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStickers
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Title == nil {
				m.Title = &types.StringValue{}
			}
			if err := m.Title.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stickers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStickers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStickers
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStickers
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Stickers = append(m.Stickers, &StickerDescriptor{})
			if err := m.Stickers[len(m.Stickers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OwnedByMe", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStickers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStickers
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStickers
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.OwnedByMe == nil {
				m.OwnedByMe = &types.BoolValue{}
			}
			if err := m.OwnedByMe.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Clock", wireType)
			}
			m.Clock = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStickers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Clock |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipStickers(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthStickers
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthStickers
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResponseStickersResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStickers
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResponseStickersResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResponseStickersResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Collections", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStickers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStickers
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStickers
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Collections = append(m.Collections, &StickerCollection{})
			if err := m.Collections[len(m.Collections)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Seq", wireType)
			}
			m.Seq = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStickers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Seq |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStickers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthStickers
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthStickers
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.State = append(m.State[:0], dAtA[iNdEx:postIndex]...)
			if m.State == nil {
				m.State = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RemovedCollections", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStickers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStickers
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStickers
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RemovedCollections = append(m.RemovedCollections, &StickerCollection{})
			if err := m.RemovedCollections[len(m.RemovedCollections)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Clock", wireType)
			}
			m.Clock = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStickers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Clock |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrevClock", wireType)
			}
			m.PrevClock = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStickers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PrevClock |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipStickers(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthStickers
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthStickers
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestLoadOwnStickers) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStickers
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestLoadOwnStickers: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestLoadOwnStickers: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromClock", wireType)
			}
			m.FromClock = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStickers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FromClock |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipStickers(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthStickers
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthStickers
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResponseLoadOwnStickers) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStickers
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResponseLoadOwnStickers: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResponseLoadOwnStickers: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OwnStickers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStickers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStickers
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStickers
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OwnStickers = append(m.OwnStickers, &StickerCollection{})
			if err := m.OwnStickers[len(m.OwnStickers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RemovedCollections", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStickers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStickers
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStickers
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RemovedCollections = append(m.RemovedCollections, &StickerCollection{})
			if err := m.RemovedCollections[len(m.RemovedCollections)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Clock", wireType)
			}
			m.Clock = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStickers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Clock |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrevClock", wireType)
			}
			m.PrevClock = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStickers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PrevClock |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipStickers(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthStickers
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthStickers
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestLoadAcesssibleStickers) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStickers
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestLoadAcesssibleStickers: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestLoadAcesssibleStickers: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromClock", wireType)
			}
			m.FromClock = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStickers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FromClock |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipStickers(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthStickers
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthStickers
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResponseLoadAcesssibleStickers) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStickers
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResponseLoadAcesssibleStickers: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResponseLoadAcesssibleStickers: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccessibleStickers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStickers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStickers
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStickers
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AccessibleStickers = append(m.AccessibleStickers, &StickerCollection{})
			if err := m.AccessibleStickers[len(m.AccessibleStickers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RemovedCollections", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStickers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStickers
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStickers
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RemovedCollections = append(m.RemovedCollections, &StickerCollection{})
			if err := m.RemovedCollections[len(m.RemovedCollections)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Clock", wireType)
			}
			m.Clock = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStickers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Clock |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrevClock", wireType)
			}
			m.PrevClock = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStickers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PrevClock |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipStickers(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthStickers
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthStickers
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestAddStickerPackReference) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStickers
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestAddStickerPackReference: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestAddStickerPackReference: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourceStickerPack", wireType)
			}
			m.SourceStickerPack = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStickers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SourceStickerPack |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipStickers(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthStickers
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthStickers
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestRemoveStickerPackReference) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStickers
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestRemoveStickerPackReference: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestRemoveStickerPackReference: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourceStickerPack", wireType)
			}
			m.SourceStickerPack = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStickers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SourceStickerPack |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipStickers(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthStickers
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthStickers
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateStickerCollectionsChanged) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStickers
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateStickerCollectionsChanged: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateStickerCollectionsChanged: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatedCollections", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStickers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStickers
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStickers
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UpdatedCollections = append(m.UpdatedCollections, &StickerCollection{})
			if err := m.UpdatedCollections[len(m.UpdatedCollections)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStickers(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthStickers
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthStickers
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateStickerPackRemoved) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStickers
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateStickerPackRemoved: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateStickerPackRemoved: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PackId", wireType)
			}
			m.PackId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStickers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PackId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipStickers(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthStickers
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthStickers
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateStickerPackAdded) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStickers
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateStickerPackAdded: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateStickerPackAdded: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pack", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStickers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStickers
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStickers
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pack == nil {
				m.Pack = &StickerCollection{}
			}
			if err := m.Pack.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStickers(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthStickers
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthStickers
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestAddStickerCollection) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStickers
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestAddStickerCollection: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestAddStickerCollection: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStickers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStickers
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStickers
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStickers(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthStickers
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthStickers
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestRemoveStickerCollection) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStickers
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestRemoveStickerCollection: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestRemoveStickerCollection: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStickers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipStickers(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthStickers
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthStickers
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestLoadStickerCollection) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStickers
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestLoadStickerCollection: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestLoadStickerCollection: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStickers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipStickers(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthStickers
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthStickers
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResponseLoadStickerCollection) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStickers
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResponseLoadStickerCollection: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResponseLoadStickerCollection: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Collection", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStickers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStickers
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStickers
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Collection == nil {
				m.Collection = &StickerCollection{}
			}
			if err := m.Collection.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStickers(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthStickers
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthStickers
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipStickers(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowStickers
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowStickers
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowStickers
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthStickers
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupStickers
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthStickers
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthStickers        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowStickers          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupStickers = fmt.Errorf("proto: unexpected end of group")
)
