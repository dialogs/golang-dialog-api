// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: authentication.proto

package dialog

import (
	bytes "bytes"
	context "context"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	types "github.com/gogo/protobuf/types"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strconv "strconv"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type PhoneActivationType int32

const (
	PHONEACTIVATIONTYPE_UNKNOWN  PhoneActivationType = 0
	PHONEACTIVATIONTYPE_CODE     PhoneActivationType = 1
	PHONEACTIVATIONTYPE_PASSWORD PhoneActivationType = 2
)

var PhoneActivationType_name = map[int32]string{
	0: "PHONEACTIVATIONTYPE_UNKNOWN",
	1: "PHONEACTIVATIONTYPE_CODE",
	2: "PHONEACTIVATIONTYPE_PASSWORD",
}

var PhoneActivationType_value = map[string]int32{
	"PHONEACTIVATIONTYPE_UNKNOWN":  0,
	"PHONEACTIVATIONTYPE_CODE":     1,
	"PHONEACTIVATIONTYPE_PASSWORD": 2,
}

func (PhoneActivationType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_d0dbc99083440df2, []int{0}
}

type EmailActivationType int32

const (
	EMAILACTIVATIONTYPE_UNKNOWN  EmailActivationType = 0
	EMAILACTIVATIONTYPE_CODE     EmailActivationType = 1
	EMAILACTIVATIONTYPE_OAUTH2   EmailActivationType = 2
	EMAILACTIVATIONTYPE_PASSWORD EmailActivationType = 3
)

var EmailActivationType_name = map[int32]string{
	0: "EMAILACTIVATIONTYPE_UNKNOWN",
	1: "EMAILACTIVATIONTYPE_CODE",
	2: "EMAILACTIVATIONTYPE_OAUTH2",
	3: "EMAILACTIVATIONTYPE_PASSWORD",
}

var EmailActivationType_value = map[string]int32{
	"EMAILACTIVATIONTYPE_UNKNOWN":  0,
	"EMAILACTIVATIONTYPE_CODE":     1,
	"EMAILACTIVATIONTYPE_OAUTH2":   2,
	"EMAILACTIVATIONTYPE_PASSWORD": 3,
}

func (EmailActivationType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_d0dbc99083440df2, []int{1}
}

type AuthExtraInfoType int32

const (
	NONE_EXTRA_INFO      AuthExtraInfoType = 0
	NEED_CHANGE_PASSWORD AuthExtraInfoType = 1
)

var AuthExtraInfoType_name = map[int32]string{
	0: "NONE_EXTRA_INFO",
	1: "NEED_CHANGE_PASSWORD",
}

var AuthExtraInfoType_value = map[string]int32{
	"NONE_EXTRA_INFO":      0,
	"NEED_CHANGE_PASSWORD": 1,
}

func (AuthExtraInfoType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_d0dbc99083440df2, []int{2}
}

/// Holder of session
type AuthHolder int32

const (
	AUTHHOLDER_UNKNOWN     AuthHolder = 0
	AUTHHOLDER_THISDEVICE  AuthHolder = 1
	AUTHHOLDER_OTHERDEVICE AuthHolder = 2
)

var AuthHolder_name = map[int32]string{
	0: "AUTHHOLDER_UNKNOWN",
	1: "AUTHHOLDER_THISDEVICE",
	2: "AUTHHOLDER_OTHERDEVICE",
}

var AuthHolder_value = map[string]int32{
	"AUTHHOLDER_UNKNOWN":     0,
	"AUTHHOLDER_THISDEVICE":  1,
	"AUTHHOLDER_OTHERDEVICE": 2,
}

func (AuthHolder) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_d0dbc99083440df2, []int{3}
}

// Start Phone Activation
type RequestStartPhoneAuth struct {
	PhoneNumber int64 `protobuf:"varint,1,opt,name=phone_number,json=phoneNumber,proto3" json:"phone_number,omitempty"`
	//* Application id, choose it by yourself and hold during authorization process *
	AppId int32 `protobuf:"varint,2,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty"`
	//* Deprecated field - keep it empty *
	ApiKey string `protobuf:"bytes,3,opt,name=api_key,json=apiKey,proto3" json:"api_key,omitempty"`
	//* Deprecated field - keep it empty *
	DeviceHash []byte `protobuf:"bytes,4,opt,name=device_hash,json=deviceHash,proto3" json:"device_hash,omitempty"`
	//* Some title, choose it by yourself and hold during authorization process *
	DeviceTitle string `protobuf:"bytes,5,opt,name=device_title,json=deviceTitle,proto3" json:"device_title,omitempty"`
	//* Your timezone *
	TimeZone *types.StringValue `protobuf:"bytes,6,opt,name=time_zone,json=timeZone,proto3" json:"time_zone,omitempty"`
	//* First language from this array will be used for some notifications from server *
	PreferredLanguages []string `protobuf:"bytes,7,rep,name=preferred_languages,json=preferredLanguages,proto3" json:"preferred_languages,omitempty"`
}

func (m *RequestStartPhoneAuth) Reset()      { *m = RequestStartPhoneAuth{} }
func (*RequestStartPhoneAuth) ProtoMessage() {}
func (*RequestStartPhoneAuth) Descriptor() ([]byte, []int) {
	return fileDescriptor_d0dbc99083440df2, []int{0}
}
func (m *RequestStartPhoneAuth) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RequestStartPhoneAuth) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RequestStartPhoneAuth.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RequestStartPhoneAuth) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RequestStartPhoneAuth.Merge(m, src)
}
func (m *RequestStartPhoneAuth) XXX_Size() int {
	return m.Size()
}
func (m *RequestStartPhoneAuth) XXX_DiscardUnknown() {
	xxx_messageInfo_RequestStartPhoneAuth.DiscardUnknown(m)
}

var xxx_messageInfo_RequestStartPhoneAuth proto.InternalMessageInfo

func (m *RequestStartPhoneAuth) GetPhoneNumber() int64 {
	if m != nil {
		return m.PhoneNumber
	}
	return 0
}

func (m *RequestStartPhoneAuth) GetAppId() int32 {
	if m != nil {
		return m.AppId
	}
	return 0
}

func (m *RequestStartPhoneAuth) GetApiKey() string {
	if m != nil {
		return m.ApiKey
	}
	return ""
}

func (m *RequestStartPhoneAuth) GetDeviceHash() []byte {
	if m != nil {
		return m.DeviceHash
	}
	return nil
}

func (m *RequestStartPhoneAuth) GetDeviceTitle() string {
	if m != nil {
		return m.DeviceTitle
	}
	return ""
}

func (m *RequestStartPhoneAuth) GetTimeZone() *types.StringValue {
	if m != nil {
		return m.TimeZone
	}
	return nil
}

func (m *RequestStartPhoneAuth) GetPreferredLanguages() []string {
	if m != nil {
		return m.PreferredLanguages
	}
	return nil
}

type ResponseStartPhoneAuth struct {
	//* Hash of authorization transaction *
	TransactionHash string `protobuf:"bytes,1,opt,name=transaction_hash,json=transactionHash,proto3" json:"transaction_hash,omitempty"`
	IsRegistered    bool   `protobuf:"varint,2,opt,name=is_registered,json=isRegistered,proto3" json:"is_registered,omitempty"`
	//* Code or password - call ValidateCode if code *
	ActivationType PhoneActivationType `protobuf:"varint,3,opt,name=activation_type,json=activationType,proto3,enum=dialog.PhoneActivationType" json:"activation_type,omitempty"`
}

func (m *ResponseStartPhoneAuth) Reset()      { *m = ResponseStartPhoneAuth{} }
func (*ResponseStartPhoneAuth) ProtoMessage() {}
func (*ResponseStartPhoneAuth) Descriptor() ([]byte, []int) {
	return fileDescriptor_d0dbc99083440df2, []int{1}
}
func (m *ResponseStartPhoneAuth) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ResponseStartPhoneAuth) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ResponseStartPhoneAuth.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ResponseStartPhoneAuth) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResponseStartPhoneAuth.Merge(m, src)
}
func (m *ResponseStartPhoneAuth) XXX_Size() int {
	return m.Size()
}
func (m *ResponseStartPhoneAuth) XXX_DiscardUnknown() {
	xxx_messageInfo_ResponseStartPhoneAuth.DiscardUnknown(m)
}

var xxx_messageInfo_ResponseStartPhoneAuth proto.InternalMessageInfo

func (m *ResponseStartPhoneAuth) GetTransactionHash() string {
	if m != nil {
		return m.TransactionHash
	}
	return ""
}

func (m *ResponseStartPhoneAuth) GetIsRegistered() bool {
	if m != nil {
		return m.IsRegistered
	}
	return false
}

func (m *ResponseStartPhoneAuth) GetActivationType() PhoneActivationType {
	if m != nil {
		return m.ActivationType
	}
	return PHONEACTIVATIONTYPE_UNKNOWN
}

// Dial phone and dictate auth code
type RequestSendCodeByPhoneCall struct {
	/// Hash from ResponseStartPhoneAuth
	TransactionHash string `protobuf:"bytes,1,opt,name=transaction_hash,json=transactionHash,proto3" json:"transaction_hash,omitempty"`
}

func (m *RequestSendCodeByPhoneCall) Reset()      { *m = RequestSendCodeByPhoneCall{} }
func (*RequestSendCodeByPhoneCall) ProtoMessage() {}
func (*RequestSendCodeByPhoneCall) Descriptor() ([]byte, []int) {
	return fileDescriptor_d0dbc99083440df2, []int{2}
}
func (m *RequestSendCodeByPhoneCall) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RequestSendCodeByPhoneCall) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RequestSendCodeByPhoneCall.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RequestSendCodeByPhoneCall) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RequestSendCodeByPhoneCall.Merge(m, src)
}
func (m *RequestSendCodeByPhoneCall) XXX_Size() int {
	return m.Size()
}
func (m *RequestSendCodeByPhoneCall) XXX_DiscardUnknown() {
	xxx_messageInfo_RequestSendCodeByPhoneCall.DiscardUnknown(m)
}

var xxx_messageInfo_RequestSendCodeByPhoneCall proto.InternalMessageInfo

func (m *RequestSendCodeByPhoneCall) GetTransactionHash() string {
	if m != nil {
		return m.TransactionHash
	}
	return ""
}

// Start EMail Activation
type RequestStartEmailAuth struct {
	Email string `protobuf:"bytes,1,opt,name=email,proto3" json:"email,omitempty"`
	//* Application id, choose it by yourself and hold during authorization process *
	AppId int32 `protobuf:"varint,2,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty"`
	//* Deprecated field - keep it empty *
	ApiKey string `protobuf:"bytes,3,opt,name=api_key,json=apiKey,proto3" json:"api_key,omitempty"`
	//* Deprecated field - keep it empty *
	DeviceHash []byte `protobuf:"bytes,4,opt,name=device_hash,json=deviceHash,proto3" json:"device_hash,omitempty"`
	//* Some title, choose it by yourself and hold during authorization process *
	DeviceTitle string `protobuf:"bytes,5,opt,name=device_title,json=deviceTitle,proto3" json:"device_title,omitempty"`
	//* Your timezone *
	TimeZone *types.StringValue `protobuf:"bytes,6,opt,name=time_zone,json=timeZone,proto3" json:"time_zone,omitempty"`
	//* First language from this array will be used for some notifications from server *
	PreferredLanguages []string `protobuf:"bytes,7,rep,name=preferred_languages,json=preferredLanguages,proto3" json:"preferred_languages,omitempty"`
}

func (m *RequestStartEmailAuth) Reset()      { *m = RequestStartEmailAuth{} }
func (*RequestStartEmailAuth) ProtoMessage() {}
func (*RequestStartEmailAuth) Descriptor() ([]byte, []int) {
	return fileDescriptor_d0dbc99083440df2, []int{3}
}
func (m *RequestStartEmailAuth) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RequestStartEmailAuth) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RequestStartEmailAuth.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RequestStartEmailAuth) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RequestStartEmailAuth.Merge(m, src)
}
func (m *RequestStartEmailAuth) XXX_Size() int {
	return m.Size()
}
func (m *RequestStartEmailAuth) XXX_DiscardUnknown() {
	xxx_messageInfo_RequestStartEmailAuth.DiscardUnknown(m)
}

var xxx_messageInfo_RequestStartEmailAuth proto.InternalMessageInfo

func (m *RequestStartEmailAuth) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *RequestStartEmailAuth) GetAppId() int32 {
	if m != nil {
		return m.AppId
	}
	return 0
}

func (m *RequestStartEmailAuth) GetApiKey() string {
	if m != nil {
		return m.ApiKey
	}
	return ""
}

func (m *RequestStartEmailAuth) GetDeviceHash() []byte {
	if m != nil {
		return m.DeviceHash
	}
	return nil
}

func (m *RequestStartEmailAuth) GetDeviceTitle() string {
	if m != nil {
		return m.DeviceTitle
	}
	return ""
}

func (m *RequestStartEmailAuth) GetTimeZone() *types.StringValue {
	if m != nil {
		return m.TimeZone
	}
	return nil
}

func (m *RequestStartEmailAuth) GetPreferredLanguages() []string {
	if m != nil {
		return m.PreferredLanguages
	}
	return nil
}

type ResponseStartEmailAuth struct {
	//* Hash of authorization transaction *
	TransactionHash string `protobuf:"bytes,1,opt,name=transaction_hash,json=transactionHash,proto3" json:"transaction_hash,omitempty"`
	IsRegistered    bool   `protobuf:"varint,2,opt,name=is_registered,json=isRegistered,proto3" json:"is_registered,omitempty"`
	//* Code or password - call ValidateCode if code *
	ActivationType EmailActivationType `protobuf:"varint,3,opt,name=activation_type,json=activationType,proto3,enum=dialog.EmailActivationType" json:"activation_type,omitempty"`
}

func (m *ResponseStartEmailAuth) Reset()      { *m = ResponseStartEmailAuth{} }
func (*ResponseStartEmailAuth) ProtoMessage() {}
func (*ResponseStartEmailAuth) Descriptor() ([]byte, []int) {
	return fileDescriptor_d0dbc99083440df2, []int{4}
}
func (m *ResponseStartEmailAuth) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ResponseStartEmailAuth) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ResponseStartEmailAuth.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ResponseStartEmailAuth) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResponseStartEmailAuth.Merge(m, src)
}
func (m *ResponseStartEmailAuth) XXX_Size() int {
	return m.Size()
}
func (m *ResponseStartEmailAuth) XXX_DiscardUnknown() {
	xxx_messageInfo_ResponseStartEmailAuth.DiscardUnknown(m)
}

var xxx_messageInfo_ResponseStartEmailAuth proto.InternalMessageInfo

func (m *ResponseStartEmailAuth) GetTransactionHash() string {
	if m != nil {
		return m.TransactionHash
	}
	return ""
}

func (m *ResponseStartEmailAuth) GetIsRegistered() bool {
	if m != nil {
		return m.IsRegistered
	}
	return false
}

func (m *ResponseStartEmailAuth) GetActivationType() EmailActivationType {
	if m != nil {
		return m.ActivationType
	}
	return EMAILACTIVATIONTYPE_UNKNOWN
}

// Starting Anonymous login - deprecated
type RequestStartAnonymousAuth struct {
	Name               string             `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	AppId              int32              `protobuf:"varint,2,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty"`
	ApiKey             string             `protobuf:"bytes,3,opt,name=api_key,json=apiKey,proto3" json:"api_key,omitempty"`
	DeviceHash         []byte             `protobuf:"bytes,4,opt,name=device_hash,json=deviceHash,proto3" json:"device_hash,omitempty"`
	DeviceTitle        string             `protobuf:"bytes,5,opt,name=device_title,json=deviceTitle,proto3" json:"device_title,omitempty"`
	TimeZone           *types.StringValue `protobuf:"bytes,6,opt,name=time_zone,json=timeZone,proto3" json:"time_zone,omitempty"`
	PreferredLanguages []string           `protobuf:"bytes,7,rep,name=preferred_languages,json=preferredLanguages,proto3" json:"preferred_languages,omitempty"`
}

func (m *RequestStartAnonymousAuth) Reset()      { *m = RequestStartAnonymousAuth{} }
func (*RequestStartAnonymousAuth) ProtoMessage() {}
func (*RequestStartAnonymousAuth) Descriptor() ([]byte, []int) {
	return fileDescriptor_d0dbc99083440df2, []int{5}
}
func (m *RequestStartAnonymousAuth) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RequestStartAnonymousAuth) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RequestStartAnonymousAuth.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RequestStartAnonymousAuth) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RequestStartAnonymousAuth.Merge(m, src)
}
func (m *RequestStartAnonymousAuth) XXX_Size() int {
	return m.Size()
}
func (m *RequestStartAnonymousAuth) XXX_DiscardUnknown() {
	xxx_messageInfo_RequestStartAnonymousAuth.DiscardUnknown(m)
}

var xxx_messageInfo_RequestStartAnonymousAuth proto.InternalMessageInfo

func (m *RequestStartAnonymousAuth) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *RequestStartAnonymousAuth) GetAppId() int32 {
	if m != nil {
		return m.AppId
	}
	return 0
}

func (m *RequestStartAnonymousAuth) GetApiKey() string {
	if m != nil {
		return m.ApiKey
	}
	return ""
}

func (m *RequestStartAnonymousAuth) GetDeviceHash() []byte {
	if m != nil {
		return m.DeviceHash
	}
	return nil
}

func (m *RequestStartAnonymousAuth) GetDeviceTitle() string {
	if m != nil {
		return m.DeviceTitle
	}
	return ""
}

func (m *RequestStartAnonymousAuth) GetTimeZone() *types.StringValue {
	if m != nil {
		return m.TimeZone
	}
	return nil
}

func (m *RequestStartAnonymousAuth) GetPreferredLanguages() []string {
	if m != nil {
		return m.PreferredLanguages
	}
	return nil
}

// Starting token-based login - to authorize bot
type RequestStartTokenAuth struct {
	//* Token received from BotFather *
	Token string `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	//* Application id, choose it by yourself and hold during authorization process *
	AppId int32 `protobuf:"varint,2,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty"`
	//* Deprecated field - keep it empty *
	ApiKey string `protobuf:"bytes,3,opt,name=api_key,json=apiKey,proto3" json:"api_key,omitempty"`
	//* Deprecated field - keep it empty *
	DeviceHash []byte `protobuf:"bytes,4,opt,name=device_hash,json=deviceHash,proto3" json:"device_hash,omitempty"`
	//* Some title, choose it by yourself and hold during authorization process *
	DeviceTitle string `protobuf:"bytes,5,opt,name=device_title,json=deviceTitle,proto3" json:"device_title,omitempty"`
	//* Your timezone *
	TimeZone *types.StringValue `protobuf:"bytes,6,opt,name=time_zone,json=timeZone,proto3" json:"time_zone,omitempty"`
	//* First language from this array will be used for some notifications from server *
	PreferredLanguages []string `protobuf:"bytes,7,rep,name=preferred_languages,json=preferredLanguages,proto3" json:"preferred_languages,omitempty"`
}

func (m *RequestStartTokenAuth) Reset()      { *m = RequestStartTokenAuth{} }
func (*RequestStartTokenAuth) ProtoMessage() {}
func (*RequestStartTokenAuth) Descriptor() ([]byte, []int) {
	return fileDescriptor_d0dbc99083440df2, []int{6}
}
func (m *RequestStartTokenAuth) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RequestStartTokenAuth) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RequestStartTokenAuth.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RequestStartTokenAuth) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RequestStartTokenAuth.Merge(m, src)
}
func (m *RequestStartTokenAuth) XXX_Size() int {
	return m.Size()
}
func (m *RequestStartTokenAuth) XXX_DiscardUnknown() {
	xxx_messageInfo_RequestStartTokenAuth.DiscardUnknown(m)
}

var xxx_messageInfo_RequestStartTokenAuth proto.InternalMessageInfo

func (m *RequestStartTokenAuth) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func (m *RequestStartTokenAuth) GetAppId() int32 {
	if m != nil {
		return m.AppId
	}
	return 0
}

func (m *RequestStartTokenAuth) GetApiKey() string {
	if m != nil {
		return m.ApiKey
	}
	return ""
}

func (m *RequestStartTokenAuth) GetDeviceHash() []byte {
	if m != nil {
		return m.DeviceHash
	}
	return nil
}

func (m *RequestStartTokenAuth) GetDeviceTitle() string {
	if m != nil {
		return m.DeviceTitle
	}
	return ""
}

func (m *RequestStartTokenAuth) GetTimeZone() *types.StringValue {
	if m != nil {
		return m.TimeZone
	}
	return nil
}

func (m *RequestStartTokenAuth) GetPreferredLanguages() []string {
	if m != nil {
		return m.PreferredLanguages
	}
	return nil
}

// Starting Login Authentication
type RequestStartUsernameAuth struct {
	Username string `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
	//* Application id, choose it by yourself and hold during authorization process *
	AppId int32 `protobuf:"varint,2,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty"`
	//* Deprecated field - keep it empty *
	ApiKey string `protobuf:"bytes,3,opt,name=api_key,json=apiKey,proto3" json:"api_key,omitempty"`
	//* Deprecated field - keep it empty *
	DeviceHash []byte `protobuf:"bytes,4,opt,name=device_hash,json=deviceHash,proto3" json:"device_hash,omitempty"`
	//* Some title, choose it by yourself and hold during authorization process *
	DeviceTitle string             `protobuf:"bytes,5,opt,name=device_title,json=deviceTitle,proto3" json:"device_title,omitempty"`
	TimeZone    *types.StringValue `protobuf:"bytes,6,opt,name=time_zone,json=timeZone,proto3" json:"time_zone,omitempty"`
	//* First language from this array will be used for some notifications from server *
	PreferredLanguages []string `protobuf:"bytes,7,rep,name=preferred_languages,json=preferredLanguages,proto3" json:"preferred_languages,omitempty"`
}

func (m *RequestStartUsernameAuth) Reset()      { *m = RequestStartUsernameAuth{} }
func (*RequestStartUsernameAuth) ProtoMessage() {}
func (*RequestStartUsernameAuth) Descriptor() ([]byte, []int) {
	return fileDescriptor_d0dbc99083440df2, []int{7}
}
func (m *RequestStartUsernameAuth) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RequestStartUsernameAuth) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RequestStartUsernameAuth.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RequestStartUsernameAuth) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RequestStartUsernameAuth.Merge(m, src)
}
func (m *RequestStartUsernameAuth) XXX_Size() int {
	return m.Size()
}
func (m *RequestStartUsernameAuth) XXX_DiscardUnknown() {
	xxx_messageInfo_RequestStartUsernameAuth.DiscardUnknown(m)
}

var xxx_messageInfo_RequestStartUsernameAuth proto.InternalMessageInfo

func (m *RequestStartUsernameAuth) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *RequestStartUsernameAuth) GetAppId() int32 {
	if m != nil {
		return m.AppId
	}
	return 0
}

func (m *RequestStartUsernameAuth) GetApiKey() string {
	if m != nil {
		return m.ApiKey
	}
	return ""
}

func (m *RequestStartUsernameAuth) GetDeviceHash() []byte {
	if m != nil {
		return m.DeviceHash
	}
	return nil
}

func (m *RequestStartUsernameAuth) GetDeviceTitle() string {
	if m != nil {
		return m.DeviceTitle
	}
	return ""
}

func (m *RequestStartUsernameAuth) GetTimeZone() *types.StringValue {
	if m != nil {
		return m.TimeZone
	}
	return nil
}

func (m *RequestStartUsernameAuth) GetPreferredLanguages() []string {
	if m != nil {
		return m.PreferredLanguages
	}
	return nil
}

type ResponseStartUsernameAuth struct {
	//* Hash of authorization transaction *
	TransactionHash string `protobuf:"bytes,1,opt,name=transaction_hash,json=transactionHash,proto3" json:"transaction_hash,omitempty"`
	IsRegistered    bool   `protobuf:"varint,2,opt,name=is_registered,json=isRegistered,proto3" json:"is_registered,omitempty"`
}

func (m *ResponseStartUsernameAuth) Reset()      { *m = ResponseStartUsernameAuth{} }
func (*ResponseStartUsernameAuth) ProtoMessage() {}
func (*ResponseStartUsernameAuth) Descriptor() ([]byte, []int) {
	return fileDescriptor_d0dbc99083440df2, []int{8}
}
func (m *ResponseStartUsernameAuth) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ResponseStartUsernameAuth) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ResponseStartUsernameAuth.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ResponseStartUsernameAuth) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResponseStartUsernameAuth.Merge(m, src)
}
func (m *ResponseStartUsernameAuth) XXX_Size() int {
	return m.Size()
}
func (m *ResponseStartUsernameAuth) XXX_DiscardUnknown() {
	xxx_messageInfo_ResponseStartUsernameAuth.DiscardUnknown(m)
}

var xxx_messageInfo_ResponseStartUsernameAuth proto.InternalMessageInfo

func (m *ResponseStartUsernameAuth) GetTransactionHash() string {
	if m != nil {
		return m.TransactionHash
	}
	return ""
}

func (m *ResponseStartUsernameAuth) GetIsRegistered() bool {
	if m != nil {
		return m.IsRegistered
	}
	return false
}

// Performing user sign in.
type RequestValidateCode struct {
	//* Hash of the authorization transaction *
	TransactionHash string `protobuf:"bytes,1,opt,name=transaction_hash,json=transactionHash,proto3" json:"transaction_hash,omitempty"`
	Code            string `protobuf:"bytes,2,opt,name=code,proto3" json:"code,omitempty"`
}

func (m *RequestValidateCode) Reset()      { *m = RequestValidateCode{} }
func (*RequestValidateCode) ProtoMessage() {}
func (*RequestValidateCode) Descriptor() ([]byte, []int) {
	return fileDescriptor_d0dbc99083440df2, []int{9}
}
func (m *RequestValidateCode) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RequestValidateCode) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RequestValidateCode.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RequestValidateCode) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RequestValidateCode.Merge(m, src)
}
func (m *RequestValidateCode) XXX_Size() int {
	return m.Size()
}
func (m *RequestValidateCode) XXX_DiscardUnknown() {
	xxx_messageInfo_RequestValidateCode.DiscardUnknown(m)
}

var xxx_messageInfo_RequestValidateCode proto.InternalMessageInfo

func (m *RequestValidateCode) GetTransactionHash() string {
	if m != nil {
		return m.TransactionHash
	}
	return ""
}

func (m *RequestValidateCode) GetCode() string {
	if m != nil {
		return m.Code
	}
	return ""
}

// Performs code resend
type RequestResendCode struct {
	//* Hash of the authorization transaction *
	TransactionHash string `protobuf:"bytes,1,opt,name=transaction_hash,json=transactionHash,proto3" json:"transaction_hash,omitempty"`
}

func (m *RequestResendCode) Reset()      { *m = RequestResendCode{} }
func (*RequestResendCode) ProtoMessage() {}
func (*RequestResendCode) Descriptor() ([]byte, []int) {
	return fileDescriptor_d0dbc99083440df2, []int{10}
}
func (m *RequestResendCode) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RequestResendCode) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RequestResendCode.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RequestResendCode) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RequestResendCode.Merge(m, src)
}
func (m *RequestResendCode) XXX_Size() int {
	return m.Size()
}
func (m *RequestResendCode) XXX_DiscardUnknown() {
	xxx_messageInfo_RequestResendCode.DiscardUnknown(m)
}

var xxx_messageInfo_RequestResendCode proto.InternalMessageInfo

func (m *RequestResendCode) GetTransactionHash() string {
	if m != nil {
		return m.TransactionHash
	}
	return ""
}

// Validation of account password
type RequestValidatePassword struct {
	//* Hash of the authorization transaction *
	TransactionHash string `protobuf:"bytes,1,opt,name=transaction_hash,json=transactionHash,proto3" json:"transaction_hash,omitempty"`
	Password        string `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"`
}

func (m *RequestValidatePassword) Reset()      { *m = RequestValidatePassword{} }
func (*RequestValidatePassword) ProtoMessage() {}
func (*RequestValidatePassword) Descriptor() ([]byte, []int) {
	return fileDescriptor_d0dbc99083440df2, []int{11}
}
func (m *RequestValidatePassword) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RequestValidatePassword) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RequestValidatePassword.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RequestValidatePassword) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RequestValidatePassword.Merge(m, src)
}
func (m *RequestValidatePassword) XXX_Size() int {
	return m.Size()
}
func (m *RequestValidatePassword) XXX_DiscardUnknown() {
	xxx_messageInfo_RequestValidatePassword.DiscardUnknown(m)
}

var xxx_messageInfo_RequestValidatePassword proto.InternalMessageInfo

func (m *RequestValidatePassword) GetTransactionHash() string {
	if m != nil {
		return m.TransactionHash
	}
	return ""
}

func (m *RequestValidatePassword) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

// Loading OAuth2 Parameters - deprecated
type RequestGetOAuth2Params struct {
	TransactionHash string `protobuf:"bytes,1,opt,name=transaction_hash,json=transactionHash,proto3" json:"transaction_hash,omitempty"`
	RedirectUrl     string `protobuf:"bytes,2,opt,name=redirect_url,json=redirectUrl,proto3" json:"redirect_url,omitempty"`
}

func (m *RequestGetOAuth2Params) Reset()      { *m = RequestGetOAuth2Params{} }
func (*RequestGetOAuth2Params) ProtoMessage() {}
func (*RequestGetOAuth2Params) Descriptor() ([]byte, []int) {
	return fileDescriptor_d0dbc99083440df2, []int{12}
}
func (m *RequestGetOAuth2Params) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RequestGetOAuth2Params) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RequestGetOAuth2Params.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RequestGetOAuth2Params) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RequestGetOAuth2Params.Merge(m, src)
}
func (m *RequestGetOAuth2Params) XXX_Size() int {
	return m.Size()
}
func (m *RequestGetOAuth2Params) XXX_DiscardUnknown() {
	xxx_messageInfo_RequestGetOAuth2Params.DiscardUnknown(m)
}

var xxx_messageInfo_RequestGetOAuth2Params proto.InternalMessageInfo

func (m *RequestGetOAuth2Params) GetTransactionHash() string {
	if m != nil {
		return m.TransactionHash
	}
	return ""
}

func (m *RequestGetOAuth2Params) GetRedirectUrl() string {
	if m != nil {
		return m.RedirectUrl
	}
	return ""
}

/// Deprecated
type ResponseGetOAuth2Params struct {
	AuthUrl string `protobuf:"bytes,1,opt,name=auth_url,json=authUrl,proto3" json:"auth_url,omitempty"`
}

func (m *ResponseGetOAuth2Params) Reset()      { *m = ResponseGetOAuth2Params{} }
func (*ResponseGetOAuth2Params) ProtoMessage() {}
func (*ResponseGetOAuth2Params) Descriptor() ([]byte, []int) {
	return fileDescriptor_d0dbc99083440df2, []int{13}
}
func (m *ResponseGetOAuth2Params) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ResponseGetOAuth2Params) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ResponseGetOAuth2Params.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ResponseGetOAuth2Params) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResponseGetOAuth2Params.Merge(m, src)
}
func (m *ResponseGetOAuth2Params) XXX_Size() int {
	return m.Size()
}
func (m *ResponseGetOAuth2Params) XXX_DiscardUnknown() {
	xxx_messageInfo_ResponseGetOAuth2Params.DiscardUnknown(m)
}

var xxx_messageInfo_ResponseGetOAuth2Params proto.InternalMessageInfo

func (m *ResponseGetOAuth2Params) GetAuthUrl() string {
	if m != nil {
		return m.AuthUrl
	}
	return ""
}

// Complete OAuth2 Authentication - deprecated
type RequestCompleteOAuth2 struct {
	TransactionHash string `protobuf:"bytes,1,opt,name=transaction_hash,json=transactionHash,proto3" json:"transaction_hash,omitempty"`
	Code            string `protobuf:"bytes,2,opt,name=code,proto3" json:"code,omitempty"`
}

func (m *RequestCompleteOAuth2) Reset()      { *m = RequestCompleteOAuth2{} }
func (*RequestCompleteOAuth2) ProtoMessage() {}
func (*RequestCompleteOAuth2) Descriptor() ([]byte, []int) {
	return fileDescriptor_d0dbc99083440df2, []int{14}
}
func (m *RequestCompleteOAuth2) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RequestCompleteOAuth2) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RequestCompleteOAuth2.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RequestCompleteOAuth2) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RequestCompleteOAuth2.Merge(m, src)
}
func (m *RequestCompleteOAuth2) XXX_Size() int {
	return m.Size()
}
func (m *RequestCompleteOAuth2) XXX_DiscardUnknown() {
	xxx_messageInfo_RequestCompleteOAuth2.DiscardUnknown(m)
}

var xxx_messageInfo_RequestCompleteOAuth2 proto.InternalMessageInfo

func (m *RequestCompleteOAuth2) GetTransactionHash() string {
	if m != nil {
		return m.TransactionHash
	}
	return ""
}

func (m *RequestCompleteOAuth2) GetCode() string {
	if m != nil {
		return m.Code
	}
	return ""
}

// Perform user SignUp
type RequestSignUp struct {
	//* Hash of the authorization transaction *
	TransactionHash string `protobuf:"bytes,1,opt,name=transaction_hash,json=transactionHash,proto3" json:"transaction_hash,omitempty"`
	// Your name
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	/// Use it in case of anonymous authorization (deprecated)
	Sex      Sex                `protobuf:"varint,3,opt,name=sex,proto3,enum=dialog.Sex" json:"sex,omitempty"`
	Password *types.StringValue `protobuf:"bytes,4,opt,name=password,proto3" json:"password,omitempty"`
}

func (m *RequestSignUp) Reset()      { *m = RequestSignUp{} }
func (*RequestSignUp) ProtoMessage() {}
func (*RequestSignUp) Descriptor() ([]byte, []int) {
	return fileDescriptor_d0dbc99083440df2, []int{15}
}
func (m *RequestSignUp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RequestSignUp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RequestSignUp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RequestSignUp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RequestSignUp.Merge(m, src)
}
func (m *RequestSignUp) XXX_Size() int {
	return m.Size()
}
func (m *RequestSignUp) XXX_DiscardUnknown() {
	xxx_messageInfo_RequestSignUp.DiscardUnknown(m)
}

var xxx_messageInfo_RequestSignUp proto.InternalMessageInfo

func (m *RequestSignUp) GetTransactionHash() string {
	if m != nil {
		return m.TransactionHash
	}
	return ""
}

func (m *RequestSignUp) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *RequestSignUp) GetSex() Sex {
	if m != nil {
		return m.Sex
	}
	return SEX_UNKNOWN
}

func (m *RequestSignUp) GetPassword() *types.StringValue {
	if m != nil {
		return m.Password
	}
	return nil
}

// Authentication result
type ResponseAuth struct {
	/// Registered/authorized user
	User *User `protobuf:"bytes,2,opt,name=user,proto3" json:"user,omitempty"`
	/// Config for that user
	Config *Config `protobuf:"bytes,3,opt,name=config,proto3" json:"config,omitempty"`
	/// Hash of config to later usage
	ConfigHash *types.Int64Value   `protobuf:"bytes,4,opt,name=config_hash,json=configHash,proto3" json:"config_hash,omitempty"`
	ExtraInfo  []AuthExtraInfoType `protobuf:"varint,5,rep,packed,name=extra_info,json=extraInfo,proto3,enum=dialog.AuthExtraInfoType" json:"extra_info,omitempty"`
}

func (m *ResponseAuth) Reset()      { *m = ResponseAuth{} }
func (*ResponseAuth) ProtoMessage() {}
func (*ResponseAuth) Descriptor() ([]byte, []int) {
	return fileDescriptor_d0dbc99083440df2, []int{16}
}
func (m *ResponseAuth) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ResponseAuth) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ResponseAuth.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ResponseAuth) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResponseAuth.Merge(m, src)
}
func (m *ResponseAuth) XXX_Size() int {
	return m.Size()
}
func (m *ResponseAuth) XXX_DiscardUnknown() {
	xxx_messageInfo_ResponseAuth.DiscardUnknown(m)
}

var xxx_messageInfo_ResponseAuth proto.InternalMessageInfo

func (m *ResponseAuth) GetUser() *User {
	if m != nil {
		return m.User
	}
	return nil
}

func (m *ResponseAuth) GetConfig() *Config {
	if m != nil {
		return m.Config
	}
	return nil
}

func (m *ResponseAuth) GetConfigHash() *types.Int64Value {
	if m != nil {
		return m.ConfigHash
	}
	return nil
}

func (m *ResponseAuth) GetExtraInfo() []AuthExtraInfoType {
	if m != nil {
		return m.ExtraInfo
	}
	return nil
}

// Authentication session
type AuthSession struct {
	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	/// holder of session. 1 - this device, 2 - other.
	AuthHolder AuthHolder `protobuf:"varint,2,opt,name=auth_holder,json=authHolder,proto3,enum=dialog.AuthHolder" json:"auth_holder,omitempty"`
	/// Application Id that you set during authorization
	AppId       int32  `protobuf:"varint,3,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty"`
	AppTitle    string `protobuf:"bytes,4,opt,name=app_title,json=appTitle,proto3" json:"app_title,omitempty"`
	DeviceTitle string `protobuf:"bytes,5,opt,name=device_title,json=deviceTitle,proto3" json:"device_title,omitempty"`
	/// Time of session creating
	AuthTime int32 `protobuf:"varint,6,opt,name=auth_time,json=authTime,proto3" json:"auth_time,omitempty"`
	/// Two-letter country code of session create
	AuthLocation string             `protobuf:"bytes,7,opt,name=auth_location,json=authLocation,proto3" json:"auth_location,omitempty"`
	Latitude     *types.DoubleValue `protobuf:"bytes,8,opt,name=latitude,proto3" json:"latitude,omitempty"`
	Longitude    *types.DoubleValue `protobuf:"bytes,9,opt,name=longitude,proto3" json:"longitude,omitempty"`
}

func (m *AuthSession) Reset()      { *m = AuthSession{} }
func (*AuthSession) ProtoMessage() {}
func (*AuthSession) Descriptor() ([]byte, []int) {
	return fileDescriptor_d0dbc99083440df2, []int{17}
}
func (m *AuthSession) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AuthSession) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AuthSession.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AuthSession) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AuthSession.Merge(m, src)
}
func (m *AuthSession) XXX_Size() int {
	return m.Size()
}
func (m *AuthSession) XXX_DiscardUnknown() {
	xxx_messageInfo_AuthSession.DiscardUnknown(m)
}

var xxx_messageInfo_AuthSession proto.InternalMessageInfo

func (m *AuthSession) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *AuthSession) GetAuthHolder() AuthHolder {
	if m != nil {
		return m.AuthHolder
	}
	return AUTHHOLDER_UNKNOWN
}

func (m *AuthSession) GetAppId() int32 {
	if m != nil {
		return m.AppId
	}
	return 0
}

func (m *AuthSession) GetAppTitle() string {
	if m != nil {
		return m.AppTitle
	}
	return ""
}

func (m *AuthSession) GetDeviceTitle() string {
	if m != nil {
		return m.DeviceTitle
	}
	return ""
}

func (m *AuthSession) GetAuthTime() int32 {
	if m != nil {
		return m.AuthTime
	}
	return 0
}

func (m *AuthSession) GetAuthLocation() string {
	if m != nil {
		return m.AuthLocation
	}
	return ""
}

func (m *AuthSession) GetLatitude() *types.DoubleValue {
	if m != nil {
		return m.Latitude
	}
	return nil
}

func (m *AuthSession) GetLongitude() *types.DoubleValue {
	if m != nil {
		return m.Longitude
	}
	return nil
}

// Getting of all active user's authentication sessions
type RequestGetAuthSessions struct {
}

func (m *RequestGetAuthSessions) Reset()      { *m = RequestGetAuthSessions{} }
func (*RequestGetAuthSessions) ProtoMessage() {}
func (*RequestGetAuthSessions) Descriptor() ([]byte, []int) {
	return fileDescriptor_d0dbc99083440df2, []int{18}
}
func (m *RequestGetAuthSessions) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RequestGetAuthSessions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RequestGetAuthSessions.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RequestGetAuthSessions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RequestGetAuthSessions.Merge(m, src)
}
func (m *RequestGetAuthSessions) XXX_Size() int {
	return m.Size()
}
func (m *RequestGetAuthSessions) XXX_DiscardUnknown() {
	xxx_messageInfo_RequestGetAuthSessions.DiscardUnknown(m)
}

var xxx_messageInfo_RequestGetAuthSessions proto.InternalMessageInfo

type ResponseGetAuthSessions struct {
	UserAuths []*AuthSession `protobuf:"bytes,1,rep,name=user_auths,json=userAuths,proto3" json:"user_auths,omitempty"`
}

func (m *ResponseGetAuthSessions) Reset()      { *m = ResponseGetAuthSessions{} }
func (*ResponseGetAuthSessions) ProtoMessage() {}
func (*ResponseGetAuthSessions) Descriptor() ([]byte, []int) {
	return fileDescriptor_d0dbc99083440df2, []int{19}
}
func (m *ResponseGetAuthSessions) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ResponseGetAuthSessions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ResponseGetAuthSessions.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ResponseGetAuthSessions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResponseGetAuthSessions.Merge(m, src)
}
func (m *ResponseGetAuthSessions) XXX_Size() int {
	return m.Size()
}
func (m *ResponseGetAuthSessions) XXX_DiscardUnknown() {
	xxx_messageInfo_ResponseGetAuthSessions.DiscardUnknown(m)
}

var xxx_messageInfo_ResponseGetAuthSessions proto.InternalMessageInfo

func (m *ResponseGetAuthSessions) GetUserAuths() []*AuthSession {
	if m != nil {
		return m.UserAuths
	}
	return nil
}

// SignOut on specified user's session
type RequestTerminateSession struct {
	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *RequestTerminateSession) Reset()      { *m = RequestTerminateSession{} }
func (*RequestTerminateSession) ProtoMessage() {}
func (*RequestTerminateSession) Descriptor() ([]byte, []int) {
	return fileDescriptor_d0dbc99083440df2, []int{20}
}
func (m *RequestTerminateSession) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RequestTerminateSession) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RequestTerminateSession.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RequestTerminateSession) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RequestTerminateSession.Merge(m, src)
}
func (m *RequestTerminateSession) XXX_Size() int {
	return m.Size()
}
func (m *RequestTerminateSession) XXX_DiscardUnknown() {
	xxx_messageInfo_RequestTerminateSession.DiscardUnknown(m)
}

var xxx_messageInfo_RequestTerminateSession proto.InternalMessageInfo

func (m *RequestTerminateSession) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

// SignOut on all exept current sessions
type RequestTerminateAllSessions struct {
}

func (m *RequestTerminateAllSessions) Reset()      { *m = RequestTerminateAllSessions{} }
func (*RequestTerminateAllSessions) ProtoMessage() {}
func (*RequestTerminateAllSessions) Descriptor() ([]byte, []int) {
	return fileDescriptor_d0dbc99083440df2, []int{21}
}
func (m *RequestTerminateAllSessions) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RequestTerminateAllSessions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RequestTerminateAllSessions.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RequestTerminateAllSessions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RequestTerminateAllSessions.Merge(m, src)
}
func (m *RequestTerminateAllSessions) XXX_Size() int {
	return m.Size()
}
func (m *RequestTerminateAllSessions) XXX_DiscardUnknown() {
	xxx_messageInfo_RequestTerminateAllSessions.DiscardUnknown(m)
}

var xxx_messageInfo_RequestTerminateAllSessions proto.InternalMessageInfo

// SignOut current session
type RequestSignOut struct {
}

func (m *RequestSignOut) Reset()      { *m = RequestSignOut{} }
func (*RequestSignOut) ProtoMessage() {}
func (*RequestSignOut) Descriptor() ([]byte, []int) {
	return fileDescriptor_d0dbc99083440df2, []int{22}
}
func (m *RequestSignOut) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RequestSignOut) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RequestSignOut.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RequestSignOut) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RequestSignOut.Merge(m, src)
}
func (m *RequestSignOut) XXX_Size() int {
	return m.Size()
}
func (m *RequestSignOut) XXX_DiscardUnknown() {
	xxx_messageInfo_RequestSignOut.DiscardUnknown(m)
}

var xxx_messageInfo_RequestSignOut proto.InternalMessageInfo

//*
// Notification to force client to reload some entities from server
// Just for old clients. Should be ignore.
type ForceReloadField struct {
	// Types that are valid to be assigned to Body:
	//	*ForceReloadField_ForceReloadDialogs
	//	*ForceReloadField_ForceReloadContacts
	//	*ForceReloadField_ForceReloadHistory
	Body isForceReloadField_Body `protobuf_oneof:"body"`
}

func (m *ForceReloadField) Reset()      { *m = ForceReloadField{} }
func (*ForceReloadField) ProtoMessage() {}
func (*ForceReloadField) Descriptor() ([]byte, []int) {
	return fileDescriptor_d0dbc99083440df2, []int{23}
}
func (m *ForceReloadField) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ForceReloadField) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ForceReloadField.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ForceReloadField) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ForceReloadField.Merge(m, src)
}
func (m *ForceReloadField) XXX_Size() int {
	return m.Size()
}
func (m *ForceReloadField) XXX_DiscardUnknown() {
	xxx_messageInfo_ForceReloadField.DiscardUnknown(m)
}

var xxx_messageInfo_ForceReloadField proto.InternalMessageInfo

type isForceReloadField_Body interface {
	isForceReloadField_Body()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type ForceReloadField_ForceReloadDialogs struct {
	ForceReloadDialogs *ForceReloadDialogs `protobuf:"bytes,1,opt,name=forceReloadDialogs,proto3,oneof" json:"forceReloadDialogs,omitempty"`
}
type ForceReloadField_ForceReloadContacts struct {
	ForceReloadContacts *ForceReloadContacts `protobuf:"bytes,2,opt,name=forceReloadContacts,proto3,oneof" json:"forceReloadContacts,omitempty"`
}
type ForceReloadField_ForceReloadHistory struct {
	ForceReloadHistory *ForceReloadHistory `protobuf:"bytes,3,opt,name=forceReloadHistory,proto3,oneof" json:"forceReloadHistory,omitempty"`
}

func (*ForceReloadField_ForceReloadDialogs) isForceReloadField_Body()  {}
func (*ForceReloadField_ForceReloadContacts) isForceReloadField_Body() {}
func (*ForceReloadField_ForceReloadHistory) isForceReloadField_Body()  {}

func (m *ForceReloadField) GetBody() isForceReloadField_Body {
	if m != nil {
		return m.Body
	}
	return nil
}

func (m *ForceReloadField) GetForceReloadDialogs() *ForceReloadDialogs {
	if x, ok := m.GetBody().(*ForceReloadField_ForceReloadDialogs); ok {
		return x.ForceReloadDialogs
	}
	return nil
}

func (m *ForceReloadField) GetForceReloadContacts() *ForceReloadContacts {
	if x, ok := m.GetBody().(*ForceReloadField_ForceReloadContacts); ok {
		return x.ForceReloadContacts
	}
	return nil
}

func (m *ForceReloadField) GetForceReloadHistory() *ForceReloadHistory {
	if x, ok := m.GetBody().(*ForceReloadField_ForceReloadHistory); ok {
		return x.ForceReloadHistory
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*ForceReloadField) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*ForceReloadField_ForceReloadDialogs)(nil),
		(*ForceReloadField_ForceReloadContacts)(nil),
		(*ForceReloadField_ForceReloadHistory)(nil),
	}
}

// Tells the client to clear dialogs and load them again
type ForceReloadDialogs struct {
}

func (m *ForceReloadDialogs) Reset()      { *m = ForceReloadDialogs{} }
func (*ForceReloadDialogs) ProtoMessage() {}
func (*ForceReloadDialogs) Descriptor() ([]byte, []int) {
	return fileDescriptor_d0dbc99083440df2, []int{24}
}
func (m *ForceReloadDialogs) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ForceReloadDialogs) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ForceReloadDialogs.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ForceReloadDialogs) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ForceReloadDialogs.Merge(m, src)
}
func (m *ForceReloadDialogs) XXX_Size() int {
	return m.Size()
}
func (m *ForceReloadDialogs) XXX_DiscardUnknown() {
	xxx_messageInfo_ForceReloadDialogs.DiscardUnknown(m)
}

var xxx_messageInfo_ForceReloadDialogs proto.InternalMessageInfo

// Tells the client to clear contacts and load them again
type ForceReloadContacts struct {
}

func (m *ForceReloadContacts) Reset()      { *m = ForceReloadContacts{} }
func (*ForceReloadContacts) ProtoMessage() {}
func (*ForceReloadContacts) Descriptor() ([]byte, []int) {
	return fileDescriptor_d0dbc99083440df2, []int{25}
}
func (m *ForceReloadContacts) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ForceReloadContacts) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ForceReloadContacts.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ForceReloadContacts) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ForceReloadContacts.Merge(m, src)
}
func (m *ForceReloadContacts) XXX_Size() int {
	return m.Size()
}
func (m *ForceReloadContacts) XXX_DiscardUnknown() {
	xxx_messageInfo_ForceReloadContacts.DiscardUnknown(m)
}

var xxx_messageInfo_ForceReloadContacts proto.InternalMessageInfo

// Tells the client to clear the specified conversation and load it again
// peer the peer whose history should be reloaded
type ForceReloadHistory struct {
	Peer *Peer `protobuf:"bytes,1,opt,name=peer,proto3" json:"peer,omitempty"`
}

func (m *ForceReloadHistory) Reset()      { *m = ForceReloadHistory{} }
func (*ForceReloadHistory) ProtoMessage() {}
func (*ForceReloadHistory) Descriptor() ([]byte, []int) {
	return fileDescriptor_d0dbc99083440df2, []int{26}
}
func (m *ForceReloadHistory) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ForceReloadHistory) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ForceReloadHistory.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ForceReloadHistory) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ForceReloadHistory.Merge(m, src)
}
func (m *ForceReloadHistory) XXX_Size() int {
	return m.Size()
}
func (m *ForceReloadHistory) XXX_DiscardUnknown() {
	xxx_messageInfo_ForceReloadHistory.DiscardUnknown(m)
}

var xxx_messageInfo_ForceReloadHistory proto.InternalMessageInfo

func (m *ForceReloadHistory) GetPeer() *Peer {
	if m != nil {
		return m.Peer
	}
	return nil
}

// This update is sent by the server to force a client to reload its data
type UpdateForceReloadState struct {
	Fields []*ForceReloadField `protobuf:"bytes,1,rep,name=fields,proto3" json:"fields,omitempty"`
}

func (m *UpdateForceReloadState) Reset()      { *m = UpdateForceReloadState{} }
func (*UpdateForceReloadState) ProtoMessage() {}
func (*UpdateForceReloadState) Descriptor() ([]byte, []int) {
	return fileDescriptor_d0dbc99083440df2, []int{27}
}
func (m *UpdateForceReloadState) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateForceReloadState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateForceReloadState.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateForceReloadState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateForceReloadState.Merge(m, src)
}
func (m *UpdateForceReloadState) XXX_Size() int {
	return m.Size()
}
func (m *UpdateForceReloadState) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateForceReloadState.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateForceReloadState proto.InternalMessageInfo

func (m *UpdateForceReloadState) GetFields() []*ForceReloadField {
	if m != nil {
		return m.Fields
	}
	return nil
}

// Performing user signin - deprecated
type RequestSignInObsolete struct {
	PhoneNumber int64  `protobuf:"varint,1,opt,name=phone_number,json=phoneNumber,proto3" json:"phone_number,omitempty"`
	SmsHash     string `protobuf:"bytes,2,opt,name=sms_hash,json=smsHash,proto3" json:"sms_hash,omitempty"`
	SmsCode     string `protobuf:"bytes,3,opt,name=sms_code,json=smsCode,proto3" json:"sms_code,omitempty"`
	DeviceHash  []byte `protobuf:"bytes,5,opt,name=device_hash,json=deviceHash,proto3" json:"device_hash,omitempty"`
	DeviceTitle string `protobuf:"bytes,6,opt,name=device_title,json=deviceTitle,proto3" json:"device_title,omitempty"`
	AppId       int32  `protobuf:"varint,7,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty"`
	AppKey      string `protobuf:"bytes,8,opt,name=app_key,json=appKey,proto3" json:"app_key,omitempty"`
}

func (m *RequestSignInObsolete) Reset()      { *m = RequestSignInObsolete{} }
func (*RequestSignInObsolete) ProtoMessage() {}
func (*RequestSignInObsolete) Descriptor() ([]byte, []int) {
	return fileDescriptor_d0dbc99083440df2, []int{28}
}
func (m *RequestSignInObsolete) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RequestSignInObsolete) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RequestSignInObsolete.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RequestSignInObsolete) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RequestSignInObsolete.Merge(m, src)
}
func (m *RequestSignInObsolete) XXX_Size() int {
	return m.Size()
}
func (m *RequestSignInObsolete) XXX_DiscardUnknown() {
	xxx_messageInfo_RequestSignInObsolete.DiscardUnknown(m)
}

var xxx_messageInfo_RequestSignInObsolete proto.InternalMessageInfo

func (m *RequestSignInObsolete) GetPhoneNumber() int64 {
	if m != nil {
		return m.PhoneNumber
	}
	return 0
}

func (m *RequestSignInObsolete) GetSmsHash() string {
	if m != nil {
		return m.SmsHash
	}
	return ""
}

func (m *RequestSignInObsolete) GetSmsCode() string {
	if m != nil {
		return m.SmsCode
	}
	return ""
}

func (m *RequestSignInObsolete) GetDeviceHash() []byte {
	if m != nil {
		return m.DeviceHash
	}
	return nil
}

func (m *RequestSignInObsolete) GetDeviceTitle() string {
	if m != nil {
		return m.DeviceTitle
	}
	return ""
}

func (m *RequestSignInObsolete) GetAppId() int32 {
	if m != nil {
		return m.AppId
	}
	return 0
}

func (m *RequestSignInObsolete) GetAppKey() string {
	if m != nil {
		return m.AppKey
	}
	return ""
}

// Performing user signup. If user perform signup on already registered user it just override previous
// profile information
type RequestSignUpObsolete struct {
	PhoneNumber int64  `protobuf:"varint,1,opt,name=phone_number,json=phoneNumber,proto3" json:"phone_number,omitempty"`
	SmsHash     string `protobuf:"bytes,2,opt,name=sms_hash,json=smsHash,proto3" json:"sms_hash,omitempty"`
	SmsCode     string `protobuf:"bytes,3,opt,name=sms_code,json=smsCode,proto3" json:"sms_code,omitempty"`
	Name        string `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	DeviceHash  []byte `protobuf:"bytes,7,opt,name=device_hash,json=deviceHash,proto3" json:"device_hash,omitempty"`
	DeviceTitle string `protobuf:"bytes,8,opt,name=device_title,json=deviceTitle,proto3" json:"device_title,omitempty"`
	AppId       int32  `protobuf:"varint,9,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty"`
	AppKey      string `protobuf:"bytes,10,opt,name=app_key,json=appKey,proto3" json:"app_key,omitempty"`
	IsSilent    bool   `protobuf:"varint,11,opt,name=is_silent,json=isSilent,proto3" json:"is_silent,omitempty"`
}

func (m *RequestSignUpObsolete) Reset()      { *m = RequestSignUpObsolete{} }
func (*RequestSignUpObsolete) ProtoMessage() {}
func (*RequestSignUpObsolete) Descriptor() ([]byte, []int) {
	return fileDescriptor_d0dbc99083440df2, []int{29}
}
func (m *RequestSignUpObsolete) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RequestSignUpObsolete) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RequestSignUpObsolete.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RequestSignUpObsolete) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RequestSignUpObsolete.Merge(m, src)
}
func (m *RequestSignUpObsolete) XXX_Size() int {
	return m.Size()
}
func (m *RequestSignUpObsolete) XXX_DiscardUnknown() {
	xxx_messageInfo_RequestSignUpObsolete.DiscardUnknown(m)
}

var xxx_messageInfo_RequestSignUpObsolete proto.InternalMessageInfo

func (m *RequestSignUpObsolete) GetPhoneNumber() int64 {
	if m != nil {
		return m.PhoneNumber
	}
	return 0
}

func (m *RequestSignUpObsolete) GetSmsHash() string {
	if m != nil {
		return m.SmsHash
	}
	return ""
}

func (m *RequestSignUpObsolete) GetSmsCode() string {
	if m != nil {
		return m.SmsCode
	}
	return ""
}

func (m *RequestSignUpObsolete) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *RequestSignUpObsolete) GetDeviceHash() []byte {
	if m != nil {
		return m.DeviceHash
	}
	return nil
}

func (m *RequestSignUpObsolete) GetDeviceTitle() string {
	if m != nil {
		return m.DeviceTitle
	}
	return ""
}

func (m *RequestSignUpObsolete) GetAppId() int32 {
	if m != nil {
		return m.AppId
	}
	return 0
}

func (m *RequestSignUpObsolete) GetAppKey() string {
	if m != nil {
		return m.AppKey
	}
	return ""
}

func (m *RequestSignUpObsolete) GetIsSilent() bool {
	if m != nil {
		return m.IsSilent
	}
	return false
}

// Sending SMS with activation code
type RequestSendAuthCodeObsolete struct {
	PhoneNumber int64  `protobuf:"varint,1,opt,name=phone_number,json=phoneNumber,proto3" json:"phone_number,omitempty"`
	AppId       int32  `protobuf:"varint,2,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty"`
	ApiKey      string `protobuf:"bytes,3,opt,name=api_key,json=apiKey,proto3" json:"api_key,omitempty"`
}

func (m *RequestSendAuthCodeObsolete) Reset()      { *m = RequestSendAuthCodeObsolete{} }
func (*RequestSendAuthCodeObsolete) ProtoMessage() {}
func (*RequestSendAuthCodeObsolete) Descriptor() ([]byte, []int) {
	return fileDescriptor_d0dbc99083440df2, []int{30}
}
func (m *RequestSendAuthCodeObsolete) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RequestSendAuthCodeObsolete) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RequestSendAuthCodeObsolete.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RequestSendAuthCodeObsolete) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RequestSendAuthCodeObsolete.Merge(m, src)
}
func (m *RequestSendAuthCodeObsolete) XXX_Size() int {
	return m.Size()
}
func (m *RequestSendAuthCodeObsolete) XXX_DiscardUnknown() {
	xxx_messageInfo_RequestSendAuthCodeObsolete.DiscardUnknown(m)
}

var xxx_messageInfo_RequestSendAuthCodeObsolete proto.InternalMessageInfo

func (m *RequestSendAuthCodeObsolete) GetPhoneNumber() int64 {
	if m != nil {
		return m.PhoneNumber
	}
	return 0
}

func (m *RequestSendAuthCodeObsolete) GetAppId() int32 {
	if m != nil {
		return m.AppId
	}
	return 0
}

func (m *RequestSendAuthCodeObsolete) GetApiKey() string {
	if m != nil {
		return m.ApiKey
	}
	return ""
}

type ResponseSendAuthCodeObsolete struct {
	SmsHash      string `protobuf:"bytes,1,opt,name=sms_hash,json=smsHash,proto3" json:"sms_hash,omitempty"`
	IsRegistered bool   `protobuf:"varint,2,opt,name=is_registered,json=isRegistered,proto3" json:"is_registered,omitempty"`
}

func (m *ResponseSendAuthCodeObsolete) Reset()      { *m = ResponseSendAuthCodeObsolete{} }
func (*ResponseSendAuthCodeObsolete) ProtoMessage() {}
func (*ResponseSendAuthCodeObsolete) Descriptor() ([]byte, []int) {
	return fileDescriptor_d0dbc99083440df2, []int{31}
}
func (m *ResponseSendAuthCodeObsolete) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ResponseSendAuthCodeObsolete) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ResponseSendAuthCodeObsolete.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ResponseSendAuthCodeObsolete) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResponseSendAuthCodeObsolete.Merge(m, src)
}
func (m *ResponseSendAuthCodeObsolete) XXX_Size() int {
	return m.Size()
}
func (m *ResponseSendAuthCodeObsolete) XXX_DiscardUnknown() {
	xxx_messageInfo_ResponseSendAuthCodeObsolete.DiscardUnknown(m)
}

var xxx_messageInfo_ResponseSendAuthCodeObsolete proto.InternalMessageInfo

func (m *ResponseSendAuthCodeObsolete) GetSmsHash() string {
	if m != nil {
		return m.SmsHash
	}
	return ""
}

func (m *ResponseSendAuthCodeObsolete) GetIsRegistered() bool {
	if m != nil {
		return m.IsRegistered
	}
	return false
}

// Requesting Phone activation
type RequestSendAuthCallObsolete struct {
	PhoneNumber int64  `protobuf:"varint,1,opt,name=phone_number,json=phoneNumber,proto3" json:"phone_number,omitempty"`
	SmsHash     string `protobuf:"bytes,2,opt,name=sms_hash,json=smsHash,proto3" json:"sms_hash,omitempty"`
	AppId       int32  `protobuf:"varint,3,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty"`
	ApiKey      string `protobuf:"bytes,4,opt,name=api_key,json=apiKey,proto3" json:"api_key,omitempty"`
}

func (m *RequestSendAuthCallObsolete) Reset()      { *m = RequestSendAuthCallObsolete{} }
func (*RequestSendAuthCallObsolete) ProtoMessage() {}
func (*RequestSendAuthCallObsolete) Descriptor() ([]byte, []int) {
	return fileDescriptor_d0dbc99083440df2, []int{32}
}
func (m *RequestSendAuthCallObsolete) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RequestSendAuthCallObsolete) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RequestSendAuthCallObsolete.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RequestSendAuthCallObsolete) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RequestSendAuthCallObsolete.Merge(m, src)
}
func (m *RequestSendAuthCallObsolete) XXX_Size() int {
	return m.Size()
}
func (m *RequestSendAuthCallObsolete) XXX_DiscardUnknown() {
	xxx_messageInfo_RequestSendAuthCallObsolete.DiscardUnknown(m)
}

var xxx_messageInfo_RequestSendAuthCallObsolete proto.InternalMessageInfo

func (m *RequestSendAuthCallObsolete) GetPhoneNumber() int64 {
	if m != nil {
		return m.PhoneNumber
	}
	return 0
}

func (m *RequestSendAuthCallObsolete) GetSmsHash() string {
	if m != nil {
		return m.SmsHash
	}
	return ""
}

func (m *RequestSendAuthCallObsolete) GetAppId() int32 {
	if m != nil {
		return m.AppId
	}
	return 0
}

func (m *RequestSendAuthCallObsolete) GetApiKey() string {
	if m != nil {
		return m.ApiKey
	}
	return ""
}

type RequestChangePassword struct {
	OldPassword string `protobuf:"bytes,1,opt,name=old_password,json=oldPassword,proto3" json:"old_password,omitempty"`
	NewPassword string `protobuf:"bytes,2,opt,name=new_password,json=newPassword,proto3" json:"new_password,omitempty"`
}

func (m *RequestChangePassword) Reset()      { *m = RequestChangePassword{} }
func (*RequestChangePassword) ProtoMessage() {}
func (*RequestChangePassword) Descriptor() ([]byte, []int) {
	return fileDescriptor_d0dbc99083440df2, []int{33}
}
func (m *RequestChangePassword) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RequestChangePassword) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RequestChangePassword.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RequestChangePassword) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RequestChangePassword.Merge(m, src)
}
func (m *RequestChangePassword) XXX_Size() int {
	return m.Size()
}
func (m *RequestChangePassword) XXX_DiscardUnknown() {
	xxx_messageInfo_RequestChangePassword.DiscardUnknown(m)
}

var xxx_messageInfo_RequestChangePassword proto.InternalMessageInfo

func (m *RequestChangePassword) GetOldPassword() string {
	if m != nil {
		return m.OldPassword
	}
	return ""
}

func (m *RequestChangePassword) GetNewPassword() string {
	if m != nil {
		return m.NewPassword
	}
	return ""
}

func init() {
	proto.RegisterEnum("dialog.PhoneActivationType", PhoneActivationType_name, PhoneActivationType_value)
	proto.RegisterEnum("dialog.EmailActivationType", EmailActivationType_name, EmailActivationType_value)
	proto.RegisterEnum("dialog.AuthExtraInfoType", AuthExtraInfoType_name, AuthExtraInfoType_value)
	proto.RegisterEnum("dialog.AuthHolder", AuthHolder_name, AuthHolder_value)
	proto.RegisterType((*RequestStartPhoneAuth)(nil), "dialog.RequestStartPhoneAuth")
	proto.RegisterType((*ResponseStartPhoneAuth)(nil), "dialog.ResponseStartPhoneAuth")
	proto.RegisterType((*RequestSendCodeByPhoneCall)(nil), "dialog.RequestSendCodeByPhoneCall")
	proto.RegisterType((*RequestStartEmailAuth)(nil), "dialog.RequestStartEmailAuth")
	proto.RegisterType((*ResponseStartEmailAuth)(nil), "dialog.ResponseStartEmailAuth")
	proto.RegisterType((*RequestStartAnonymousAuth)(nil), "dialog.RequestStartAnonymousAuth")
	proto.RegisterType((*RequestStartTokenAuth)(nil), "dialog.RequestStartTokenAuth")
	proto.RegisterType((*RequestStartUsernameAuth)(nil), "dialog.RequestStartUsernameAuth")
	proto.RegisterType((*ResponseStartUsernameAuth)(nil), "dialog.ResponseStartUsernameAuth")
	proto.RegisterType((*RequestValidateCode)(nil), "dialog.RequestValidateCode")
	proto.RegisterType((*RequestResendCode)(nil), "dialog.RequestResendCode")
	proto.RegisterType((*RequestValidatePassword)(nil), "dialog.RequestValidatePassword")
	proto.RegisterType((*RequestGetOAuth2Params)(nil), "dialog.RequestGetOAuth2Params")
	proto.RegisterType((*ResponseGetOAuth2Params)(nil), "dialog.ResponseGetOAuth2Params")
	proto.RegisterType((*RequestCompleteOAuth2)(nil), "dialog.RequestCompleteOAuth2")
	proto.RegisterType((*RequestSignUp)(nil), "dialog.RequestSignUp")
	proto.RegisterType((*ResponseAuth)(nil), "dialog.ResponseAuth")
	proto.RegisterType((*AuthSession)(nil), "dialog.AuthSession")
	proto.RegisterType((*RequestGetAuthSessions)(nil), "dialog.RequestGetAuthSessions")
	proto.RegisterType((*ResponseGetAuthSessions)(nil), "dialog.ResponseGetAuthSessions")
	proto.RegisterType((*RequestTerminateSession)(nil), "dialog.RequestTerminateSession")
	proto.RegisterType((*RequestTerminateAllSessions)(nil), "dialog.RequestTerminateAllSessions")
	proto.RegisterType((*RequestSignOut)(nil), "dialog.RequestSignOut")
	proto.RegisterType((*ForceReloadField)(nil), "dialog.ForceReloadField")
	proto.RegisterType((*ForceReloadDialogs)(nil), "dialog.ForceReloadDialogs")
	proto.RegisterType((*ForceReloadContacts)(nil), "dialog.ForceReloadContacts")
	proto.RegisterType((*ForceReloadHistory)(nil), "dialog.ForceReloadHistory")
	proto.RegisterType((*UpdateForceReloadState)(nil), "dialog.UpdateForceReloadState")
	proto.RegisterType((*RequestSignInObsolete)(nil), "dialog.RequestSignInObsolete")
	proto.RegisterType((*RequestSignUpObsolete)(nil), "dialog.RequestSignUpObsolete")
	proto.RegisterType((*RequestSendAuthCodeObsolete)(nil), "dialog.RequestSendAuthCodeObsolete")
	proto.RegisterType((*ResponseSendAuthCodeObsolete)(nil), "dialog.ResponseSendAuthCodeObsolete")
	proto.RegisterType((*RequestSendAuthCallObsolete)(nil), "dialog.RequestSendAuthCallObsolete")
	proto.RegisterType((*RequestChangePassword)(nil), "dialog.RequestChangePassword")
}

func init() { proto.RegisterFile("authentication.proto", fileDescriptor_d0dbc99083440df2) }

var fileDescriptor_d0dbc99083440df2 = []byte{
	// 2417 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x5a, 0x5f, 0x6f, 0xdb, 0xd6,
	0x15, 0x37, 0x25, 0x5b, 0x96, 0x8f, 0x1c, 0xc7, 0xa1, 0xff, 0x54, 0x96, 0x1d, 0x45, 0xa5, 0xb3,
	0xd5, 0x51, 0x53, 0x29, 0x51, 0xdb, 0x14, 0xc8, 0x80, 0x05, 0xb2, 0xad, 0x44, 0x42, 0x32, 0xc9,
	0x90, 0x64, 0x77, 0xed, 0x1e, 0x34, 0x5a, 0xbc, 0x96, 0xb9, 0x52, 0x24, 0x47, 0x52, 0x49, 0x3c,
	0x60, 0xc3, 0x50, 0x0c, 0x2b, 0x90, 0x87, 0x22, 0xd8, 0x86, 0x0d, 0xe8, 0x1e, 0x86, 0xbd, 0x0c,
	0x03, 0xf6, 0x09, 0xf6, 0x0d, 0xf6, 0x32, 0x20, 0xc0, 0x5e, 0xfa, 0xb8, 0x28, 0xdb, 0x30, 0xf4,
	0xa9, 0xdf, 0x60, 0xc3, 0xbd, 0xfc, 0x23, 0xf2, 0xea, 0x32, 0x94, 0xdd, 0xa4, 0xdb, 0x43, 0x9e,
	0x2c, 0xde, 0xf3, 0xbb, 0xe7, 0x9c, 0x7b, 0xce, 0x8f, 0xe7, 0xde, 0x73, 0x69, 0x58, 0x16, 0x07,
	0xd6, 0x31, 0x52, 0x2d, 0xb9, 0x2b, 0x5a, 0xb2, 0xa6, 0x16, 0x74, 0x43, 0xb3, 0x34, 0x3e, 0x21,
	0xc9, 0xa2, 0xa2, 0xf5, 0x32, 0xd9, 0x9e, 0xa6, 0xf5, 0x14, 0x54, 0x24, 0xa3, 0x87, 0x83, 0xa3,
	0xe2, 0x03, 0x43, 0xd4, 0x75, 0x64, 0x98, 0x36, 0x2e, 0xb3, 0xe1, 0xc8, 0x45, 0x5d, 0x2e, 0x8a,
	0xaa, 0xaa, 0x59, 0x44, 0x89, 0x2b, 0xbd, 0x20, 0xa1, 0x23, 0x59, 0x95, 0xfd, 0x43, 0x4b, 0x7d,
	0xd9, 0xec, 0x22, 0x45, 0x11, 0x55, 0xa4, 0x0d, 0xdc, 0xc1, 0x94, 0x8e, 0x46, 0x2a, 0x53, 0x03,
	0x73, 0xf4, 0xb0, 0x62, 0x76, 0x45, 0x45, 0xd4, 0x0f, 0x8b, 0xce, 0x5f, 0x7b, 0x58, 0xf8, 0x5d,
	0x1c, 0x56, 0x9a, 0xe8, 0x87, 0x03, 0x64, 0x5a, 0x2d, 0x4b, 0x34, 0xac, 0xbd, 0x63, 0x4d, 0x45,
	0xe5, 0x81, 0x75, 0xcc, 0x5f, 0x83, 0x79, 0x1d, 0x3f, 0x74, 0xd4, 0x41, 0xff, 0x10, 0x19, 0x69,
	0x2e, 0xc7, 0x6d, 0xc5, 0xb7, 0xcf, 0x3d, 0xfa, 0xe2, 0xda, 0x1c, 0xcc, 0xde, 0x97, 0x4d, 0xf9,
	0x50, 0x41, 0xcd, 0x14, 0x81, 0xd4, 0x09, 0x82, 0xdf, 0x84, 0x84, 0xa8, 0xeb, 0x1d, 0x59, 0x4a,
	0xc7, 0x72, 0xdc, 0xd6, 0xcc, 0xf6, 0xfc, 0xa3, 0x2f, 0xae, 0x25, 0x21, 0x71, 0x2c, 0x4b, 0x12,
	0x52, 0x9b, 0x33, 0xa2, 0xae, 0xd7, 0x24, 0xfe, 0x1b, 0x30, 0x2b, 0xea, 0x72, 0xe7, 0x23, 0x74,
	0x92, 0x8e, 0xe7, 0xb8, 0xad, 0x39, 0x0a, 0x95, 0x10, 0x75, 0xf9, 0x2e, 0x3a, 0xe1, 0x0b, 0x90,
	0x92, 0xd0, 0x7d, 0xb9, 0x8b, 0x3a, 0xc7, 0xa2, 0x79, 0x9c, 0x9e, 0xce, 0x71, 0x5b, 0xf3, 0xb4,
	0x71, 0xb0, 0x11, 0x55, 0xd1, 0x24, 0xde, 0x3a, 0x78, 0x4b, 0xb6, 0x14, 0x94, 0x9e, 0x21, 0xba,
	0x69, 0x6f, 0x6d, 0x48, 0x1b, 0x23, 0xf8, 0x2a, 0xcc, 0x59, 0x72, 0x1f, 0x75, 0x7e, 0xa4, 0xa9,
	0x28, 0x9d, 0xc8, 0x71, 0x5b, 0xa9, 0xd2, 0x46, 0xc1, 0x4e, 0x42, 0xc1, 0x4d, 0x52, 0xa1, 0x65,
	0x19, 0xb2, 0xda, 0x3b, 0x10, 0x95, 0x01, 0xa2, 0x95, 0x25, 0xf1, 0xec, 0x0f, 0x35, 0x15, 0xf1,
	0xdf, 0x86, 0x25, 0xdd, 0x40, 0x47, 0xc8, 0x30, 0x90, 0xd4, 0x51, 0x44, 0xb5, 0x37, 0x10, 0x7b,
	0xc8, 0x4c, 0xcf, 0xe6, 0xe2, 0xe3, 0x2e, 0xf0, 0x1e, 0xf2, 0x9e, 0x0b, 0xbc, 0xb9, 0x31, 0xbc,
	0xb5, 0x06, 0xaf, 0xc9, 0xfd, 0x82, 0xa4, 0xf4, 0x0a, 0x3d, 0x43, 0xef, 0x16, 0xee, 0x18, 0x7a,
	0xd7, 0xc9, 0x8a, 0xf0, 0x57, 0x0e, 0x56, 0x9b, 0xc8, 0xd4, 0x35, 0xd5, 0x44, 0x54, 0x8a, 0xae,
	0xc0, 0xa2, 0x65, 0x88, 0xaa, 0x29, 0x76, 0x31, 0x31, 0xec, 0x48, 0xe1, 0x34, 0xcd, 0x35, 0xcf,
	0xfb, 0xc6, 0x49, 0x7c, 0x36, 0xe1, 0x9c, 0x6c, 0x76, 0x0c, 0xd4, 0x93, 0x4d, 0x0b, 0x19, 0xc8,
	0x4e, 0x51, 0xb2, 0x39, 0x2f, 0x9b, 0x4d, 0x6f, 0x8c, 0xdf, 0x85, 0xf3, 0x78, 0xca, 0x7d, 0x42,
	0xbd, 0x8e, 0x75, 0xa2, 0x23, 0x92, 0xa3, 0x85, 0xd2, 0x7a, 0xc1, 0x66, 0x71, 0xc1, 0xb6, 0xed,
	0x61, 0xda, 0x27, 0x3a, 0x6a, 0x2e, 0x88, 0x81, 0xe7, 0x9b, 0x17, 0x87, 0xb7, 0x32, 0x90, 0x1e,
	0x5f, 0x8e, 0xbd, 0x04, 0xc1, 0x84, 0x8c, 0x4b, 0x38, 0xa4, 0x4a, 0x3b, 0x9a, 0x84, 0xb6, 0x4f,
	0x88, 0xda, 0x1d, 0x51, 0x51, 0xf8, 0xf7, 0xc2, 0x96, 0xe4, 0xf2, 0x44, 0x12, 0xd5, 0x1e, 0x32,
	0xc6, 0x16, 0x18, 0x11, 0xc4, 0x5f, 0x50, 0x34, 0xaf, 0xf4, 0x45, 0x59, 0x21, 0x31, 0xdc, 0x84,
	0x19, 0x84, 0x1f, 0x1c, 0x2b, 0x54, 0xba, 0x6c, 0xd9, 0x2b, 0x66, 0x7f, 0x3d, 0xcc, 0x1e, 0x65,
	0xe5, 0xeb, 0x67, 0xb6, 0x6d, 0xfb, 0x2b, 0x31, 0xfb, 0x57, 0x71, 0x58, 0xf3, 0x93, 0xac, 0xac,
	0x6a, 0xea, 0x49, 0x5f, 0x1b, 0x98, 0x64, 0x49, 0xaf, 0xc3, 0xb4, 0x2a, 0xf6, 0x11, 0x9b, 0x67,
	0x44, 0xf4, 0x8a, 0x66, 0x2f, 0x85, 0x66, 0xf4, 0xbb, 0xdf, 0xd6, 0x3e, 0x42, 0xaa, 0xfb, 0xee,
	0x5b, 0xf8, 0x21, 0xe4, 0xdd, 0x27, 0xb2, 0x57, 0x49, 0x79, 0x29, 0x49, 0xf9, 0x6d, 0x1c, 0xd2,
	0xfe, 0xa4, 0xec, 0x9b, 0xc8, 0xc0, 0xef, 0x80, 0xf3, 0xf6, 0x27, 0x07, 0xce, 0x33, 0x3b, 0x35,
	0x9e, 0xf8, 0x55, 0x76, 0x5e, 0x4a, 0x76, 0x1e, 0x71, 0xb8, 0x92, 0xf9, 0x2a, 0x33, 0x95, 0x9e,
	0x17, 0x5a, 0x9c, 0xa3, 0xca, 0xea, 0xa7, 0x1c, 0x2c, 0x39, 0x8e, 0x1d, 0x88, 0x8a, 0x2c, 0x89,
	0x16, 0xc2, 0xa7, 0x86, 0x33, 0x1f, 0x15, 0xf8, 0x1c, 0x4c, 0x77, 0x35, 0x09, 0x11, 0x5f, 0x68,
	0x2e, 0x10, 0x49, 0x44, 0x74, 0x7e, 0x00, 0x17, 0x9c, 0x9f, 0x4d, 0x64, 0x3a, 0x67, 0x98, 0x97,
	0x75, 0x70, 0xf9, 0x8c, 0x83, 0xd7, 0xa8, 0xc5, 0xef, 0x89, 0xa6, 0xf9, 0x40, 0x33, 0xa4, 0xb3,
	0x07, 0x60, 0x0b, 0x92, 0xba, 0xa3, 0x24, 0x18, 0x04, 0x67, 0x82, 0x27, 0x8d, 0x70, 0xee, 0xf7,
	0x64, 0x03, 0x27, 0xbf, 0xef, 0x20, 0xab, 0x81, 0xc9, 0x51, 0xda, 0x13, 0x0d, 0xb1, 0x6f, 0x9e,
	0xdd, 0xb7, 0x6b, 0x30, 0x6f, 0x20, 0x49, 0x36, 0x50, 0xd7, 0xea, 0x0c, 0x0c, 0xc5, 0xf1, 0x8f,
	0x7e, 0xa9, 0x5c, 0xc8, 0xbe, 0xa1, 0x44, 0xf8, 0xd8, 0xc2, 0xf1, 0xb3, 0x99, 0x44, 0xfb, 0xb8,
	0x06, 0x49, 0xdc, 0xb2, 0x11, 0x33, 0x36, 0x7f, 0x67, 0xf1, 0x33, 0xd6, 0x19, 0x41, 0xc9, 0xc7,
	0x9c, 0xb7, 0xa5, 0xec, 0x68, 0x7d, 0x5d, 0x41, 0x16, 0xb2, 0x35, 0xbf, 0x60, 0x52, 0x3a, 0xe0,
	0x49, 0x48, 0xf9, 0x1f, 0x0e, 0xce, 0xb9, 0x05, 0x55, 0xee, 0xa9, 0xfb, 0xfa, 0xd9, 0x5d, 0x71,
	0x4f, 0x2a, 0xb1, 0xf0, 0x93, 0xca, 0x55, 0x88, 0x9b, 0xe8, 0xa1, 0x73, 0x86, 0x4a, 0xb9, 0x67,
	0xa8, 0x16, 0x7a, 0x48, 0xc3, 0x31, 0x8c, 0xbf, 0xed, 0xe3, 0xdb, 0xf4, 0x04, 0x55, 0x2f, 0xf8,
	0x4a, 0x4e, 0xca, 0xc6, 0x3f, 0xc5, 0x60, 0xde, 0xcd, 0x10, 0xa9, 0x53, 0x45, 0x98, 0xc6, 0xfb,
	0x04, 0x59, 0x47, 0xaa, 0x34, 0xef, 0x7a, 0x89, 0x6b, 0x99, 0xeb, 0x66, 0x57, 0xeb, 0xeb, 0x62,
	0xd7, 0x6a, 0x12, 0x20, 0xff, 0x2e, 0x24, 0xba, 0x9a, 0x7a, 0x24, 0xf7, 0xc8, 0xc2, 0x52, 0xa5,
	0x05, 0x77, 0xca, 0x0e, 0x19, 0xa5, 0xd7, 0xe6, 0x80, 0xf9, 0xbb, 0x90, 0xb2, 0x7f, 0x8d, 0xf6,
	0x8d, 0x54, 0x69, 0x7d, 0x6c, 0x85, 0x35, 0xd5, 0xba, 0xf1, 0x0e, 0xb3, 0xac, 0x83, 0x3d, 0x9d,
	0x04, 0xff, 0x0e, 0x00, 0x7a, 0x68, 0x19, 0x62, 0x47, 0x56, 0x8f, 0xb4, 0xf4, 0x4c, 0x2e, 0xbe,
	0xb5, 0x50, 0x5a, 0x73, 0xfd, 0xc0, 0xcb, 0xaa, 0x60, 0x69, 0x4d, 0x3d, 0xd2, 0xf0, 0x91, 0x94,
	0xd6, 0x34, 0x87, 0x5c, 0x69, 0x14, 0x85, 0xff, 0x19, 0x87, 0x14, 0x56, 0xd7, 0x42, 0xa6, 0x29,
	0x6b, 0x2a, 0x7f, 0x11, 0x62, 0xb2, 0x44, 0xf8, 0x31, 0x43, 0x2b, 0x8d, 0xc9, 0x12, 0xbf, 0x0d,
	0x29, 0xf2, 0xae, 0x1c, 0x6b, 0x8a, 0xe4, 0x84, 0x74, 0xa1, 0xc4, 0xfb, 0xfd, 0xaa, 0x12, 0xc9,
	0xd8, 0xd2, 0x44, 0x4f, 0xc4, 0x5f, 0xf6, 0xf6, 0xea, 0x38, 0xcb, 0x8c, 0xb3, 0x59, 0xe7, 0x61,
	0x0e, 0xa3, 0xec, 0x2d, 0x75, 0x9a, 0xb9, 0xfb, 0x8b, 0xba, 0x6e, 0xef, 0xa7, 0xa7, 0xdf, 0x81,
	0xb1, 0x76, 0xbc, 0x0e, 0xbc, 0x91, 0x92, 0x1d, 0x78, 0x66, 0x5c, 0xfb, 0xc0, 0x3a, 0x6e, 0xcb,
	0x7d, 0xc4, 0x5f, 0x87, 0x73, 0x04, 0xab, 0x68, 0xf6, 0x8d, 0x4e, 0x7a, 0x96, 0xb1, 0x61, 0xcc,
	0x63, 0xc8, 0x3d, 0x07, 0x81, 0x99, 0xae, 0x88, 0x96, 0x6c, 0x0d, 0x24, 0x94, 0x4e, 0x86, 0x30,
	0x7d, 0x57, 0x1b, 0x1c, 0x2a, 0x88, 0xc9, 0x74, 0x77, 0x2e, 0x3e, 0x28, 0x28, 0x9a, 0xda, 0xb3,
	0x15, 0xcd, 0x9d, 0x5a, 0xd1, 0x68, 0xb2, 0x70, 0xc3, 0x5f, 0xa2, 0x7d, 0x09, 0x8f, 0x3a, 0x02,
	0x28, 0x81, 0xba, 0xe9, 0x9f, 0xc8, 0x97, 0x00, 0xf0, 0xeb, 0xd2, 0xc1, 0x2b, 0x37, 0xd3, 0x5c,
	0x2e, 0xbe, 0x95, 0x2a, 0x2d, 0xf9, 0xa9, 0xe0, 0x20, 0x9b, 0x73, 0x18, 0x86, 0x07, 0xcc, 0x28,
	0x36, 0x1e, 0x78, 0xbb, 0x5c, 0x1b, 0x19, 0x7d, 0x59, 0x15, 0x2d, 0x34, 0x19, 0x31, 0x23, 0x56,
	0xf1, 0x2d, 0x58, 0xa7, 0xf5, 0x96, 0x15, 0x65, 0xc2, 0x10, 0x14, 0x60, 0xc1, 0x57, 0x51, 0x1b,
	0x03, 0x2b, 0x02, 0xff, 0x49, 0x0c, 0x16, 0x6f, 0x6b, 0x46, 0x17, 0x35, 0x91, 0xa2, 0x89, 0xd2,
	0x6d, 0x19, 0x29, 0x12, 0x7f, 0x0f, 0xf8, 0xa3, 0xd1, 0xd8, 0x2e, 0x09, 0x92, 0x49, 0x96, 0x93,
	0x2a, 0x65, 0xdc, 0xa0, 0xdd, 0x1e, 0x43, 0x54, 0xa7, 0x9a, 0x8c, 0x79, 0x7c, 0x03, 0x96, 0x7c,
	0xa3, 0x3b, 0x9a, 0x6a, 0x89, 0x5d, 0xcb, 0x74, 0x2a, 0xdc, 0x3a, 0x43, 0x9d, 0x0b, 0xa9, 0x4e,
	0x35, 0x59, 0x33, 0x29, 0xf7, 0xaa, 0xb2, 0x69, 0x69, 0xc6, 0x89, 0x53, 0xfe, 0x58, 0xee, 0x39,
	0x08, 0xca, 0x3d, 0x67, 0x74, 0x3b, 0x01, 0xd3, 0x87, 0x9a, 0x74, 0x22, 0x2c, 0x03, 0x3f, 0xbe,
	0x24, 0x61, 0x05, 0x96, 0x18, 0x9e, 0x09, 0x95, 0x00, 0xd8, 0x51, 0x85, 0x8b, 0xb7, 0x8e, 0x9c,
	0x6b, 0x47, 0x5f, 0xf1, 0xde, 0x43, 0xe3, 0x35, 0x86, 0x00, 0x85, 0x0f, 0x60, 0x75, 0x5f, 0xc7,
	0xe7, 0x23, 0x9f, 0xb2, 0x96, 0x25, 0x5a, 0x88, 0xbf, 0x05, 0x89, 0x23, 0x9c, 0x0b, 0x97, 0xab,
	0x69, 0xc6, 0xba, 0x48, 0xb2, 0xc6, 0x0a, 0xbc, 0x3d, 0x4d, 0xf8, 0x57, 0x6c, 0xd4, 0x41, 0xca,
	0x3d, 0xb5, 0xa6, 0x36, 0x0e, 0x4d, 0x0d, 0x6f, 0xfa, 0x7c, 0x91, 0x79, 0x49, 0x1a, 0xdc, 0x5f,
	0x03, 0x77, 0xa4, 0x6f, 0x40, 0xd2, 0xec, 0x9b, 0xf6, 0x46, 0xc1, 0xda, 0xea, 0x67, 0xcd, 0xbe,
	0x49, 0xf6, 0x01, 0x07, 0x48, 0xce, 0x04, 0xf1, 0x10, 0x20, 0x39, 0x78, 0x52, 0x5d, 0xcb, 0xcc,
	0x69, 0xbb, 0x96, 0x44, 0x64, 0xcd, 0x1c, 0xf5, 0x58, 0xb3, 0x11, 0x3d, 0x96, 0x4e, 0x7a, 0xac,
	0x24, 0xbb, 0xc7, 0xd2, 0xef, 0xa2, 0x93, 0x88, 0x37, 0xe8, 0x0f, 0xf1, 0x40, 0xa0, 0xf7, 0xf5,
	0xff, 0xa7, 0x40, 0xbb, 0xc7, 0xa2, 0xe9, 0xf0, 0x63, 0x11, 0x95, 0x8b, 0xd9, 0xd3, 0xe6, 0x22,
	0x79, 0x8a, 0x5c, 0xcc, 0x4d, 0x94, 0x0b, 0x08, 0xcf, 0x05, 0xbf, 0x0e, 0x73, 0xb2, 0xd9, 0x31,
	0x65, 0x05, 0xa9, 0x56, 0x3a, 0x45, 0x1a, 0xb3, 0xa4, 0x6c, 0xb6, 0xc8, 0x73, 0x44, 0xa2, 0xfe,
	0xcc, 0x79, 0x85, 0xb5, 0x85, 0x54, 0x09, 0xd7, 0x78, 0x1c, 0x23, 0x2f, 0x5d, 0xff, 0xd3, 0x8f,
	0x07, 0x11, 0xbe, 0xff, 0x18, 0x36, 0xbc, 0xde, 0x96, 0xe5, 0xfb, 0x9a, 0x8f, 0x39, 0x4e, 0x5b,
	0xe0, 0x72, 0xe5, 0x45, 0xb4, 0xb3, 0x43, 0x46, 0xe8, 0x44, 0x45, 0xf9, 0x0a, 0xa1, 0x9b, 0x98,
	0xea, 0x9b, 0xd4, 0x01, 0x2c, 0x2a, 0xc6, 0xd3, 0x67, 0x8e, 0xf1, 0x6f, 0x7c, 0x0d, 0xd2, 0x31,
	0xf6, 0xc2, 0x6b, 0x5a, 0x8b, 0x30, 0xaf, 0x29, 0x52, 0xc7, 0xeb, 0x07, 0x58, 0x1d, 0x49, 0x4a,
	0x53, 0x24, 0xff, 0x04, 0x15, 0x3d, 0xe8, 0x3c, 0xb7, 0x61, 0x4d, 0xa9, 0xe8, 0xc1, 0xde, 0x44,
	0x5d, 0x42, 0xfe, 0x3e, 0x2c, 0x31, 0x3e, 0x62, 0xf0, 0x97, 0x60, 0x7d, 0xaf, 0xda, 0xa8, 0x57,
	0xca, 0x3b, 0xed, 0xda, 0x41, 0xb9, 0x5d, 0x6b, 0xd4, 0xdb, 0x1f, 0xec, 0x55, 0x3a, 0xfb, 0xf5,
	0xbb, 0xf5, 0xc6, 0xfb, 0xf5, 0xc5, 0x29, 0x7e, 0x03, 0xd2, 0x2c, 0xc0, 0x4e, 0x63, 0xb7, 0xb2,
	0xc8, 0xf1, 0x39, 0xd8, 0x60, 0x49, 0xf7, 0xca, 0xad, 0xd6, 0xfb, 0x8d, 0xe6, 0xee, 0x62, 0x2c,
	0xff, 0x6b, 0x0e, 0x96, 0x18, 0x77, 0xcc, 0xd8, 0x70, 0xe5, 0x3b, 0xe5, 0xda, 0xbd, 0xe7, 0x19,
	0x66, 0x01, 0x1c, 0xc3, 0x59, 0xc8, 0xb0, 0xa4, 0x8d, 0xf2, 0x7e, 0xbb, 0x5a, 0x5a, 0x8c, 0x61,
	0xc7, 0x58, 0x72, 0xcf, 0xb1, 0x78, 0x7e, 0x1b, 0x2e, 0x8c, 0xb5, 0x15, 0xfc, 0x12, 0x9c, 0xaf,
	0x37, 0xea, 0x95, 0x4e, 0xe5, 0xbb, 0xed, 0x66, 0xb9, 0x53, 0xab, 0xdf, 0x6e, 0x2c, 0x4e, 0xf1,
	0x69, 0x58, 0xae, 0x57, 0x2a, 0xbb, 0x9d, 0x9d, 0x6a, 0xb9, 0x7e, 0xc7, 0xa7, 0x83, 0xcb, 0x7f,
	0x0f, 0x60, 0xd4, 0x02, 0xf0, 0xab, 0xc0, 0x63, 0xf3, 0xd5, 0xc6, 0xbd, 0xdd, 0x4a, 0xd3, 0xb7,
	0x92, 0x35, 0x58, 0xf1, 0x8d, 0xb7, 0xab, 0xb5, 0xd6, 0x6e, 0xe5, 0xa0, 0xb6, 0x83, 0x97, 0x91,
	0x81, 0x55, 0x9f, 0xa8, 0xd1, 0xae, 0x56, 0x9a, 0x8e, 0x2c, 0x56, 0x7a, 0xbc, 0x02, 0x0b, 0xe5,
	0xc0, 0xa7, 0x55, 0xfe, 0x63, 0x0e, 0x16, 0xa8, 0x6f, 0x61, 0x17, 0xdd, 0x4d, 0x9d, 0xf9, 0x35,
	0x33, 0x93, 0x1d, 0x89, 0x59, 0x9f, 0xd2, 0x84, 0xeb, 0x1f, 0xff, 0xed, 0x1f, 0xbf, 0x8c, 0xbd,
	0x29, 0x7c, 0xb3, 0x78, 0xff, 0x7a, 0x11, 0x93, 0xa6, 0x18, 0x34, 0x59, 0x0c, 0xe2, 0x6f, 0x72,
	0x79, 0xfe, 0x13, 0x0e, 0x96, 0x58, 0x9f, 0xb0, 0x04, 0xda, 0x93, 0x71, 0x4c, 0x66, 0x99, 0x76,
	0xe7, 0x40, 0x93, 0x25, 0xe1, 0x06, 0x71, 0xe2, 0x9a, 0xf0, 0x66, 0xa8, 0x13, 0xe3, 0xaa, 0xb0,
	0x27, 0x5e, 0x38, 0x46, 0x1f, 0x50, 0x98, 0xe1, 0xf0, 0xc4, 0x21, 0xe1, 0xf0, 0xe4, 0x13, 0x86,
	0xc3, 0xc3, 0x63, 0x27, 0x7e, 0xc6, 0x01, 0xcf, 0xfa, 0xec, 0xc1, 0x72, 0x24, 0x00, 0x19, 0x0f,
	0x06, 0x71, 0xe1, 0x5d, 0xe2, 0x42, 0x51, 0xc8, 0x3f, 0xd7, 0x85, 0x80, 0x26, 0xec, 0xc6, 0x43,
	0x27, 0x14, 0xa3, 0x5b, 0x7e, 0x66, 0x28, 0x3c, 0x71, 0x88, 0xf5, 0xc9, 0x02, 0xe0, 0x69, 0xc1,
	0x96, 0x3f, 0xe5, 0xe0, 0xc2, 0xf8, 0x65, 0x69, 0x8e, 0x65, 0xdd, 0x8f, 0xc8, 0xbc, 0xce, 0xcc,
	0x85, 0x1f, 0x22, 0xbc, 0x43, 0xbc, 0x29, 0x08, 0x57, 0x9e, 0xeb, 0x8d, 0x7f, 0x0a, 0x76, 0xc8,
	0x80, 0xf9, 0xc0, 0x85, 0xe9, 0x3a, 0xe5, 0x8a, 0x5f, 0x18, 0x12, 0x86, 0x22, 0x31, 0x7c, 0x45,
	0xb8, 0x1c, 0x66, 0xd8, 0xaf, 0x03, 0xdb, 0x54, 0x00, 0x7c, 0x97, 0xa2, 0x6b, 0x94, 0xc5, 0x91,
	0x28, 0xe4, 0x0d, 0x78, 0x8b, 0xd8, 0x7b, 0x43, 0x10, 0xc2, 0xec, 0x8d, 0x34, 0x60, 0x6b, 0x3f,
	0x81, 0xc5, 0xb1, 0x5b, 0xd1, 0x4b, 0x21, 0xab, 0x74, 0x01, 0x21, 0x2b, 0x7d, 0x9b, 0x58, 0x7e,
	0x4b, 0xd8, 0x8a, 0x5a, 0xa9, 0xb7, 0xcf, 0x70, 0x79, 0xfe, 0xe7, 0x1c, 0x9c, 0xa7, 0x6f, 0x15,
	0xb3, 0x94, 0x7d, 0x4a, 0x9e, 0xb9, 0x44, 0x9b, 0xa7, 0x00, 0x42, 0x89, 0x78, 0x72, 0x55, 0x78,
	0x23, 0xcc, 0x13, 0x6a, 0x82, 0xc3, 0x7a, 0xea, 0x22, 0x92, 0x66, 0x7d, 0x50, 0x7c, 0x56, 0xd6,
	0x07, 0xb5, 0x60, 0xcb, 0xdf, 0x87, 0x84, 0x73, 0xdf, 0xb8, 0x42, 0x33, 0x9d, 0x0c, 0x87, 0x58,
	0xba, 0x42, 0x2c, 0x6d, 0x0a, 0xd9, 0x50, 0x46, 0x93, 0xd9, 0xbe, 0x20, 0x07, 0xae, 0x20, 0x18,
	0x41, 0xf6, 0xcb, 0x99, 0x41, 0xf6, 0x03, 0x26, 0x0a, 0x72, 0xe0, 0xb6, 0xc4, 0x66, 0xdb, 0xd8,
	0xed, 0x04, 0xcd, 0x36, 0x1a, 0x10, 0xc2, 0xf3, 0x48, 0xb6, 0xd1, 0x7a, 0xb0, 0xfd, 0x47, 0x1c,
	0x2c, 0xb3, 0xae, 0x31, 0xf8, 0xcd, 0x30, 0x27, 0x7c, 0xa0, 0x10, 0x47, 0xde, 0x23, 0x8e, 0x5c,
	0x17, 0xae, 0x46, 0x3a, 0xe2, 0xbf, 0x37, 0xe1, 0xf2, 0x7c, 0x17, 0x66, 0x9d, 0x5b, 0x11, 0x7e,
	0x95, 0x91, 0xf8, 0xc6, 0xc0, 0x0a, 0xb1, 0x98, 0x27, 0x16, 0x2f, 0x0b, 0x97, 0x9e, 0x97, 0xf9,
	0xc6, 0xc0, 0x72, 0x8b, 0x79, 0xb0, 0xe1, 0xbe, 0xc8, 0xb0, 0x35, 0x12, 0x9f, 0xb9, 0x98, 0x07,
	0xb4, 0xf8, 0x2c, 0xfb, 0x3a, 0xd0, 0x8b, 0x4c, 0x7a, 0xbf, 0x08, 0xcb, 0x23, 0x2d, 0xd8, 0xf2,
	0x67, 0x1c, 0x2c, 0x33, 0xfb, 0x92, 0x4d, 0xc6, 0xb9, 0x82, 0x06, 0x65, 0x2e, 0x8f, 0x6d, 0x26,
	0x0c, 0x54, 0x74, 0xd6, 0x59, 0xb3, 0x5c, 0x0a, 0x32, 0xbb, 0x96, 0x50, 0xe7, 0x7c, 0xa0, 0xb3,
	0x52, 0x90, 0xa5, 0xcb, 0x2d, 0x7a, 0xc1, 0xe6, 0x62, 0xac, 0xe8, 0x05, 0xc4, 0x21, 0xf6, 0xa3,
	0x8b, 0x5e, 0x40, 0xcb, 0x4d, 0x2e, 0xbf, 0xbd, 0x3f, 0xbc, 0xb5, 0x0a, 0xcb, 0xfe, 0x16, 0xc3,
	0x44, 0x06, 0x6e, 0xd2, 0xcd, 0x27, 0x4f, 0xb3, 0x53, 0x9f, 0x3f, 0xcd, 0x4e, 0x7d, 0xf9, 0x34,
	0xcb, 0xfd, 0x74, 0x98, 0xe5, 0xfe, 0x38, 0xcc, 0x72, 0x7f, 0x19, 0x66, 0xb9, 0x27, 0xc3, 0x2c,
	0xf7, 0xf7, 0x61, 0x96, 0xfb, 0xf7, 0x30, 0x3b, 0xf5, 0xe5, 0x30, 0xcb, 0x3d, 0x7e, 0x96, 0x9d,
	0x7a, 0xf2, 0x2c, 0x3b, 0xf5, 0xf9, 0xb3, 0xec, 0xd4, 0x87, 0xce, 0xff, 0x08, 0x1e, 0x26, 0xc8,
	0xd5, 0xee, 0xdb, 0xff, 0x0d, 0x00, 0x00, 0xff, 0xff, 0xf9, 0x92, 0xdd, 0x39, 0x4a, 0x28, 0x00,
	0x00,
}

func (x PhoneActivationType) String() string {
	s, ok := PhoneActivationType_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x EmailActivationType) String() string {
	s, ok := EmailActivationType_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x AuthExtraInfoType) String() string {
	s, ok := AuthExtraInfoType_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x AuthHolder) String() string {
	s, ok := AuthHolder_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *RequestStartPhoneAuth) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RequestStartPhoneAuth)
	if !ok {
		that2, ok := that.(RequestStartPhoneAuth)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.PhoneNumber != that1.PhoneNumber {
		return false
	}
	if this.AppId != that1.AppId {
		return false
	}
	if this.ApiKey != that1.ApiKey {
		return false
	}
	if !bytes.Equal(this.DeviceHash, that1.DeviceHash) {
		return false
	}
	if this.DeviceTitle != that1.DeviceTitle {
		return false
	}
	if !this.TimeZone.Equal(that1.TimeZone) {
		return false
	}
	if len(this.PreferredLanguages) != len(that1.PreferredLanguages) {
		return false
	}
	for i := range this.PreferredLanguages {
		if this.PreferredLanguages[i] != that1.PreferredLanguages[i] {
			return false
		}
	}
	return true
}
func (this *ResponseStartPhoneAuth) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ResponseStartPhoneAuth)
	if !ok {
		that2, ok := that.(ResponseStartPhoneAuth)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.TransactionHash != that1.TransactionHash {
		return false
	}
	if this.IsRegistered != that1.IsRegistered {
		return false
	}
	if this.ActivationType != that1.ActivationType {
		return false
	}
	return true
}
func (this *RequestSendCodeByPhoneCall) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RequestSendCodeByPhoneCall)
	if !ok {
		that2, ok := that.(RequestSendCodeByPhoneCall)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.TransactionHash != that1.TransactionHash {
		return false
	}
	return true
}
func (this *RequestStartEmailAuth) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RequestStartEmailAuth)
	if !ok {
		that2, ok := that.(RequestStartEmailAuth)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Email != that1.Email {
		return false
	}
	if this.AppId != that1.AppId {
		return false
	}
	if this.ApiKey != that1.ApiKey {
		return false
	}
	if !bytes.Equal(this.DeviceHash, that1.DeviceHash) {
		return false
	}
	if this.DeviceTitle != that1.DeviceTitle {
		return false
	}
	if !this.TimeZone.Equal(that1.TimeZone) {
		return false
	}
	if len(this.PreferredLanguages) != len(that1.PreferredLanguages) {
		return false
	}
	for i := range this.PreferredLanguages {
		if this.PreferredLanguages[i] != that1.PreferredLanguages[i] {
			return false
		}
	}
	return true
}
func (this *ResponseStartEmailAuth) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ResponseStartEmailAuth)
	if !ok {
		that2, ok := that.(ResponseStartEmailAuth)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.TransactionHash != that1.TransactionHash {
		return false
	}
	if this.IsRegistered != that1.IsRegistered {
		return false
	}
	if this.ActivationType != that1.ActivationType {
		return false
	}
	return true
}
func (this *RequestStartAnonymousAuth) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RequestStartAnonymousAuth)
	if !ok {
		that2, ok := that.(RequestStartAnonymousAuth)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.AppId != that1.AppId {
		return false
	}
	if this.ApiKey != that1.ApiKey {
		return false
	}
	if !bytes.Equal(this.DeviceHash, that1.DeviceHash) {
		return false
	}
	if this.DeviceTitle != that1.DeviceTitle {
		return false
	}
	if !this.TimeZone.Equal(that1.TimeZone) {
		return false
	}
	if len(this.PreferredLanguages) != len(that1.PreferredLanguages) {
		return false
	}
	for i := range this.PreferredLanguages {
		if this.PreferredLanguages[i] != that1.PreferredLanguages[i] {
			return false
		}
	}
	return true
}
func (this *RequestStartTokenAuth) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RequestStartTokenAuth)
	if !ok {
		that2, ok := that.(RequestStartTokenAuth)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Token != that1.Token {
		return false
	}
	if this.AppId != that1.AppId {
		return false
	}
	if this.ApiKey != that1.ApiKey {
		return false
	}
	if !bytes.Equal(this.DeviceHash, that1.DeviceHash) {
		return false
	}
	if this.DeviceTitle != that1.DeviceTitle {
		return false
	}
	if !this.TimeZone.Equal(that1.TimeZone) {
		return false
	}
	if len(this.PreferredLanguages) != len(that1.PreferredLanguages) {
		return false
	}
	for i := range this.PreferredLanguages {
		if this.PreferredLanguages[i] != that1.PreferredLanguages[i] {
			return false
		}
	}
	return true
}
func (this *RequestStartUsernameAuth) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RequestStartUsernameAuth)
	if !ok {
		that2, ok := that.(RequestStartUsernameAuth)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Username != that1.Username {
		return false
	}
	if this.AppId != that1.AppId {
		return false
	}
	if this.ApiKey != that1.ApiKey {
		return false
	}
	if !bytes.Equal(this.DeviceHash, that1.DeviceHash) {
		return false
	}
	if this.DeviceTitle != that1.DeviceTitle {
		return false
	}
	if !this.TimeZone.Equal(that1.TimeZone) {
		return false
	}
	if len(this.PreferredLanguages) != len(that1.PreferredLanguages) {
		return false
	}
	for i := range this.PreferredLanguages {
		if this.PreferredLanguages[i] != that1.PreferredLanguages[i] {
			return false
		}
	}
	return true
}
func (this *ResponseStartUsernameAuth) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ResponseStartUsernameAuth)
	if !ok {
		that2, ok := that.(ResponseStartUsernameAuth)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.TransactionHash != that1.TransactionHash {
		return false
	}
	if this.IsRegistered != that1.IsRegistered {
		return false
	}
	return true
}
func (this *RequestValidateCode) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RequestValidateCode)
	if !ok {
		that2, ok := that.(RequestValidateCode)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.TransactionHash != that1.TransactionHash {
		return false
	}
	if this.Code != that1.Code {
		return false
	}
	return true
}
func (this *RequestResendCode) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RequestResendCode)
	if !ok {
		that2, ok := that.(RequestResendCode)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.TransactionHash != that1.TransactionHash {
		return false
	}
	return true
}
func (this *RequestValidatePassword) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RequestValidatePassword)
	if !ok {
		that2, ok := that.(RequestValidatePassword)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.TransactionHash != that1.TransactionHash {
		return false
	}
	if this.Password != that1.Password {
		return false
	}
	return true
}
func (this *RequestGetOAuth2Params) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RequestGetOAuth2Params)
	if !ok {
		that2, ok := that.(RequestGetOAuth2Params)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.TransactionHash != that1.TransactionHash {
		return false
	}
	if this.RedirectUrl != that1.RedirectUrl {
		return false
	}
	return true
}
func (this *ResponseGetOAuth2Params) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ResponseGetOAuth2Params)
	if !ok {
		that2, ok := that.(ResponseGetOAuth2Params)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.AuthUrl != that1.AuthUrl {
		return false
	}
	return true
}
func (this *RequestCompleteOAuth2) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RequestCompleteOAuth2)
	if !ok {
		that2, ok := that.(RequestCompleteOAuth2)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.TransactionHash != that1.TransactionHash {
		return false
	}
	if this.Code != that1.Code {
		return false
	}
	return true
}
func (this *RequestSignUp) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RequestSignUp)
	if !ok {
		that2, ok := that.(RequestSignUp)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.TransactionHash != that1.TransactionHash {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.Sex != that1.Sex {
		return false
	}
	if !this.Password.Equal(that1.Password) {
		return false
	}
	return true
}
func (this *ResponseAuth) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ResponseAuth)
	if !ok {
		that2, ok := that.(ResponseAuth)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.User.Equal(that1.User) {
		return false
	}
	if !this.Config.Equal(that1.Config) {
		return false
	}
	if !this.ConfigHash.Equal(that1.ConfigHash) {
		return false
	}
	if len(this.ExtraInfo) != len(that1.ExtraInfo) {
		return false
	}
	for i := range this.ExtraInfo {
		if this.ExtraInfo[i] != that1.ExtraInfo[i] {
			return false
		}
	}
	return true
}
func (this *AuthSession) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AuthSession)
	if !ok {
		that2, ok := that.(AuthSession)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if this.AuthHolder != that1.AuthHolder {
		return false
	}
	if this.AppId != that1.AppId {
		return false
	}
	if this.AppTitle != that1.AppTitle {
		return false
	}
	if this.DeviceTitle != that1.DeviceTitle {
		return false
	}
	if this.AuthTime != that1.AuthTime {
		return false
	}
	if this.AuthLocation != that1.AuthLocation {
		return false
	}
	if !this.Latitude.Equal(that1.Latitude) {
		return false
	}
	if !this.Longitude.Equal(that1.Longitude) {
		return false
	}
	return true
}
func (this *RequestGetAuthSessions) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RequestGetAuthSessions)
	if !ok {
		that2, ok := that.(RequestGetAuthSessions)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *ResponseGetAuthSessions) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ResponseGetAuthSessions)
	if !ok {
		that2, ok := that.(ResponseGetAuthSessions)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.UserAuths) != len(that1.UserAuths) {
		return false
	}
	for i := range this.UserAuths {
		if !this.UserAuths[i].Equal(that1.UserAuths[i]) {
			return false
		}
	}
	return true
}
func (this *RequestTerminateSession) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RequestTerminateSession)
	if !ok {
		that2, ok := that.(RequestTerminateSession)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	return true
}
func (this *RequestTerminateAllSessions) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RequestTerminateAllSessions)
	if !ok {
		that2, ok := that.(RequestTerminateAllSessions)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *RequestSignOut) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RequestSignOut)
	if !ok {
		that2, ok := that.(RequestSignOut)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *ForceReloadField) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ForceReloadField)
	if !ok {
		that2, ok := that.(ForceReloadField)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.Body == nil {
		if this.Body != nil {
			return false
		}
	} else if this.Body == nil {
		return false
	} else if !this.Body.Equal(that1.Body) {
		return false
	}
	return true
}
func (this *ForceReloadField_ForceReloadDialogs) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ForceReloadField_ForceReloadDialogs)
	if !ok {
		that2, ok := that.(ForceReloadField_ForceReloadDialogs)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ForceReloadDialogs.Equal(that1.ForceReloadDialogs) {
		return false
	}
	return true
}
func (this *ForceReloadField_ForceReloadContacts) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ForceReloadField_ForceReloadContacts)
	if !ok {
		that2, ok := that.(ForceReloadField_ForceReloadContacts)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ForceReloadContacts.Equal(that1.ForceReloadContacts) {
		return false
	}
	return true
}
func (this *ForceReloadField_ForceReloadHistory) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ForceReloadField_ForceReloadHistory)
	if !ok {
		that2, ok := that.(ForceReloadField_ForceReloadHistory)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ForceReloadHistory.Equal(that1.ForceReloadHistory) {
		return false
	}
	return true
}
func (this *ForceReloadDialogs) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ForceReloadDialogs)
	if !ok {
		that2, ok := that.(ForceReloadDialogs)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *ForceReloadContacts) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ForceReloadContacts)
	if !ok {
		that2, ok := that.(ForceReloadContacts)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *ForceReloadHistory) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ForceReloadHistory)
	if !ok {
		that2, ok := that.(ForceReloadHistory)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Peer.Equal(that1.Peer) {
		return false
	}
	return true
}
func (this *UpdateForceReloadState) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpdateForceReloadState)
	if !ok {
		that2, ok := that.(UpdateForceReloadState)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Fields) != len(that1.Fields) {
		return false
	}
	for i := range this.Fields {
		if !this.Fields[i].Equal(that1.Fields[i]) {
			return false
		}
	}
	return true
}
func (this *RequestSignInObsolete) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RequestSignInObsolete)
	if !ok {
		that2, ok := that.(RequestSignInObsolete)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.PhoneNumber != that1.PhoneNumber {
		return false
	}
	if this.SmsHash != that1.SmsHash {
		return false
	}
	if this.SmsCode != that1.SmsCode {
		return false
	}
	if !bytes.Equal(this.DeviceHash, that1.DeviceHash) {
		return false
	}
	if this.DeviceTitle != that1.DeviceTitle {
		return false
	}
	if this.AppId != that1.AppId {
		return false
	}
	if this.AppKey != that1.AppKey {
		return false
	}
	return true
}
func (this *RequestSignUpObsolete) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RequestSignUpObsolete)
	if !ok {
		that2, ok := that.(RequestSignUpObsolete)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.PhoneNumber != that1.PhoneNumber {
		return false
	}
	if this.SmsHash != that1.SmsHash {
		return false
	}
	if this.SmsCode != that1.SmsCode {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if !bytes.Equal(this.DeviceHash, that1.DeviceHash) {
		return false
	}
	if this.DeviceTitle != that1.DeviceTitle {
		return false
	}
	if this.AppId != that1.AppId {
		return false
	}
	if this.AppKey != that1.AppKey {
		return false
	}
	if this.IsSilent != that1.IsSilent {
		return false
	}
	return true
}
func (this *RequestSendAuthCodeObsolete) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RequestSendAuthCodeObsolete)
	if !ok {
		that2, ok := that.(RequestSendAuthCodeObsolete)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.PhoneNumber != that1.PhoneNumber {
		return false
	}
	if this.AppId != that1.AppId {
		return false
	}
	if this.ApiKey != that1.ApiKey {
		return false
	}
	return true
}
func (this *ResponseSendAuthCodeObsolete) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ResponseSendAuthCodeObsolete)
	if !ok {
		that2, ok := that.(ResponseSendAuthCodeObsolete)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.SmsHash != that1.SmsHash {
		return false
	}
	if this.IsRegistered != that1.IsRegistered {
		return false
	}
	return true
}
func (this *RequestSendAuthCallObsolete) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RequestSendAuthCallObsolete)
	if !ok {
		that2, ok := that.(RequestSendAuthCallObsolete)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.PhoneNumber != that1.PhoneNumber {
		return false
	}
	if this.SmsHash != that1.SmsHash {
		return false
	}
	if this.AppId != that1.AppId {
		return false
	}
	if this.ApiKey != that1.ApiKey {
		return false
	}
	return true
}
func (this *RequestChangePassword) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RequestChangePassword)
	if !ok {
		that2, ok := that.(RequestChangePassword)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.OldPassword != that1.OldPassword {
		return false
	}
	if this.NewPassword != that1.NewPassword {
		return false
	}
	return true
}
func (this *RequestStartPhoneAuth) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 11)
	s = append(s, "&dialog.RequestStartPhoneAuth{")
	s = append(s, "PhoneNumber: "+fmt.Sprintf("%#v", this.PhoneNumber)+",\n")
	s = append(s, "AppId: "+fmt.Sprintf("%#v", this.AppId)+",\n")
	s = append(s, "ApiKey: "+fmt.Sprintf("%#v", this.ApiKey)+",\n")
	s = append(s, "DeviceHash: "+fmt.Sprintf("%#v", this.DeviceHash)+",\n")
	s = append(s, "DeviceTitle: "+fmt.Sprintf("%#v", this.DeviceTitle)+",\n")
	if this.TimeZone != nil {
		s = append(s, "TimeZone: "+fmt.Sprintf("%#v", this.TimeZone)+",\n")
	}
	s = append(s, "PreferredLanguages: "+fmt.Sprintf("%#v", this.PreferredLanguages)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ResponseStartPhoneAuth) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&dialog.ResponseStartPhoneAuth{")
	s = append(s, "TransactionHash: "+fmt.Sprintf("%#v", this.TransactionHash)+",\n")
	s = append(s, "IsRegistered: "+fmt.Sprintf("%#v", this.IsRegistered)+",\n")
	s = append(s, "ActivationType: "+fmt.Sprintf("%#v", this.ActivationType)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RequestSendCodeByPhoneCall) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&dialog.RequestSendCodeByPhoneCall{")
	s = append(s, "TransactionHash: "+fmt.Sprintf("%#v", this.TransactionHash)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RequestStartEmailAuth) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 11)
	s = append(s, "&dialog.RequestStartEmailAuth{")
	s = append(s, "Email: "+fmt.Sprintf("%#v", this.Email)+",\n")
	s = append(s, "AppId: "+fmt.Sprintf("%#v", this.AppId)+",\n")
	s = append(s, "ApiKey: "+fmt.Sprintf("%#v", this.ApiKey)+",\n")
	s = append(s, "DeviceHash: "+fmt.Sprintf("%#v", this.DeviceHash)+",\n")
	s = append(s, "DeviceTitle: "+fmt.Sprintf("%#v", this.DeviceTitle)+",\n")
	if this.TimeZone != nil {
		s = append(s, "TimeZone: "+fmt.Sprintf("%#v", this.TimeZone)+",\n")
	}
	s = append(s, "PreferredLanguages: "+fmt.Sprintf("%#v", this.PreferredLanguages)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ResponseStartEmailAuth) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&dialog.ResponseStartEmailAuth{")
	s = append(s, "TransactionHash: "+fmt.Sprintf("%#v", this.TransactionHash)+",\n")
	s = append(s, "IsRegistered: "+fmt.Sprintf("%#v", this.IsRegistered)+",\n")
	s = append(s, "ActivationType: "+fmt.Sprintf("%#v", this.ActivationType)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RequestStartAnonymousAuth) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 11)
	s = append(s, "&dialog.RequestStartAnonymousAuth{")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "AppId: "+fmt.Sprintf("%#v", this.AppId)+",\n")
	s = append(s, "ApiKey: "+fmt.Sprintf("%#v", this.ApiKey)+",\n")
	s = append(s, "DeviceHash: "+fmt.Sprintf("%#v", this.DeviceHash)+",\n")
	s = append(s, "DeviceTitle: "+fmt.Sprintf("%#v", this.DeviceTitle)+",\n")
	if this.TimeZone != nil {
		s = append(s, "TimeZone: "+fmt.Sprintf("%#v", this.TimeZone)+",\n")
	}
	s = append(s, "PreferredLanguages: "+fmt.Sprintf("%#v", this.PreferredLanguages)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RequestStartTokenAuth) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 11)
	s = append(s, "&dialog.RequestStartTokenAuth{")
	s = append(s, "Token: "+fmt.Sprintf("%#v", this.Token)+",\n")
	s = append(s, "AppId: "+fmt.Sprintf("%#v", this.AppId)+",\n")
	s = append(s, "ApiKey: "+fmt.Sprintf("%#v", this.ApiKey)+",\n")
	s = append(s, "DeviceHash: "+fmt.Sprintf("%#v", this.DeviceHash)+",\n")
	s = append(s, "DeviceTitle: "+fmt.Sprintf("%#v", this.DeviceTitle)+",\n")
	if this.TimeZone != nil {
		s = append(s, "TimeZone: "+fmt.Sprintf("%#v", this.TimeZone)+",\n")
	}
	s = append(s, "PreferredLanguages: "+fmt.Sprintf("%#v", this.PreferredLanguages)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RequestStartUsernameAuth) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 11)
	s = append(s, "&dialog.RequestStartUsernameAuth{")
	s = append(s, "Username: "+fmt.Sprintf("%#v", this.Username)+",\n")
	s = append(s, "AppId: "+fmt.Sprintf("%#v", this.AppId)+",\n")
	s = append(s, "ApiKey: "+fmt.Sprintf("%#v", this.ApiKey)+",\n")
	s = append(s, "DeviceHash: "+fmt.Sprintf("%#v", this.DeviceHash)+",\n")
	s = append(s, "DeviceTitle: "+fmt.Sprintf("%#v", this.DeviceTitle)+",\n")
	if this.TimeZone != nil {
		s = append(s, "TimeZone: "+fmt.Sprintf("%#v", this.TimeZone)+",\n")
	}
	s = append(s, "PreferredLanguages: "+fmt.Sprintf("%#v", this.PreferredLanguages)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ResponseStartUsernameAuth) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&dialog.ResponseStartUsernameAuth{")
	s = append(s, "TransactionHash: "+fmt.Sprintf("%#v", this.TransactionHash)+",\n")
	s = append(s, "IsRegistered: "+fmt.Sprintf("%#v", this.IsRegistered)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RequestValidateCode) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&dialog.RequestValidateCode{")
	s = append(s, "TransactionHash: "+fmt.Sprintf("%#v", this.TransactionHash)+",\n")
	s = append(s, "Code: "+fmt.Sprintf("%#v", this.Code)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RequestResendCode) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&dialog.RequestResendCode{")
	s = append(s, "TransactionHash: "+fmt.Sprintf("%#v", this.TransactionHash)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RequestValidatePassword) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&dialog.RequestValidatePassword{")
	s = append(s, "TransactionHash: "+fmt.Sprintf("%#v", this.TransactionHash)+",\n")
	s = append(s, "Password: "+fmt.Sprintf("%#v", this.Password)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RequestGetOAuth2Params) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&dialog.RequestGetOAuth2Params{")
	s = append(s, "TransactionHash: "+fmt.Sprintf("%#v", this.TransactionHash)+",\n")
	s = append(s, "RedirectUrl: "+fmt.Sprintf("%#v", this.RedirectUrl)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ResponseGetOAuth2Params) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&dialog.ResponseGetOAuth2Params{")
	s = append(s, "AuthUrl: "+fmt.Sprintf("%#v", this.AuthUrl)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RequestCompleteOAuth2) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&dialog.RequestCompleteOAuth2{")
	s = append(s, "TransactionHash: "+fmt.Sprintf("%#v", this.TransactionHash)+",\n")
	s = append(s, "Code: "+fmt.Sprintf("%#v", this.Code)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RequestSignUp) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&dialog.RequestSignUp{")
	s = append(s, "TransactionHash: "+fmt.Sprintf("%#v", this.TransactionHash)+",\n")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "Sex: "+fmt.Sprintf("%#v", this.Sex)+",\n")
	if this.Password != nil {
		s = append(s, "Password: "+fmt.Sprintf("%#v", this.Password)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ResponseAuth) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&dialog.ResponseAuth{")
	if this.User != nil {
		s = append(s, "User: "+fmt.Sprintf("%#v", this.User)+",\n")
	}
	if this.Config != nil {
		s = append(s, "Config: "+fmt.Sprintf("%#v", this.Config)+",\n")
	}
	if this.ConfigHash != nil {
		s = append(s, "ConfigHash: "+fmt.Sprintf("%#v", this.ConfigHash)+",\n")
	}
	s = append(s, "ExtraInfo: "+fmt.Sprintf("%#v", this.ExtraInfo)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *AuthSession) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 13)
	s = append(s, "&dialog.AuthSession{")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	s = append(s, "AuthHolder: "+fmt.Sprintf("%#v", this.AuthHolder)+",\n")
	s = append(s, "AppId: "+fmt.Sprintf("%#v", this.AppId)+",\n")
	s = append(s, "AppTitle: "+fmt.Sprintf("%#v", this.AppTitle)+",\n")
	s = append(s, "DeviceTitle: "+fmt.Sprintf("%#v", this.DeviceTitle)+",\n")
	s = append(s, "AuthTime: "+fmt.Sprintf("%#v", this.AuthTime)+",\n")
	s = append(s, "AuthLocation: "+fmt.Sprintf("%#v", this.AuthLocation)+",\n")
	if this.Latitude != nil {
		s = append(s, "Latitude: "+fmt.Sprintf("%#v", this.Latitude)+",\n")
	}
	if this.Longitude != nil {
		s = append(s, "Longitude: "+fmt.Sprintf("%#v", this.Longitude)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RequestGetAuthSessions) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&dialog.RequestGetAuthSessions{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ResponseGetAuthSessions) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&dialog.ResponseGetAuthSessions{")
	if this.UserAuths != nil {
		s = append(s, "UserAuths: "+fmt.Sprintf("%#v", this.UserAuths)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RequestTerminateSession) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&dialog.RequestTerminateSession{")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RequestTerminateAllSessions) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&dialog.RequestTerminateAllSessions{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RequestSignOut) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&dialog.RequestSignOut{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ForceReloadField) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&dialog.ForceReloadField{")
	if this.Body != nil {
		s = append(s, "Body: "+fmt.Sprintf("%#v", this.Body)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ForceReloadField_ForceReloadDialogs) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dialog.ForceReloadField_ForceReloadDialogs{` +
		`ForceReloadDialogs:` + fmt.Sprintf("%#v", this.ForceReloadDialogs) + `}`}, ", ")
	return s
}
func (this *ForceReloadField_ForceReloadContacts) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dialog.ForceReloadField_ForceReloadContacts{` +
		`ForceReloadContacts:` + fmt.Sprintf("%#v", this.ForceReloadContacts) + `}`}, ", ")
	return s
}
func (this *ForceReloadField_ForceReloadHistory) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dialog.ForceReloadField_ForceReloadHistory{` +
		`ForceReloadHistory:` + fmt.Sprintf("%#v", this.ForceReloadHistory) + `}`}, ", ")
	return s
}
func (this *ForceReloadDialogs) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&dialog.ForceReloadDialogs{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ForceReloadContacts) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&dialog.ForceReloadContacts{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ForceReloadHistory) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&dialog.ForceReloadHistory{")
	if this.Peer != nil {
		s = append(s, "Peer: "+fmt.Sprintf("%#v", this.Peer)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UpdateForceReloadState) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&dialog.UpdateForceReloadState{")
	if this.Fields != nil {
		s = append(s, "Fields: "+fmt.Sprintf("%#v", this.Fields)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RequestSignInObsolete) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 11)
	s = append(s, "&dialog.RequestSignInObsolete{")
	s = append(s, "PhoneNumber: "+fmt.Sprintf("%#v", this.PhoneNumber)+",\n")
	s = append(s, "SmsHash: "+fmt.Sprintf("%#v", this.SmsHash)+",\n")
	s = append(s, "SmsCode: "+fmt.Sprintf("%#v", this.SmsCode)+",\n")
	s = append(s, "DeviceHash: "+fmt.Sprintf("%#v", this.DeviceHash)+",\n")
	s = append(s, "DeviceTitle: "+fmt.Sprintf("%#v", this.DeviceTitle)+",\n")
	s = append(s, "AppId: "+fmt.Sprintf("%#v", this.AppId)+",\n")
	s = append(s, "AppKey: "+fmt.Sprintf("%#v", this.AppKey)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RequestSignUpObsolete) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 13)
	s = append(s, "&dialog.RequestSignUpObsolete{")
	s = append(s, "PhoneNumber: "+fmt.Sprintf("%#v", this.PhoneNumber)+",\n")
	s = append(s, "SmsHash: "+fmt.Sprintf("%#v", this.SmsHash)+",\n")
	s = append(s, "SmsCode: "+fmt.Sprintf("%#v", this.SmsCode)+",\n")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "DeviceHash: "+fmt.Sprintf("%#v", this.DeviceHash)+",\n")
	s = append(s, "DeviceTitle: "+fmt.Sprintf("%#v", this.DeviceTitle)+",\n")
	s = append(s, "AppId: "+fmt.Sprintf("%#v", this.AppId)+",\n")
	s = append(s, "AppKey: "+fmt.Sprintf("%#v", this.AppKey)+",\n")
	s = append(s, "IsSilent: "+fmt.Sprintf("%#v", this.IsSilent)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RequestSendAuthCodeObsolete) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&dialog.RequestSendAuthCodeObsolete{")
	s = append(s, "PhoneNumber: "+fmt.Sprintf("%#v", this.PhoneNumber)+",\n")
	s = append(s, "AppId: "+fmt.Sprintf("%#v", this.AppId)+",\n")
	s = append(s, "ApiKey: "+fmt.Sprintf("%#v", this.ApiKey)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ResponseSendAuthCodeObsolete) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&dialog.ResponseSendAuthCodeObsolete{")
	s = append(s, "SmsHash: "+fmt.Sprintf("%#v", this.SmsHash)+",\n")
	s = append(s, "IsRegistered: "+fmt.Sprintf("%#v", this.IsRegistered)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RequestSendAuthCallObsolete) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&dialog.RequestSendAuthCallObsolete{")
	s = append(s, "PhoneNumber: "+fmt.Sprintf("%#v", this.PhoneNumber)+",\n")
	s = append(s, "SmsHash: "+fmt.Sprintf("%#v", this.SmsHash)+",\n")
	s = append(s, "AppId: "+fmt.Sprintf("%#v", this.AppId)+",\n")
	s = append(s, "ApiKey: "+fmt.Sprintf("%#v", this.ApiKey)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RequestChangePassword) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&dialog.RequestChangePassword{")
	s = append(s, "OldPassword: "+fmt.Sprintf("%#v", this.OldPassword)+",\n")
	s = append(s, "NewPassword: "+fmt.Sprintf("%#v", this.NewPassword)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringAuthentication(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// AuthenticationClient is the client API for Authentication service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type AuthenticationClient interface {
	/// Start authorization by phone
	StartPhoneAuth(ctx context.Context, in *RequestStartPhoneAuth, opts ...grpc.CallOption) (*ResponseStartPhoneAuth, error)
	/// Resend code by transaction hash
	SendCodeByPhoneCall(ctx context.Context, in *RequestSendCodeByPhoneCall, opts ...grpc.CallOption) (*ResponseVoid, error)
	/// Start email authorization process
	StartEmailAuth(ctx context.Context, in *RequestStartEmailAuth, opts ...grpc.CallOption) (*ResponseStartEmailAuth, error)
	/// Deprecated
	StartAnonymousAuth(ctx context.Context, in *RequestStartAnonymousAuth, opts ...grpc.CallOption) (*ResponseAuth, error)
	/// Start token auth authorization (actual for bots)
	StartTokenAuth(ctx context.Context, in *RequestStartTokenAuth, opts ...grpc.CallOption) (*ResponseAuth, error)
	/// Start login/password authorization process
	StartUsernameAuth(ctx context.Context, in *RequestStartUsernameAuth, opts ...grpc.CallOption) (*ResponseStartUsernameAuth, error)
	//* Validate code received by phone or email
	//  Returns error if user does not exist
	ValidateCode(ctx context.Context, in *RequestValidateCode, opts ...grpc.CallOption) (*ResponseAuth, error)
	/// Resend code if you don't receive it with first attempt
	ResendCode(ctx context.Context, in *RequestResendCode, opts ...grpc.CallOption) (*ResponseVoid, error)
	/// Validate your passwword
	ValidatePassword(ctx context.Context, in *RequestValidatePassword, opts ...grpc.CallOption) (*ResponseAuth, error)
	/// Deprecated
	GetOAuth2Params(ctx context.Context, in *RequestGetOAuth2Params, opts ...grpc.CallOption) (*ResponseGetOAuth2Params, error)
	/// Deprecated
	CompleteOAuth2(ctx context.Context, in *RequestCompleteOAuth2, opts ...grpc.CallOption) (*ResponseAuth, error)
	/// Sign up existed user
	SignUp(ctx context.Context, in *RequestSignUp, opts ...grpc.CallOption) (*ResponseAuth, error)
	/// Returns all authorized user's sessions
	GetAuthSessions(ctx context.Context, in *RequestGetAuthSessions, opts ...grpc.CallOption) (*ResponseGetAuthSessions, error)
	/// Deprecated. Does not produce any effect.
	TerminateSession(ctx context.Context, in *RequestTerminateSession, opts ...grpc.CallOption) (*ResponseVoid, error)
	/// Log out user
	TerminateAllSessions(ctx context.Context, in *RequestTerminateAllSessions, opts ...grpc.CallOption) (*ResponseVoid, error)
	/// Log out current session
	SignOut(ctx context.Context, in *RequestSignOut, opts ...grpc.CallOption) (*ResponseVoid, error)
	/// Deprecated
	SignInObsolete(ctx context.Context, in *RequestSignInObsolete, opts ...grpc.CallOption) (*ResponseAuth, error)
	/// Deprecated
	SignUpObsolete(ctx context.Context, in *RequestSignUpObsolete, opts ...grpc.CallOption) (*ResponseAuth, error)
	/// Deprecated
	SendAuthCodeObsolete(ctx context.Context, in *RequestSendAuthCodeObsolete, opts ...grpc.CallOption) (*ResponseSendAuthCodeObsolete, error)
	/// Deprecated
	SendAuthCallObsolete(ctx context.Context, in *RequestSendAuthCallObsolete, opts ...grpc.CallOption) (*ResponseVoid, error)
	ChangePassword(ctx context.Context, in *RequestChangePassword, opts ...grpc.CallOption) (*ResponseVoid, error)
}

type authenticationClient struct {
	cc *grpc.ClientConn
}

func NewAuthenticationClient(cc *grpc.ClientConn) AuthenticationClient {
	return &authenticationClient{cc}
}

func (c *authenticationClient) StartPhoneAuth(ctx context.Context, in *RequestStartPhoneAuth, opts ...grpc.CallOption) (*ResponseStartPhoneAuth, error) {
	out := new(ResponseStartPhoneAuth)
	err := c.cc.Invoke(ctx, "/dialog.Authentication/StartPhoneAuth", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authenticationClient) SendCodeByPhoneCall(ctx context.Context, in *RequestSendCodeByPhoneCall, opts ...grpc.CallOption) (*ResponseVoid, error) {
	out := new(ResponseVoid)
	err := c.cc.Invoke(ctx, "/dialog.Authentication/SendCodeByPhoneCall", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authenticationClient) StartEmailAuth(ctx context.Context, in *RequestStartEmailAuth, opts ...grpc.CallOption) (*ResponseStartEmailAuth, error) {
	out := new(ResponseStartEmailAuth)
	err := c.cc.Invoke(ctx, "/dialog.Authentication/StartEmailAuth", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authenticationClient) StartAnonymousAuth(ctx context.Context, in *RequestStartAnonymousAuth, opts ...grpc.CallOption) (*ResponseAuth, error) {
	out := new(ResponseAuth)
	err := c.cc.Invoke(ctx, "/dialog.Authentication/StartAnonymousAuth", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authenticationClient) StartTokenAuth(ctx context.Context, in *RequestStartTokenAuth, opts ...grpc.CallOption) (*ResponseAuth, error) {
	out := new(ResponseAuth)
	err := c.cc.Invoke(ctx, "/dialog.Authentication/StartTokenAuth", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authenticationClient) StartUsernameAuth(ctx context.Context, in *RequestStartUsernameAuth, opts ...grpc.CallOption) (*ResponseStartUsernameAuth, error) {
	out := new(ResponseStartUsernameAuth)
	err := c.cc.Invoke(ctx, "/dialog.Authentication/StartUsernameAuth", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authenticationClient) ValidateCode(ctx context.Context, in *RequestValidateCode, opts ...grpc.CallOption) (*ResponseAuth, error) {
	out := new(ResponseAuth)
	err := c.cc.Invoke(ctx, "/dialog.Authentication/ValidateCode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authenticationClient) ResendCode(ctx context.Context, in *RequestResendCode, opts ...grpc.CallOption) (*ResponseVoid, error) {
	out := new(ResponseVoid)
	err := c.cc.Invoke(ctx, "/dialog.Authentication/ResendCode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authenticationClient) ValidatePassword(ctx context.Context, in *RequestValidatePassword, opts ...grpc.CallOption) (*ResponseAuth, error) {
	out := new(ResponseAuth)
	err := c.cc.Invoke(ctx, "/dialog.Authentication/ValidatePassword", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authenticationClient) GetOAuth2Params(ctx context.Context, in *RequestGetOAuth2Params, opts ...grpc.CallOption) (*ResponseGetOAuth2Params, error) {
	out := new(ResponseGetOAuth2Params)
	err := c.cc.Invoke(ctx, "/dialog.Authentication/GetOAuth2Params", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authenticationClient) CompleteOAuth2(ctx context.Context, in *RequestCompleteOAuth2, opts ...grpc.CallOption) (*ResponseAuth, error) {
	out := new(ResponseAuth)
	err := c.cc.Invoke(ctx, "/dialog.Authentication/CompleteOAuth2", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authenticationClient) SignUp(ctx context.Context, in *RequestSignUp, opts ...grpc.CallOption) (*ResponseAuth, error) {
	out := new(ResponseAuth)
	err := c.cc.Invoke(ctx, "/dialog.Authentication/SignUp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authenticationClient) GetAuthSessions(ctx context.Context, in *RequestGetAuthSessions, opts ...grpc.CallOption) (*ResponseGetAuthSessions, error) {
	out := new(ResponseGetAuthSessions)
	err := c.cc.Invoke(ctx, "/dialog.Authentication/GetAuthSessions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authenticationClient) TerminateSession(ctx context.Context, in *RequestTerminateSession, opts ...grpc.CallOption) (*ResponseVoid, error) {
	out := new(ResponseVoid)
	err := c.cc.Invoke(ctx, "/dialog.Authentication/TerminateSession", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authenticationClient) TerminateAllSessions(ctx context.Context, in *RequestTerminateAllSessions, opts ...grpc.CallOption) (*ResponseVoid, error) {
	out := new(ResponseVoid)
	err := c.cc.Invoke(ctx, "/dialog.Authentication/TerminateAllSessions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authenticationClient) SignOut(ctx context.Context, in *RequestSignOut, opts ...grpc.CallOption) (*ResponseVoid, error) {
	out := new(ResponseVoid)
	err := c.cc.Invoke(ctx, "/dialog.Authentication/SignOut", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authenticationClient) SignInObsolete(ctx context.Context, in *RequestSignInObsolete, opts ...grpc.CallOption) (*ResponseAuth, error) {
	out := new(ResponseAuth)
	err := c.cc.Invoke(ctx, "/dialog.Authentication/SignInObsolete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authenticationClient) SignUpObsolete(ctx context.Context, in *RequestSignUpObsolete, opts ...grpc.CallOption) (*ResponseAuth, error) {
	out := new(ResponseAuth)
	err := c.cc.Invoke(ctx, "/dialog.Authentication/SignUpObsolete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authenticationClient) SendAuthCodeObsolete(ctx context.Context, in *RequestSendAuthCodeObsolete, opts ...grpc.CallOption) (*ResponseSendAuthCodeObsolete, error) {
	out := new(ResponseSendAuthCodeObsolete)
	err := c.cc.Invoke(ctx, "/dialog.Authentication/SendAuthCodeObsolete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authenticationClient) SendAuthCallObsolete(ctx context.Context, in *RequestSendAuthCallObsolete, opts ...grpc.CallOption) (*ResponseVoid, error) {
	out := new(ResponseVoid)
	err := c.cc.Invoke(ctx, "/dialog.Authentication/SendAuthCallObsolete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authenticationClient) ChangePassword(ctx context.Context, in *RequestChangePassword, opts ...grpc.CallOption) (*ResponseVoid, error) {
	out := new(ResponseVoid)
	err := c.cc.Invoke(ctx, "/dialog.Authentication/ChangePassword", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AuthenticationServer is the server API for Authentication service.
type AuthenticationServer interface {
	/// Start authorization by phone
	StartPhoneAuth(context.Context, *RequestStartPhoneAuth) (*ResponseStartPhoneAuth, error)
	/// Resend code by transaction hash
	SendCodeByPhoneCall(context.Context, *RequestSendCodeByPhoneCall) (*ResponseVoid, error)
	/// Start email authorization process
	StartEmailAuth(context.Context, *RequestStartEmailAuth) (*ResponseStartEmailAuth, error)
	/// Deprecated
	StartAnonymousAuth(context.Context, *RequestStartAnonymousAuth) (*ResponseAuth, error)
	/// Start token auth authorization (actual for bots)
	StartTokenAuth(context.Context, *RequestStartTokenAuth) (*ResponseAuth, error)
	/// Start login/password authorization process
	StartUsernameAuth(context.Context, *RequestStartUsernameAuth) (*ResponseStartUsernameAuth, error)
	//* Validate code received by phone or email
	//  Returns error if user does not exist
	ValidateCode(context.Context, *RequestValidateCode) (*ResponseAuth, error)
	/// Resend code if you don't receive it with first attempt
	ResendCode(context.Context, *RequestResendCode) (*ResponseVoid, error)
	/// Validate your passwword
	ValidatePassword(context.Context, *RequestValidatePassword) (*ResponseAuth, error)
	/// Deprecated
	GetOAuth2Params(context.Context, *RequestGetOAuth2Params) (*ResponseGetOAuth2Params, error)
	/// Deprecated
	CompleteOAuth2(context.Context, *RequestCompleteOAuth2) (*ResponseAuth, error)
	/// Sign up existed user
	SignUp(context.Context, *RequestSignUp) (*ResponseAuth, error)
	/// Returns all authorized user's sessions
	GetAuthSessions(context.Context, *RequestGetAuthSessions) (*ResponseGetAuthSessions, error)
	/// Deprecated. Does not produce any effect.
	TerminateSession(context.Context, *RequestTerminateSession) (*ResponseVoid, error)
	/// Log out user
	TerminateAllSessions(context.Context, *RequestTerminateAllSessions) (*ResponseVoid, error)
	/// Log out current session
	SignOut(context.Context, *RequestSignOut) (*ResponseVoid, error)
	/// Deprecated
	SignInObsolete(context.Context, *RequestSignInObsolete) (*ResponseAuth, error)
	/// Deprecated
	SignUpObsolete(context.Context, *RequestSignUpObsolete) (*ResponseAuth, error)
	/// Deprecated
	SendAuthCodeObsolete(context.Context, *RequestSendAuthCodeObsolete) (*ResponseSendAuthCodeObsolete, error)
	/// Deprecated
	SendAuthCallObsolete(context.Context, *RequestSendAuthCallObsolete) (*ResponseVoid, error)
	ChangePassword(context.Context, *RequestChangePassword) (*ResponseVoid, error)
}

// UnimplementedAuthenticationServer can be embedded to have forward compatible implementations.
type UnimplementedAuthenticationServer struct {
}

func (*UnimplementedAuthenticationServer) StartPhoneAuth(ctx context.Context, req *RequestStartPhoneAuth) (*ResponseStartPhoneAuth, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartPhoneAuth not implemented")
}
func (*UnimplementedAuthenticationServer) SendCodeByPhoneCall(ctx context.Context, req *RequestSendCodeByPhoneCall) (*ResponseVoid, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendCodeByPhoneCall not implemented")
}
func (*UnimplementedAuthenticationServer) StartEmailAuth(ctx context.Context, req *RequestStartEmailAuth) (*ResponseStartEmailAuth, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartEmailAuth not implemented")
}
func (*UnimplementedAuthenticationServer) StartAnonymousAuth(ctx context.Context, req *RequestStartAnonymousAuth) (*ResponseAuth, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartAnonymousAuth not implemented")
}
func (*UnimplementedAuthenticationServer) StartTokenAuth(ctx context.Context, req *RequestStartTokenAuth) (*ResponseAuth, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartTokenAuth not implemented")
}
func (*UnimplementedAuthenticationServer) StartUsernameAuth(ctx context.Context, req *RequestStartUsernameAuth) (*ResponseStartUsernameAuth, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartUsernameAuth not implemented")
}
func (*UnimplementedAuthenticationServer) ValidateCode(ctx context.Context, req *RequestValidateCode) (*ResponseAuth, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidateCode not implemented")
}
func (*UnimplementedAuthenticationServer) ResendCode(ctx context.Context, req *RequestResendCode) (*ResponseVoid, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResendCode not implemented")
}
func (*UnimplementedAuthenticationServer) ValidatePassword(ctx context.Context, req *RequestValidatePassword) (*ResponseAuth, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidatePassword not implemented")
}
func (*UnimplementedAuthenticationServer) GetOAuth2Params(ctx context.Context, req *RequestGetOAuth2Params) (*ResponseGetOAuth2Params, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOAuth2Params not implemented")
}
func (*UnimplementedAuthenticationServer) CompleteOAuth2(ctx context.Context, req *RequestCompleteOAuth2) (*ResponseAuth, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CompleteOAuth2 not implemented")
}
func (*UnimplementedAuthenticationServer) SignUp(ctx context.Context, req *RequestSignUp) (*ResponseAuth, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SignUp not implemented")
}
func (*UnimplementedAuthenticationServer) GetAuthSessions(ctx context.Context, req *RequestGetAuthSessions) (*ResponseGetAuthSessions, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAuthSessions not implemented")
}
func (*UnimplementedAuthenticationServer) TerminateSession(ctx context.Context, req *RequestTerminateSession) (*ResponseVoid, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TerminateSession not implemented")
}
func (*UnimplementedAuthenticationServer) TerminateAllSessions(ctx context.Context, req *RequestTerminateAllSessions) (*ResponseVoid, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TerminateAllSessions not implemented")
}
func (*UnimplementedAuthenticationServer) SignOut(ctx context.Context, req *RequestSignOut) (*ResponseVoid, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SignOut not implemented")
}
func (*UnimplementedAuthenticationServer) SignInObsolete(ctx context.Context, req *RequestSignInObsolete) (*ResponseAuth, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SignInObsolete not implemented")
}
func (*UnimplementedAuthenticationServer) SignUpObsolete(ctx context.Context, req *RequestSignUpObsolete) (*ResponseAuth, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SignUpObsolete not implemented")
}
func (*UnimplementedAuthenticationServer) SendAuthCodeObsolete(ctx context.Context, req *RequestSendAuthCodeObsolete) (*ResponseSendAuthCodeObsolete, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendAuthCodeObsolete not implemented")
}
func (*UnimplementedAuthenticationServer) SendAuthCallObsolete(ctx context.Context, req *RequestSendAuthCallObsolete) (*ResponseVoid, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendAuthCallObsolete not implemented")
}
func (*UnimplementedAuthenticationServer) ChangePassword(ctx context.Context, req *RequestChangePassword) (*ResponseVoid, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangePassword not implemented")
}

func RegisterAuthenticationServer(s *grpc.Server, srv AuthenticationServer) {
	s.RegisterService(&_Authentication_serviceDesc, srv)
}

func _Authentication_StartPhoneAuth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestStartPhoneAuth)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthenticationServer).StartPhoneAuth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dialog.Authentication/StartPhoneAuth",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthenticationServer).StartPhoneAuth(ctx, req.(*RequestStartPhoneAuth))
	}
	return interceptor(ctx, in, info, handler)
}

func _Authentication_SendCodeByPhoneCall_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestSendCodeByPhoneCall)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthenticationServer).SendCodeByPhoneCall(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dialog.Authentication/SendCodeByPhoneCall",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthenticationServer).SendCodeByPhoneCall(ctx, req.(*RequestSendCodeByPhoneCall))
	}
	return interceptor(ctx, in, info, handler)
}

func _Authentication_StartEmailAuth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestStartEmailAuth)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthenticationServer).StartEmailAuth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dialog.Authentication/StartEmailAuth",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthenticationServer).StartEmailAuth(ctx, req.(*RequestStartEmailAuth))
	}
	return interceptor(ctx, in, info, handler)
}

func _Authentication_StartAnonymousAuth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestStartAnonymousAuth)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthenticationServer).StartAnonymousAuth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dialog.Authentication/StartAnonymousAuth",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthenticationServer).StartAnonymousAuth(ctx, req.(*RequestStartAnonymousAuth))
	}
	return interceptor(ctx, in, info, handler)
}

func _Authentication_StartTokenAuth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestStartTokenAuth)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthenticationServer).StartTokenAuth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dialog.Authentication/StartTokenAuth",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthenticationServer).StartTokenAuth(ctx, req.(*RequestStartTokenAuth))
	}
	return interceptor(ctx, in, info, handler)
}

func _Authentication_StartUsernameAuth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestStartUsernameAuth)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthenticationServer).StartUsernameAuth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dialog.Authentication/StartUsernameAuth",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthenticationServer).StartUsernameAuth(ctx, req.(*RequestStartUsernameAuth))
	}
	return interceptor(ctx, in, info, handler)
}

func _Authentication_ValidateCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestValidateCode)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthenticationServer).ValidateCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dialog.Authentication/ValidateCode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthenticationServer).ValidateCode(ctx, req.(*RequestValidateCode))
	}
	return interceptor(ctx, in, info, handler)
}

func _Authentication_ResendCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestResendCode)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthenticationServer).ResendCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dialog.Authentication/ResendCode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthenticationServer).ResendCode(ctx, req.(*RequestResendCode))
	}
	return interceptor(ctx, in, info, handler)
}

func _Authentication_ValidatePassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestValidatePassword)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthenticationServer).ValidatePassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dialog.Authentication/ValidatePassword",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthenticationServer).ValidatePassword(ctx, req.(*RequestValidatePassword))
	}
	return interceptor(ctx, in, info, handler)
}

func _Authentication_GetOAuth2Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestGetOAuth2Params)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthenticationServer).GetOAuth2Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dialog.Authentication/GetOAuth2Params",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthenticationServer).GetOAuth2Params(ctx, req.(*RequestGetOAuth2Params))
	}
	return interceptor(ctx, in, info, handler)
}

func _Authentication_CompleteOAuth2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestCompleteOAuth2)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthenticationServer).CompleteOAuth2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dialog.Authentication/CompleteOAuth2",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthenticationServer).CompleteOAuth2(ctx, req.(*RequestCompleteOAuth2))
	}
	return interceptor(ctx, in, info, handler)
}

func _Authentication_SignUp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestSignUp)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthenticationServer).SignUp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dialog.Authentication/SignUp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthenticationServer).SignUp(ctx, req.(*RequestSignUp))
	}
	return interceptor(ctx, in, info, handler)
}

func _Authentication_GetAuthSessions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestGetAuthSessions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthenticationServer).GetAuthSessions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dialog.Authentication/GetAuthSessions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthenticationServer).GetAuthSessions(ctx, req.(*RequestGetAuthSessions))
	}
	return interceptor(ctx, in, info, handler)
}

func _Authentication_TerminateSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestTerminateSession)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthenticationServer).TerminateSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dialog.Authentication/TerminateSession",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthenticationServer).TerminateSession(ctx, req.(*RequestTerminateSession))
	}
	return interceptor(ctx, in, info, handler)
}

func _Authentication_TerminateAllSessions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestTerminateAllSessions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthenticationServer).TerminateAllSessions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dialog.Authentication/TerminateAllSessions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthenticationServer).TerminateAllSessions(ctx, req.(*RequestTerminateAllSessions))
	}
	return interceptor(ctx, in, info, handler)
}

func _Authentication_SignOut_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestSignOut)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthenticationServer).SignOut(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dialog.Authentication/SignOut",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthenticationServer).SignOut(ctx, req.(*RequestSignOut))
	}
	return interceptor(ctx, in, info, handler)
}

func _Authentication_SignInObsolete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestSignInObsolete)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthenticationServer).SignInObsolete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dialog.Authentication/SignInObsolete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthenticationServer).SignInObsolete(ctx, req.(*RequestSignInObsolete))
	}
	return interceptor(ctx, in, info, handler)
}

func _Authentication_SignUpObsolete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestSignUpObsolete)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthenticationServer).SignUpObsolete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dialog.Authentication/SignUpObsolete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthenticationServer).SignUpObsolete(ctx, req.(*RequestSignUpObsolete))
	}
	return interceptor(ctx, in, info, handler)
}

func _Authentication_SendAuthCodeObsolete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestSendAuthCodeObsolete)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthenticationServer).SendAuthCodeObsolete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dialog.Authentication/SendAuthCodeObsolete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthenticationServer).SendAuthCodeObsolete(ctx, req.(*RequestSendAuthCodeObsolete))
	}
	return interceptor(ctx, in, info, handler)
}

func _Authentication_SendAuthCallObsolete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestSendAuthCallObsolete)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthenticationServer).SendAuthCallObsolete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dialog.Authentication/SendAuthCallObsolete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthenticationServer).SendAuthCallObsolete(ctx, req.(*RequestSendAuthCallObsolete))
	}
	return interceptor(ctx, in, info, handler)
}

func _Authentication_ChangePassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestChangePassword)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthenticationServer).ChangePassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dialog.Authentication/ChangePassword",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthenticationServer).ChangePassword(ctx, req.(*RequestChangePassword))
	}
	return interceptor(ctx, in, info, handler)
}

var _Authentication_serviceDesc = grpc.ServiceDesc{
	ServiceName: "dialog.Authentication",
	HandlerType: (*AuthenticationServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "StartPhoneAuth",
			Handler:    _Authentication_StartPhoneAuth_Handler,
		},
		{
			MethodName: "SendCodeByPhoneCall",
			Handler:    _Authentication_SendCodeByPhoneCall_Handler,
		},
		{
			MethodName: "StartEmailAuth",
			Handler:    _Authentication_StartEmailAuth_Handler,
		},
		{
			MethodName: "StartAnonymousAuth",
			Handler:    _Authentication_StartAnonymousAuth_Handler,
		},
		{
			MethodName: "StartTokenAuth",
			Handler:    _Authentication_StartTokenAuth_Handler,
		},
		{
			MethodName: "StartUsernameAuth",
			Handler:    _Authentication_StartUsernameAuth_Handler,
		},
		{
			MethodName: "ValidateCode",
			Handler:    _Authentication_ValidateCode_Handler,
		},
		{
			MethodName: "ResendCode",
			Handler:    _Authentication_ResendCode_Handler,
		},
		{
			MethodName: "ValidatePassword",
			Handler:    _Authentication_ValidatePassword_Handler,
		},
		{
			MethodName: "GetOAuth2Params",
			Handler:    _Authentication_GetOAuth2Params_Handler,
		},
		{
			MethodName: "CompleteOAuth2",
			Handler:    _Authentication_CompleteOAuth2_Handler,
		},
		{
			MethodName: "SignUp",
			Handler:    _Authentication_SignUp_Handler,
		},
		{
			MethodName: "GetAuthSessions",
			Handler:    _Authentication_GetAuthSessions_Handler,
		},
		{
			MethodName: "TerminateSession",
			Handler:    _Authentication_TerminateSession_Handler,
		},
		{
			MethodName: "TerminateAllSessions",
			Handler:    _Authentication_TerminateAllSessions_Handler,
		},
		{
			MethodName: "SignOut",
			Handler:    _Authentication_SignOut_Handler,
		},
		{
			MethodName: "SignInObsolete",
			Handler:    _Authentication_SignInObsolete_Handler,
		},
		{
			MethodName: "SignUpObsolete",
			Handler:    _Authentication_SignUpObsolete_Handler,
		},
		{
			MethodName: "SendAuthCodeObsolete",
			Handler:    _Authentication_SendAuthCodeObsolete_Handler,
		},
		{
			MethodName: "SendAuthCallObsolete",
			Handler:    _Authentication_SendAuthCallObsolete_Handler,
		},
		{
			MethodName: "ChangePassword",
			Handler:    _Authentication_ChangePassword_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "authentication.proto",
}

func (m *RequestStartPhoneAuth) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestStartPhoneAuth) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RequestStartPhoneAuth) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PreferredLanguages) > 0 {
		for iNdEx := len(m.PreferredLanguages) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.PreferredLanguages[iNdEx])
			copy(dAtA[i:], m.PreferredLanguages[iNdEx])
			i = encodeVarintAuthentication(dAtA, i, uint64(len(m.PreferredLanguages[iNdEx])))
			i--
			dAtA[i] = 0x3a
		}
	}
	if m.TimeZone != nil {
		{
			size, err := m.TimeZone.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAuthentication(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if len(m.DeviceTitle) > 0 {
		i -= len(m.DeviceTitle)
		copy(dAtA[i:], m.DeviceTitle)
		i = encodeVarintAuthentication(dAtA, i, uint64(len(m.DeviceTitle)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.DeviceHash) > 0 {
		i -= len(m.DeviceHash)
		copy(dAtA[i:], m.DeviceHash)
		i = encodeVarintAuthentication(dAtA, i, uint64(len(m.DeviceHash)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.ApiKey) > 0 {
		i -= len(m.ApiKey)
		copy(dAtA[i:], m.ApiKey)
		i = encodeVarintAuthentication(dAtA, i, uint64(len(m.ApiKey)))
		i--
		dAtA[i] = 0x1a
	}
	if m.AppId != 0 {
		i = encodeVarintAuthentication(dAtA, i, uint64(m.AppId))
		i--
		dAtA[i] = 0x10
	}
	if m.PhoneNumber != 0 {
		i = encodeVarintAuthentication(dAtA, i, uint64(m.PhoneNumber))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ResponseStartPhoneAuth) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResponseStartPhoneAuth) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ResponseStartPhoneAuth) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ActivationType != 0 {
		i = encodeVarintAuthentication(dAtA, i, uint64(m.ActivationType))
		i--
		dAtA[i] = 0x18
	}
	if m.IsRegistered {
		i--
		if m.IsRegistered {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if len(m.TransactionHash) > 0 {
		i -= len(m.TransactionHash)
		copy(dAtA[i:], m.TransactionHash)
		i = encodeVarintAuthentication(dAtA, i, uint64(len(m.TransactionHash)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RequestSendCodeByPhoneCall) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestSendCodeByPhoneCall) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RequestSendCodeByPhoneCall) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TransactionHash) > 0 {
		i -= len(m.TransactionHash)
		copy(dAtA[i:], m.TransactionHash)
		i = encodeVarintAuthentication(dAtA, i, uint64(len(m.TransactionHash)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RequestStartEmailAuth) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestStartEmailAuth) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RequestStartEmailAuth) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PreferredLanguages) > 0 {
		for iNdEx := len(m.PreferredLanguages) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.PreferredLanguages[iNdEx])
			copy(dAtA[i:], m.PreferredLanguages[iNdEx])
			i = encodeVarintAuthentication(dAtA, i, uint64(len(m.PreferredLanguages[iNdEx])))
			i--
			dAtA[i] = 0x3a
		}
	}
	if m.TimeZone != nil {
		{
			size, err := m.TimeZone.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAuthentication(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if len(m.DeviceTitle) > 0 {
		i -= len(m.DeviceTitle)
		copy(dAtA[i:], m.DeviceTitle)
		i = encodeVarintAuthentication(dAtA, i, uint64(len(m.DeviceTitle)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.DeviceHash) > 0 {
		i -= len(m.DeviceHash)
		copy(dAtA[i:], m.DeviceHash)
		i = encodeVarintAuthentication(dAtA, i, uint64(len(m.DeviceHash)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.ApiKey) > 0 {
		i -= len(m.ApiKey)
		copy(dAtA[i:], m.ApiKey)
		i = encodeVarintAuthentication(dAtA, i, uint64(len(m.ApiKey)))
		i--
		dAtA[i] = 0x1a
	}
	if m.AppId != 0 {
		i = encodeVarintAuthentication(dAtA, i, uint64(m.AppId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Email) > 0 {
		i -= len(m.Email)
		copy(dAtA[i:], m.Email)
		i = encodeVarintAuthentication(dAtA, i, uint64(len(m.Email)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ResponseStartEmailAuth) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResponseStartEmailAuth) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ResponseStartEmailAuth) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ActivationType != 0 {
		i = encodeVarintAuthentication(dAtA, i, uint64(m.ActivationType))
		i--
		dAtA[i] = 0x18
	}
	if m.IsRegistered {
		i--
		if m.IsRegistered {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if len(m.TransactionHash) > 0 {
		i -= len(m.TransactionHash)
		copy(dAtA[i:], m.TransactionHash)
		i = encodeVarintAuthentication(dAtA, i, uint64(len(m.TransactionHash)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RequestStartAnonymousAuth) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestStartAnonymousAuth) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RequestStartAnonymousAuth) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PreferredLanguages) > 0 {
		for iNdEx := len(m.PreferredLanguages) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.PreferredLanguages[iNdEx])
			copy(dAtA[i:], m.PreferredLanguages[iNdEx])
			i = encodeVarintAuthentication(dAtA, i, uint64(len(m.PreferredLanguages[iNdEx])))
			i--
			dAtA[i] = 0x3a
		}
	}
	if m.TimeZone != nil {
		{
			size, err := m.TimeZone.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAuthentication(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if len(m.DeviceTitle) > 0 {
		i -= len(m.DeviceTitle)
		copy(dAtA[i:], m.DeviceTitle)
		i = encodeVarintAuthentication(dAtA, i, uint64(len(m.DeviceTitle)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.DeviceHash) > 0 {
		i -= len(m.DeviceHash)
		copy(dAtA[i:], m.DeviceHash)
		i = encodeVarintAuthentication(dAtA, i, uint64(len(m.DeviceHash)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.ApiKey) > 0 {
		i -= len(m.ApiKey)
		copy(dAtA[i:], m.ApiKey)
		i = encodeVarintAuthentication(dAtA, i, uint64(len(m.ApiKey)))
		i--
		dAtA[i] = 0x1a
	}
	if m.AppId != 0 {
		i = encodeVarintAuthentication(dAtA, i, uint64(m.AppId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintAuthentication(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RequestStartTokenAuth) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestStartTokenAuth) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RequestStartTokenAuth) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PreferredLanguages) > 0 {
		for iNdEx := len(m.PreferredLanguages) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.PreferredLanguages[iNdEx])
			copy(dAtA[i:], m.PreferredLanguages[iNdEx])
			i = encodeVarintAuthentication(dAtA, i, uint64(len(m.PreferredLanguages[iNdEx])))
			i--
			dAtA[i] = 0x3a
		}
	}
	if m.TimeZone != nil {
		{
			size, err := m.TimeZone.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAuthentication(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if len(m.DeviceTitle) > 0 {
		i -= len(m.DeviceTitle)
		copy(dAtA[i:], m.DeviceTitle)
		i = encodeVarintAuthentication(dAtA, i, uint64(len(m.DeviceTitle)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.DeviceHash) > 0 {
		i -= len(m.DeviceHash)
		copy(dAtA[i:], m.DeviceHash)
		i = encodeVarintAuthentication(dAtA, i, uint64(len(m.DeviceHash)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.ApiKey) > 0 {
		i -= len(m.ApiKey)
		copy(dAtA[i:], m.ApiKey)
		i = encodeVarintAuthentication(dAtA, i, uint64(len(m.ApiKey)))
		i--
		dAtA[i] = 0x1a
	}
	if m.AppId != 0 {
		i = encodeVarintAuthentication(dAtA, i, uint64(m.AppId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Token) > 0 {
		i -= len(m.Token)
		copy(dAtA[i:], m.Token)
		i = encodeVarintAuthentication(dAtA, i, uint64(len(m.Token)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RequestStartUsernameAuth) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestStartUsernameAuth) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RequestStartUsernameAuth) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PreferredLanguages) > 0 {
		for iNdEx := len(m.PreferredLanguages) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.PreferredLanguages[iNdEx])
			copy(dAtA[i:], m.PreferredLanguages[iNdEx])
			i = encodeVarintAuthentication(dAtA, i, uint64(len(m.PreferredLanguages[iNdEx])))
			i--
			dAtA[i] = 0x3a
		}
	}
	if m.TimeZone != nil {
		{
			size, err := m.TimeZone.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAuthentication(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if len(m.DeviceTitle) > 0 {
		i -= len(m.DeviceTitle)
		copy(dAtA[i:], m.DeviceTitle)
		i = encodeVarintAuthentication(dAtA, i, uint64(len(m.DeviceTitle)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.DeviceHash) > 0 {
		i -= len(m.DeviceHash)
		copy(dAtA[i:], m.DeviceHash)
		i = encodeVarintAuthentication(dAtA, i, uint64(len(m.DeviceHash)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.ApiKey) > 0 {
		i -= len(m.ApiKey)
		copy(dAtA[i:], m.ApiKey)
		i = encodeVarintAuthentication(dAtA, i, uint64(len(m.ApiKey)))
		i--
		dAtA[i] = 0x1a
	}
	if m.AppId != 0 {
		i = encodeVarintAuthentication(dAtA, i, uint64(m.AppId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Username) > 0 {
		i -= len(m.Username)
		copy(dAtA[i:], m.Username)
		i = encodeVarintAuthentication(dAtA, i, uint64(len(m.Username)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ResponseStartUsernameAuth) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResponseStartUsernameAuth) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ResponseStartUsernameAuth) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.IsRegistered {
		i--
		if m.IsRegistered {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if len(m.TransactionHash) > 0 {
		i -= len(m.TransactionHash)
		copy(dAtA[i:], m.TransactionHash)
		i = encodeVarintAuthentication(dAtA, i, uint64(len(m.TransactionHash)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RequestValidateCode) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestValidateCode) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RequestValidateCode) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Code) > 0 {
		i -= len(m.Code)
		copy(dAtA[i:], m.Code)
		i = encodeVarintAuthentication(dAtA, i, uint64(len(m.Code)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.TransactionHash) > 0 {
		i -= len(m.TransactionHash)
		copy(dAtA[i:], m.TransactionHash)
		i = encodeVarintAuthentication(dAtA, i, uint64(len(m.TransactionHash)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RequestResendCode) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestResendCode) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RequestResendCode) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TransactionHash) > 0 {
		i -= len(m.TransactionHash)
		copy(dAtA[i:], m.TransactionHash)
		i = encodeVarintAuthentication(dAtA, i, uint64(len(m.TransactionHash)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RequestValidatePassword) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestValidatePassword) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RequestValidatePassword) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Password) > 0 {
		i -= len(m.Password)
		copy(dAtA[i:], m.Password)
		i = encodeVarintAuthentication(dAtA, i, uint64(len(m.Password)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.TransactionHash) > 0 {
		i -= len(m.TransactionHash)
		copy(dAtA[i:], m.TransactionHash)
		i = encodeVarintAuthentication(dAtA, i, uint64(len(m.TransactionHash)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RequestGetOAuth2Params) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestGetOAuth2Params) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RequestGetOAuth2Params) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.RedirectUrl) > 0 {
		i -= len(m.RedirectUrl)
		copy(dAtA[i:], m.RedirectUrl)
		i = encodeVarintAuthentication(dAtA, i, uint64(len(m.RedirectUrl)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.TransactionHash) > 0 {
		i -= len(m.TransactionHash)
		copy(dAtA[i:], m.TransactionHash)
		i = encodeVarintAuthentication(dAtA, i, uint64(len(m.TransactionHash)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ResponseGetOAuth2Params) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResponseGetOAuth2Params) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ResponseGetOAuth2Params) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.AuthUrl) > 0 {
		i -= len(m.AuthUrl)
		copy(dAtA[i:], m.AuthUrl)
		i = encodeVarintAuthentication(dAtA, i, uint64(len(m.AuthUrl)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RequestCompleteOAuth2) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestCompleteOAuth2) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RequestCompleteOAuth2) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Code) > 0 {
		i -= len(m.Code)
		copy(dAtA[i:], m.Code)
		i = encodeVarintAuthentication(dAtA, i, uint64(len(m.Code)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.TransactionHash) > 0 {
		i -= len(m.TransactionHash)
		copy(dAtA[i:], m.TransactionHash)
		i = encodeVarintAuthentication(dAtA, i, uint64(len(m.TransactionHash)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RequestSignUp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestSignUp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RequestSignUp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Password != nil {
		{
			size, err := m.Password.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAuthentication(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.Sex != 0 {
		i = encodeVarintAuthentication(dAtA, i, uint64(m.Sex))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintAuthentication(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.TransactionHash) > 0 {
		i -= len(m.TransactionHash)
		copy(dAtA[i:], m.TransactionHash)
		i = encodeVarintAuthentication(dAtA, i, uint64(len(m.TransactionHash)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ResponseAuth) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResponseAuth) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ResponseAuth) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ExtraInfo) > 0 {
		dAtA8 := make([]byte, len(m.ExtraInfo)*10)
		var j7 int
		for _, num := range m.ExtraInfo {
			for num >= 1<<7 {
				dAtA8[j7] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j7++
			}
			dAtA8[j7] = uint8(num)
			j7++
		}
		i -= j7
		copy(dAtA[i:], dAtA8[:j7])
		i = encodeVarintAuthentication(dAtA, i, uint64(j7))
		i--
		dAtA[i] = 0x2a
	}
	if m.ConfigHash != nil {
		{
			size, err := m.ConfigHash.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAuthentication(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.Config != nil {
		{
			size, err := m.Config.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAuthentication(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.User != nil {
		{
			size, err := m.User.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAuthentication(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}

func (m *AuthSession) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AuthSession) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AuthSession) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Longitude != nil {
		{
			size, err := m.Longitude.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAuthentication(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	if m.Latitude != nil {
		{
			size, err := m.Latitude.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAuthentication(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	if len(m.AuthLocation) > 0 {
		i -= len(m.AuthLocation)
		copy(dAtA[i:], m.AuthLocation)
		i = encodeVarintAuthentication(dAtA, i, uint64(len(m.AuthLocation)))
		i--
		dAtA[i] = 0x3a
	}
	if m.AuthTime != 0 {
		i = encodeVarintAuthentication(dAtA, i, uint64(m.AuthTime))
		i--
		dAtA[i] = 0x30
	}
	if len(m.DeviceTitle) > 0 {
		i -= len(m.DeviceTitle)
		copy(dAtA[i:], m.DeviceTitle)
		i = encodeVarintAuthentication(dAtA, i, uint64(len(m.DeviceTitle)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.AppTitle) > 0 {
		i -= len(m.AppTitle)
		copy(dAtA[i:], m.AppTitle)
		i = encodeVarintAuthentication(dAtA, i, uint64(len(m.AppTitle)))
		i--
		dAtA[i] = 0x22
	}
	if m.AppId != 0 {
		i = encodeVarintAuthentication(dAtA, i, uint64(m.AppId))
		i--
		dAtA[i] = 0x18
	}
	if m.AuthHolder != 0 {
		i = encodeVarintAuthentication(dAtA, i, uint64(m.AuthHolder))
		i--
		dAtA[i] = 0x10
	}
	if m.Id != 0 {
		i = encodeVarintAuthentication(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *RequestGetAuthSessions) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestGetAuthSessions) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RequestGetAuthSessions) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *ResponseGetAuthSessions) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResponseGetAuthSessions) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ResponseGetAuthSessions) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.UserAuths) > 0 {
		for iNdEx := len(m.UserAuths) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.UserAuths[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintAuthentication(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *RequestTerminateSession) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestTerminateSession) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RequestTerminateSession) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintAuthentication(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *RequestTerminateAllSessions) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestTerminateAllSessions) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RequestTerminateAllSessions) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *RequestSignOut) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestSignOut) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RequestSignOut) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *ForceReloadField) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ForceReloadField) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ForceReloadField) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Body != nil {
		{
			size := m.Body.Size()
			i -= size
			if _, err := m.Body.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *ForceReloadField_ForceReloadDialogs) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ForceReloadField_ForceReloadDialogs) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ForceReloadDialogs != nil {
		{
			size, err := m.ForceReloadDialogs.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAuthentication(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}
func (m *ForceReloadField_ForceReloadContacts) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ForceReloadField_ForceReloadContacts) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ForceReloadContacts != nil {
		{
			size, err := m.ForceReloadContacts.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAuthentication(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *ForceReloadField_ForceReloadHistory) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ForceReloadField_ForceReloadHistory) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ForceReloadHistory != nil {
		{
			size, err := m.ForceReloadHistory.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAuthentication(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *ForceReloadDialogs) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ForceReloadDialogs) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ForceReloadDialogs) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *ForceReloadContacts) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ForceReloadContacts) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ForceReloadContacts) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *ForceReloadHistory) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ForceReloadHistory) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ForceReloadHistory) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Peer != nil {
		{
			size, err := m.Peer.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAuthentication(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UpdateForceReloadState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateForceReloadState) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateForceReloadState) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Fields) > 0 {
		for iNdEx := len(m.Fields) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Fields[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintAuthentication(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *RequestSignInObsolete) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestSignInObsolete) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RequestSignInObsolete) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.AppKey) > 0 {
		i -= len(m.AppKey)
		copy(dAtA[i:], m.AppKey)
		i = encodeVarintAuthentication(dAtA, i, uint64(len(m.AppKey)))
		i--
		dAtA[i] = 0x42
	}
	if m.AppId != 0 {
		i = encodeVarintAuthentication(dAtA, i, uint64(m.AppId))
		i--
		dAtA[i] = 0x38
	}
	if len(m.DeviceTitle) > 0 {
		i -= len(m.DeviceTitle)
		copy(dAtA[i:], m.DeviceTitle)
		i = encodeVarintAuthentication(dAtA, i, uint64(len(m.DeviceTitle)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.DeviceHash) > 0 {
		i -= len(m.DeviceHash)
		copy(dAtA[i:], m.DeviceHash)
		i = encodeVarintAuthentication(dAtA, i, uint64(len(m.DeviceHash)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.SmsCode) > 0 {
		i -= len(m.SmsCode)
		copy(dAtA[i:], m.SmsCode)
		i = encodeVarintAuthentication(dAtA, i, uint64(len(m.SmsCode)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.SmsHash) > 0 {
		i -= len(m.SmsHash)
		copy(dAtA[i:], m.SmsHash)
		i = encodeVarintAuthentication(dAtA, i, uint64(len(m.SmsHash)))
		i--
		dAtA[i] = 0x12
	}
	if m.PhoneNumber != 0 {
		i = encodeVarintAuthentication(dAtA, i, uint64(m.PhoneNumber))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *RequestSignUpObsolete) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestSignUpObsolete) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RequestSignUpObsolete) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.IsSilent {
		i--
		if m.IsSilent {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x58
	}
	if len(m.AppKey) > 0 {
		i -= len(m.AppKey)
		copy(dAtA[i:], m.AppKey)
		i = encodeVarintAuthentication(dAtA, i, uint64(len(m.AppKey)))
		i--
		dAtA[i] = 0x52
	}
	if m.AppId != 0 {
		i = encodeVarintAuthentication(dAtA, i, uint64(m.AppId))
		i--
		dAtA[i] = 0x48
	}
	if len(m.DeviceTitle) > 0 {
		i -= len(m.DeviceTitle)
		copy(dAtA[i:], m.DeviceTitle)
		i = encodeVarintAuthentication(dAtA, i, uint64(len(m.DeviceTitle)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.DeviceHash) > 0 {
		i -= len(m.DeviceHash)
		copy(dAtA[i:], m.DeviceHash)
		i = encodeVarintAuthentication(dAtA, i, uint64(len(m.DeviceHash)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintAuthentication(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.SmsCode) > 0 {
		i -= len(m.SmsCode)
		copy(dAtA[i:], m.SmsCode)
		i = encodeVarintAuthentication(dAtA, i, uint64(len(m.SmsCode)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.SmsHash) > 0 {
		i -= len(m.SmsHash)
		copy(dAtA[i:], m.SmsHash)
		i = encodeVarintAuthentication(dAtA, i, uint64(len(m.SmsHash)))
		i--
		dAtA[i] = 0x12
	}
	if m.PhoneNumber != 0 {
		i = encodeVarintAuthentication(dAtA, i, uint64(m.PhoneNumber))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *RequestSendAuthCodeObsolete) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestSendAuthCodeObsolete) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RequestSendAuthCodeObsolete) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ApiKey) > 0 {
		i -= len(m.ApiKey)
		copy(dAtA[i:], m.ApiKey)
		i = encodeVarintAuthentication(dAtA, i, uint64(len(m.ApiKey)))
		i--
		dAtA[i] = 0x1a
	}
	if m.AppId != 0 {
		i = encodeVarintAuthentication(dAtA, i, uint64(m.AppId))
		i--
		dAtA[i] = 0x10
	}
	if m.PhoneNumber != 0 {
		i = encodeVarintAuthentication(dAtA, i, uint64(m.PhoneNumber))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ResponseSendAuthCodeObsolete) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResponseSendAuthCodeObsolete) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ResponseSendAuthCodeObsolete) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.IsRegistered {
		i--
		if m.IsRegistered {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if len(m.SmsHash) > 0 {
		i -= len(m.SmsHash)
		copy(dAtA[i:], m.SmsHash)
		i = encodeVarintAuthentication(dAtA, i, uint64(len(m.SmsHash)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RequestSendAuthCallObsolete) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestSendAuthCallObsolete) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RequestSendAuthCallObsolete) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ApiKey) > 0 {
		i -= len(m.ApiKey)
		copy(dAtA[i:], m.ApiKey)
		i = encodeVarintAuthentication(dAtA, i, uint64(len(m.ApiKey)))
		i--
		dAtA[i] = 0x22
	}
	if m.AppId != 0 {
		i = encodeVarintAuthentication(dAtA, i, uint64(m.AppId))
		i--
		dAtA[i] = 0x18
	}
	if len(m.SmsHash) > 0 {
		i -= len(m.SmsHash)
		copy(dAtA[i:], m.SmsHash)
		i = encodeVarintAuthentication(dAtA, i, uint64(len(m.SmsHash)))
		i--
		dAtA[i] = 0x12
	}
	if m.PhoneNumber != 0 {
		i = encodeVarintAuthentication(dAtA, i, uint64(m.PhoneNumber))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *RequestChangePassword) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestChangePassword) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RequestChangePassword) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.NewPassword) > 0 {
		i -= len(m.NewPassword)
		copy(dAtA[i:], m.NewPassword)
		i = encodeVarintAuthentication(dAtA, i, uint64(len(m.NewPassword)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.OldPassword) > 0 {
		i -= len(m.OldPassword)
		copy(dAtA[i:], m.OldPassword)
		i = encodeVarintAuthentication(dAtA, i, uint64(len(m.OldPassword)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintAuthentication(dAtA []byte, offset int, v uint64) int {
	offset -= sovAuthentication(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *RequestStartPhoneAuth) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PhoneNumber != 0 {
		n += 1 + sovAuthentication(uint64(m.PhoneNumber))
	}
	if m.AppId != 0 {
		n += 1 + sovAuthentication(uint64(m.AppId))
	}
	l = len(m.ApiKey)
	if l > 0 {
		n += 1 + l + sovAuthentication(uint64(l))
	}
	l = len(m.DeviceHash)
	if l > 0 {
		n += 1 + l + sovAuthentication(uint64(l))
	}
	l = len(m.DeviceTitle)
	if l > 0 {
		n += 1 + l + sovAuthentication(uint64(l))
	}
	if m.TimeZone != nil {
		l = m.TimeZone.Size()
		n += 1 + l + sovAuthentication(uint64(l))
	}
	if len(m.PreferredLanguages) > 0 {
		for _, s := range m.PreferredLanguages {
			l = len(s)
			n += 1 + l + sovAuthentication(uint64(l))
		}
	}
	return n
}

func (m *ResponseStartPhoneAuth) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.TransactionHash)
	if l > 0 {
		n += 1 + l + sovAuthentication(uint64(l))
	}
	if m.IsRegistered {
		n += 2
	}
	if m.ActivationType != 0 {
		n += 1 + sovAuthentication(uint64(m.ActivationType))
	}
	return n
}

func (m *RequestSendCodeByPhoneCall) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.TransactionHash)
	if l > 0 {
		n += 1 + l + sovAuthentication(uint64(l))
	}
	return n
}

func (m *RequestStartEmailAuth) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Email)
	if l > 0 {
		n += 1 + l + sovAuthentication(uint64(l))
	}
	if m.AppId != 0 {
		n += 1 + sovAuthentication(uint64(m.AppId))
	}
	l = len(m.ApiKey)
	if l > 0 {
		n += 1 + l + sovAuthentication(uint64(l))
	}
	l = len(m.DeviceHash)
	if l > 0 {
		n += 1 + l + sovAuthentication(uint64(l))
	}
	l = len(m.DeviceTitle)
	if l > 0 {
		n += 1 + l + sovAuthentication(uint64(l))
	}
	if m.TimeZone != nil {
		l = m.TimeZone.Size()
		n += 1 + l + sovAuthentication(uint64(l))
	}
	if len(m.PreferredLanguages) > 0 {
		for _, s := range m.PreferredLanguages {
			l = len(s)
			n += 1 + l + sovAuthentication(uint64(l))
		}
	}
	return n
}

func (m *ResponseStartEmailAuth) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.TransactionHash)
	if l > 0 {
		n += 1 + l + sovAuthentication(uint64(l))
	}
	if m.IsRegistered {
		n += 2
	}
	if m.ActivationType != 0 {
		n += 1 + sovAuthentication(uint64(m.ActivationType))
	}
	return n
}

func (m *RequestStartAnonymousAuth) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovAuthentication(uint64(l))
	}
	if m.AppId != 0 {
		n += 1 + sovAuthentication(uint64(m.AppId))
	}
	l = len(m.ApiKey)
	if l > 0 {
		n += 1 + l + sovAuthentication(uint64(l))
	}
	l = len(m.DeviceHash)
	if l > 0 {
		n += 1 + l + sovAuthentication(uint64(l))
	}
	l = len(m.DeviceTitle)
	if l > 0 {
		n += 1 + l + sovAuthentication(uint64(l))
	}
	if m.TimeZone != nil {
		l = m.TimeZone.Size()
		n += 1 + l + sovAuthentication(uint64(l))
	}
	if len(m.PreferredLanguages) > 0 {
		for _, s := range m.PreferredLanguages {
			l = len(s)
			n += 1 + l + sovAuthentication(uint64(l))
		}
	}
	return n
}

func (m *RequestStartTokenAuth) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Token)
	if l > 0 {
		n += 1 + l + sovAuthentication(uint64(l))
	}
	if m.AppId != 0 {
		n += 1 + sovAuthentication(uint64(m.AppId))
	}
	l = len(m.ApiKey)
	if l > 0 {
		n += 1 + l + sovAuthentication(uint64(l))
	}
	l = len(m.DeviceHash)
	if l > 0 {
		n += 1 + l + sovAuthentication(uint64(l))
	}
	l = len(m.DeviceTitle)
	if l > 0 {
		n += 1 + l + sovAuthentication(uint64(l))
	}
	if m.TimeZone != nil {
		l = m.TimeZone.Size()
		n += 1 + l + sovAuthentication(uint64(l))
	}
	if len(m.PreferredLanguages) > 0 {
		for _, s := range m.PreferredLanguages {
			l = len(s)
			n += 1 + l + sovAuthentication(uint64(l))
		}
	}
	return n
}

func (m *RequestStartUsernameAuth) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Username)
	if l > 0 {
		n += 1 + l + sovAuthentication(uint64(l))
	}
	if m.AppId != 0 {
		n += 1 + sovAuthentication(uint64(m.AppId))
	}
	l = len(m.ApiKey)
	if l > 0 {
		n += 1 + l + sovAuthentication(uint64(l))
	}
	l = len(m.DeviceHash)
	if l > 0 {
		n += 1 + l + sovAuthentication(uint64(l))
	}
	l = len(m.DeviceTitle)
	if l > 0 {
		n += 1 + l + sovAuthentication(uint64(l))
	}
	if m.TimeZone != nil {
		l = m.TimeZone.Size()
		n += 1 + l + sovAuthentication(uint64(l))
	}
	if len(m.PreferredLanguages) > 0 {
		for _, s := range m.PreferredLanguages {
			l = len(s)
			n += 1 + l + sovAuthentication(uint64(l))
		}
	}
	return n
}

func (m *ResponseStartUsernameAuth) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.TransactionHash)
	if l > 0 {
		n += 1 + l + sovAuthentication(uint64(l))
	}
	if m.IsRegistered {
		n += 2
	}
	return n
}

func (m *RequestValidateCode) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.TransactionHash)
	if l > 0 {
		n += 1 + l + sovAuthentication(uint64(l))
	}
	l = len(m.Code)
	if l > 0 {
		n += 1 + l + sovAuthentication(uint64(l))
	}
	return n
}

func (m *RequestResendCode) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.TransactionHash)
	if l > 0 {
		n += 1 + l + sovAuthentication(uint64(l))
	}
	return n
}

func (m *RequestValidatePassword) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.TransactionHash)
	if l > 0 {
		n += 1 + l + sovAuthentication(uint64(l))
	}
	l = len(m.Password)
	if l > 0 {
		n += 1 + l + sovAuthentication(uint64(l))
	}
	return n
}

func (m *RequestGetOAuth2Params) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.TransactionHash)
	if l > 0 {
		n += 1 + l + sovAuthentication(uint64(l))
	}
	l = len(m.RedirectUrl)
	if l > 0 {
		n += 1 + l + sovAuthentication(uint64(l))
	}
	return n
}

func (m *ResponseGetOAuth2Params) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.AuthUrl)
	if l > 0 {
		n += 1 + l + sovAuthentication(uint64(l))
	}
	return n
}

func (m *RequestCompleteOAuth2) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.TransactionHash)
	if l > 0 {
		n += 1 + l + sovAuthentication(uint64(l))
	}
	l = len(m.Code)
	if l > 0 {
		n += 1 + l + sovAuthentication(uint64(l))
	}
	return n
}

func (m *RequestSignUp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.TransactionHash)
	if l > 0 {
		n += 1 + l + sovAuthentication(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovAuthentication(uint64(l))
	}
	if m.Sex != 0 {
		n += 1 + sovAuthentication(uint64(m.Sex))
	}
	if m.Password != nil {
		l = m.Password.Size()
		n += 1 + l + sovAuthentication(uint64(l))
	}
	return n
}

func (m *ResponseAuth) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.User != nil {
		l = m.User.Size()
		n += 1 + l + sovAuthentication(uint64(l))
	}
	if m.Config != nil {
		l = m.Config.Size()
		n += 1 + l + sovAuthentication(uint64(l))
	}
	if m.ConfigHash != nil {
		l = m.ConfigHash.Size()
		n += 1 + l + sovAuthentication(uint64(l))
	}
	if len(m.ExtraInfo) > 0 {
		l = 0
		for _, e := range m.ExtraInfo {
			l += sovAuthentication(uint64(e))
		}
		n += 1 + sovAuthentication(uint64(l)) + l
	}
	return n
}

func (m *AuthSession) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovAuthentication(uint64(m.Id))
	}
	if m.AuthHolder != 0 {
		n += 1 + sovAuthentication(uint64(m.AuthHolder))
	}
	if m.AppId != 0 {
		n += 1 + sovAuthentication(uint64(m.AppId))
	}
	l = len(m.AppTitle)
	if l > 0 {
		n += 1 + l + sovAuthentication(uint64(l))
	}
	l = len(m.DeviceTitle)
	if l > 0 {
		n += 1 + l + sovAuthentication(uint64(l))
	}
	if m.AuthTime != 0 {
		n += 1 + sovAuthentication(uint64(m.AuthTime))
	}
	l = len(m.AuthLocation)
	if l > 0 {
		n += 1 + l + sovAuthentication(uint64(l))
	}
	if m.Latitude != nil {
		l = m.Latitude.Size()
		n += 1 + l + sovAuthentication(uint64(l))
	}
	if m.Longitude != nil {
		l = m.Longitude.Size()
		n += 1 + l + sovAuthentication(uint64(l))
	}
	return n
}

func (m *RequestGetAuthSessions) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *ResponseGetAuthSessions) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.UserAuths) > 0 {
		for _, e := range m.UserAuths {
			l = e.Size()
			n += 1 + l + sovAuthentication(uint64(l))
		}
	}
	return n
}

func (m *RequestTerminateSession) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovAuthentication(uint64(m.Id))
	}
	return n
}

func (m *RequestTerminateAllSessions) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *RequestSignOut) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *ForceReloadField) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Body != nil {
		n += m.Body.Size()
	}
	return n
}

func (m *ForceReloadField_ForceReloadDialogs) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ForceReloadDialogs != nil {
		l = m.ForceReloadDialogs.Size()
		n += 1 + l + sovAuthentication(uint64(l))
	}
	return n
}
func (m *ForceReloadField_ForceReloadContacts) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ForceReloadContacts != nil {
		l = m.ForceReloadContacts.Size()
		n += 1 + l + sovAuthentication(uint64(l))
	}
	return n
}
func (m *ForceReloadField_ForceReloadHistory) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ForceReloadHistory != nil {
		l = m.ForceReloadHistory.Size()
		n += 1 + l + sovAuthentication(uint64(l))
	}
	return n
}
func (m *ForceReloadDialogs) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *ForceReloadContacts) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *ForceReloadHistory) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Peer != nil {
		l = m.Peer.Size()
		n += 1 + l + sovAuthentication(uint64(l))
	}
	return n
}

func (m *UpdateForceReloadState) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Fields) > 0 {
		for _, e := range m.Fields {
			l = e.Size()
			n += 1 + l + sovAuthentication(uint64(l))
		}
	}
	return n
}

func (m *RequestSignInObsolete) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PhoneNumber != 0 {
		n += 1 + sovAuthentication(uint64(m.PhoneNumber))
	}
	l = len(m.SmsHash)
	if l > 0 {
		n += 1 + l + sovAuthentication(uint64(l))
	}
	l = len(m.SmsCode)
	if l > 0 {
		n += 1 + l + sovAuthentication(uint64(l))
	}
	l = len(m.DeviceHash)
	if l > 0 {
		n += 1 + l + sovAuthentication(uint64(l))
	}
	l = len(m.DeviceTitle)
	if l > 0 {
		n += 1 + l + sovAuthentication(uint64(l))
	}
	if m.AppId != 0 {
		n += 1 + sovAuthentication(uint64(m.AppId))
	}
	l = len(m.AppKey)
	if l > 0 {
		n += 1 + l + sovAuthentication(uint64(l))
	}
	return n
}

func (m *RequestSignUpObsolete) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PhoneNumber != 0 {
		n += 1 + sovAuthentication(uint64(m.PhoneNumber))
	}
	l = len(m.SmsHash)
	if l > 0 {
		n += 1 + l + sovAuthentication(uint64(l))
	}
	l = len(m.SmsCode)
	if l > 0 {
		n += 1 + l + sovAuthentication(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovAuthentication(uint64(l))
	}
	l = len(m.DeviceHash)
	if l > 0 {
		n += 1 + l + sovAuthentication(uint64(l))
	}
	l = len(m.DeviceTitle)
	if l > 0 {
		n += 1 + l + sovAuthentication(uint64(l))
	}
	if m.AppId != 0 {
		n += 1 + sovAuthentication(uint64(m.AppId))
	}
	l = len(m.AppKey)
	if l > 0 {
		n += 1 + l + sovAuthentication(uint64(l))
	}
	if m.IsSilent {
		n += 2
	}
	return n
}

func (m *RequestSendAuthCodeObsolete) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PhoneNumber != 0 {
		n += 1 + sovAuthentication(uint64(m.PhoneNumber))
	}
	if m.AppId != 0 {
		n += 1 + sovAuthentication(uint64(m.AppId))
	}
	l = len(m.ApiKey)
	if l > 0 {
		n += 1 + l + sovAuthentication(uint64(l))
	}
	return n
}

func (m *ResponseSendAuthCodeObsolete) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SmsHash)
	if l > 0 {
		n += 1 + l + sovAuthentication(uint64(l))
	}
	if m.IsRegistered {
		n += 2
	}
	return n
}

func (m *RequestSendAuthCallObsolete) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PhoneNumber != 0 {
		n += 1 + sovAuthentication(uint64(m.PhoneNumber))
	}
	l = len(m.SmsHash)
	if l > 0 {
		n += 1 + l + sovAuthentication(uint64(l))
	}
	if m.AppId != 0 {
		n += 1 + sovAuthentication(uint64(m.AppId))
	}
	l = len(m.ApiKey)
	if l > 0 {
		n += 1 + l + sovAuthentication(uint64(l))
	}
	return n
}

func (m *RequestChangePassword) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.OldPassword)
	if l > 0 {
		n += 1 + l + sovAuthentication(uint64(l))
	}
	l = len(m.NewPassword)
	if l > 0 {
		n += 1 + l + sovAuthentication(uint64(l))
	}
	return n
}

func sovAuthentication(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozAuthentication(x uint64) (n int) {
	return sovAuthentication(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *RequestStartPhoneAuth) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RequestStartPhoneAuth{`,
		`PhoneNumber:` + fmt.Sprintf("%v", this.PhoneNumber) + `,`,
		`AppId:` + fmt.Sprintf("%v", this.AppId) + `,`,
		`ApiKey:` + fmt.Sprintf("%v", this.ApiKey) + `,`,
		`DeviceHash:` + fmt.Sprintf("%v", this.DeviceHash) + `,`,
		`DeviceTitle:` + fmt.Sprintf("%v", this.DeviceTitle) + `,`,
		`TimeZone:` + strings.Replace(fmt.Sprintf("%v", this.TimeZone), "StringValue", "types.StringValue", 1) + `,`,
		`PreferredLanguages:` + fmt.Sprintf("%v", this.PreferredLanguages) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ResponseStartPhoneAuth) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ResponseStartPhoneAuth{`,
		`TransactionHash:` + fmt.Sprintf("%v", this.TransactionHash) + `,`,
		`IsRegistered:` + fmt.Sprintf("%v", this.IsRegistered) + `,`,
		`ActivationType:` + fmt.Sprintf("%v", this.ActivationType) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RequestSendCodeByPhoneCall) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RequestSendCodeByPhoneCall{`,
		`TransactionHash:` + fmt.Sprintf("%v", this.TransactionHash) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RequestStartEmailAuth) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RequestStartEmailAuth{`,
		`Email:` + fmt.Sprintf("%v", this.Email) + `,`,
		`AppId:` + fmt.Sprintf("%v", this.AppId) + `,`,
		`ApiKey:` + fmt.Sprintf("%v", this.ApiKey) + `,`,
		`DeviceHash:` + fmt.Sprintf("%v", this.DeviceHash) + `,`,
		`DeviceTitle:` + fmt.Sprintf("%v", this.DeviceTitle) + `,`,
		`TimeZone:` + strings.Replace(fmt.Sprintf("%v", this.TimeZone), "StringValue", "types.StringValue", 1) + `,`,
		`PreferredLanguages:` + fmt.Sprintf("%v", this.PreferredLanguages) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ResponseStartEmailAuth) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ResponseStartEmailAuth{`,
		`TransactionHash:` + fmt.Sprintf("%v", this.TransactionHash) + `,`,
		`IsRegistered:` + fmt.Sprintf("%v", this.IsRegistered) + `,`,
		`ActivationType:` + fmt.Sprintf("%v", this.ActivationType) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RequestStartAnonymousAuth) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RequestStartAnonymousAuth{`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`AppId:` + fmt.Sprintf("%v", this.AppId) + `,`,
		`ApiKey:` + fmt.Sprintf("%v", this.ApiKey) + `,`,
		`DeviceHash:` + fmt.Sprintf("%v", this.DeviceHash) + `,`,
		`DeviceTitle:` + fmt.Sprintf("%v", this.DeviceTitle) + `,`,
		`TimeZone:` + strings.Replace(fmt.Sprintf("%v", this.TimeZone), "StringValue", "types.StringValue", 1) + `,`,
		`PreferredLanguages:` + fmt.Sprintf("%v", this.PreferredLanguages) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RequestStartTokenAuth) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RequestStartTokenAuth{`,
		`Token:` + fmt.Sprintf("%v", this.Token) + `,`,
		`AppId:` + fmt.Sprintf("%v", this.AppId) + `,`,
		`ApiKey:` + fmt.Sprintf("%v", this.ApiKey) + `,`,
		`DeviceHash:` + fmt.Sprintf("%v", this.DeviceHash) + `,`,
		`DeviceTitle:` + fmt.Sprintf("%v", this.DeviceTitle) + `,`,
		`TimeZone:` + strings.Replace(fmt.Sprintf("%v", this.TimeZone), "StringValue", "types.StringValue", 1) + `,`,
		`PreferredLanguages:` + fmt.Sprintf("%v", this.PreferredLanguages) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RequestStartUsernameAuth) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RequestStartUsernameAuth{`,
		`Username:` + fmt.Sprintf("%v", this.Username) + `,`,
		`AppId:` + fmt.Sprintf("%v", this.AppId) + `,`,
		`ApiKey:` + fmt.Sprintf("%v", this.ApiKey) + `,`,
		`DeviceHash:` + fmt.Sprintf("%v", this.DeviceHash) + `,`,
		`DeviceTitle:` + fmt.Sprintf("%v", this.DeviceTitle) + `,`,
		`TimeZone:` + strings.Replace(fmt.Sprintf("%v", this.TimeZone), "StringValue", "types.StringValue", 1) + `,`,
		`PreferredLanguages:` + fmt.Sprintf("%v", this.PreferredLanguages) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ResponseStartUsernameAuth) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ResponseStartUsernameAuth{`,
		`TransactionHash:` + fmt.Sprintf("%v", this.TransactionHash) + `,`,
		`IsRegistered:` + fmt.Sprintf("%v", this.IsRegistered) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RequestValidateCode) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RequestValidateCode{`,
		`TransactionHash:` + fmt.Sprintf("%v", this.TransactionHash) + `,`,
		`Code:` + fmt.Sprintf("%v", this.Code) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RequestResendCode) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RequestResendCode{`,
		`TransactionHash:` + fmt.Sprintf("%v", this.TransactionHash) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RequestValidatePassword) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RequestValidatePassword{`,
		`TransactionHash:` + fmt.Sprintf("%v", this.TransactionHash) + `,`,
		`Password:` + fmt.Sprintf("%v", this.Password) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RequestGetOAuth2Params) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RequestGetOAuth2Params{`,
		`TransactionHash:` + fmt.Sprintf("%v", this.TransactionHash) + `,`,
		`RedirectUrl:` + fmt.Sprintf("%v", this.RedirectUrl) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ResponseGetOAuth2Params) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ResponseGetOAuth2Params{`,
		`AuthUrl:` + fmt.Sprintf("%v", this.AuthUrl) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RequestCompleteOAuth2) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RequestCompleteOAuth2{`,
		`TransactionHash:` + fmt.Sprintf("%v", this.TransactionHash) + `,`,
		`Code:` + fmt.Sprintf("%v", this.Code) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RequestSignUp) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RequestSignUp{`,
		`TransactionHash:` + fmt.Sprintf("%v", this.TransactionHash) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Sex:` + fmt.Sprintf("%v", this.Sex) + `,`,
		`Password:` + strings.Replace(fmt.Sprintf("%v", this.Password), "StringValue", "types.StringValue", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ResponseAuth) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ResponseAuth{`,
		`User:` + strings.Replace(fmt.Sprintf("%v", this.User), "User", "User", 1) + `,`,
		`Config:` + strings.Replace(fmt.Sprintf("%v", this.Config), "Config", "Config", 1) + `,`,
		`ConfigHash:` + strings.Replace(fmt.Sprintf("%v", this.ConfigHash), "Int64Value", "types.Int64Value", 1) + `,`,
		`ExtraInfo:` + fmt.Sprintf("%v", this.ExtraInfo) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AuthSession) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AuthSession{`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`AuthHolder:` + fmt.Sprintf("%v", this.AuthHolder) + `,`,
		`AppId:` + fmt.Sprintf("%v", this.AppId) + `,`,
		`AppTitle:` + fmt.Sprintf("%v", this.AppTitle) + `,`,
		`DeviceTitle:` + fmt.Sprintf("%v", this.DeviceTitle) + `,`,
		`AuthTime:` + fmt.Sprintf("%v", this.AuthTime) + `,`,
		`AuthLocation:` + fmt.Sprintf("%v", this.AuthLocation) + `,`,
		`Latitude:` + strings.Replace(fmt.Sprintf("%v", this.Latitude), "DoubleValue", "types.DoubleValue", 1) + `,`,
		`Longitude:` + strings.Replace(fmt.Sprintf("%v", this.Longitude), "DoubleValue", "types.DoubleValue", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RequestGetAuthSessions) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RequestGetAuthSessions{`,
		`}`,
	}, "")
	return s
}
func (this *ResponseGetAuthSessions) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForUserAuths := "[]*AuthSession{"
	for _, f := range this.UserAuths {
		repeatedStringForUserAuths += strings.Replace(f.String(), "AuthSession", "AuthSession", 1) + ","
	}
	repeatedStringForUserAuths += "}"
	s := strings.Join([]string{`&ResponseGetAuthSessions{`,
		`UserAuths:` + repeatedStringForUserAuths + `,`,
		`}`,
	}, "")
	return s
}
func (this *RequestTerminateSession) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RequestTerminateSession{`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RequestTerminateAllSessions) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RequestTerminateAllSessions{`,
		`}`,
	}, "")
	return s
}
func (this *RequestSignOut) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RequestSignOut{`,
		`}`,
	}, "")
	return s
}
func (this *ForceReloadField) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ForceReloadField{`,
		`Body:` + fmt.Sprintf("%v", this.Body) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ForceReloadField_ForceReloadDialogs) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ForceReloadField_ForceReloadDialogs{`,
		`ForceReloadDialogs:` + strings.Replace(fmt.Sprintf("%v", this.ForceReloadDialogs), "ForceReloadDialogs", "ForceReloadDialogs", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ForceReloadField_ForceReloadContacts) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ForceReloadField_ForceReloadContacts{`,
		`ForceReloadContacts:` + strings.Replace(fmt.Sprintf("%v", this.ForceReloadContacts), "ForceReloadContacts", "ForceReloadContacts", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ForceReloadField_ForceReloadHistory) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ForceReloadField_ForceReloadHistory{`,
		`ForceReloadHistory:` + strings.Replace(fmt.Sprintf("%v", this.ForceReloadHistory), "ForceReloadHistory", "ForceReloadHistory", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ForceReloadDialogs) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ForceReloadDialogs{`,
		`}`,
	}, "")
	return s
}
func (this *ForceReloadContacts) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ForceReloadContacts{`,
		`}`,
	}, "")
	return s
}
func (this *ForceReloadHistory) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ForceReloadHistory{`,
		`Peer:` + strings.Replace(fmt.Sprintf("%v", this.Peer), "Peer", "Peer", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateForceReloadState) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForFields := "[]*ForceReloadField{"
	for _, f := range this.Fields {
		repeatedStringForFields += strings.Replace(f.String(), "ForceReloadField", "ForceReloadField", 1) + ","
	}
	repeatedStringForFields += "}"
	s := strings.Join([]string{`&UpdateForceReloadState{`,
		`Fields:` + repeatedStringForFields + `,`,
		`}`,
	}, "")
	return s
}
func (this *RequestSignInObsolete) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RequestSignInObsolete{`,
		`PhoneNumber:` + fmt.Sprintf("%v", this.PhoneNumber) + `,`,
		`SmsHash:` + fmt.Sprintf("%v", this.SmsHash) + `,`,
		`SmsCode:` + fmt.Sprintf("%v", this.SmsCode) + `,`,
		`DeviceHash:` + fmt.Sprintf("%v", this.DeviceHash) + `,`,
		`DeviceTitle:` + fmt.Sprintf("%v", this.DeviceTitle) + `,`,
		`AppId:` + fmt.Sprintf("%v", this.AppId) + `,`,
		`AppKey:` + fmt.Sprintf("%v", this.AppKey) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RequestSignUpObsolete) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RequestSignUpObsolete{`,
		`PhoneNumber:` + fmt.Sprintf("%v", this.PhoneNumber) + `,`,
		`SmsHash:` + fmt.Sprintf("%v", this.SmsHash) + `,`,
		`SmsCode:` + fmt.Sprintf("%v", this.SmsCode) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`DeviceHash:` + fmt.Sprintf("%v", this.DeviceHash) + `,`,
		`DeviceTitle:` + fmt.Sprintf("%v", this.DeviceTitle) + `,`,
		`AppId:` + fmt.Sprintf("%v", this.AppId) + `,`,
		`AppKey:` + fmt.Sprintf("%v", this.AppKey) + `,`,
		`IsSilent:` + fmt.Sprintf("%v", this.IsSilent) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RequestSendAuthCodeObsolete) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RequestSendAuthCodeObsolete{`,
		`PhoneNumber:` + fmt.Sprintf("%v", this.PhoneNumber) + `,`,
		`AppId:` + fmt.Sprintf("%v", this.AppId) + `,`,
		`ApiKey:` + fmt.Sprintf("%v", this.ApiKey) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ResponseSendAuthCodeObsolete) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ResponseSendAuthCodeObsolete{`,
		`SmsHash:` + fmt.Sprintf("%v", this.SmsHash) + `,`,
		`IsRegistered:` + fmt.Sprintf("%v", this.IsRegistered) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RequestSendAuthCallObsolete) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RequestSendAuthCallObsolete{`,
		`PhoneNumber:` + fmt.Sprintf("%v", this.PhoneNumber) + `,`,
		`SmsHash:` + fmt.Sprintf("%v", this.SmsHash) + `,`,
		`AppId:` + fmt.Sprintf("%v", this.AppId) + `,`,
		`ApiKey:` + fmt.Sprintf("%v", this.ApiKey) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RequestChangePassword) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RequestChangePassword{`,
		`OldPassword:` + fmt.Sprintf("%v", this.OldPassword) + `,`,
		`NewPassword:` + fmt.Sprintf("%v", this.NewPassword) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringAuthentication(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *RequestStartPhoneAuth) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAuthentication
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestStartPhoneAuth: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestStartPhoneAuth: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PhoneNumber", wireType)
			}
			m.PhoneNumber = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthentication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PhoneNumber |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppId", wireType)
			}
			m.AppId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthentication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AppId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthentication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuthentication
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAuthentication
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ApiKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeviceHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthentication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthAuthentication
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthAuthentication
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DeviceHash = append(m.DeviceHash[:0], dAtA[iNdEx:postIndex]...)
			if m.DeviceHash == nil {
				m.DeviceHash = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeviceTitle", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthentication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuthentication
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAuthentication
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DeviceTitle = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimeZone", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthentication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAuthentication
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAuthentication
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TimeZone == nil {
				m.TimeZone = &types.StringValue{}
			}
			if err := m.TimeZone.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PreferredLanguages", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthentication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuthentication
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAuthentication
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PreferredLanguages = append(m.PreferredLanguages, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAuthentication(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAuthentication
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAuthentication
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResponseStartPhoneAuth) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAuthentication
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResponseStartPhoneAuth: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResponseStartPhoneAuth: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TransactionHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthentication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuthentication
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAuthentication
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TransactionHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsRegistered", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthentication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsRegistered = bool(v != 0)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActivationType", wireType)
			}
			m.ActivationType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthentication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ActivationType |= PhoneActivationType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAuthentication(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAuthentication
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAuthentication
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestSendCodeByPhoneCall) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAuthentication
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestSendCodeByPhoneCall: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestSendCodeByPhoneCall: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TransactionHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthentication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuthentication
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAuthentication
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TransactionHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAuthentication(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAuthentication
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAuthentication
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestStartEmailAuth) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAuthentication
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestStartEmailAuth: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestStartEmailAuth: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Email", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthentication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuthentication
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAuthentication
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Email = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppId", wireType)
			}
			m.AppId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthentication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AppId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthentication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuthentication
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAuthentication
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ApiKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeviceHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthentication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthAuthentication
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthAuthentication
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DeviceHash = append(m.DeviceHash[:0], dAtA[iNdEx:postIndex]...)
			if m.DeviceHash == nil {
				m.DeviceHash = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeviceTitle", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthentication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuthentication
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAuthentication
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DeviceTitle = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimeZone", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthentication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAuthentication
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAuthentication
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TimeZone == nil {
				m.TimeZone = &types.StringValue{}
			}
			if err := m.TimeZone.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PreferredLanguages", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthentication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuthentication
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAuthentication
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PreferredLanguages = append(m.PreferredLanguages, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAuthentication(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAuthentication
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAuthentication
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResponseStartEmailAuth) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAuthentication
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResponseStartEmailAuth: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResponseStartEmailAuth: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TransactionHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthentication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuthentication
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAuthentication
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TransactionHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsRegistered", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthentication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsRegistered = bool(v != 0)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActivationType", wireType)
			}
			m.ActivationType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthentication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ActivationType |= EmailActivationType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAuthentication(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAuthentication
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAuthentication
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestStartAnonymousAuth) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAuthentication
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestStartAnonymousAuth: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestStartAnonymousAuth: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthentication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuthentication
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAuthentication
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppId", wireType)
			}
			m.AppId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthentication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AppId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthentication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuthentication
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAuthentication
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ApiKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeviceHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthentication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthAuthentication
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthAuthentication
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DeviceHash = append(m.DeviceHash[:0], dAtA[iNdEx:postIndex]...)
			if m.DeviceHash == nil {
				m.DeviceHash = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeviceTitle", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthentication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuthentication
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAuthentication
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DeviceTitle = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimeZone", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthentication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAuthentication
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAuthentication
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TimeZone == nil {
				m.TimeZone = &types.StringValue{}
			}
			if err := m.TimeZone.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PreferredLanguages", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthentication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuthentication
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAuthentication
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PreferredLanguages = append(m.PreferredLanguages, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAuthentication(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAuthentication
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAuthentication
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestStartTokenAuth) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAuthentication
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestStartTokenAuth: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestStartTokenAuth: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthentication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuthentication
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAuthentication
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Token = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppId", wireType)
			}
			m.AppId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthentication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AppId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthentication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuthentication
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAuthentication
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ApiKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeviceHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthentication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthAuthentication
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthAuthentication
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DeviceHash = append(m.DeviceHash[:0], dAtA[iNdEx:postIndex]...)
			if m.DeviceHash == nil {
				m.DeviceHash = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeviceTitle", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthentication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuthentication
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAuthentication
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DeviceTitle = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimeZone", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthentication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAuthentication
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAuthentication
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TimeZone == nil {
				m.TimeZone = &types.StringValue{}
			}
			if err := m.TimeZone.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PreferredLanguages", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthentication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuthentication
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAuthentication
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PreferredLanguages = append(m.PreferredLanguages, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAuthentication(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAuthentication
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAuthentication
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestStartUsernameAuth) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAuthentication
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestStartUsernameAuth: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestStartUsernameAuth: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Username", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthentication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuthentication
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAuthentication
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Username = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppId", wireType)
			}
			m.AppId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthentication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AppId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthentication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuthentication
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAuthentication
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ApiKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeviceHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthentication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthAuthentication
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthAuthentication
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DeviceHash = append(m.DeviceHash[:0], dAtA[iNdEx:postIndex]...)
			if m.DeviceHash == nil {
				m.DeviceHash = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeviceTitle", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthentication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuthentication
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAuthentication
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DeviceTitle = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimeZone", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthentication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAuthentication
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAuthentication
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TimeZone == nil {
				m.TimeZone = &types.StringValue{}
			}
			if err := m.TimeZone.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PreferredLanguages", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthentication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuthentication
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAuthentication
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PreferredLanguages = append(m.PreferredLanguages, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAuthentication(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAuthentication
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAuthentication
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResponseStartUsernameAuth) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAuthentication
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResponseStartUsernameAuth: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResponseStartUsernameAuth: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TransactionHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthentication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuthentication
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAuthentication
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TransactionHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsRegistered", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthentication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsRegistered = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipAuthentication(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAuthentication
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAuthentication
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestValidateCode) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAuthentication
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestValidateCode: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestValidateCode: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TransactionHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthentication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuthentication
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAuthentication
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TransactionHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthentication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuthentication
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAuthentication
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Code = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAuthentication(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAuthentication
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAuthentication
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestResendCode) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAuthentication
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestResendCode: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestResendCode: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TransactionHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthentication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuthentication
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAuthentication
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TransactionHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAuthentication(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAuthentication
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAuthentication
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestValidatePassword) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAuthentication
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestValidatePassword: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestValidatePassword: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TransactionHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthentication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuthentication
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAuthentication
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TransactionHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Password", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthentication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuthentication
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAuthentication
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Password = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAuthentication(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAuthentication
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAuthentication
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestGetOAuth2Params) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAuthentication
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestGetOAuth2Params: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestGetOAuth2Params: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TransactionHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthentication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuthentication
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAuthentication
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TransactionHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RedirectUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthentication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuthentication
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAuthentication
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RedirectUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAuthentication(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAuthentication
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAuthentication
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResponseGetOAuth2Params) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAuthentication
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResponseGetOAuth2Params: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResponseGetOAuth2Params: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuthUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthentication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuthentication
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAuthentication
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AuthUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAuthentication(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAuthentication
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAuthentication
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestCompleteOAuth2) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAuthentication
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestCompleteOAuth2: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestCompleteOAuth2: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TransactionHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthentication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuthentication
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAuthentication
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TransactionHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthentication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuthentication
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAuthentication
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Code = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAuthentication(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAuthentication
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAuthentication
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestSignUp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAuthentication
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestSignUp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestSignUp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TransactionHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthentication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuthentication
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAuthentication
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TransactionHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthentication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuthentication
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAuthentication
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sex", wireType)
			}
			m.Sex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthentication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Sex |= Sex(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Password", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthentication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAuthentication
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAuthentication
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Password == nil {
				m.Password = &types.StringValue{}
			}
			if err := m.Password.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAuthentication(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAuthentication
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAuthentication
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResponseAuth) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAuthentication
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResponseAuth: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResponseAuth: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field User", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthentication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAuthentication
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAuthentication
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.User == nil {
				m.User = &User{}
			}
			if err := m.User.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Config", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthentication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAuthentication
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAuthentication
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Config == nil {
				m.Config = &Config{}
			}
			if err := m.Config.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConfigHash", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthentication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAuthentication
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAuthentication
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ConfigHash == nil {
				m.ConfigHash = &types.Int64Value{}
			}
			if err := m.ConfigHash.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType == 0 {
				var v AuthExtraInfoType
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowAuthentication
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= AuthExtraInfoType(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.ExtraInfo = append(m.ExtraInfo, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowAuthentication
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthAuthentication
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthAuthentication
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				if elementCount != 0 && len(m.ExtraInfo) == 0 {
					m.ExtraInfo = make([]AuthExtraInfoType, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v AuthExtraInfoType
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowAuthentication
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= AuthExtraInfoType(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.ExtraInfo = append(m.ExtraInfo, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field ExtraInfo", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAuthentication(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAuthentication
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAuthentication
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AuthSession) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAuthentication
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AuthSession: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AuthSession: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthentication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuthHolder", wireType)
			}
			m.AuthHolder = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthentication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AuthHolder |= AuthHolder(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppId", wireType)
			}
			m.AppId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthentication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AppId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppTitle", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthentication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuthentication
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAuthentication
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AppTitle = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeviceTitle", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthentication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuthentication
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAuthentication
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DeviceTitle = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuthTime", wireType)
			}
			m.AuthTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthentication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AuthTime |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuthLocation", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthentication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuthentication
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAuthentication
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AuthLocation = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Latitude", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthentication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAuthentication
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAuthentication
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Latitude == nil {
				m.Latitude = &types.DoubleValue{}
			}
			if err := m.Latitude.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Longitude", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthentication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAuthentication
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAuthentication
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Longitude == nil {
				m.Longitude = &types.DoubleValue{}
			}
			if err := m.Longitude.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAuthentication(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAuthentication
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAuthentication
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestGetAuthSessions) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAuthentication
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestGetAuthSessions: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestGetAuthSessions: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipAuthentication(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAuthentication
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAuthentication
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResponseGetAuthSessions) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAuthentication
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResponseGetAuthSessions: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResponseGetAuthSessions: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserAuths", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthentication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAuthentication
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAuthentication
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserAuths = append(m.UserAuths, &AuthSession{})
			if err := m.UserAuths[len(m.UserAuths)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAuthentication(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAuthentication
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAuthentication
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestTerminateSession) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAuthentication
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestTerminateSession: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestTerminateSession: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthentication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAuthentication(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAuthentication
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAuthentication
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestTerminateAllSessions) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAuthentication
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestTerminateAllSessions: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestTerminateAllSessions: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipAuthentication(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAuthentication
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAuthentication
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestSignOut) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAuthentication
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestSignOut: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestSignOut: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipAuthentication(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAuthentication
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAuthentication
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ForceReloadField) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAuthentication
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ForceReloadField: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ForceReloadField: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ForceReloadDialogs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthentication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAuthentication
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAuthentication
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ForceReloadDialogs{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Body = &ForceReloadField_ForceReloadDialogs{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ForceReloadContacts", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthentication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAuthentication
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAuthentication
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ForceReloadContacts{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Body = &ForceReloadField_ForceReloadContacts{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ForceReloadHistory", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthentication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAuthentication
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAuthentication
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ForceReloadHistory{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Body = &ForceReloadField_ForceReloadHistory{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAuthentication(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAuthentication
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAuthentication
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ForceReloadDialogs) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAuthentication
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ForceReloadDialogs: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ForceReloadDialogs: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipAuthentication(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAuthentication
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAuthentication
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ForceReloadContacts) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAuthentication
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ForceReloadContacts: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ForceReloadContacts: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipAuthentication(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAuthentication
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAuthentication
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ForceReloadHistory) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAuthentication
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ForceReloadHistory: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ForceReloadHistory: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Peer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthentication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAuthentication
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAuthentication
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Peer == nil {
				m.Peer = &Peer{}
			}
			if err := m.Peer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAuthentication(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAuthentication
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAuthentication
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateForceReloadState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAuthentication
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateForceReloadState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateForceReloadState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fields", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthentication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAuthentication
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAuthentication
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Fields = append(m.Fields, &ForceReloadField{})
			if err := m.Fields[len(m.Fields)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAuthentication(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAuthentication
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAuthentication
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestSignInObsolete) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAuthentication
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestSignInObsolete: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestSignInObsolete: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PhoneNumber", wireType)
			}
			m.PhoneNumber = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthentication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PhoneNumber |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SmsHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthentication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuthentication
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAuthentication
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SmsHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SmsCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthentication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuthentication
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAuthentication
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SmsCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeviceHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthentication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthAuthentication
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthAuthentication
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DeviceHash = append(m.DeviceHash[:0], dAtA[iNdEx:postIndex]...)
			if m.DeviceHash == nil {
				m.DeviceHash = []byte{}
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeviceTitle", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthentication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuthentication
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAuthentication
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DeviceTitle = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppId", wireType)
			}
			m.AppId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthentication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AppId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthentication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuthentication
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAuthentication
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AppKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAuthentication(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAuthentication
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAuthentication
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestSignUpObsolete) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAuthentication
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestSignUpObsolete: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestSignUpObsolete: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PhoneNumber", wireType)
			}
			m.PhoneNumber = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthentication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PhoneNumber |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SmsHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthentication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuthentication
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAuthentication
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SmsHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SmsCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthentication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuthentication
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAuthentication
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SmsCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthentication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuthentication
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAuthentication
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeviceHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthentication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthAuthentication
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthAuthentication
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DeviceHash = append(m.DeviceHash[:0], dAtA[iNdEx:postIndex]...)
			if m.DeviceHash == nil {
				m.DeviceHash = []byte{}
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeviceTitle", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthentication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuthentication
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAuthentication
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DeviceTitle = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppId", wireType)
			}
			m.AppId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthentication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AppId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthentication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuthentication
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAuthentication
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AppKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsSilent", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthentication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsSilent = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipAuthentication(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAuthentication
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAuthentication
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestSendAuthCodeObsolete) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAuthentication
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestSendAuthCodeObsolete: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestSendAuthCodeObsolete: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PhoneNumber", wireType)
			}
			m.PhoneNumber = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthentication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PhoneNumber |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppId", wireType)
			}
			m.AppId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthentication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AppId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthentication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuthentication
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAuthentication
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ApiKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAuthentication(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAuthentication
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAuthentication
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResponseSendAuthCodeObsolete) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAuthentication
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResponseSendAuthCodeObsolete: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResponseSendAuthCodeObsolete: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SmsHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthentication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuthentication
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAuthentication
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SmsHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsRegistered", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthentication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsRegistered = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipAuthentication(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAuthentication
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAuthentication
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestSendAuthCallObsolete) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAuthentication
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestSendAuthCallObsolete: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestSendAuthCallObsolete: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PhoneNumber", wireType)
			}
			m.PhoneNumber = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthentication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PhoneNumber |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SmsHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthentication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuthentication
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAuthentication
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SmsHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppId", wireType)
			}
			m.AppId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthentication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AppId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthentication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuthentication
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAuthentication
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ApiKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAuthentication(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAuthentication
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAuthentication
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestChangePassword) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAuthentication
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestChangePassword: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestChangePassword: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OldPassword", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthentication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuthentication
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAuthentication
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OldPassword = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewPassword", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthentication
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuthentication
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAuthentication
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NewPassword = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAuthentication(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAuthentication
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAuthentication
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipAuthentication(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowAuthentication
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAuthentication
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAuthentication
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthAuthentication
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupAuthentication
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthAuthentication
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthAuthentication        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowAuthentication          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupAuthentication = fmt.Errorf("proto: unexpected end of group")
)
