// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: users.proto

package dialog

import (
	context "context"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	types "github.com/gogo/protobuf/types"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strconv "strconv"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Sex int32

const (
	SEX_UNKNOWN Sex = 0
	SEX_MALE    Sex = 2
	SEX_FEMALE  Sex = 3
)

var Sex_name = map[int32]string{
	0: "SEX_UNKNOWN",
	2: "SEX_MALE",
	3: "SEX_FEMALE",
}

var Sex_value = map[string]int32{
	"SEX_UNKNOWN": 0,
	"SEX_MALE":    2,
	"SEX_FEMALE":  3,
}

func (Sex) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_030765f334c86cea, []int{0}
}

type ContactType int32

const (
	CONTACTTYPE_UNKNOWN ContactType = 0
	CONTACTTYPE_PHONE   ContactType = 1
	CONTACTTYPE_EMAIL   ContactType = 2
	CONTACTTYPE_WEB     ContactType = 3
	CONTACTTYPE_SOCIAL  ContactType = 4
)

var ContactType_name = map[int32]string{
	0: "CONTACTTYPE_UNKNOWN",
	1: "CONTACTTYPE_PHONE",
	2: "CONTACTTYPE_EMAIL",
	3: "CONTACTTYPE_WEB",
	4: "CONTACTTYPE_SOCIAL",
}

var ContactType_value = map[string]int32{
	"CONTACTTYPE_UNKNOWN": 0,
	"CONTACTTYPE_PHONE":   1,
	"CONTACTTYPE_EMAIL":   2,
	"CONTACTTYPE_WEB":     3,
	"CONTACTTYPE_SOCIAL":  4,
}

func (ContactType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_030765f334c86cea, []int{1}
}

type UserStatusType int32

const (
	USERSTATUSTYPE_UNKNOWN      UserStatusType = 0
	USERSTATUSTYPE_UNSET        UserStatusType = 1
	USERSTATUSTYPE_AWAY         UserStatusType = 2
	USERSTATUSTYPE_DONOTDISTURB UserStatusType = 3
	USERSTATUSTYPE_INVISIBLE    UserStatusType = 4
	USERSTATUSTYPE_BUSY         UserStatusType = 5
)

var UserStatusType_name = map[int32]string{
	0: "USERSTATUSTYPE_UNKNOWN",
	1: "USERSTATUSTYPE_UNSET",
	2: "USERSTATUSTYPE_AWAY",
	3: "USERSTATUSTYPE_DONOTDISTURB",
	4: "USERSTATUSTYPE_INVISIBLE",
	5: "USERSTATUSTYPE_BUSY",
}

var UserStatusType_value = map[string]int32{
	"USERSTATUSTYPE_UNKNOWN":      0,
	"USERSTATUSTYPE_UNSET":        1,
	"USERSTATUSTYPE_AWAY":         2,
	"USERSTATUSTYPE_DONOTDISTURB": 3,
	"USERSTATUSTYPE_INVISIBLE":    4,
	"USERSTATUSTYPE_BUSY":         5,
}

func (UserStatusType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_030765f334c86cea, []int{2}
}

type UserData_Lifecycle int32

const (
	MISSED              UserData_Lifecycle = 0
	ACTIVE              UserData_Lifecycle = 1
	DELETED             UserData_Lifecycle = 2
	BLOCKED             UserData_Lifecycle = 3
	BLOCKED_AND_DELETED UserData_Lifecycle = 4
)

var UserData_Lifecycle_name = map[int32]string{
	0: "MISSED",
	1: "ACTIVE",
	2: "DELETED",
	3: "BLOCKED",
	4: "BLOCKED_AND_DELETED",
}

var UserData_Lifecycle_value = map[string]int32{
	"MISSED":              0,
	"ACTIVE":              1,
	"DELETED":             2,
	"BLOCKED":             3,
	"BLOCKED_AND_DELETED": 4,
}

func (UserData_Lifecycle) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_030765f334c86cea, []int{2, 0}
}

type UserData_Hint int32

const (
	user_hint_regular UserData_Hint = 0
	user_hint_guest   UserData_Hint = 1
)

var UserData_Hint_name = map[int32]string{
	0: "user_hint_regular",
	1: "user_hint_guest",
}

var UserData_Hint_value = map[string]int32{
	"user_hint_regular": 0,
	"user_hint_guest":   1,
}

func (UserData_Hint) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_030765f334c86cea, []int{2, 1}
}

// Contact information record
type ContactRecord struct {
	Type ContactType `protobuf:"varint,1,opt,name=type,proto3,enum=dialog.ContactType" json:"type,omitempty"`
	//*
	// Value for specification type of contact,
	// for example 'mobile/standalone/office' for phones or 'vk/fb/telegram'
	// for extenrnal networks.
	TypeSpec    *types.StringValue `protobuf:"bytes,6,opt,name=type_spec,json=typeSpec,proto3" json:"type_spec,omitempty"`
	StringValue *types.StringValue `protobuf:"bytes,2,opt,name=string_value,json=stringValue,proto3" json:"string_value,omitempty"`
	LongValue   *types.Int64Value  `protobuf:"bytes,3,opt,name=long_value,json=longValue,proto3" json:"long_value,omitempty"`
	Title       *types.StringValue `protobuf:"bytes,4,opt,name=title,proto3" json:"title,omitempty"`
	Subtitle    *types.StringValue `protobuf:"bytes,5,opt,name=subtitle,proto3" json:"subtitle,omitempty"`
}

func (m *ContactRecord) Reset()      { *m = ContactRecord{} }
func (*ContactRecord) ProtoMessage() {}
func (*ContactRecord) Descriptor() ([]byte, []int) {
	return fileDescriptor_030765f334c86cea, []int{0}
}
func (m *ContactRecord) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ContactRecord) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ContactRecord.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ContactRecord) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ContactRecord.Merge(m, src)
}
func (m *ContactRecord) XXX_Size() int {
	return m.Size()
}
func (m *ContactRecord) XXX_DiscardUnknown() {
	xxx_messageInfo_ContactRecord.DiscardUnknown(m)
}

var xxx_messageInfo_ContactRecord proto.InternalMessageInfo

func (m *ContactRecord) GetType() ContactType {
	if m != nil {
		return m.Type
	}
	return CONTACTTYPE_UNKNOWN
}

func (m *ContactRecord) GetTypeSpec() *types.StringValue {
	if m != nil {
		return m.TypeSpec
	}
	return nil
}

func (m *ContactRecord) GetStringValue() *types.StringValue {
	if m != nil {
		return m.StringValue
	}
	return nil
}

func (m *ContactRecord) GetLongValue() *types.Int64Value {
	if m != nil {
		return m.LongValue
	}
	return nil
}

func (m *ContactRecord) GetTitle() *types.StringValue {
	if m != nil {
		return m.Title
	}
	return nil
}

func (m *ContactRecord) GetSubtitle() *types.StringValue {
	if m != nil {
		return m.Subtitle
	}
	return nil
}

// User's status
type UserStatus struct {
	Type UserStatusType `protobuf:"varint,1,opt,name=type,proto3,enum=dialog.UserStatusType" json:"type,omitempty"`
	/// Text supplied by user
	Text  *types.StringValue `protobuf:"bytes,2,opt,name=text,proto3" json:"text,omitempty"`
	Clock int64              `protobuf:"varint,3,opt,name=clock,proto3" json:"clock,omitempty"`
}

func (m *UserStatus) Reset()      { *m = UserStatus{} }
func (*UserStatus) ProtoMessage() {}
func (*UserStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_030765f334c86cea, []int{1}
}
func (m *UserStatus) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UserStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UserStatus.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UserStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserStatus.Merge(m, src)
}
func (m *UserStatus) XXX_Size() int {
	return m.Size()
}
func (m *UserStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_UserStatus.DiscardUnknown(m)
}

var xxx_messageInfo_UserStatus proto.InternalMessageInfo

func (m *UserStatus) GetType() UserStatusType {
	if m != nil {
		return m.Type
	}
	return USERSTATUSTYPE_UNKNOWN
}

func (m *UserStatus) GetText() *types.StringValue {
	if m != nil {
		return m.Text
	}
	return nil
}

func (m *UserStatus) GetClock() int64 {
	if m != nil {
		return m.Clock
	}
	return 0
}

// Main user object
type UserData struct {
	Name          string             `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Nick          *types.StringValue `protobuf:"bytes,2,opt,name=nick,proto3" json:"nick,omitempty"`
	Sex           Sex                `protobuf:"varint,3,opt,name=sex,proto3,enum=dialog.Sex" json:"sex,omitempty"`
	Avatar        *Avatar            `protobuf:"bytes,4,opt,name=avatar,proto3" json:"avatar,omitempty"`
	IsBot         *types.BoolValue   `protobuf:"bytes,5,opt,name=is_bot,json=isBot,proto3" json:"is_bot,omitempty"`
	Status        UserData_Lifecycle `protobuf:"varint,6,opt,name=status,proto3,enum=dialog.UserData_Lifecycle" json:"status,omitempty"`
	UserStatus    *UserStatus        `protobuf:"bytes,7,opt,name=user_status,json=userStatus,proto3" json:"user_status,omitempty"`
	TimeZone      string             `protobuf:"bytes,8,opt,name=time_zone,json=timeZone,proto3" json:"time_zone,omitempty"`
	Exts          []*UserData_Ext    `protobuf:"bytes,9,rep,name=exts,proto3" json:"exts,omitempty"`
	ObsoleteClock *DataClock         `protobuf:"bytes,10,opt,name=obsoleteClock,proto3" json:"obsoleteClock,omitempty"`
	Locales       []string           `protobuf:"bytes,11,rep,name=locales,proto3" json:"locales,omitempty"`
	About         *types.StringValue `protobuf:"bytes,12,opt,name=about,proto3" json:"about,omitempty"`
	ContactInfo   []*ContactRecord   `protobuf:"bytes,13,rep,name=contact_info,json=contactInfo,proto3" json:"contact_info,omitempty"`
	BotCommands   []*BotCommand      `protobuf:"bytes,14,rep,name=bot_commands,json=botCommands,proto3" json:"bot_commands,omitempty"`
	CustomProfile *types.StringValue `protobuf:"bytes,15,opt,name=custom_profile,json=customProfile,proto3" json:"custom_profile,omitempty"`
	/// This parameter intended just to show in UI (client shouldn't base any logic on that)
	Hint  UserData_Hint `protobuf:"varint,17,opt,name=hint,proto3,enum=dialog.UserData_Hint" json:"hint,omitempty"`
	Clock int64         `protobuf:"varint,16,opt,name=clock,proto3" json:"clock,omitempty"`
}

func (m *UserData) Reset()      { *m = UserData{} }
func (*UserData) ProtoMessage() {}
func (*UserData) Descriptor() ([]byte, []int) {
	return fileDescriptor_030765f334c86cea, []int{2}
}
func (m *UserData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UserData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UserData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UserData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserData.Merge(m, src)
}
func (m *UserData) XXX_Size() int {
	return m.Size()
}
func (m *UserData) XXX_DiscardUnknown() {
	xxx_messageInfo_UserData.DiscardUnknown(m)
}

var xxx_messageInfo_UserData proto.InternalMessageInfo

func (m *UserData) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *UserData) GetNick() *types.StringValue {
	if m != nil {
		return m.Nick
	}
	return nil
}

func (m *UserData) GetSex() Sex {
	if m != nil {
		return m.Sex
	}
	return SEX_UNKNOWN
}

func (m *UserData) GetAvatar() *Avatar {
	if m != nil {
		return m.Avatar
	}
	return nil
}

func (m *UserData) GetIsBot() *types.BoolValue {
	if m != nil {
		return m.IsBot
	}
	return nil
}

func (m *UserData) GetStatus() UserData_Lifecycle {
	if m != nil {
		return m.Status
	}
	return MISSED
}

func (m *UserData) GetUserStatus() *UserStatus {
	if m != nil {
		return m.UserStatus
	}
	return nil
}

func (m *UserData) GetTimeZone() string {
	if m != nil {
		return m.TimeZone
	}
	return ""
}

func (m *UserData) GetExts() []*UserData_Ext {
	if m != nil {
		return m.Exts
	}
	return nil
}

func (m *UserData) GetObsoleteClock() *DataClock {
	if m != nil {
		return m.ObsoleteClock
	}
	return nil
}

func (m *UserData) GetLocales() []string {
	if m != nil {
		return m.Locales
	}
	return nil
}

func (m *UserData) GetAbout() *types.StringValue {
	if m != nil {
		return m.About
	}
	return nil
}

func (m *UserData) GetContactInfo() []*ContactRecord {
	if m != nil {
		return m.ContactInfo
	}
	return nil
}

func (m *UserData) GetBotCommands() []*BotCommand {
	if m != nil {
		return m.BotCommands
	}
	return nil
}

func (m *UserData) GetCustomProfile() *types.StringValue {
	if m != nil {
		return m.CustomProfile
	}
	return nil
}

func (m *UserData) GetHint() UserData_Hint {
	if m != nil {
		return m.Hint
	}
	return user_hint_regular
}

func (m *UserData) GetClock() int64 {
	if m != nil {
		return m.Clock
	}
	return 0
}

type UserData_Ext struct {
	Key string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// Types that are valid to be assigned to V:
	//	*UserData_Ext_S
	//	*UserData_Ext_B
	V isUserData_Ext_V `protobuf_oneof:"v"`
}

func (m *UserData_Ext) Reset()      { *m = UserData_Ext{} }
func (*UserData_Ext) ProtoMessage() {}
func (*UserData_Ext) Descriptor() ([]byte, []int) {
	return fileDescriptor_030765f334c86cea, []int{2, 0}
}
func (m *UserData_Ext) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UserData_Ext) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UserData_Ext.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UserData_Ext) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserData_Ext.Merge(m, src)
}
func (m *UserData_Ext) XXX_Size() int {
	return m.Size()
}
func (m *UserData_Ext) XXX_DiscardUnknown() {
	xxx_messageInfo_UserData_Ext.DiscardUnknown(m)
}

var xxx_messageInfo_UserData_Ext proto.InternalMessageInfo

type isUserData_Ext_V interface {
	isUserData_Ext_V()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type UserData_Ext_S struct {
	S string `protobuf:"bytes,2,opt,name=s,proto3,oneof" json:"s,omitempty"`
}
type UserData_Ext_B struct {
	B bool `protobuf:"varint,3,opt,name=b,proto3,oneof" json:"b,omitempty"`
}

func (*UserData_Ext_S) isUserData_Ext_V() {}
func (*UserData_Ext_B) isUserData_Ext_V() {}

func (m *UserData_Ext) GetV() isUserData_Ext_V {
	if m != nil {
		return m.V
	}
	return nil
}

func (m *UserData_Ext) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *UserData_Ext) GetS() string {
	if x, ok := m.GetV().(*UserData_Ext_S); ok {
		return x.S
	}
	return ""
}

func (m *UserData_Ext) GetB() bool {
	if x, ok := m.GetV().(*UserData_Ext_B); ok {
		return x.B
	}
	return false
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*UserData_Ext) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*UserData_Ext_S)(nil),
		(*UserData_Ext_B)(nil),
	}
}

type User struct {
	Id         int32     `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	AccessHash int64     `protobuf:"varint,2,opt,name=access_hash,json=accessHash,proto3" json:"access_hash,omitempty"`
	Data       *UserData `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *User) Reset()      { *m = User{} }
func (*User) ProtoMessage() {}
func (*User) Descriptor() ([]byte, []int) {
	return fileDescriptor_030765f334c86cea, []int{3}
}
func (m *User) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *User) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_User.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *User) XXX_Merge(src proto.Message) {
	xxx_messageInfo_User.Merge(m, src)
}
func (m *User) XXX_Size() int {
	return m.Size()
}
func (m *User) XXX_DiscardUnknown() {
	xxx_messageInfo_User.DiscardUnknown(m)
}

var xxx_messageInfo_User proto.InternalMessageInfo

func (m *User) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *User) GetAccessHash() int64 {
	if m != nil {
		return m.AccessHash
	}
	return 0
}

func (m *User) GetData() *UserData {
	if m != nil {
		return m.Data
	}
	return nil
}

type UserPartialInfo struct {
	Id         int32              `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	AccessHash int64              `protobuf:"varint,2,opt,name=access_hash,json=accessHash,proto3" json:"access_hash,omitempty"`
	Clock      int64              `protobuf:"varint,3,opt,name=clock,proto3" json:"clock,omitempty"`
	Name       string             `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	Nick       *types.StringValue `protobuf:"bytes,5,opt,name=nick,proto3" json:"nick,omitempty"`
	Avatar     *Avatar            `protobuf:"bytes,6,opt,name=avatar,proto3" json:"avatar,omitempty"`
}

func (m *UserPartialInfo) Reset()      { *m = UserPartialInfo{} }
func (*UserPartialInfo) ProtoMessage() {}
func (*UserPartialInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_030765f334c86cea, []int{4}
}
func (m *UserPartialInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UserPartialInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UserPartialInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UserPartialInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserPartialInfo.Merge(m, src)
}
func (m *UserPartialInfo) XXX_Size() int {
	return m.Size()
}
func (m *UserPartialInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_UserPartialInfo.DiscardUnknown(m)
}

var xxx_messageInfo_UserPartialInfo proto.InternalMessageInfo

func (m *UserPartialInfo) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *UserPartialInfo) GetAccessHash() int64 {
	if m != nil {
		return m.AccessHash
	}
	return 0
}

func (m *UserPartialInfo) GetClock() int64 {
	if m != nil {
		return m.Clock
	}
	return 0
}

func (m *UserPartialInfo) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *UserPartialInfo) GetNick() *types.StringValue {
	if m != nil {
		return m.Nick
	}
	return nil
}

func (m *UserPartialInfo) GetAvatar() *Avatar {
	if m != nil {
		return m.Avatar
	}
	return nil
}

type UserProfile struct {
	User               *User              `protobuf:"bytes,1,opt,name=user,proto3" json:"user,omitempty"`
	ContactInfo        []*ContactRecord   `protobuf:"bytes,2,rep,name=contact_info,json=contactInfo,proto3" json:"contact_info,omitempty"`
	About              *types.StringValue `protobuf:"bytes,3,opt,name=about,proto3" json:"about,omitempty"`
	PreferredLanguages []string           `protobuf:"bytes,4,rep,name=preferred_languages,json=preferredLanguages,proto3" json:"preferred_languages,omitempty"`
	/// Time Zone of user in TZ format
	TimeZone    *types.StringValue `protobuf:"bytes,5,opt,name=time_zone,json=timeZone,proto3" json:"time_zone,omitempty"`
	BotCommands []*BotCommand      `protobuf:"bytes,6,rep,name=bot_commands,json=botCommands,proto3" json:"bot_commands,omitempty"`
	/// custom user profile info in JSON format
	CustomProfile    string             `protobuf:"bytes,9,opt,name=custom_profile,json=customProfile,proto3" json:"custom_profile,omitempty"`
	IntegrationToken *types.StringValue `protobuf:"bytes,10,opt,name=integration_token,json=integrationToken,proto3" json:"integration_token,omitempty"`
}

func (m *UserProfile) Reset()      { *m = UserProfile{} }
func (*UserProfile) ProtoMessage() {}
func (*UserProfile) Descriptor() ([]byte, []int) {
	return fileDescriptor_030765f334c86cea, []int{5}
}
func (m *UserProfile) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UserProfile) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UserProfile.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UserProfile) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserProfile.Merge(m, src)
}
func (m *UserProfile) XXX_Size() int {
	return m.Size()
}
func (m *UserProfile) XXX_DiscardUnknown() {
	xxx_messageInfo_UserProfile.DiscardUnknown(m)
}

var xxx_messageInfo_UserProfile proto.InternalMessageInfo

func (m *UserProfile) GetUser() *User {
	if m != nil {
		return m.User
	}
	return nil
}

func (m *UserProfile) GetContactInfo() []*ContactRecord {
	if m != nil {
		return m.ContactInfo
	}
	return nil
}

func (m *UserProfile) GetAbout() *types.StringValue {
	if m != nil {
		return m.About
	}
	return nil
}

func (m *UserProfile) GetPreferredLanguages() []string {
	if m != nil {
		return m.PreferredLanguages
	}
	return nil
}

func (m *UserProfile) GetTimeZone() *types.StringValue {
	if m != nil {
		return m.TimeZone
	}
	return nil
}

func (m *UserProfile) GetBotCommands() []*BotCommand {
	if m != nil {
		return m.BotCommands
	}
	return nil
}

func (m *UserProfile) GetCustomProfile() string {
	if m != nil {
		return m.CustomProfile
	}
	return ""
}

func (m *UserProfile) GetIntegrationToken() *types.StringValue {
	if m != nil {
		return m.IntegrationToken
	}
	return nil
}

// Full User representation - deprecated
type FullUser struct {
	Id                 int32              `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	ContactInfo        []*ContactRecord   `protobuf:"bytes,2,rep,name=contact_info,json=contactInfo,proto3" json:"contact_info,omitempty"`
	About              *types.StringValue `protobuf:"bytes,3,opt,name=about,proto3" json:"about,omitempty"`
	PreferredLanguages []string           `protobuf:"bytes,4,rep,name=preferred_languages,json=preferredLanguages,proto3" json:"preferred_languages,omitempty"`
	/// Time Zone of user in TZ format
	TimeZone    *types.StringValue `protobuf:"bytes,5,opt,name=time_zone,json=timeZone,proto3" json:"time_zone,omitempty"`
	BotCommands []*BotCommand      `protobuf:"bytes,6,rep,name=bot_commands,json=botCommands,proto3" json:"bot_commands,omitempty"`
	IsBlocked   *types.BoolValue   `protobuf:"bytes,8,opt,name=is_blocked,json=isBlocked,proto3" json:"is_blocked,omitempty"`
	/// custom user profile info in JSON format
	CustomProfile    string             `protobuf:"bytes,9,opt,name=custom_profile,json=customProfile,proto3" json:"custom_profile,omitempty"`
	IntegrationToken *types.StringValue `protobuf:"bytes,10,opt,name=integration_token,json=integrationToken,proto3" json:"integration_token,omitempty"`
	Status           *UserStatus        `protobuf:"bytes,11,opt,name=status,proto3" json:"status,omitempty"`
}

func (m *FullUser) Reset()      { *m = FullUser{} }
func (*FullUser) ProtoMessage() {}
func (*FullUser) Descriptor() ([]byte, []int) {
	return fileDescriptor_030765f334c86cea, []int{6}
}
func (m *FullUser) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FullUser) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FullUser.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FullUser) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FullUser.Merge(m, src)
}
func (m *FullUser) XXX_Size() int {
	return m.Size()
}
func (m *FullUser) XXX_DiscardUnknown() {
	xxx_messageInfo_FullUser.DiscardUnknown(m)
}

var xxx_messageInfo_FullUser proto.InternalMessageInfo

func (m *FullUser) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *FullUser) GetContactInfo() []*ContactRecord {
	if m != nil {
		return m.ContactInfo
	}
	return nil
}

func (m *FullUser) GetAbout() *types.StringValue {
	if m != nil {
		return m.About
	}
	return nil
}

func (m *FullUser) GetPreferredLanguages() []string {
	if m != nil {
		return m.PreferredLanguages
	}
	return nil
}

func (m *FullUser) GetTimeZone() *types.StringValue {
	if m != nil {
		return m.TimeZone
	}
	return nil
}

func (m *FullUser) GetBotCommands() []*BotCommand {
	if m != nil {
		return m.BotCommands
	}
	return nil
}

func (m *FullUser) GetIsBlocked() *types.BoolValue {
	if m != nil {
		return m.IsBlocked
	}
	return nil
}

func (m *FullUser) GetCustomProfile() string {
	if m != nil {
		return m.CustomProfile
	}
	return ""
}

func (m *FullUser) GetIntegrationToken() *types.StringValue {
	if m != nil {
		return m.IntegrationToken
	}
	return nil
}

func (m *FullUser) GetStatus() *UserStatus {
	if m != nil {
		return m.Status
	}
	return nil
}

// Available bot commands
type BotCommand struct {
	/// Slash command name (wihtout slash)
	SlashCommand string `protobuf:"bytes,1,opt,name=slash_command,json=slashCommand,proto3" json:"slash_command,omitempty"`
	/// Slash command description
	Description string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	/// Optional Localization Key for i18n
	LocKey *types.StringValue `protobuf:"bytes,3,opt,name=loc_key,json=locKey,proto3" json:"loc_key,omitempty"`
}

func (m *BotCommand) Reset()      { *m = BotCommand{} }
func (*BotCommand) ProtoMessage() {}
func (*BotCommand) Descriptor() ([]byte, []int) {
	return fileDescriptor_030765f334c86cea, []int{7}
}
func (m *BotCommand) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BotCommand) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BotCommand.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BotCommand) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BotCommand.Merge(m, src)
}
func (m *BotCommand) XXX_Size() int {
	return m.Size()
}
func (m *BotCommand) XXX_DiscardUnknown() {
	xxx_messageInfo_BotCommand.DiscardUnknown(m)
}

var xxx_messageInfo_BotCommand proto.InternalMessageInfo

func (m *BotCommand) GetSlashCommand() string {
	if m != nil {
		return m.SlashCommand
	}
	return ""
}

func (m *BotCommand) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *BotCommand) GetLocKey() *types.StringValue {
	if m != nil {
		return m.LocKey
	}
	return nil
}

// Renaming of user's visible name
type RequestEditUserLocalName struct {
	Uid        int32  `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`
	AccessHash int64  `protobuf:"varint,2,opt,name=access_hash,json=accessHash,proto3" json:"access_hash,omitempty"`
	Name       string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
}

func (m *RequestEditUserLocalName) Reset()      { *m = RequestEditUserLocalName{} }
func (*RequestEditUserLocalName) ProtoMessage() {}
func (*RequestEditUserLocalName) Descriptor() ([]byte, []int) {
	return fileDescriptor_030765f334c86cea, []int{8}
}
func (m *RequestEditUserLocalName) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RequestEditUserLocalName) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RequestEditUserLocalName.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RequestEditUserLocalName) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RequestEditUserLocalName.Merge(m, src)
}
func (m *RequestEditUserLocalName) XXX_Size() int {
	return m.Size()
}
func (m *RequestEditUserLocalName) XXX_DiscardUnknown() {
	xxx_messageInfo_RequestEditUserLocalName.DiscardUnknown(m)
}

var xxx_messageInfo_RequestEditUserLocalName proto.InternalMessageInfo

func (m *RequestEditUserLocalName) GetUid() int32 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func (m *RequestEditUserLocalName) GetAccessHash() int64 {
	if m != nil {
		return m.AccessHash
	}
	return 0
}

func (m *RequestEditUserLocalName) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type RequestLoadUserData struct {
	Claims []*RequestLoadUserData_Claim `protobuf:"bytes,1,rep,name=claims,proto3" json:"claims,omitempty"`
}

func (m *RequestLoadUserData) Reset()      { *m = RequestLoadUserData{} }
func (*RequestLoadUserData) ProtoMessage() {}
func (*RequestLoadUserData) Descriptor() ([]byte, []int) {
	return fileDescriptor_030765f334c86cea, []int{9}
}
func (m *RequestLoadUserData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RequestLoadUserData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RequestLoadUserData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RequestLoadUserData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RequestLoadUserData.Merge(m, src)
}
func (m *RequestLoadUserData) XXX_Size() int {
	return m.Size()
}
func (m *RequestLoadUserData) XXX_DiscardUnknown() {
	xxx_messageInfo_RequestLoadUserData.DiscardUnknown(m)
}

var xxx_messageInfo_RequestLoadUserData proto.InternalMessageInfo

func (m *RequestLoadUserData) GetClaims() []*RequestLoadUserData_Claim {
	if m != nil {
		return m.Claims
	}
	return nil
}

type RequestLoadUserData_Claim struct {
	UserPeer *Peer `protobuf:"bytes,1,opt,name=user_peer,json=userPeer,proto3" json:"user_peer,omitempty"`
	// Types that are valid to be assigned to Kind:
	//	*RequestLoadUserData_Claim_P2P
	//	*RequestLoadUserData_Claim_GroupMember
	//	*RequestLoadUserData_Claim_Contact
	Kind isRequestLoadUserData_Claim_Kind `protobuf_oneof:"kind"`
}

func (m *RequestLoadUserData_Claim) Reset()      { *m = RequestLoadUserData_Claim{} }
func (*RequestLoadUserData_Claim) ProtoMessage() {}
func (*RequestLoadUserData_Claim) Descriptor() ([]byte, []int) {
	return fileDescriptor_030765f334c86cea, []int{9, 0}
}
func (m *RequestLoadUserData_Claim) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RequestLoadUserData_Claim) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RequestLoadUserData_Claim.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RequestLoadUserData_Claim) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RequestLoadUserData_Claim.Merge(m, src)
}
func (m *RequestLoadUserData_Claim) XXX_Size() int {
	return m.Size()
}
func (m *RequestLoadUserData_Claim) XXX_DiscardUnknown() {
	xxx_messageInfo_RequestLoadUserData_Claim.DiscardUnknown(m)
}

var xxx_messageInfo_RequestLoadUserData_Claim proto.InternalMessageInfo

type isRequestLoadUserData_Claim_Kind interface {
	isRequestLoadUserData_Claim_Kind()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type RequestLoadUserData_Claim_P2P struct {
	P2P bool `protobuf:"varint,2,opt,name=p2p,proto3,oneof" json:"p2p,omitempty"`
}
type RequestLoadUserData_Claim_GroupMember struct {
	GroupMember *Peer `protobuf:"bytes,3,opt,name=group_member,json=groupMember,proto3,oneof" json:"group_member,omitempty"`
}
type RequestLoadUserData_Claim_Contact struct {
	Contact bool `protobuf:"varint,4,opt,name=contact,proto3,oneof" json:"contact,omitempty"`
}

func (*RequestLoadUserData_Claim_P2P) isRequestLoadUserData_Claim_Kind()         {}
func (*RequestLoadUserData_Claim_GroupMember) isRequestLoadUserData_Claim_Kind() {}
func (*RequestLoadUserData_Claim_Contact) isRequestLoadUserData_Claim_Kind()     {}

func (m *RequestLoadUserData_Claim) GetKind() isRequestLoadUserData_Claim_Kind {
	if m != nil {
		return m.Kind
	}
	return nil
}

func (m *RequestLoadUserData_Claim) GetUserPeer() *Peer {
	if m != nil {
		return m.UserPeer
	}
	return nil
}

func (m *RequestLoadUserData_Claim) GetP2P() bool {
	if x, ok := m.GetKind().(*RequestLoadUserData_Claim_P2P); ok {
		return x.P2P
	}
	return false
}

func (m *RequestLoadUserData_Claim) GetGroupMember() *Peer {
	if x, ok := m.GetKind().(*RequestLoadUserData_Claim_GroupMember); ok {
		return x.GroupMember
	}
	return nil
}

func (m *RequestLoadUserData_Claim) GetContact() bool {
	if x, ok := m.GetKind().(*RequestLoadUserData_Claim_Contact); ok {
		return x.Contact
	}
	return false
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*RequestLoadUserData_Claim) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*RequestLoadUserData_Claim_P2P)(nil),
		(*RequestLoadUserData_Claim_GroupMember)(nil),
		(*RequestLoadUserData_Claim_Contact)(nil),
	}
}

type ResponseLoadUserData struct {
	Users []*User `protobuf:"bytes,1,rep,name=users,proto3" json:"users,omitempty"`
}

func (m *ResponseLoadUserData) Reset()      { *m = ResponseLoadUserData{} }
func (*ResponseLoadUserData) ProtoMessage() {}
func (*ResponseLoadUserData) Descriptor() ([]byte, []int) {
	return fileDescriptor_030765f334c86cea, []int{10}
}
func (m *ResponseLoadUserData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ResponseLoadUserData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ResponseLoadUserData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ResponseLoadUserData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResponseLoadUserData.Merge(m, src)
}
func (m *ResponseLoadUserData) XXX_Size() int {
	return m.Size()
}
func (m *ResponseLoadUserData) XXX_DiscardUnknown() {
	xxx_messageInfo_ResponseLoadUserData.DiscardUnknown(m)
}

var xxx_messageInfo_ResponseLoadUserData proto.InternalMessageInfo

func (m *ResponseLoadUserData) GetUsers() []*User {
	if m != nil {
		return m.Users
	}
	return nil
}

type UpdateUser struct {
	Id   int32     `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Data *UserData `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *UpdateUser) Reset()      { *m = UpdateUser{} }
func (*UpdateUser) ProtoMessage() {}
func (*UpdateUser) Descriptor() ([]byte, []int) {
	return fileDescriptor_030765f334c86cea, []int{11}
}
func (m *UpdateUser) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateUser) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateUser.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateUser) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateUser.Merge(m, src)
}
func (m *UpdateUser) XXX_Size() int {
	return m.Size()
}
func (m *UpdateUser) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateUser.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateUser proto.InternalMessageInfo

func (m *UpdateUser) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *UpdateUser) GetData() *UserData {
	if m != nil {
		return m.Data
	}
	return nil
}

// Update about avatar changed
type UpdateUserAvatarChanged struct {
	Uid    int32   `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`
	Avatar *Avatar `protobuf:"bytes,2,opt,name=avatar,proto3" json:"avatar,omitempty"`
}

func (m *UpdateUserAvatarChanged) Reset()      { *m = UpdateUserAvatarChanged{} }
func (*UpdateUserAvatarChanged) ProtoMessage() {}
func (*UpdateUserAvatarChanged) Descriptor() ([]byte, []int) {
	return fileDescriptor_030765f334c86cea, []int{12}
}
func (m *UpdateUserAvatarChanged) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateUserAvatarChanged) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateUserAvatarChanged.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateUserAvatarChanged) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateUserAvatarChanged.Merge(m, src)
}
func (m *UpdateUserAvatarChanged) XXX_Size() int {
	return m.Size()
}
func (m *UpdateUserAvatarChanged) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateUserAvatarChanged.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateUserAvatarChanged proto.InternalMessageInfo

func (m *UpdateUserAvatarChanged) GetUid() int32 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func (m *UpdateUserAvatarChanged) GetAvatar() *Avatar {
	if m != nil {
		return m.Avatar
	}
	return nil
}

// Update about name changed
type UpdateUserNameChanged struct {
	Uid  int32  `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (m *UpdateUserNameChanged) Reset()      { *m = UpdateUserNameChanged{} }
func (*UpdateUserNameChanged) ProtoMessage() {}
func (*UpdateUserNameChanged) Descriptor() ([]byte, []int) {
	return fileDescriptor_030765f334c86cea, []int{13}
}
func (m *UpdateUserNameChanged) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateUserNameChanged) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateUserNameChanged.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateUserNameChanged) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateUserNameChanged.Merge(m, src)
}
func (m *UpdateUserNameChanged) XXX_Size() int {
	return m.Size()
}
func (m *UpdateUserNameChanged) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateUserNameChanged.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateUserNameChanged proto.InternalMessageInfo

func (m *UpdateUserNameChanged) GetUid() int32 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func (m *UpdateUserNameChanged) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

// Update about local name changed
type UpdateUserLocalNameChanged struct {
	Uid       int32              `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`
	LocalName *types.StringValue `protobuf:"bytes,2,opt,name=local_name,json=localName,proto3" json:"local_name,omitempty"`
}

func (m *UpdateUserLocalNameChanged) Reset()      { *m = UpdateUserLocalNameChanged{} }
func (*UpdateUserLocalNameChanged) ProtoMessage() {}
func (*UpdateUserLocalNameChanged) Descriptor() ([]byte, []int) {
	return fileDescriptor_030765f334c86cea, []int{14}
}
func (m *UpdateUserLocalNameChanged) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateUserLocalNameChanged) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateUserLocalNameChanged.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateUserLocalNameChanged) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateUserLocalNameChanged.Merge(m, src)
}
func (m *UpdateUserLocalNameChanged) XXX_Size() int {
	return m.Size()
}
func (m *UpdateUserLocalNameChanged) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateUserLocalNameChanged.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateUserLocalNameChanged proto.InternalMessageInfo

func (m *UpdateUserLocalNameChanged) GetUid() int32 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func (m *UpdateUserLocalNameChanged) GetLocalName() *types.StringValue {
	if m != nil {
		return m.LocalName
	}
	return nil
}

// Update about contact information change
type UpdateUserContactsChanged struct {
	Uid            int32            `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`
	ContactRecords []*ContactRecord `protobuf:"bytes,4,rep,name=contact_records,json=contactRecords,proto3" json:"contact_records,omitempty"`
}

func (m *UpdateUserContactsChanged) Reset()      { *m = UpdateUserContactsChanged{} }
func (*UpdateUserContactsChanged) ProtoMessage() {}
func (*UpdateUserContactsChanged) Descriptor() ([]byte, []int) {
	return fileDescriptor_030765f334c86cea, []int{15}
}
func (m *UpdateUserContactsChanged) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateUserContactsChanged) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateUserContactsChanged.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateUserContactsChanged) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateUserContactsChanged.Merge(m, src)
}
func (m *UpdateUserContactsChanged) XXX_Size() int {
	return m.Size()
}
func (m *UpdateUserContactsChanged) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateUserContactsChanged.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateUserContactsChanged proto.InternalMessageInfo

func (m *UpdateUserContactsChanged) GetUid() int32 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func (m *UpdateUserContactsChanged) GetContactRecords() []*ContactRecord {
	if m != nil {
		return m.ContactRecords
	}
	return nil
}

// Update about nick changed
type UpdateUserNickChanged struct {
	Uid      int32              `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`
	Nickname *types.StringValue `protobuf:"bytes,2,opt,name=nickname,proto3" json:"nickname,omitempty"`
}

func (m *UpdateUserNickChanged) Reset()      { *m = UpdateUserNickChanged{} }
func (*UpdateUserNickChanged) ProtoMessage() {}
func (*UpdateUserNickChanged) Descriptor() ([]byte, []int) {
	return fileDescriptor_030765f334c86cea, []int{16}
}
func (m *UpdateUserNickChanged) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateUserNickChanged) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateUserNickChanged.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateUserNickChanged) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateUserNickChanged.Merge(m, src)
}
func (m *UpdateUserNickChanged) XXX_Size() int {
	return m.Size()
}
func (m *UpdateUserNickChanged) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateUserNickChanged.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateUserNickChanged proto.InternalMessageInfo

func (m *UpdateUserNickChanged) GetUid() int32 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func (m *UpdateUserNickChanged) GetNickname() *types.StringValue {
	if m != nil {
		return m.Nickname
	}
	return nil
}

// Update about user's about changed
type UpdateUserAboutChanged struct {
	Uid   int32              `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`
	About *types.StringValue `protobuf:"bytes,2,opt,name=about,proto3" json:"about,omitempty"`
}

func (m *UpdateUserAboutChanged) Reset()      { *m = UpdateUserAboutChanged{} }
func (*UpdateUserAboutChanged) ProtoMessage() {}
func (*UpdateUserAboutChanged) Descriptor() ([]byte, []int) {
	return fileDescriptor_030765f334c86cea, []int{17}
}
func (m *UpdateUserAboutChanged) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateUserAboutChanged) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateUserAboutChanged.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateUserAboutChanged) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateUserAboutChanged.Merge(m, src)
}
func (m *UpdateUserAboutChanged) XXX_Size() int {
	return m.Size()
}
func (m *UpdateUserAboutChanged) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateUserAboutChanged.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateUserAboutChanged proto.InternalMessageInfo

func (m *UpdateUserAboutChanged) GetUid() int32 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func (m *UpdateUserAboutChanged) GetAbout() *types.StringValue {
	if m != nil {
		return m.About
	}
	return nil
}

// Update about user's preferred languages
type UpdateUserPreferredLanguagesChanged struct {
	Uid                int32    `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`
	PreferredLanguages []string `protobuf:"bytes,2,rep,name=preferred_languages,json=preferredLanguages,proto3" json:"preferred_languages,omitempty"`
}

func (m *UpdateUserPreferredLanguagesChanged) Reset()      { *m = UpdateUserPreferredLanguagesChanged{} }
func (*UpdateUserPreferredLanguagesChanged) ProtoMessage() {}
func (*UpdateUserPreferredLanguagesChanged) Descriptor() ([]byte, []int) {
	return fileDescriptor_030765f334c86cea, []int{18}
}
func (m *UpdateUserPreferredLanguagesChanged) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateUserPreferredLanguagesChanged) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateUserPreferredLanguagesChanged.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateUserPreferredLanguagesChanged) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateUserPreferredLanguagesChanged.Merge(m, src)
}
func (m *UpdateUserPreferredLanguagesChanged) XXX_Size() int {
	return m.Size()
}
func (m *UpdateUserPreferredLanguagesChanged) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateUserPreferredLanguagesChanged.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateUserPreferredLanguagesChanged proto.InternalMessageInfo

func (m *UpdateUserPreferredLanguagesChanged) GetUid() int32 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func (m *UpdateUserPreferredLanguagesChanged) GetPreferredLanguages() []string {
	if m != nil {
		return m.PreferredLanguages
	}
	return nil
}

// User TimeZone changed
type UpdateUserTimeZoneChanged struct {
	Uid      int32              `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`
	TimeZone *types.StringValue `protobuf:"bytes,2,opt,name=time_zone,json=timeZone,proto3" json:"time_zone,omitempty"`
}

func (m *UpdateUserTimeZoneChanged) Reset()      { *m = UpdateUserTimeZoneChanged{} }
func (*UpdateUserTimeZoneChanged) ProtoMessage() {}
func (*UpdateUserTimeZoneChanged) Descriptor() ([]byte, []int) {
	return fileDescriptor_030765f334c86cea, []int{19}
}
func (m *UpdateUserTimeZoneChanged) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateUserTimeZoneChanged) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateUserTimeZoneChanged.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateUserTimeZoneChanged) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateUserTimeZoneChanged.Merge(m, src)
}
func (m *UpdateUserTimeZoneChanged) XXX_Size() int {
	return m.Size()
}
func (m *UpdateUserTimeZoneChanged) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateUserTimeZoneChanged.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateUserTimeZoneChanged proto.InternalMessageInfo

func (m *UpdateUserTimeZoneChanged) GetUid() int32 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func (m *UpdateUserTimeZoneChanged) GetTimeZone() *types.StringValue {
	if m != nil {
		return m.TimeZone
	}
	return nil
}

// Update about bot commands changed
type UpdateUserBotCommandsChanged struct {
	Uid      int32         `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`
	Commands []*BotCommand `protobuf:"bytes,2,rep,name=commands,proto3" json:"commands,omitempty"`
}

func (m *UpdateUserBotCommandsChanged) Reset()      { *m = UpdateUserBotCommandsChanged{} }
func (*UpdateUserBotCommandsChanged) ProtoMessage() {}
func (*UpdateUserBotCommandsChanged) Descriptor() ([]byte, []int) {
	return fileDescriptor_030765f334c86cea, []int{20}
}
func (m *UpdateUserBotCommandsChanged) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateUserBotCommandsChanged) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateUserBotCommandsChanged.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateUserBotCommandsChanged) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateUserBotCommandsChanged.Merge(m, src)
}
func (m *UpdateUserBotCommandsChanged) XXX_Size() int {
	return m.Size()
}
func (m *UpdateUserBotCommandsChanged) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateUserBotCommandsChanged.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateUserBotCommandsChanged proto.InternalMessageInfo

func (m *UpdateUserBotCommandsChanged) GetUid() int32 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func (m *UpdateUserBotCommandsChanged) GetCommands() []*BotCommand {
	if m != nil {
		return m.Commands
	}
	return nil
}

// Update about user sex changed
type UpdateUserSexChanged struct {
	Uid int32 `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`
	Sex Sex   `protobuf:"varint,2,opt,name=sex,proto3,enum=dialog.Sex" json:"sex,omitempty"`
}

func (m *UpdateUserSexChanged) Reset()      { *m = UpdateUserSexChanged{} }
func (*UpdateUserSexChanged) ProtoMessage() {}
func (*UpdateUserSexChanged) Descriptor() ([]byte, []int) {
	return fileDescriptor_030765f334c86cea, []int{21}
}
func (m *UpdateUserSexChanged) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateUserSexChanged) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateUserSexChanged.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateUserSexChanged) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateUserSexChanged.Merge(m, src)
}
func (m *UpdateUserSexChanged) XXX_Size() int {
	return m.Size()
}
func (m *UpdateUserSexChanged) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateUserSexChanged.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateUserSexChanged proto.InternalMessageInfo

func (m *UpdateUserSexChanged) GetUid() int32 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func (m *UpdateUserSexChanged) GetSex() Sex {
	if m != nil {
		return m.Sex
	}
	return SEX_UNKNOWN
}

// Update about user custom profile changed
type UpdateUserCustomProfileChanged struct {
	Uid int32 `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`
	/// custom user profile info in JSON format
	CustomProfile string `protobuf:"bytes,2,opt,name=custom_profile,json=customProfile,proto3" json:"custom_profile,omitempty"`
}

func (m *UpdateUserCustomProfileChanged) Reset()      { *m = UpdateUserCustomProfileChanged{} }
func (*UpdateUserCustomProfileChanged) ProtoMessage() {}
func (*UpdateUserCustomProfileChanged) Descriptor() ([]byte, []int) {
	return fileDescriptor_030765f334c86cea, []int{22}
}
func (m *UpdateUserCustomProfileChanged) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateUserCustomProfileChanged) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateUserCustomProfileChanged.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateUserCustomProfileChanged) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateUserCustomProfileChanged.Merge(m, src)
}
func (m *UpdateUserCustomProfileChanged) XXX_Size() int {
	return m.Size()
}
func (m *UpdateUserCustomProfileChanged) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateUserCustomProfileChanged.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateUserCustomProfileChanged proto.InternalMessageInfo

func (m *UpdateUserCustomProfileChanged) GetUid() int32 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func (m *UpdateUserCustomProfileChanged) GetCustomProfile() string {
	if m != nil {
		return m.CustomProfile
	}
	return ""
}

// Update about user status change
type UpdateUserStatusChanged struct {
	Uid    int32       `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`
	Status *UserStatus `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
}

func (m *UpdateUserStatusChanged) Reset()      { *m = UpdateUserStatusChanged{} }
func (*UpdateUserStatusChanged) ProtoMessage() {}
func (*UpdateUserStatusChanged) Descriptor() ([]byte, []int) {
	return fileDescriptor_030765f334c86cea, []int{23}
}
func (m *UpdateUserStatusChanged) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateUserStatusChanged) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateUserStatusChanged.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateUserStatusChanged) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateUserStatusChanged.Merge(m, src)
}
func (m *UpdateUserStatusChanged) XXX_Size() int {
	return m.Size()
}
func (m *UpdateUserStatusChanged) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateUserStatusChanged.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateUserStatusChanged proto.InternalMessageInfo

func (m *UpdateUserStatusChanged) GetUid() int32 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func (m *UpdateUserStatusChanged) GetStatus() *UserStatus {
	if m != nil {
		return m.Status
	}
	return nil
}

type UpdateUserExtChanged struct {
	Uid int32              `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`
	Ext *RecursiveMapValue `protobuf:"bytes,2,opt,name=ext,proto3" json:"ext,omitempty"`
}

func (m *UpdateUserExtChanged) Reset()      { *m = UpdateUserExtChanged{} }
func (*UpdateUserExtChanged) ProtoMessage() {}
func (*UpdateUserExtChanged) Descriptor() ([]byte, []int) {
	return fileDescriptor_030765f334c86cea, []int{24}
}
func (m *UpdateUserExtChanged) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateUserExtChanged) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateUserExtChanged.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateUserExtChanged) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateUserExtChanged.Merge(m, src)
}
func (m *UpdateUserExtChanged) XXX_Size() int {
	return m.Size()
}
func (m *UpdateUserExtChanged) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateUserExtChanged.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateUserExtChanged proto.InternalMessageInfo

func (m *UpdateUserExtChanged) GetUid() int32 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func (m *UpdateUserExtChanged) GetExt() *RecursiveMapValue {
	if m != nil {
		return m.Ext
	}
	return nil
}

type UpdateUserFullExtChanged struct {
	Uid int32              `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`
	Ext *RecursiveMapValue `protobuf:"bytes,2,opt,name=ext,proto3" json:"ext,omitempty"`
}

func (m *UpdateUserFullExtChanged) Reset()      { *m = UpdateUserFullExtChanged{} }
func (*UpdateUserFullExtChanged) ProtoMessage() {}
func (*UpdateUserFullExtChanged) Descriptor() ([]byte, []int) {
	return fileDescriptor_030765f334c86cea, []int{25}
}
func (m *UpdateUserFullExtChanged) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateUserFullExtChanged) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateUserFullExtChanged.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateUserFullExtChanged) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateUserFullExtChanged.Merge(m, src)
}
func (m *UpdateUserFullExtChanged) XXX_Size() int {
	return m.Size()
}
func (m *UpdateUserFullExtChanged) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateUserFullExtChanged.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateUserFullExtChanged proto.InternalMessageInfo

func (m *UpdateUserFullExtChanged) GetUid() int32 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func (m *UpdateUserFullExtChanged) GetExt() *RecursiveMapValue {
	if m != nil {
		return m.Ext
	}
	return nil
}

// Loading Full User information
type RequestLoadFullUsers struct {
	UserPeers []*UserOutPeer `protobuf:"bytes,1,rep,name=user_peers,json=userPeers,proto3" json:"user_peers,omitempty"`
}

func (m *RequestLoadFullUsers) Reset()      { *m = RequestLoadFullUsers{} }
func (*RequestLoadFullUsers) ProtoMessage() {}
func (*RequestLoadFullUsers) Descriptor() ([]byte, []int) {
	return fileDescriptor_030765f334c86cea, []int{26}
}
func (m *RequestLoadFullUsers) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RequestLoadFullUsers) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RequestLoadFullUsers.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RequestLoadFullUsers) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RequestLoadFullUsers.Merge(m, src)
}
func (m *RequestLoadFullUsers) XXX_Size() int {
	return m.Size()
}
func (m *RequestLoadFullUsers) XXX_DiscardUnknown() {
	xxx_messageInfo_RequestLoadFullUsers.DiscardUnknown(m)
}

var xxx_messageInfo_RequestLoadFullUsers proto.InternalMessageInfo

func (m *RequestLoadFullUsers) GetUserPeers() []*UserOutPeer {
	if m != nil {
		return m.UserPeers
	}
	return nil
}

type ResponseLoadFullUsers struct {
	FullUsers []*FullUser `protobuf:"bytes,1,rep,name=full_users,json=fullUsers,proto3" json:"full_users,omitempty"`
}

func (m *ResponseLoadFullUsers) Reset()      { *m = ResponseLoadFullUsers{} }
func (*ResponseLoadFullUsers) ProtoMessage() {}
func (*ResponseLoadFullUsers) Descriptor() ([]byte, []int) {
	return fileDescriptor_030765f334c86cea, []int{27}
}
func (m *ResponseLoadFullUsers) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ResponseLoadFullUsers) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ResponseLoadFullUsers.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ResponseLoadFullUsers) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResponseLoadFullUsers.Merge(m, src)
}
func (m *ResponseLoadFullUsers) XXX_Size() int {
	return m.Size()
}
func (m *ResponseLoadFullUsers) XXX_DiscardUnknown() {
	xxx_messageInfo_ResponseLoadFullUsers.DiscardUnknown(m)
}

var xxx_messageInfo_ResponseLoadFullUsers proto.InternalMessageInfo

func (m *ResponseLoadFullUsers) GetFullUsers() []*FullUser {
	if m != nil {
		return m.FullUsers
	}
	return nil
}

func init() {
	proto.RegisterEnum("dialog.Sex", Sex_name, Sex_value)
	proto.RegisterEnum("dialog.ContactType", ContactType_name, ContactType_value)
	proto.RegisterEnum("dialog.UserStatusType", UserStatusType_name, UserStatusType_value)
	proto.RegisterEnum("dialog.UserData_Lifecycle", UserData_Lifecycle_name, UserData_Lifecycle_value)
	proto.RegisterEnum("dialog.UserData_Hint", UserData_Hint_name, UserData_Hint_value)
	proto.RegisterType((*ContactRecord)(nil), "dialog.ContactRecord")
	proto.RegisterType((*UserStatus)(nil), "dialog.UserStatus")
	proto.RegisterType((*UserData)(nil), "dialog.UserData")
	proto.RegisterType((*UserData_Ext)(nil), "dialog.UserData.Ext")
	proto.RegisterType((*User)(nil), "dialog.User")
	proto.RegisterType((*UserPartialInfo)(nil), "dialog.UserPartialInfo")
	proto.RegisterType((*UserProfile)(nil), "dialog.UserProfile")
	proto.RegisterType((*FullUser)(nil), "dialog.FullUser")
	proto.RegisterType((*BotCommand)(nil), "dialog.BotCommand")
	proto.RegisterType((*RequestEditUserLocalName)(nil), "dialog.RequestEditUserLocalName")
	proto.RegisterType((*RequestLoadUserData)(nil), "dialog.RequestLoadUserData")
	proto.RegisterType((*RequestLoadUserData_Claim)(nil), "dialog.RequestLoadUserData.Claim")
	proto.RegisterType((*ResponseLoadUserData)(nil), "dialog.ResponseLoadUserData")
	proto.RegisterType((*UpdateUser)(nil), "dialog.UpdateUser")
	proto.RegisterType((*UpdateUserAvatarChanged)(nil), "dialog.UpdateUserAvatarChanged")
	proto.RegisterType((*UpdateUserNameChanged)(nil), "dialog.UpdateUserNameChanged")
	proto.RegisterType((*UpdateUserLocalNameChanged)(nil), "dialog.UpdateUserLocalNameChanged")
	proto.RegisterType((*UpdateUserContactsChanged)(nil), "dialog.UpdateUserContactsChanged")
	proto.RegisterType((*UpdateUserNickChanged)(nil), "dialog.UpdateUserNickChanged")
	proto.RegisterType((*UpdateUserAboutChanged)(nil), "dialog.UpdateUserAboutChanged")
	proto.RegisterType((*UpdateUserPreferredLanguagesChanged)(nil), "dialog.UpdateUserPreferredLanguagesChanged")
	proto.RegisterType((*UpdateUserTimeZoneChanged)(nil), "dialog.UpdateUserTimeZoneChanged")
	proto.RegisterType((*UpdateUserBotCommandsChanged)(nil), "dialog.UpdateUserBotCommandsChanged")
	proto.RegisterType((*UpdateUserSexChanged)(nil), "dialog.UpdateUserSexChanged")
	proto.RegisterType((*UpdateUserCustomProfileChanged)(nil), "dialog.UpdateUserCustomProfileChanged")
	proto.RegisterType((*UpdateUserStatusChanged)(nil), "dialog.UpdateUserStatusChanged")
	proto.RegisterType((*UpdateUserExtChanged)(nil), "dialog.UpdateUserExtChanged")
	proto.RegisterType((*UpdateUserFullExtChanged)(nil), "dialog.UpdateUserFullExtChanged")
	proto.RegisterType((*RequestLoadFullUsers)(nil), "dialog.RequestLoadFullUsers")
	proto.RegisterType((*ResponseLoadFullUsers)(nil), "dialog.ResponseLoadFullUsers")
}

func init() { proto.RegisterFile("users.proto", fileDescriptor_030765f334c86cea) }

var fileDescriptor_030765f334c86cea = []byte{
	// 2168 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x59, 0xcf, 0x6f, 0xdb, 0xd6,
	0x1d, 0x17, 0x29, 0x59, 0x91, 0xbe, 0xb2, 0x65, 0xf9, 0xd9, 0x4e, 0x14, 0xc5, 0x51, 0x1d, 0x76,
	0xdd, 0x52, 0x17, 0x93, 0x5a, 0x2f, 0x2b, 0xd6, 0x60, 0x5b, 0x22, 0xc9, 0x4a, 0x2c, 0xc4, 0xbf,
	0x20, 0xc9, 0xc9, 0x92, 0x0b, 0x41, 0x91, 0xcf, 0x32, 0x61, 0x8a, 0x64, 0xf8, 0x48, 0xc7, 0xe9,
	0x80, 0x61, 0xed, 0x61, 0x18, 0xda, 0xcb, 0x80, 0xfd, 0x01, 0xbb, 0x0e, 0x03, 0x76, 0x5d, 0xff,
	0x85, 0x1d, 0x03, 0xec, 0xd2, 0xde, 0x16, 0x67, 0x87, 0x21, 0xa7, 0xde, 0x77, 0x19, 0xde, 0x23,
	0x29, 0x52, 0xa4, 0x13, 0x53, 0xde, 0xd6, 0xd3, 0x4e, 0x16, 0xdf, 0xf7, 0xe7, 0xfb, 0xfe, 0xfc,
	0x90, 0x86, 0x82, 0x43, 0xb0, 0x45, 0x6a, 0xa6, 0x65, 0xd8, 0x06, 0xca, 0x2a, 0xaa, 0xa4, 0x19,
	0xc3, 0x4a, 0x75, 0x68, 0x18, 0x43, 0x0d, 0xd7, 0xd9, 0xe9, 0xc0, 0x39, 0xa8, 0x3f, 0xb3, 0x24,
	0xd3, 0x1c, 0xf3, 0x55, 0x56, 0x3c, 0xba, 0x64, 0xaa, 0x75, 0x49, 0xd7, 0x0d, 0x5b, 0xb2, 0x55,
	0x43, 0xf7, 0xa9, 0x0b, 0x0a, 0x3e, 0x50, 0x75, 0x35, 0x7c, 0xb4, 0x38, 0x52, 0x89, 0x8c, 0x35,
	0x4d, 0xd2, 0xb1, 0xe1, 0xf8, 0x87, 0x05, 0x13, 0x07, 0x2a, 0x97, 0x47, 0x58, 0x51, 0x25, 0x51,
	0xd2, 0x15, 0xf1, 0x40, 0xd5, 0xf0, 0xf8, 0x98, 0xc8, 0x92, 0x26, 0x99, 0x83, 0xba, 0xf7, 0xd7,
	0x3d, 0x16, 0xfe, 0x92, 0x86, 0xb9, 0x96, 0xa1, 0xdb, 0x92, 0x6c, 0x77, 0xb1, 0x6c, 0x58, 0x0a,
	0xfa, 0x18, 0x32, 0xf6, 0x73, 0x13, 0x97, 0xb9, 0x55, 0xee, 0x66, 0x71, 0x7d, 0xb1, 0xe6, 0xde,
	0xa4, 0xe6, 0x31, 0xf5, 0x9f, 0x9b, 0xb8, 0x39, 0xf7, 0xc5, 0xeb, 0x0f, 0xf3, 0x70, 0xe9, 0x58,
	0x25, 0xea, 0x40, 0xc3, 0x5d, 0xc6, 0x8f, 0xee, 0x43, 0x9e, 0xfe, 0x15, 0x89, 0x89, 0xe5, 0x72,
	0x76, 0x95, 0xbb, 0x59, 0x58, 0x5f, 0xa9, 0xb9, 0xd7, 0xab, 0xf9, 0xd7, 0xaf, 0xf5, 0x6c, 0x4b,
	0xd5, 0x87, 0x0f, 0x25, 0xcd, 0xc1, 0xcd, 0xd9, 0x2f, 0x5e, 0x7f, 0x98, 0x83, 0xec, 0xa1, 0xaa,
	0x28, 0x58, 0xef, 0xe6, 0xa8, 0x70, 0xcf, 0xc4, 0x32, 0xda, 0x81, 0x59, 0xc2, 0xd8, 0xc4, 0x63,
	0xca, 0x57, 0xe6, 0x13, 0xe8, 0x8a, 0x78, 0x54, 0x20, 0x01, 0x0d, 0x75, 0x00, 0x34, 0x63, 0xac,
	0x2d, 0xcd, 0xb4, 0x5d, 0x8b, 0x69, 0xeb, 0xe8, 0xf6, 0xc7, 0xb7, 0xce, 0x54, 0x96, 0xa7, 0xd2,
	0xae, 0xaa, 0x06, 0xcc, 0xd8, 0xaa, 0xad, 0xe1, 0x72, 0x66, 0x7a, 0x9f, 0x5c, 0x49, 0x74, 0x0f,
	0x72, 0xc4, 0x19, 0xb8, 0x5a, 0x66, 0xa6, 0x8f, 0x92, 0x2f, 0x2b, 0xfc, 0x99, 0x03, 0xd8, 0x27,
	0xd8, 0xea, 0xd9, 0x92, 0xed, 0x10, 0xf4, 0xc9, 0x44, 0xd6, 0x2e, 0xfb, 0x59, 0x0b, 0x38, 0xde,
	0x9c, 0xb8, 0x3b, 0x90, 0xb1, 0xf1, 0x89, 0x7d, 0x91, 0x38, 0x33, 0x41, 0xf4, 0x2e, 0xcc, 0xc8,
	0x9a, 0x21, 0x1f, 0xb1, 0xd8, 0xa6, 0x63, 0xf7, 0x66, 0x34, 0xe1, 0xf3, 0x3c, 0xe4, 0xa8, 0x37,
	0x1b, 0x92, 0x2d, 0xa1, 0x55, 0xc8, 0xe8, 0xd2, 0xc8, 0xf5, 0x36, 0x1f, 0xb9, 0x22, 0xa3, 0x50,
	0xa7, 0x74, 0x55, 0x3e, 0xba, 0x90, 0x53, 0x54, 0x10, 0x7d, 0x00, 0x69, 0x82, 0x4f, 0x98, 0x4b,
	0xc5, 0xf5, 0x82, 0x1f, 0x8f, 0x1e, 0x3e, 0x89, 0x98, 0xa3, 0x5c, 0xe8, 0xc7, 0x90, 0x95, 0x8e,
	0x25, 0x5b, 0xb2, 0xbc, 0xc4, 0x16, 0x7d, 0xfe, 0x06, 0x3b, 0xf5, 0x2d, 0xc8, 0xc6, 0xc8, 0xa4,
	0x8d, 0xe2, 0x31, 0xa3, 0xbb, 0x90, 0x55, 0x89, 0x38, 0x30, 0x6c, 0x2f, 0x93, 0x95, 0x98, 0x9b,
	0x4d, 0xc3, 0xd0, 0xce, 0xae, 0x06, 0x95, 0x34, 0x0d, 0x1b, 0x35, 0x20, 0x4b, 0x58, 0x7a, 0x58,
	0xc7, 0x14, 0xd7, 0x2b, 0xe1, 0xc4, 0xd1, 0x50, 0xd5, 0xb6, 0xd4, 0x03, 0x2c, 0x3f, 0x97, 0xb5,
	0x98, 0x06, 0x4f, 0x10, 0x35, 0xdd, 0xc9, 0x23, 0x7a, 0x7a, 0x2e, 0x31, 0x4f, 0x50, 0xbc, 0x00,
	0xa2, 0xf2, 0xe0, 0x04, 0xd5, 0xb3, 0x06, 0x79, 0x5b, 0x1d, 0x61, 0xf1, 0x53, 0x43, 0xc7, 0xe5,
	0x1c, 0x4b, 0x4a, 0x84, 0x3b, 0x47, 0xe9, 0x4f, 0x0c, 0x1d, 0xd3, 0xf9, 0x80, 0x4f, 0x6c, 0x52,
	0xce, 0xaf, 0xa6, 0x6f, 0x16, 0xd6, 0x97, 0x62, 0x0e, 0xb7, 0x4f, 0xec, 0x68, 0x46, 0x29, 0x3f,
	0xba, 0x07, 0x73, 0xc6, 0x80, 0x18, 0x1a, 0xb6, 0x71, 0x8b, 0x55, 0x0b, 0x30, 0x4f, 0x17, 0x7c,
	0x05, 0x54, 0x98, 0x11, 0xa2, 0xa6, 0x27, 0xc5, 0x50, 0x19, 0x2e, 0x69, 0x86, 0x2c, 0x69, 0x98,
	0x94, 0x0b, 0xab, 0xe9, 0x9b, 0xf9, 0xae, 0xff, 0x48, 0xbb, 0x53, 0x1a, 0x18, 0x8e, 0x5d, 0x9e,
	0x4d, 0x5e, 0x34, 0x7e, 0x4a, 0x5d, 0x49, 0x74, 0x1f, 0x66, 0x65, 0x77, 0xd0, 0x89, 0xaa, 0x7e,
	0x60, 0x94, 0xe7, 0xd8, 0x25, 0x97, 0x23, 0x43, 0xd0, 0x9d, 0x94, 0x51, 0x15, 0x05, 0x4f, 0xb2,
	0xa3, 0x1f, 0x18, 0x68, 0x03, 0x66, 0x07, 0x86, 0x2d, 0xca, 0xc6, 0x68, 0x24, 0xe9, 0x0a, 0x29,
	0x17, 0x99, 0xa2, 0x71, 0x5a, 0x9a, 0x86, 0xdd, 0x72, 0x49, 0xb1, 0xd1, 0x35, 0x18, 0x93, 0x08,
	0x6a, 0x41, 0x51, 0x76, 0x88, 0x6d, 0x8c, 0x44, 0xd3, 0x32, 0xe8, 0x34, 0x2f, 0xcf, 0x9f, 0x7f,
	0xb5, 0xee, 0x9c, 0x2b, 0xb3, 0xe7, 0x8a, 0xa0, 0xf7, 0x21, 0x73, 0xa8, 0xea, 0x76, 0x79, 0x81,
	0x55, 0xd8, 0x72, 0x2c, 0x61, 0x9b, 0xaa, 0x6e, 0x77, 0x19, 0x0b, 0x5a, 0xf2, 0x3b, 0xb9, 0x44,
	0x3b, 0xd9, 0x6b, 0xdd, 0xca, 0x4f, 0x21, 0xdd, 0x3e, 0xb1, 0x51, 0x09, 0xd2, 0x47, 0xf8, 0xb9,
	0xdb, 0xb3, 0x5d, 0xfa, 0x13, 0x15, 0x81, 0x23, 0xac, 0x43, 0xf3, 0x9b, 0xa9, 0x2e, 0x47, 0xe8,
	0xf3, 0x80, 0x75, 0x5c, 0x8e, 0x3e, 0x0f, 0x9a, 0x69, 0xe0, 0x8e, 0x85, 0x87, 0x90, 0x1f, 0xd7,
	0x30, 0x02, 0xc8, 0x6e, 0x77, 0x7a, 0xbd, 0xf6, 0x46, 0x29, 0x45, 0x7f, 0x37, 0x5a, 0xfd, 0xce,
	0xc3, 0x76, 0x89, 0x43, 0x05, 0xb8, 0xb4, 0xd1, 0xde, 0x6a, 0xf7, 0xdb, 0x1b, 0x25, 0x9e, 0x3e,
	0x34, 0xb7, 0x76, 0x5b, 0x0f, 0xda, 0x1b, 0xa5, 0x34, 0xba, 0x02, 0x8b, 0xde, 0x83, 0xd8, 0xd8,
	0xd9, 0x10, 0x7d, 0xae, 0x8c, 0xb0, 0x0e, 0x19, 0xea, 0x39, 0x5a, 0x86, 0x05, 0x56, 0xff, 0xf4,
	0x02, 0xa2, 0x85, 0x87, 0x8e, 0x26, 0x59, 0xa5, 0x14, 0x5a, 0x84, 0xf9, 0xe0, 0x78, 0xe8, 0x60,
	0x62, 0x97, 0x38, 0xe1, 0x53, 0xc8, 0xd0, 0x6b, 0xa3, 0xeb, 0xc0, 0xab, 0x0a, 0xbb, 0xc9, 0x4c,
	0x34, 0xfe, 0xbc, 0xaa, 0xa0, 0x1f, 0x42, 0x41, 0x92, 0x65, 0x4c, 0x88, 0x78, 0x28, 0x91, 0x43,
	0x76, 0xc3, 0xb4, 0x5f, 0xd3, 0x8a, 0xa4, 0x0f, 0xb1, 0xd5, 0x05, 0x97, 0x61, 0x53, 0x22, 0x87,
	0xe8, 0x7b, 0x90, 0x51, 0x24, 0x5b, 0xf2, 0x56, 0x4b, 0x29, 0x1a, 0xe0, 0x2e, 0xa3, 0x0a, 0x7f,
	0xe0, 0x61, 0x9e, 0x1e, 0xed, 0x49, 0x96, 0xad, 0x4a, 0x1a, 0xab, 0x92, 0xff, 0xae, 0x1f, 0x49,
	0xe6, 0x30, 0xba, 0xe1, 0x8d, 0xde, 0x4c, 0xb8, 0xcb, 0xfd, 0x12, 0x9e, 0x9c, 0xbd, 0x33, 0x17,
	0x9d, 0xbd, 0xc1, 0x38, 0xcd, 0x4e, 0x31, 0x4e, 0x85, 0x2f, 0x33, 0x50, 0x60, 0x11, 0xf2, 0x0a,
	0xb7, 0x0e, 0x19, 0x9a, 0x42, 0x16, 0x9f, 0xc2, 0xfa, 0x6c, 0x38, 0xae, 0x31, 0xbb, 0x94, 0x31,
	0xd6, 0xbd, 0xfc, 0x45, 0xbb, 0xf7, 0xae, 0x3f, 0x49, 0xd2, 0x53, 0x6f, 0x68, 0x6f, 0x90, 0xfc,
	0x1c, 0x16, 0x4d, 0x0b, 0x1f, 0x60, 0xcb, 0xc2, 0x8a, 0xa8, 0x49, 0xfa, 0xd0, 0x91, 0x86, 0x98,
	0x94, 0x33, 0x74, 0x62, 0x45, 0x9d, 0x47, 0x63, 0xce, 0x2d, 0x9f, 0x11, 0x6d, 0x86, 0x27, 0xf2,
	0x05, 0x12, 0x11, 0xcc, 0xeb, 0xe8, 0x24, 0xca, 0x5e, 0x68, 0x12, 0xbd, 0x17, 0x9b, 0x44, 0x79,
	0x36, 0x07, 0x22, 0xb3, 0xa6, 0x03, 0x0b, 0xaa, 0x6e, 0xe3, 0xa1, 0xc5, 0x70, 0xac, 0x68, 0x1b,
	0x47, 0x58, 0xf7, 0x06, 0xfd, 0xdb, 0x67, 0x56, 0x29, 0x24, 0xd6, 0xa7, 0x52, 0xc2, 0xbf, 0x32,
	0x90, 0xbb, 0xe7, 0x68, 0x5a, 0x92, 0x86, 0xfd, 0x7f, 0xe2, 0xff, 0x67, 0x89, 0xdf, 0x04, 0xa0,
	0x18, 0x87, 0xce, 0x0e, 0xac, 0x30, 0x6c, 0x30, 0x15, 0xce, 0xc9, 0xab, 0xa4, 0xe9, 0xca, 0x7e,
	0xf7, 0x25, 0x84, 0x3e, 0x19, 0xa3, 0xab, 0x42, 0x52, 0x54, 0xe4, 0x09, 0x08, 0x5f, 0x71, 0x00,
	0x41, 0x84, 0xd0, 0x3a, 0xcc, 0x11, 0x4d, 0x22, 0x87, 0x7e, 0x34, 0x3d, 0xe4, 0x1a, 0x11, 0x9e,
	0x65, 0x3c, 0xbe, 0x4c, 0x1d, 0x0a, 0x0a, 0x26, 0xb2, 0xa5, 0x9a, 0xd4, 0x23, 0x77, 0x4f, 0xc6,
	0x42, 0x1d, 0xe2, 0x40, 0x1b, 0x0c, 0xd9, 0x88, 0x74, 0xc9, 0xa6, 0xa7, 0x4f, 0x7c, 0x56, 0x33,
	0xe4, 0x07, 0xf8, 0xb9, 0xf0, 0x27, 0x0e, 0xca, 0x5d, 0xfc, 0x94, 0x6e, 0xbc, 0xb6, 0xa2, 0xda,
	0xf4, 0xaa, 0x5b, 0x14, 0x20, 0xed, 0xd0, 0xd1, 0xfe, 0x0e, 0xa4, 0x9d, 0x37, 0x35, 0x12, 0xa5,
	0x4c, 0xbb, 0x72, 0x7c, 0x20, 0x9f, 0x7e, 0x13, 0x90, 0xbf, 0xbd, 0x72, 0x7a, 0xe7, 0x2a, 0x5c,
	0x51, 0x47, 0x35, 0x45, 0x1b, 0xd6, 0x86, 0x96, 0x29, 0xd7, 0xee, 0x5b, 0xa6, 0xec, 0x39, 0x28,
	0x7c, 0xc3, 0xc3, 0xa2, 0xf7, 0x7b, 0xcb, 0x90, 0x94, 0xf1, 0x0b, 0xc2, 0x26, 0x64, 0x65, 0x4d,
	0x52, 0x47, 0xa4, 0xcc, 0xb1, 0xaa, 0xbd, 0xe1, 0x67, 0xee, 0x0c, 0xe6, 0x5a, 0x8b, 0x72, 0xc6,
	0xc2, 0xe1, 0xca, 0x57, 0xbe, 0xe1, 0x60, 0x86, 0x31, 0xa0, 0x9f, 0x40, 0x9e, 0x21, 0x02, 0xfa,
	0xb2, 0x1c, 0xdd, 0x29, 0x7b, 0x38, 0xbe, 0x53, 0x72, 0x94, 0x9b, 0x12, 0xd0, 0x0d, 0x48, 0x9b,
	0xeb, 0x26, 0x0b, 0x46, 0x2e, 0xc2, 0xb5, 0x99, 0xea, 0x52, 0x1a, 0xba, 0x0b, 0xb3, 0x43, 0xcb,
	0x70, 0x4c, 0x71, 0x84, 0x47, 0x03, 0x6c, 0x79, 0x09, 0x7c, 0x9b, 0xfe, 0xcd, 0x54, 0xb7, 0xc0,
	0x44, 0xb6, 0x99, 0x04, 0x7a, 0x9f, 0x8e, 0x24, 0x36, 0x89, 0xd8, 0x6e, 0x3e, 0xc3, 0x90, 0x4f,
	0x6f, 0x66, 0x21, 0x73, 0xa4, 0xea, 0xca, 0x39, 0xb1, 0x3d, 0x84, 0xa5, 0x2e, 0x26, 0xa6, 0xa1,
	0x13, 0x3c, 0x11, 0xdb, 0x8f, 0x60, 0x86, 0x7d, 0xaa, 0xf0, 0x42, 0xfb, 0xd6, 0xbd, 0xea, 0x72,
	0xde, 0xbe, 0x7e, 0x7a, 0xa7, 0x02, 0xe5, 0xb8, 0x21, 0x57, 0xbb, 0xd0, 0x04, 0xd8, 0x37, 0x15,
	0xc9, 0xc6, 0x6c, 0x56, 0x17, 0x83, 0x59, 0xcd, 0x86, 0xb3, 0x0f, 0x8f, 0xf8, 0xb7, 0xc2, 0xa3,
	0xa7, 0x70, 0x25, 0xd0, 0xe1, 0xe2, 0x84, 0xd6, 0x21, 0x2d, 0x38, 0xe5, 0xfc, 0xa2, 0x0d, 0xf0,
	0x06, 0x3f, 0x0d, 0xde, 0x78, 0x02, 0xcb, 0x81, 0x49, 0xda, 0x1e, 0x89, 0x0d, 0xfa, 0x65, 0xcf,
	0xbf, 0xa9, 0xec, 0x85, 0xdf, 0x72, 0x50, 0x09, 0x94, 0x8f, 0x1b, 0x30, 0xb1, 0x05, 0xf6, 0xd1,
	0x42, 0x96, 0x34, 0x71, 0x6c, 0x67, 0xba, 0x6d, 0x94, 0xd7, 0x7c, 0x93, 0xc2, 0x97, 0x1c, 0x5c,
	0x0d, 0x5c, 0xf1, 0x76, 0x21, 0x49, 0xec, 0xc9, 0x36, 0xcc, 0xfb, 0xbb, 0xd5, 0x62, 0x0b, 0xd4,
	0x5d, 0x66, 0x49, 0xd7, 0x6b, 0x51, 0x0e, 0x53, 0x89, 0xf0, 0x19, 0x37, 0x11, 0x75, 0x55, 0x3e,
	0x4a, 0xec, 0xc9, 0x7d, 0xc8, 0x51, 0x78, 0x99, 0x38, 0x22, 0xd1, 0x7e, 0xf6, 0x85, 0x85, 0x5f,
	0xc2, 0xe5, 0x50, 0xad, 0xd1, 0xb5, 0x9d, 0xd8, 0x87, 0x31, 0x40, 0xe0, 0x2f, 0x08, 0x10, 0x84,
	0xdf, 0x70, 0xf0, 0x6e, 0x60, 0x7d, 0x2f, 0x86, 0x00, 0x12, 0xbb, 0xf2, 0x06, 0xa4, 0xc1, 0x27,
	0x44, 0x1a, 0xd4, 0x91, 0x50, 0x5d, 0xf4, 0x3d, 0xd8, 0x90, 0xd8, 0xfc, 0x04, 0x50, 0xe1, 0xff,
	0x03, 0xa0, 0x22, 0xfc, 0x0a, 0x56, 0x02, 0x3f, 0x82, 0xa5, 0x9b, 0x3c, 0x12, 0x3f, 0x83, 0xdc,
	0x18, 0xe5, 0xf0, 0x49, 0x51, 0xce, 0x58, 0x44, 0x50, 0x60, 0x29, 0xb0, 0xdf, 0xc3, 0x27, 0x89,
	0xed, 0x7a, 0xdf, 0x98, 0xf8, 0x24, 0xdf, 0x98, 0x84, 0x67, 0x50, 0x0d, 0x75, 0x61, 0x18, 0xf2,
	0x24, 0xb6, 0x77, 0x2b, 0x86, 0xa0, 0xce, 0x04, 0x15, 0x93, 0x80, 0x4a, 0x70, 0xc2, 0x93, 0xd5,
	0x45, 0x3d, 0x89, 0x2d, 0x06, 0x08, 0x8a, 0x9f, 0x16, 0x41, 0x91, 0x70, 0x54, 0xdb, 0x27, 0xc9,
	0x5b, 0xec, 0x36, 0xa4, 0x83, 0xcf, 0x91, 0x57, 0x83, 0xc5, 0x2f, 0x3b, 0x16, 0x51, 0x8f, 0xf1,
	0xb6, 0x64, 0x9e, 0x59, 0x4f, 0x54, 0x48, 0x78, 0x06, 0xe5, 0xc0, 0x28, 0x7d, 0x7b, 0xf8, 0xee,
	0x0c, 0x2f, 0x85, 0xa0, 0x89, 0xff, 0xde, 0x42, 0x50, 0x03, 0x60, 0x0c, 0x3a, 0xfc, 0x8d, 0xbb,
	0x18, 0x0e, 0xe2, 0xae, 0x63, 0x87, 0xc1, 0x81, 0x3f, 0x36, 0xf3, 0x3e, 0xf8, 0x20, 0xe7, 0x6c,
	0xf9, 0x21, 0x2c, 0x87, 0xb7, 0x7c, 0x60, 0xb9, 0x0e, 0x70, 0xe0, 0x68, 0x9a, 0x18, 0xde, 0xf5,
	0xe3, 0xe5, 0xeb, 0xb3, 0x75, 0xf3, 0x07, 0xbe, 0xc0, 0x39, 0x4b, 0x7e, 0xed, 0x16, 0xa4, 0x7b,
	0xf8, 0x04, 0xcd, 0x43, 0xa1, 0xd7, 0xfe, 0x85, 0xb8, 0xbf, 0xf3, 0x60, 0x67, 0xf7, 0xd1, 0x4e,
	0x29, 0x85, 0x66, 0x21, 0x47, 0x0f, 0xb6, 0x1b, 0x5b, 0xed, 0x12, 0x8f, 0x8a, 0x00, 0xf4, 0xe9,
	0x5e, 0x9b, 0x3d, 0xa7, 0xd7, 0x3e, 0xe3, 0xa0, 0x10, 0xfa, 0xd7, 0x01, 0xba, 0x02, 0x8b, 0xad,
	0xdd, 0x9d, 0x7e, 0xa3, 0xd5, 0xef, 0x3f, 0xde, 0x6b, 0x87, 0xd4, 0x2c, 0xc3, 0x42, 0x98, 0xb0,
	0xb7, 0xb9, 0xbb, 0xd3, 0x2e, 0x71, 0xd1, 0xe3, 0xf6, 0x76, 0xa3, 0xb3, 0x55, 0xe2, 0xd1, 0x22,
	0xcc, 0x87, 0x8f, 0x1f, 0xb5, 0x9b, 0xa5, 0x34, 0xba, 0x0c, 0x28, 0x7c, 0xd8, 0xdb, 0x6d, 0x75,
	0x1a, 0x5b, 0xa5, 0xcc, 0xda, 0x57, 0x1c, 0x14, 0x27, 0x3f, 0x84, 0xa3, 0x0a, 0x5c, 0xde, 0xef,
	0xb5, 0xbb, 0xbd, 0x7e, 0xa3, 0xbf, 0xdf, 0x8b, 0x78, 0x52, 0x86, 0xa5, 0x18, 0xad, 0xd7, 0xee,
	0x97, 0x38, 0xea, 0x7c, 0x84, 0xd2, 0x78, 0xd4, 0x78, 0x5c, 0xe2, 0xd1, 0x3b, 0x70, 0x2d, 0x42,
	0xd8, 0xd8, 0xdd, 0xd9, 0xed, 0x6f, 0x74, 0x7a, 0xfd, 0xfd, 0x2e, 0x75, 0x6d, 0x05, 0xca, 0x11,
	0x86, 0xce, 0xce, 0xc3, 0x4e, 0xaf, 0xd3, 0xdc, 0x6a, 0x97, 0x32, 0x67, 0xe8, 0x6d, 0xee, 0xf7,
	0x1e, 0x97, 0x66, 0xd6, 0x5f, 0xf3, 0x30, 0xe3, 0x66, 0xf3, 0x19, 0x2c, 0xc4, 0xd1, 0xfc, 0x6a,
	0x04, 0x15, 0xc7, 0x38, 0x2a, 0x8b, 0x01, 0x87, 0x9b, 0xc6, 0x1e, 0x7e, 0x2a, 0x7c, 0xf0, 0xf9,
	0xdf, 0xfe, 0xf1, 0x7b, 0xfe, 0x3d, 0x61, 0xb5, 0x7e, 0xfc, 0x51, 0x9d, 0x26, 0xba, 0xce, 0x6c,
	0xd4, 0x63, 0xe2, 0xb7, 0xb9, 0x35, 0xe4, 0xc0, 0xdc, 0x64, 0x5d, 0xad, 0x9c, 0x01, 0xc5, 0xc7,
	0xd4, 0xca, 0xf5, 0xa8, 0xc1, 0x09, 0xb2, 0xf0, 0x03, 0x66, 0xfa, 0x86, 0xb0, 0x12, 0x31, 0x3d,
	0xc1, 0x45, 0xcd, 0x3e, 0x85, 0xd9, 0x09, 0xd0, 0x7a, 0xed, 0x2d, 0x2f, 0x00, 0x95, 0x95, 0xb3,
	0x8c, 0xfa, 0x54, 0xe1, 0xfb, 0xcc, 0xe6, 0xaa, 0x70, 0xed, 0x0c, 0x9b, 0x3e, 0xd3, 0x6d, 0x6e,
	0xad, 0xd9, 0x7d, 0xf1, 0xb2, 0x9a, 0xfa, 0xfa, 0x65, 0x35, 0xf5, 0xed, 0xcb, 0x2a, 0xf7, 0xeb,
	0xd3, 0x2a, 0xf7, 0xc7, 0xd3, 0x2a, 0xf7, 0xd7, 0xd3, 0x2a, 0xf7, 0xe2, 0xb4, 0xca, 0xfd, 0xfd,
	0xb4, 0xca, 0xfd, 0xf3, 0xb4, 0x9a, 0xfa, 0xf6, 0xb4, 0xca, 0xfd, 0xee, 0x55, 0x35, 0xf5, 0xe2,
	0x55, 0x35, 0xf5, 0xf5, 0xab, 0x6a, 0x0a, 0x96, 0xc2, 0x0d, 0x43, 0xb0, 0x75, 0xac, 0xca, 0x98,
	0x3c, 0xf1, 0xfe, 0xff, 0x37, 0xc8, 0xb2, 0x4d, 0xf8, 0xa3, 0x7f, 0x07, 0x00, 0x00, 0xff, 0xff,
	0xff, 0x71, 0x43, 0x72, 0x1d, 0x1c, 0x00, 0x00,
}

func (x Sex) String() string {
	s, ok := Sex_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x ContactType) String() string {
	s, ok := ContactType_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x UserStatusType) String() string {
	s, ok := UserStatusType_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x UserData_Lifecycle) String() string {
	s, ok := UserData_Lifecycle_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x UserData_Hint) String() string {
	s, ok := UserData_Hint_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *ContactRecord) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ContactRecord)
	if !ok {
		that2, ok := that.(ContactRecord)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Type != that1.Type {
		return false
	}
	if !this.TypeSpec.Equal(that1.TypeSpec) {
		return false
	}
	if !this.StringValue.Equal(that1.StringValue) {
		return false
	}
	if !this.LongValue.Equal(that1.LongValue) {
		return false
	}
	if !this.Title.Equal(that1.Title) {
		return false
	}
	if !this.Subtitle.Equal(that1.Subtitle) {
		return false
	}
	return true
}
func (this *UserStatus) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UserStatus)
	if !ok {
		that2, ok := that.(UserStatus)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Type != that1.Type {
		return false
	}
	if !this.Text.Equal(that1.Text) {
		return false
	}
	if this.Clock != that1.Clock {
		return false
	}
	return true
}
func (this *UserData) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UserData)
	if !ok {
		that2, ok := that.(UserData)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if !this.Nick.Equal(that1.Nick) {
		return false
	}
	if this.Sex != that1.Sex {
		return false
	}
	if !this.Avatar.Equal(that1.Avatar) {
		return false
	}
	if !this.IsBot.Equal(that1.IsBot) {
		return false
	}
	if this.Status != that1.Status {
		return false
	}
	if !this.UserStatus.Equal(that1.UserStatus) {
		return false
	}
	if this.TimeZone != that1.TimeZone {
		return false
	}
	if len(this.Exts) != len(that1.Exts) {
		return false
	}
	for i := range this.Exts {
		if !this.Exts[i].Equal(that1.Exts[i]) {
			return false
		}
	}
	if !this.ObsoleteClock.Equal(that1.ObsoleteClock) {
		return false
	}
	if len(this.Locales) != len(that1.Locales) {
		return false
	}
	for i := range this.Locales {
		if this.Locales[i] != that1.Locales[i] {
			return false
		}
	}
	if !this.About.Equal(that1.About) {
		return false
	}
	if len(this.ContactInfo) != len(that1.ContactInfo) {
		return false
	}
	for i := range this.ContactInfo {
		if !this.ContactInfo[i].Equal(that1.ContactInfo[i]) {
			return false
		}
	}
	if len(this.BotCommands) != len(that1.BotCommands) {
		return false
	}
	for i := range this.BotCommands {
		if !this.BotCommands[i].Equal(that1.BotCommands[i]) {
			return false
		}
	}
	if !this.CustomProfile.Equal(that1.CustomProfile) {
		return false
	}
	if this.Hint != that1.Hint {
		return false
	}
	if this.Clock != that1.Clock {
		return false
	}
	return true
}
func (this *UserData_Ext) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UserData_Ext)
	if !ok {
		that2, ok := that.(UserData_Ext)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Key != that1.Key {
		return false
	}
	if that1.V == nil {
		if this.V != nil {
			return false
		}
	} else if this.V == nil {
		return false
	} else if !this.V.Equal(that1.V) {
		return false
	}
	return true
}
func (this *UserData_Ext_S) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UserData_Ext_S)
	if !ok {
		that2, ok := that.(UserData_Ext_S)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.S != that1.S {
		return false
	}
	return true
}
func (this *UserData_Ext_B) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UserData_Ext_B)
	if !ok {
		that2, ok := that.(UserData_Ext_B)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.B != that1.B {
		return false
	}
	return true
}
func (this *User) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*User)
	if !ok {
		that2, ok := that.(User)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if this.AccessHash != that1.AccessHash {
		return false
	}
	if !this.Data.Equal(that1.Data) {
		return false
	}
	return true
}
func (this *UserPartialInfo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UserPartialInfo)
	if !ok {
		that2, ok := that.(UserPartialInfo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if this.AccessHash != that1.AccessHash {
		return false
	}
	if this.Clock != that1.Clock {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if !this.Nick.Equal(that1.Nick) {
		return false
	}
	if !this.Avatar.Equal(that1.Avatar) {
		return false
	}
	return true
}
func (this *UserProfile) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UserProfile)
	if !ok {
		that2, ok := that.(UserProfile)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.User.Equal(that1.User) {
		return false
	}
	if len(this.ContactInfo) != len(that1.ContactInfo) {
		return false
	}
	for i := range this.ContactInfo {
		if !this.ContactInfo[i].Equal(that1.ContactInfo[i]) {
			return false
		}
	}
	if !this.About.Equal(that1.About) {
		return false
	}
	if len(this.PreferredLanguages) != len(that1.PreferredLanguages) {
		return false
	}
	for i := range this.PreferredLanguages {
		if this.PreferredLanguages[i] != that1.PreferredLanguages[i] {
			return false
		}
	}
	if !this.TimeZone.Equal(that1.TimeZone) {
		return false
	}
	if len(this.BotCommands) != len(that1.BotCommands) {
		return false
	}
	for i := range this.BotCommands {
		if !this.BotCommands[i].Equal(that1.BotCommands[i]) {
			return false
		}
	}
	if this.CustomProfile != that1.CustomProfile {
		return false
	}
	if !this.IntegrationToken.Equal(that1.IntegrationToken) {
		return false
	}
	return true
}
func (this *FullUser) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*FullUser)
	if !ok {
		that2, ok := that.(FullUser)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if len(this.ContactInfo) != len(that1.ContactInfo) {
		return false
	}
	for i := range this.ContactInfo {
		if !this.ContactInfo[i].Equal(that1.ContactInfo[i]) {
			return false
		}
	}
	if !this.About.Equal(that1.About) {
		return false
	}
	if len(this.PreferredLanguages) != len(that1.PreferredLanguages) {
		return false
	}
	for i := range this.PreferredLanguages {
		if this.PreferredLanguages[i] != that1.PreferredLanguages[i] {
			return false
		}
	}
	if !this.TimeZone.Equal(that1.TimeZone) {
		return false
	}
	if len(this.BotCommands) != len(that1.BotCommands) {
		return false
	}
	for i := range this.BotCommands {
		if !this.BotCommands[i].Equal(that1.BotCommands[i]) {
			return false
		}
	}
	if !this.IsBlocked.Equal(that1.IsBlocked) {
		return false
	}
	if this.CustomProfile != that1.CustomProfile {
		return false
	}
	if !this.IntegrationToken.Equal(that1.IntegrationToken) {
		return false
	}
	if !this.Status.Equal(that1.Status) {
		return false
	}
	return true
}
func (this *BotCommand) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*BotCommand)
	if !ok {
		that2, ok := that.(BotCommand)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.SlashCommand != that1.SlashCommand {
		return false
	}
	if this.Description != that1.Description {
		return false
	}
	if !this.LocKey.Equal(that1.LocKey) {
		return false
	}
	return true
}
func (this *RequestEditUserLocalName) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RequestEditUserLocalName)
	if !ok {
		that2, ok := that.(RequestEditUserLocalName)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Uid != that1.Uid {
		return false
	}
	if this.AccessHash != that1.AccessHash {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	return true
}
func (this *RequestLoadUserData) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RequestLoadUserData)
	if !ok {
		that2, ok := that.(RequestLoadUserData)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Claims) != len(that1.Claims) {
		return false
	}
	for i := range this.Claims {
		if !this.Claims[i].Equal(that1.Claims[i]) {
			return false
		}
	}
	return true
}
func (this *RequestLoadUserData_Claim) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RequestLoadUserData_Claim)
	if !ok {
		that2, ok := that.(RequestLoadUserData_Claim)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.UserPeer.Equal(that1.UserPeer) {
		return false
	}
	if that1.Kind == nil {
		if this.Kind != nil {
			return false
		}
	} else if this.Kind == nil {
		return false
	} else if !this.Kind.Equal(that1.Kind) {
		return false
	}
	return true
}
func (this *RequestLoadUserData_Claim_P2P) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RequestLoadUserData_Claim_P2P)
	if !ok {
		that2, ok := that.(RequestLoadUserData_Claim_P2P)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.P2P != that1.P2P {
		return false
	}
	return true
}
func (this *RequestLoadUserData_Claim_GroupMember) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RequestLoadUserData_Claim_GroupMember)
	if !ok {
		that2, ok := that.(RequestLoadUserData_Claim_GroupMember)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.GroupMember.Equal(that1.GroupMember) {
		return false
	}
	return true
}
func (this *RequestLoadUserData_Claim_Contact) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RequestLoadUserData_Claim_Contact)
	if !ok {
		that2, ok := that.(RequestLoadUserData_Claim_Contact)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Contact != that1.Contact {
		return false
	}
	return true
}
func (this *ResponseLoadUserData) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ResponseLoadUserData)
	if !ok {
		that2, ok := that.(ResponseLoadUserData)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Users) != len(that1.Users) {
		return false
	}
	for i := range this.Users {
		if !this.Users[i].Equal(that1.Users[i]) {
			return false
		}
	}
	return true
}
func (this *UpdateUser) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpdateUser)
	if !ok {
		that2, ok := that.(UpdateUser)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if !this.Data.Equal(that1.Data) {
		return false
	}
	return true
}
func (this *UpdateUserAvatarChanged) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpdateUserAvatarChanged)
	if !ok {
		that2, ok := that.(UpdateUserAvatarChanged)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Uid != that1.Uid {
		return false
	}
	if !this.Avatar.Equal(that1.Avatar) {
		return false
	}
	return true
}
func (this *UpdateUserNameChanged) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpdateUserNameChanged)
	if !ok {
		that2, ok := that.(UpdateUserNameChanged)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Uid != that1.Uid {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	return true
}
func (this *UpdateUserLocalNameChanged) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpdateUserLocalNameChanged)
	if !ok {
		that2, ok := that.(UpdateUserLocalNameChanged)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Uid != that1.Uid {
		return false
	}
	if !this.LocalName.Equal(that1.LocalName) {
		return false
	}
	return true
}
func (this *UpdateUserContactsChanged) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpdateUserContactsChanged)
	if !ok {
		that2, ok := that.(UpdateUserContactsChanged)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Uid != that1.Uid {
		return false
	}
	if len(this.ContactRecords) != len(that1.ContactRecords) {
		return false
	}
	for i := range this.ContactRecords {
		if !this.ContactRecords[i].Equal(that1.ContactRecords[i]) {
			return false
		}
	}
	return true
}
func (this *UpdateUserNickChanged) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpdateUserNickChanged)
	if !ok {
		that2, ok := that.(UpdateUserNickChanged)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Uid != that1.Uid {
		return false
	}
	if !this.Nickname.Equal(that1.Nickname) {
		return false
	}
	return true
}
func (this *UpdateUserAboutChanged) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpdateUserAboutChanged)
	if !ok {
		that2, ok := that.(UpdateUserAboutChanged)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Uid != that1.Uid {
		return false
	}
	if !this.About.Equal(that1.About) {
		return false
	}
	return true
}
func (this *UpdateUserPreferredLanguagesChanged) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpdateUserPreferredLanguagesChanged)
	if !ok {
		that2, ok := that.(UpdateUserPreferredLanguagesChanged)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Uid != that1.Uid {
		return false
	}
	if len(this.PreferredLanguages) != len(that1.PreferredLanguages) {
		return false
	}
	for i := range this.PreferredLanguages {
		if this.PreferredLanguages[i] != that1.PreferredLanguages[i] {
			return false
		}
	}
	return true
}
func (this *UpdateUserTimeZoneChanged) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpdateUserTimeZoneChanged)
	if !ok {
		that2, ok := that.(UpdateUserTimeZoneChanged)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Uid != that1.Uid {
		return false
	}
	if !this.TimeZone.Equal(that1.TimeZone) {
		return false
	}
	return true
}
func (this *UpdateUserBotCommandsChanged) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpdateUserBotCommandsChanged)
	if !ok {
		that2, ok := that.(UpdateUserBotCommandsChanged)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Uid != that1.Uid {
		return false
	}
	if len(this.Commands) != len(that1.Commands) {
		return false
	}
	for i := range this.Commands {
		if !this.Commands[i].Equal(that1.Commands[i]) {
			return false
		}
	}
	return true
}
func (this *UpdateUserSexChanged) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpdateUserSexChanged)
	if !ok {
		that2, ok := that.(UpdateUserSexChanged)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Uid != that1.Uid {
		return false
	}
	if this.Sex != that1.Sex {
		return false
	}
	return true
}
func (this *UpdateUserCustomProfileChanged) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpdateUserCustomProfileChanged)
	if !ok {
		that2, ok := that.(UpdateUserCustomProfileChanged)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Uid != that1.Uid {
		return false
	}
	if this.CustomProfile != that1.CustomProfile {
		return false
	}
	return true
}
func (this *UpdateUserStatusChanged) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpdateUserStatusChanged)
	if !ok {
		that2, ok := that.(UpdateUserStatusChanged)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Uid != that1.Uid {
		return false
	}
	if !this.Status.Equal(that1.Status) {
		return false
	}
	return true
}
func (this *UpdateUserExtChanged) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpdateUserExtChanged)
	if !ok {
		that2, ok := that.(UpdateUserExtChanged)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Uid != that1.Uid {
		return false
	}
	if !this.Ext.Equal(that1.Ext) {
		return false
	}
	return true
}
func (this *UpdateUserFullExtChanged) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpdateUserFullExtChanged)
	if !ok {
		that2, ok := that.(UpdateUserFullExtChanged)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Uid != that1.Uid {
		return false
	}
	if !this.Ext.Equal(that1.Ext) {
		return false
	}
	return true
}
func (this *RequestLoadFullUsers) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RequestLoadFullUsers)
	if !ok {
		that2, ok := that.(RequestLoadFullUsers)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.UserPeers) != len(that1.UserPeers) {
		return false
	}
	for i := range this.UserPeers {
		if !this.UserPeers[i].Equal(that1.UserPeers[i]) {
			return false
		}
	}
	return true
}
func (this *ResponseLoadFullUsers) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ResponseLoadFullUsers)
	if !ok {
		that2, ok := that.(ResponseLoadFullUsers)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.FullUsers) != len(that1.FullUsers) {
		return false
	}
	for i := range this.FullUsers {
		if !this.FullUsers[i].Equal(that1.FullUsers[i]) {
			return false
		}
	}
	return true
}
func (this *ContactRecord) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 10)
	s = append(s, "&dialog.ContactRecord{")
	s = append(s, "Type: "+fmt.Sprintf("%#v", this.Type)+",\n")
	if this.TypeSpec != nil {
		s = append(s, "TypeSpec: "+fmt.Sprintf("%#v", this.TypeSpec)+",\n")
	}
	if this.StringValue != nil {
		s = append(s, "StringValue: "+fmt.Sprintf("%#v", this.StringValue)+",\n")
	}
	if this.LongValue != nil {
		s = append(s, "LongValue: "+fmt.Sprintf("%#v", this.LongValue)+",\n")
	}
	if this.Title != nil {
		s = append(s, "Title: "+fmt.Sprintf("%#v", this.Title)+",\n")
	}
	if this.Subtitle != nil {
		s = append(s, "Subtitle: "+fmt.Sprintf("%#v", this.Subtitle)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UserStatus) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&dialog.UserStatus{")
	s = append(s, "Type: "+fmt.Sprintf("%#v", this.Type)+",\n")
	if this.Text != nil {
		s = append(s, "Text: "+fmt.Sprintf("%#v", this.Text)+",\n")
	}
	s = append(s, "Clock: "+fmt.Sprintf("%#v", this.Clock)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UserData) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 21)
	s = append(s, "&dialog.UserData{")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	if this.Nick != nil {
		s = append(s, "Nick: "+fmt.Sprintf("%#v", this.Nick)+",\n")
	}
	s = append(s, "Sex: "+fmt.Sprintf("%#v", this.Sex)+",\n")
	if this.Avatar != nil {
		s = append(s, "Avatar: "+fmt.Sprintf("%#v", this.Avatar)+",\n")
	}
	if this.IsBot != nil {
		s = append(s, "IsBot: "+fmt.Sprintf("%#v", this.IsBot)+",\n")
	}
	s = append(s, "Status: "+fmt.Sprintf("%#v", this.Status)+",\n")
	if this.UserStatus != nil {
		s = append(s, "UserStatus: "+fmt.Sprintf("%#v", this.UserStatus)+",\n")
	}
	s = append(s, "TimeZone: "+fmt.Sprintf("%#v", this.TimeZone)+",\n")
	if this.Exts != nil {
		s = append(s, "Exts: "+fmt.Sprintf("%#v", this.Exts)+",\n")
	}
	if this.ObsoleteClock != nil {
		s = append(s, "ObsoleteClock: "+fmt.Sprintf("%#v", this.ObsoleteClock)+",\n")
	}
	s = append(s, "Locales: "+fmt.Sprintf("%#v", this.Locales)+",\n")
	if this.About != nil {
		s = append(s, "About: "+fmt.Sprintf("%#v", this.About)+",\n")
	}
	if this.ContactInfo != nil {
		s = append(s, "ContactInfo: "+fmt.Sprintf("%#v", this.ContactInfo)+",\n")
	}
	if this.BotCommands != nil {
		s = append(s, "BotCommands: "+fmt.Sprintf("%#v", this.BotCommands)+",\n")
	}
	if this.CustomProfile != nil {
		s = append(s, "CustomProfile: "+fmt.Sprintf("%#v", this.CustomProfile)+",\n")
	}
	s = append(s, "Hint: "+fmt.Sprintf("%#v", this.Hint)+",\n")
	s = append(s, "Clock: "+fmt.Sprintf("%#v", this.Clock)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UserData_Ext) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&dialog.UserData_Ext{")
	s = append(s, "Key: "+fmt.Sprintf("%#v", this.Key)+",\n")
	if this.V != nil {
		s = append(s, "V: "+fmt.Sprintf("%#v", this.V)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UserData_Ext_S) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dialog.UserData_Ext_S{` +
		`S:` + fmt.Sprintf("%#v", this.S) + `}`}, ", ")
	return s
}
func (this *UserData_Ext_B) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dialog.UserData_Ext_B{` +
		`B:` + fmt.Sprintf("%#v", this.B) + `}`}, ", ")
	return s
}
func (this *User) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&dialog.User{")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	s = append(s, "AccessHash: "+fmt.Sprintf("%#v", this.AccessHash)+",\n")
	if this.Data != nil {
		s = append(s, "Data: "+fmt.Sprintf("%#v", this.Data)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UserPartialInfo) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 10)
	s = append(s, "&dialog.UserPartialInfo{")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	s = append(s, "AccessHash: "+fmt.Sprintf("%#v", this.AccessHash)+",\n")
	s = append(s, "Clock: "+fmt.Sprintf("%#v", this.Clock)+",\n")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	if this.Nick != nil {
		s = append(s, "Nick: "+fmt.Sprintf("%#v", this.Nick)+",\n")
	}
	if this.Avatar != nil {
		s = append(s, "Avatar: "+fmt.Sprintf("%#v", this.Avatar)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UserProfile) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 12)
	s = append(s, "&dialog.UserProfile{")
	if this.User != nil {
		s = append(s, "User: "+fmt.Sprintf("%#v", this.User)+",\n")
	}
	if this.ContactInfo != nil {
		s = append(s, "ContactInfo: "+fmt.Sprintf("%#v", this.ContactInfo)+",\n")
	}
	if this.About != nil {
		s = append(s, "About: "+fmt.Sprintf("%#v", this.About)+",\n")
	}
	s = append(s, "PreferredLanguages: "+fmt.Sprintf("%#v", this.PreferredLanguages)+",\n")
	if this.TimeZone != nil {
		s = append(s, "TimeZone: "+fmt.Sprintf("%#v", this.TimeZone)+",\n")
	}
	if this.BotCommands != nil {
		s = append(s, "BotCommands: "+fmt.Sprintf("%#v", this.BotCommands)+",\n")
	}
	s = append(s, "CustomProfile: "+fmt.Sprintf("%#v", this.CustomProfile)+",\n")
	if this.IntegrationToken != nil {
		s = append(s, "IntegrationToken: "+fmt.Sprintf("%#v", this.IntegrationToken)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *FullUser) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 14)
	s = append(s, "&dialog.FullUser{")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	if this.ContactInfo != nil {
		s = append(s, "ContactInfo: "+fmt.Sprintf("%#v", this.ContactInfo)+",\n")
	}
	if this.About != nil {
		s = append(s, "About: "+fmt.Sprintf("%#v", this.About)+",\n")
	}
	s = append(s, "PreferredLanguages: "+fmt.Sprintf("%#v", this.PreferredLanguages)+",\n")
	if this.TimeZone != nil {
		s = append(s, "TimeZone: "+fmt.Sprintf("%#v", this.TimeZone)+",\n")
	}
	if this.BotCommands != nil {
		s = append(s, "BotCommands: "+fmt.Sprintf("%#v", this.BotCommands)+",\n")
	}
	if this.IsBlocked != nil {
		s = append(s, "IsBlocked: "+fmt.Sprintf("%#v", this.IsBlocked)+",\n")
	}
	s = append(s, "CustomProfile: "+fmt.Sprintf("%#v", this.CustomProfile)+",\n")
	if this.IntegrationToken != nil {
		s = append(s, "IntegrationToken: "+fmt.Sprintf("%#v", this.IntegrationToken)+",\n")
	}
	if this.Status != nil {
		s = append(s, "Status: "+fmt.Sprintf("%#v", this.Status)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *BotCommand) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&dialog.BotCommand{")
	s = append(s, "SlashCommand: "+fmt.Sprintf("%#v", this.SlashCommand)+",\n")
	s = append(s, "Description: "+fmt.Sprintf("%#v", this.Description)+",\n")
	if this.LocKey != nil {
		s = append(s, "LocKey: "+fmt.Sprintf("%#v", this.LocKey)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RequestEditUserLocalName) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&dialog.RequestEditUserLocalName{")
	s = append(s, "Uid: "+fmt.Sprintf("%#v", this.Uid)+",\n")
	s = append(s, "AccessHash: "+fmt.Sprintf("%#v", this.AccessHash)+",\n")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RequestLoadUserData) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&dialog.RequestLoadUserData{")
	if this.Claims != nil {
		s = append(s, "Claims: "+fmt.Sprintf("%#v", this.Claims)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RequestLoadUserData_Claim) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&dialog.RequestLoadUserData_Claim{")
	if this.UserPeer != nil {
		s = append(s, "UserPeer: "+fmt.Sprintf("%#v", this.UserPeer)+",\n")
	}
	if this.Kind != nil {
		s = append(s, "Kind: "+fmt.Sprintf("%#v", this.Kind)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RequestLoadUserData_Claim_P2P) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dialog.RequestLoadUserData_Claim_P2P{` +
		`P2P:` + fmt.Sprintf("%#v", this.P2P) + `}`}, ", ")
	return s
}
func (this *RequestLoadUserData_Claim_GroupMember) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dialog.RequestLoadUserData_Claim_GroupMember{` +
		`GroupMember:` + fmt.Sprintf("%#v", this.GroupMember) + `}`}, ", ")
	return s
}
func (this *RequestLoadUserData_Claim_Contact) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dialog.RequestLoadUserData_Claim_Contact{` +
		`Contact:` + fmt.Sprintf("%#v", this.Contact) + `}`}, ", ")
	return s
}
func (this *ResponseLoadUserData) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&dialog.ResponseLoadUserData{")
	if this.Users != nil {
		s = append(s, "Users: "+fmt.Sprintf("%#v", this.Users)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UpdateUser) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&dialog.UpdateUser{")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	if this.Data != nil {
		s = append(s, "Data: "+fmt.Sprintf("%#v", this.Data)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UpdateUserAvatarChanged) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&dialog.UpdateUserAvatarChanged{")
	s = append(s, "Uid: "+fmt.Sprintf("%#v", this.Uid)+",\n")
	if this.Avatar != nil {
		s = append(s, "Avatar: "+fmt.Sprintf("%#v", this.Avatar)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UpdateUserNameChanged) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&dialog.UpdateUserNameChanged{")
	s = append(s, "Uid: "+fmt.Sprintf("%#v", this.Uid)+",\n")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UpdateUserLocalNameChanged) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&dialog.UpdateUserLocalNameChanged{")
	s = append(s, "Uid: "+fmt.Sprintf("%#v", this.Uid)+",\n")
	if this.LocalName != nil {
		s = append(s, "LocalName: "+fmt.Sprintf("%#v", this.LocalName)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UpdateUserContactsChanged) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&dialog.UpdateUserContactsChanged{")
	s = append(s, "Uid: "+fmt.Sprintf("%#v", this.Uid)+",\n")
	if this.ContactRecords != nil {
		s = append(s, "ContactRecords: "+fmt.Sprintf("%#v", this.ContactRecords)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UpdateUserNickChanged) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&dialog.UpdateUserNickChanged{")
	s = append(s, "Uid: "+fmt.Sprintf("%#v", this.Uid)+",\n")
	if this.Nickname != nil {
		s = append(s, "Nickname: "+fmt.Sprintf("%#v", this.Nickname)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UpdateUserAboutChanged) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&dialog.UpdateUserAboutChanged{")
	s = append(s, "Uid: "+fmt.Sprintf("%#v", this.Uid)+",\n")
	if this.About != nil {
		s = append(s, "About: "+fmt.Sprintf("%#v", this.About)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UpdateUserPreferredLanguagesChanged) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&dialog.UpdateUserPreferredLanguagesChanged{")
	s = append(s, "Uid: "+fmt.Sprintf("%#v", this.Uid)+",\n")
	s = append(s, "PreferredLanguages: "+fmt.Sprintf("%#v", this.PreferredLanguages)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UpdateUserTimeZoneChanged) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&dialog.UpdateUserTimeZoneChanged{")
	s = append(s, "Uid: "+fmt.Sprintf("%#v", this.Uid)+",\n")
	if this.TimeZone != nil {
		s = append(s, "TimeZone: "+fmt.Sprintf("%#v", this.TimeZone)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UpdateUserBotCommandsChanged) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&dialog.UpdateUserBotCommandsChanged{")
	s = append(s, "Uid: "+fmt.Sprintf("%#v", this.Uid)+",\n")
	if this.Commands != nil {
		s = append(s, "Commands: "+fmt.Sprintf("%#v", this.Commands)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UpdateUserSexChanged) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&dialog.UpdateUserSexChanged{")
	s = append(s, "Uid: "+fmt.Sprintf("%#v", this.Uid)+",\n")
	s = append(s, "Sex: "+fmt.Sprintf("%#v", this.Sex)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UpdateUserCustomProfileChanged) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&dialog.UpdateUserCustomProfileChanged{")
	s = append(s, "Uid: "+fmt.Sprintf("%#v", this.Uid)+",\n")
	s = append(s, "CustomProfile: "+fmt.Sprintf("%#v", this.CustomProfile)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UpdateUserStatusChanged) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&dialog.UpdateUserStatusChanged{")
	s = append(s, "Uid: "+fmt.Sprintf("%#v", this.Uid)+",\n")
	if this.Status != nil {
		s = append(s, "Status: "+fmt.Sprintf("%#v", this.Status)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UpdateUserExtChanged) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&dialog.UpdateUserExtChanged{")
	s = append(s, "Uid: "+fmt.Sprintf("%#v", this.Uid)+",\n")
	if this.Ext != nil {
		s = append(s, "Ext: "+fmt.Sprintf("%#v", this.Ext)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UpdateUserFullExtChanged) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&dialog.UpdateUserFullExtChanged{")
	s = append(s, "Uid: "+fmt.Sprintf("%#v", this.Uid)+",\n")
	if this.Ext != nil {
		s = append(s, "Ext: "+fmt.Sprintf("%#v", this.Ext)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RequestLoadFullUsers) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&dialog.RequestLoadFullUsers{")
	if this.UserPeers != nil {
		s = append(s, "UserPeers: "+fmt.Sprintf("%#v", this.UserPeers)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ResponseLoadFullUsers) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&dialog.ResponseLoadFullUsers{")
	if this.FullUsers != nil {
		s = append(s, "FullUsers: "+fmt.Sprintf("%#v", this.FullUsers)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringUsers(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// UsersClient is the client API for Users service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type UsersClient interface {
	EditUserLocalName(ctx context.Context, in *RequestEditUserLocalName, opts ...grpc.CallOption) (*ResponseSeq, error)
	/// Deprecated
	LoadFullUsers(ctx context.Context, in *RequestLoadFullUsers, opts ...grpc.CallOption) (*ResponseLoadFullUsers, error)
	LoadUserData(ctx context.Context, in *RequestLoadUserData, opts ...grpc.CallOption) (*ResponseLoadUserData, error)
}

type usersClient struct {
	cc *grpc.ClientConn
}

func NewUsersClient(cc *grpc.ClientConn) UsersClient {
	return &usersClient{cc}
}

func (c *usersClient) EditUserLocalName(ctx context.Context, in *RequestEditUserLocalName, opts ...grpc.CallOption) (*ResponseSeq, error) {
	out := new(ResponseSeq)
	err := c.cc.Invoke(ctx, "/dialog.Users/EditUserLocalName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersClient) LoadFullUsers(ctx context.Context, in *RequestLoadFullUsers, opts ...grpc.CallOption) (*ResponseLoadFullUsers, error) {
	out := new(ResponseLoadFullUsers)
	err := c.cc.Invoke(ctx, "/dialog.Users/LoadFullUsers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersClient) LoadUserData(ctx context.Context, in *RequestLoadUserData, opts ...grpc.CallOption) (*ResponseLoadUserData, error) {
	out := new(ResponseLoadUserData)
	err := c.cc.Invoke(ctx, "/dialog.Users/LoadUserData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UsersServer is the server API for Users service.
type UsersServer interface {
	EditUserLocalName(context.Context, *RequestEditUserLocalName) (*ResponseSeq, error)
	/// Deprecated
	LoadFullUsers(context.Context, *RequestLoadFullUsers) (*ResponseLoadFullUsers, error)
	LoadUserData(context.Context, *RequestLoadUserData) (*ResponseLoadUserData, error)
}

// UnimplementedUsersServer can be embedded to have forward compatible implementations.
type UnimplementedUsersServer struct {
}

func (*UnimplementedUsersServer) EditUserLocalName(ctx context.Context, req *RequestEditUserLocalName) (*ResponseSeq, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EditUserLocalName not implemented")
}
func (*UnimplementedUsersServer) LoadFullUsers(ctx context.Context, req *RequestLoadFullUsers) (*ResponseLoadFullUsers, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoadFullUsers not implemented")
}
func (*UnimplementedUsersServer) LoadUserData(ctx context.Context, req *RequestLoadUserData) (*ResponseLoadUserData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoadUserData not implemented")
}

func RegisterUsersServer(s *grpc.Server, srv UsersServer) {
	s.RegisterService(&_Users_serviceDesc, srv)
}

func _Users_EditUserLocalName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestEditUserLocalName)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServer).EditUserLocalName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dialog.Users/EditUserLocalName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServer).EditUserLocalName(ctx, req.(*RequestEditUserLocalName))
	}
	return interceptor(ctx, in, info, handler)
}

func _Users_LoadFullUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestLoadFullUsers)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServer).LoadFullUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dialog.Users/LoadFullUsers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServer).LoadFullUsers(ctx, req.(*RequestLoadFullUsers))
	}
	return interceptor(ctx, in, info, handler)
}

func _Users_LoadUserData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestLoadUserData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServer).LoadUserData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dialog.Users/LoadUserData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServer).LoadUserData(ctx, req.(*RequestLoadUserData))
	}
	return interceptor(ctx, in, info, handler)
}

var _Users_serviceDesc = grpc.ServiceDesc{
	ServiceName: "dialog.Users",
	HandlerType: (*UsersServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "EditUserLocalName",
			Handler:    _Users_EditUserLocalName_Handler,
		},
		{
			MethodName: "LoadFullUsers",
			Handler:    _Users_LoadFullUsers_Handler,
		},
		{
			MethodName: "LoadUserData",
			Handler:    _Users_LoadUserData_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "users.proto",
}

func (m *ContactRecord) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ContactRecord) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ContactRecord) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TypeSpec != nil {
		{
			size, err := m.TypeSpec.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintUsers(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if m.Subtitle != nil {
		{
			size, err := m.Subtitle.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintUsers(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.Title != nil {
		{
			size, err := m.Title.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintUsers(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.LongValue != nil {
		{
			size, err := m.LongValue.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintUsers(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.StringValue != nil {
		{
			size, err := m.StringValue.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintUsers(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Type != 0 {
		i = encodeVarintUsers(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *UserStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserStatus) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UserStatus) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Clock != 0 {
		i = encodeVarintUsers(dAtA, i, uint64(m.Clock))
		i--
		dAtA[i] = 0x18
	}
	if m.Text != nil {
		{
			size, err := m.Text.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintUsers(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Type != 0 {
		i = encodeVarintUsers(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *UserData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UserData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Hint != 0 {
		i = encodeVarintUsers(dAtA, i, uint64(m.Hint))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x88
	}
	if m.Clock != 0 {
		i = encodeVarintUsers(dAtA, i, uint64(m.Clock))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x80
	}
	if m.CustomProfile != nil {
		{
			size, err := m.CustomProfile.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintUsers(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x7a
	}
	if len(m.BotCommands) > 0 {
		for iNdEx := len(m.BotCommands) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.BotCommands[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintUsers(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x72
		}
	}
	if len(m.ContactInfo) > 0 {
		for iNdEx := len(m.ContactInfo) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ContactInfo[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintUsers(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x6a
		}
	}
	if m.About != nil {
		{
			size, err := m.About.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintUsers(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x62
	}
	if len(m.Locales) > 0 {
		for iNdEx := len(m.Locales) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Locales[iNdEx])
			copy(dAtA[i:], m.Locales[iNdEx])
			i = encodeVarintUsers(dAtA, i, uint64(len(m.Locales[iNdEx])))
			i--
			dAtA[i] = 0x5a
		}
	}
	if m.ObsoleteClock != nil {
		{
			size, err := m.ObsoleteClock.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintUsers(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x52
	}
	if len(m.Exts) > 0 {
		for iNdEx := len(m.Exts) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Exts[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintUsers(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x4a
		}
	}
	if len(m.TimeZone) > 0 {
		i -= len(m.TimeZone)
		copy(dAtA[i:], m.TimeZone)
		i = encodeVarintUsers(dAtA, i, uint64(len(m.TimeZone)))
		i--
		dAtA[i] = 0x42
	}
	if m.UserStatus != nil {
		{
			size, err := m.UserStatus.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintUsers(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if m.Status != 0 {
		i = encodeVarintUsers(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x30
	}
	if m.IsBot != nil {
		{
			size, err := m.IsBot.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintUsers(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.Avatar != nil {
		{
			size, err := m.Avatar.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintUsers(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.Sex != 0 {
		i = encodeVarintUsers(dAtA, i, uint64(m.Sex))
		i--
		dAtA[i] = 0x18
	}
	if m.Nick != nil {
		{
			size, err := m.Nick.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintUsers(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintUsers(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UserData_Ext) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserData_Ext) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UserData_Ext) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.V != nil {
		{
			size := m.V.Size()
			i -= size
			if _, err := m.V.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if len(m.Key) > 0 {
		i -= len(m.Key)
		copy(dAtA[i:], m.Key)
		i = encodeVarintUsers(dAtA, i, uint64(len(m.Key)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UserData_Ext_S) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UserData_Ext_S) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= len(m.S)
	copy(dAtA[i:], m.S)
	i = encodeVarintUsers(dAtA, i, uint64(len(m.S)))
	i--
	dAtA[i] = 0x12
	return len(dAtA) - i, nil
}
func (m *UserData_Ext_B) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UserData_Ext_B) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i--
	if m.B {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x18
	return len(dAtA) - i, nil
}
func (m *User) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *User) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *User) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Data != nil {
		{
			size, err := m.Data.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintUsers(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.AccessHash != 0 {
		i = encodeVarintUsers(dAtA, i, uint64(m.AccessHash))
		i--
		dAtA[i] = 0x10
	}
	if m.Id != 0 {
		i = encodeVarintUsers(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *UserPartialInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserPartialInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UserPartialInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Avatar != nil {
		{
			size, err := m.Avatar.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintUsers(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if m.Nick != nil {
		{
			size, err := m.Nick.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintUsers(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintUsers(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x22
	}
	if m.Clock != 0 {
		i = encodeVarintUsers(dAtA, i, uint64(m.Clock))
		i--
		dAtA[i] = 0x18
	}
	if m.AccessHash != 0 {
		i = encodeVarintUsers(dAtA, i, uint64(m.AccessHash))
		i--
		dAtA[i] = 0x10
	}
	if m.Id != 0 {
		i = encodeVarintUsers(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *UserProfile) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserProfile) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UserProfile) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.IntegrationToken != nil {
		{
			size, err := m.IntegrationToken.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintUsers(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x52
	}
	if len(m.CustomProfile) > 0 {
		i -= len(m.CustomProfile)
		copy(dAtA[i:], m.CustomProfile)
		i = encodeVarintUsers(dAtA, i, uint64(len(m.CustomProfile)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.BotCommands) > 0 {
		for iNdEx := len(m.BotCommands) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.BotCommands[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintUsers(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	if m.TimeZone != nil {
		{
			size, err := m.TimeZone.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintUsers(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if len(m.PreferredLanguages) > 0 {
		for iNdEx := len(m.PreferredLanguages) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.PreferredLanguages[iNdEx])
			copy(dAtA[i:], m.PreferredLanguages[iNdEx])
			i = encodeVarintUsers(dAtA, i, uint64(len(m.PreferredLanguages[iNdEx])))
			i--
			dAtA[i] = 0x22
		}
	}
	if m.About != nil {
		{
			size, err := m.About.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintUsers(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ContactInfo) > 0 {
		for iNdEx := len(m.ContactInfo) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ContactInfo[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintUsers(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.User != nil {
		{
			size, err := m.User.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintUsers(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *FullUser) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FullUser) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FullUser) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Status != nil {
		{
			size, err := m.Status.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintUsers(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5a
	}
	if m.IntegrationToken != nil {
		{
			size, err := m.IntegrationToken.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintUsers(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x52
	}
	if len(m.CustomProfile) > 0 {
		i -= len(m.CustomProfile)
		copy(dAtA[i:], m.CustomProfile)
		i = encodeVarintUsers(dAtA, i, uint64(len(m.CustomProfile)))
		i--
		dAtA[i] = 0x4a
	}
	if m.IsBlocked != nil {
		{
			size, err := m.IsBlocked.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintUsers(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	if len(m.BotCommands) > 0 {
		for iNdEx := len(m.BotCommands) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.BotCommands[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintUsers(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	if m.TimeZone != nil {
		{
			size, err := m.TimeZone.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintUsers(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if len(m.PreferredLanguages) > 0 {
		for iNdEx := len(m.PreferredLanguages) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.PreferredLanguages[iNdEx])
			copy(dAtA[i:], m.PreferredLanguages[iNdEx])
			i = encodeVarintUsers(dAtA, i, uint64(len(m.PreferredLanguages[iNdEx])))
			i--
			dAtA[i] = 0x22
		}
	}
	if m.About != nil {
		{
			size, err := m.About.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintUsers(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ContactInfo) > 0 {
		for iNdEx := len(m.ContactInfo) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ContactInfo[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintUsers(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Id != 0 {
		i = encodeVarintUsers(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *BotCommand) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BotCommand) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BotCommand) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.LocKey != nil {
		{
			size, err := m.LocKey.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintUsers(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintUsers(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.SlashCommand) > 0 {
		i -= len(m.SlashCommand)
		copy(dAtA[i:], m.SlashCommand)
		i = encodeVarintUsers(dAtA, i, uint64(len(m.SlashCommand)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RequestEditUserLocalName) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestEditUserLocalName) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RequestEditUserLocalName) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintUsers(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x1a
	}
	if m.AccessHash != 0 {
		i = encodeVarintUsers(dAtA, i, uint64(m.AccessHash))
		i--
		dAtA[i] = 0x10
	}
	if m.Uid != 0 {
		i = encodeVarintUsers(dAtA, i, uint64(m.Uid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *RequestLoadUserData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestLoadUserData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RequestLoadUserData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Claims) > 0 {
		for iNdEx := len(m.Claims) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Claims[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintUsers(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *RequestLoadUserData_Claim) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestLoadUserData_Claim) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RequestLoadUserData_Claim) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Kind != nil {
		{
			size := m.Kind.Size()
			i -= size
			if _, err := m.Kind.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.UserPeer != nil {
		{
			size, err := m.UserPeer.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintUsers(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RequestLoadUserData_Claim_P2P) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RequestLoadUserData_Claim_P2P) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i--
	if m.P2P {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x10
	return len(dAtA) - i, nil
}
func (m *RequestLoadUserData_Claim_GroupMember) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RequestLoadUserData_Claim_GroupMember) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.GroupMember != nil {
		{
			size, err := m.GroupMember.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintUsers(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *RequestLoadUserData_Claim_Contact) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RequestLoadUserData_Claim_Contact) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i--
	if m.Contact {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x20
	return len(dAtA) - i, nil
}
func (m *ResponseLoadUserData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResponseLoadUserData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ResponseLoadUserData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Users) > 0 {
		for iNdEx := len(m.Users) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Users[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintUsers(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *UpdateUser) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateUser) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateUser) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Data != nil {
		{
			size, err := m.Data.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintUsers(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintUsers(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *UpdateUserAvatarChanged) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateUserAvatarChanged) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateUserAvatarChanged) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Avatar != nil {
		{
			size, err := m.Avatar.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintUsers(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Uid != 0 {
		i = encodeVarintUsers(dAtA, i, uint64(m.Uid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *UpdateUserNameChanged) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateUserNameChanged) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateUserNameChanged) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintUsers(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if m.Uid != 0 {
		i = encodeVarintUsers(dAtA, i, uint64(m.Uid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *UpdateUserLocalNameChanged) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateUserLocalNameChanged) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateUserLocalNameChanged) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.LocalName != nil {
		{
			size, err := m.LocalName.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintUsers(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Uid != 0 {
		i = encodeVarintUsers(dAtA, i, uint64(m.Uid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *UpdateUserContactsChanged) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateUserContactsChanged) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateUserContactsChanged) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ContactRecords) > 0 {
		for iNdEx := len(m.ContactRecords) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ContactRecords[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintUsers(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if m.Uid != 0 {
		i = encodeVarintUsers(dAtA, i, uint64(m.Uid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *UpdateUserNickChanged) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateUserNickChanged) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateUserNickChanged) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Nickname != nil {
		{
			size, err := m.Nickname.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintUsers(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Uid != 0 {
		i = encodeVarintUsers(dAtA, i, uint64(m.Uid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *UpdateUserAboutChanged) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateUserAboutChanged) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateUserAboutChanged) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.About != nil {
		{
			size, err := m.About.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintUsers(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Uid != 0 {
		i = encodeVarintUsers(dAtA, i, uint64(m.Uid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *UpdateUserPreferredLanguagesChanged) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateUserPreferredLanguagesChanged) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateUserPreferredLanguagesChanged) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PreferredLanguages) > 0 {
		for iNdEx := len(m.PreferredLanguages) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.PreferredLanguages[iNdEx])
			copy(dAtA[i:], m.PreferredLanguages[iNdEx])
			i = encodeVarintUsers(dAtA, i, uint64(len(m.PreferredLanguages[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Uid != 0 {
		i = encodeVarintUsers(dAtA, i, uint64(m.Uid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *UpdateUserTimeZoneChanged) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateUserTimeZoneChanged) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateUserTimeZoneChanged) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TimeZone != nil {
		{
			size, err := m.TimeZone.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintUsers(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Uid != 0 {
		i = encodeVarintUsers(dAtA, i, uint64(m.Uid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *UpdateUserBotCommandsChanged) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateUserBotCommandsChanged) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateUserBotCommandsChanged) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Commands) > 0 {
		for iNdEx := len(m.Commands) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Commands[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintUsers(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Uid != 0 {
		i = encodeVarintUsers(dAtA, i, uint64(m.Uid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *UpdateUserSexChanged) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateUserSexChanged) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateUserSexChanged) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Sex != 0 {
		i = encodeVarintUsers(dAtA, i, uint64(m.Sex))
		i--
		dAtA[i] = 0x10
	}
	if m.Uid != 0 {
		i = encodeVarintUsers(dAtA, i, uint64(m.Uid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *UpdateUserCustomProfileChanged) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateUserCustomProfileChanged) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateUserCustomProfileChanged) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.CustomProfile) > 0 {
		i -= len(m.CustomProfile)
		copy(dAtA[i:], m.CustomProfile)
		i = encodeVarintUsers(dAtA, i, uint64(len(m.CustomProfile)))
		i--
		dAtA[i] = 0x12
	}
	if m.Uid != 0 {
		i = encodeVarintUsers(dAtA, i, uint64(m.Uid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *UpdateUserStatusChanged) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateUserStatusChanged) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateUserStatusChanged) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Status != nil {
		{
			size, err := m.Status.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintUsers(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Uid != 0 {
		i = encodeVarintUsers(dAtA, i, uint64(m.Uid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *UpdateUserExtChanged) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateUserExtChanged) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateUserExtChanged) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Ext != nil {
		{
			size, err := m.Ext.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintUsers(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Uid != 0 {
		i = encodeVarintUsers(dAtA, i, uint64(m.Uid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *UpdateUserFullExtChanged) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateUserFullExtChanged) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateUserFullExtChanged) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Ext != nil {
		{
			size, err := m.Ext.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintUsers(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Uid != 0 {
		i = encodeVarintUsers(dAtA, i, uint64(m.Uid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *RequestLoadFullUsers) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestLoadFullUsers) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RequestLoadFullUsers) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.UserPeers) > 0 {
		for iNdEx := len(m.UserPeers) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.UserPeers[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintUsers(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ResponseLoadFullUsers) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResponseLoadFullUsers) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ResponseLoadFullUsers) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.FullUsers) > 0 {
		for iNdEx := len(m.FullUsers) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.FullUsers[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintUsers(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintUsers(dAtA []byte, offset int, v uint64) int {
	offset -= sovUsers(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ContactRecord) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovUsers(uint64(m.Type))
	}
	if m.StringValue != nil {
		l = m.StringValue.Size()
		n += 1 + l + sovUsers(uint64(l))
	}
	if m.LongValue != nil {
		l = m.LongValue.Size()
		n += 1 + l + sovUsers(uint64(l))
	}
	if m.Title != nil {
		l = m.Title.Size()
		n += 1 + l + sovUsers(uint64(l))
	}
	if m.Subtitle != nil {
		l = m.Subtitle.Size()
		n += 1 + l + sovUsers(uint64(l))
	}
	if m.TypeSpec != nil {
		l = m.TypeSpec.Size()
		n += 1 + l + sovUsers(uint64(l))
	}
	return n
}

func (m *UserStatus) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovUsers(uint64(m.Type))
	}
	if m.Text != nil {
		l = m.Text.Size()
		n += 1 + l + sovUsers(uint64(l))
	}
	if m.Clock != 0 {
		n += 1 + sovUsers(uint64(m.Clock))
	}
	return n
}

func (m *UserData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovUsers(uint64(l))
	}
	if m.Nick != nil {
		l = m.Nick.Size()
		n += 1 + l + sovUsers(uint64(l))
	}
	if m.Sex != 0 {
		n += 1 + sovUsers(uint64(m.Sex))
	}
	if m.Avatar != nil {
		l = m.Avatar.Size()
		n += 1 + l + sovUsers(uint64(l))
	}
	if m.IsBot != nil {
		l = m.IsBot.Size()
		n += 1 + l + sovUsers(uint64(l))
	}
	if m.Status != 0 {
		n += 1 + sovUsers(uint64(m.Status))
	}
	if m.UserStatus != nil {
		l = m.UserStatus.Size()
		n += 1 + l + sovUsers(uint64(l))
	}
	l = len(m.TimeZone)
	if l > 0 {
		n += 1 + l + sovUsers(uint64(l))
	}
	if len(m.Exts) > 0 {
		for _, e := range m.Exts {
			l = e.Size()
			n += 1 + l + sovUsers(uint64(l))
		}
	}
	if m.ObsoleteClock != nil {
		l = m.ObsoleteClock.Size()
		n += 1 + l + sovUsers(uint64(l))
	}
	if len(m.Locales) > 0 {
		for _, s := range m.Locales {
			l = len(s)
			n += 1 + l + sovUsers(uint64(l))
		}
	}
	if m.About != nil {
		l = m.About.Size()
		n += 1 + l + sovUsers(uint64(l))
	}
	if len(m.ContactInfo) > 0 {
		for _, e := range m.ContactInfo {
			l = e.Size()
			n += 1 + l + sovUsers(uint64(l))
		}
	}
	if len(m.BotCommands) > 0 {
		for _, e := range m.BotCommands {
			l = e.Size()
			n += 1 + l + sovUsers(uint64(l))
		}
	}
	if m.CustomProfile != nil {
		l = m.CustomProfile.Size()
		n += 1 + l + sovUsers(uint64(l))
	}
	if m.Clock != 0 {
		n += 2 + sovUsers(uint64(m.Clock))
	}
	if m.Hint != 0 {
		n += 2 + sovUsers(uint64(m.Hint))
	}
	return n
}

func (m *UserData_Ext) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovUsers(uint64(l))
	}
	if m.V != nil {
		n += m.V.Size()
	}
	return n
}

func (m *UserData_Ext_S) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.S)
	n += 1 + l + sovUsers(uint64(l))
	return n
}
func (m *UserData_Ext_B) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 2
	return n
}
func (m *User) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovUsers(uint64(m.Id))
	}
	if m.AccessHash != 0 {
		n += 1 + sovUsers(uint64(m.AccessHash))
	}
	if m.Data != nil {
		l = m.Data.Size()
		n += 1 + l + sovUsers(uint64(l))
	}
	return n
}

func (m *UserPartialInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovUsers(uint64(m.Id))
	}
	if m.AccessHash != 0 {
		n += 1 + sovUsers(uint64(m.AccessHash))
	}
	if m.Clock != 0 {
		n += 1 + sovUsers(uint64(m.Clock))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovUsers(uint64(l))
	}
	if m.Nick != nil {
		l = m.Nick.Size()
		n += 1 + l + sovUsers(uint64(l))
	}
	if m.Avatar != nil {
		l = m.Avatar.Size()
		n += 1 + l + sovUsers(uint64(l))
	}
	return n
}

func (m *UserProfile) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.User != nil {
		l = m.User.Size()
		n += 1 + l + sovUsers(uint64(l))
	}
	if len(m.ContactInfo) > 0 {
		for _, e := range m.ContactInfo {
			l = e.Size()
			n += 1 + l + sovUsers(uint64(l))
		}
	}
	if m.About != nil {
		l = m.About.Size()
		n += 1 + l + sovUsers(uint64(l))
	}
	if len(m.PreferredLanguages) > 0 {
		for _, s := range m.PreferredLanguages {
			l = len(s)
			n += 1 + l + sovUsers(uint64(l))
		}
	}
	if m.TimeZone != nil {
		l = m.TimeZone.Size()
		n += 1 + l + sovUsers(uint64(l))
	}
	if len(m.BotCommands) > 0 {
		for _, e := range m.BotCommands {
			l = e.Size()
			n += 1 + l + sovUsers(uint64(l))
		}
	}
	l = len(m.CustomProfile)
	if l > 0 {
		n += 1 + l + sovUsers(uint64(l))
	}
	if m.IntegrationToken != nil {
		l = m.IntegrationToken.Size()
		n += 1 + l + sovUsers(uint64(l))
	}
	return n
}

func (m *FullUser) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovUsers(uint64(m.Id))
	}
	if len(m.ContactInfo) > 0 {
		for _, e := range m.ContactInfo {
			l = e.Size()
			n += 1 + l + sovUsers(uint64(l))
		}
	}
	if m.About != nil {
		l = m.About.Size()
		n += 1 + l + sovUsers(uint64(l))
	}
	if len(m.PreferredLanguages) > 0 {
		for _, s := range m.PreferredLanguages {
			l = len(s)
			n += 1 + l + sovUsers(uint64(l))
		}
	}
	if m.TimeZone != nil {
		l = m.TimeZone.Size()
		n += 1 + l + sovUsers(uint64(l))
	}
	if len(m.BotCommands) > 0 {
		for _, e := range m.BotCommands {
			l = e.Size()
			n += 1 + l + sovUsers(uint64(l))
		}
	}
	if m.IsBlocked != nil {
		l = m.IsBlocked.Size()
		n += 1 + l + sovUsers(uint64(l))
	}
	l = len(m.CustomProfile)
	if l > 0 {
		n += 1 + l + sovUsers(uint64(l))
	}
	if m.IntegrationToken != nil {
		l = m.IntegrationToken.Size()
		n += 1 + l + sovUsers(uint64(l))
	}
	if m.Status != nil {
		l = m.Status.Size()
		n += 1 + l + sovUsers(uint64(l))
	}
	return n
}

func (m *BotCommand) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SlashCommand)
	if l > 0 {
		n += 1 + l + sovUsers(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovUsers(uint64(l))
	}
	if m.LocKey != nil {
		l = m.LocKey.Size()
		n += 1 + l + sovUsers(uint64(l))
	}
	return n
}

func (m *RequestEditUserLocalName) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Uid != 0 {
		n += 1 + sovUsers(uint64(m.Uid))
	}
	if m.AccessHash != 0 {
		n += 1 + sovUsers(uint64(m.AccessHash))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovUsers(uint64(l))
	}
	return n
}

func (m *RequestLoadUserData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Claims) > 0 {
		for _, e := range m.Claims {
			l = e.Size()
			n += 1 + l + sovUsers(uint64(l))
		}
	}
	return n
}

func (m *RequestLoadUserData_Claim) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UserPeer != nil {
		l = m.UserPeer.Size()
		n += 1 + l + sovUsers(uint64(l))
	}
	if m.Kind != nil {
		n += m.Kind.Size()
	}
	return n
}

func (m *RequestLoadUserData_Claim_P2P) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 2
	return n
}
func (m *RequestLoadUserData_Claim_GroupMember) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.GroupMember != nil {
		l = m.GroupMember.Size()
		n += 1 + l + sovUsers(uint64(l))
	}
	return n
}
func (m *RequestLoadUserData_Claim_Contact) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 2
	return n
}
func (m *ResponseLoadUserData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Users) > 0 {
		for _, e := range m.Users {
			l = e.Size()
			n += 1 + l + sovUsers(uint64(l))
		}
	}
	return n
}

func (m *UpdateUser) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovUsers(uint64(m.Id))
	}
	if m.Data != nil {
		l = m.Data.Size()
		n += 1 + l + sovUsers(uint64(l))
	}
	return n
}

func (m *UpdateUserAvatarChanged) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Uid != 0 {
		n += 1 + sovUsers(uint64(m.Uid))
	}
	if m.Avatar != nil {
		l = m.Avatar.Size()
		n += 1 + l + sovUsers(uint64(l))
	}
	return n
}

func (m *UpdateUserNameChanged) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Uid != 0 {
		n += 1 + sovUsers(uint64(m.Uid))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovUsers(uint64(l))
	}
	return n
}

func (m *UpdateUserLocalNameChanged) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Uid != 0 {
		n += 1 + sovUsers(uint64(m.Uid))
	}
	if m.LocalName != nil {
		l = m.LocalName.Size()
		n += 1 + l + sovUsers(uint64(l))
	}
	return n
}

func (m *UpdateUserContactsChanged) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Uid != 0 {
		n += 1 + sovUsers(uint64(m.Uid))
	}
	if len(m.ContactRecords) > 0 {
		for _, e := range m.ContactRecords {
			l = e.Size()
			n += 1 + l + sovUsers(uint64(l))
		}
	}
	return n
}

func (m *UpdateUserNickChanged) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Uid != 0 {
		n += 1 + sovUsers(uint64(m.Uid))
	}
	if m.Nickname != nil {
		l = m.Nickname.Size()
		n += 1 + l + sovUsers(uint64(l))
	}
	return n
}

func (m *UpdateUserAboutChanged) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Uid != 0 {
		n += 1 + sovUsers(uint64(m.Uid))
	}
	if m.About != nil {
		l = m.About.Size()
		n += 1 + l + sovUsers(uint64(l))
	}
	return n
}

func (m *UpdateUserPreferredLanguagesChanged) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Uid != 0 {
		n += 1 + sovUsers(uint64(m.Uid))
	}
	if len(m.PreferredLanguages) > 0 {
		for _, s := range m.PreferredLanguages {
			l = len(s)
			n += 1 + l + sovUsers(uint64(l))
		}
	}
	return n
}

func (m *UpdateUserTimeZoneChanged) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Uid != 0 {
		n += 1 + sovUsers(uint64(m.Uid))
	}
	if m.TimeZone != nil {
		l = m.TimeZone.Size()
		n += 1 + l + sovUsers(uint64(l))
	}
	return n
}

func (m *UpdateUserBotCommandsChanged) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Uid != 0 {
		n += 1 + sovUsers(uint64(m.Uid))
	}
	if len(m.Commands) > 0 {
		for _, e := range m.Commands {
			l = e.Size()
			n += 1 + l + sovUsers(uint64(l))
		}
	}
	return n
}

func (m *UpdateUserSexChanged) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Uid != 0 {
		n += 1 + sovUsers(uint64(m.Uid))
	}
	if m.Sex != 0 {
		n += 1 + sovUsers(uint64(m.Sex))
	}
	return n
}

func (m *UpdateUserCustomProfileChanged) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Uid != 0 {
		n += 1 + sovUsers(uint64(m.Uid))
	}
	l = len(m.CustomProfile)
	if l > 0 {
		n += 1 + l + sovUsers(uint64(l))
	}
	return n
}

func (m *UpdateUserStatusChanged) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Uid != 0 {
		n += 1 + sovUsers(uint64(m.Uid))
	}
	if m.Status != nil {
		l = m.Status.Size()
		n += 1 + l + sovUsers(uint64(l))
	}
	return n
}

func (m *UpdateUserExtChanged) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Uid != 0 {
		n += 1 + sovUsers(uint64(m.Uid))
	}
	if m.Ext != nil {
		l = m.Ext.Size()
		n += 1 + l + sovUsers(uint64(l))
	}
	return n
}

func (m *UpdateUserFullExtChanged) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Uid != 0 {
		n += 1 + sovUsers(uint64(m.Uid))
	}
	if m.Ext != nil {
		l = m.Ext.Size()
		n += 1 + l + sovUsers(uint64(l))
	}
	return n
}

func (m *RequestLoadFullUsers) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.UserPeers) > 0 {
		for _, e := range m.UserPeers {
			l = e.Size()
			n += 1 + l + sovUsers(uint64(l))
		}
	}
	return n
}

func (m *ResponseLoadFullUsers) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.FullUsers) > 0 {
		for _, e := range m.FullUsers {
			l = e.Size()
			n += 1 + l + sovUsers(uint64(l))
		}
	}
	return n
}

func sovUsers(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozUsers(x uint64) (n int) {
	return sovUsers(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *ContactRecord) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ContactRecord{`,
		`Type:` + fmt.Sprintf("%v", this.Type) + `,`,
		`StringValue:` + strings.Replace(fmt.Sprintf("%v", this.StringValue), "StringValue", "types.StringValue", 1) + `,`,
		`LongValue:` + strings.Replace(fmt.Sprintf("%v", this.LongValue), "Int64Value", "types.Int64Value", 1) + `,`,
		`Title:` + strings.Replace(fmt.Sprintf("%v", this.Title), "StringValue", "types.StringValue", 1) + `,`,
		`Subtitle:` + strings.Replace(fmt.Sprintf("%v", this.Subtitle), "StringValue", "types.StringValue", 1) + `,`,
		`TypeSpec:` + strings.Replace(fmt.Sprintf("%v", this.TypeSpec), "StringValue", "types.StringValue", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UserStatus) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UserStatus{`,
		`Type:` + fmt.Sprintf("%v", this.Type) + `,`,
		`Text:` + strings.Replace(fmt.Sprintf("%v", this.Text), "StringValue", "types.StringValue", 1) + `,`,
		`Clock:` + fmt.Sprintf("%v", this.Clock) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UserData) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForExts := "[]*UserData_Ext{"
	for _, f := range this.Exts {
		repeatedStringForExts += strings.Replace(fmt.Sprintf("%v", f), "UserData_Ext", "UserData_Ext", 1) + ","
	}
	repeatedStringForExts += "}"
	repeatedStringForContactInfo := "[]*ContactRecord{"
	for _, f := range this.ContactInfo {
		repeatedStringForContactInfo += strings.Replace(f.String(), "ContactRecord", "ContactRecord", 1) + ","
	}
	repeatedStringForContactInfo += "}"
	repeatedStringForBotCommands := "[]*BotCommand{"
	for _, f := range this.BotCommands {
		repeatedStringForBotCommands += strings.Replace(f.String(), "BotCommand", "BotCommand", 1) + ","
	}
	repeatedStringForBotCommands += "}"
	s := strings.Join([]string{`&UserData{`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Nick:` + strings.Replace(fmt.Sprintf("%v", this.Nick), "StringValue", "types.StringValue", 1) + `,`,
		`Sex:` + fmt.Sprintf("%v", this.Sex) + `,`,
		`Avatar:` + strings.Replace(fmt.Sprintf("%v", this.Avatar), "Avatar", "Avatar", 1) + `,`,
		`IsBot:` + strings.Replace(fmt.Sprintf("%v", this.IsBot), "BoolValue", "types.BoolValue", 1) + `,`,
		`Status:` + fmt.Sprintf("%v", this.Status) + `,`,
		`UserStatus:` + strings.Replace(this.UserStatus.String(), "UserStatus", "UserStatus", 1) + `,`,
		`TimeZone:` + fmt.Sprintf("%v", this.TimeZone) + `,`,
		`Exts:` + repeatedStringForExts + `,`,
		`ObsoleteClock:` + strings.Replace(fmt.Sprintf("%v", this.ObsoleteClock), "DataClock", "DataClock", 1) + `,`,
		`Locales:` + fmt.Sprintf("%v", this.Locales) + `,`,
		`About:` + strings.Replace(fmt.Sprintf("%v", this.About), "StringValue", "types.StringValue", 1) + `,`,
		`ContactInfo:` + repeatedStringForContactInfo + `,`,
		`BotCommands:` + repeatedStringForBotCommands + `,`,
		`CustomProfile:` + strings.Replace(fmt.Sprintf("%v", this.CustomProfile), "StringValue", "types.StringValue", 1) + `,`,
		`Clock:` + fmt.Sprintf("%v", this.Clock) + `,`,
		`Hint:` + fmt.Sprintf("%v", this.Hint) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UserData_Ext) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UserData_Ext{`,
		`Key:` + fmt.Sprintf("%v", this.Key) + `,`,
		`V:` + fmt.Sprintf("%v", this.V) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UserData_Ext_S) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UserData_Ext_S{`,
		`S:` + fmt.Sprintf("%v", this.S) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UserData_Ext_B) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UserData_Ext_B{`,
		`B:` + fmt.Sprintf("%v", this.B) + `,`,
		`}`,
	}, "")
	return s
}
func (this *User) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&User{`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`AccessHash:` + fmt.Sprintf("%v", this.AccessHash) + `,`,
		`Data:` + strings.Replace(this.Data.String(), "UserData", "UserData", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UserPartialInfo) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UserPartialInfo{`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`AccessHash:` + fmt.Sprintf("%v", this.AccessHash) + `,`,
		`Clock:` + fmt.Sprintf("%v", this.Clock) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Nick:` + strings.Replace(fmt.Sprintf("%v", this.Nick), "StringValue", "types.StringValue", 1) + `,`,
		`Avatar:` + strings.Replace(fmt.Sprintf("%v", this.Avatar), "Avatar", "Avatar", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UserProfile) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForContactInfo := "[]*ContactRecord{"
	for _, f := range this.ContactInfo {
		repeatedStringForContactInfo += strings.Replace(f.String(), "ContactRecord", "ContactRecord", 1) + ","
	}
	repeatedStringForContactInfo += "}"
	repeatedStringForBotCommands := "[]*BotCommand{"
	for _, f := range this.BotCommands {
		repeatedStringForBotCommands += strings.Replace(f.String(), "BotCommand", "BotCommand", 1) + ","
	}
	repeatedStringForBotCommands += "}"
	s := strings.Join([]string{`&UserProfile{`,
		`User:` + strings.Replace(this.User.String(), "User", "User", 1) + `,`,
		`ContactInfo:` + repeatedStringForContactInfo + `,`,
		`About:` + strings.Replace(fmt.Sprintf("%v", this.About), "StringValue", "types.StringValue", 1) + `,`,
		`PreferredLanguages:` + fmt.Sprintf("%v", this.PreferredLanguages) + `,`,
		`TimeZone:` + strings.Replace(fmt.Sprintf("%v", this.TimeZone), "StringValue", "types.StringValue", 1) + `,`,
		`BotCommands:` + repeatedStringForBotCommands + `,`,
		`CustomProfile:` + fmt.Sprintf("%v", this.CustomProfile) + `,`,
		`IntegrationToken:` + strings.Replace(fmt.Sprintf("%v", this.IntegrationToken), "StringValue", "types.StringValue", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *FullUser) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForContactInfo := "[]*ContactRecord{"
	for _, f := range this.ContactInfo {
		repeatedStringForContactInfo += strings.Replace(f.String(), "ContactRecord", "ContactRecord", 1) + ","
	}
	repeatedStringForContactInfo += "}"
	repeatedStringForBotCommands := "[]*BotCommand{"
	for _, f := range this.BotCommands {
		repeatedStringForBotCommands += strings.Replace(f.String(), "BotCommand", "BotCommand", 1) + ","
	}
	repeatedStringForBotCommands += "}"
	s := strings.Join([]string{`&FullUser{`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`ContactInfo:` + repeatedStringForContactInfo + `,`,
		`About:` + strings.Replace(fmt.Sprintf("%v", this.About), "StringValue", "types.StringValue", 1) + `,`,
		`PreferredLanguages:` + fmt.Sprintf("%v", this.PreferredLanguages) + `,`,
		`TimeZone:` + strings.Replace(fmt.Sprintf("%v", this.TimeZone), "StringValue", "types.StringValue", 1) + `,`,
		`BotCommands:` + repeatedStringForBotCommands + `,`,
		`IsBlocked:` + strings.Replace(fmt.Sprintf("%v", this.IsBlocked), "BoolValue", "types.BoolValue", 1) + `,`,
		`CustomProfile:` + fmt.Sprintf("%v", this.CustomProfile) + `,`,
		`IntegrationToken:` + strings.Replace(fmt.Sprintf("%v", this.IntegrationToken), "StringValue", "types.StringValue", 1) + `,`,
		`Status:` + strings.Replace(this.Status.String(), "UserStatus", "UserStatus", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *BotCommand) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&BotCommand{`,
		`SlashCommand:` + fmt.Sprintf("%v", this.SlashCommand) + `,`,
		`Description:` + fmt.Sprintf("%v", this.Description) + `,`,
		`LocKey:` + strings.Replace(fmt.Sprintf("%v", this.LocKey), "StringValue", "types.StringValue", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RequestEditUserLocalName) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RequestEditUserLocalName{`,
		`Uid:` + fmt.Sprintf("%v", this.Uid) + `,`,
		`AccessHash:` + fmt.Sprintf("%v", this.AccessHash) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RequestLoadUserData) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForClaims := "[]*RequestLoadUserData_Claim{"
	for _, f := range this.Claims {
		repeatedStringForClaims += strings.Replace(fmt.Sprintf("%v", f), "RequestLoadUserData_Claim", "RequestLoadUserData_Claim", 1) + ","
	}
	repeatedStringForClaims += "}"
	s := strings.Join([]string{`&RequestLoadUserData{`,
		`Claims:` + repeatedStringForClaims + `,`,
		`}`,
	}, "")
	return s
}
func (this *RequestLoadUserData_Claim) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RequestLoadUserData_Claim{`,
		`UserPeer:` + strings.Replace(fmt.Sprintf("%v", this.UserPeer), "Peer", "Peer", 1) + `,`,
		`Kind:` + fmt.Sprintf("%v", this.Kind) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RequestLoadUserData_Claim_P2P) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RequestLoadUserData_Claim_P2P{`,
		`P2P:` + fmt.Sprintf("%v", this.P2P) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RequestLoadUserData_Claim_GroupMember) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RequestLoadUserData_Claim_GroupMember{`,
		`GroupMember:` + strings.Replace(fmt.Sprintf("%v", this.GroupMember), "Peer", "Peer", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RequestLoadUserData_Claim_Contact) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RequestLoadUserData_Claim_Contact{`,
		`Contact:` + fmt.Sprintf("%v", this.Contact) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ResponseLoadUserData) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForUsers := "[]*User{"
	for _, f := range this.Users {
		repeatedStringForUsers += strings.Replace(f.String(), "User", "User", 1) + ","
	}
	repeatedStringForUsers += "}"
	s := strings.Join([]string{`&ResponseLoadUserData{`,
		`Users:` + repeatedStringForUsers + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateUser) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateUser{`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`Data:` + strings.Replace(this.Data.String(), "UserData", "UserData", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateUserAvatarChanged) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateUserAvatarChanged{`,
		`Uid:` + fmt.Sprintf("%v", this.Uid) + `,`,
		`Avatar:` + strings.Replace(fmt.Sprintf("%v", this.Avatar), "Avatar", "Avatar", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateUserNameChanged) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateUserNameChanged{`,
		`Uid:` + fmt.Sprintf("%v", this.Uid) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateUserLocalNameChanged) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateUserLocalNameChanged{`,
		`Uid:` + fmt.Sprintf("%v", this.Uid) + `,`,
		`LocalName:` + strings.Replace(fmt.Sprintf("%v", this.LocalName), "StringValue", "types.StringValue", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateUserContactsChanged) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForContactRecords := "[]*ContactRecord{"
	for _, f := range this.ContactRecords {
		repeatedStringForContactRecords += strings.Replace(f.String(), "ContactRecord", "ContactRecord", 1) + ","
	}
	repeatedStringForContactRecords += "}"
	s := strings.Join([]string{`&UpdateUserContactsChanged{`,
		`Uid:` + fmt.Sprintf("%v", this.Uid) + `,`,
		`ContactRecords:` + repeatedStringForContactRecords + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateUserNickChanged) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateUserNickChanged{`,
		`Uid:` + fmt.Sprintf("%v", this.Uid) + `,`,
		`Nickname:` + strings.Replace(fmt.Sprintf("%v", this.Nickname), "StringValue", "types.StringValue", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateUserAboutChanged) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateUserAboutChanged{`,
		`Uid:` + fmt.Sprintf("%v", this.Uid) + `,`,
		`About:` + strings.Replace(fmt.Sprintf("%v", this.About), "StringValue", "types.StringValue", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateUserPreferredLanguagesChanged) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateUserPreferredLanguagesChanged{`,
		`Uid:` + fmt.Sprintf("%v", this.Uid) + `,`,
		`PreferredLanguages:` + fmt.Sprintf("%v", this.PreferredLanguages) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateUserTimeZoneChanged) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateUserTimeZoneChanged{`,
		`Uid:` + fmt.Sprintf("%v", this.Uid) + `,`,
		`TimeZone:` + strings.Replace(fmt.Sprintf("%v", this.TimeZone), "StringValue", "types.StringValue", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateUserBotCommandsChanged) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForCommands := "[]*BotCommand{"
	for _, f := range this.Commands {
		repeatedStringForCommands += strings.Replace(f.String(), "BotCommand", "BotCommand", 1) + ","
	}
	repeatedStringForCommands += "}"
	s := strings.Join([]string{`&UpdateUserBotCommandsChanged{`,
		`Uid:` + fmt.Sprintf("%v", this.Uid) + `,`,
		`Commands:` + repeatedStringForCommands + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateUserSexChanged) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateUserSexChanged{`,
		`Uid:` + fmt.Sprintf("%v", this.Uid) + `,`,
		`Sex:` + fmt.Sprintf("%v", this.Sex) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateUserCustomProfileChanged) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateUserCustomProfileChanged{`,
		`Uid:` + fmt.Sprintf("%v", this.Uid) + `,`,
		`CustomProfile:` + fmt.Sprintf("%v", this.CustomProfile) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateUserStatusChanged) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateUserStatusChanged{`,
		`Uid:` + fmt.Sprintf("%v", this.Uid) + `,`,
		`Status:` + strings.Replace(this.Status.String(), "UserStatus", "UserStatus", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateUserExtChanged) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateUserExtChanged{`,
		`Uid:` + fmt.Sprintf("%v", this.Uid) + `,`,
		`Ext:` + strings.Replace(fmt.Sprintf("%v", this.Ext), "RecursiveMapValue", "RecursiveMapValue", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateUserFullExtChanged) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateUserFullExtChanged{`,
		`Uid:` + fmt.Sprintf("%v", this.Uid) + `,`,
		`Ext:` + strings.Replace(fmt.Sprintf("%v", this.Ext), "RecursiveMapValue", "RecursiveMapValue", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RequestLoadFullUsers) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForUserPeers := "[]*UserOutPeer{"
	for _, f := range this.UserPeers {
		repeatedStringForUserPeers += strings.Replace(fmt.Sprintf("%v", f), "UserOutPeer", "UserOutPeer", 1) + ","
	}
	repeatedStringForUserPeers += "}"
	s := strings.Join([]string{`&RequestLoadFullUsers{`,
		`UserPeers:` + repeatedStringForUserPeers + `,`,
		`}`,
	}, "")
	return s
}
func (this *ResponseLoadFullUsers) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForFullUsers := "[]*FullUser{"
	for _, f := range this.FullUsers {
		repeatedStringForFullUsers += strings.Replace(f.String(), "FullUser", "FullUser", 1) + ","
	}
	repeatedStringForFullUsers += "}"
	s := strings.Join([]string{`&ResponseLoadFullUsers{`,
		`FullUsers:` + repeatedStringForFullUsers + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringUsers(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *ContactRecord) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUsers
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ContactRecord: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ContactRecord: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= ContactType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StringValue", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUsers
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthUsers
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.StringValue == nil {
				m.StringValue = &types.StringValue{}
			}
			if err := m.StringValue.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LongValue", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUsers
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthUsers
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LongValue == nil {
				m.LongValue = &types.Int64Value{}
			}
			if err := m.LongValue.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUsers
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthUsers
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Title == nil {
				m.Title = &types.StringValue{}
			}
			if err := m.Title.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Subtitle", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUsers
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthUsers
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Subtitle == nil {
				m.Subtitle = &types.StringValue{}
			}
			if err := m.Subtitle.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TypeSpec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUsers
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthUsers
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TypeSpec == nil {
				m.TypeSpec = &types.StringValue{}
			}
			if err := m.TypeSpec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUsers(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUsers
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthUsers
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUsers
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= UserStatusType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Text", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUsers
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthUsers
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Text == nil {
				m.Text = &types.StringValue{}
			}
			if err := m.Text.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Clock", wireType)
			}
			m.Clock = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Clock |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipUsers(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUsers
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthUsers
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUsers
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUsers
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUsers
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nick", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUsers
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthUsers
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Nick == nil {
				m.Nick = &types.StringValue{}
			}
			if err := m.Nick.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sex", wireType)
			}
			m.Sex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Sex |= Sex(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Avatar", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUsers
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthUsers
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Avatar == nil {
				m.Avatar = &Avatar{}
			}
			if err := m.Avatar.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsBot", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUsers
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthUsers
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.IsBot == nil {
				m.IsBot = &types.BoolValue{}
			}
			if err := m.IsBot.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= UserData_Lifecycle(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserStatus", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUsers
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthUsers
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UserStatus == nil {
				m.UserStatus = &UserStatus{}
			}
			if err := m.UserStatus.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimeZone", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUsers
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUsers
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TimeZone = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Exts", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUsers
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthUsers
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Exts = append(m.Exts, &UserData_Ext{})
			if err := m.Exts[len(m.Exts)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObsoleteClock", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUsers
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthUsers
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ObsoleteClock == nil {
				m.ObsoleteClock = &DataClock{}
			}
			if err := m.ObsoleteClock.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Locales", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUsers
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUsers
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Locales = append(m.Locales, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field About", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUsers
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthUsers
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.About == nil {
				m.About = &types.StringValue{}
			}
			if err := m.About.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContactInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUsers
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthUsers
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContactInfo = append(m.ContactInfo, &ContactRecord{})
			if err := m.ContactInfo[len(m.ContactInfo)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BotCommands", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUsers
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthUsers
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BotCommands = append(m.BotCommands, &BotCommand{})
			if err := m.BotCommands[len(m.BotCommands)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CustomProfile", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUsers
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthUsers
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CustomProfile == nil {
				m.CustomProfile = &types.StringValue{}
			}
			if err := m.CustomProfile.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Clock", wireType)
			}
			m.Clock = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Clock |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hint", wireType)
			}
			m.Hint = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Hint |= UserData_Hint(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipUsers(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUsers
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthUsers
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserData_Ext) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUsers
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Ext: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Ext: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUsers
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUsers
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field S", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUsers
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUsers
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.V = &UserData_Ext_S{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field B", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.V = &UserData_Ext_B{b}
		default:
			iNdEx = preIndex
			skippy, err := skipUsers(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUsers
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthUsers
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *User) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUsers
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: User: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: User: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccessHash", wireType)
			}
			m.AccessHash = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AccessHash |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUsers
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthUsers
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data == nil {
				m.Data = &UserData{}
			}
			if err := m.Data.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUsers(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUsers
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthUsers
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserPartialInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUsers
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserPartialInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserPartialInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccessHash", wireType)
			}
			m.AccessHash = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AccessHash |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Clock", wireType)
			}
			m.Clock = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Clock |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUsers
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUsers
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nick", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUsers
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthUsers
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Nick == nil {
				m.Nick = &types.StringValue{}
			}
			if err := m.Nick.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Avatar", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUsers
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthUsers
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Avatar == nil {
				m.Avatar = &Avatar{}
			}
			if err := m.Avatar.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUsers(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUsers
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthUsers
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserProfile) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUsers
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserProfile: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserProfile: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field User", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUsers
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthUsers
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.User == nil {
				m.User = &User{}
			}
			if err := m.User.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContactInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUsers
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthUsers
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContactInfo = append(m.ContactInfo, &ContactRecord{})
			if err := m.ContactInfo[len(m.ContactInfo)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field About", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUsers
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthUsers
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.About == nil {
				m.About = &types.StringValue{}
			}
			if err := m.About.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PreferredLanguages", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUsers
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUsers
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PreferredLanguages = append(m.PreferredLanguages, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimeZone", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUsers
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthUsers
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TimeZone == nil {
				m.TimeZone = &types.StringValue{}
			}
			if err := m.TimeZone.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BotCommands", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUsers
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthUsers
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BotCommands = append(m.BotCommands, &BotCommand{})
			if err := m.BotCommands[len(m.BotCommands)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CustomProfile", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUsers
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUsers
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CustomProfile = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IntegrationToken", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUsers
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthUsers
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.IntegrationToken == nil {
				m.IntegrationToken = &types.StringValue{}
			}
			if err := m.IntegrationToken.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUsers(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUsers
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthUsers
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FullUser) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUsers
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FullUser: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FullUser: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContactInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUsers
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthUsers
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContactInfo = append(m.ContactInfo, &ContactRecord{})
			if err := m.ContactInfo[len(m.ContactInfo)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field About", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUsers
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthUsers
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.About == nil {
				m.About = &types.StringValue{}
			}
			if err := m.About.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PreferredLanguages", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUsers
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUsers
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PreferredLanguages = append(m.PreferredLanguages, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimeZone", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUsers
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthUsers
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TimeZone == nil {
				m.TimeZone = &types.StringValue{}
			}
			if err := m.TimeZone.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BotCommands", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUsers
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthUsers
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BotCommands = append(m.BotCommands, &BotCommand{})
			if err := m.BotCommands[len(m.BotCommands)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsBlocked", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUsers
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthUsers
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.IsBlocked == nil {
				m.IsBlocked = &types.BoolValue{}
			}
			if err := m.IsBlocked.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CustomProfile", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUsers
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUsers
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CustomProfile = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IntegrationToken", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUsers
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthUsers
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.IntegrationToken == nil {
				m.IntegrationToken = &types.StringValue{}
			}
			if err := m.IntegrationToken.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUsers
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthUsers
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Status == nil {
				m.Status = &UserStatus{}
			}
			if err := m.Status.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUsers(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUsers
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthUsers
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BotCommand) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUsers
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BotCommand: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BotCommand: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SlashCommand", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUsers
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUsers
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SlashCommand = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUsers
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUsers
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LocKey", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUsers
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthUsers
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LocKey == nil {
				m.LocKey = &types.StringValue{}
			}
			if err := m.LocKey.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUsers(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUsers
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthUsers
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestEditUserLocalName) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUsers
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestEditUserLocalName: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestEditUserLocalName: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			m.Uid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uid |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccessHash", wireType)
			}
			m.AccessHash = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AccessHash |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUsers
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUsers
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUsers(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUsers
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthUsers
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestLoadUserData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUsers
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestLoadUserData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestLoadUserData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Claims", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUsers
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthUsers
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Claims = append(m.Claims, &RequestLoadUserData_Claim{})
			if err := m.Claims[len(m.Claims)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUsers(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUsers
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthUsers
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestLoadUserData_Claim) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUsers
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Claim: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Claim: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserPeer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUsers
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthUsers
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UserPeer == nil {
				m.UserPeer = &Peer{}
			}
			if err := m.UserPeer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field P2P", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.Kind = &RequestLoadUserData_Claim_P2P{b}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupMember", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUsers
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthUsers
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &Peer{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Kind = &RequestLoadUserData_Claim_GroupMember{v}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Contact", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.Kind = &RequestLoadUserData_Claim_Contact{b}
		default:
			iNdEx = preIndex
			skippy, err := skipUsers(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUsers
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthUsers
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResponseLoadUserData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUsers
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResponseLoadUserData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResponseLoadUserData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Users", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUsers
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthUsers
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Users = append(m.Users, &User{})
			if err := m.Users[len(m.Users)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUsers(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUsers
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthUsers
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateUser) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUsers
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateUser: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateUser: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUsers
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthUsers
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data == nil {
				m.Data = &UserData{}
			}
			if err := m.Data.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUsers(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUsers
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthUsers
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateUserAvatarChanged) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUsers
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateUserAvatarChanged: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateUserAvatarChanged: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			m.Uid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uid |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Avatar", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUsers
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthUsers
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Avatar == nil {
				m.Avatar = &Avatar{}
			}
			if err := m.Avatar.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUsers(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUsers
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthUsers
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateUserNameChanged) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUsers
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateUserNameChanged: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateUserNameChanged: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			m.Uid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uid |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUsers
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUsers
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUsers(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUsers
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthUsers
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateUserLocalNameChanged) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUsers
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateUserLocalNameChanged: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateUserLocalNameChanged: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			m.Uid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uid |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LocalName", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUsers
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthUsers
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LocalName == nil {
				m.LocalName = &types.StringValue{}
			}
			if err := m.LocalName.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUsers(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUsers
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthUsers
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateUserContactsChanged) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUsers
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateUserContactsChanged: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateUserContactsChanged: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			m.Uid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uid |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContactRecords", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUsers
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthUsers
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContactRecords = append(m.ContactRecords, &ContactRecord{})
			if err := m.ContactRecords[len(m.ContactRecords)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUsers(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUsers
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthUsers
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateUserNickChanged) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUsers
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateUserNickChanged: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateUserNickChanged: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			m.Uid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uid |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nickname", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUsers
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthUsers
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Nickname == nil {
				m.Nickname = &types.StringValue{}
			}
			if err := m.Nickname.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUsers(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUsers
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthUsers
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateUserAboutChanged) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUsers
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateUserAboutChanged: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateUserAboutChanged: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			m.Uid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uid |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field About", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUsers
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthUsers
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.About == nil {
				m.About = &types.StringValue{}
			}
			if err := m.About.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUsers(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUsers
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthUsers
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateUserPreferredLanguagesChanged) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUsers
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateUserPreferredLanguagesChanged: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateUserPreferredLanguagesChanged: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			m.Uid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uid |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PreferredLanguages", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUsers
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUsers
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PreferredLanguages = append(m.PreferredLanguages, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUsers(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUsers
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthUsers
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateUserTimeZoneChanged) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUsers
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateUserTimeZoneChanged: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateUserTimeZoneChanged: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			m.Uid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uid |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimeZone", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUsers
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthUsers
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TimeZone == nil {
				m.TimeZone = &types.StringValue{}
			}
			if err := m.TimeZone.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUsers(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUsers
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthUsers
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateUserBotCommandsChanged) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUsers
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateUserBotCommandsChanged: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateUserBotCommandsChanged: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			m.Uid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uid |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Commands", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUsers
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthUsers
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Commands = append(m.Commands, &BotCommand{})
			if err := m.Commands[len(m.Commands)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUsers(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUsers
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthUsers
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateUserSexChanged) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUsers
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateUserSexChanged: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateUserSexChanged: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			m.Uid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uid |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sex", wireType)
			}
			m.Sex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Sex |= Sex(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipUsers(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUsers
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthUsers
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateUserCustomProfileChanged) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUsers
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateUserCustomProfileChanged: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateUserCustomProfileChanged: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			m.Uid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uid |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CustomProfile", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUsers
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUsers
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CustomProfile = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUsers(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUsers
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthUsers
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateUserStatusChanged) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUsers
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateUserStatusChanged: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateUserStatusChanged: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			m.Uid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uid |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUsers
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthUsers
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Status == nil {
				m.Status = &UserStatus{}
			}
			if err := m.Status.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUsers(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUsers
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthUsers
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateUserExtChanged) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUsers
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateUserExtChanged: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateUserExtChanged: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			m.Uid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uid |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ext", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUsers
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthUsers
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Ext == nil {
				m.Ext = &RecursiveMapValue{}
			}
			if err := m.Ext.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUsers(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUsers
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthUsers
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateUserFullExtChanged) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUsers
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateUserFullExtChanged: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateUserFullExtChanged: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			m.Uid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uid |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ext", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUsers
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthUsers
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Ext == nil {
				m.Ext = &RecursiveMapValue{}
			}
			if err := m.Ext.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUsers(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUsers
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthUsers
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestLoadFullUsers) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUsers
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestLoadFullUsers: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestLoadFullUsers: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserPeers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUsers
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthUsers
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserPeers = append(m.UserPeers, &UserOutPeer{})
			if err := m.UserPeers[len(m.UserPeers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUsers(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUsers
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthUsers
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResponseLoadFullUsers) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUsers
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResponseLoadFullUsers: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResponseLoadFullUsers: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FullUsers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUsers
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthUsers
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FullUsers = append(m.FullUsers, &FullUser{})
			if err := m.FullUsers[len(m.FullUsers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUsers(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUsers
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthUsers
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipUsers(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowUsers
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowUsers
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthUsers
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupUsers
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthUsers
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthUsers        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowUsers          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupUsers = fmt.Errorf("proto: unexpected end of group")
)
