// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: spaces.proto

package dialog

import (
	context "context"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	types "github.com/gogo/protobuf/types"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Space struct {
	Id        *UUIDValue       `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	CreatedAt *types.Timestamp `protobuf:"bytes,2,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	// Types that are valid to be assigned to SpaceType:
	//	*Space_General_
	//	*Space_Public_
	//	*Space_Private_
	SpaceType isSpace_SpaceType  `protobuf_oneof:"space_type"`
	Title     string             `protobuf:"bytes,6,opt,name=title,proto3" json:"title,omitempty"`
	About     *types.StringValue `protobuf:"bytes,7,opt,name=about,proto3" json:"about,omitempty"`
	Avatar    *Avatar            `protobuf:"bytes,8,opt,name=avatar,proto3" json:"avatar,omitempty"`
	DeletedAt *types.Timestamp   `protobuf:"bytes,9,opt,name=deleted_at,json=deletedAt,proto3" json:"deleted_at,omitempty"`
	Clock     *DataClock         `protobuf:"bytes,10,opt,name=clock,proto3" json:"clock,omitempty"`
}

func (m *Space) Reset()      { *m = Space{} }
func (*Space) ProtoMessage() {}
func (*Space) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6da961f807523b7, []int{0}
}
func (m *Space) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Space) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Space.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Space) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Space.Merge(m, src)
}
func (m *Space) XXX_Size() int {
	return m.Size()
}
func (m *Space) XXX_DiscardUnknown() {
	xxx_messageInfo_Space.DiscardUnknown(m)
}

var xxx_messageInfo_Space proto.InternalMessageInfo

type isSpace_SpaceType interface {
	isSpace_SpaceType()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type Space_General_ struct {
	General *Space_General `protobuf:"bytes,3,opt,name=general,proto3,oneof" json:"general,omitempty"`
}
type Space_Public_ struct {
	Public *Space_Public `protobuf:"bytes,4,opt,name=public,proto3,oneof" json:"public,omitempty"`
}
type Space_Private_ struct {
	Private *Space_Private `protobuf:"bytes,5,opt,name=private,proto3,oneof" json:"private,omitempty"`
}

func (*Space_General_) isSpace_SpaceType() {}
func (*Space_Public_) isSpace_SpaceType()  {}
func (*Space_Private_) isSpace_SpaceType() {}

func (m *Space) GetSpaceType() isSpace_SpaceType {
	if m != nil {
		return m.SpaceType
	}
	return nil
}

func (m *Space) GetId() *UUIDValue {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *Space) GetCreatedAt() *types.Timestamp {
	if m != nil {
		return m.CreatedAt
	}
	return nil
}

func (m *Space) GetGeneral() *Space_General {
	if x, ok := m.GetSpaceType().(*Space_General_); ok {
		return x.General
	}
	return nil
}

func (m *Space) GetPublic() *Space_Public {
	if x, ok := m.GetSpaceType().(*Space_Public_); ok {
		return x.Public
	}
	return nil
}

func (m *Space) GetPrivate() *Space_Private {
	if x, ok := m.GetSpaceType().(*Space_Private_); ok {
		return x.Private
	}
	return nil
}

func (m *Space) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *Space) GetAbout() *types.StringValue {
	if m != nil {
		return m.About
	}
	return nil
}

func (m *Space) GetAvatar() *Avatar {
	if m != nil {
		return m.Avatar
	}
	return nil
}

func (m *Space) GetDeletedAt() *types.Timestamp {
	if m != nil {
		return m.DeletedAt
	}
	return nil
}

func (m *Space) GetClock() *DataClock {
	if m != nil {
		return m.Clock
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*Space) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*Space_General_)(nil),
		(*Space_Public_)(nil),
		(*Space_Private_)(nil),
	}
}

type Space_General struct {
}

func (m *Space_General) Reset()      { *m = Space_General{} }
func (*Space_General) ProtoMessage() {}
func (*Space_General) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6da961f807523b7, []int{0, 0}
}
func (m *Space_General) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Space_General) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Space_General.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Space_General) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Space_General.Merge(m, src)
}
func (m *Space_General) XXX_Size() int {
	return m.Size()
}
func (m *Space_General) XXX_DiscardUnknown() {
	xxx_messageInfo_Space_General.DiscardUnknown(m)
}

var xxx_messageInfo_Space_General proto.InternalMessageInfo

type Space_Public struct {
	OwnerUserId int32  `protobuf:"varint,1,opt,name=owner_user_id,json=ownerUserId,proto3" json:"owner_user_id,omitempty"`
	Shortname   string `protobuf:"bytes,2,opt,name=shortname,proto3" json:"shortname,omitempty"`
}

func (m *Space_Public) Reset()      { *m = Space_Public{} }
func (*Space_Public) ProtoMessage() {}
func (*Space_Public) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6da961f807523b7, []int{0, 1}
}
func (m *Space_Public) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Space_Public) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Space_Public.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Space_Public) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Space_Public.Merge(m, src)
}
func (m *Space_Public) XXX_Size() int {
	return m.Size()
}
func (m *Space_Public) XXX_DiscardUnknown() {
	xxx_messageInfo_Space_Public.DiscardUnknown(m)
}

var xxx_messageInfo_Space_Public proto.InternalMessageInfo

func (m *Space_Public) GetOwnerUserId() int32 {
	if m != nil {
		return m.OwnerUserId
	}
	return 0
}

func (m *Space_Public) GetShortname() string {
	if m != nil {
		return m.Shortname
	}
	return ""
}

type Space_Private struct {
	OwnerUserId int32 `protobuf:"varint,1,opt,name=owner_user_id,json=ownerUserId,proto3" json:"owner_user_id,omitempty"`
}

func (m *Space_Private) Reset()      { *m = Space_Private{} }
func (*Space_Private) ProtoMessage() {}
func (*Space_Private) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6da961f807523b7, []int{0, 2}
}
func (m *Space_Private) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Space_Private) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Space_Private.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Space_Private) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Space_Private.Merge(m, src)
}
func (m *Space_Private) XXX_Size() int {
	return m.Size()
}
func (m *Space_Private) XXX_DiscardUnknown() {
	xxx_messageInfo_Space_Private.DiscardUnknown(m)
}

var xxx_messageInfo_Space_Private proto.InternalMessageInfo

func (m *Space_Private) GetOwnerUserId() int32 {
	if m != nil {
		return m.OwnerUserId
	}
	return 0
}

type SpaceMember struct {
	SpaceId   *UUIDValue       `protobuf:"bytes,1,opt,name=space_id,json=spaceId,proto3" json:"space_id,omitempty"`
	UserId    int32            `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	InvitedAt *types.Timestamp `protobuf:"bytes,3,opt,name=invited_at,json=invitedAt,proto3" json:"invited_at,omitempty"`
	JoinedAt  *types.Timestamp `protobuf:"bytes,4,opt,name=joined_at,json=joinedAt,proto3" json:"joined_at,omitempty"`
	DeletedAt *types.Timestamp `protobuf:"bytes,5,opt,name=deleted_at,json=deletedAt,proto3" json:"deleted_at,omitempty"`
	Clock     *DataClock       `protobuf:"bytes,6,opt,name=clock,proto3" json:"clock,omitempty"`
}

func (m *SpaceMember) Reset()      { *m = SpaceMember{} }
func (*SpaceMember) ProtoMessage() {}
func (*SpaceMember) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6da961f807523b7, []int{1}
}
func (m *SpaceMember) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SpaceMember) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SpaceMember.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SpaceMember) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SpaceMember.Merge(m, src)
}
func (m *SpaceMember) XXX_Size() int {
	return m.Size()
}
func (m *SpaceMember) XXX_DiscardUnknown() {
	xxx_messageInfo_SpaceMember.DiscardUnknown(m)
}

var xxx_messageInfo_SpaceMember proto.InternalMessageInfo

func (m *SpaceMember) GetSpaceId() *UUIDValue {
	if m != nil {
		return m.SpaceId
	}
	return nil
}

func (m *SpaceMember) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *SpaceMember) GetInvitedAt() *types.Timestamp {
	if m != nil {
		return m.InvitedAt
	}
	return nil
}

func (m *SpaceMember) GetJoinedAt() *types.Timestamp {
	if m != nil {
		return m.JoinedAt
	}
	return nil
}

func (m *SpaceMember) GetDeletedAt() *types.Timestamp {
	if m != nil {
		return m.DeletedAt
	}
	return nil
}

func (m *SpaceMember) GetClock() *DataClock {
	if m != nil {
		return m.Clock
	}
	return nil
}

type UpdateSpaceModified struct {
	Space *Space `protobuf:"bytes,1,opt,name=space,proto3" json:"space,omitempty"`
}

func (m *UpdateSpaceModified) Reset()      { *m = UpdateSpaceModified{} }
func (*UpdateSpaceModified) ProtoMessage() {}
func (*UpdateSpaceModified) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6da961f807523b7, []int{2}
}
func (m *UpdateSpaceModified) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateSpaceModified) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateSpaceModified.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateSpaceModified) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateSpaceModified.Merge(m, src)
}
func (m *UpdateSpaceModified) XXX_Size() int {
	return m.Size()
}
func (m *UpdateSpaceModified) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateSpaceModified.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateSpaceModified proto.InternalMessageInfo

func (m *UpdateSpaceModified) GetSpace() *Space {
	if m != nil {
		return m.Space
	}
	return nil
}

type UpdateSpaceMemberModified struct {
	Member *SpaceMember `protobuf:"bytes,1,opt,name=member,proto3" json:"member,omitempty"`
}

func (m *UpdateSpaceMemberModified) Reset()      { *m = UpdateSpaceMemberModified{} }
func (*UpdateSpaceMemberModified) ProtoMessage() {}
func (*UpdateSpaceMemberModified) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6da961f807523b7, []int{3}
}
func (m *UpdateSpaceMemberModified) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateSpaceMemberModified) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateSpaceMemberModified.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateSpaceMemberModified) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateSpaceMemberModified.Merge(m, src)
}
func (m *UpdateSpaceMemberModified) XXX_Size() int {
	return m.Size()
}
func (m *UpdateSpaceMemberModified) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateSpaceMemberModified.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateSpaceMemberModified proto.InternalMessageInfo

func (m *UpdateSpaceMemberModified) GetMember() *SpaceMember {
	if m != nil {
		return m.Member
	}
	return nil
}

type RequestCreateSpace struct {
	RequestId int64              `protobuf:"varint,1,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	Title     string             `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	Shortname *types.StringValue `protobuf:"bytes,3,opt,name=shortname,proto3" json:"shortname,omitempty"`
	About     *types.StringValue `protobuf:"bytes,4,opt,name=about,proto3" json:"about,omitempty"`
	Avatar    *Avatar            `protobuf:"bytes,5,opt,name=avatar,proto3" json:"avatar,omitempty"`
}

func (m *RequestCreateSpace) Reset()      { *m = RequestCreateSpace{} }
func (*RequestCreateSpace) ProtoMessage() {}
func (*RequestCreateSpace) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6da961f807523b7, []int{4}
}
func (m *RequestCreateSpace) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RequestCreateSpace) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RequestCreateSpace.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RequestCreateSpace) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RequestCreateSpace.Merge(m, src)
}
func (m *RequestCreateSpace) XXX_Size() int {
	return m.Size()
}
func (m *RequestCreateSpace) XXX_DiscardUnknown() {
	xxx_messageInfo_RequestCreateSpace.DiscardUnknown(m)
}

var xxx_messageInfo_RequestCreateSpace proto.InternalMessageInfo

func (m *RequestCreateSpace) GetRequestId() int64 {
	if m != nil {
		return m.RequestId
	}
	return 0
}

func (m *RequestCreateSpace) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *RequestCreateSpace) GetShortname() *types.StringValue {
	if m != nil {
		return m.Shortname
	}
	return nil
}

func (m *RequestCreateSpace) GetAbout() *types.StringValue {
	if m != nil {
		return m.About
	}
	return nil
}

func (m *RequestCreateSpace) GetAvatar() *Avatar {
	if m != nil {
		return m.Avatar
	}
	return nil
}

type ResponseSpace struct {
	Space *Space `protobuf:"bytes,1,opt,name=space,proto3" json:"space,omitempty"`
}

func (m *ResponseSpace) Reset()      { *m = ResponseSpace{} }
func (*ResponseSpace) ProtoMessage() {}
func (*ResponseSpace) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6da961f807523b7, []int{5}
}
func (m *ResponseSpace) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ResponseSpace) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ResponseSpace.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ResponseSpace) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResponseSpace.Merge(m, src)
}
func (m *ResponseSpace) XXX_Size() int {
	return m.Size()
}
func (m *ResponseSpace) XXX_DiscardUnknown() {
	xxx_messageInfo_ResponseSpace.DiscardUnknown(m)
}

var xxx_messageInfo_ResponseSpace proto.InternalMessageInfo

func (m *ResponseSpace) GetSpace() *Space {
	if m != nil {
		return m.Space
	}
	return nil
}

type ResponseSpaceMember struct {
	SpaceId *UUIDValue   `protobuf:"bytes,1,opt,name=space_id,json=spaceId,proto3" json:"space_id,omitempty"`
	Member  *SpaceMember `protobuf:"bytes,2,opt,name=member,proto3" json:"member,omitempty"`
}

func (m *ResponseSpaceMember) Reset()      { *m = ResponseSpaceMember{} }
func (*ResponseSpaceMember) ProtoMessage() {}
func (*ResponseSpaceMember) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6da961f807523b7, []int{6}
}
func (m *ResponseSpaceMember) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ResponseSpaceMember) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ResponseSpaceMember.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ResponseSpaceMember) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResponseSpaceMember.Merge(m, src)
}
func (m *ResponseSpaceMember) XXX_Size() int {
	return m.Size()
}
func (m *ResponseSpaceMember) XXX_DiscardUnknown() {
	xxx_messageInfo_ResponseSpaceMember.DiscardUnknown(m)
}

var xxx_messageInfo_ResponseSpaceMember proto.InternalMessageInfo

func (m *ResponseSpaceMember) GetSpaceId() *UUIDValue {
	if m != nil {
		return m.SpaceId
	}
	return nil
}

func (m *ResponseSpaceMember) GetMember() *SpaceMember {
	if m != nil {
		return m.Member
	}
	return nil
}

type RequestDeleteSpace struct {
	Id    *UUIDValue `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Clock *DataClock `protobuf:"bytes,2,opt,name=clock,proto3" json:"clock,omitempty"`
}

func (m *RequestDeleteSpace) Reset()      { *m = RequestDeleteSpace{} }
func (*RequestDeleteSpace) ProtoMessage() {}
func (*RequestDeleteSpace) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6da961f807523b7, []int{7}
}
func (m *RequestDeleteSpace) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RequestDeleteSpace) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RequestDeleteSpace.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RequestDeleteSpace) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RequestDeleteSpace.Merge(m, src)
}
func (m *RequestDeleteSpace) XXX_Size() int {
	return m.Size()
}
func (m *RequestDeleteSpace) XXX_DiscardUnknown() {
	xxx_messageInfo_RequestDeleteSpace.DiscardUnknown(m)
}

var xxx_messageInfo_RequestDeleteSpace proto.InternalMessageInfo

func (m *RequestDeleteSpace) GetId() *UUIDValue {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *RequestDeleteSpace) GetClock() *DataClock {
	if m != nil {
		return m.Clock
	}
	return nil
}

type RequestLoadSpaces struct {
}

func (m *RequestLoadSpaces) Reset()      { *m = RequestLoadSpaces{} }
func (*RequestLoadSpaces) ProtoMessage() {}
func (*RequestLoadSpaces) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6da961f807523b7, []int{8}
}
func (m *RequestLoadSpaces) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RequestLoadSpaces) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RequestLoadSpaces.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RequestLoadSpaces) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RequestLoadSpaces.Merge(m, src)
}
func (m *RequestLoadSpaces) XXX_Size() int {
	return m.Size()
}
func (m *RequestLoadSpaces) XXX_DiscardUnknown() {
	xxx_messageInfo_RequestLoadSpaces.DiscardUnknown(m)
}

var xxx_messageInfo_RequestLoadSpaces proto.InternalMessageInfo

type ResponseLoadSpaces struct {
	Space      []*Space       `protobuf:"bytes,1,rep,name=space,proto3" json:"space,omitempty"`
	OwnerPeers []*UserOutPeer `protobuf:"bytes,2,rep,name=owner_peers,json=ownerPeers,proto3" json:"owner_peers,omitempty"`
}

func (m *ResponseLoadSpaces) Reset()      { *m = ResponseLoadSpaces{} }
func (*ResponseLoadSpaces) ProtoMessage() {}
func (*ResponseLoadSpaces) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6da961f807523b7, []int{9}
}
func (m *ResponseLoadSpaces) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ResponseLoadSpaces) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ResponseLoadSpaces.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ResponseLoadSpaces) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResponseLoadSpaces.Merge(m, src)
}
func (m *ResponseLoadSpaces) XXX_Size() int {
	return m.Size()
}
func (m *ResponseLoadSpaces) XXX_DiscardUnknown() {
	xxx_messageInfo_ResponseLoadSpaces.DiscardUnknown(m)
}

var xxx_messageInfo_ResponseLoadSpaces proto.InternalMessageInfo

func (m *ResponseLoadSpaces) GetSpace() []*Space {
	if m != nil {
		return m.Space
	}
	return nil
}

func (m *ResponseLoadSpaces) GetOwnerPeers() []*UserOutPeer {
	if m != nil {
		return m.OwnerPeers
	}
	return nil
}

type RequestStreamSpaceMembers struct {
	SpaceId *UUIDValue `protobuf:"bytes,1,opt,name=space_id,json=spaceId,proto3" json:"space_id,omitempty"`
	Clock   *DataClock `protobuf:"bytes,2,opt,name=clock,proto3" json:"clock,omitempty"`
}

func (m *RequestStreamSpaceMembers) Reset()      { *m = RequestStreamSpaceMembers{} }
func (*RequestStreamSpaceMembers) ProtoMessage() {}
func (*RequestStreamSpaceMembers) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6da961f807523b7, []int{10}
}
func (m *RequestStreamSpaceMembers) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RequestStreamSpaceMembers) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RequestStreamSpaceMembers.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RequestStreamSpaceMembers) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RequestStreamSpaceMembers.Merge(m, src)
}
func (m *RequestStreamSpaceMembers) XXX_Size() int {
	return m.Size()
}
func (m *RequestStreamSpaceMembers) XXX_DiscardUnknown() {
	xxx_messageInfo_RequestStreamSpaceMembers.DiscardUnknown(m)
}

var xxx_messageInfo_RequestStreamSpaceMembers proto.InternalMessageInfo

func (m *RequestStreamSpaceMembers) GetSpaceId() *UUIDValue {
	if m != nil {
		return m.SpaceId
	}
	return nil
}

func (m *RequestStreamSpaceMembers) GetClock() *DataClock {
	if m != nil {
		return m.Clock
	}
	return nil
}

type SpaceMemberWithPeer struct {
	Member *SpaceMember `protobuf:"bytes,1,opt,name=member,proto3" json:"member,omitempty"`
	Peer   *UserOutPeer `protobuf:"bytes,2,opt,name=peer,proto3" json:"peer,omitempty"`
}

func (m *SpaceMemberWithPeer) Reset()      { *m = SpaceMemberWithPeer{} }
func (*SpaceMemberWithPeer) ProtoMessage() {}
func (*SpaceMemberWithPeer) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6da961f807523b7, []int{11}
}
func (m *SpaceMemberWithPeer) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SpaceMemberWithPeer) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SpaceMemberWithPeer.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SpaceMemberWithPeer) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SpaceMemberWithPeer.Merge(m, src)
}
func (m *SpaceMemberWithPeer) XXX_Size() int {
	return m.Size()
}
func (m *SpaceMemberWithPeer) XXX_DiscardUnknown() {
	xxx_messageInfo_SpaceMemberWithPeer.DiscardUnknown(m)
}

var xxx_messageInfo_SpaceMemberWithPeer proto.InternalMessageInfo

func (m *SpaceMemberWithPeer) GetMember() *SpaceMember {
	if m != nil {
		return m.Member
	}
	return nil
}

func (m *SpaceMemberWithPeer) GetPeer() *UserOutPeer {
	if m != nil {
		return m.Peer
	}
	return nil
}

type RequestSetTitle struct {
	Id    *UUIDValue `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Title string     `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	Clock *DataClock `protobuf:"bytes,3,opt,name=clock,proto3" json:"clock,omitempty"`
}

func (m *RequestSetTitle) Reset()      { *m = RequestSetTitle{} }
func (*RequestSetTitle) ProtoMessage() {}
func (*RequestSetTitle) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6da961f807523b7, []int{12}
}
func (m *RequestSetTitle) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RequestSetTitle) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RequestSetTitle.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RequestSetTitle) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RequestSetTitle.Merge(m, src)
}
func (m *RequestSetTitle) XXX_Size() int {
	return m.Size()
}
func (m *RequestSetTitle) XXX_DiscardUnknown() {
	xxx_messageInfo_RequestSetTitle.DiscardUnknown(m)
}

var xxx_messageInfo_RequestSetTitle proto.InternalMessageInfo

func (m *RequestSetTitle) GetId() *UUIDValue {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *RequestSetTitle) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *RequestSetTitle) GetClock() *DataClock {
	if m != nil {
		return m.Clock
	}
	return nil
}

type RequestSetShortname struct {
	Id        *UUIDValue         `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Shortname *types.StringValue `protobuf:"bytes,2,opt,name=shortname,proto3" json:"shortname,omitempty"`
	Clock     *DataClock         `protobuf:"bytes,3,opt,name=clock,proto3" json:"clock,omitempty"`
}

func (m *RequestSetShortname) Reset()      { *m = RequestSetShortname{} }
func (*RequestSetShortname) ProtoMessage() {}
func (*RequestSetShortname) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6da961f807523b7, []int{13}
}
func (m *RequestSetShortname) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RequestSetShortname) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RequestSetShortname.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RequestSetShortname) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RequestSetShortname.Merge(m, src)
}
func (m *RequestSetShortname) XXX_Size() int {
	return m.Size()
}
func (m *RequestSetShortname) XXX_DiscardUnknown() {
	xxx_messageInfo_RequestSetShortname.DiscardUnknown(m)
}

var xxx_messageInfo_RequestSetShortname proto.InternalMessageInfo

func (m *RequestSetShortname) GetId() *UUIDValue {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *RequestSetShortname) GetShortname() *types.StringValue {
	if m != nil {
		return m.Shortname
	}
	return nil
}

func (m *RequestSetShortname) GetClock() *DataClock {
	if m != nil {
		return m.Clock
	}
	return nil
}

type RequestSetAbout struct {
	Id    *UUIDValue         `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	About *types.StringValue `protobuf:"bytes,2,opt,name=about,proto3" json:"about,omitempty"`
	Clock *DataClock         `protobuf:"bytes,3,opt,name=clock,proto3" json:"clock,omitempty"`
}

func (m *RequestSetAbout) Reset()      { *m = RequestSetAbout{} }
func (*RequestSetAbout) ProtoMessage() {}
func (*RequestSetAbout) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6da961f807523b7, []int{14}
}
func (m *RequestSetAbout) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RequestSetAbout) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RequestSetAbout.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RequestSetAbout) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RequestSetAbout.Merge(m, src)
}
func (m *RequestSetAbout) XXX_Size() int {
	return m.Size()
}
func (m *RequestSetAbout) XXX_DiscardUnknown() {
	xxx_messageInfo_RequestSetAbout.DiscardUnknown(m)
}

var xxx_messageInfo_RequestSetAbout proto.InternalMessageInfo

func (m *RequestSetAbout) GetId() *UUIDValue {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *RequestSetAbout) GetAbout() *types.StringValue {
	if m != nil {
		return m.About
	}
	return nil
}

func (m *RequestSetAbout) GetClock() *DataClock {
	if m != nil {
		return m.Clock
	}
	return nil
}

type RequestSetAvatar struct {
	Id           *UUIDValue    `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	FileLocation *FileLocation `protobuf:"bytes,2,opt,name=file_location,json=fileLocation,proto3" json:"file_location,omitempty"`
	Clock        *DataClock    `protobuf:"bytes,3,opt,name=clock,proto3" json:"clock,omitempty"`
}

func (m *RequestSetAvatar) Reset()      { *m = RequestSetAvatar{} }
func (*RequestSetAvatar) ProtoMessage() {}
func (*RequestSetAvatar) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6da961f807523b7, []int{15}
}
func (m *RequestSetAvatar) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RequestSetAvatar) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RequestSetAvatar.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RequestSetAvatar) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RequestSetAvatar.Merge(m, src)
}
func (m *RequestSetAvatar) XXX_Size() int {
	return m.Size()
}
func (m *RequestSetAvatar) XXX_DiscardUnknown() {
	xxx_messageInfo_RequestSetAvatar.DiscardUnknown(m)
}

var xxx_messageInfo_RequestSetAvatar proto.InternalMessageInfo

func (m *RequestSetAvatar) GetId() *UUIDValue {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *RequestSetAvatar) GetFileLocation() *FileLocation {
	if m != nil {
		return m.FileLocation
	}
	return nil
}

func (m *RequestSetAvatar) GetClock() *DataClock {
	if m != nil {
		return m.Clock
	}
	return nil
}

type RequestSpaceInvite struct {
	Id     *UUIDValue `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	UserId int32      `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Clock  *DataClock `protobuf:"bytes,3,opt,name=clock,proto3" json:"clock,omitempty"`
}

func (m *RequestSpaceInvite) Reset()      { *m = RequestSpaceInvite{} }
func (*RequestSpaceInvite) ProtoMessage() {}
func (*RequestSpaceInvite) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6da961f807523b7, []int{16}
}
func (m *RequestSpaceInvite) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RequestSpaceInvite) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RequestSpaceInvite.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RequestSpaceInvite) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RequestSpaceInvite.Merge(m, src)
}
func (m *RequestSpaceInvite) XXX_Size() int {
	return m.Size()
}
func (m *RequestSpaceInvite) XXX_DiscardUnknown() {
	xxx_messageInfo_RequestSpaceInvite.DiscardUnknown(m)
}

var xxx_messageInfo_RequestSpaceInvite proto.InternalMessageInfo

func (m *RequestSpaceInvite) GetId() *UUIDValue {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *RequestSpaceInvite) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *RequestSpaceInvite) GetClock() *DataClock {
	if m != nil {
		return m.Clock
	}
	return nil
}

type RequestSpaceKick struct {
	Id     *UUIDValue `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	UserId int32      `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Clock  *DataClock `protobuf:"bytes,3,opt,name=clock,proto3" json:"clock,omitempty"`
}

func (m *RequestSpaceKick) Reset()      { *m = RequestSpaceKick{} }
func (*RequestSpaceKick) ProtoMessage() {}
func (*RequestSpaceKick) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6da961f807523b7, []int{17}
}
func (m *RequestSpaceKick) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RequestSpaceKick) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RequestSpaceKick.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RequestSpaceKick) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RequestSpaceKick.Merge(m, src)
}
func (m *RequestSpaceKick) XXX_Size() int {
	return m.Size()
}
func (m *RequestSpaceKick) XXX_DiscardUnknown() {
	xxx_messageInfo_RequestSpaceKick.DiscardUnknown(m)
}

var xxx_messageInfo_RequestSpaceKick proto.InternalMessageInfo

func (m *RequestSpaceKick) GetId() *UUIDValue {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *RequestSpaceKick) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *RequestSpaceKick) GetClock() *DataClock {
	if m != nil {
		return m.Clock
	}
	return nil
}

type RequestSpaceLeave struct {
	Id     *UUIDValue `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	UserId int32      `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Clock  *DataClock `protobuf:"bytes,3,opt,name=clock,proto3" json:"clock,omitempty"`
}

func (m *RequestSpaceLeave) Reset()      { *m = RequestSpaceLeave{} }
func (*RequestSpaceLeave) ProtoMessage() {}
func (*RequestSpaceLeave) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6da961f807523b7, []int{18}
}
func (m *RequestSpaceLeave) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RequestSpaceLeave) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RequestSpaceLeave.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RequestSpaceLeave) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RequestSpaceLeave.Merge(m, src)
}
func (m *RequestSpaceLeave) XXX_Size() int {
	return m.Size()
}
func (m *RequestSpaceLeave) XXX_DiscardUnknown() {
	xxx_messageInfo_RequestSpaceLeave.DiscardUnknown(m)
}

var xxx_messageInfo_RequestSpaceLeave proto.InternalMessageInfo

func (m *RequestSpaceLeave) GetId() *UUIDValue {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *RequestSpaceLeave) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *RequestSpaceLeave) GetClock() *DataClock {
	if m != nil {
		return m.Clock
	}
	return nil
}

type RequestGetSpaceInviteUrl struct {
	Id *UUIDValue `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *RequestGetSpaceInviteUrl) Reset()      { *m = RequestGetSpaceInviteUrl{} }
func (*RequestGetSpaceInviteUrl) ProtoMessage() {}
func (*RequestGetSpaceInviteUrl) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6da961f807523b7, []int{19}
}
func (m *RequestGetSpaceInviteUrl) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RequestGetSpaceInviteUrl) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RequestGetSpaceInviteUrl.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RequestGetSpaceInviteUrl) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RequestGetSpaceInviteUrl.Merge(m, src)
}
func (m *RequestGetSpaceInviteUrl) XXX_Size() int {
	return m.Size()
}
func (m *RequestGetSpaceInviteUrl) XXX_DiscardUnknown() {
	xxx_messageInfo_RequestGetSpaceInviteUrl.DiscardUnknown(m)
}

var xxx_messageInfo_RequestGetSpaceInviteUrl proto.InternalMessageInfo

func (m *RequestGetSpaceInviteUrl) GetId() *UUIDValue {
	if m != nil {
		return m.Id
	}
	return nil
}

type ResponseSpaceInviteUrl struct {
	InviteUrl string `protobuf:"bytes,1,opt,name=invite_url,json=inviteUrl,proto3" json:"invite_url,omitempty"`
}

func (m *ResponseSpaceInviteUrl) Reset()      { *m = ResponseSpaceInviteUrl{} }
func (*ResponseSpaceInviteUrl) ProtoMessage() {}
func (*ResponseSpaceInviteUrl) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6da961f807523b7, []int{20}
}
func (m *ResponseSpaceInviteUrl) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ResponseSpaceInviteUrl) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ResponseSpaceInviteUrl.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ResponseSpaceInviteUrl) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResponseSpaceInviteUrl.Merge(m, src)
}
func (m *ResponseSpaceInviteUrl) XXX_Size() int {
	return m.Size()
}
func (m *ResponseSpaceInviteUrl) XXX_DiscardUnknown() {
	xxx_messageInfo_ResponseSpaceInviteUrl.DiscardUnknown(m)
}

var xxx_messageInfo_ResponseSpaceInviteUrl proto.InternalMessageInfo

func (m *ResponseSpaceInviteUrl) GetInviteUrl() string {
	if m != nil {
		return m.InviteUrl
	}
	return ""
}

type RequestRevokeSpaceInviteUrl struct {
	Id *UUIDValue `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *RequestRevokeSpaceInviteUrl) Reset()      { *m = RequestRevokeSpaceInviteUrl{} }
func (*RequestRevokeSpaceInviteUrl) ProtoMessage() {}
func (*RequestRevokeSpaceInviteUrl) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6da961f807523b7, []int{21}
}
func (m *RequestRevokeSpaceInviteUrl) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RequestRevokeSpaceInviteUrl) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RequestRevokeSpaceInviteUrl.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RequestRevokeSpaceInviteUrl) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RequestRevokeSpaceInviteUrl.Merge(m, src)
}
func (m *RequestRevokeSpaceInviteUrl) XXX_Size() int {
	return m.Size()
}
func (m *RequestRevokeSpaceInviteUrl) XXX_DiscardUnknown() {
	xxx_messageInfo_RequestRevokeSpaceInviteUrl.DiscardUnknown(m)
}

var xxx_messageInfo_RequestRevokeSpaceInviteUrl proto.InternalMessageInfo

func (m *RequestRevokeSpaceInviteUrl) GetId() *UUIDValue {
	if m != nil {
		return m.Id
	}
	return nil
}

func init() {
	proto.RegisterType((*Space)(nil), "dialog.Space")
	proto.RegisterType((*Space_General)(nil), "dialog.Space.General")
	proto.RegisterType((*Space_Public)(nil), "dialog.Space.Public")
	proto.RegisterType((*Space_Private)(nil), "dialog.Space.Private")
	proto.RegisterType((*SpaceMember)(nil), "dialog.SpaceMember")
	proto.RegisterType((*UpdateSpaceModified)(nil), "dialog.UpdateSpaceModified")
	proto.RegisterType((*UpdateSpaceMemberModified)(nil), "dialog.UpdateSpaceMemberModified")
	proto.RegisterType((*RequestCreateSpace)(nil), "dialog.RequestCreateSpace")
	proto.RegisterType((*ResponseSpace)(nil), "dialog.ResponseSpace")
	proto.RegisterType((*ResponseSpaceMember)(nil), "dialog.ResponseSpaceMember")
	proto.RegisterType((*RequestDeleteSpace)(nil), "dialog.RequestDeleteSpace")
	proto.RegisterType((*RequestLoadSpaces)(nil), "dialog.RequestLoadSpaces")
	proto.RegisterType((*ResponseLoadSpaces)(nil), "dialog.ResponseLoadSpaces")
	proto.RegisterType((*RequestStreamSpaceMembers)(nil), "dialog.RequestStreamSpaceMembers")
	proto.RegisterType((*SpaceMemberWithPeer)(nil), "dialog.SpaceMemberWithPeer")
	proto.RegisterType((*RequestSetTitle)(nil), "dialog.RequestSetTitle")
	proto.RegisterType((*RequestSetShortname)(nil), "dialog.RequestSetShortname")
	proto.RegisterType((*RequestSetAbout)(nil), "dialog.RequestSetAbout")
	proto.RegisterType((*RequestSetAvatar)(nil), "dialog.RequestSetAvatar")
	proto.RegisterType((*RequestSpaceInvite)(nil), "dialog.RequestSpaceInvite")
	proto.RegisterType((*RequestSpaceKick)(nil), "dialog.RequestSpaceKick")
	proto.RegisterType((*RequestSpaceLeave)(nil), "dialog.RequestSpaceLeave")
	proto.RegisterType((*RequestGetSpaceInviteUrl)(nil), "dialog.RequestGetSpaceInviteUrl")
	proto.RegisterType((*ResponseSpaceInviteUrl)(nil), "dialog.ResponseSpaceInviteUrl")
	proto.RegisterType((*RequestRevokeSpaceInviteUrl)(nil), "dialog.RequestRevokeSpaceInviteUrl")
}

func init() { proto.RegisterFile("spaces.proto", fileDescriptor_d6da961f807523b7) }

var fileDescriptor_d6da961f807523b7 = []byte{
	// 1287 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x58, 0xcf, 0x6f, 0xe3, 0xc4,
	0x17, 0xb7, 0xf3, 0xb3, 0x79, 0x6d, 0xbf, 0xdf, 0xad, 0xdb, 0xdd, 0x75, 0xdd, 0xad, 0xe9, 0x7a,
	0x25, 0x76, 0x25, 0x20, 0x65, 0x0b, 0x12, 0xda, 0x0a, 0x51, 0xa5, 0x2d, 0xb4, 0x85, 0x22, 0x2a,
	0x77, 0xd3, 0x95, 0x40, 0x10, 0x4d, 0xe2, 0x69, 0xd6, 0xd4, 0x89, 0x8d, 0x3d, 0xc9, 0x8a, 0x0b,
	0xe2, 0x2f, 0x80, 0xe5, 0x00, 0xfc, 0x0b, 0x1c, 0x90, 0x90, 0xb8, 0x70, 0xe0, 0x1f, 0xe0, 0xd8,
	0xe3, 0x1e, 0x69, 0x2a, 0x24, 0x8e, 0xfb, 0x1f, 0x80, 0x3c, 0x33, 0xfe, 0x11, 0x27, 0xa9, 0xd3,
	0x92, 0xc3, 0x9e, 0x1a, 0xcf, 0x7b, 0xef, 0x33, 0x9f, 0xf9, 0xbc, 0x79, 0x6f, 0x9e, 0x0a, 0x33,
	0x9e, 0x83, 0x1a, 0xd8, 0x2b, 0x3b, 0xae, 0x4d, 0x6c, 0xa9, 0x60, 0x98, 0xc8, 0xb2, 0x9b, 0x8a,
	0xda, 0xb4, 0xed, 0xa6, 0x85, 0x57, 0xe9, 0x6a, 0xbd, 0x73, 0xbc, 0xfa, 0xc4, 0x45, 0x8e, 0x83,
	0x5d, 0xee, 0xa7, 0xbc, 0x94, 0xb4, 0x13, 0xb3, 0x85, 0x3d, 0x82, 0x5a, 0x0e, 0x77, 0x98, 0x33,
	0xf0, 0xb1, 0xd9, 0x36, 0x89, 0x69, 0xb7, 0x83, 0x98, 0x69, 0x07, 0x47, 0x00, 0xd7, 0x5b, 0xd8,
	0x30, 0x51, 0x0d, 0xb5, 0x8d, 0xda, 0xb1, 0x69, 0xe1, 0x70, 0xd9, 0x6b, 0x20, 0x0b, 0x39, 0xf5,
	0x55, 0xfe, 0x97, 0x2d, 0x6b, 0x7f, 0xe5, 0x20, 0x7f, 0xe8, 0xf3, 0x94, 0x6e, 0x43, 0xc6, 0x34,
	0x64, 0x71, 0x45, 0xbc, 0x37, 0xbd, 0x36, 0x57, 0x66, 0x6c, 0xcb, 0xd5, 0xea, 0xde, 0xf6, 0x11,
	0xb2, 0x3a, 0x58, 0xcf, 0x98, 0x86, 0xf4, 0x00, 0xa0, 0xe1, 0x62, 0x44, 0xb0, 0x51, 0x43, 0x44,
	0xce, 0x50, 0x57, 0xa5, 0xcc, 0x08, 0x97, 0x03, 0xc2, 0xe5, 0x87, 0x01, 0x61, 0xbd, 0xc4, 0xbd,
	0x2b, 0x44, 0xba, 0x0f, 0xc5, 0x26, 0x6e, 0x63, 0x17, 0x59, 0x72, 0x96, 0xc6, 0x5d, 0x0f, 0xb6,
	0xa0, 0xbb, 0x97, 0x77, 0x98, 0x71, 0x57, 0xd0, 0x03, 0x3f, 0xa9, 0x0c, 0x05, 0xa7, 0x53, 0xb7,
	0xcc, 0x86, 0x9c, 0xa3, 0x11, 0x0b, 0xfd, 0x11, 0x07, 0xd4, 0xb6, 0x2b, 0xe8, 0xdc, 0xcb, 0xdf,
	0xc2, 0x71, 0xcd, 0x2e, 0x22, 0x58, 0xce, 0x0f, 0xdb, 0xe2, 0x80, 0x19, 0xfd, 0x2d, 0xb8, 0x9f,
	0xb4, 0x00, 0x79, 0x62, 0x12, 0x0b, 0xcb, 0x85, 0x15, 0xf1, 0x5e, 0x49, 0x67, 0x1f, 0xd2, 0x1a,
	0xe4, 0x51, 0xdd, 0xee, 0x10, 0xb9, 0x48, 0x61, 0x6e, 0x0d, 0x9c, 0xf0, 0x90, 0xb8, 0x66, 0xbb,
	0xc9, 0x74, 0x61, 0xae, 0xd2, 0xcb, 0x50, 0x40, 0x5d, 0x44, 0x90, 0x2b, 0x4f, 0xd1, 0xa0, 0xff,
	0x05, 0x7b, 0x57, 0xe8, 0xaa, 0xce, 0xad, 0xbe, 0x84, 0x06, 0xb6, 0x30, 0x97, 0xb0, 0x94, 0x2e,
	0x21, 0xf7, 0xae, 0x10, 0xe9, 0x2e, 0xe4, 0x1b, 0x96, 0xdd, 0x38, 0x91, 0xa1, 0x3f, 0x47, 0xdb,
	0x88, 0xa0, 0x2d, 0xdf, 0xa0, 0x33, 0xbb, 0x52, 0x82, 0x22, 0x97, 0x53, 0x79, 0x1f, 0x0a, 0x4c,
	0x27, 0x49, 0x83, 0x59, 0xfb, 0x49, 0x1b, 0xbb, 0xb5, 0x8e, 0x87, 0xdd, 0x1a, 0xcf, 0x74, 0x5e,
	0x9f, 0xa6, 0x8b, 0x55, 0x0f, 0xbb, 0x7b, 0x86, 0x74, 0x0b, 0x4a, 0xde, 0x63, 0xdb, 0x25, 0x6d,
	0xd4, 0xc2, 0x34, 0xbd, 0x25, 0x3d, 0x5a, 0x50, 0x5e, 0x83, 0x22, 0x97, 0x70, 0x1c, 0xb0, 0xcd,
	0x19, 0x00, 0x5a, 0x00, 0x35, 0xf2, 0xa5, 0x83, 0xb5, 0x9f, 0x33, 0x30, 0x4d, 0xd3, 0xf0, 0x21,
	0x6e, 0xd5, 0xb1, 0x2b, 0xbd, 0x0a, 0x53, 0xcc, 0x7a, 0xd1, 0x9d, 0x2b, 0x52, 0x97, 0x3d, 0x43,
	0xba, 0x09, 0xc5, 0x60, 0xa7, 0x0c, 0xdd, 0xa9, 0xd0, 0x61, 0x8c, 0x1f, 0x00, 0x98, 0xed, 0xae,
	0xc9, 0xe5, 0xcc, 0xa6, 0xcb, 0xc9, 0xbd, 0x2b, 0x44, 0x7a, 0x0b, 0x4a, 0x9f, 0xdb, 0x66, 0x9b,
	0x45, 0xe6, 0x52, 0x23, 0xa7, 0x98, 0x73, 0x85, 0x24, 0x52, 0x98, 0xbf, 0x52, 0x0a, 0x0b, 0x17,
	0xa7, 0x50, 0x5b, 0x87, 0xf9, 0xaa, 0x63, 0x20, 0x82, 0x99, 0x66, 0xb6, 0x61, 0x1e, 0x9b, 0xd8,
	0x90, 0xee, 0x40, 0x9e, 0x4a, 0xc2, 0x25, 0x9b, 0xed, 0xbb, 0xe0, 0x3a, 0xb3, 0x69, 0xbb, 0xb0,
	0x18, 0x8f, 0xa5, 0x7a, 0x87, 0x08, 0xaf, 0x40, 0xa1, 0x45, 0x57, 0x38, 0xc4, 0x7c, 0x1f, 0x04,
	0x73, 0xd6, 0xb9, 0x8b, 0xf6, 0x8f, 0x08, 0x92, 0x8e, 0xbf, 0xe8, 0x60, 0x8f, 0x6c, 0xd1, 0x4a,
	0x66, 0x9d, 0x62, 0x19, 0xc0, 0x65, 0xab, 0x41, 0xf6, 0xb2, 0x7a, 0x89, 0xaf, 0xec, 0x19, 0x51,
	0x51, 0x65, 0xe2, 0x45, 0xb5, 0x1e, 0xbf, 0x5b, 0xd9, 0x31, 0x0a, 0x2b, 0x72, 0x8f, 0x0a, 0x32,
	0x77, 0x95, 0x82, 0xcc, 0x5f, 0x54, 0x90, 0xeb, 0xb7, 0x7a, 0x1b, 0x8b, 0x70, 0xd3, 0x6c, 0x95,
	0x0d, 0xab, 0x59, 0x6e, 0xba, 0x4e, 0xa3, 0xbc, 0xe3, 0x3a, 0x0d, 0x7e, 0x6a, 0xed, 0x10, 0x66,
	0x75, 0xec, 0x39, 0x76, 0xdb, 0xe3, 0x67, 0x1f, 0x27, 0x03, 0xeb, 0xcb, 0xbd, 0x0d, 0x05, 0xe4,
	0x41, 0x4c, 0x06, 0xa4, 0x7d, 0x2b, 0xc2, 0x7c, 0x1f, 0xea, 0x95, 0x6a, 0x22, 0xca, 0x64, 0x26,
	0x35, 0x93, 0x69, 0x8c, 0xbe, 0x0a, 0xf3, 0xbc, 0x4d, 0xef, 0xea, 0xd8, 0x2f, 0x42, 0x78, 0xa1,
	0x33, 0x17, 0x5f, 0xe8, 0x14, 0x99, 0xef, 0xc3, 0x1c, 0xff, 0xb9, 0x6f, 0x23, 0x83, 0xee, 0xee,
	0xa5, 0x84, 0x7c, 0x43, 0xef, 0x26, 0xe3, 0x1f, 0x05, 0xc5, 0xf3, 0x93, 0x1d, 0x95, 0x1f, 0xe9,
	0x4d, 0x60, 0x9d, 0xaa, 0x46, 0xdf, 0x4d, 0x39, 0x43, 0x5d, 0x43, 0xfd, 0xfc, 0xfe, 0xf5, 0x51,
	0x87, 0x1c, 0x60, 0xec, 0xea, 0x40, 0xfd, 0xfc, 0x9f, 0x5e, 0x9a, 0x86, 0x4f, 0x45, 0x58, 0xe4,
	0xe4, 0x0e, 0x89, 0x8b, 0x51, 0x2b, 0x96, 0x07, 0xef, 0x92, 0xb9, 0x9d, 0x90, 0xac, 0x27, 0x30,
	0x1f, 0x23, 0xf1, 0xc8, 0x24, 0x8f, 0xfd, 0x93, 0x5c, 0xaa, 0x07, 0x48, 0x77, 0x21, 0xe7, 0xab,
	0x94, 0xbc, 0x64, 0x71, 0x91, 0xa8, 0x83, 0xf6, 0x9d, 0x08, 0xff, 0x0f, 0xce, 0x8f, 0xc9, 0x43,
	0x5a, 0xf4, 0x63, 0xdc, 0xa0, 0xe1, 0xdd, 0x22, 0x14, 0x20, 0xfb, 0x9f, 0x04, 0xf8, 0x9d, 0x56,
	0x5a, 0xc0, 0xe9, 0x30, 0x6c, 0x28, 0x63, 0xf0, 0x5a, 0x4f, 0xbe, 0x85, 0x97, 0xe8, 0x57, 0x13,
	0x62, 0xff, 0x4b, 0x9f, 0xa2, 0x15, 0xda, 0xd6, 0xc6, 0x60, 0x1e, 0x76, 0xcb, 0xcc, 0xf8, 0xdd,
	0x72, 0x42, 0x8c, 0x7f, 0x13, 0xe1, 0x5a, 0x8c, 0x31, 0x1b, 0x79, 0xc6, 0x1a, 0x2c, 0x67, 0xfd,
	0x59, 0xb5, 0x66, 0xd9, 0x0d, 0xe4, 0x0f, 0xb6, 0x9c, 0x7a, 0x38, 0xf1, 0xbd, 0x67, 0x5a, 0x78,
	0x9f, 0xdb, 0xf4, 0x99, 0xe3, 0xd8, 0xd7, 0xa4, 0x98, 0xff, 0x18, 0x3d, 0x75, 0xb4, 0x0a, 0xf6,
	0xe8, 0x9c, 0x30, 0x0e, 0xf7, 0x91, 0xb3, 0xc9, 0x84, 0x98, 0x7d, 0x1f, 0xd3, 0xd4, 0x67, 0xf6,
	0x81, 0xd9, 0x38, 0x79, 0x11, 0x78, 0xfd, 0x20, 0x86, 0x4d, 0x9b, 0xf2, 0xda, 0xc7, 0xa8, 0xfb,
	0x42, 0x08, 0xf6, 0x09, 0xc8, 0xfc, 0xe7, 0x0e, 0x8e, 0x27, 0xb3, 0xea, 0x5a, 0x63, 0xd0, 0x4b,
	0x01, 0x3f, 0x82, 0x1b, 0x7d, 0x4f, 0x77, 0x04, 0xbd, 0x1c, 0x8c, 0xa2, 0xb5, 0x8e, 0x6b, 0xd1,
	0x2d, 0x4a, 0xc1, 0xb8, 0x59, 0x75, 0xad, 0xb4, 0xd7, 0xe3, 0x33, 0x58, 0xe2, 0x5b, 0xe8, 0xb8,
	0x6b, 0x9f, 0xe0, 0x09, 0xf3, 0x5e, 0xfb, 0xb5, 0x08, 0x05, 0xfe, 0x44, 0x6e, 0xc2, 0x74, 0x7c,
	0x9a, 0x53, 0x02, 0xb8, 0xc1, 0x49, 0x4f, 0xb9, 0x1e, 0xd9, 0x62, 0x67, 0xd6, 0x04, 0x1f, 0x23,
	0x3e, 0x29, 0x24, 0x31, 0x62, 0xb6, 0xd1, 0x18, 0x6f, 0xc3, 0x54, 0xf8, 0x50, 0xdc, 0x4c, 0x00,
	0x04, 0x86, 0xd1, 0xd1, 0xdb, 0x30, 0xd3, 0xd7, 0xd2, 0x97, 0x06, 0x11, 0x42, 0x63, 0x1a, 0x07,
	0xd6, 0x5a, 0x87, 0x70, 0xa0, 0x86, 0xd1, 0xd1, 0xef, 0x40, 0x29, 0x6a, 0x73, 0xf2, 0x90, 0x70,
	0x6a, 0x19, 0x1d, 0xff, 0x2e, 0x40, 0x6c, 0x74, 0x59, 0x4c, 0x00, 0x44, 0x26, 0x45, 0x49, 0x22,
	0x44, 0x36, 0x4d, 0x90, 0x8e, 0xe0, 0x5a, 0xf8, 0x1d, 0xcc, 0x1b, 0xb7, 0x93, 0x6c, 0x06, 0x46,
	0x12, 0x65, 0x69, 0xc8, 0xb3, 0x1f, 0xcc, 0x08, 0x9a, 0xf0, 0xba, 0x28, 0x6d, 0x41, 0x81, 0xb7,
	0xc1, 0x64, 0x7e, 0x63, 0xb7, 0x53, 0x59, 0x1a, 0x7a, 0x3a, 0x06, 0xa7, 0x09, 0xd2, 0x06, 0xe4,
	0x68, 0xc7, 0x92, 0x87, 0x41, 0xf8, 0x96, 0x34, 0x80, 0x0a, 0xe4, 0x59, 0x6b, 0x59, 0x1c, 0x86,
	0x40, 0x4d, 0x69, 0x10, 0x8f, 0x60, 0x6e, 0xb0, 0x15, 0xac, 0x24, 0xe0, 0x06, 0x3c, 0x14, 0x75,
	0x28, 0x6a, 0x68, 0xd7, 0x04, 0xe9, 0x53, 0x58, 0x18, 0x5a, 0xae, 0x77, 0x12, 0xd8, 0xc3, 0x9c,
	0xd2, 0xe1, 0x37, 0xab, 0xbd, 0x8d, 0x1b, 0xb0, 0x10, 0x2f, 0x69, 0x0f, 0xbb, 0x5d, 0xb3, 0x81,
	0xbd, 0xd3, 0x33, 0x55, 0x78, 0x76, 0xa6, 0x0a, 0xcf, 0xcf, 0x54, 0xf1, 0xeb, 0x9e, 0x2a, 0xfe,
	0xd4, 0x53, 0xc5, 0x3f, 0x7a, 0xaa, 0x78, 0xda, 0x53, 0xc5, 0x3f, 0x7b, 0xaa, 0xf8, 0x77, 0x4f,
	0x15, 0x9e, 0xf7, 0x54, 0xf1, 0xe9, 0xb9, 0x2a, 0x9c, 0x9e, 0xab, 0xc2, 0xb3, 0x73, 0x55, 0xf8,
	0x98, 0xff, 0x0b, 0xaa, 0x5e, 0xa0, 0x93, 0xc0, 0x1b, 0xff, 0x06, 0x00, 0x00, 0xff, 0xff, 0x18,
	0x57, 0x34, 0x60, 0xa1, 0x12, 0x00, 0x00,
}

func (this *Space) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Space)
	if !ok {
		that2, ok := that.(Space)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Id.Equal(that1.Id) {
		return false
	}
	if !this.CreatedAt.Equal(that1.CreatedAt) {
		return false
	}
	if that1.SpaceType == nil {
		if this.SpaceType != nil {
			return false
		}
	} else if this.SpaceType == nil {
		return false
	} else if !this.SpaceType.Equal(that1.SpaceType) {
		return false
	}
	if this.Title != that1.Title {
		return false
	}
	if !this.About.Equal(that1.About) {
		return false
	}
	if !this.Avatar.Equal(that1.Avatar) {
		return false
	}
	if !this.DeletedAt.Equal(that1.DeletedAt) {
		return false
	}
	if !this.Clock.Equal(that1.Clock) {
		return false
	}
	return true
}
func (this *Space_General_) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Space_General_)
	if !ok {
		that2, ok := that.(Space_General_)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.General.Equal(that1.General) {
		return false
	}
	return true
}
func (this *Space_Public_) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Space_Public_)
	if !ok {
		that2, ok := that.(Space_Public_)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Public.Equal(that1.Public) {
		return false
	}
	return true
}
func (this *Space_Private_) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Space_Private_)
	if !ok {
		that2, ok := that.(Space_Private_)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Private.Equal(that1.Private) {
		return false
	}
	return true
}
func (this *Space_General) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Space_General)
	if !ok {
		that2, ok := that.(Space_General)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *Space_Public) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Space_Public)
	if !ok {
		that2, ok := that.(Space_Public)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.OwnerUserId != that1.OwnerUserId {
		return false
	}
	if this.Shortname != that1.Shortname {
		return false
	}
	return true
}
func (this *Space_Private) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Space_Private)
	if !ok {
		that2, ok := that.(Space_Private)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.OwnerUserId != that1.OwnerUserId {
		return false
	}
	return true
}
func (this *SpaceMember) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SpaceMember)
	if !ok {
		that2, ok := that.(SpaceMember)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.SpaceId.Equal(that1.SpaceId) {
		return false
	}
	if this.UserId != that1.UserId {
		return false
	}
	if !this.InvitedAt.Equal(that1.InvitedAt) {
		return false
	}
	if !this.JoinedAt.Equal(that1.JoinedAt) {
		return false
	}
	if !this.DeletedAt.Equal(that1.DeletedAt) {
		return false
	}
	if !this.Clock.Equal(that1.Clock) {
		return false
	}
	return true
}
func (this *UpdateSpaceModified) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpdateSpaceModified)
	if !ok {
		that2, ok := that.(UpdateSpaceModified)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Space.Equal(that1.Space) {
		return false
	}
	return true
}
func (this *UpdateSpaceMemberModified) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpdateSpaceMemberModified)
	if !ok {
		that2, ok := that.(UpdateSpaceMemberModified)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Member.Equal(that1.Member) {
		return false
	}
	return true
}
func (this *RequestCreateSpace) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RequestCreateSpace)
	if !ok {
		that2, ok := that.(RequestCreateSpace)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.RequestId != that1.RequestId {
		return false
	}
	if this.Title != that1.Title {
		return false
	}
	if !this.Shortname.Equal(that1.Shortname) {
		return false
	}
	if !this.About.Equal(that1.About) {
		return false
	}
	if !this.Avatar.Equal(that1.Avatar) {
		return false
	}
	return true
}
func (this *ResponseSpace) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ResponseSpace)
	if !ok {
		that2, ok := that.(ResponseSpace)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Space.Equal(that1.Space) {
		return false
	}
	return true
}
func (this *ResponseSpaceMember) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ResponseSpaceMember)
	if !ok {
		that2, ok := that.(ResponseSpaceMember)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.SpaceId.Equal(that1.SpaceId) {
		return false
	}
	if !this.Member.Equal(that1.Member) {
		return false
	}
	return true
}
func (this *RequestDeleteSpace) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RequestDeleteSpace)
	if !ok {
		that2, ok := that.(RequestDeleteSpace)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Id.Equal(that1.Id) {
		return false
	}
	if !this.Clock.Equal(that1.Clock) {
		return false
	}
	return true
}
func (this *RequestLoadSpaces) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RequestLoadSpaces)
	if !ok {
		that2, ok := that.(RequestLoadSpaces)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *ResponseLoadSpaces) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ResponseLoadSpaces)
	if !ok {
		that2, ok := that.(ResponseLoadSpaces)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Space) != len(that1.Space) {
		return false
	}
	for i := range this.Space {
		if !this.Space[i].Equal(that1.Space[i]) {
			return false
		}
	}
	if len(this.OwnerPeers) != len(that1.OwnerPeers) {
		return false
	}
	for i := range this.OwnerPeers {
		if !this.OwnerPeers[i].Equal(that1.OwnerPeers[i]) {
			return false
		}
	}
	return true
}
func (this *RequestStreamSpaceMembers) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RequestStreamSpaceMembers)
	if !ok {
		that2, ok := that.(RequestStreamSpaceMembers)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.SpaceId.Equal(that1.SpaceId) {
		return false
	}
	if !this.Clock.Equal(that1.Clock) {
		return false
	}
	return true
}
func (this *SpaceMemberWithPeer) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SpaceMemberWithPeer)
	if !ok {
		that2, ok := that.(SpaceMemberWithPeer)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Member.Equal(that1.Member) {
		return false
	}
	if !this.Peer.Equal(that1.Peer) {
		return false
	}
	return true
}
func (this *RequestSetTitle) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RequestSetTitle)
	if !ok {
		that2, ok := that.(RequestSetTitle)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Id.Equal(that1.Id) {
		return false
	}
	if this.Title != that1.Title {
		return false
	}
	if !this.Clock.Equal(that1.Clock) {
		return false
	}
	return true
}
func (this *RequestSetShortname) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RequestSetShortname)
	if !ok {
		that2, ok := that.(RequestSetShortname)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Id.Equal(that1.Id) {
		return false
	}
	if !this.Shortname.Equal(that1.Shortname) {
		return false
	}
	if !this.Clock.Equal(that1.Clock) {
		return false
	}
	return true
}
func (this *RequestSetAbout) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RequestSetAbout)
	if !ok {
		that2, ok := that.(RequestSetAbout)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Id.Equal(that1.Id) {
		return false
	}
	if !this.About.Equal(that1.About) {
		return false
	}
	if !this.Clock.Equal(that1.Clock) {
		return false
	}
	return true
}
func (this *RequestSetAvatar) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RequestSetAvatar)
	if !ok {
		that2, ok := that.(RequestSetAvatar)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Id.Equal(that1.Id) {
		return false
	}
	if !this.FileLocation.Equal(that1.FileLocation) {
		return false
	}
	if !this.Clock.Equal(that1.Clock) {
		return false
	}
	return true
}
func (this *RequestSpaceInvite) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RequestSpaceInvite)
	if !ok {
		that2, ok := that.(RequestSpaceInvite)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Id.Equal(that1.Id) {
		return false
	}
	if this.UserId != that1.UserId {
		return false
	}
	if !this.Clock.Equal(that1.Clock) {
		return false
	}
	return true
}
func (this *RequestSpaceKick) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RequestSpaceKick)
	if !ok {
		that2, ok := that.(RequestSpaceKick)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Id.Equal(that1.Id) {
		return false
	}
	if this.UserId != that1.UserId {
		return false
	}
	if !this.Clock.Equal(that1.Clock) {
		return false
	}
	return true
}
func (this *RequestSpaceLeave) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RequestSpaceLeave)
	if !ok {
		that2, ok := that.(RequestSpaceLeave)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Id.Equal(that1.Id) {
		return false
	}
	if this.UserId != that1.UserId {
		return false
	}
	if !this.Clock.Equal(that1.Clock) {
		return false
	}
	return true
}
func (this *RequestGetSpaceInviteUrl) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RequestGetSpaceInviteUrl)
	if !ok {
		that2, ok := that.(RequestGetSpaceInviteUrl)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Id.Equal(that1.Id) {
		return false
	}
	return true
}
func (this *ResponseSpaceInviteUrl) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ResponseSpaceInviteUrl)
	if !ok {
		that2, ok := that.(ResponseSpaceInviteUrl)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.InviteUrl != that1.InviteUrl {
		return false
	}
	return true
}
func (this *RequestRevokeSpaceInviteUrl) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RequestRevokeSpaceInviteUrl)
	if !ok {
		that2, ok := that.(RequestRevokeSpaceInviteUrl)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Id.Equal(that1.Id) {
		return false
	}
	return true
}
func (this *Space) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 14)
	s = append(s, "&dialog.Space{")
	if this.Id != nil {
		s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	}
	if this.CreatedAt != nil {
		s = append(s, "CreatedAt: "+fmt.Sprintf("%#v", this.CreatedAt)+",\n")
	}
	if this.SpaceType != nil {
		s = append(s, "SpaceType: "+fmt.Sprintf("%#v", this.SpaceType)+",\n")
	}
	s = append(s, "Title: "+fmt.Sprintf("%#v", this.Title)+",\n")
	if this.About != nil {
		s = append(s, "About: "+fmt.Sprintf("%#v", this.About)+",\n")
	}
	if this.Avatar != nil {
		s = append(s, "Avatar: "+fmt.Sprintf("%#v", this.Avatar)+",\n")
	}
	if this.DeletedAt != nil {
		s = append(s, "DeletedAt: "+fmt.Sprintf("%#v", this.DeletedAt)+",\n")
	}
	if this.Clock != nil {
		s = append(s, "Clock: "+fmt.Sprintf("%#v", this.Clock)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Space_General_) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dialog.Space_General_{` +
		`General:` + fmt.Sprintf("%#v", this.General) + `}`}, ", ")
	return s
}
func (this *Space_Public_) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dialog.Space_Public_{` +
		`Public:` + fmt.Sprintf("%#v", this.Public) + `}`}, ", ")
	return s
}
func (this *Space_Private_) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&dialog.Space_Private_{` +
		`Private:` + fmt.Sprintf("%#v", this.Private) + `}`}, ", ")
	return s
}
func (this *Space_General) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&dialog.Space_General{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Space_Public) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&dialog.Space_Public{")
	s = append(s, "OwnerUserId: "+fmt.Sprintf("%#v", this.OwnerUserId)+",\n")
	s = append(s, "Shortname: "+fmt.Sprintf("%#v", this.Shortname)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Space_Private) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&dialog.Space_Private{")
	s = append(s, "OwnerUserId: "+fmt.Sprintf("%#v", this.OwnerUserId)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SpaceMember) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 10)
	s = append(s, "&dialog.SpaceMember{")
	if this.SpaceId != nil {
		s = append(s, "SpaceId: "+fmt.Sprintf("%#v", this.SpaceId)+",\n")
	}
	s = append(s, "UserId: "+fmt.Sprintf("%#v", this.UserId)+",\n")
	if this.InvitedAt != nil {
		s = append(s, "InvitedAt: "+fmt.Sprintf("%#v", this.InvitedAt)+",\n")
	}
	if this.JoinedAt != nil {
		s = append(s, "JoinedAt: "+fmt.Sprintf("%#v", this.JoinedAt)+",\n")
	}
	if this.DeletedAt != nil {
		s = append(s, "DeletedAt: "+fmt.Sprintf("%#v", this.DeletedAt)+",\n")
	}
	if this.Clock != nil {
		s = append(s, "Clock: "+fmt.Sprintf("%#v", this.Clock)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UpdateSpaceModified) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&dialog.UpdateSpaceModified{")
	if this.Space != nil {
		s = append(s, "Space: "+fmt.Sprintf("%#v", this.Space)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UpdateSpaceMemberModified) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&dialog.UpdateSpaceMemberModified{")
	if this.Member != nil {
		s = append(s, "Member: "+fmt.Sprintf("%#v", this.Member)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RequestCreateSpace) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&dialog.RequestCreateSpace{")
	s = append(s, "RequestId: "+fmt.Sprintf("%#v", this.RequestId)+",\n")
	s = append(s, "Title: "+fmt.Sprintf("%#v", this.Title)+",\n")
	if this.Shortname != nil {
		s = append(s, "Shortname: "+fmt.Sprintf("%#v", this.Shortname)+",\n")
	}
	if this.About != nil {
		s = append(s, "About: "+fmt.Sprintf("%#v", this.About)+",\n")
	}
	if this.Avatar != nil {
		s = append(s, "Avatar: "+fmt.Sprintf("%#v", this.Avatar)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ResponseSpace) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&dialog.ResponseSpace{")
	if this.Space != nil {
		s = append(s, "Space: "+fmt.Sprintf("%#v", this.Space)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ResponseSpaceMember) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&dialog.ResponseSpaceMember{")
	if this.SpaceId != nil {
		s = append(s, "SpaceId: "+fmt.Sprintf("%#v", this.SpaceId)+",\n")
	}
	if this.Member != nil {
		s = append(s, "Member: "+fmt.Sprintf("%#v", this.Member)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RequestDeleteSpace) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&dialog.RequestDeleteSpace{")
	if this.Id != nil {
		s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	}
	if this.Clock != nil {
		s = append(s, "Clock: "+fmt.Sprintf("%#v", this.Clock)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RequestLoadSpaces) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&dialog.RequestLoadSpaces{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ResponseLoadSpaces) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&dialog.ResponseLoadSpaces{")
	if this.Space != nil {
		s = append(s, "Space: "+fmt.Sprintf("%#v", this.Space)+",\n")
	}
	if this.OwnerPeers != nil {
		s = append(s, "OwnerPeers: "+fmt.Sprintf("%#v", this.OwnerPeers)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RequestStreamSpaceMembers) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&dialog.RequestStreamSpaceMembers{")
	if this.SpaceId != nil {
		s = append(s, "SpaceId: "+fmt.Sprintf("%#v", this.SpaceId)+",\n")
	}
	if this.Clock != nil {
		s = append(s, "Clock: "+fmt.Sprintf("%#v", this.Clock)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SpaceMemberWithPeer) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&dialog.SpaceMemberWithPeer{")
	if this.Member != nil {
		s = append(s, "Member: "+fmt.Sprintf("%#v", this.Member)+",\n")
	}
	if this.Peer != nil {
		s = append(s, "Peer: "+fmt.Sprintf("%#v", this.Peer)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RequestSetTitle) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&dialog.RequestSetTitle{")
	if this.Id != nil {
		s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	}
	s = append(s, "Title: "+fmt.Sprintf("%#v", this.Title)+",\n")
	if this.Clock != nil {
		s = append(s, "Clock: "+fmt.Sprintf("%#v", this.Clock)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RequestSetShortname) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&dialog.RequestSetShortname{")
	if this.Id != nil {
		s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	}
	if this.Shortname != nil {
		s = append(s, "Shortname: "+fmt.Sprintf("%#v", this.Shortname)+",\n")
	}
	if this.Clock != nil {
		s = append(s, "Clock: "+fmt.Sprintf("%#v", this.Clock)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RequestSetAbout) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&dialog.RequestSetAbout{")
	if this.Id != nil {
		s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	}
	if this.About != nil {
		s = append(s, "About: "+fmt.Sprintf("%#v", this.About)+",\n")
	}
	if this.Clock != nil {
		s = append(s, "Clock: "+fmt.Sprintf("%#v", this.Clock)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RequestSetAvatar) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&dialog.RequestSetAvatar{")
	if this.Id != nil {
		s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	}
	if this.FileLocation != nil {
		s = append(s, "FileLocation: "+fmt.Sprintf("%#v", this.FileLocation)+",\n")
	}
	if this.Clock != nil {
		s = append(s, "Clock: "+fmt.Sprintf("%#v", this.Clock)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RequestSpaceInvite) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&dialog.RequestSpaceInvite{")
	if this.Id != nil {
		s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	}
	s = append(s, "UserId: "+fmt.Sprintf("%#v", this.UserId)+",\n")
	if this.Clock != nil {
		s = append(s, "Clock: "+fmt.Sprintf("%#v", this.Clock)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RequestSpaceKick) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&dialog.RequestSpaceKick{")
	if this.Id != nil {
		s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	}
	s = append(s, "UserId: "+fmt.Sprintf("%#v", this.UserId)+",\n")
	if this.Clock != nil {
		s = append(s, "Clock: "+fmt.Sprintf("%#v", this.Clock)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RequestSpaceLeave) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&dialog.RequestSpaceLeave{")
	if this.Id != nil {
		s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	}
	s = append(s, "UserId: "+fmt.Sprintf("%#v", this.UserId)+",\n")
	if this.Clock != nil {
		s = append(s, "Clock: "+fmt.Sprintf("%#v", this.Clock)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RequestGetSpaceInviteUrl) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&dialog.RequestGetSpaceInviteUrl{")
	if this.Id != nil {
		s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ResponseSpaceInviteUrl) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&dialog.ResponseSpaceInviteUrl{")
	s = append(s, "InviteUrl: "+fmt.Sprintf("%#v", this.InviteUrl)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RequestRevokeSpaceInviteUrl) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&dialog.RequestRevokeSpaceInviteUrl{")
	if this.Id != nil {
		s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringSpaces(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// SpacesClient is the client API for Spaces service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SpacesClient interface {
	CreateSpace(ctx context.Context, in *RequestCreateSpace, opts ...grpc.CallOption) (*ResponseSpace, error)
	DeleteSpace(ctx context.Context, in *RequestDeleteSpace, opts ...grpc.CallOption) (*ResponseSpace, error)
	SetTitle(ctx context.Context, in *RequestSetTitle, opts ...grpc.CallOption) (*ResponseSpace, error)
	SetShortname(ctx context.Context, in *RequestSetShortname, opts ...grpc.CallOption) (*ResponseSpace, error)
	SetAbout(ctx context.Context, in *RequestSetAbout, opts ...grpc.CallOption) (*ResponseSpace, error)
	SetAvatar(ctx context.Context, in *RequestSetAvatar, opts ...grpc.CallOption) (*ResponseSpace, error)
	LoadSpaces(ctx context.Context, in *RequestLoadSpaces, opts ...grpc.CallOption) (*ResponseLoadSpaces, error)
	LoadSpaceMembers(ctx context.Context, in *RequestStreamSpaceMembers, opts ...grpc.CallOption) (Spaces_LoadSpaceMembersClient, error)
	Invite(ctx context.Context, in *RequestSpaceInvite, opts ...grpc.CallOption) (*ResponseSpaceMember, error)
	Kick(ctx context.Context, in *RequestSpaceKick, opts ...grpc.CallOption) (*ResponseSpaceMember, error)
	Leave(ctx context.Context, in *RequestSpaceLeave, opts ...grpc.CallOption) (*ResponseSpaceMember, error)
	GetSpaceInviteUrl(ctx context.Context, in *RequestGetSpaceInviteUrl, opts ...grpc.CallOption) (*ResponseSpaceInviteUrl, error)
	RevokeSpaceInviteUrl(ctx context.Context, in *RequestRevokeSpaceInviteUrl, opts ...grpc.CallOption) (*ResponseSpaceInviteUrl, error)
}

type spacesClient struct {
	cc *grpc.ClientConn
}

func NewSpacesClient(cc *grpc.ClientConn) SpacesClient {
	return &spacesClient{cc}
}

func (c *spacesClient) CreateSpace(ctx context.Context, in *RequestCreateSpace, opts ...grpc.CallOption) (*ResponseSpace, error) {
	out := new(ResponseSpace)
	err := c.cc.Invoke(ctx, "/dialog.Spaces/CreateSpace", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *spacesClient) DeleteSpace(ctx context.Context, in *RequestDeleteSpace, opts ...grpc.CallOption) (*ResponseSpace, error) {
	out := new(ResponseSpace)
	err := c.cc.Invoke(ctx, "/dialog.Spaces/DeleteSpace", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *spacesClient) SetTitle(ctx context.Context, in *RequestSetTitle, opts ...grpc.CallOption) (*ResponseSpace, error) {
	out := new(ResponseSpace)
	err := c.cc.Invoke(ctx, "/dialog.Spaces/SetTitle", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *spacesClient) SetShortname(ctx context.Context, in *RequestSetShortname, opts ...grpc.CallOption) (*ResponseSpace, error) {
	out := new(ResponseSpace)
	err := c.cc.Invoke(ctx, "/dialog.Spaces/SetShortname", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *spacesClient) SetAbout(ctx context.Context, in *RequestSetAbout, opts ...grpc.CallOption) (*ResponseSpace, error) {
	out := new(ResponseSpace)
	err := c.cc.Invoke(ctx, "/dialog.Spaces/SetAbout", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *spacesClient) SetAvatar(ctx context.Context, in *RequestSetAvatar, opts ...grpc.CallOption) (*ResponseSpace, error) {
	out := new(ResponseSpace)
	err := c.cc.Invoke(ctx, "/dialog.Spaces/SetAvatar", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *spacesClient) LoadSpaces(ctx context.Context, in *RequestLoadSpaces, opts ...grpc.CallOption) (*ResponseLoadSpaces, error) {
	out := new(ResponseLoadSpaces)
	err := c.cc.Invoke(ctx, "/dialog.Spaces/LoadSpaces", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *spacesClient) LoadSpaceMembers(ctx context.Context, in *RequestStreamSpaceMembers, opts ...grpc.CallOption) (Spaces_LoadSpaceMembersClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Spaces_serviceDesc.Streams[0], "/dialog.Spaces/LoadSpaceMembers", opts...)
	if err != nil {
		return nil, err
	}
	x := &spacesLoadSpaceMembersClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Spaces_LoadSpaceMembersClient interface {
	Recv() (*SpaceMemberWithPeer, error)
	grpc.ClientStream
}

type spacesLoadSpaceMembersClient struct {
	grpc.ClientStream
}

func (x *spacesLoadSpaceMembersClient) Recv() (*SpaceMemberWithPeer, error) {
	m := new(SpaceMemberWithPeer)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *spacesClient) Invite(ctx context.Context, in *RequestSpaceInvite, opts ...grpc.CallOption) (*ResponseSpaceMember, error) {
	out := new(ResponseSpaceMember)
	err := c.cc.Invoke(ctx, "/dialog.Spaces/Invite", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *spacesClient) Kick(ctx context.Context, in *RequestSpaceKick, opts ...grpc.CallOption) (*ResponseSpaceMember, error) {
	out := new(ResponseSpaceMember)
	err := c.cc.Invoke(ctx, "/dialog.Spaces/Kick", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *spacesClient) Leave(ctx context.Context, in *RequestSpaceLeave, opts ...grpc.CallOption) (*ResponseSpaceMember, error) {
	out := new(ResponseSpaceMember)
	err := c.cc.Invoke(ctx, "/dialog.Spaces/Leave", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *spacesClient) GetSpaceInviteUrl(ctx context.Context, in *RequestGetSpaceInviteUrl, opts ...grpc.CallOption) (*ResponseSpaceInviteUrl, error) {
	out := new(ResponseSpaceInviteUrl)
	err := c.cc.Invoke(ctx, "/dialog.Spaces/GetSpaceInviteUrl", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *spacesClient) RevokeSpaceInviteUrl(ctx context.Context, in *RequestRevokeSpaceInviteUrl, opts ...grpc.CallOption) (*ResponseSpaceInviteUrl, error) {
	out := new(ResponseSpaceInviteUrl)
	err := c.cc.Invoke(ctx, "/dialog.Spaces/RevokeSpaceInviteUrl", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SpacesServer is the server API for Spaces service.
type SpacesServer interface {
	CreateSpace(context.Context, *RequestCreateSpace) (*ResponseSpace, error)
	DeleteSpace(context.Context, *RequestDeleteSpace) (*ResponseSpace, error)
	SetTitle(context.Context, *RequestSetTitle) (*ResponseSpace, error)
	SetShortname(context.Context, *RequestSetShortname) (*ResponseSpace, error)
	SetAbout(context.Context, *RequestSetAbout) (*ResponseSpace, error)
	SetAvatar(context.Context, *RequestSetAvatar) (*ResponseSpace, error)
	LoadSpaces(context.Context, *RequestLoadSpaces) (*ResponseLoadSpaces, error)
	LoadSpaceMembers(*RequestStreamSpaceMembers, Spaces_LoadSpaceMembersServer) error
	Invite(context.Context, *RequestSpaceInvite) (*ResponseSpaceMember, error)
	Kick(context.Context, *RequestSpaceKick) (*ResponseSpaceMember, error)
	Leave(context.Context, *RequestSpaceLeave) (*ResponseSpaceMember, error)
	GetSpaceInviteUrl(context.Context, *RequestGetSpaceInviteUrl) (*ResponseSpaceInviteUrl, error)
	RevokeSpaceInviteUrl(context.Context, *RequestRevokeSpaceInviteUrl) (*ResponseSpaceInviteUrl, error)
}

// UnimplementedSpacesServer can be embedded to have forward compatible implementations.
type UnimplementedSpacesServer struct {
}

func (*UnimplementedSpacesServer) CreateSpace(ctx context.Context, req *RequestCreateSpace) (*ResponseSpace, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSpace not implemented")
}
func (*UnimplementedSpacesServer) DeleteSpace(ctx context.Context, req *RequestDeleteSpace) (*ResponseSpace, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSpace not implemented")
}
func (*UnimplementedSpacesServer) SetTitle(ctx context.Context, req *RequestSetTitle) (*ResponseSpace, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetTitle not implemented")
}
func (*UnimplementedSpacesServer) SetShortname(ctx context.Context, req *RequestSetShortname) (*ResponseSpace, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetShortname not implemented")
}
func (*UnimplementedSpacesServer) SetAbout(ctx context.Context, req *RequestSetAbout) (*ResponseSpace, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetAbout not implemented")
}
func (*UnimplementedSpacesServer) SetAvatar(ctx context.Context, req *RequestSetAvatar) (*ResponseSpace, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetAvatar not implemented")
}
func (*UnimplementedSpacesServer) LoadSpaces(ctx context.Context, req *RequestLoadSpaces) (*ResponseLoadSpaces, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoadSpaces not implemented")
}
func (*UnimplementedSpacesServer) LoadSpaceMembers(req *RequestStreamSpaceMembers, srv Spaces_LoadSpaceMembersServer) error {
	return status.Errorf(codes.Unimplemented, "method LoadSpaceMembers not implemented")
}
func (*UnimplementedSpacesServer) Invite(ctx context.Context, req *RequestSpaceInvite) (*ResponseSpaceMember, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Invite not implemented")
}
func (*UnimplementedSpacesServer) Kick(ctx context.Context, req *RequestSpaceKick) (*ResponseSpaceMember, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Kick not implemented")
}
func (*UnimplementedSpacesServer) Leave(ctx context.Context, req *RequestSpaceLeave) (*ResponseSpaceMember, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Leave not implemented")
}
func (*UnimplementedSpacesServer) GetSpaceInviteUrl(ctx context.Context, req *RequestGetSpaceInviteUrl) (*ResponseSpaceInviteUrl, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSpaceInviteUrl not implemented")
}
func (*UnimplementedSpacesServer) RevokeSpaceInviteUrl(ctx context.Context, req *RequestRevokeSpaceInviteUrl) (*ResponseSpaceInviteUrl, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RevokeSpaceInviteUrl not implemented")
}

func RegisterSpacesServer(s *grpc.Server, srv SpacesServer) {
	s.RegisterService(&_Spaces_serviceDesc, srv)
}

func _Spaces_CreateSpace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestCreateSpace)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpacesServer).CreateSpace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dialog.Spaces/CreateSpace",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpacesServer).CreateSpace(ctx, req.(*RequestCreateSpace))
	}
	return interceptor(ctx, in, info, handler)
}

func _Spaces_DeleteSpace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestDeleteSpace)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpacesServer).DeleteSpace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dialog.Spaces/DeleteSpace",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpacesServer).DeleteSpace(ctx, req.(*RequestDeleteSpace))
	}
	return interceptor(ctx, in, info, handler)
}

func _Spaces_SetTitle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestSetTitle)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpacesServer).SetTitle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dialog.Spaces/SetTitle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpacesServer).SetTitle(ctx, req.(*RequestSetTitle))
	}
	return interceptor(ctx, in, info, handler)
}

func _Spaces_SetShortname_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestSetShortname)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpacesServer).SetShortname(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dialog.Spaces/SetShortname",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpacesServer).SetShortname(ctx, req.(*RequestSetShortname))
	}
	return interceptor(ctx, in, info, handler)
}

func _Spaces_SetAbout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestSetAbout)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpacesServer).SetAbout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dialog.Spaces/SetAbout",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpacesServer).SetAbout(ctx, req.(*RequestSetAbout))
	}
	return interceptor(ctx, in, info, handler)
}

func _Spaces_SetAvatar_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestSetAvatar)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpacesServer).SetAvatar(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dialog.Spaces/SetAvatar",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpacesServer).SetAvatar(ctx, req.(*RequestSetAvatar))
	}
	return interceptor(ctx, in, info, handler)
}

func _Spaces_LoadSpaces_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestLoadSpaces)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpacesServer).LoadSpaces(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dialog.Spaces/LoadSpaces",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpacesServer).LoadSpaces(ctx, req.(*RequestLoadSpaces))
	}
	return interceptor(ctx, in, info, handler)
}

func _Spaces_LoadSpaceMembers_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(RequestStreamSpaceMembers)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SpacesServer).LoadSpaceMembers(m, &spacesLoadSpaceMembersServer{stream})
}

type Spaces_LoadSpaceMembersServer interface {
	Send(*SpaceMemberWithPeer) error
	grpc.ServerStream
}

type spacesLoadSpaceMembersServer struct {
	grpc.ServerStream
}

func (x *spacesLoadSpaceMembersServer) Send(m *SpaceMemberWithPeer) error {
	return x.ServerStream.SendMsg(m)
}

func _Spaces_Invite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestSpaceInvite)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpacesServer).Invite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dialog.Spaces/Invite",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpacesServer).Invite(ctx, req.(*RequestSpaceInvite))
	}
	return interceptor(ctx, in, info, handler)
}

func _Spaces_Kick_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestSpaceKick)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpacesServer).Kick(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dialog.Spaces/Kick",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpacesServer).Kick(ctx, req.(*RequestSpaceKick))
	}
	return interceptor(ctx, in, info, handler)
}

func _Spaces_Leave_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestSpaceLeave)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpacesServer).Leave(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dialog.Spaces/Leave",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpacesServer).Leave(ctx, req.(*RequestSpaceLeave))
	}
	return interceptor(ctx, in, info, handler)
}

func _Spaces_GetSpaceInviteUrl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestGetSpaceInviteUrl)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpacesServer).GetSpaceInviteUrl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dialog.Spaces/GetSpaceInviteUrl",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpacesServer).GetSpaceInviteUrl(ctx, req.(*RequestGetSpaceInviteUrl))
	}
	return interceptor(ctx, in, info, handler)
}

func _Spaces_RevokeSpaceInviteUrl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestRevokeSpaceInviteUrl)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpacesServer).RevokeSpaceInviteUrl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dialog.Spaces/RevokeSpaceInviteUrl",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpacesServer).RevokeSpaceInviteUrl(ctx, req.(*RequestRevokeSpaceInviteUrl))
	}
	return interceptor(ctx, in, info, handler)
}

var _Spaces_serviceDesc = grpc.ServiceDesc{
	ServiceName: "dialog.Spaces",
	HandlerType: (*SpacesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateSpace",
			Handler:    _Spaces_CreateSpace_Handler,
		},
		{
			MethodName: "DeleteSpace",
			Handler:    _Spaces_DeleteSpace_Handler,
		},
		{
			MethodName: "SetTitle",
			Handler:    _Spaces_SetTitle_Handler,
		},
		{
			MethodName: "SetShortname",
			Handler:    _Spaces_SetShortname_Handler,
		},
		{
			MethodName: "SetAbout",
			Handler:    _Spaces_SetAbout_Handler,
		},
		{
			MethodName: "SetAvatar",
			Handler:    _Spaces_SetAvatar_Handler,
		},
		{
			MethodName: "LoadSpaces",
			Handler:    _Spaces_LoadSpaces_Handler,
		},
		{
			MethodName: "Invite",
			Handler:    _Spaces_Invite_Handler,
		},
		{
			MethodName: "Kick",
			Handler:    _Spaces_Kick_Handler,
		},
		{
			MethodName: "Leave",
			Handler:    _Spaces_Leave_Handler,
		},
		{
			MethodName: "GetSpaceInviteUrl",
			Handler:    _Spaces_GetSpaceInviteUrl_Handler,
		},
		{
			MethodName: "RevokeSpaceInviteUrl",
			Handler:    _Spaces_RevokeSpaceInviteUrl_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "LoadSpaceMembers",
			Handler:       _Spaces_LoadSpaceMembers_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "spaces.proto",
}

func (m *Space) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Space) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Space) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Clock != nil {
		{
			size, err := m.Clock.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSpaces(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x52
	}
	if m.DeletedAt != nil {
		{
			size, err := m.DeletedAt.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSpaces(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	if m.Avatar != nil {
		{
			size, err := m.Avatar.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSpaces(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	if m.About != nil {
		{
			size, err := m.About.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSpaces(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintSpaces(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0x32
	}
	if m.SpaceType != nil {
		{
			size := m.SpaceType.Size()
			i -= size
			if _, err := m.SpaceType.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.CreatedAt != nil {
		{
			size, err := m.CreatedAt.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSpaces(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Id != nil {
		{
			size, err := m.Id.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSpaces(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Space_General_) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Space_General_) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.General != nil {
		{
			size, err := m.General.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSpaces(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *Space_Public_) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Space_Public_) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Public != nil {
		{
			size, err := m.Public.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSpaces(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *Space_Private_) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Space_Private_) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Private != nil {
		{
			size, err := m.Private.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSpaces(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	return len(dAtA) - i, nil
}
func (m *Space_General) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Space_General) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Space_General) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *Space_Public) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Space_Public) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Space_Public) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Shortname) > 0 {
		i -= len(m.Shortname)
		copy(dAtA[i:], m.Shortname)
		i = encodeVarintSpaces(dAtA, i, uint64(len(m.Shortname)))
		i--
		dAtA[i] = 0x12
	}
	if m.OwnerUserId != 0 {
		i = encodeVarintSpaces(dAtA, i, uint64(m.OwnerUserId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Space_Private) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Space_Private) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Space_Private) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.OwnerUserId != 0 {
		i = encodeVarintSpaces(dAtA, i, uint64(m.OwnerUserId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SpaceMember) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SpaceMember) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SpaceMember) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Clock != nil {
		{
			size, err := m.Clock.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSpaces(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if m.DeletedAt != nil {
		{
			size, err := m.DeletedAt.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSpaces(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.JoinedAt != nil {
		{
			size, err := m.JoinedAt.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSpaces(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.InvitedAt != nil {
		{
			size, err := m.InvitedAt.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSpaces(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.UserId != 0 {
		i = encodeVarintSpaces(dAtA, i, uint64(m.UserId))
		i--
		dAtA[i] = 0x10
	}
	if m.SpaceId != nil {
		{
			size, err := m.SpaceId.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSpaces(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UpdateSpaceModified) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateSpaceModified) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateSpaceModified) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Space != nil {
		{
			size, err := m.Space.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSpaces(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UpdateSpaceMemberModified) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateSpaceMemberModified) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateSpaceMemberModified) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Member != nil {
		{
			size, err := m.Member.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSpaces(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RequestCreateSpace) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestCreateSpace) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RequestCreateSpace) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Avatar != nil {
		{
			size, err := m.Avatar.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSpaces(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.About != nil {
		{
			size, err := m.About.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSpaces(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.Shortname != nil {
		{
			size, err := m.Shortname.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSpaces(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintSpaces(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0x12
	}
	if m.RequestId != 0 {
		i = encodeVarintSpaces(dAtA, i, uint64(m.RequestId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ResponseSpace) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResponseSpace) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ResponseSpace) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Space != nil {
		{
			size, err := m.Space.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSpaces(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ResponseSpaceMember) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResponseSpaceMember) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ResponseSpaceMember) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Member != nil {
		{
			size, err := m.Member.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSpaces(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.SpaceId != nil {
		{
			size, err := m.SpaceId.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSpaces(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RequestDeleteSpace) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestDeleteSpace) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RequestDeleteSpace) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Clock != nil {
		{
			size, err := m.Clock.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSpaces(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Id != nil {
		{
			size, err := m.Id.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSpaces(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RequestLoadSpaces) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestLoadSpaces) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RequestLoadSpaces) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *ResponseLoadSpaces) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResponseLoadSpaces) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ResponseLoadSpaces) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.OwnerPeers) > 0 {
		for iNdEx := len(m.OwnerPeers) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.OwnerPeers[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintSpaces(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Space) > 0 {
		for iNdEx := len(m.Space) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Space[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintSpaces(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *RequestStreamSpaceMembers) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestStreamSpaceMembers) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RequestStreamSpaceMembers) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Clock != nil {
		{
			size, err := m.Clock.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSpaces(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.SpaceId != nil {
		{
			size, err := m.SpaceId.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSpaces(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SpaceMemberWithPeer) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SpaceMemberWithPeer) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SpaceMemberWithPeer) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Peer != nil {
		{
			size, err := m.Peer.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSpaces(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Member != nil {
		{
			size, err := m.Member.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSpaces(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RequestSetTitle) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestSetTitle) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RequestSetTitle) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Clock != nil {
		{
			size, err := m.Clock.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSpaces(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintSpaces(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != nil {
		{
			size, err := m.Id.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSpaces(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RequestSetShortname) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestSetShortname) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RequestSetShortname) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Clock != nil {
		{
			size, err := m.Clock.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSpaces(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Shortname != nil {
		{
			size, err := m.Shortname.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSpaces(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Id != nil {
		{
			size, err := m.Id.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSpaces(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RequestSetAbout) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestSetAbout) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RequestSetAbout) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Clock != nil {
		{
			size, err := m.Clock.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSpaces(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.About != nil {
		{
			size, err := m.About.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSpaces(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Id != nil {
		{
			size, err := m.Id.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSpaces(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RequestSetAvatar) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestSetAvatar) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RequestSetAvatar) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Clock != nil {
		{
			size, err := m.Clock.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSpaces(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.FileLocation != nil {
		{
			size, err := m.FileLocation.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSpaces(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Id != nil {
		{
			size, err := m.Id.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSpaces(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RequestSpaceInvite) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestSpaceInvite) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RequestSpaceInvite) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Clock != nil {
		{
			size, err := m.Clock.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSpaces(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.UserId != 0 {
		i = encodeVarintSpaces(dAtA, i, uint64(m.UserId))
		i--
		dAtA[i] = 0x10
	}
	if m.Id != nil {
		{
			size, err := m.Id.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSpaces(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RequestSpaceKick) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestSpaceKick) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RequestSpaceKick) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Clock != nil {
		{
			size, err := m.Clock.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSpaces(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.UserId != 0 {
		i = encodeVarintSpaces(dAtA, i, uint64(m.UserId))
		i--
		dAtA[i] = 0x10
	}
	if m.Id != nil {
		{
			size, err := m.Id.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSpaces(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RequestSpaceLeave) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestSpaceLeave) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RequestSpaceLeave) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Clock != nil {
		{
			size, err := m.Clock.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSpaces(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.UserId != 0 {
		i = encodeVarintSpaces(dAtA, i, uint64(m.UserId))
		i--
		dAtA[i] = 0x10
	}
	if m.Id != nil {
		{
			size, err := m.Id.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSpaces(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RequestGetSpaceInviteUrl) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestGetSpaceInviteUrl) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RequestGetSpaceInviteUrl) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != nil {
		{
			size, err := m.Id.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSpaces(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ResponseSpaceInviteUrl) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResponseSpaceInviteUrl) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ResponseSpaceInviteUrl) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.InviteUrl) > 0 {
		i -= len(m.InviteUrl)
		copy(dAtA[i:], m.InviteUrl)
		i = encodeVarintSpaces(dAtA, i, uint64(len(m.InviteUrl)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RequestRevokeSpaceInviteUrl) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestRevokeSpaceInviteUrl) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RequestRevokeSpaceInviteUrl) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != nil {
		{
			size, err := m.Id.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSpaces(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintSpaces(dAtA []byte, offset int, v uint64) int {
	offset -= sovSpaces(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Space) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		l = m.Id.Size()
		n += 1 + l + sovSpaces(uint64(l))
	}
	if m.CreatedAt != nil {
		l = m.CreatedAt.Size()
		n += 1 + l + sovSpaces(uint64(l))
	}
	if m.SpaceType != nil {
		n += m.SpaceType.Size()
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovSpaces(uint64(l))
	}
	if m.About != nil {
		l = m.About.Size()
		n += 1 + l + sovSpaces(uint64(l))
	}
	if m.Avatar != nil {
		l = m.Avatar.Size()
		n += 1 + l + sovSpaces(uint64(l))
	}
	if m.DeletedAt != nil {
		l = m.DeletedAt.Size()
		n += 1 + l + sovSpaces(uint64(l))
	}
	if m.Clock != nil {
		l = m.Clock.Size()
		n += 1 + l + sovSpaces(uint64(l))
	}
	return n
}

func (m *Space_General_) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.General != nil {
		l = m.General.Size()
		n += 1 + l + sovSpaces(uint64(l))
	}
	return n
}
func (m *Space_Public_) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Public != nil {
		l = m.Public.Size()
		n += 1 + l + sovSpaces(uint64(l))
	}
	return n
}
func (m *Space_Private_) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Private != nil {
		l = m.Private.Size()
		n += 1 + l + sovSpaces(uint64(l))
	}
	return n
}
func (m *Space_General) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *Space_Public) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.OwnerUserId != 0 {
		n += 1 + sovSpaces(uint64(m.OwnerUserId))
	}
	l = len(m.Shortname)
	if l > 0 {
		n += 1 + l + sovSpaces(uint64(l))
	}
	return n
}

func (m *Space_Private) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.OwnerUserId != 0 {
		n += 1 + sovSpaces(uint64(m.OwnerUserId))
	}
	return n
}

func (m *SpaceMember) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SpaceId != nil {
		l = m.SpaceId.Size()
		n += 1 + l + sovSpaces(uint64(l))
	}
	if m.UserId != 0 {
		n += 1 + sovSpaces(uint64(m.UserId))
	}
	if m.InvitedAt != nil {
		l = m.InvitedAt.Size()
		n += 1 + l + sovSpaces(uint64(l))
	}
	if m.JoinedAt != nil {
		l = m.JoinedAt.Size()
		n += 1 + l + sovSpaces(uint64(l))
	}
	if m.DeletedAt != nil {
		l = m.DeletedAt.Size()
		n += 1 + l + sovSpaces(uint64(l))
	}
	if m.Clock != nil {
		l = m.Clock.Size()
		n += 1 + l + sovSpaces(uint64(l))
	}
	return n
}

func (m *UpdateSpaceModified) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Space != nil {
		l = m.Space.Size()
		n += 1 + l + sovSpaces(uint64(l))
	}
	return n
}

func (m *UpdateSpaceMemberModified) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Member != nil {
		l = m.Member.Size()
		n += 1 + l + sovSpaces(uint64(l))
	}
	return n
}

func (m *RequestCreateSpace) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RequestId != 0 {
		n += 1 + sovSpaces(uint64(m.RequestId))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovSpaces(uint64(l))
	}
	if m.Shortname != nil {
		l = m.Shortname.Size()
		n += 1 + l + sovSpaces(uint64(l))
	}
	if m.About != nil {
		l = m.About.Size()
		n += 1 + l + sovSpaces(uint64(l))
	}
	if m.Avatar != nil {
		l = m.Avatar.Size()
		n += 1 + l + sovSpaces(uint64(l))
	}
	return n
}

func (m *ResponseSpace) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Space != nil {
		l = m.Space.Size()
		n += 1 + l + sovSpaces(uint64(l))
	}
	return n
}

func (m *ResponseSpaceMember) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SpaceId != nil {
		l = m.SpaceId.Size()
		n += 1 + l + sovSpaces(uint64(l))
	}
	if m.Member != nil {
		l = m.Member.Size()
		n += 1 + l + sovSpaces(uint64(l))
	}
	return n
}

func (m *RequestDeleteSpace) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		l = m.Id.Size()
		n += 1 + l + sovSpaces(uint64(l))
	}
	if m.Clock != nil {
		l = m.Clock.Size()
		n += 1 + l + sovSpaces(uint64(l))
	}
	return n
}

func (m *RequestLoadSpaces) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *ResponseLoadSpaces) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Space) > 0 {
		for _, e := range m.Space {
			l = e.Size()
			n += 1 + l + sovSpaces(uint64(l))
		}
	}
	if len(m.OwnerPeers) > 0 {
		for _, e := range m.OwnerPeers {
			l = e.Size()
			n += 1 + l + sovSpaces(uint64(l))
		}
	}
	return n
}

func (m *RequestStreamSpaceMembers) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SpaceId != nil {
		l = m.SpaceId.Size()
		n += 1 + l + sovSpaces(uint64(l))
	}
	if m.Clock != nil {
		l = m.Clock.Size()
		n += 1 + l + sovSpaces(uint64(l))
	}
	return n
}

func (m *SpaceMemberWithPeer) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Member != nil {
		l = m.Member.Size()
		n += 1 + l + sovSpaces(uint64(l))
	}
	if m.Peer != nil {
		l = m.Peer.Size()
		n += 1 + l + sovSpaces(uint64(l))
	}
	return n
}

func (m *RequestSetTitle) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		l = m.Id.Size()
		n += 1 + l + sovSpaces(uint64(l))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovSpaces(uint64(l))
	}
	if m.Clock != nil {
		l = m.Clock.Size()
		n += 1 + l + sovSpaces(uint64(l))
	}
	return n
}

func (m *RequestSetShortname) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		l = m.Id.Size()
		n += 1 + l + sovSpaces(uint64(l))
	}
	if m.Shortname != nil {
		l = m.Shortname.Size()
		n += 1 + l + sovSpaces(uint64(l))
	}
	if m.Clock != nil {
		l = m.Clock.Size()
		n += 1 + l + sovSpaces(uint64(l))
	}
	return n
}

func (m *RequestSetAbout) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		l = m.Id.Size()
		n += 1 + l + sovSpaces(uint64(l))
	}
	if m.About != nil {
		l = m.About.Size()
		n += 1 + l + sovSpaces(uint64(l))
	}
	if m.Clock != nil {
		l = m.Clock.Size()
		n += 1 + l + sovSpaces(uint64(l))
	}
	return n
}

func (m *RequestSetAvatar) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		l = m.Id.Size()
		n += 1 + l + sovSpaces(uint64(l))
	}
	if m.FileLocation != nil {
		l = m.FileLocation.Size()
		n += 1 + l + sovSpaces(uint64(l))
	}
	if m.Clock != nil {
		l = m.Clock.Size()
		n += 1 + l + sovSpaces(uint64(l))
	}
	return n
}

func (m *RequestSpaceInvite) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		l = m.Id.Size()
		n += 1 + l + sovSpaces(uint64(l))
	}
	if m.UserId != 0 {
		n += 1 + sovSpaces(uint64(m.UserId))
	}
	if m.Clock != nil {
		l = m.Clock.Size()
		n += 1 + l + sovSpaces(uint64(l))
	}
	return n
}

func (m *RequestSpaceKick) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		l = m.Id.Size()
		n += 1 + l + sovSpaces(uint64(l))
	}
	if m.UserId != 0 {
		n += 1 + sovSpaces(uint64(m.UserId))
	}
	if m.Clock != nil {
		l = m.Clock.Size()
		n += 1 + l + sovSpaces(uint64(l))
	}
	return n
}

func (m *RequestSpaceLeave) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		l = m.Id.Size()
		n += 1 + l + sovSpaces(uint64(l))
	}
	if m.UserId != 0 {
		n += 1 + sovSpaces(uint64(m.UserId))
	}
	if m.Clock != nil {
		l = m.Clock.Size()
		n += 1 + l + sovSpaces(uint64(l))
	}
	return n
}

func (m *RequestGetSpaceInviteUrl) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		l = m.Id.Size()
		n += 1 + l + sovSpaces(uint64(l))
	}
	return n
}

func (m *ResponseSpaceInviteUrl) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.InviteUrl)
	if l > 0 {
		n += 1 + l + sovSpaces(uint64(l))
	}
	return n
}

func (m *RequestRevokeSpaceInviteUrl) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		l = m.Id.Size()
		n += 1 + l + sovSpaces(uint64(l))
	}
	return n
}

func sovSpaces(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozSpaces(x uint64) (n int) {
	return sovSpaces(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *Space) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Space{`,
		`Id:` + strings.Replace(fmt.Sprintf("%v", this.Id), "UUIDValue", "UUIDValue", 1) + `,`,
		`CreatedAt:` + strings.Replace(fmt.Sprintf("%v", this.CreatedAt), "Timestamp", "types.Timestamp", 1) + `,`,
		`SpaceType:` + fmt.Sprintf("%v", this.SpaceType) + `,`,
		`Title:` + fmt.Sprintf("%v", this.Title) + `,`,
		`About:` + strings.Replace(fmt.Sprintf("%v", this.About), "StringValue", "types.StringValue", 1) + `,`,
		`Avatar:` + strings.Replace(fmt.Sprintf("%v", this.Avatar), "Avatar", "Avatar", 1) + `,`,
		`DeletedAt:` + strings.Replace(fmt.Sprintf("%v", this.DeletedAt), "Timestamp", "types.Timestamp", 1) + `,`,
		`Clock:` + strings.Replace(fmt.Sprintf("%v", this.Clock), "DataClock", "DataClock", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Space_General_) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Space_General_{`,
		`General:` + strings.Replace(fmt.Sprintf("%v", this.General), "Space_General", "Space_General", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Space_Public_) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Space_Public_{`,
		`Public:` + strings.Replace(fmt.Sprintf("%v", this.Public), "Space_Public", "Space_Public", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Space_Private_) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Space_Private_{`,
		`Private:` + strings.Replace(fmt.Sprintf("%v", this.Private), "Space_Private", "Space_Private", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Space_General) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Space_General{`,
		`}`,
	}, "")
	return s
}
func (this *Space_Public) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Space_Public{`,
		`OwnerUserId:` + fmt.Sprintf("%v", this.OwnerUserId) + `,`,
		`Shortname:` + fmt.Sprintf("%v", this.Shortname) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Space_Private) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Space_Private{`,
		`OwnerUserId:` + fmt.Sprintf("%v", this.OwnerUserId) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SpaceMember) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SpaceMember{`,
		`SpaceId:` + strings.Replace(fmt.Sprintf("%v", this.SpaceId), "UUIDValue", "UUIDValue", 1) + `,`,
		`UserId:` + fmt.Sprintf("%v", this.UserId) + `,`,
		`InvitedAt:` + strings.Replace(fmt.Sprintf("%v", this.InvitedAt), "Timestamp", "types.Timestamp", 1) + `,`,
		`JoinedAt:` + strings.Replace(fmt.Sprintf("%v", this.JoinedAt), "Timestamp", "types.Timestamp", 1) + `,`,
		`DeletedAt:` + strings.Replace(fmt.Sprintf("%v", this.DeletedAt), "Timestamp", "types.Timestamp", 1) + `,`,
		`Clock:` + strings.Replace(fmt.Sprintf("%v", this.Clock), "DataClock", "DataClock", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateSpaceModified) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateSpaceModified{`,
		`Space:` + strings.Replace(this.Space.String(), "Space", "Space", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateSpaceMemberModified) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateSpaceMemberModified{`,
		`Member:` + strings.Replace(this.Member.String(), "SpaceMember", "SpaceMember", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RequestCreateSpace) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RequestCreateSpace{`,
		`RequestId:` + fmt.Sprintf("%v", this.RequestId) + `,`,
		`Title:` + fmt.Sprintf("%v", this.Title) + `,`,
		`Shortname:` + strings.Replace(fmt.Sprintf("%v", this.Shortname), "StringValue", "types.StringValue", 1) + `,`,
		`About:` + strings.Replace(fmt.Sprintf("%v", this.About), "StringValue", "types.StringValue", 1) + `,`,
		`Avatar:` + strings.Replace(fmt.Sprintf("%v", this.Avatar), "Avatar", "Avatar", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ResponseSpace) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ResponseSpace{`,
		`Space:` + strings.Replace(this.Space.String(), "Space", "Space", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ResponseSpaceMember) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ResponseSpaceMember{`,
		`SpaceId:` + strings.Replace(fmt.Sprintf("%v", this.SpaceId), "UUIDValue", "UUIDValue", 1) + `,`,
		`Member:` + strings.Replace(this.Member.String(), "SpaceMember", "SpaceMember", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RequestDeleteSpace) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RequestDeleteSpace{`,
		`Id:` + strings.Replace(fmt.Sprintf("%v", this.Id), "UUIDValue", "UUIDValue", 1) + `,`,
		`Clock:` + strings.Replace(fmt.Sprintf("%v", this.Clock), "DataClock", "DataClock", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RequestLoadSpaces) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RequestLoadSpaces{`,
		`}`,
	}, "")
	return s
}
func (this *ResponseLoadSpaces) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForSpace := "[]*Space{"
	for _, f := range this.Space {
		repeatedStringForSpace += strings.Replace(f.String(), "Space", "Space", 1) + ","
	}
	repeatedStringForSpace += "}"
	repeatedStringForOwnerPeers := "[]*UserOutPeer{"
	for _, f := range this.OwnerPeers {
		repeatedStringForOwnerPeers += strings.Replace(fmt.Sprintf("%v", f), "UserOutPeer", "UserOutPeer", 1) + ","
	}
	repeatedStringForOwnerPeers += "}"
	s := strings.Join([]string{`&ResponseLoadSpaces{`,
		`Space:` + repeatedStringForSpace + `,`,
		`OwnerPeers:` + repeatedStringForOwnerPeers + `,`,
		`}`,
	}, "")
	return s
}
func (this *RequestStreamSpaceMembers) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RequestStreamSpaceMembers{`,
		`SpaceId:` + strings.Replace(fmt.Sprintf("%v", this.SpaceId), "UUIDValue", "UUIDValue", 1) + `,`,
		`Clock:` + strings.Replace(fmt.Sprintf("%v", this.Clock), "DataClock", "DataClock", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SpaceMemberWithPeer) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SpaceMemberWithPeer{`,
		`Member:` + strings.Replace(this.Member.String(), "SpaceMember", "SpaceMember", 1) + `,`,
		`Peer:` + strings.Replace(fmt.Sprintf("%v", this.Peer), "UserOutPeer", "UserOutPeer", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RequestSetTitle) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RequestSetTitle{`,
		`Id:` + strings.Replace(fmt.Sprintf("%v", this.Id), "UUIDValue", "UUIDValue", 1) + `,`,
		`Title:` + fmt.Sprintf("%v", this.Title) + `,`,
		`Clock:` + strings.Replace(fmt.Sprintf("%v", this.Clock), "DataClock", "DataClock", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RequestSetShortname) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RequestSetShortname{`,
		`Id:` + strings.Replace(fmt.Sprintf("%v", this.Id), "UUIDValue", "UUIDValue", 1) + `,`,
		`Shortname:` + strings.Replace(fmt.Sprintf("%v", this.Shortname), "StringValue", "types.StringValue", 1) + `,`,
		`Clock:` + strings.Replace(fmt.Sprintf("%v", this.Clock), "DataClock", "DataClock", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RequestSetAbout) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RequestSetAbout{`,
		`Id:` + strings.Replace(fmt.Sprintf("%v", this.Id), "UUIDValue", "UUIDValue", 1) + `,`,
		`About:` + strings.Replace(fmt.Sprintf("%v", this.About), "StringValue", "types.StringValue", 1) + `,`,
		`Clock:` + strings.Replace(fmt.Sprintf("%v", this.Clock), "DataClock", "DataClock", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RequestSetAvatar) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RequestSetAvatar{`,
		`Id:` + strings.Replace(fmt.Sprintf("%v", this.Id), "UUIDValue", "UUIDValue", 1) + `,`,
		`FileLocation:` + strings.Replace(fmt.Sprintf("%v", this.FileLocation), "FileLocation", "FileLocation", 1) + `,`,
		`Clock:` + strings.Replace(fmt.Sprintf("%v", this.Clock), "DataClock", "DataClock", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RequestSpaceInvite) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RequestSpaceInvite{`,
		`Id:` + strings.Replace(fmt.Sprintf("%v", this.Id), "UUIDValue", "UUIDValue", 1) + `,`,
		`UserId:` + fmt.Sprintf("%v", this.UserId) + `,`,
		`Clock:` + strings.Replace(fmt.Sprintf("%v", this.Clock), "DataClock", "DataClock", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RequestSpaceKick) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RequestSpaceKick{`,
		`Id:` + strings.Replace(fmt.Sprintf("%v", this.Id), "UUIDValue", "UUIDValue", 1) + `,`,
		`UserId:` + fmt.Sprintf("%v", this.UserId) + `,`,
		`Clock:` + strings.Replace(fmt.Sprintf("%v", this.Clock), "DataClock", "DataClock", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RequestSpaceLeave) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RequestSpaceLeave{`,
		`Id:` + strings.Replace(fmt.Sprintf("%v", this.Id), "UUIDValue", "UUIDValue", 1) + `,`,
		`UserId:` + fmt.Sprintf("%v", this.UserId) + `,`,
		`Clock:` + strings.Replace(fmt.Sprintf("%v", this.Clock), "DataClock", "DataClock", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RequestGetSpaceInviteUrl) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RequestGetSpaceInviteUrl{`,
		`Id:` + strings.Replace(fmt.Sprintf("%v", this.Id), "UUIDValue", "UUIDValue", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ResponseSpaceInviteUrl) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ResponseSpaceInviteUrl{`,
		`InviteUrl:` + fmt.Sprintf("%v", this.InviteUrl) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RequestRevokeSpaceInviteUrl) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RequestRevokeSpaceInviteUrl{`,
		`Id:` + strings.Replace(fmt.Sprintf("%v", this.Id), "UUIDValue", "UUIDValue", 1) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringSpaces(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *Space) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSpaces
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Space: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Space: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpaces
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSpaces
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSpaces
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Id == nil {
				m.Id = &UUIDValue{}
			}
			if err := m.Id.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpaces
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSpaces
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSpaces
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CreatedAt == nil {
				m.CreatedAt = &types.Timestamp{}
			}
			if err := m.CreatedAt.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field General", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpaces
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSpaces
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSpaces
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &Space_General{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.SpaceType = &Space_General_{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Public", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpaces
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSpaces
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSpaces
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &Space_Public{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.SpaceType = &Space_Public_{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Private", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpaces
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSpaces
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSpaces
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &Space_Private{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.SpaceType = &Space_Private_{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpaces
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSpaces
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSpaces
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field About", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpaces
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSpaces
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSpaces
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.About == nil {
				m.About = &types.StringValue{}
			}
			if err := m.About.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Avatar", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpaces
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSpaces
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSpaces
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Avatar == nil {
				m.Avatar = &Avatar{}
			}
			if err := m.Avatar.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeletedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpaces
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSpaces
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSpaces
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DeletedAt == nil {
				m.DeletedAt = &types.Timestamp{}
			}
			if err := m.DeletedAt.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Clock", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpaces
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSpaces
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSpaces
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Clock == nil {
				m.Clock = &DataClock{}
			}
			if err := m.Clock.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSpaces(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSpaces
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSpaces
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Space_General) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSpaces
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: General: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: General: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipSpaces(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSpaces
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSpaces
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Space_Public) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSpaces
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Public: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Public: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OwnerUserId", wireType)
			}
			m.OwnerUserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpaces
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OwnerUserId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Shortname", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpaces
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSpaces
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSpaces
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Shortname = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSpaces(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSpaces
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSpaces
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Space_Private) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSpaces
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Private: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Private: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OwnerUserId", wireType)
			}
			m.OwnerUserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpaces
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OwnerUserId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSpaces(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSpaces
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSpaces
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SpaceMember) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSpaces
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SpaceMember: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SpaceMember: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SpaceId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpaces
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSpaces
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSpaces
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SpaceId == nil {
				m.SpaceId = &UUIDValue{}
			}
			if err := m.SpaceId.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpaces
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InvitedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpaces
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSpaces
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSpaces
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.InvitedAt == nil {
				m.InvitedAt = &types.Timestamp{}
			}
			if err := m.InvitedAt.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JoinedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpaces
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSpaces
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSpaces
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.JoinedAt == nil {
				m.JoinedAt = &types.Timestamp{}
			}
			if err := m.JoinedAt.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeletedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpaces
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSpaces
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSpaces
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DeletedAt == nil {
				m.DeletedAt = &types.Timestamp{}
			}
			if err := m.DeletedAt.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Clock", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpaces
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSpaces
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSpaces
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Clock == nil {
				m.Clock = &DataClock{}
			}
			if err := m.Clock.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSpaces(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSpaces
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSpaces
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateSpaceModified) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSpaces
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateSpaceModified: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateSpaceModified: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Space", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpaces
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSpaces
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSpaces
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Space == nil {
				m.Space = &Space{}
			}
			if err := m.Space.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSpaces(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSpaces
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSpaces
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateSpaceMemberModified) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSpaces
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateSpaceMemberModified: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateSpaceMemberModified: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Member", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpaces
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSpaces
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSpaces
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Member == nil {
				m.Member = &SpaceMember{}
			}
			if err := m.Member.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSpaces(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSpaces
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSpaces
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestCreateSpace) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSpaces
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestCreateSpace: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestCreateSpace: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestId", wireType)
			}
			m.RequestId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpaces
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RequestId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpaces
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSpaces
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSpaces
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Shortname", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpaces
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSpaces
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSpaces
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Shortname == nil {
				m.Shortname = &types.StringValue{}
			}
			if err := m.Shortname.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field About", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpaces
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSpaces
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSpaces
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.About == nil {
				m.About = &types.StringValue{}
			}
			if err := m.About.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Avatar", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpaces
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSpaces
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSpaces
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Avatar == nil {
				m.Avatar = &Avatar{}
			}
			if err := m.Avatar.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSpaces(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSpaces
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSpaces
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResponseSpace) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSpaces
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResponseSpace: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResponseSpace: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Space", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpaces
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSpaces
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSpaces
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Space == nil {
				m.Space = &Space{}
			}
			if err := m.Space.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSpaces(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSpaces
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSpaces
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResponseSpaceMember) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSpaces
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResponseSpaceMember: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResponseSpaceMember: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SpaceId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpaces
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSpaces
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSpaces
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SpaceId == nil {
				m.SpaceId = &UUIDValue{}
			}
			if err := m.SpaceId.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Member", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpaces
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSpaces
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSpaces
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Member == nil {
				m.Member = &SpaceMember{}
			}
			if err := m.Member.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSpaces(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSpaces
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSpaces
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestDeleteSpace) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSpaces
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestDeleteSpace: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestDeleteSpace: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpaces
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSpaces
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSpaces
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Id == nil {
				m.Id = &UUIDValue{}
			}
			if err := m.Id.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Clock", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpaces
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSpaces
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSpaces
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Clock == nil {
				m.Clock = &DataClock{}
			}
			if err := m.Clock.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSpaces(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSpaces
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSpaces
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestLoadSpaces) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSpaces
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestLoadSpaces: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestLoadSpaces: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipSpaces(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSpaces
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSpaces
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResponseLoadSpaces) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSpaces
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResponseLoadSpaces: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResponseLoadSpaces: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Space", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpaces
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSpaces
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSpaces
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Space = append(m.Space, &Space{})
			if err := m.Space[len(m.Space)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OwnerPeers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpaces
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSpaces
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSpaces
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OwnerPeers = append(m.OwnerPeers, &UserOutPeer{})
			if err := m.OwnerPeers[len(m.OwnerPeers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSpaces(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSpaces
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSpaces
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestStreamSpaceMembers) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSpaces
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestStreamSpaceMembers: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestStreamSpaceMembers: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SpaceId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpaces
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSpaces
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSpaces
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SpaceId == nil {
				m.SpaceId = &UUIDValue{}
			}
			if err := m.SpaceId.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Clock", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpaces
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSpaces
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSpaces
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Clock == nil {
				m.Clock = &DataClock{}
			}
			if err := m.Clock.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSpaces(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSpaces
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSpaces
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SpaceMemberWithPeer) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSpaces
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SpaceMemberWithPeer: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SpaceMemberWithPeer: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Member", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpaces
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSpaces
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSpaces
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Member == nil {
				m.Member = &SpaceMember{}
			}
			if err := m.Member.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Peer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpaces
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSpaces
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSpaces
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Peer == nil {
				m.Peer = &UserOutPeer{}
			}
			if err := m.Peer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSpaces(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSpaces
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSpaces
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestSetTitle) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSpaces
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestSetTitle: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestSetTitle: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpaces
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSpaces
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSpaces
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Id == nil {
				m.Id = &UUIDValue{}
			}
			if err := m.Id.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpaces
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSpaces
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSpaces
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Clock", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpaces
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSpaces
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSpaces
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Clock == nil {
				m.Clock = &DataClock{}
			}
			if err := m.Clock.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSpaces(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSpaces
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSpaces
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestSetShortname) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSpaces
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestSetShortname: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestSetShortname: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpaces
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSpaces
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSpaces
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Id == nil {
				m.Id = &UUIDValue{}
			}
			if err := m.Id.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Shortname", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpaces
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSpaces
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSpaces
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Shortname == nil {
				m.Shortname = &types.StringValue{}
			}
			if err := m.Shortname.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Clock", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpaces
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSpaces
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSpaces
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Clock == nil {
				m.Clock = &DataClock{}
			}
			if err := m.Clock.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSpaces(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSpaces
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSpaces
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestSetAbout) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSpaces
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestSetAbout: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestSetAbout: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpaces
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSpaces
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSpaces
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Id == nil {
				m.Id = &UUIDValue{}
			}
			if err := m.Id.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field About", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpaces
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSpaces
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSpaces
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.About == nil {
				m.About = &types.StringValue{}
			}
			if err := m.About.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Clock", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpaces
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSpaces
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSpaces
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Clock == nil {
				m.Clock = &DataClock{}
			}
			if err := m.Clock.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSpaces(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSpaces
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSpaces
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestSetAvatar) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSpaces
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestSetAvatar: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestSetAvatar: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpaces
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSpaces
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSpaces
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Id == nil {
				m.Id = &UUIDValue{}
			}
			if err := m.Id.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FileLocation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpaces
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSpaces
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSpaces
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FileLocation == nil {
				m.FileLocation = &FileLocation{}
			}
			if err := m.FileLocation.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Clock", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpaces
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSpaces
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSpaces
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Clock == nil {
				m.Clock = &DataClock{}
			}
			if err := m.Clock.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSpaces(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSpaces
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSpaces
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestSpaceInvite) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSpaces
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestSpaceInvite: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestSpaceInvite: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpaces
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSpaces
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSpaces
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Id == nil {
				m.Id = &UUIDValue{}
			}
			if err := m.Id.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpaces
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Clock", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpaces
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSpaces
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSpaces
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Clock == nil {
				m.Clock = &DataClock{}
			}
			if err := m.Clock.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSpaces(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSpaces
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSpaces
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestSpaceKick) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSpaces
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestSpaceKick: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestSpaceKick: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpaces
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSpaces
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSpaces
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Id == nil {
				m.Id = &UUIDValue{}
			}
			if err := m.Id.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpaces
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Clock", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpaces
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSpaces
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSpaces
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Clock == nil {
				m.Clock = &DataClock{}
			}
			if err := m.Clock.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSpaces(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSpaces
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSpaces
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestSpaceLeave) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSpaces
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestSpaceLeave: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestSpaceLeave: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpaces
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSpaces
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSpaces
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Id == nil {
				m.Id = &UUIDValue{}
			}
			if err := m.Id.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpaces
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Clock", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpaces
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSpaces
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSpaces
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Clock == nil {
				m.Clock = &DataClock{}
			}
			if err := m.Clock.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSpaces(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSpaces
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSpaces
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestGetSpaceInviteUrl) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSpaces
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestGetSpaceInviteUrl: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestGetSpaceInviteUrl: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpaces
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSpaces
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSpaces
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Id == nil {
				m.Id = &UUIDValue{}
			}
			if err := m.Id.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSpaces(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSpaces
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSpaces
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResponseSpaceInviteUrl) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSpaces
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResponseSpaceInviteUrl: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResponseSpaceInviteUrl: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InviteUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpaces
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSpaces
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSpaces
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InviteUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSpaces(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSpaces
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSpaces
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestRevokeSpaceInviteUrl) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSpaces
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestRevokeSpaceInviteUrl: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestRevokeSpaceInviteUrl: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpaces
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSpaces
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSpaces
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Id == nil {
				m.Id = &UUIDValue{}
			}
			if err := m.Id.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSpaces(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSpaces
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSpaces
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipSpaces(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowSpaces
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSpaces
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSpaces
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthSpaces
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupSpaces
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthSpaces
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthSpaces        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowSpaces          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupSpaces = fmt.Errorf("proto: unexpected end of group")
)
